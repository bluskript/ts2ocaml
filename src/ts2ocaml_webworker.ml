[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Ts2ocaml_min
open Ts2ocaml_es
module DOMHighResTimeStamp =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> Ojs.float_of_js x2
    and t_to_js : t -> Ojs.t = fun (x1 : float) -> Ojs.float_to_js x1
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4 : Ojs.t) -> t_of_js x4
    and t_0_to_js : t_0 -> Ojs.t = fun (x3 : t) -> t_to_js x3
  end
module PerformanceMeasureOptions =
  struct
    type t = [ `PerformanceMeasureOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6 : Ojs.t) -> t_of_js x6
    and t_0_to_js : t_0 -> Ojs.t = fun (x5 : t) -> t_to_js x5
    type tags = [ `PerformanceMeasureOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceMeasureOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x9 : Ojs.t) -> intf_of_js __tags_of_js x9
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7 : __tags intf) -> intf_to_js __tags_to_js x7
    let (get_detail : 'tags this -> any option) =
      fun (x11 : 'tags this) ->
        Ojs.option_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11) "detail")
    let (set_detail : 'tags this -> any -> unit) =
      fun (x14 : 'tags this) ->
        fun (x15 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14) "detail"
            (any_to_js x15)
    let (get_duration : 'tags this -> DOMHighResTimeStamp.t option) =
      fun (x17 : 'tags this) ->
        Ojs.option_of_js DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x17) "duration")
    let (set_duration : 'tags this -> DOMHighResTimeStamp.t -> unit) =
      fun (x20 : 'tags this) ->
        fun (x21 : DOMHighResTimeStamp.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x20) "duration"
            (DOMHighResTimeStamp.t_to_js x21)
    let (get_end :
      'tags this ->
        [ `String of string  | `Other of DOMHighResTimeStamp.t ] Primitive.t
          option)
      =
      fun (x23 : 'tags this) ->
        Ojs.option_of_js
          (fun (x25 : Ojs.t) ->
             Primitive.t_of_js
               (fun (x26 : Ojs.t) ->
                  let x27 = x26 in
                  match Ojs.string_of_js (Ojs.get_prop_ascii x27 "dummy")
                  with
                  | "String" -> `String (Ojs.string_of_js x27)
                  | "Other" -> `Other (DOMHighResTimeStamp.t_of_js x27)
                  | _ -> assert false) x25)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x23) "end")
    let (set_end :
      'tags this -> [ `U1 of string  | `U2 of DOMHighResTimeStamp.t ] -> unit)
      =
      fun (x28 : 'tags this) ->
        fun (x29 : [ `U1 of string  | `U2 of DOMHighResTimeStamp.t ]) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x28) "end"
            (match x29 with
             | `U1 x30 -> Ojs.string_to_js x30
             | `U2 x31 -> DOMHighResTimeStamp.t_to_js x31)
    let (get_start :
      'tags this ->
        [ `String of string  | `Other of DOMHighResTimeStamp.t ] Primitive.t
          option)
      =
      fun (x33 : 'tags this) ->
        Ojs.option_of_js
          (fun (x35 : Ojs.t) ->
             Primitive.t_of_js
               (fun (x36 : Ojs.t) ->
                  let x37 = x36 in
                  match Ojs.string_of_js (Ojs.get_prop_ascii x37 "dummy")
                  with
                  | "String" -> `String (Ojs.string_of_js x37)
                  | "Other" -> `Other (DOMHighResTimeStamp.t_of_js x37)
                  | _ -> assert false) x35)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x33) "start")
    let (set_start :
      'tags this -> [ `U1 of string  | `U2 of DOMHighResTimeStamp.t ] -> unit)
      =
      fun (x38 : 'tags this) ->
        fun (x39 : [ `U1 of string  | `U2 of DOMHighResTimeStamp.t ]) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x38) "start"
            (match x39 with
             | `U1 x40 -> Ojs.string_to_js x40
             | `U2 x41 -> DOMHighResTimeStamp.t_to_js x41)
    let (create :
      ?detail:any ->
        ?duration:DOMHighResTimeStamp.t ->
          ?end_:[ `String of string  | `Other of DOMHighResTimeStamp.t ]
            Primitive.t ->
            ?start:[ `String of string  | `Other of DOMHighResTimeStamp.t ]
              Primitive.t -> unit -> t)
      =
      fun ?detail:(x43 : any option) ->
        fun ?duration:(x44 : DOMHighResTimeStamp.t option) ->
          fun
            ?end_:(x45 :
                    [ `String of string  | `Other of DOMHighResTimeStamp.t ]
                      Primitive.t option)
            ->
            fun
              ?start:(x46 :
                       [ `String of string 
                       | `Other of DOMHighResTimeStamp.t ] Primitive.t option)
              ->
              fun () ->
                let x47 = Ojs.empty_obj () in
                (match x43 with
                 | Some x57 ->
                     Ojs.set_prop_ascii x47 "detail" (any_to_js x57)
                 | None -> ());
                (match x44 with
                 | Some x56 ->
                     Ojs.set_prop_ascii x47 "duration"
                       (DOMHighResTimeStamp.t_to_js x56)
                 | None -> ());
                (match x45 with
                 | Some x52 ->
                     Ojs.set_prop_ascii x47 "end"
                       (Primitive.t_to_js
                          (fun
                             (x53 :
                               [ `String of string 
                               | `Other of DOMHighResTimeStamp.t ])
                             ->
                             match x53 with
                             | `String x54 -> Ojs.string_to_js x54
                             | `Other x55 -> DOMHighResTimeStamp.t_to_js x55)
                          x52)
                 | None -> ());
                (match x46 with
                 | Some x48 ->
                     Ojs.set_prop_ascii x47 "start"
                       (Primitive.t_to_js
                          (fun
                             (x49 :
                               [ `String of string 
                               | `Other of DOMHighResTimeStamp.t ])
                             ->
                             match x49 with
                             | `String x50 -> Ojs.string_to_js x50
                             | `Other x51 -> DOMHighResTimeStamp.t_to_js x51)
                          x48)
                 | None -> ());
                t_of_js x47
    let cast_from = Obj.magic
  end
module PerformanceEntry =
  struct
    type t = [ `PerformanceEntry ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x59 : Ojs.t) -> t_of_js x59
    and t_0_to_js : t_0 -> Ojs.t = fun (x58 : t) -> t_to_js x58
    type tags = [ `PerformanceEntry ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceEntry ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x62 : Ojs.t) -> intf_of_js __tags_of_js x62
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x60 : __tags intf) -> intf_to_js __tags_to_js x60
    let (get_duration : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x64 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x64) "duration")
    let (get_entryType : 'tags this -> string) =
      fun (x66 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x66) "entryType")
    let (get_name : 'tags this -> string) =
      fun (x68 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x68) "name")
    let (get_startTime : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x70 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x70) "startTime")
    let (toJSON : 'tags this -> any) =
      fun (x72 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x72) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceEntry") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PerformanceEntry")
             [||])
  end
module PerformanceMeasure =
  struct
    type t = [ `PerformanceEntry  | `PerformanceMeasure ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x75 : Ojs.t) -> t_of_js x75
    and t_0_to_js : t_0 -> Ojs.t = fun (x74 : t) -> t_to_js x74
    type tags = [ `PerformanceEntry  | `PerformanceMeasure ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceMeasure ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x78 : Ojs.t) -> intf_of_js __tags_of_js x78
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x76 : __tags intf) -> intf_to_js __tags_to_js x76
    let (get_detail : 'tags this -> any) =
      fun (x80 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x80) "detail")
    let (create : detail:any -> unit -> t) =
      fun ~detail:(x82 : any) ->
        fun () ->
          let x83 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x83 "detail" (any_to_js x82); t_of_js x83
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceMeasure") "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PerformanceMeasure")
             [||])
  end
module PerformanceMarkOptions =
  struct
    type t = [ `PerformanceMarkOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x85 : Ojs.t) -> t_of_js x85
    and t_0_to_js : t_0 -> Ojs.t = fun (x84 : t) -> t_to_js x84
    type tags = [ `PerformanceMarkOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceMarkOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x88 : Ojs.t) -> intf_of_js __tags_of_js x88
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x86 : __tags intf) -> intf_to_js __tags_to_js x86
    let (get_detail : 'tags this -> any option) =
      fun (x90 : 'tags this) ->
        Ojs.option_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x90) "detail")
    let (set_detail : 'tags this -> any -> unit) =
      fun (x93 : 'tags this) ->
        fun (x94 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x93) "detail"
            (any_to_js x94)
    let (get_startTime : 'tags this -> DOMHighResTimeStamp.t option) =
      fun (x96 : 'tags this) ->
        Ojs.option_of_js DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x96) "startTime")
    let (set_startTime : 'tags this -> DOMHighResTimeStamp.t -> unit) =
      fun (x99 : 'tags this) ->
        fun (x100 : DOMHighResTimeStamp.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x99) "startTime"
            (DOMHighResTimeStamp.t_to_js x100)
    let (create :
      ?detail:any -> ?startTime:DOMHighResTimeStamp.t -> unit -> t) =
      fun ?detail:(x102 : any option) ->
        fun ?startTime:(x103 : DOMHighResTimeStamp.t option) ->
          fun () ->
            let x104 = Ojs.empty_obj () in
            (match x102 with
             | Some x106 -> Ojs.set_prop_ascii x104 "detail" (any_to_js x106)
             | None -> ());
            (match x103 with
             | Some x105 ->
                 Ojs.set_prop_ascii x104 "startTime"
                   (DOMHighResTimeStamp.t_to_js x105)
             | None -> ());
            t_of_js x104
    let cast_from = Obj.magic
  end
module PerformanceMark =
  struct
    type t = [ `PerformanceEntry  | `PerformanceMark ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x108 : Ojs.t) -> t_of_js x108
    and t_0_to_js : t_0 -> Ojs.t = fun (x107 : t) -> t_to_js x107
    type tags = [ `PerformanceEntry  | `PerformanceMark ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceMark ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x111 : Ojs.t) -> intf_of_js __tags_of_js x111
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x109 : __tags intf) -> intf_to_js __tags_to_js x109
    let (get_detail : 'tags this -> any) =
      fun (x113 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x113) "detail")
    let (create : detail:any -> unit -> t) =
      fun ~detail:(x115 : any) ->
        fun () ->
          let x116 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x116 "detail" (any_to_js x115); t_of_js x116
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceMark") "prototype")
    let (create' :
      markName:string -> ?markOptions:PerformanceMarkOptions.t -> unit -> t)
      =
      fun ~markName:(x117 : string) ->
        fun ?markOptions:(x118 : PerformanceMarkOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "PerformanceMark")
                 (let x119 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x119 "push" [|(Ojs.string_to_js x117)|]);
                  (match x118 with
                   | Some x120 ->
                       ignore
                         (Ojs.call x119 "push"
                            [|(PerformanceMarkOptions.t_to_js x120)|])
                   | None -> ());
                  x119))
  end
module PerformanceEntryList =
  struct
    type t = PerformanceEntry.t list
    let rec t_of_js : Ojs.t -> t =
      fun (x123 : Ojs.t) -> Ojs.list_of_js PerformanceEntry.t_of_js x123
    and t_to_js : t -> Ojs.t =
      fun (x121 : PerformanceEntry.t list) ->
        Ojs.list_to_js PerformanceEntry.t_to_js x121
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x126 : Ojs.t) -> t_of_js x126
    and t_0_to_js : t_0 -> Ojs.t = fun (x125 : t) -> t_to_js x125
  end
module EventInit =
  struct
    type t = [ `EventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x128 : Ojs.t) -> t_of_js x128
    and t_0_to_js : t_0 -> Ojs.t = fun (x127 : t) -> t_to_js x127
    type tags = [ `EventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x131 : Ojs.t) -> intf_of_js __tags_of_js x131
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x129 : __tags intf) -> intf_to_js __tags_to_js x129
    let (get_bubbles : 'tags this -> bool option) =
      fun (x133 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x133) "bubbles")
    let (set_bubbles : 'tags this -> bool -> unit) =
      fun (x136 : 'tags this) ->
        fun (x137 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x136) "bubbles"
            (Ojs.bool_to_js x137)
    let (get_cancelable : 'tags this -> bool option) =
      fun (x139 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x139) "cancelable")
    let (set_cancelable : 'tags this -> bool -> unit) =
      fun (x142 : 'tags this) ->
        fun (x143 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x142) "cancelable"
            (Ojs.bool_to_js x143)
    let (get_composed : 'tags this -> bool option) =
      fun (x145 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x145) "composed")
    let (set_composed : 'tags this -> bool -> unit) =
      fun (x148 : 'tags this) ->
        fun (x149 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x148) "composed"
            (Ojs.bool_to_js x149)
    let (create :
      ?bubbles:bool -> ?cancelable:bool -> ?composed:bool -> unit -> t) =
      fun ?bubbles:(x151 : bool option) ->
        fun ?cancelable:(x152 : bool option) ->
          fun ?composed:(x153 : bool option) ->
            fun () ->
              let x154 = Ojs.empty_obj () in
              (match x151 with
               | Some x157 ->
                   Ojs.set_prop_ascii x154 "bubbles" (Ojs.bool_to_js x157)
               | None -> ());
              (match x152 with
               | Some x156 ->
                   Ojs.set_prop_ascii x154 "cancelable" (Ojs.bool_to_js x156)
               | None -> ());
              (match x153 with
               | Some x155 ->
                   Ojs.set_prop_ascii x154 "composed" (Ojs.bool_to_js x155)
               | None -> ());
              t_of_js x154
    let cast_from = Obj.magic
  end
module EventListenerOptions =
  struct
    type t = [ `EventListenerOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x159 : Ojs.t) -> t_of_js x159
    and t_0_to_js : t_0 -> Ojs.t = fun (x158 : t) -> t_to_js x158
    type tags = [ `EventListenerOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EventListenerOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x162 : Ojs.t) -> intf_of_js __tags_of_js x162
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x160 : __tags intf) -> intf_to_js __tags_to_js x160
    let (get_capture : 'tags this -> bool option) =
      fun (x164 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x164) "capture")
    let (set_capture : 'tags this -> bool -> unit) =
      fun (x167 : 'tags this) ->
        fun (x168 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x167) "capture"
            (Ojs.bool_to_js x168)
    let (create : ?capture:bool -> unit -> t) =
      fun ?capture:(x170 : bool option) ->
        fun () ->
          let x171 = Ojs.empty_obj () in
          (match x170 with
           | Some x172 ->
               Ojs.set_prop_ascii x171 "capture" (Ojs.bool_to_js x172)
           | None -> ());
          t_of_js x171
    let cast_from = Obj.magic
  end
module rec
  AbortSignal:sig
                type t = [ `AbortSignal  | `EventTarget ] intf
                type t_0 = t
                [@@@js.stop ]
                type tags = [ `AbortSignal  | `EventTarget ]
                type tags_0 = tags
                [@@@js.start ]
                [@@@js.implem
                  type tags = [ `AbortSignal  | `EventTarget ]
                  type tags_0 = tags]
                type 'tags this =
                  'tags intf constraint 'tags = [> `AbortSignal ]
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
                val get_aborted : 'tags this -> bool
                val get_onabort :
                  'tags this -> (this:t -> ev:Event.t -> any) option
                val set_onabort :
                  'tags this -> (this:t -> ev:Event.t -> any) option -> unit
                val addEventListener :
                  'tags this ->
                    type_:'K ->
                      listener:(this:t -> ev:any -> any) ->
                        ?options:[ `U1 of bool 
                                 | `U2 of AddEventListenerOptions.t ]
                          -> unit -> unit
                val addEventListener' :
                  'tags this ->
                    type_:string ->
                      listener:EventListenerOrEventListenerObject.t ->
                        ?options:[ `U1 of bool 
                                 | `U2 of AddEventListenerOptions.t ]
                          -> unit -> unit
                val removeEventListener :
                  'tags this ->
                    type_:'K ->
                      listener:(this:t -> ev:any -> any) ->
                        ?options:[ `U1 of bool 
                                 | `U2 of EventListenerOptions.t ]
                          -> unit -> unit
                val removeEventListener' :
                  'tags this ->
                    type_:string ->
                      listener:EventListenerOrEventListenerObject.t ->
                        ?options:[ `U1 of bool 
                                 | `U2 of EventListenerOptions.t ]
                          -> unit -> unit
                val cast_from : 'tags this -> t
                val prototype : unit -> t
                val create : unit -> t
              end =
  struct
    type t = [ `AbortSignal  | `EventTarget ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x174 : Ojs.t) -> t_of_js x174
    and t_0_to_js : t_0 -> Ojs.t = fun (x173 : t) -> t_to_js x173
    type tags = [ `AbortSignal  | `EventTarget ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AbortSignal ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x177 : Ojs.t) -> intf_of_js __tags_of_js x177
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x175 : __tags intf) -> intf_to_js __tags_to_js x175
    let (get_aborted : 'tags this -> bool) =
      fun (x179 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x179) "aborted")
    let (get_onabort : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x181 : 'tags this) ->
        Ojs.option_of_js
          (fun (x183 : Ojs.t) ->
             fun ~this:(x184 : t) ->
               fun ~ev:(x185 : Event.t) ->
                 any_of_js
                   (Ojs.apply x183 [|(t_to_js x184);(Event.t_to_js x185)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x181) "onabort")
    let (set_onabort :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x186 : 'tags this) ->
        fun (x187 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x186) "onabort"
            (Ojs.option_to_js
               (fun (x188 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x189 : Ojs.t) ->
                       fun (x190 : Ojs.t) ->
                         any_to_js
                           (x188 ~this:(t_of_js x189)
                              ~ev:(Event.t_of_js x190)))) x187)
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x201 : 'tags this) ->
        fun ~type_:(x192 : 'K) ->
          fun ~listener:(x193 : this:t -> ev:any -> any) ->
            fun
              ?options:(x194 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x203 = this_to_js Obj.magic x201 in
                   Ojs.call (Ojs.get_prop_ascii x203 "addEventListener")
                     "apply"
                     [|x203;((let x195 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x195 "push" [|(Obj.magic x192)|]);
                              ignore
                                (Ojs.call x195 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x199 : Ojs.t) ->
                                           fun (x200 : Ojs.t) ->
                                             any_to_js
                                               (x193 ~this:(t_of_js x199)
                                                  ~ev:(any_of_js x200))))|]);
                              (match x194 with
                               | Some x196 ->
                                   ignore
                                     (Ojs.call x195 "push"
                                        [|((match x196 with
                                            | `U1 x197 -> Ojs.bool_to_js x197
                                            | `U2 x198 ->
                                                AddEventListenerOptions.t_to_js
                                                  x198))|])
                               | None -> ());
                              x195))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x211 : 'tags this) ->
        fun ~type_:(x204 : string) ->
          fun ~listener:(x205 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x206 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x213 = this_to_js Obj.magic x211 in
                   Ojs.call (Ojs.get_prop_ascii x213 "addEventListener")
                     "apply"
                     [|x213;((let x207 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x207 "push"
                                   [|(Ojs.string_to_js x204)|]);
                              ignore
                                (Ojs.call x207 "push"
                                   [|(EventListenerOrEventListenerObject.t_to_js
                                        x205)|]);
                              (match x206 with
                               | Some x208 ->
                                   ignore
                                     (Ojs.call x207 "push"
                                        [|((match x208 with
                                            | `U1 x209 -> Ojs.bool_to_js x209
                                            | `U2 x210 ->
                                                AddEventListenerOptions.t_to_js
                                                  x210))|])
                               | None -> ());
                              x207))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x223 : 'tags this) ->
        fun ~type_:(x214 : 'K) ->
          fun ~listener:(x215 : this:t -> ev:any -> any) ->
            fun
              ?options:(x216 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x225 = this_to_js Obj.magic x223 in
                   Ojs.call (Ojs.get_prop_ascii x225 "removeEventListener")
                     "apply"
                     [|x225;((let x217 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x217 "push" [|(Obj.magic x214)|]);
                              ignore
                                (Ojs.call x217 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x221 : Ojs.t) ->
                                           fun (x222 : Ojs.t) ->
                                             any_to_js
                                               (x215 ~this:(t_of_js x221)
                                                  ~ev:(any_of_js x222))))|]);
                              (match x216 with
                               | Some x218 ->
                                   ignore
                                     (Ojs.call x217 "push"
                                        [|((match x218 with
                                            | `U1 x219 -> Ojs.bool_to_js x219
                                            | `U2 x220 ->
                                                EventListenerOptions.t_to_js
                                                  x220))|])
                               | None -> ());
                              x217))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x233 : 'tags this) ->
        fun ~type_:(x226 : string) ->
          fun ~listener:(x227 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x228 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x235 = this_to_js Obj.magic x233 in
                   Ojs.call (Ojs.get_prop_ascii x235 "removeEventListener")
                     "apply"
                     [|x235;((let x229 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x229 "push"
                                   [|(Ojs.string_to_js x226)|]);
                              ignore
                                (Ojs.call x229 "push"
                                   [|(EventListenerOrEventListenerObject.t_to_js
                                        x227)|]);
                              (match x228 with
                               | Some x230 ->
                                   ignore
                                     (Ojs.call x229 "push"
                                        [|((match x230 with
                                            | `U1 x231 -> Ojs.bool_to_js x231
                                            | `U2 x232 ->
                                                EventListenerOptions.t_to_js
                                                  x232))|])
                               | None -> ());
                              x229))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "AbortSignal")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "AbortSignal") [||])
  end
 and
  AddEventListenerOptions:sig
                            type t =
                              [ `AddEventListenerOptions 
                              | `EventListenerOptions ] intf
                            type t_0 = t
                            [@@@js.stop ]
                            type tags =
                              [ `AddEventListenerOptions 
                              | `EventListenerOptions ]
                            type tags_0 = tags
                            [@@@js.start ]
                            [@@@js.implem
                              type tags =
                                [ `AddEventListenerOptions 
                                | `EventListenerOptions ]
                              type tags_0 = tags]
                            type 'tags this =
                              'tags intf constraint 'tags =
                                          [> `AddEventListenerOptions ]
                            val t_to_js : t -> Ojs.t
                            val t_of_js : Ojs.t -> t
                            val t_0_to_js : t_0 -> Ojs.t
                            val t_0_of_js : Ojs.t -> t_0
                            val get_once : 'tags this -> bool option
                            val set_once : 'tags this -> bool -> unit
                            val get_passive : 'tags this -> bool option
                            val set_passive : 'tags this -> bool -> unit
                            val get_signal :
                              'tags this -> AbortSignal.t option
                            val set_signal :
                              'tags this -> AbortSignal.t -> unit
                            val create :
                              ?once:bool ->
                                ?passive:bool ->
                                  ?signal:AbortSignal.t -> unit -> t
                            val cast_from : 'tags this -> t
                          end =
  struct
    type t = [ `AddEventListenerOptions  | `EventListenerOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x237 : Ojs.t) -> t_of_js x237
    and t_0_to_js : t_0 -> Ojs.t = fun (x236 : t) -> t_to_js x236
    type tags = [ `AddEventListenerOptions  | `EventListenerOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `AddEventListenerOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x240 : Ojs.t) -> intf_of_js __tags_of_js x240
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x238 : __tags intf) -> intf_to_js __tags_to_js x238
    let (get_once : 'tags this -> bool option) =
      fun (x242 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x242) "once")
    let (set_once : 'tags this -> bool -> unit) =
      fun (x245 : 'tags this) ->
        fun (x246 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x245) "once"
            (Ojs.bool_to_js x246)
    let (get_passive : 'tags this -> bool option) =
      fun (x248 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x248) "passive")
    let (set_passive : 'tags this -> bool -> unit) =
      fun (x251 : 'tags this) ->
        fun (x252 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x251) "passive"
            (Ojs.bool_to_js x252)
    let (get_signal : 'tags this -> AbortSignal.t option) =
      fun (x254 : 'tags this) ->
        Ojs.option_of_js AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x254) "signal")
    let (set_signal : 'tags this -> AbortSignal.t -> unit) =
      fun (x257 : 'tags this) ->
        fun (x258 : AbortSignal.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x257) "signal"
            (AbortSignal.t_to_js x258)
    let (create :
      ?once:bool -> ?passive:bool -> ?signal:AbortSignal.t -> unit -> t) =
      fun ?once:(x260 : bool option) ->
        fun ?passive:(x261 : bool option) ->
          fun ?signal:(x262 : AbortSignal.t option) ->
            fun () ->
              let x263 = Ojs.empty_obj () in
              (match x260 with
               | Some x266 ->
                   Ojs.set_prop_ascii x263 "once" (Ojs.bool_to_js x266)
               | None -> ());
              (match x261 with
               | Some x265 ->
                   Ojs.set_prop_ascii x263 "passive" (Ojs.bool_to_js x265)
               | None -> ());
              (match x262 with
               | Some x264 ->
                   Ojs.set_prop_ascii x263 "signal"
                     (AbortSignal.t_to_js x264)
               | None -> ());
              t_of_js x263
    let cast_from = Obj.magic
  end and
       Event:sig
               type t = [ `Event ] intf
               type t_0 = t
               [@@@js.stop ]
               type tags = [ `Event ]
               type tags_0 = tags
               [@@@js.start ]
               [@@@js.implem type tags = [ `Event ]
                 type tags_0 = tags]
               type 'tags this = 'tags intf constraint 'tags = [> `Event ]
               val t_to_js : t -> Ojs.t
               val t_of_js : Ojs.t -> t
               val t_0_to_js : t_0 -> Ojs.t
               val t_0_of_js : Ojs.t -> t_0
               val get_bubbles : 'tags this -> bool
               val get_cancelBubble : 'tags this -> bool
               val set_cancelBubble : 'tags this -> bool -> unit
               val get_cancelable : 'tags this -> bool
               val get_composed : 'tags this -> bool
               val get_currentTarget : 'tags this -> EventTarget.t option
               val get_defaultPrevented : 'tags this -> bool
               val get_eventPhase : 'tags this -> float
               val get_isTrusted : 'tags this -> bool
               val get_returnValue : 'tags this -> bool
               val set_returnValue : 'tags this -> bool -> unit
               val get_srcElement : 'tags this -> EventTarget.t option
               val get_target : 'tags this -> EventTarget.t option
               val get_timeStamp : 'tags this -> DOMHighResTimeStamp.t
               val get_type : 'tags this -> string
               val composedPath : 'tags this -> EventTarget.t list
               val initEvent :
                 'tags this ->
                   type_:string ->
                     ?bubbles:bool -> ?cancelable:bool -> unit -> unit
               val preventDefault : 'tags this -> unit
               val stopImmediatePropagation : 'tags this -> unit
               val stopPropagation : 'tags this -> unit
               val get_AT_TARGET : 'tags this -> float
               val get_BUBBLING_PHASE : 'tags this -> float
               val get_CAPTURING_PHASE : 'tags this -> float
               val get_NONE : 'tags this -> float
               val cast_from : 'tags this -> t
               val prototype : unit -> t
               val create :
                 type_:string -> ?eventInitDict:EventInit.t -> unit -> t
               val at_target : unit -> float
               val bubbling_phase : unit -> float
               val capturing_phase : unit -> float
               val none : unit -> float
             end =
       struct
         type t = [ `Event ] intf
         let rec t_of_js : Ojs.t -> t = Obj.magic
         and t_to_js : t -> Ojs.t = Obj.magic
         type t_0 = t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x268 : Ojs.t) -> t_of_js x268
         and t_0_to_js : t_0 -> Ojs.t = fun (x267 : t) -> t_to_js x267
         type tags = [ `Event ]
         type tags_0 = tags
         type 'tags this = 'tags intf constraint 'tags = [> `Event ]
         let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
           =
           fun (type __tags) ->
             fun (__tags_of_js : Ojs.t -> __tags) ->
               fun (x271 : Ojs.t) -> intf_of_js __tags_of_js x271
         and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
           fun (type __tags) ->
             fun (__tags_to_js : __tags -> Ojs.t) ->
               fun (x269 : __tags intf) -> intf_to_js __tags_to_js x269
         let (get_bubbles : 'tags this -> bool) =
           fun (x273 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x273) "bubbles")
         let (get_cancelBubble : 'tags this -> bool) =
           fun (x275 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x275) "cancelBubble")
         let (set_cancelBubble : 'tags this -> bool -> unit) =
           fun (x277 : 'tags this) ->
             fun (x278 : bool) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x277) "cancelBubble"
                 (Ojs.bool_to_js x278)
         let (get_cancelable : 'tags this -> bool) =
           fun (x280 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x280) "cancelable")
         let (get_composed : 'tags this -> bool) =
           fun (x282 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x282) "composed")
         let (get_currentTarget : 'tags this -> EventTarget.t option) =
           fun (x284 : 'tags this) ->
             Ojs.option_of_js EventTarget.t_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x284)
                  "currentTarget")
         let (get_defaultPrevented : 'tags this -> bool) =
           fun (x287 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x287)
                  "defaultPrevented")
         let (get_eventPhase : 'tags this -> float) =
           fun (x289 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x289) "eventPhase")
         let (get_isTrusted : 'tags this -> bool) =
           fun (x291 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x291) "isTrusted")
         let (get_returnValue : 'tags this -> bool) =
           fun (x293 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x293) "returnValue")
         let (set_returnValue : 'tags this -> bool -> unit) =
           fun (x295 : 'tags this) ->
             fun (x296 : bool) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x295) "returnValue"
                 (Ojs.bool_to_js x296)
         let (get_srcElement : 'tags this -> EventTarget.t option) =
           fun (x298 : 'tags this) ->
             Ojs.option_of_js EventTarget.t_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x298) "srcElement")
         let (get_target : 'tags this -> EventTarget.t option) =
           fun (x301 : 'tags this) ->
             Ojs.option_of_js EventTarget.t_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x301) "target")
         let (get_timeStamp : 'tags this -> DOMHighResTimeStamp.t) =
           fun (x304 : 'tags this) ->
             DOMHighResTimeStamp.t_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x304) "timeStamp")
         let (get_type : 'tags this -> string) =
           fun (x306 : 'tags this) ->
             Ojs.string_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x306) "type")
         let (composedPath : 'tags this -> EventTarget.t list) =
           fun (x308 : 'tags this) ->
             Ojs.list_of_js EventTarget.t_of_js
               (Ojs.call (this_to_js Obj.magic x308) "composedPath" [||])
         let (initEvent :
           'tags this ->
             type_:string ->
               ?bubbles:bool -> ?cancelable:bool -> unit -> unit)
           =
           fun (x317 : 'tags this) ->
             fun ~type_:(x311 : string) ->
               fun ?bubbles:(x312 : bool option) ->
                 fun ?cancelable:(x313 : bool option) ->
                   fun () ->
                     ignore
                       (let x319 = this_to_js Obj.magic x317 in
                        Ojs.call (Ojs.get_prop_ascii x319 "initEvent")
                          "apply"
                          [|x319;((let x314 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x314 "push"
                                        [|(Ojs.string_to_js x311)|]);
                                   (match x312 with
                                    | Some x316 ->
                                        ignore
                                          (Ojs.call x314 "push"
                                             [|(Ojs.bool_to_js x316)|])
                                    | None -> ());
                                   (match x313 with
                                    | Some x315 ->
                                        ignore
                                          (Ojs.call x314 "push"
                                             [|(Ojs.bool_to_js x315)|])
                                    | None -> ());
                                   x314))|])
         let (preventDefault : 'tags this -> unit) =
           fun (x320 : 'tags this) ->
             ignore
               (Ojs.call (this_to_js Obj.magic x320) "preventDefault" [||])
         let (stopImmediatePropagation : 'tags this -> unit) =
           fun (x322 : 'tags this) ->
             ignore
               (Ojs.call (this_to_js Obj.magic x322)
                  "stopImmediatePropagation" [||])
         let (stopPropagation : 'tags this -> unit) =
           fun (x324 : 'tags this) ->
             ignore
               (Ojs.call (this_to_js Obj.magic x324) "stopPropagation" [||])
         let (get_AT_TARGET : 'tags this -> float) =
           fun (x326 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x326) "AT_TARGET")
         let (get_BUBBLING_PHASE : 'tags this -> float) =
           fun (x328 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x328)
                  "BUBBLING_PHASE")
         let (get_CAPTURING_PHASE : 'tags this -> float) =
           fun (x330 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x330)
                  "CAPTURING_PHASE")
         let (get_NONE : 'tags this -> float) =
           fun (x332 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x332) "NONE")
         let cast_from = Obj.magic
         let (prototype : unit -> t) =
           fun () ->
             t_of_js
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Event")
                  "prototype")
         let (create :
           type_:string -> ?eventInitDict:EventInit.t -> unit -> t) =
           fun ~type_:(x334 : string) ->
             fun ?eventInitDict:(x335 : EventInit.t option) ->
               fun () ->
                 t_of_js
                   (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Event")
                      (let x336 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       ignore
                         (Ojs.call x336 "push" [|(Ojs.string_to_js x334)|]);
                       (match x335 with
                        | Some x337 ->
                            ignore
                              (Ojs.call x336 "push"
                                 [|(EventInit.t_to_js x337)|])
                        | None -> ());
                       x336))
         let (at_target : unit -> float) =
           fun () ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Event")
                  "AT_TARGET")
         let (bubbling_phase : unit -> float) =
           fun () ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Event")
                  "BUBBLING_PHASE")
         let (capturing_phase : unit -> float) =
           fun () ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Event")
                  "CAPTURING_PHASE")
         let (none : unit -> float) =
           fun () ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Event")
                  "NONE")
       end and
            EventListener:sig
                            type t = [ `EventListener ] intf
                            type t_0 = t
                            [@@@js.stop ]
                            type tags = [ `EventListener ]
                            type tags_0 = tags
                            [@@@js.start ]
                            [@@@js.implem
                              type tags = [ `EventListener ]
                              type tags_0 = tags]
                            type 'tags this =
                              'tags intf constraint 'tags =
                                          [> `EventListener ]
                            val t_to_js : t -> Ojs.t
                            val t_of_js : Ojs.t -> t
                            val t_0_to_js : t_0 -> Ojs.t
                            val t_0_of_js : Ojs.t -> t_0
                            val apply : 'tags this -> evt:Event.t -> unit
                            val cast_from : 'tags this -> t
                          end =
            struct
              type t = [ `EventListener ] intf
              let rec t_of_js : Ojs.t -> t = Obj.magic
              and t_to_js : t -> Ojs.t = Obj.magic
              type t_0 = t
              let rec t_0_of_js : Ojs.t -> t_0 =
                fun (x339 : Ojs.t) -> t_of_js x339
              and t_0_to_js : t_0 -> Ojs.t = fun (x338 : t) -> t_to_js x338
              type tags = [ `EventListener ]
              type tags_0 = tags
              type 'tags this =
                'tags intf constraint 'tags = [> `EventListener ]
              let rec this_of_js :
                'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
                fun (type __tags) ->
                  fun (__tags_of_js : Ojs.t -> __tags) ->
                    fun (x342 : Ojs.t) -> intf_of_js __tags_of_js x342
              and this_to_js :
                'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
                fun (type __tags) ->
                  fun (__tags_to_js : __tags -> Ojs.t) ->
                    fun (x340 : __tags intf) -> intf_to_js __tags_to_js x340
              let (apply : 'tags this -> evt:Event.t -> unit) =
                fun (x345 : 'tags this) ->
                  fun ~evt:(x344 : Event.t) ->
                    ignore
                      (Ojs.apply (this_to_js Obj.magic x345)
                         [|(Event.t_to_js x344)|])
              let cast_from = Obj.magic
            end and
                 EventListenerObject:sig
                                       type t = [ `EventListenerObject ] intf
                                       type t_0 = t
                                       [@@@js.stop ]
                                       type tags = [ `EventListenerObject ]
                                       type tags_0 = tags
                                       [@@@js.start ]
                                       [@@@js.implem
                                         type tags = [ `EventListenerObject ]
                                         type tags_0 = tags]
                                       type 'tags this =
                                         'tags intf constraint 'tags =
                                                     [>
                                                       `EventListenerObject ]
                                       val t_to_js : t -> Ojs.t
                                       val t_of_js : Ojs.t -> t
                                       val t_0_to_js : t_0 -> Ojs.t
                                       val t_0_of_js : Ojs.t -> t_0
                                       val handleEvent :
                                         'tags this ->
                                           object_:Event.t -> unit
                                       val cast_from : 'tags this -> t
                                     end =
                 struct
                   type t = [ `EventListenerObject ] intf
                   let rec t_of_js : Ojs.t -> t = Obj.magic
                   and t_to_js : t -> Ojs.t = Obj.magic
                   type t_0 = t
                   let rec t_0_of_js : Ojs.t -> t_0 =
                     fun (x348 : Ojs.t) -> t_of_js x348
                   and t_0_to_js : t_0 -> Ojs.t =
                     fun (x347 : t) -> t_to_js x347
                   type tags = [ `EventListenerObject ]
                   type tags_0 = tags
                   type 'tags this =
                     'tags intf constraint 'tags = [> `EventListenerObject ]
                   let rec this_of_js :
                     'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
                     fun (type __tags) ->
                       fun (__tags_of_js : Ojs.t -> __tags) ->
                         fun (x351 : Ojs.t) -> intf_of_js __tags_of_js x351
                   and this_to_js :
                     'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
                     fun (type __tags) ->
                       fun (__tags_to_js : __tags -> Ojs.t) ->
                         fun (x349 : __tags intf) ->
                           intf_to_js __tags_to_js x349
                   let (handleEvent : 'tags this -> object_:Event.t -> unit)
                     =
                     fun (x354 : 'tags this) ->
                       fun ~object_:(x353 : Event.t) ->
                         ignore
                           (Ojs.call (this_to_js Obj.magic x354)
                              "handleEvent" [|(Event.t_to_js x353)|])
                   let cast_from = Obj.magic
                 end and
                      EventListenerOrEventListenerObject:sig
                                                           type t =
                                                             (EventListener.t,
                                                               EventListenerObject.t)
                                                               union2
                                                           type t_0 = t
                                                           val t_to_js :
                                                             t -> Ojs.t
                                                           val t_of_js :
                                                             Ojs.t -> t
                                                           val t_0_to_js :
                                                             t_0 -> Ojs.t
                                                           val t_0_of_js :
                                                             Ojs.t -> t_0
                                                         end =
                      struct
                        type t =
                          (EventListener.t, EventListenerObject.t) union2
                        let rec t_of_js : Ojs.t -> t =
                          fun (x359 : Ojs.t) ->
                            union2_of_js EventListener.t_of_js
                              EventListenerObject.t_of_js x359
                        and t_to_js : t -> Ojs.t =
                          fun
                            (x356 :
                              (EventListener.t, EventListenerObject.t) union2)
                            ->
                            union2_to_js EventListener.t_to_js
                              EventListenerObject.t_to_js x356
                        type t_0 = t
                        let rec t_0_of_js : Ojs.t -> t_0 =
                          fun (x363 : Ojs.t) -> t_of_js x363
                        and t_0_to_js : t_0 -> Ojs.t =
                          fun (x362 : t) -> t_to_js x362
                      end and
                           EventTarget:sig
                                         type t = [ `EventTarget ] intf
                                         type t_0 = t
                                         [@@@js.stop ]
                                         type tags = [ `EventTarget ]
                                         type tags_0 = tags
                                         [@@@js.start ]
                                         [@@@js.implem
                                           type tags = [ `EventTarget ]
                                           type tags_0 = tags]
                                         type 'tags this =
                                           'tags intf constraint 'tags =
                                                       [> `EventTarget ]
                                         val t_to_js : t -> Ojs.t
                                         val t_of_js : Ojs.t -> t
                                         val t_0_to_js : t_0 -> Ojs.t
                                         val t_0_of_js : Ojs.t -> t_0
                                         val addEventListener :
                                           'tags this ->
                                             type_:string ->
                                               callback:EventListenerOrEventListenerObject.t
                                                 option ->
                                                 ?options:[
                                                            `U1 of
                                                              AddEventListenerOptions.t
                                                               | `U2 of bool ]
                                                   -> unit -> unit
                                         val dispatchEvent :
                                           'tags this ->
                                             event:Event.t -> bool
                                         val removeEventListener :
                                           'tags this ->
                                             type_:string ->
                                               callback:EventListenerOrEventListenerObject.t
                                                 option ->
                                                 ?options:[
                                                            `U1 of
                                                              EventListenerOptions.t
                                                               | `U2 of bool ]
                                                   -> unit -> unit
                                         val cast_from : 'tags this -> t
                                         val prototype : unit -> t
                                         val create : unit -> t
                                       end =
                           struct
                             type t = [ `EventTarget ] intf
                             let rec t_of_js : Ojs.t -> t = Obj.magic
                             and t_to_js : t -> Ojs.t = Obj.magic
                             type t_0 = t
                             let rec t_0_of_js : Ojs.t -> t_0 =
                               fun (x365 : Ojs.t) -> t_of_js x365
                             and t_0_to_js : t_0 -> Ojs.t =
                               fun (x364 : t) -> t_to_js x364
                             type tags = [ `EventTarget ]
                             type tags_0 = tags
                             type 'tags this =
                               'tags intf constraint 'tags =
                                           [> `EventTarget ]
                             let rec this_of_js :
                               'tags .
                                 (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
                               =
                               fun (type __tags) ->
                                 fun (__tags_of_js : Ojs.t -> __tags) ->
                                   fun (x368 : Ojs.t) ->
                                     intf_of_js __tags_of_js x368
                             and this_to_js :
                               'tags .
                                 ('tags -> Ojs.t) -> 'tags this -> Ojs.t
                               =
                               fun (type __tags) ->
                                 fun (__tags_to_js : __tags -> Ojs.t) ->
                                   fun (x366 : __tags intf) ->
                                     intf_to_js __tags_to_js x366
                             let (addEventListener :
                               'tags this ->
                                 type_:string ->
                                   callback:EventListenerOrEventListenerObject.t
                                     option ->
                                     ?options:[
                                                `U1 of
                                                  AddEventListenerOptions.t 
                                              | `U2 of bool ]
                                       -> unit -> unit)
                               =
                               fun (x378 : 'tags this) ->
                                 fun ~type_:(x370 : string) ->
                                   fun
                                     ~callback:(x371 :
                                                 EventListenerOrEventListenerObject.t
                                                   option)
                                     ->
                                     fun
                                       ?options:(x372 :
                                                  [
                                                    `U1 of
                                                      AddEventListenerOptions.t
                                                       | `U2 of bool ]
                                                    option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x380 =
                                              this_to_js Obj.magic x378 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x380
                                                 "addEventListener") "apply"
                                              [|x380;((let x373 =
                                                         Ojs.new_obj
                                                           (Ojs.get_prop_ascii
                                                              Ojs.global
                                                              "Array") 
                                                           [||] in
                                                       ignore
                                                         (Ojs.call x373
                                                            "push"
                                                            [|(Ojs.string_to_js
                                                                 x370)|]);
                                                       ignore
                                                         (Ojs.call x373
                                                            "push"
                                                            [|(Ojs.option_to_js
                                                                 EventListenerOrEventListenerObject.t_to_js
                                                                 x371)|]);
                                                       (match x372 with
                                                        | Some x374 ->
                                                            ignore
                                                              (Ojs.call x373
                                                                 "push"
                                                                 [|((
                                                                   match x374
                                                                   with
                                                                   | 
                                                                   `U1 x375
                                                                    ->
                                                                    AddEventListenerOptions.t_to_js
                                                                    x375
                                                                   | 
                                                                   `U2 x376
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x376))|])
                                                        | None -> ());
                                                       x373))|])
                             let (dispatchEvent :
                               'tags this -> event:Event.t -> bool) =
                               fun (x382 : 'tags this) ->
                                 fun ~event:(x381 : Event.t) ->
                                   Ojs.bool_of_js
                                     (Ojs.call (this_to_js Obj.magic x382)
                                        "dispatchEvent"
                                        [|(Event.t_to_js x381)|])
                             let (removeEventListener :
                               'tags this ->
                                 type_:string ->
                                   callback:EventListenerOrEventListenerObject.t
                                     option ->
                                     ?options:[
                                                `U1 of EventListenerOptions.t 
                                              | `U2 of bool ]
                                       -> unit -> unit)
                               =
                               fun (x392 : 'tags this) ->
                                 fun ~type_:(x384 : string) ->
                                   fun
                                     ~callback:(x385 :
                                                 EventListenerOrEventListenerObject.t
                                                   option)
                                     ->
                                     fun
                                       ?options:(x386 :
                                                  [
                                                    `U1 of
                                                      EventListenerOptions.t 
                                                  | `U2 of bool ] option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x394 =
                                              this_to_js Obj.magic x392 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x394
                                                 "removeEventListener")
                                              "apply"
                                              [|x394;((let x387 =
                                                         Ojs.new_obj
                                                           (Ojs.get_prop_ascii
                                                              Ojs.global
                                                              "Array") 
                                                           [||] in
                                                       ignore
                                                         (Ojs.call x387
                                                            "push"
                                                            [|(Ojs.string_to_js
                                                                 x384)|]);
                                                       ignore
                                                         (Ojs.call x387
                                                            "push"
                                                            [|(Ojs.option_to_js
                                                                 EventListenerOrEventListenerObject.t_to_js
                                                                 x385)|]);
                                                       (match x386 with
                                                        | Some x388 ->
                                                            ignore
                                                              (Ojs.call x387
                                                                 "push"
                                                                 [|((
                                                                   match x388
                                                                   with
                                                                   | 
                                                                   `U1 x389
                                                                    ->
                                                                    EventListenerOptions.t_to_js
                                                                    x389
                                                                   | 
                                                                   `U2 x390
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x390))|])
                                                        | None -> ());
                                                       x387))|])
                             let cast_from = Obj.magic
                             let (prototype : unit -> t) =
                               fun () ->
                                 t_of_js
                                   (Ojs.get_prop_ascii
                                      (Ojs.get_prop_ascii Ojs.global
                                         "EventTarget") "prototype")
                             let (create : unit -> t) =
                               fun () ->
                                 t_of_js
                                   (Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global
                                         "EventTarget") [||])
                           end
module Performance =
  struct
    type t = [ `EventTarget  | `Performance ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x396 : Ojs.t) -> t_of_js x396
    and t_0_to_js : t_0 -> Ojs.t = fun (x395 : t) -> t_to_js x395
    type tags = [ `EventTarget  | `Performance ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Performance ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x399 : Ojs.t) -> intf_of_js __tags_of_js x399
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x397 : __tags intf) -> intf_to_js __tags_to_js x397
    let (get_onresourcetimingbufferfull :
      'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x401 : 'tags this) ->
        Ojs.option_of_js
          (fun (x403 : Ojs.t) ->
             fun ~this:(x404 : t) ->
               fun ~ev:(x405 : Event.t) ->
                 any_of_js
                   (Ojs.apply x403 [|(t_to_js x404);(Event.t_to_js x405)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x401)
             "onresourcetimingbufferfull")
    let (set_onresourcetimingbufferfull :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x406 : 'tags this) ->
        fun (x407 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x406)
            "onresourcetimingbufferfull"
            (Ojs.option_to_js
               (fun (x408 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x409 : Ojs.t) ->
                       fun (x410 : Ojs.t) ->
                         any_to_js
                           (x408 ~this:(t_of_js x409)
                              ~ev:(Event.t_of_js x410)))) x407)
    let (get_timeOrigin : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x412 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x412) "timeOrigin")
    let (clearMarks : 'tags this -> ?markName:string -> unit -> unit) =
      fun (x417 : 'tags this) ->
        fun ?markName:(x414 : string option) ->
          fun () ->
            ignore
              (let x419 = this_to_js Obj.magic x417 in
               Ojs.call (Ojs.get_prop_ascii x419 "clearMarks") "apply"
                 [|x419;((let x415 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x414 with
                           | Some x416 ->
                               ignore
                                 (Ojs.call x415 "push"
                                    [|(Ojs.string_to_js x416)|])
                           | None -> ());
                          x415))|])
    let (clearMeasures : 'tags this -> ?measureName:string -> unit -> unit) =
      fun (x423 : 'tags this) ->
        fun ?measureName:(x420 : string option) ->
          fun () ->
            ignore
              (let x425 = this_to_js Obj.magic x423 in
               Ojs.call (Ojs.get_prop_ascii x425 "clearMeasures") "apply"
                 [|x425;((let x421 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x420 with
                           | Some x422 ->
                               ignore
                                 (Ojs.call x421 "push"
                                    [|(Ojs.string_to_js x422)|])
                           | None -> ());
                          x421))|])
    let (clearResourceTimings : 'tags this -> unit) =
      fun (x426 : 'tags this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic x426) "clearResourceTimings" [||])
    let (getEntries : 'tags this -> PerformanceEntryList.t) =
      fun (x428 : 'tags this) ->
        PerformanceEntryList.t_of_js
          (Ojs.call (this_to_js Obj.magic x428) "getEntries" [||])
    let (getEntriesByName :
      'tags this ->
        name:string -> ?type_:string -> unit -> PerformanceEntryList.t)
      =
      fun (x434 : 'tags this) ->
        fun ~name:(x430 : string) ->
          fun ?type_:(x431 : string option) ->
            fun () ->
              PerformanceEntryList.t_of_js
                (let x436 = this_to_js Obj.magic x434 in
                 Ojs.call (Ojs.get_prop_ascii x436 "getEntriesByName")
                   "apply"
                   [|x436;((let x432 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x432 "push"
                                 [|(Ojs.string_to_js x430)|]);
                            (match x431 with
                             | Some x433 ->
                                 ignore
                                   (Ojs.call x432 "push"
                                      [|(Ojs.string_to_js x433)|])
                             | None -> ());
                            x432))|])
    let (getEntriesByType :
      'tags this -> type_:string -> PerformanceEntryList.t) =
      fun (x438 : 'tags this) ->
        fun ~type_:(x437 : string) ->
          PerformanceEntryList.t_of_js
            (Ojs.call (this_to_js Obj.magic x438) "getEntriesByType"
               [|(Ojs.string_to_js x437)|])
    let (mark :
      'tags this ->
        markName:string ->
          ?markOptions:PerformanceMarkOptions.t -> unit -> PerformanceMark.t)
      =
      fun (x444 : 'tags this) ->
        fun ~markName:(x440 : string) ->
          fun ?markOptions:(x441 : PerformanceMarkOptions.t option) ->
            fun () ->
              PerformanceMark.t_of_js
                (let x446 = this_to_js Obj.magic x444 in
                 Ojs.call (Ojs.get_prop_ascii x446 "mark") "apply"
                   [|x446;((let x442 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x442 "push"
                                 [|(Ojs.string_to_js x440)|]);
                            (match x441 with
                             | Some x443 ->
                                 ignore
                                   (Ojs.call x442 "push"
                                      [|(PerformanceMarkOptions.t_to_js x443)|])
                             | None -> ());
                            x442))|])
    let (measure :
      'tags this ->
        measureName:string ->
          ?startOrMeasureOptions:[ `U1 of string 
                                 | `U2 of PerformanceMeasureOptions.t ]
            -> ?endMark:string -> unit -> PerformanceMeasure.t)
      =
      fun (x455 : 'tags this) ->
        fun ~measureName:(x447 : string) ->
          fun
            ?startOrMeasureOptions:(x448 :
                                     [ `U1 of string 
                                     | `U2 of PerformanceMeasureOptions.t ]
                                       option)
            ->
            fun ?endMark:(x449 : string option) ->
              fun () ->
                PerformanceMeasure.t_of_js
                  (let x457 = this_to_js Obj.magic x455 in
                   Ojs.call (Ojs.get_prop_ascii x457 "measure") "apply"
                     [|x457;((let x450 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x450 "push"
                                   [|(Ojs.string_to_js x447)|]);
                              (match x448 with
                               | Some x452 ->
                                   ignore
                                     (Ojs.call x450 "push"
                                        [|((match x452 with
                                            | `U1 x453 ->
                                                Ojs.string_to_js x453
                                            | `U2 x454 ->
                                                PerformanceMeasureOptions.t_to_js
                                                  x454))|])
                               | None -> ());
                              (match x449 with
                               | Some x451 ->
                                   ignore
                                     (Ojs.call x450 "push"
                                        [|(Ojs.string_to_js x451)|])
                               | None -> ());
                              x450))|])
    let (now : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x458 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.call (this_to_js Obj.magic x458) "now" [||])
    let (setResourceTimingBufferSize : 'tags this -> maxSize:float -> unit) =
      fun (x461 : 'tags this) ->
        fun ~maxSize:(x460 : float) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x461)
               "setResourceTimingBufferSize" [|(Ojs.float_to_js x460)|])
    let (toJSON : 'tags this -> any) =
      fun (x463 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x463) "toJSON" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x474 : 'tags this) ->
        fun ~type_:(x465 : 'K) ->
          fun ~listener:(x466 : this:t -> ev:any -> any) ->
            fun
              ?options:(x467 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x476 = this_to_js Obj.magic x474 in
                   Ojs.call (Ojs.get_prop_ascii x476 "addEventListener")
                     "apply"
                     [|x476;((let x468 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x468 "push" [|(Obj.magic x465)|]);
                              ignore
                                (Ojs.call x468 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x472 : Ojs.t) ->
                                           fun (x473 : Ojs.t) ->
                                             any_to_js
                                               (x466 ~this:(t_of_js x472)
                                                  ~ev:(any_of_js x473))))|]);
                              (match x467 with
                               | Some x469 ->
                                   ignore
                                     (Ojs.call x468 "push"
                                        [|((match x469 with
                                            | `U1 x470 -> Ojs.bool_to_js x470
                                            | `U2 x471 ->
                                                AddEventListenerOptions.t_to_js
                                                  x471))|])
                               | None -> ());
                              x468))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x484 : 'tags this) ->
        fun ~type_:(x477 : string) ->
          fun ~listener:(x478 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x479 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x486 = this_to_js Obj.magic x484 in
                   Ojs.call (Ojs.get_prop_ascii x486 "addEventListener")
                     "apply"
                     [|x486;((let x480 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x480 "push"
                                   [|(Ojs.string_to_js x477)|]);
                              ignore
                                (Ojs.call x480 "push"
                                   [|(EventListenerOrEventListenerObject.t_to_js
                                        x478)|]);
                              (match x479 with
                               | Some x481 ->
                                   ignore
                                     (Ojs.call x480 "push"
                                        [|((match x481 with
                                            | `U1 x482 -> Ojs.bool_to_js x482
                                            | `U2 x483 ->
                                                AddEventListenerOptions.t_to_js
                                                  x483))|])
                               | None -> ());
                              x480))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x496 : 'tags this) ->
        fun ~type_:(x487 : 'K) ->
          fun ~listener:(x488 : this:t -> ev:any -> any) ->
            fun
              ?options:(x489 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x498 = this_to_js Obj.magic x496 in
                   Ojs.call (Ojs.get_prop_ascii x498 "removeEventListener")
                     "apply"
                     [|x498;((let x490 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x490 "push" [|(Obj.magic x487)|]);
                              ignore
                                (Ojs.call x490 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x494 : Ojs.t) ->
                                           fun (x495 : Ojs.t) ->
                                             any_to_js
                                               (x488 ~this:(t_of_js x494)
                                                  ~ev:(any_of_js x495))))|]);
                              (match x489 with
                               | Some x491 ->
                                   ignore
                                     (Ojs.call x490 "push"
                                        [|((match x491 with
                                            | `U1 x492 -> Ojs.bool_to_js x492
                                            | `U2 x493 ->
                                                EventListenerOptions.t_to_js
                                                  x493))|])
                               | None -> ());
                              x490))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x506 : 'tags this) ->
        fun ~type_:(x499 : string) ->
          fun ~listener:(x500 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x501 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x508 = this_to_js Obj.magic x506 in
                   Ojs.call (Ojs.get_prop_ascii x508 "removeEventListener")
                     "apply"
                     [|x508;((let x502 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x502 "push"
                                   [|(Ojs.string_to_js x499)|]);
                              ignore
                                (Ojs.call x502 "push"
                                   [|(EventListenerOrEventListenerObject.t_to_js
                                        x500)|]);
                              (match x501 with
                               | Some x503 ->
                                   ignore
                                     (Ojs.call x502 "push"
                                        [|((match x503 with
                                            | `U1 x504 -> Ojs.bool_to_js x504
                                            | `U2 x505 ->
                                                EventListenerOptions.t_to_js
                                                  x505))|])
                               | None -> ());
                              x502))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Performance")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Performance") [||])
  end
module PerformanceStatic =
  struct
    let (onresourcetimingbufferfull :
      unit -> (this:Performance.t -> ev:Event.t -> any) option) =
      fun () ->
        Ojs.option_of_js
          (fun (x509 : Ojs.t) ->
             fun ~this:(x510 : Performance.t) ->
               fun ~ev:(x511 : Event.t) ->
                 any_of_js
                   (Ojs.apply x509
                      [|(Performance.t_to_js x510);(Event.t_to_js x511)|]))
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "performance")
             "onresourcetimingbufferfull")
    let (timeOrigin : unit -> DOMHighResTimeStamp.t) =
      fun () ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "performance")
             "timeOrigin")
    let (clearMarks : ?markName:string -> unit -> unit) =
      fun ?markName:(x512 : string option) ->
        fun () ->
          ignore
            (let x515 = Ojs.get_prop_ascii Ojs.global "performance" in
             Ojs.call (Ojs.get_prop_ascii x515 "clearMarks") "apply"
               [|x515;((let x513 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x512 with
                         | Some x514 ->
                             ignore
                               (Ojs.call x513 "push"
                                  [|(Ojs.string_to_js x514)|])
                         | None -> ());
                        x513))|])
    let (clearMeasures : ?measureName:string -> unit -> unit) =
      fun ?measureName:(x516 : string option) ->
        fun () ->
          ignore
            (let x519 = Ojs.get_prop_ascii Ojs.global "performance" in
             Ojs.call (Ojs.get_prop_ascii x519 "clearMeasures") "apply"
               [|x519;((let x517 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x516 with
                         | Some x518 ->
                             ignore
                               (Ojs.call x517 "push"
                                  [|(Ojs.string_to_js x518)|])
                         | None -> ());
                        x517))|])
    let (clearResourceTimings : unit -> unit) =
      fun () ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance")
             "clearResourceTimings" [||])
    let (getEntries : unit -> PerformanceEntryList.t) =
      fun () ->
        PerformanceEntryList.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance")
             "getEntries" [||])
    let (getEntriesByName :
      name:string -> ?type_:string -> unit -> PerformanceEntryList.t) =
      fun ~name:(x520 : string) ->
        fun ?type_:(x521 : string option) ->
          fun () ->
            PerformanceEntryList.t_of_js
              (let x524 = Ojs.get_prop_ascii Ojs.global "performance" in
               Ojs.call (Ojs.get_prop_ascii x524 "getEntriesByName") "apply"
                 [|x524;((let x522 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x522 "push" [|(Ojs.string_to_js x520)|]);
                          (match x521 with
                           | Some x523 ->
                               ignore
                                 (Ojs.call x522 "push"
                                    [|(Ojs.string_to_js x523)|])
                           | None -> ());
                          x522))|])
    let (getEntriesByType : string -> PerformanceEntryList.t) =
      fun (x525 : string) ->
        PerformanceEntryList.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance")
             "getEntriesByType" [|(Ojs.string_to_js x525)|])
    let (mark :
      markName:string ->
        ?markOptions:PerformanceMarkOptions.t -> unit -> PerformanceMark.t)
      =
      fun ~markName:(x526 : string) ->
        fun ?markOptions:(x527 : PerformanceMarkOptions.t option) ->
          fun () ->
            PerformanceMark.t_of_js
              (let x530 = Ojs.get_prop_ascii Ojs.global "performance" in
               Ojs.call (Ojs.get_prop_ascii x530 "mark") "apply"
                 [|x530;((let x528 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x528 "push" [|(Ojs.string_to_js x526)|]);
                          (match x527 with
                           | Some x529 ->
                               ignore
                                 (Ojs.call x528 "push"
                                    [|(PerformanceMarkOptions.t_to_js x529)|])
                           | None -> ());
                          x528))|])
    let (measure :
      measureName:string ->
        ?startOrMeasureOptions:[ `U1 of string 
                               | `U2 of PerformanceMeasureOptions.t ]
          -> ?endMark:string -> unit -> PerformanceMeasure.t)
      =
      fun ~measureName:(x531 : string) ->
        fun
          ?startOrMeasureOptions:(x532 :
                                   [ `U1 of string 
                                   | `U2 of PerformanceMeasureOptions.t ]
                                     option)
          ->
          fun ?endMark:(x533 : string option) ->
            fun () ->
              PerformanceMeasure.t_of_js
                (let x539 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x539 "measure") "apply"
                   [|x539;((let x534 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x534 "push"
                                 [|(Ojs.string_to_js x531)|]);
                            (match x532 with
                             | Some x536 ->
                                 ignore
                                   (Ojs.call x534 "push"
                                      [|((match x536 with
                                          | `U1 x537 -> Ojs.string_to_js x537
                                          | `U2 x538 ->
                                              PerformanceMeasureOptions.t_to_js
                                                x538))|])
                             | None -> ());
                            (match x533 with
                             | Some x535 ->
                                 ignore
                                   (Ojs.call x534 "push"
                                      [|(Ojs.string_to_js x535)|])
                             | None -> ());
                            x534))|])
    let (now : unit -> DOMHighResTimeStamp.t) =
      fun () ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance") "now" [||])
    let (setResourceTimingBufferSize : float -> unit) =
      fun (x540 : float) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance")
             "setResourceTimingBufferSize" [|(Ojs.float_to_js x540)|])
    let (toJSON : unit -> any) =
      fun () ->
        any_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance") "toJSON"
             [||])
    let (addEventListener :
      type_:'K ->
        listener:(this:Performance.t -> ev:any -> any) ->
          ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
            unit -> unit)
      =
      fun ~type_:(x541 : 'K) ->
        fun ~listener:(x542 : this:Performance.t -> ev:any -> any) ->
          fun
            ?options:(x543 :
                       [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                         option)
            ->
            fun () ->
              ignore
                (let x550 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x550 "addEventListener")
                   "apply"
                   [|x550;((let x544 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x544 "push" [|(Obj.magic x541)|]);
                            ignore
                              (Ojs.call x544 "push"
                                 [|(Ojs.fun_to_js 2
                                      (fun (x548 : Ojs.t) ->
                                         fun (x549 : Ojs.t) ->
                                           any_to_js
                                             (x542
                                                ~this:(Performance.t_of_js
                                                         x548)
                                                ~ev:(any_of_js x549))))|]);
                            (match x543 with
                             | Some x545 ->
                                 ignore
                                   (Ojs.call x544 "push"
                                      [|((match x545 with
                                          | `U1 x546 -> Ojs.bool_to_js x546
                                          | `U2 x547 ->
                                              AddEventListenerOptions.t_to_js
                                                x547))|])
                             | None -> ());
                            x544))|])
    let (addEventListener' :
      type_:string ->
        listener:EventListenerOrEventListenerObject.t ->
          ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
            unit -> unit)
      =
      fun ~type_:(x551 : string) ->
        fun ~listener:(x552 : EventListenerOrEventListenerObject.t) ->
          fun
            ?options:(x553 :
                       [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                         option)
            ->
            fun () ->
              ignore
                (let x558 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x558 "addEventListener")
                   "apply"
                   [|x558;((let x554 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x554 "push"
                                 [|(Ojs.string_to_js x551)|]);
                            ignore
                              (Ojs.call x554 "push"
                                 [|(EventListenerOrEventListenerObject.t_to_js
                                      x552)|]);
                            (match x553 with
                             | Some x555 ->
                                 ignore
                                   (Ojs.call x554 "push"
                                      [|((match x555 with
                                          | `U1 x556 -> Ojs.bool_to_js x556
                                          | `U2 x557 ->
                                              AddEventListenerOptions.t_to_js
                                                x557))|])
                             | None -> ());
                            x554))|])
    let (removeEventListener :
      type_:'K ->
        listener:(this:Performance.t -> ev:any -> any) ->
          ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
            unit -> unit)
      =
      fun ~type_:(x559 : 'K) ->
        fun ~listener:(x560 : this:Performance.t -> ev:any -> any) ->
          fun
            ?options:(x561 :
                       [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                         option)
            ->
            fun () ->
              ignore
                (let x568 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x568 "removeEventListener")
                   "apply"
                   [|x568;((let x562 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x562 "push" [|(Obj.magic x559)|]);
                            ignore
                              (Ojs.call x562 "push"
                                 [|(Ojs.fun_to_js 2
                                      (fun (x566 : Ojs.t) ->
                                         fun (x567 : Ojs.t) ->
                                           any_to_js
                                             (x560
                                                ~this:(Performance.t_of_js
                                                         x566)
                                                ~ev:(any_of_js x567))))|]);
                            (match x561 with
                             | Some x563 ->
                                 ignore
                                   (Ojs.call x562 "push"
                                      [|((match x563 with
                                          | `U1 x564 -> Ojs.bool_to_js x564
                                          | `U2 x565 ->
                                              EventListenerOptions.t_to_js
                                                x565))|])
                             | None -> ());
                            x562))|])
    let (removeEventListener' :
      type_:string ->
        listener:EventListenerOrEventListenerObject.t ->
          ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
            unit -> unit)
      =
      fun ~type_:(x569 : string) ->
        fun ~listener:(x570 : EventListenerOrEventListenerObject.t) ->
          fun
            ?options:(x571 :
                       [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                         option)
            ->
            fun () ->
              ignore
                (let x576 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x576 "removeEventListener")
                   "apply"
                   [|x576;((let x572 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x572 "push"
                                 [|(Ojs.string_to_js x569)|]);
                            ignore
                              (Ojs.call x572 "push"
                                 [|(EventListenerOrEventListenerObject.t_to_js
                                      x570)|]);
                            (match x571 with
                             | Some x573 ->
                                 ignore
                                   (Ojs.call x572 "push"
                                      [|((match x573 with
                                          | `U1 x574 -> Ojs.bool_to_js x574
                                          | `U2 x575 ->
                                              EventListenerOptions.t_to_js
                                                x575))|])
                             | None -> ());
                            x572))|])
  end
module StorageEstimate =
  struct
    type t = [ `StorageEstimate ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x578 : Ojs.t) -> t_of_js x578
    and t_0_to_js : t_0 -> Ojs.t = fun (x577 : t) -> t_to_js x577
    type tags = [ `StorageEstimate ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `StorageEstimate ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x581 : Ojs.t) -> intf_of_js __tags_of_js x581
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x579 : __tags intf) -> intf_to_js __tags_to_js x579
    let (get_quota : 'tags this -> float option) =
      fun (x583 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x583) "quota")
    let (set_quota : 'tags this -> float -> unit) =
      fun (x586 : 'tags this) ->
        fun (x587 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x586) "quota"
            (Ojs.float_to_js x587)
    let (get_usage : 'tags this -> float option) =
      fun (x589 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x589) "usage")
    let (set_usage : 'tags this -> float -> unit) =
      fun (x592 : 'tags this) ->
        fun (x593 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x592) "usage"
            (Ojs.float_to_js x593)
    let (create : ?quota:float -> ?usage:float -> unit -> t) =
      fun ?quota:(x595 : float option) ->
        fun ?usage:(x596 : float option) ->
          fun () ->
            let x597 = Ojs.empty_obj () in
            (match x595 with
             | Some x599 ->
                 Ojs.set_prop_ascii x597 "quota" (Ojs.float_to_js x599)
             | None -> ());
            (match x596 with
             | Some x598 ->
                 Ojs.set_prop_ascii x597 "usage" (Ojs.float_to_js x598)
             | None -> ());
            t_of_js x597
    let cast_from = Obj.magic
  end
module FileSystemRemoveOptions =
  struct
    type t = [ `FileSystemRemoveOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x601 : Ojs.t) -> t_of_js x601
    and t_0_to_js : t_0 -> Ojs.t = fun (x600 : t) -> t_to_js x600
    type tags = [ `FileSystemRemoveOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FileSystemRemoveOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x604 : Ojs.t) -> intf_of_js __tags_of_js x604
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x602 : __tags intf) -> intf_to_js __tags_to_js x602
    let (get_recursive : 'tags this -> bool option) =
      fun (x606 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x606) "recursive")
    let (set_recursive : 'tags this -> bool -> unit) =
      fun (x609 : 'tags this) ->
        fun (x610 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x609) "recursive"
            (Ojs.bool_to_js x610)
    let (create : ?recursive:bool -> unit -> t) =
      fun ?recursive:(x612 : bool option) ->
        fun () ->
          let x613 = Ojs.empty_obj () in
          (match x612 with
           | Some x614 ->
               Ojs.set_prop_ascii x613 "recursive" (Ojs.bool_to_js x614)
           | None -> ());
          t_of_js x613
    let cast_from = Obj.magic
  end
module FileSystemGetFileOptions =
  struct
    type t = [ `FileSystemGetFileOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x616 : Ojs.t) -> t_of_js x616
    and t_0_to_js : t_0 -> Ojs.t = fun (x615 : t) -> t_to_js x615
    type tags = [ `FileSystemGetFileOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FileSystemGetFileOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x619 : Ojs.t) -> intf_of_js __tags_of_js x619
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x617 : __tags intf) -> intf_to_js __tags_to_js x617
    let (get_create : 'tags this -> bool option) =
      fun (x621 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x621) "create")
    let (set_create : 'tags this -> bool -> unit) =
      fun (x624 : 'tags this) ->
        fun (x625 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x624) "create"
            (Ojs.bool_to_js x625)
    let (create : ?create_:bool -> unit -> t) =
      fun ?create_:(x627 : bool option) ->
        fun () ->
          let x628 = Ojs.empty_obj () in
          (match x627 with
           | Some x629 ->
               Ojs.set_prop_ascii x628 "create" (Ojs.bool_to_js x629)
           | None -> ());
          t_of_js x628
    let cast_from = Obj.magic
  end
module FileSystemGetDirectoryOptions =
  struct
    type t = [ `FileSystemGetDirectoryOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x631 : Ojs.t) -> t_of_js x631
    and t_0_to_js : t_0 -> Ojs.t = fun (x630 : t) -> t_to_js x630
    type tags = [ `FileSystemGetDirectoryOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FileSystemGetDirectoryOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x634 : Ojs.t) -> intf_of_js __tags_of_js x634
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x632 : __tags intf) -> intf_to_js __tags_to_js x632
    let (get_create : 'tags this -> bool option) =
      fun (x636 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x636) "create")
    let (set_create : 'tags this -> bool -> unit) =
      fun (x639 : 'tags this) ->
        fun (x640 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x639) "create"
            (Ojs.bool_to_js x640)
    let (create : ?create_:bool -> unit -> t) =
      fun ?create_:(x642 : bool option) ->
        fun () ->
          let x643 = Ojs.empty_obj () in
          (match x642 with
           | Some x644 ->
               Ojs.set_prop_ascii x643 "create" (Ojs.bool_to_js x644)
           | None -> ());
          t_of_js x643
    let cast_from = Obj.magic
  end
module FileSystemHandleKind =
  struct
    type t = [ `L_s61_directory  | `L_s75_file ]
    let rec t_of_js : Ojs.t -> t =
      fun (x646 : Ojs.t) ->
        let x647 = x646 in
        match Ojs.string_of_js x647 with
        | "directory" -> `L_s61_directory
        | "file" -> `L_s75_file
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x645 : [ `L_s61_directory  | `L_s75_file ]) ->
        match x645 with
        | `L_s61_directory -> Ojs.string_to_js "directory"
        | `L_s75_file -> Ojs.string_to_js "file"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x649 : Ojs.t) -> t_of_js x649
    and t_0_to_js : t_0 -> Ojs.t = fun (x648 : t) -> t_to_js x648
  end
module FileSystemHandle =
  struct
    type t = [ `FileSystemHandle ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x651 : Ojs.t) -> t_of_js x651
    and t_0_to_js : t_0 -> Ojs.t = fun (x650 : t) -> t_to_js x650
    type tags = [ `FileSystemHandle ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FileSystemHandle ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x654 : Ojs.t) -> intf_of_js __tags_of_js x654
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x652 : __tags intf) -> intf_to_js __tags_to_js x652
    let (get_kind : 'tags this -> FileSystemHandleKind.t) =
      fun (x656 : 'tags this) ->
        FileSystemHandleKind.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x656) "kind")
    let (get_name : 'tags this -> string) =
      fun (x658 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x658) "name")
    let (isSameEntry : 'tags this -> other:t -> bool Promise.t_1) =
      fun (x661 : 'tags this) ->
        fun ~other:(x660 : t) ->
          Promise.t_1_of_js Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x661) "isSameEntry"
               [|(t_to_js x660)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "FileSystemHandle") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FileSystemHandle")
             [||])
  end
module EndingType =
  struct
    type t = [ `L_s120_native  | `L_s199_transparent ]
    let rec t_of_js : Ojs.t -> t =
      fun (x665 : Ojs.t) ->
        let x666 = x665 in
        match Ojs.string_of_js x666 with
        | "native" -> `L_s120_native
        | "transparent" -> `L_s199_transparent
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x664 : [ `L_s120_native  | `L_s199_transparent ]) ->
        match x664 with
        | `L_s120_native -> Ojs.string_to_js "native"
        | `L_s199_transparent -> Ojs.string_to_js "transparent"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x668 : Ojs.t) -> t_of_js x668
    and t_0_to_js : t_0 -> Ojs.t = fun (x667 : t) -> t_to_js x667
  end
module BlobPropertyBag =
  struct
    type t = [ `BlobPropertyBag ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x670 : Ojs.t) -> t_of_js x670
    and t_0_to_js : t_0 -> Ojs.t = fun (x669 : t) -> t_to_js x669
    type tags = [ `BlobPropertyBag ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `BlobPropertyBag ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x673 : Ojs.t) -> intf_of_js __tags_of_js x673
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x671 : __tags intf) -> intf_to_js __tags_to_js x671
    let (get_endings : 'tags this -> EndingType.t option) =
      fun (x675 : 'tags this) ->
        Ojs.option_of_js EndingType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x675) "endings")
    let (set_endings : 'tags this -> EndingType.t -> unit) =
      fun (x678 : 'tags this) ->
        fun (x679 : EndingType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x678) "endings"
            (EndingType.t_to_js x679)
    let (get_type : 'tags this -> string option) =
      fun (x681 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x681) "type")
    let (set_type : 'tags this -> string -> unit) =
      fun (x684 : 'tags this) ->
        fun (x685 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x684) "type"
            (Ojs.string_to_js x685)
    let (create : ?endings:EndingType.t -> ?type_:string -> unit -> t) =
      fun ?endings:(x687 : EndingType.t option) ->
        fun ?type_:(x688 : string option) ->
          fun () ->
            let x689 = Ojs.empty_obj () in
            (match x687 with
             | Some x691 ->
                 Ojs.set_prop_ascii x689 "endings" (EndingType.t_to_js x691)
             | None -> ());
            (match x688 with
             | Some x690 ->
                 Ojs.set_prop_ascii x689 "type" (Ojs.string_to_js x690)
             | None -> ());
            t_of_js x689
    let cast_from = Obj.magic
  end
module FilePropertyBag =
  struct
    type t = [ `BlobPropertyBag  | `FilePropertyBag ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x693 : Ojs.t) -> t_of_js x693
    and t_0_to_js : t_0 -> Ojs.t = fun (x692 : t) -> t_to_js x692
    type tags = [ `BlobPropertyBag  | `FilePropertyBag ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FilePropertyBag ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x696 : Ojs.t) -> intf_of_js __tags_of_js x696
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x694 : __tags intf) -> intf_to_js __tags_to_js x694
    let (get_lastModified : 'tags this -> float option) =
      fun (x698 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x698) "lastModified")
    let (set_lastModified : 'tags this -> float -> unit) =
      fun (x701 : 'tags this) ->
        fun (x702 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x701) "lastModified"
            (Ojs.float_to_js x702)
    let (create : ?lastModified:float -> unit -> t) =
      fun ?lastModified:(x704 : float option) ->
        fun () ->
          let x705 = Ojs.empty_obj () in
          (match x704 with
           | Some x706 ->
               Ojs.set_prop_ascii x705 "lastModified" (Ojs.float_to_js x706)
           | None -> ());
          t_of_js x705
    let cast_from = Obj.magic
  end
module ReadableStreamDefaultController =
  struct
    type 'R t = [ `ReadableStreamDefaultController of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 =
      fun (type __R) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x709 : Ojs.t) -> t_of_js __R_of_js x709
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t =
      fun (type __R) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x707 : __R t) -> t_to_js __R_to_js x707
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x713 : Ojs.t) -> t_of_js any_of_js x713
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x711 : any t) -> t_to_js any_to_js x711
    type 'R tags = [ `ReadableStreamDefaultController of 'R ]
    type 'R tags_1 = 'R tags
    type tags_0 = any tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags =
                  [> `ReadableStreamDefaultController of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      =
      fun (type __tags) ->
        fun (type __R) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__R_of_js : Ojs.t -> __R) ->
              fun (x717 : Ojs.t) -> intf_of_js __tags_of_js x717
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __R) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__R_to_js : __R -> Ojs.t) ->
              fun (x715 : __tags intf) -> intf_to_js __tags_to_js x715
    let (get_desiredSize : ('tags, 'R) this -> float option) =
      fun (x719 : ('tags, 'R) this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x719)
             "desiredSize")
    let (close : ('tags, 'R) this -> unit) =
      fun (x723 : ('tags, 'R) this) ->
        ignore (Ojs.call (this_to_js Obj.magic Obj.magic x723) "close" [||])
    let (enqueue : ('tags, 'R) this -> ?chunk:'R -> unit -> unit) =
      fun (x729 : ('tags, 'R) this) ->
        fun ?chunk:(x726 : 'R option) ->
          fun () ->
            ignore
              (let x732 = this_to_js Obj.magic Obj.magic x729 in
               Ojs.call (Ojs.get_prop_ascii x732 "enqueue") "apply"
                 [|x732;((let x727 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x726 with
                           | Some x728 ->
                               ignore
                                 (Ojs.call x727 "push" [|(Obj.magic x728)|])
                           | None -> ());
                          x727))|])
    let (error : ('tags, 'R) this -> ?e:any -> unit -> unit) =
      fun (x736 : ('tags, 'R) this) ->
        fun ?e:(x733 : any option) ->
          fun () ->
            ignore
              (let x739 = this_to_js Obj.magic Obj.magic x736 in
               Ojs.call (Ojs.get_prop_ascii x739 "error") "apply"
                 [|x739;((let x734 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x733 with
                           | Some x735 ->
                               ignore
                                 (Ojs.call x734 "push" [|(any_to_js x735)|])
                           | None -> ());
                          x734))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ReadableStreamDefaultController")
             "prototype")
    let (create : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ReadableStreamDefaultController")
             [||])
  end
module ReadableStreamController =
  struct
    type 'T t = 'T ReadableStreamDefaultController.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x742 : Ojs.t) ->
            ReadableStreamDefaultController.t_of_js __T_of_js x742
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x740 : __T ReadableStreamDefaultController.t) ->
            ReadableStreamDefaultController.t_to_js __T_to_js x740
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x746 : Ojs.t) -> t_of_js __T_of_js x746
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x744 : __T t) -> t_to_js __T_to_js x744
  end
module UnderlyingSourceStartCallback =
  struct
    type 'R t = [ `UnderlyingSourceStartCallback of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 =
      fun (type __R) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x750 : Ojs.t) -> t_of_js __R_of_js x750
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t =
      fun (type __R) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x748 : __R t) -> t_to_js __R_to_js x748
    type 'R tags = [ `UnderlyingSourceStartCallback of 'R ]
    type 'R tags_1 = 'R tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags = [> `UnderlyingSourceStartCallback of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      =
      fun (type __tags) ->
        fun (type __R) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__R_of_js : Ojs.t -> __R) ->
              fun (x754 : Ojs.t) -> intf_of_js __tags_of_js x754
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __R) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__R_to_js : __R -> Ojs.t) ->
              fun (x752 : __tags intf) -> intf_to_js __tags_to_js x752
    let (apply :
      ('tags, 'R) this -> controller:'R ReadableStreamController.t -> any) =
      fun (x758 : ('tags, 'R) this) ->
        fun ~controller:(x756 : 'R ReadableStreamController.t) ->
          any_of_js
            (Ojs.apply (this_to_js Obj.magic Obj.magic x758)
               [|(ReadableStreamController.t_to_js Obj.magic x756)|])
    let cast_from = Obj.magic
  end
module UnderlyingSourcePullCallback =
  struct
    type 'R t = [ `UnderlyingSourcePullCallback of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 =
      fun (type __R) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x763 : Ojs.t) -> t_of_js __R_of_js x763
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t =
      fun (type __R) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x761 : __R t) -> t_to_js __R_to_js x761
    type 'R tags = [ `UnderlyingSourcePullCallback of 'R ]
    type 'R tags_1 = 'R tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags = [> `UnderlyingSourcePullCallback of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      =
      fun (type __tags) ->
        fun (type __R) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__R_of_js : Ojs.t -> __R) ->
              fun (x767 : Ojs.t) -> intf_of_js __tags_of_js x767
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __R) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__R_to_js : __R -> Ojs.t) ->
              fun (x765 : __tags intf) -> intf_to_js __tags_to_js x765
    let (apply :
      ('tags, 'R) this ->
        controller:'R ReadableStreamController.t ->
          (unit, unit PromiseLike.t_1) union2)
      =
      fun (x771 : ('tags, 'R) this) ->
        fun ~controller:(x769 : 'R ReadableStreamController.t) ->
          union2_of_js Ojs.unit_of_js
            (fun (x775 : Ojs.t) -> PromiseLike.t_1_of_js Ojs.unit_of_js x775)
            (Ojs.apply (this_to_js Obj.magic Obj.magic x771)
               [|(ReadableStreamController.t_to_js Obj.magic x769)|])
    let cast_from = Obj.magic
  end
module UnderlyingSourceCancelCallback =
  struct
    type t = [ `UnderlyingSourceCancelCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x778 : Ojs.t) -> t_of_js x778
    and t_0_to_js : t_0 -> Ojs.t = fun (x777 : t) -> t_to_js x777
    type tags = [ `UnderlyingSourceCancelCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `UnderlyingSourceCancelCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x781 : Ojs.t) -> intf_of_js __tags_of_js x781
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x779 : __tags intf) -> intf_to_js __tags_to_js x779
    let (apply :
      'tags this ->
        ?reason:any -> unit -> (unit, unit PromiseLike.t_1) union2)
      =
      fun (x786 : 'tags this) ->
        fun ?reason:(x783 : any option) ->
          fun () ->
            union2_of_js Ojs.unit_of_js
              (fun (x789 : Ojs.t) ->
                 PromiseLike.t_1_of_js Ojs.unit_of_js x789)
              (Ojs.call (this_to_js Obj.magic x786) "apply"
                 [|Ojs.null;((let x784 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x783 with
                               | Some x785 ->
                                   ignore
                                     (Ojs.call x784 "push"
                                        [|(any_to_js x785)|])
                               | None -> ());
                              x784))|])
    let cast_from = Obj.magic
  end
module UnderlyingSource =
  struct
    type 'R t = [ `UnderlyingSource of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 =
      fun (type __R) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x793 : Ojs.t) -> t_of_js __R_of_js x793
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t =
      fun (type __R) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x791 : __R t) -> t_to_js __R_to_js x791
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x797 : Ojs.t) -> t_of_js any_of_js x797
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x795 : any t) -> t_to_js any_to_js x795
    type 'R tags = [ `UnderlyingSource of 'R ]
    type 'R tags_1 = 'R tags
    type tags_0 = any tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags = [> `UnderlyingSource of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      =
      fun (type __tags) ->
        fun (type __R) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__R_of_js : Ojs.t -> __R) ->
              fun (x801 : Ojs.t) -> intf_of_js __tags_of_js x801
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __R) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__R_to_js : __R -> Ojs.t) ->
              fun (x799 : __tags intf) -> intf_to_js __tags_to_js x799
    let (get_cancel :
      ('tags, 'R) this -> UnderlyingSourceCancelCallback.t option) =
      fun (x803 : ('tags, 'R) this) ->
        Ojs.option_of_js UnderlyingSourceCancelCallback.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x803) "cancel")
    let (set_cancel :
      ('tags, 'R) this -> UnderlyingSourceCancelCallback.t -> unit) =
      fun (x807 : ('tags, 'R) this) ->
        fun (x808 : UnderlyingSourceCancelCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x807) "cancel"
            (UnderlyingSourceCancelCallback.t_to_js x808)
    let (get_pull :
      ('tags, 'R) this -> 'R UnderlyingSourcePullCallback.t option) =
      fun (x811 : ('tags, 'R) this) ->
        Ojs.option_of_js
          (fun (x814 : Ojs.t) ->
             UnderlyingSourcePullCallback.t_of_js Obj.magic x814)
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x811) "pull")
    let (set_pull :
      ('tags, 'R) this -> 'R UnderlyingSourcePullCallback.t -> unit) =
      fun (x816 : ('tags, 'R) this) ->
        fun (x817 : 'R UnderlyingSourcePullCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x816) "pull"
            (UnderlyingSourcePullCallback.t_to_js Obj.magic x817)
    let (get_start :
      ('tags, 'R) this -> 'R UnderlyingSourceStartCallback.t option) =
      fun (x821 : ('tags, 'R) this) ->
        Ojs.option_of_js
          (fun (x824 : Ojs.t) ->
             UnderlyingSourceStartCallback.t_of_js Obj.magic x824)
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x821) "start")
    let (set_start :
      ('tags, 'R) this -> 'R UnderlyingSourceStartCallback.t -> unit) =
      fun (x826 : ('tags, 'R) this) ->
        fun (x827 : 'R UnderlyingSourceStartCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x826) "start"
            (UnderlyingSourceStartCallback.t_to_js Obj.magic x827)
    let (get_type : ('tags, 'R) this -> undefined) =
      fun (x831 : ('tags, 'R) this) ->
        undefined_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x831) "type")
    let (set_type : ('tags, 'R) this -> undefined -> unit) =
      fun (x834 : ('tags, 'R) this) ->
        fun (x835 : undefined) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x834) "type"
            (undefined_to_js x835)
    let (create :
      ?cancel:UnderlyingSourceCancelCallback.t ->
        ?pull:'R UnderlyingSourcePullCallback.t ->
          ?start:'R UnderlyingSourceStartCallback.t ->
            ?type_:never -> unit -> 'R t)
      =
      fun ?cancel:(x838 : UnderlyingSourceCancelCallback.t option) ->
        fun ?pull:(x839 : 'R UnderlyingSourcePullCallback.t option) ->
          fun ?start:(x840 : 'R UnderlyingSourceStartCallback.t option) ->
            fun ?type_:(x841 : never option) ->
              fun () ->
                let x842 = Ojs.empty_obj () in
                (match x838 with
                 | Some x849 ->
                     Ojs.set_prop_ascii x842 "cancel"
                       (UnderlyingSourceCancelCallback.t_to_js x849)
                 | None -> ());
                (match x839 with
                 | Some x847 ->
                     Ojs.set_prop_ascii x842 "pull"
                       (UnderlyingSourcePullCallback.t_to_js Obj.magic x847)
                 | None -> ());
                (match x840 with
                 | Some x845 ->
                     Ojs.set_prop_ascii x842 "start"
                       (UnderlyingSourceStartCallback.t_to_js Obj.magic x845)
                 | None -> ());
                (match x841 with
                 | Some x844 ->
                     Ojs.set_prop_ascii x842 "type" (never_to_js x844)
                 | None -> ());
                t_of_js Obj.magic x842
    let cast_from = Obj.magic
  end
module StreamPipeOptions =
  struct
    type t = [ `StreamPipeOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x851 : Ojs.t) -> t_of_js x851
    and t_0_to_js : t_0 -> Ojs.t = fun (x850 : t) -> t_to_js x850
    type tags = [ `StreamPipeOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `StreamPipeOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x854 : Ojs.t) -> intf_of_js __tags_of_js x854
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x852 : __tags intf) -> intf_to_js __tags_to_js x852
    let (get_preventAbort : 'tags this -> bool option) =
      fun (x856 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x856) "preventAbort")
    let (set_preventAbort : 'tags this -> bool -> unit) =
      fun (x859 : 'tags this) ->
        fun (x860 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x859) "preventAbort"
            (Ojs.bool_to_js x860)
    let (get_preventCancel : 'tags this -> bool option) =
      fun (x862 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x862) "preventCancel")
    let (set_preventCancel : 'tags this -> bool -> unit) =
      fun (x865 : 'tags this) ->
        fun (x866 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x865) "preventCancel"
            (Ojs.bool_to_js x866)
    let (get_preventClose : 'tags this -> bool option) =
      fun (x868 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x868) "preventClose")
    let (set_preventClose : 'tags this -> bool -> unit) =
      fun (x871 : 'tags this) ->
        fun (x872 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x871) "preventClose"
            (Ojs.bool_to_js x872)
    let (get_signal : 'tags this -> AbortSignal.t option) =
      fun (x874 : 'tags this) ->
        Ojs.option_of_js AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x874) "signal")
    let (set_signal : 'tags this -> AbortSignal.t -> unit) =
      fun (x877 : 'tags this) ->
        fun (x878 : AbortSignal.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x877) "signal"
            (AbortSignal.t_to_js x878)
    let (create :
      ?preventAbort:bool ->
        ?preventCancel:bool ->
          ?preventClose:bool -> ?signal:AbortSignal.t -> unit -> t)
      =
      fun ?preventAbort:(x880 : bool option) ->
        fun ?preventCancel:(x881 : bool option) ->
          fun ?preventClose:(x882 : bool option) ->
            fun ?signal:(x883 : AbortSignal.t option) ->
              fun () ->
                let x884 = Ojs.empty_obj () in
                (match x880 with
                 | Some x888 ->
                     Ojs.set_prop_ascii x884 "preventAbort"
                       (Ojs.bool_to_js x888)
                 | None -> ());
                (match x881 with
                 | Some x887 ->
                     Ojs.set_prop_ascii x884 "preventCancel"
                       (Ojs.bool_to_js x887)
                 | None -> ());
                (match x882 with
                 | Some x886 ->
                     Ojs.set_prop_ascii x884 "preventClose"
                       (Ojs.bool_to_js x886)
                 | None -> ());
                (match x883 with
                 | Some x885 ->
                     Ojs.set_prop_ascii x884 "signal"
                       (AbortSignal.t_to_js x885)
                 | None -> ());
                t_of_js x884
    let cast_from = Obj.magic
  end
module WritableStreamDefaultController =
  struct
    type t = [ `WritableStreamDefaultController ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x890 : Ojs.t) -> t_of_js x890
    and t_0_to_js : t_0 -> Ojs.t = fun (x889 : t) -> t_to_js x889
    type tags = [ `WritableStreamDefaultController ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WritableStreamDefaultController ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x893 : Ojs.t) -> intf_of_js __tags_of_js x893
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x891 : __tags intf) -> intf_to_js __tags_to_js x891
    let (error : 'tags this -> ?e:any -> unit -> unit) =
      fun (x898 : 'tags this) ->
        fun ?e:(x895 : any option) ->
          fun () ->
            ignore
              (let x900 = this_to_js Obj.magic x898 in
               Ojs.call (Ojs.get_prop_ascii x900 "error") "apply"
                 [|x900;((let x896 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x895 with
                           | Some x897 ->
                               ignore
                                 (Ojs.call x896 "push" [|(any_to_js x897)|])
                           | None -> ());
                          x896))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WritableStreamDefaultController")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WritableStreamDefaultController")
             [||])
  end
module UnderlyingSinkWriteCallback =
  struct
    type 'W t = [ `UnderlyingSinkWriteCallback of 'W ] intf
    let rec t_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t =
      fun _W -> Obj.magic
    and t_to_js : 'W . ('W -> Ojs.t) -> 'W t -> Ojs.t = fun _W -> Obj.magic
    type 'W t_1 = 'W t
    let rec t_1_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t_1 =
      fun (type __W) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x903 : Ojs.t) -> t_of_js __W_of_js x903
    and t_1_to_js : 'W . ('W -> Ojs.t) -> 'W t_1 -> Ojs.t =
      fun (type __W) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x901 : __W t) -> t_to_js __W_to_js x901
    type 'W tags = [ `UnderlyingSinkWriteCallback of 'W ]
    type 'W tags_1 = 'W tags
    type ('tags, 'W) this =
      'tags intf constraint 'tags = [> `UnderlyingSinkWriteCallback of 'W ]
    let rec this_of_js :
      'tags 'W .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'W) this
      =
      fun (type __tags) ->
        fun (type __W) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__W_of_js : Ojs.t -> __W) ->
              fun (x907 : Ojs.t) -> intf_of_js __tags_of_js x907
    and this_to_js :
      'tags 'W .
        ('tags -> Ojs.t) -> ('W -> Ojs.t) -> ('tags, 'W) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __W) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__W_to_js : __W -> Ojs.t) ->
              fun (x905 : __tags intf) -> intf_to_js __tags_to_js x905
    let (apply :
      ('tags, 'W) this ->
        chunk:'W ->
          controller:WritableStreamDefaultController.t ->
            (unit, unit PromiseLike.t_1) union2)
      =
      fun (x911 : ('tags, 'W) this) ->
        fun ~chunk:(x909 : 'W) ->
          fun ~controller:(x910 : WritableStreamDefaultController.t) ->
            union2_of_js Ojs.unit_of_js
              (fun (x915 : Ojs.t) ->
                 PromiseLike.t_1_of_js Ojs.unit_of_js x915)
              (Ojs.apply (this_to_js Obj.magic Obj.magic x911)
                 [|(Obj.magic x909);(WritableStreamDefaultController.t_to_js
                                       x910)|])
    let cast_from = Obj.magic
  end
module UnderlyingSinkStartCallback =
  struct
    type t = [ `UnderlyingSinkStartCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x918 : Ojs.t) -> t_of_js x918
    and t_0_to_js : t_0 -> Ojs.t = fun (x917 : t) -> t_to_js x917
    type tags = [ `UnderlyingSinkStartCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `UnderlyingSinkStartCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x921 : Ojs.t) -> intf_of_js __tags_of_js x921
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x919 : __tags intf) -> intf_to_js __tags_to_js x919
    let (apply :
      'tags this -> controller:WritableStreamDefaultController.t -> any) =
      fun (x924 : 'tags this) ->
        fun ~controller:(x923 : WritableStreamDefaultController.t) ->
          any_of_js
            (Ojs.apply (this_to_js Obj.magic x924)
               [|(WritableStreamDefaultController.t_to_js x923)|])
    let cast_from = Obj.magic
  end
module UnderlyingSinkCloseCallback =
  struct
    type t = [ `UnderlyingSinkCloseCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x927 : Ojs.t) -> t_of_js x927
    and t_0_to_js : t_0 -> Ojs.t = fun (x926 : t) -> t_to_js x926
    type tags = [ `UnderlyingSinkCloseCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `UnderlyingSinkCloseCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x930 : Ojs.t) -> intf_of_js __tags_of_js x930
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x928 : __tags intf) -> intf_to_js __tags_to_js x928
    let (apply : 'tags this -> (unit, unit PromiseLike.t_1) union2) =
      fun (x932 : 'tags this) ->
        union2_of_js Ojs.unit_of_js
          (fun (x935 : Ojs.t) -> PromiseLike.t_1_of_js Ojs.unit_of_js x935)
          (Ojs.apply (this_to_js Obj.magic x932) [||])
    let cast_from = Obj.magic
  end
module UnderlyingSinkAbortCallback =
  struct
    type t = [ `UnderlyingSinkAbortCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x938 : Ojs.t) -> t_of_js x938
    and t_0_to_js : t_0 -> Ojs.t = fun (x937 : t) -> t_to_js x937
    type tags = [ `UnderlyingSinkAbortCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `UnderlyingSinkAbortCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x941 : Ojs.t) -> intf_of_js __tags_of_js x941
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x939 : __tags intf) -> intf_to_js __tags_to_js x939
    let (apply :
      'tags this ->
        ?reason:any -> unit -> (unit, unit PromiseLike.t_1) union2)
      =
      fun (x946 : 'tags this) ->
        fun ?reason:(x943 : any option) ->
          fun () ->
            union2_of_js Ojs.unit_of_js
              (fun (x949 : Ojs.t) ->
                 PromiseLike.t_1_of_js Ojs.unit_of_js x949)
              (Ojs.call (this_to_js Obj.magic x946) "apply"
                 [|Ojs.null;((let x944 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x943 with
                               | Some x945 ->
                                   ignore
                                     (Ojs.call x944 "push"
                                        [|(any_to_js x945)|])
                               | None -> ());
                              x944))|])
    let cast_from = Obj.magic
  end
module UnderlyingSink =
  struct
    type 'W t = [ `UnderlyingSink of 'W ] intf
    let rec t_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t =
      fun _W -> Obj.magic
    and t_to_js : 'W . ('W -> Ojs.t) -> 'W t -> Ojs.t = fun _W -> Obj.magic
    type 'W t_1 = 'W t
    let rec t_1_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t_1 =
      fun (type __W) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x953 : Ojs.t) -> t_of_js __W_of_js x953
    and t_1_to_js : 'W . ('W -> Ojs.t) -> 'W t_1 -> Ojs.t =
      fun (type __W) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x951 : __W t) -> t_to_js __W_to_js x951
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x957 : Ojs.t) -> t_of_js any_of_js x957
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x955 : any t) -> t_to_js any_to_js x955
    type 'W tags = [ `UnderlyingSink of 'W ]
    type 'W tags_1 = 'W tags
    type tags_0 = any tags
    type ('tags, 'W) this =
      'tags intf constraint 'tags = [> `UnderlyingSink of 'W ]
    let rec this_of_js :
      'tags 'W .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'W) this
      =
      fun (type __tags) ->
        fun (type __W) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__W_of_js : Ojs.t -> __W) ->
              fun (x961 : Ojs.t) -> intf_of_js __tags_of_js x961
    and this_to_js :
      'tags 'W .
        ('tags -> Ojs.t) -> ('W -> Ojs.t) -> ('tags, 'W) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __W) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__W_to_js : __W -> Ojs.t) ->
              fun (x959 : __tags intf) -> intf_to_js __tags_to_js x959
    let (get_abort :
      ('tags, 'W) this -> UnderlyingSinkAbortCallback.t option) =
      fun (x963 : ('tags, 'W) this) ->
        Ojs.option_of_js UnderlyingSinkAbortCallback.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x963) "abort")
    let (set_abort :
      ('tags, 'W) this -> UnderlyingSinkAbortCallback.t -> unit) =
      fun (x967 : ('tags, 'W) this) ->
        fun (x968 : UnderlyingSinkAbortCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x967) "abort"
            (UnderlyingSinkAbortCallback.t_to_js x968)
    let (get_close :
      ('tags, 'W) this -> UnderlyingSinkCloseCallback.t option) =
      fun (x971 : ('tags, 'W) this) ->
        Ojs.option_of_js UnderlyingSinkCloseCallback.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x971) "close")
    let (set_close :
      ('tags, 'W) this -> UnderlyingSinkCloseCallback.t -> unit) =
      fun (x975 : ('tags, 'W) this) ->
        fun (x976 : UnderlyingSinkCloseCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x975) "close"
            (UnderlyingSinkCloseCallback.t_to_js x976)
    let (get_start :
      ('tags, 'W) this -> UnderlyingSinkStartCallback.t option) =
      fun (x979 : ('tags, 'W) this) ->
        Ojs.option_of_js UnderlyingSinkStartCallback.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x979) "start")
    let (set_start :
      ('tags, 'W) this -> UnderlyingSinkStartCallback.t -> unit) =
      fun (x983 : ('tags, 'W) this) ->
        fun (x984 : UnderlyingSinkStartCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x983) "start"
            (UnderlyingSinkStartCallback.t_to_js x984)
    let (get_type : ('tags, 'W) this -> undefined) =
      fun (x987 : ('tags, 'W) this) ->
        undefined_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x987) "type")
    let (set_type : ('tags, 'W) this -> undefined -> unit) =
      fun (x990 : ('tags, 'W) this) ->
        fun (x991 : undefined) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x990) "type"
            (undefined_to_js x991)
    let (get_write :
      ('tags, 'W) this -> 'W UnderlyingSinkWriteCallback.t option) =
      fun (x994 : ('tags, 'W) this) ->
        Ojs.option_of_js
          (fun (x997 : Ojs.t) ->
             UnderlyingSinkWriteCallback.t_of_js Obj.magic x997)
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x994) "write")
    let (set_write :
      ('tags, 'W) this -> 'W UnderlyingSinkWriteCallback.t -> unit) =
      fun (x999 : ('tags, 'W) this) ->
        fun (x1000 : 'W UnderlyingSinkWriteCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x999) "write"
            (UnderlyingSinkWriteCallback.t_to_js Obj.magic x1000)
    let (create :
      ?abort:UnderlyingSinkAbortCallback.t ->
        ?close:UnderlyingSinkCloseCallback.t ->
          ?start:UnderlyingSinkStartCallback.t ->
            ?type_:never ->
              ?write:'W UnderlyingSinkWriteCallback.t -> unit -> 'W t)
      =
      fun ?abort:(x1004 : UnderlyingSinkAbortCallback.t option) ->
        fun ?close:(x1005 : UnderlyingSinkCloseCallback.t option) ->
          fun ?start:(x1006 : UnderlyingSinkStartCallback.t option) ->
            fun ?type_:(x1007 : never option) ->
              fun ?write:(x1008 : 'W UnderlyingSinkWriteCallback.t option) ->
                fun () ->
                  let x1009 = Ojs.empty_obj () in
                  (match x1004 with
                   | Some x1016 ->
                       Ojs.set_prop_ascii x1009 "abort"
                         (UnderlyingSinkAbortCallback.t_to_js x1016)
                   | None -> ());
                  (match x1005 with
                   | Some x1015 ->
                       Ojs.set_prop_ascii x1009 "close"
                         (UnderlyingSinkCloseCallback.t_to_js x1015)
                   | None -> ());
                  (match x1006 with
                   | Some x1014 ->
                       Ojs.set_prop_ascii x1009 "start"
                         (UnderlyingSinkStartCallback.t_to_js x1014)
                   | None -> ());
                  (match x1007 with
                   | Some x1013 ->
                       Ojs.set_prop_ascii x1009 "type" (never_to_js x1013)
                   | None -> ());
                  (match x1008 with
                   | Some x1011 ->
                       Ojs.set_prop_ascii x1009 "write"
                         (UnderlyingSinkWriteCallback.t_to_js Obj.magic x1011)
                   | None -> ());
                  t_of_js Obj.magic x1009
    let cast_from = Obj.magic
  end
module QueuingStrategySize =
  struct
    type 'T t = [ `QueuingStrategySize of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x1019 : Ojs.t) -> t_of_js __T_of_js x1019
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x1017 : __T t) -> t_to_js __T_to_js x1017
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x1023 : Ojs.t) -> t_of_js any_of_js x1023
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x1021 : any t) -> t_to_js any_to_js x1021
    type 'T tags = [ `QueuingStrategySize of 'T ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `QueuingStrategySize of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__T_of_js : Ojs.t -> __T) ->
              fun (x1027 : Ojs.t) -> intf_of_js __tags_of_js x1027
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__T_to_js : __T -> Ojs.t) ->
              fun (x1025 : __tags intf) -> intf_to_js __tags_to_js x1025
    let (apply : ('tags, 'T) this -> chunk:'T -> float) =
      fun (x1030 : ('tags, 'T) this) ->
        fun ~chunk:(x1029 : 'T) ->
          Ojs.float_of_js
            (Ojs.apply (this_to_js Obj.magic Obj.magic x1030)
               [|(Obj.magic x1029)|])
    let cast_from = Obj.magic
  end
module QueuingStrategy =
  struct
    type 'T t = [ `QueuingStrategy of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x1035 : Ojs.t) -> t_of_js __T_of_js x1035
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x1033 : __T t) -> t_to_js __T_to_js x1033
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x1039 : Ojs.t) -> t_of_js any_of_js x1039
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x1037 : any t) -> t_to_js any_to_js x1037
    type 'T tags = [ `QueuingStrategy of 'T ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `QueuingStrategy of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__T_of_js : Ojs.t -> __T) ->
              fun (x1043 : Ojs.t) -> intf_of_js __tags_of_js x1043
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__T_to_js : __T -> Ojs.t) ->
              fun (x1041 : __tags intf) -> intf_to_js __tags_to_js x1041
    let (get_highWaterMark : ('tags, 'T) this -> float option) =
      fun (x1045 : ('tags, 'T) this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x1045)
             "highWaterMark")
    let (set_highWaterMark : ('tags, 'T) this -> float -> unit) =
      fun (x1049 : ('tags, 'T) this) ->
        fun (x1050 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x1049)
            "highWaterMark" (Ojs.float_to_js x1050)
    let (get_size : ('tags, 'T) this -> 'T QueuingStrategySize.t option) =
      fun (x1053 : ('tags, 'T) this) ->
        Ojs.option_of_js
          (fun (x1056 : Ojs.t) -> QueuingStrategySize.t_of_js Obj.magic x1056)
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x1053) "size")
    let (set_size : ('tags, 'T) this -> 'T QueuingStrategySize.t -> unit) =
      fun (x1058 : ('tags, 'T) this) ->
        fun (x1059 : 'T QueuingStrategySize.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x1058) "size"
            (QueuingStrategySize.t_to_js Obj.magic x1059)
    let (create :
      ?highWaterMark:float -> ?size:'T QueuingStrategySize.t -> unit -> 'T t)
      =
      fun ?highWaterMark:(x1063 : float option) ->
        fun ?size:(x1064 : 'T QueuingStrategySize.t option) ->
          fun () ->
            let x1065 = Ojs.empty_obj () in
            (match x1063 with
             | Some x1069 ->
                 Ojs.set_prop_ascii x1065 "highWaterMark"
                   (Ojs.float_to_js x1069)
             | None -> ());
            (match x1064 with
             | Some x1067 ->
                 Ojs.set_prop_ascii x1065 "size"
                   (QueuingStrategySize.t_to_js Obj.magic x1067)
             | None -> ());
            t_of_js Obj.magic x1065
    let cast_from = Obj.magic
  end
module rec
  WritableStream:sig
                   type 'W t = [ `WritableStream of 'W ] intf
                   type 'W t_1 = 'W t
                   type t_0 = any t
                   [@@@js.stop ]
                   type 'W tags = [ `WritableStream of 'W ]
                   type 'W tags_1 = 'W tags
                   type tags_0 = any tags
                   [@@@js.start ]
                   [@@@js.implem
                     type 'W tags = [ `WritableStream of 'W ]
                     type 'W tags_1 = 'W tags
                     type tags_0 = any tags]
                   type ('tags, 'W) this =
                     'tags intf constraint 'tags = [> `WritableStream of 'W ]
                   val t_to_js : ('W -> Ojs.t) -> 'W t -> Ojs.t
                   val t_of_js : (Ojs.t -> 'W) -> Ojs.t -> 'W t
                   val t_1_to_js : ('W -> Ojs.t) -> 'W t_1 -> Ojs.t
                   val t_1_of_js : (Ojs.t -> 'W) -> Ojs.t -> 'W t_1
                   val t_0_to_js : t_0 -> Ojs.t
                   val t_0_of_js : Ojs.t -> t_0
                   val get_locked : ('tags, 'W) this -> bool
                   val abort :
                     ('tags, 'W) this ->
                       ?reason:any -> unit -> unit Promise.t_1
                   val close : ('tags, 'W) this -> unit Promise.t_1
                   val getWriter :
                     ('tags, 'W) this -> 'W WritableStreamDefaultWriter.t
                   val cast_from : ('tags, 'W) this -> 'W t
                   val prototype : unit -> t_0
                   val create :
                     ?underlyingSink:'W UnderlyingSink.t ->
                       ?strategy:'W QueuingStrategy.t -> unit -> 'W t
                 end =
  struct
    type 'W t = [ `WritableStream of 'W ] intf
    let rec t_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t =
      fun _W -> Obj.magic
    and t_to_js : 'W . ('W -> Ojs.t) -> 'W t -> Ojs.t = fun _W -> Obj.magic
    type 'W t_1 = 'W t
    let rec t_1_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t_1 =
      fun (type __W) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x1072 : Ojs.t) -> t_of_js __W_of_js x1072
    and t_1_to_js : 'W . ('W -> Ojs.t) -> 'W t_1 -> Ojs.t =
      fun (type __W) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x1070 : __W t) -> t_to_js __W_to_js x1070
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x1076 : Ojs.t) -> t_of_js any_of_js x1076
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x1074 : any t) -> t_to_js any_to_js x1074
    type 'W tags = [ `WritableStream of 'W ]
    type 'W tags_1 = 'W tags
    type tags_0 = any tags
    type ('tags, 'W) this =
      'tags intf constraint 'tags = [> `WritableStream of 'W ]
    let rec this_of_js :
      'tags 'W .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'W) this
      =
      fun (type __tags) ->
        fun (type __W) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__W_of_js : Ojs.t -> __W) ->
              fun (x1080 : Ojs.t) -> intf_of_js __tags_of_js x1080
    and this_to_js :
      'tags 'W .
        ('tags -> Ojs.t) -> ('W -> Ojs.t) -> ('tags, 'W) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __W) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__W_to_js : __W -> Ojs.t) ->
              fun (x1078 : __tags intf) -> intf_to_js __tags_to_js x1078
    let (get_locked : ('tags, 'W) this -> bool) =
      fun (x1082 : ('tags, 'W) this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x1082) "locked")
    let (abort : ('tags, 'W) this -> ?reason:any -> unit -> unit Promise.t_1)
      =
      fun (x1088 : ('tags, 'W) this) ->
        fun ?reason:(x1085 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x1091 = this_to_js Obj.magic Obj.magic x1088 in
               Ojs.call (Ojs.get_prop_ascii x1091 "abort") "apply"
                 [|x1091;((let x1086 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1085 with
                            | Some x1087 ->
                                ignore
                                  (Ojs.call x1086 "push"
                                     [|(any_to_js x1087)|])
                            | None -> ());
                           x1086))|])
    let (close : ('tags, 'W) this -> unit Promise.t_1) =
      fun (x1093 : ('tags, 'W) this) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (this_to_js Obj.magic Obj.magic x1093) "close" [||])
    let (getWriter : ('tags, 'W) this -> 'W WritableStreamDefaultWriter.t) =
      fun (x1097 : ('tags, 'W) this) ->
        WritableStreamDefaultWriter.t_of_js Obj.magic
          (Ojs.call (this_to_js Obj.magic Obj.magic x1097) "getWriter" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WritableStream") "prototype")
    let (create :
      ?underlyingSink:'W UnderlyingSink.t ->
        ?strategy:'W QueuingStrategy.t -> unit -> 'W t)
      =
      fun ?underlyingSink:(x1101 : 'W UnderlyingSink.t option) ->
        fun ?strategy:(x1102 : 'W QueuingStrategy.t option) ->
          fun () ->
            t_of_js Obj.magic
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "WritableStream")
                 (let x1103 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x1101 with
                   | Some x1106 ->
                       ignore
                         (Ojs.call x1103 "push"
                            [|(UnderlyingSink.t_to_js Obj.magic x1106)|])
                   | None -> ());
                  (match x1102 with
                   | Some x1104 ->
                       ignore
                         (Ojs.call x1103 "push"
                            [|(QueuingStrategy.t_to_js Obj.magic x1104)|])
                   | None -> ());
                  x1103))
  end
 and
  WritableStreamDefaultWriter:sig
                                type 'W t =
                                  [ `WritableStreamDefaultWriter of 'W ] intf
                                type 'W t_1 = 'W t
                                type t_0 = any t
                                [@@@js.stop ]
                                type 'W tags =
                                  [ `WritableStreamDefaultWriter of 'W ]
                                type 'W tags_1 = 'W tags
                                type tags_0 = any tags
                                [@@@js.start ]
                                [@@@js.implem
                                  type 'W tags =
                                    [ `WritableStreamDefaultWriter of 'W ]
                                  type 'W tags_1 = 'W tags
                                  type tags_0 = any tags]
                                type ('tags, 'W) this =
                                  'tags intf constraint 'tags =
                                              [>
                                                `WritableStreamDefaultWriter
                                                  of 'W ]
                                val t_to_js : ('W -> Ojs.t) -> 'W t -> Ojs.t
                                val t_of_js : (Ojs.t -> 'W) -> Ojs.t -> 'W t
                                val t_1_to_js :
                                  ('W -> Ojs.t) -> 'W t_1 -> Ojs.t
                                val t_1_of_js :
                                  (Ojs.t -> 'W) -> Ojs.t -> 'W t_1
                                val t_0_to_js : t_0 -> Ojs.t
                                val t_0_of_js : Ojs.t -> t_0
                                val get_closed :
                                  ('tags, 'W) this -> undefined Promise.t_1
                                val get_desiredSize :
                                  ('tags, 'W) this -> float option
                                val get_ready :
                                  ('tags, 'W) this -> undefined Promise.t_1
                                val abort :
                                  ('tags, 'W) this ->
                                    ?reason:any -> unit -> unit Promise.t_1
                                val close :
                                  ('tags, 'W) this -> unit Promise.t_1
                                val releaseLock : ('tags, 'W) this -> unit
                                val write :
                                  ('tags, 'W) this ->
                                    ?chunk:'W -> unit -> unit Promise.t_1
                                val cast_from : ('tags, 'W) this -> 'W t
                                val prototype : unit -> t_0
                                val create : 'W WritableStream.t -> 'W t
                              end =
  struct
    type 'W t = [ `WritableStreamDefaultWriter of 'W ] intf
    let rec t_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t =
      fun _W -> Obj.magic
    and t_to_js : 'W . ('W -> Ojs.t) -> 'W t -> Ojs.t = fun _W -> Obj.magic
    type 'W t_1 = 'W t
    let rec t_1_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t_1 =
      fun (type __W) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x1111 : Ojs.t) -> t_of_js __W_of_js x1111
    and t_1_to_js : 'W . ('W -> Ojs.t) -> 'W t_1 -> Ojs.t =
      fun (type __W) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x1109 : __W t) -> t_to_js __W_to_js x1109
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x1115 : Ojs.t) -> t_of_js any_of_js x1115
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x1113 : any t) -> t_to_js any_to_js x1113
    type 'W tags = [ `WritableStreamDefaultWriter of 'W ]
    type 'W tags_1 = 'W tags
    type tags_0 = any tags
    type ('tags, 'W) this =
      'tags intf constraint 'tags = [> `WritableStreamDefaultWriter of 'W ]
    let rec this_of_js :
      'tags 'W .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'W) this
      =
      fun (type __tags) ->
        fun (type __W) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__W_of_js : Ojs.t -> __W) ->
              fun (x1119 : Ojs.t) -> intf_of_js __tags_of_js x1119
    and this_to_js :
      'tags 'W .
        ('tags -> Ojs.t) -> ('W -> Ojs.t) -> ('tags, 'W) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __W) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__W_to_js : __W -> Ojs.t) ->
              fun (x1117 : __tags intf) -> intf_to_js __tags_to_js x1117
    let (get_closed : ('tags, 'W) this -> undefined Promise.t_1) =
      fun (x1121 : ('tags, 'W) this) ->
        Promise.t_1_of_js undefined_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x1121) "closed")
    let (get_desiredSize : ('tags, 'W) this -> float option) =
      fun (x1125 : ('tags, 'W) this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x1125)
             "desiredSize")
    let (get_ready : ('tags, 'W) this -> undefined Promise.t_1) =
      fun (x1129 : ('tags, 'W) this) ->
        Promise.t_1_of_js undefined_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x1129) "ready")
    let (abort : ('tags, 'W) this -> ?reason:any -> unit -> unit Promise.t_1)
      =
      fun (x1136 : ('tags, 'W) this) ->
        fun ?reason:(x1133 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x1139 = this_to_js Obj.magic Obj.magic x1136 in
               Ojs.call (Ojs.get_prop_ascii x1139 "abort") "apply"
                 [|x1139;((let x1134 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1133 with
                            | Some x1135 ->
                                ignore
                                  (Ojs.call x1134 "push"
                                     [|(any_to_js x1135)|])
                            | None -> ());
                           x1134))|])
    let (close : ('tags, 'W) this -> unit Promise.t_1) =
      fun (x1141 : ('tags, 'W) this) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (this_to_js Obj.magic Obj.magic x1141) "close" [||])
    let (releaseLock : ('tags, 'W) this -> unit) =
      fun (x1145 : ('tags, 'W) this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic Obj.magic x1145) "releaseLock" [||])
    let (write : ('tags, 'W) this -> ?chunk:'W -> unit -> unit Promise.t_1) =
      fun (x1151 : ('tags, 'W) this) ->
        fun ?chunk:(x1148 : 'W option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x1154 = this_to_js Obj.magic Obj.magic x1151 in
               Ojs.call (Ojs.get_prop_ascii x1154 "write") "apply"
                 [|x1154;((let x1149 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1148 with
                            | Some x1150 ->
                                ignore
                                  (Ojs.call x1149 "push"
                                     [|(Obj.magic x1150)|])
                            | None -> ());
                           x1149))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WritableStreamDefaultWriter")
             "prototype")
    let (create : 'W WritableStream.t -> 'W t) =
      fun (x1156 : 'W WritableStream.t) ->
        t_of_js Obj.magic
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WritableStreamDefaultWriter")
             [|(WritableStream.t_to_js Obj.magic x1156)|])
  end
module ReadableStreamGenericReader =
  struct
    type t = [ `ReadableStreamGenericReader ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1160 : Ojs.t) -> t_of_js x1160
    and t_0_to_js : t_0 -> Ojs.t = fun (x1159 : t) -> t_to_js x1159
    type tags = [ `ReadableStreamGenericReader ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ReadableStreamGenericReader ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1163 : Ojs.t) -> intf_of_js __tags_of_js x1163
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1161 : __tags intf) -> intf_to_js __tags_to_js x1161
    let (get_closed : 'tags this -> undefined Promise.t_1) =
      fun (x1165 : 'tags this) ->
        Promise.t_1_of_js undefined_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1165) "closed")
    let (cancel : 'tags this -> ?reason:any -> unit -> unit Promise.t_1) =
      fun (x1171 : 'tags this) ->
        fun ?reason:(x1168 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x1173 = this_to_js Obj.magic x1171 in
               Ojs.call (Ojs.get_prop_ascii x1173 "cancel") "apply"
                 [|x1173;((let x1169 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1168 with
                            | Some x1170 ->
                                ignore
                                  (Ojs.call x1169 "push"
                                     [|(any_to_js x1170)|])
                            | None -> ());
                           x1169))|])
    let cast_from = Obj.magic
  end
module ReadableStreamDefaultReadValueResult =
  struct
    type 'T t = [ `ReadableStreamDefaultReadValueResult of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x1177 : Ojs.t) -> t_of_js __T_of_js x1177
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x1175 : __T t) -> t_to_js __T_to_js x1175
    type 'T tags = [ `ReadableStreamDefaultReadValueResult of 'T ]
    type 'T tags_1 = 'T tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags =
                  [> `ReadableStreamDefaultReadValueResult of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__T_of_js : Ojs.t -> __T) ->
              fun (x1181 : Ojs.t) -> intf_of_js __tags_of_js x1181
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__T_to_js : __T -> Ojs.t) ->
              fun (x1179 : __tags intf) -> intf_to_js __tags_to_js x1179
    let (get_done : ('tags, 'T) this -> [ `L_b_false ]) =
      fun (x1183 : ('tags, 'T) this) ->
        let x1186 =
          Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x1183) "done" in
        match Ojs.bool_of_js x1186 with
        | false -> `L_b_false
        | _ -> assert false
    let (set_done : ('tags, 'T) this -> [ `L_b_false ] -> unit) =
      fun (x1187 : ('tags, 'T) this) ->
        fun (x1188 : [ `L_b_false ]) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x1187) "done"
            (match x1188 with | `L_b_false -> Ojs.bool_to_js false)
    let (get_value : ('tags, 'T) this -> 'T) =
      fun (x1191 : ('tags, 'T) this) ->
        Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x1191) "value")
    let (set_value : ('tags, 'T) this -> 'T -> unit) =
      fun (x1194 : ('tags, 'T) this) ->
        fun (x1195 : 'T) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x1194) "value"
            (Obj.magic x1195)
    let (create : done_:[ `L_b_false ] -> value:'T -> unit -> 'T t) =
      fun ~done_:(x1198 : [ `L_b_false ]) ->
        fun ~value:(x1199 : 'T) ->
          fun () ->
            let x1200 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x1200 "done"
              (match x1198 with | `L_b_false -> Ojs.bool_to_js false);
            Ojs.set_prop_ascii x1200 "value" (Obj.magic x1199);
            t_of_js Obj.magic x1200
    let cast_from = Obj.magic
  end
module ReadableStreamDefaultReadDoneResult =
  struct
    type t = [ `ReadableStreamDefaultReadDoneResult ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1203 : Ojs.t) -> t_of_js x1203
    and t_0_to_js : t_0 -> Ojs.t = fun (x1202 : t) -> t_to_js x1202
    type tags = [ `ReadableStreamDefaultReadDoneResult ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ReadableStreamDefaultReadDoneResult ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1206 : Ojs.t) -> intf_of_js __tags_of_js x1206
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1204 : __tags intf) -> intf_to_js __tags_to_js x1204
    let (get_done : 'tags this -> [ `L_b_true ]) =
      fun (x1208 : 'tags this) ->
        let x1210 = Ojs.get_prop_ascii (this_to_js Obj.magic x1208) "done" in
        match Ojs.bool_of_js x1210 with
        | true -> `L_b_true
        | _ -> assert false
    let (set_done : 'tags this -> [ `L_b_true ] -> unit) =
      fun (x1211 : 'tags this) ->
        fun (x1212 : [ `L_b_true ]) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1211) "done"
            (match x1212 with | `L_b_true -> Ojs.bool_to_js true)
    let (get_value : 'tags this -> undefined) =
      fun (x1214 : 'tags this) ->
        undefined_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1214) "value")
    let (set_value : 'tags this -> undefined -> unit) =
      fun (x1216 : 'tags this) ->
        fun (x1217 : undefined) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1216) "value"
            (undefined_to_js x1217)
    let (create : done_:[ `L_b_true ] -> ?value:never -> unit -> t) =
      fun ~done_:(x1219 : [ `L_b_true ]) ->
        fun ?value:(x1220 : never option) ->
          fun () ->
            let x1221 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x1221 "done"
              (match x1219 with | `L_b_true -> Ojs.bool_to_js true);
            (match x1220 with
             | Some x1222 ->
                 Ojs.set_prop_ascii x1221 "value" (never_to_js x1222)
             | None -> ());
            t_of_js x1221
    let cast_from = Obj.magic
  end
module ReadableStreamDefaultReadResult =
  struct
    type 'T t =
      [ `U_b_false of 'T ReadableStreamDefaultReadValueResult.t 
      | `U_b_true of ReadableStreamDefaultReadDoneResult.t ]
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x1227 : Ojs.t) ->
            let x1228 = x1227 in
            match Ojs.bool_of_js (Ojs.get_prop_ascii x1228 "done") with
            | false ->
                `U_b_false
                  (ReadableStreamDefaultReadValueResult.t_of_js __T_of_js
                     x1228)
            | true ->
                `U_b_true (ReadableStreamDefaultReadDoneResult.t_of_js x1228)
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun
            (x1223 :
              [ `U_b_false of __T ReadableStreamDefaultReadValueResult.t 
              | `U_b_true of ReadableStreamDefaultReadDoneResult.t ])
            ->
            match x1223 with
            | `U_b_false x1224 ->
                ReadableStreamDefaultReadValueResult.t_to_js __T_to_js x1224
            | `U_b_true x1226 ->
                ReadableStreamDefaultReadDoneResult.t_to_js x1226
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x1232 : Ojs.t) -> t_of_js __T_of_js x1232
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x1230 : __T t) -> t_to_js __T_to_js x1230
  end
module rec
  ReadableStream:sig
                   type 'R t = [ `ReadableStream of 'R ] intf
                   type 'R t_1 = 'R t
                   type t_0 = any t
                   [@@@js.stop ]
                   type 'R tags = [ `ReadableStream of 'R ]
                   type 'R tags_1 = 'R tags
                   type tags_0 = any tags
                   [@@@js.start ]
                   [@@@js.implem
                     type 'R tags = [ `ReadableStream of 'R ]
                     type 'R tags_1 = 'R tags
                     type tags_0 = any tags]
                   type ('tags, 'R) this =
                     'tags intf constraint 'tags = [> `ReadableStream of 'R ]
                   val t_to_js : ('R -> Ojs.t) -> 'R t -> Ojs.t
                   val t_of_js : (Ojs.t -> 'R) -> Ojs.t -> 'R t
                   val t_1_to_js : ('R -> Ojs.t) -> 'R t_1 -> Ojs.t
                   val t_1_of_js : (Ojs.t -> 'R) -> Ojs.t -> 'R t_1
                   val t_0_to_js : t_0 -> Ojs.t
                   val t_0_of_js : Ojs.t -> t_0
                   val get_locked : ('tags, 'R) this -> bool
                   val cancel :
                     ('tags, 'R) this ->
                       ?reason:any -> unit -> unit Promise.t_1
                   val getReader :
                     ('tags, 'R) this -> 'R ReadableStreamDefaultReader.t
                   val pipeThrough :
                     ('tags, 'R) this ->
                       transform:('T, 'R) ReadableWritablePair.t ->
                         ?options:StreamPipeOptions.t -> unit -> 'T t
                   val pipeTo :
                     ('tags, 'R) this ->
                       destination:'R WritableStream.t ->
                         ?options:StreamPipeOptions.t ->
                           unit -> unit Promise.t_1
                   val tee : ('tags, 'R) this -> ('R t * 'R t)
                   val cast_from : ('tags, 'R) this -> 'R t
                   val prototype : unit -> t_0
                   val create :
                     ?underlyingSource:'R UnderlyingSource.t ->
                       ?strategy:'R QueuingStrategy.t -> unit -> 'R t
                 end =
  struct
    type 'R t = [ `ReadableStream of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 =
      fun (type __R) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x1236 : Ojs.t) -> t_of_js __R_of_js x1236
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t =
      fun (type __R) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x1234 : __R t) -> t_to_js __R_to_js x1234
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x1240 : Ojs.t) -> t_of_js any_of_js x1240
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x1238 : any t) -> t_to_js any_to_js x1238
    type 'R tags = [ `ReadableStream of 'R ]
    type 'R tags_1 = 'R tags
    type tags_0 = any tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags = [> `ReadableStream of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      =
      fun (type __tags) ->
        fun (type __R) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__R_of_js : Ojs.t -> __R) ->
              fun (x1244 : Ojs.t) -> intf_of_js __tags_of_js x1244
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __R) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__R_to_js : __R -> Ojs.t) ->
              fun (x1242 : __tags intf) -> intf_to_js __tags_to_js x1242
    let (get_locked : ('tags, 'R) this -> bool) =
      fun (x1246 : ('tags, 'R) this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x1246) "locked")
    let (cancel :
      ('tags, 'R) this -> ?reason:any -> unit -> unit Promise.t_1) =
      fun (x1252 : ('tags, 'R) this) ->
        fun ?reason:(x1249 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x1255 = this_to_js Obj.magic Obj.magic x1252 in
               Ojs.call (Ojs.get_prop_ascii x1255 "cancel") "apply"
                 [|x1255;((let x1250 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1249 with
                            | Some x1251 ->
                                ignore
                                  (Ojs.call x1250 "push"
                                     [|(any_to_js x1251)|])
                            | None -> ());
                           x1250))|])
    let (getReader : ('tags, 'R) this -> 'R ReadableStreamDefaultReader.t) =
      fun (x1257 : ('tags, 'R) this) ->
        ReadableStreamDefaultReader.t_of_js Obj.magic
          (Ojs.call (this_to_js Obj.magic Obj.magic x1257) "getReader" [||])
    let (pipeThrough :
      ('tags, 'R) this ->
        transform:('T, 'R) ReadableWritablePair.t ->
          ?options:StreamPipeOptions.t -> unit -> 'T t)
      =
      fun (x1267 : ('tags, 'R) this) ->
        fun ~transform:(x1261 : ('T, 'R) ReadableWritablePair.t) ->
          fun ?options:(x1262 : StreamPipeOptions.t option) ->
            fun () ->
              t_of_js Obj.magic
                (let x1270 = this_to_js Obj.magic Obj.magic x1267 in
                 Ojs.call (Ojs.get_prop_ascii x1270 "pipeThrough") "apply"
                   [|x1270;((let x1263 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1263 "push"
                                  [|(ReadableWritablePair.t_to_js Obj.magic
                                       Obj.magic x1261)|]);
                             (match x1262 with
                              | Some x1264 ->
                                  ignore
                                    (Ojs.call x1263 "push"
                                       [|(StreamPipeOptions.t_to_js x1264)|])
                              | None -> ());
                             x1263))|])
    let (pipeTo :
      ('tags, 'R) this ->
        destination:'R WritableStream.t ->
          ?options:StreamPipeOptions.t -> unit -> unit Promise.t_1)
      =
      fun (x1277 : ('tags, 'R) this) ->
        fun ~destination:(x1272 : 'R WritableStream.t) ->
          fun ?options:(x1273 : StreamPipeOptions.t option) ->
            fun () ->
              Promise.t_1_of_js Ojs.unit_of_js
                (let x1280 = this_to_js Obj.magic Obj.magic x1277 in
                 Ojs.call (Ojs.get_prop_ascii x1280 "pipeTo") "apply"
                   [|x1280;((let x1274 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1274 "push"
                                  [|(WritableStream.t_to_js Obj.magic x1272)|]);
                             (match x1273 with
                              | Some x1275 ->
                                  ignore
                                    (Ojs.call x1274 "push"
                                       [|(StreamPipeOptions.t_to_js x1275)|])
                              | None -> ());
                             x1274))|])
    let (tee : ('tags, 'R) this -> ('R t * 'R t)) =
      fun (x1282 : ('tags, 'R) this) ->
        let x1285 =
          Ojs.call (this_to_js Obj.magic Obj.magic x1282) "tee" [||] in
        ((t_of_js Obj.magic (Ojs.array_get x1285 0)),
          (t_of_js Obj.magic (Ojs.array_get x1285 1)))
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ReadableStream") "prototype")
    let (create :
      ?underlyingSource:'R UnderlyingSource.t ->
        ?strategy:'R QueuingStrategy.t -> unit -> 'R t)
      =
      fun ?underlyingSource:(x1288 : 'R UnderlyingSource.t option) ->
        fun ?strategy:(x1289 : 'R QueuingStrategy.t option) ->
          fun () ->
            t_of_js Obj.magic
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "ReadableStream")
                 (let x1290 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x1288 with
                   | Some x1293 ->
                       ignore
                         (Ojs.call x1290 "push"
                            [|(UnderlyingSource.t_to_js Obj.magic x1293)|])
                   | None -> ());
                  (match x1289 with
                   | Some x1291 ->
                       ignore
                         (Ojs.call x1290 "push"
                            [|(QueuingStrategy.t_to_js Obj.magic x1291)|])
                   | None -> ());
                  x1290))
  end
 and
  ReadableStreamDefaultReader:sig
                                type 'R t =
                                  [ `ReadableStreamDefaultReader of 'R 
                                  | `ReadableStreamGenericReader ] intf
                                type 'R t_1 = 'R t
                                type t_0 = any t
                                [@@@js.stop ]
                                type 'R tags =
                                  [ `ReadableStreamDefaultReader of 'R 
                                  | `ReadableStreamGenericReader ]
                                type 'R tags_1 = 'R tags
                                type tags_0 = any tags
                                [@@@js.start ]
                                [@@@js.implem
                                  type 'R tags =
                                    [ `ReadableStreamDefaultReader of 'R 
                                    | `ReadableStreamGenericReader ]
                                  type 'R tags_1 = 'R tags
                                  type tags_0 = any tags]
                                type ('tags, 'R) this =
                                  'tags intf constraint 'tags =
                                              [>
                                                `ReadableStreamDefaultReader
                                                  of 'R ]
                                val t_to_js : ('R -> Ojs.t) -> 'R t -> Ojs.t
                                val t_of_js : (Ojs.t -> 'R) -> Ojs.t -> 'R t
                                val t_1_to_js :
                                  ('R -> Ojs.t) -> 'R t_1 -> Ojs.t
                                val t_1_of_js :
                                  (Ojs.t -> 'R) -> Ojs.t -> 'R t_1
                                val t_0_to_js : t_0 -> Ojs.t
                                val t_0_of_js : Ojs.t -> t_0
                                val read :
                                  ('tags, 'R) this ->
                                    'R ReadableStreamDefaultReadResult.t
                                      Promise.t_1
                                val releaseLock : ('tags, 'R) this -> unit
                                val cast_from : ('tags, 'R) this -> 'R t
                                val prototype : unit -> t_0
                                val create : 'R ReadableStream.t -> 'R t
                              end =
  struct
    type 'R t =
      [ `ReadableStreamDefaultReader of 'R  | `ReadableStreamGenericReader ]
        intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 =
      fun (type __R) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x1298 : Ojs.t) -> t_of_js __R_of_js x1298
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t =
      fun (type __R) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x1296 : __R t) -> t_to_js __R_to_js x1296
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x1302 : Ojs.t) -> t_of_js any_of_js x1302
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x1300 : any t) -> t_to_js any_to_js x1300
    type 'R tags =
      [ `ReadableStreamDefaultReader of 'R  | `ReadableStreamGenericReader ]
    type 'R tags_1 = 'R tags
    type tags_0 = any tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags = [> `ReadableStreamDefaultReader of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      =
      fun (type __tags) ->
        fun (type __R) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__R_of_js : Ojs.t -> __R) ->
              fun (x1306 : Ojs.t) -> intf_of_js __tags_of_js x1306
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __R) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__R_to_js : __R -> Ojs.t) ->
              fun (x1304 : __tags intf) -> intf_to_js __tags_to_js x1304
    let (read :
      ('tags, 'R) this -> 'R ReadableStreamDefaultReadResult.t Promise.t_1) =
      fun (x1308 : ('tags, 'R) this) ->
        Promise.t_1_of_js
          (fun (x1311 : Ojs.t) ->
             ReadableStreamDefaultReadResult.t_of_js Obj.magic x1311)
          (Ojs.call (this_to_js Obj.magic Obj.magic x1308) "read" [||])
    let (releaseLock : ('tags, 'R) this -> unit) =
      fun (x1313 : ('tags, 'R) this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic Obj.magic x1313) "releaseLock" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ReadableStreamDefaultReader")
             "prototype")
    let (create : 'R ReadableStream.t -> 'R t) =
      fun (x1316 : 'R ReadableStream.t) ->
        t_of_js Obj.magic
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ReadableStreamDefaultReader")
             [|(ReadableStream.t_to_js Obj.magic x1316)|])
  end and
       ReadableWritablePair:sig
                              type ('R, 'W) t =
                                [ `ReadableWritablePair of ('R * 'W) ] intf
                              type ('R, 'W) t_2 = ('R, 'W) t
                              type 'R t_1 = ('R, any) t
                              type t_0 = (any, any) t
                              [@@@js.stop ]
                              type ('R, 'W) tags =
                                [ `ReadableWritablePair of ('R * 'W) ]
                              type ('R, 'W) tags_2 = ('R, 'W) tags
                              type 'R tags_1 = ('R, any) tags
                              type tags_0 = (any, any) tags
                              [@@@js.start ]
                              [@@@js.implem
                                type ('R, 'W) tags =
                                  [ `ReadableWritablePair of ('R * 'W) ]
                                type ('R, 'W) tags_2 = ('R, 'W) tags
                                type 'R tags_1 = ('R, any) tags
                                type tags_0 = (any, any) tags]
                              type ('tags, 'R, 'W) this =
                                'tags intf constraint 'tags =
                                            [>
                                              `ReadableWritablePair of
                                                ('R * 'W) ]
                              val t_to_js :
                                ('R -> Ojs.t) ->
                                  ('W -> Ojs.t) -> ('R, 'W) t -> Ojs.t
                              val t_of_js :
                                (Ojs.t -> 'R) ->
                                  (Ojs.t -> 'W) -> Ojs.t -> ('R, 'W) t
                              val t_2_to_js :
                                ('R -> Ojs.t) ->
                                  ('W -> Ojs.t) -> ('R, 'W) t_2 -> Ojs.t
                              val t_2_of_js :
                                (Ojs.t -> 'R) ->
                                  (Ojs.t -> 'W) -> Ojs.t -> ('R, 'W) t_2
                              val t_1_to_js :
                                ('R -> Ojs.t) -> 'R t_1 -> Ojs.t
                              val t_1_of_js :
                                (Ojs.t -> 'R) -> Ojs.t -> 'R t_1
                              val t_0_to_js : t_0 -> Ojs.t
                              val t_0_of_js : Ojs.t -> t_0
                              val get_readable :
                                ('tags, 'R, 'W) this -> 'R ReadableStream.t
                              val set_readable :
                                ('tags, 'R, 'W) this ->
                                  'R ReadableStream.t -> unit
                              val get_writable :
                                ('tags, 'R, 'W) this -> 'W WritableStream.t
                              val set_writable :
                                ('tags, 'R, 'W) this ->
                                  'W WritableStream.t -> unit
                              val create :
                                readable:'R ReadableStream.t ->
                                  writable:'W WritableStream.t ->
                                    unit -> ('R, 'W) t
                              val cast_from :
                                ('tags, 'R, 'W) this -> ('R, 'W) t
                            end =
       struct
         type ('R, 'W) t = [ `ReadableWritablePair of ('R * 'W) ] intf
         let rec t_of_js :
           'R 'W . (Ojs.t -> 'R) -> (Ojs.t -> 'W) -> Ojs.t -> ('R, 'W) t =
           fun _R -> fun _W -> Obj.magic
         and t_to_js :
           'R 'W . ('R -> Ojs.t) -> ('W -> Ojs.t) -> ('R, 'W) t -> Ojs.t =
           fun _R -> fun _W -> Obj.magic
         type ('R, 'W) t_2 = ('R, 'W) t
         let rec t_2_of_js :
           'R 'W . (Ojs.t -> 'R) -> (Ojs.t -> 'W) -> Ojs.t -> ('R, 'W) t_2 =
           fun (type __R) ->
             fun (type __W) ->
               fun (__R_of_js : Ojs.t -> __R) ->
                 fun (__W_of_js : Ojs.t -> __W) ->
                   fun (x1322 : Ojs.t) -> t_of_js __R_of_js __W_of_js x1322
         and t_2_to_js :
           'R 'W . ('R -> Ojs.t) -> ('W -> Ojs.t) -> ('R, 'W) t_2 -> Ojs.t =
           fun (type __R) ->
             fun (type __W) ->
               fun (__R_to_js : __R -> Ojs.t) ->
                 fun (__W_to_js : __W -> Ojs.t) ->
                   fun (x1319 : (__R, __W) t) ->
                     t_to_js __R_to_js __W_to_js x1319
         type 'R t_1 = ('R, any) t
         let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 =
           fun (type __R) ->
             fun (__R_of_js : Ojs.t -> __R) ->
               fun (x1328 : Ojs.t) -> t_of_js __R_of_js any_of_js x1328
         and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t =
           fun (type __R) ->
             fun (__R_to_js : __R -> Ojs.t) ->
               fun (x1325 : (__R, any) t) ->
                 t_to_js __R_to_js any_to_js x1325
         type t_0 = (any, any) t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x1334 : Ojs.t) -> t_of_js any_of_js any_of_js x1334
         and t_0_to_js : t_0 -> Ojs.t =
           fun (x1331 : (any, any) t) -> t_to_js any_to_js any_to_js x1331
         type ('R, 'W) tags = [ `ReadableWritablePair of ('R * 'W) ]
         type ('R, 'W) tags_2 = ('R, 'W) tags
         type 'R tags_1 = ('R, any) tags
         type tags_0 = (any, any) tags
         type ('tags, 'R, 'W) this =
           'tags intf constraint 'tags =
                       [> `ReadableWritablePair of ('R * 'W) ]
         let rec this_of_js :
           'tags 'R 'W .
             (Ojs.t -> 'tags) ->
               (Ojs.t -> 'R) ->
                 (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'R, 'W) this
           =
           fun (type __tags) ->
             fun (type __R) ->
               fun (type __W) ->
                 fun (__tags_of_js : Ojs.t -> __tags) ->
                   fun (__R_of_js : Ojs.t -> __R) ->
                     fun (__W_of_js : Ojs.t -> __W) ->
                       fun (x1339 : Ojs.t) -> intf_of_js __tags_of_js x1339
         and this_to_js :
           'tags 'R 'W .
             ('tags -> Ojs.t) ->
               ('R -> Ojs.t) ->
                 ('W -> Ojs.t) -> ('tags, 'R, 'W) this -> Ojs.t
           =
           fun (type __tags) ->
             fun (type __R) ->
               fun (type __W) ->
                 fun (__tags_to_js : __tags -> Ojs.t) ->
                   fun (__R_to_js : __R -> Ojs.t) ->
                     fun (__W_to_js : __W -> Ojs.t) ->
                       fun (x1337 : __tags intf) ->
                         intf_to_js __tags_to_js x1337
         let (get_readable : ('tags, 'R, 'W) this -> 'R ReadableStream.t) =
           fun (x1341 : ('tags, 'R, 'W) this) ->
             ReadableStream.t_of_js Obj.magic
               (Ojs.get_prop_ascii
                  (this_to_js Obj.magic Obj.magic Obj.magic x1341) "readable")
         let (set_readable :
           ('tags, 'R, 'W) this -> 'R ReadableStream.t -> unit) =
           fun (x1346 : ('tags, 'R, 'W) this) ->
             fun (x1347 : 'R ReadableStream.t) ->
               Ojs.set_prop_ascii
                 (this_to_js Obj.magic Obj.magic Obj.magic x1346) "readable"
                 (ReadableStream.t_to_js Obj.magic x1347)
         let (get_writable : ('tags, 'R, 'W) this -> 'W WritableStream.t) =
           fun (x1352 : ('tags, 'R, 'W) this) ->
             WritableStream.t_of_js Obj.magic
               (Ojs.get_prop_ascii
                  (this_to_js Obj.magic Obj.magic Obj.magic x1352) "writable")
         let (set_writable :
           ('tags, 'R, 'W) this -> 'W WritableStream.t -> unit) =
           fun (x1357 : ('tags, 'R, 'W) this) ->
             fun (x1358 : 'W WritableStream.t) ->
               Ojs.set_prop_ascii
                 (this_to_js Obj.magic Obj.magic Obj.magic x1357) "writable"
                 (WritableStream.t_to_js Obj.magic x1358)
         let (create :
           readable:'R ReadableStream.t ->
             writable:'W WritableStream.t -> unit -> ('R, 'W) t)
           =
           fun ~readable:(x1363 : 'R ReadableStream.t) ->
             fun ~writable:(x1364 : 'W WritableStream.t) ->
               fun () ->
                 let x1365 = Ojs.empty_obj () in
                 Ojs.set_prop_ascii x1365 "readable"
                   (ReadableStream.t_to_js Obj.magic x1363);
                 Ojs.set_prop_ascii x1365 "writable"
                   (WritableStream.t_to_js Obj.magic x1364);
                 t_of_js Obj.magic Obj.magic x1365
         let cast_from = Obj.magic
       end
module BufferSource =
  struct
    type t = (ArrayBuffer.t_0, ArrayBufferView.t_0) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x1373 : Ojs.t) ->
        union2_of_js ArrayBuffer.t_0_of_js ArrayBufferView.t_0_of_js x1373
    and t_to_js : t -> Ojs.t =
      fun (x1370 : (ArrayBuffer.t_0, ArrayBufferView.t_0) union2) ->
        union2_to_js ArrayBuffer.t_0_to_js ArrayBufferView.t_0_to_js x1370
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1377 : Ojs.t) -> t_of_js x1377
    and t_0_to_js : t_0 -> Ojs.t = fun (x1376 : t) -> t_to_js x1376
  end
module rec
  Blob:sig
         type t = [ `Blob ] intf
         type t_0 = t
         [@@@js.stop ]
         type tags = [ `Blob ]
         type tags_0 = tags
         [@@@js.start ]
         [@@@js.implem type tags = [ `Blob ]
           type tags_0 = tags]
         type 'tags this = 'tags intf constraint 'tags = [> `Blob ]
         val t_to_js : t -> Ojs.t
         val t_of_js : Ojs.t -> t
         val t_0_to_js : t_0 -> Ojs.t
         val t_0_of_js : Ojs.t -> t_0
         val get_size : 'tags this -> float
         val get_type : 'tags this -> string
         val arrayBuffer : 'tags this -> ArrayBuffer.t_0 Promise.t_1
         val slice :
           'tags this ->
             ?start:float -> ?end_:float -> ?contentType:string -> unit -> t
         val stream : 'tags this -> ReadableStream.t_0
         val text : 'tags this -> string Promise.t_1
         val cast_from : 'tags this -> t
         val prototype : unit -> t
         val create :
           ?blobParts:BlobPart.t list ->
             ?options:BlobPropertyBag.t -> unit -> t
       end =
  struct
    type t = [ `Blob ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1379 : Ojs.t) -> t_of_js x1379
    and t_0_to_js : t_0 -> Ojs.t = fun (x1378 : t) -> t_to_js x1378
    type tags = [ `Blob ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Blob ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1382 : Ojs.t) -> intf_of_js __tags_of_js x1382
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1380 : __tags intf) -> intf_to_js __tags_to_js x1380
    let (get_size : 'tags this -> float) =
      fun (x1384 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1384) "size")
    let (get_type : 'tags this -> string) =
      fun (x1386 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1386) "type")
    let (arrayBuffer : 'tags this -> ArrayBuffer.t_0 Promise.t_1) =
      fun (x1388 : 'tags this) ->
        Promise.t_1_of_js ArrayBuffer.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x1388) "arrayBuffer" [||])
    let (slice :
      'tags this ->
        ?start:float -> ?end_:float -> ?contentType:string -> unit -> t)
      =
      fun (x1398 : 'tags this) ->
        fun ?start:(x1391 : float option) ->
          fun ?end_:(x1392 : float option) ->
            fun ?contentType:(x1393 : string option) ->
              fun () ->
                t_of_js
                  (let x1400 = this_to_js Obj.magic x1398 in
                   Ojs.call (Ojs.get_prop_ascii x1400 "slice") "apply"
                     [|x1400;((let x1394 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x1391 with
                                | Some x1397 ->
                                    ignore
                                      (Ojs.call x1394 "push"
                                         [|(Ojs.float_to_js x1397)|])
                                | None -> ());
                               (match x1392 with
                                | Some x1396 ->
                                    ignore
                                      (Ojs.call x1394 "push"
                                         [|(Ojs.float_to_js x1396)|])
                                | None -> ());
                               (match x1393 with
                                | Some x1395 ->
                                    ignore
                                      (Ojs.call x1394 "push"
                                         [|(Ojs.string_to_js x1395)|])
                                | None -> ());
                               x1394))|])
    let (stream : 'tags this -> ReadableStream.t_0) =
      fun (x1401 : 'tags this) ->
        ReadableStream.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x1401) "stream" [||])
    let (text : 'tags this -> string Promise.t_1) =
      fun (x1403 : 'tags this) ->
        Promise.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x1403) "text" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Blob")
             "prototype")
    let (create :
      ?blobParts:BlobPart.t list -> ?options:BlobPropertyBag.t -> unit -> t)
      =
      fun ?blobParts:(x1406 : BlobPart.t list option) ->
        fun ?options:(x1407 : BlobPropertyBag.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Blob")
                 (let x1408 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x1406 with
                   | Some x1410 ->
                       ignore
                         (Ojs.call x1408 "push"
                            [|(Ojs.list_to_js BlobPart.t_to_js x1410)|])
                   | None -> ());
                  (match x1407 with
                   | Some x1409 ->
                       ignore
                         (Ojs.call x1408 "push"
                            [|(BlobPropertyBag.t_to_js x1409)|])
                   | None -> ());
                  x1408))
  end
 and
  BlobPart:sig
             type t =
               [ `String of string 
               | `Other of (Blob.t, BufferSource.t) union2 ] Primitive.t
             type t_0 = t
             val t_to_js : t -> Ojs.t
             val t_of_js : Ojs.t -> t
             val t_0_to_js : t_0 -> Ojs.t
             val t_0_of_js : Ojs.t -> t_0
           end =
  struct
    type t =
      [ `String of string  | `Other of (Blob.t, BufferSource.t) union2 ]
        Primitive.t
    let rec t_of_js : Ojs.t -> t =
      fun (x1418 : Ojs.t) ->
        Primitive.t_of_js
          (fun (x1419 : Ojs.t) ->
             let x1420 = x1419 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x1420 "dummy") with
             | "String" -> `String (Ojs.string_of_js x1420)
             | "Other" ->
                 `Other
                   (union2_of_js Blob.t_of_js BufferSource.t_of_js x1420)
             | _ -> assert false) x1418
    and t_to_js : t -> Ojs.t =
      fun
        (x1412 :
          [ `String of string  | `Other of (Blob.t, BufferSource.t) union2 ]
            Primitive.t)
        ->
        Primitive.t_to_js
          (fun
             (x1413 :
               [ `String of string 
               | `Other of (Blob.t, BufferSource.t) union2 ])
             ->
             match x1413 with
             | `String x1414 -> Ojs.string_to_js x1414
             | `Other x1415 ->
                 union2_to_js Blob.t_to_js BufferSource.t_to_js x1415) x1412
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1424 : Ojs.t) -> t_of_js x1424
    and t_0_to_js : t_0 -> Ojs.t = fun (x1423 : t) -> t_to_js x1423
  end
module File =
  struct
    type t = [ `Blob  | `File ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1426 : Ojs.t) -> t_of_js x1426
    and t_0_to_js : t_0 -> Ojs.t = fun (x1425 : t) -> t_to_js x1425
    type tags = [ `Blob  | `File ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `File ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1429 : Ojs.t) -> intf_of_js __tags_of_js x1429
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1427 : __tags intf) -> intf_to_js __tags_to_js x1427
    let (get_lastModified : 'tags this -> float) =
      fun (x1431 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1431) "lastModified")
    let (get_name : 'tags this -> string) =
      fun (x1433 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1433) "name")
    let (get_webkitRelativePath : 'tags this -> string) =
      fun (x1435 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1435)
             "webkitRelativePath")
    let (create :
      lastModified:float ->
        name:string -> webkitRelativePath:string -> unit -> t)
      =
      fun ~lastModified:(x1437 : float) ->
        fun ~name:(x1438 : string) ->
          fun ~webkitRelativePath:(x1439 : string) ->
            fun () ->
              let x1440 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x1440 "lastModified" (Ojs.float_to_js x1437);
              Ojs.set_prop_ascii x1440 "name" (Ojs.string_to_js x1438);
              Ojs.set_prop_ascii x1440 "webkitRelativePath"
                (Ojs.string_to_js x1439);
              t_of_js x1440
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "File")
             "prototype")
    let (create' :
      fileBits:BlobPart.t list ->
        fileName:string -> ?options:FilePropertyBag.t -> unit -> t)
      =
      fun ~fileBits:(x1441 : BlobPart.t list) ->
        fun ~fileName:(x1442 : string) ->
          fun ?options:(x1443 : FilePropertyBag.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "File")
                   (let x1444 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x1444 "push"
                         [|(Ojs.list_to_js BlobPart.t_to_js x1441)|]);
                    ignore
                      (Ojs.call x1444 "push" [|(Ojs.string_to_js x1442)|]);
                    (match x1443 with
                     | Some x1445 ->
                         ignore
                           (Ojs.call x1444 "push"
                              [|(FilePropertyBag.t_to_js x1445)|])
                     | None -> ());
                    x1444))
  end
module FileSystemFileHandle =
  struct
    type t = [ `FileSystemFileHandle  | `FileSystemHandle ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1448 : Ojs.t) -> t_of_js x1448
    and t_0_to_js : t_0 -> Ojs.t = fun (x1447 : t) -> t_to_js x1447
    type tags = [ `FileSystemFileHandle  | `FileSystemHandle ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FileSystemFileHandle ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1451 : Ojs.t) -> intf_of_js __tags_of_js x1451
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1449 : __tags intf) -> intf_to_js __tags_to_js x1449
    let (get_kind : 'tags this -> [ `L_s75_file ]) =
      fun (x1453 : 'tags this) ->
        let x1455 = Ojs.get_prop_ascii (this_to_js Obj.magic x1453) "kind" in
        match Ojs.string_of_js x1455 with
        | "file" -> `L_s75_file
        | _ -> assert false
    let (getFile : 'tags this -> File.t Promise.t_1) =
      fun (x1456 : 'tags this) ->
        Promise.t_1_of_js File.t_of_js
          (Ojs.call (this_to_js Obj.magic x1456) "getFile" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "FileSystemFileHandle")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FileSystemFileHandle")
             [||])
  end
module FileSystemDirectoryHandle =
  struct
    type t = [ `FileSystemDirectoryHandle  | `FileSystemHandle ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1460 : Ojs.t) -> t_of_js x1460
    and t_0_to_js : t_0 -> Ojs.t = fun (x1459 : t) -> t_to_js x1459
    type tags = [ `FileSystemDirectoryHandle  | `FileSystemHandle ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FileSystemDirectoryHandle ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1463 : Ojs.t) -> intf_of_js __tags_of_js x1463
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1461 : __tags intf) -> intf_to_js __tags_to_js x1461
    let (get_kind : 'tags this -> [ `L_s61_directory ]) =
      fun (x1465 : 'tags this) ->
        let x1467 = Ojs.get_prop_ascii (this_to_js Obj.magic x1465) "kind" in
        match Ojs.string_of_js x1467 with
        | "directory" -> `L_s61_directory
        | _ -> assert false
    let (getDirectoryHandle :
      'tags this ->
        name:string ->
          ?options:FileSystemGetDirectoryOptions.t -> unit -> t Promise.t_1)
      =
      fun (x1472 : 'tags this) ->
        fun ~name:(x1468 : string) ->
          fun ?options:(x1469 : FileSystemGetDirectoryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js t_of_js
                (let x1474 = this_to_js Obj.magic x1472 in
                 Ojs.call (Ojs.get_prop_ascii x1474 "getDirectoryHandle")
                   "apply"
                   [|x1474;((let x1470 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1470 "push"
                                  [|(Ojs.string_to_js x1468)|]);
                             (match x1469 with
                              | Some x1471 ->
                                  ignore
                                    (Ojs.call x1470 "push"
                                       [|(FileSystemGetDirectoryOptions.t_to_js
                                            x1471)|])
                              | None -> ());
                             x1470))|])
    let (getFileHandle :
      'tags this ->
        name:string ->
          ?options:FileSystemGetFileOptions.t ->
            unit -> FileSystemFileHandle.t Promise.t_1)
      =
      fun (x1480 : 'tags this) ->
        fun ~name:(x1476 : string) ->
          fun ?options:(x1477 : FileSystemGetFileOptions.t option) ->
            fun () ->
              Promise.t_1_of_js FileSystemFileHandle.t_of_js
                (let x1482 = this_to_js Obj.magic x1480 in
                 Ojs.call (Ojs.get_prop_ascii x1482 "getFileHandle") "apply"
                   [|x1482;((let x1478 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1478 "push"
                                  [|(Ojs.string_to_js x1476)|]);
                             (match x1477 with
                              | Some x1479 ->
                                  ignore
                                    (Ojs.call x1478 "push"
                                       [|(FileSystemGetFileOptions.t_to_js
                                            x1479)|])
                              | None -> ());
                             x1478))|])
    let (removeEntry :
      'tags this ->
        name:string ->
          ?options:FileSystemRemoveOptions.t -> unit -> unit Promise.t_1)
      =
      fun (x1488 : 'tags this) ->
        fun ~name:(x1484 : string) ->
          fun ?options:(x1485 : FileSystemRemoveOptions.t option) ->
            fun () ->
              Promise.t_1_of_js Ojs.unit_of_js
                (let x1490 = this_to_js Obj.magic x1488 in
                 Ojs.call (Ojs.get_prop_ascii x1490 "removeEntry") "apply"
                   [|x1490;((let x1486 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1486 "push"
                                  [|(Ojs.string_to_js x1484)|]);
                             (match x1485 with
                              | Some x1487 ->
                                  ignore
                                    (Ojs.call x1486 "push"
                                       [|(FileSystemRemoveOptions.t_to_js
                                            x1487)|])
                              | None -> ());
                             x1486))|])
    let (resolve :
      'tags this ->
        possibleDescendant:FileSystemHandle.t ->
          string list option Promise.t_1)
      =
      fun (x1493 : 'tags this) ->
        fun ~possibleDescendant:(x1492 : FileSystemHandle.t) ->
          Promise.t_1_of_js
            (fun (x1495 : Ojs.t) ->
               Ojs.option_of_js
                 (fun (x1496 : Ojs.t) ->
                    Ojs.list_of_js Ojs.string_of_js x1496) x1495)
            (Ojs.call (this_to_js Obj.magic x1493) "resolve"
               [|(FileSystemHandle.t_to_js x1492)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "FileSystemDirectoryHandle")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "FileSystemDirectoryHandle") 
             [||])
  end
module StorageManager =
  struct
    type t = [ `StorageManager ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1499 : Ojs.t) -> t_of_js x1499
    and t_0_to_js : t_0 -> Ojs.t = fun (x1498 : t) -> t_to_js x1498
    type tags = [ `StorageManager ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `StorageManager ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1502 : Ojs.t) -> intf_of_js __tags_of_js x1502
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1500 : __tags intf) -> intf_to_js __tags_to_js x1500
    let (estimate : 'tags this -> StorageEstimate.t Promise.t_1) =
      fun (x1504 : 'tags this) ->
        Promise.t_1_of_js StorageEstimate.t_of_js
          (Ojs.call (this_to_js Obj.magic x1504) "estimate" [||])
    let (getDirectory :
      'tags this -> FileSystemDirectoryHandle.t Promise.t_1) =
      fun (x1507 : 'tags this) ->
        Promise.t_1_of_js FileSystemDirectoryHandle.t_of_js
          (Ojs.call (this_to_js Obj.magic x1507) "getDirectory" [||])
    let (persisted : 'tags this -> bool Promise.t_1) =
      fun (x1510 : 'tags this) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (this_to_js Obj.magic x1510) "persisted" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "StorageManager") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "StorageManager") [||])
  end
module NavigatorStorage =
  struct
    type t = [ `NavigatorStorage ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1514 : Ojs.t) -> t_of_js x1514
    and t_0_to_js : t_0 -> Ojs.t = fun (x1513 : t) -> t_to_js x1513
    type tags = [ `NavigatorStorage ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NavigatorStorage ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1517 : Ojs.t) -> intf_of_js __tags_of_js x1517
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1515 : __tags intf) -> intf_to_js __tags_to_js x1515
    let (get_storage : 'tags this -> StorageManager.t) =
      fun (x1519 : 'tags this) ->
        StorageManager.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1519) "storage")
    let (create : storage:StorageManager.t -> unit -> t) =
      fun ~storage:(x1521 : StorageManager.t) ->
        fun () ->
          let x1522 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x1522 "storage" (StorageManager.t_to_js x1521);
          t_of_js x1522
    let cast_from = Obj.magic
  end
module NavigatorOnLine =
  struct
    type t = [ `NavigatorOnLine ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1524 : Ojs.t) -> t_of_js x1524
    and t_0_to_js : t_0 -> Ojs.t = fun (x1523 : t) -> t_to_js x1523
    type tags = [ `NavigatorOnLine ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NavigatorOnLine ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1527 : Ojs.t) -> intf_of_js __tags_of_js x1527
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1525 : __tags intf) -> intf_to_js __tags_to_js x1525
    let (get_onLine : 'tags this -> bool) =
      fun (x1529 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1529) "onLine")
    let (create : onLine:bool -> unit -> t) =
      fun ~onLine:(x1531 : bool) ->
        fun () ->
          let x1532 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x1532 "onLine" (Ojs.bool_to_js x1531);
          t_of_js x1532
    let cast_from = Obj.magic
  end
module ConnectionType =
  struct
    type t =
      [ `L_s118_mixed  | `L_s130_none  | `L_s144_other  | `L_s201_unknown 
      | `L_s213_wifi  | `L_s46_bluetooth  | `L_s47_cellular 
      | `L_s69_ethernet ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1534 : Ojs.t) ->
        let x1535 = x1534 in
        match Ojs.string_of_js x1535 with
        | "mixed" -> `L_s118_mixed
        | "none" -> `L_s130_none
        | "other" -> `L_s144_other
        | "unknown" -> `L_s201_unknown
        | "wifi" -> `L_s213_wifi
        | "bluetooth" -> `L_s46_bluetooth
        | "cellular" -> `L_s47_cellular
        | "ethernet" -> `L_s69_ethernet
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x1533 :
          [ `L_s118_mixed  | `L_s130_none  | `L_s144_other 
          | `L_s201_unknown  | `L_s213_wifi  | `L_s46_bluetooth 
          | `L_s47_cellular  | `L_s69_ethernet ])
        ->
        match x1533 with
        | `L_s118_mixed -> Ojs.string_to_js "mixed"
        | `L_s130_none -> Ojs.string_to_js "none"
        | `L_s144_other -> Ojs.string_to_js "other"
        | `L_s201_unknown -> Ojs.string_to_js "unknown"
        | `L_s213_wifi -> Ojs.string_to_js "wifi"
        | `L_s46_bluetooth -> Ojs.string_to_js "bluetooth"
        | `L_s47_cellular -> Ojs.string_to_js "cellular"
        | `L_s69_ethernet -> Ojs.string_to_js "ethernet"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1537 : Ojs.t) -> t_of_js x1537
    and t_0_to_js : t_0 -> Ojs.t = fun (x1536 : t) -> t_to_js x1536
  end
module NetworkInformation =
  struct
    type t = [ `EventTarget  | `NetworkInformation ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1539 : Ojs.t) -> t_of_js x1539
    and t_0_to_js : t_0 -> Ojs.t = fun (x1538 : t) -> t_to_js x1538
    type tags = [ `EventTarget  | `NetworkInformation ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NetworkInformation ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1542 : Ojs.t) -> intf_of_js __tags_of_js x1542
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1540 : __tags intf) -> intf_to_js __tags_to_js x1540
    let (get_type : 'tags this -> ConnectionType.t) =
      fun (x1544 : 'tags this) ->
        ConnectionType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1544) "type")
    let (create : type_:ConnectionType.t -> unit -> t) =
      fun ~type_:(x1546 : ConnectionType.t) ->
        fun () ->
          let x1547 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x1547 "type" (ConnectionType.t_to_js x1546);
          t_of_js x1547
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "NetworkInformation") "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "NetworkInformation")
             [||])
  end
module NavigatorNetworkInformation =
  struct
    type t = [ `NavigatorNetworkInformation ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1549 : Ojs.t) -> t_of_js x1549
    and t_0_to_js : t_0 -> Ojs.t = fun (x1548 : t) -> t_to_js x1548
    type tags = [ `NavigatorNetworkInformation ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `NavigatorNetworkInformation ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1552 : Ojs.t) -> intf_of_js __tags_of_js x1552
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1550 : __tags intf) -> intf_to_js __tags_to_js x1550
    let (get_connection : 'tags this -> NetworkInformation.t) =
      fun (x1554 : 'tags this) ->
        NetworkInformation.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1554) "connection")
    let (create : connection:NetworkInformation.t -> unit -> t) =
      fun ~connection:(x1556 : NetworkInformation.t) ->
        fun () ->
          let x1557 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x1557 "connection"
            (NetworkInformation.t_to_js x1556);
          t_of_js x1557
    let cast_from = Obj.magic
  end
module NavigatorLanguage =
  struct
    type t = [ `NavigatorLanguage ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1559 : Ojs.t) -> t_of_js x1559
    and t_0_to_js : t_0 -> Ojs.t = fun (x1558 : t) -> t_to_js x1558
    type tags = [ `NavigatorLanguage ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NavigatorLanguage ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1562 : Ojs.t) -> intf_of_js __tags_of_js x1562
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1560 : __tags intf) -> intf_to_js __tags_to_js x1560
    let (get_language : 'tags this -> string) =
      fun (x1564 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1564) "language")
    let (get_languages : 'tags this -> string list) =
      fun (x1566 : 'tags this) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1566) "languages")
    let (create : language:string -> languages:string list -> unit -> t) =
      fun ~language:(x1569 : string) ->
        fun ~languages:(x1570 : string list) ->
          fun () ->
            let x1571 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x1571 "language" (Ojs.string_to_js x1569);
            Ojs.set_prop_ascii x1571 "languages"
              (Ojs.list_to_js Ojs.string_to_js x1570);
            t_of_js x1571
    let cast_from = Obj.magic
  end
module NavigatorID =
  struct
    type t = [ `NavigatorID ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1574 : Ojs.t) -> t_of_js x1574
    and t_0_to_js : t_0 -> Ojs.t = fun (x1573 : t) -> t_to_js x1573
    type tags = [ `NavigatorID ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NavigatorID ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1577 : Ojs.t) -> intf_of_js __tags_of_js x1577
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1575 : __tags intf) -> intf_to_js __tags_to_js x1575
    let (get_appCodeName : 'tags this -> string) =
      fun (x1579 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1579) "appCodeName")
    let (get_appName : 'tags this -> string) =
      fun (x1581 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1581) "appName")
    let (get_appVersion : 'tags this -> string) =
      fun (x1583 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1583) "appVersion")
    let (get_platform : 'tags this -> string) =
      fun (x1585 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1585) "platform")
    let (get_product : 'tags this -> string) =
      fun (x1587 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1587) "product")
    let (get_userAgent : 'tags this -> string) =
      fun (x1589 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1589) "userAgent")
    let (create :
      appCodeName:string ->
        appName:string ->
          appVersion:string ->
            platform:string ->
              product:string -> userAgent:string -> unit -> t)
      =
      fun ~appCodeName:(x1591 : string) ->
        fun ~appName:(x1592 : string) ->
          fun ~appVersion:(x1593 : string) ->
            fun ~platform:(x1594 : string) ->
              fun ~product:(x1595 : string) ->
                fun ~userAgent:(x1596 : string) ->
                  fun () ->
                    let x1597 = Ojs.empty_obj () in
                    Ojs.set_prop_ascii x1597 "appCodeName"
                      (Ojs.string_to_js x1591);
                    Ojs.set_prop_ascii x1597 "appName"
                      (Ojs.string_to_js x1592);
                    Ojs.set_prop_ascii x1597 "appVersion"
                      (Ojs.string_to_js x1593);
                    Ojs.set_prop_ascii x1597 "platform"
                      (Ojs.string_to_js x1594);
                    Ojs.set_prop_ascii x1597 "product"
                      (Ojs.string_to_js x1595);
                    Ojs.set_prop_ascii x1597 "userAgent"
                      (Ojs.string_to_js x1596);
                    t_of_js x1597
    let cast_from = Obj.magic
  end
module NavigatorConcurrentHardware =
  struct
    type t = [ `NavigatorConcurrentHardware ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1599 : Ojs.t) -> t_of_js x1599
    and t_0_to_js : t_0 -> Ojs.t = fun (x1598 : t) -> t_to_js x1598
    type tags = [ `NavigatorConcurrentHardware ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `NavigatorConcurrentHardware ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1602 : Ojs.t) -> intf_of_js __tags_of_js x1602
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1600 : __tags intf) -> intf_to_js __tags_to_js x1600
    let (get_hardwareConcurrency : 'tags this -> float) =
      fun (x1604 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1604)
             "hardwareConcurrency")
    let (create : hardwareConcurrency:float -> unit -> t) =
      fun ~hardwareConcurrency:(x1606 : float) ->
        fun () ->
          let x1607 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x1607 "hardwareConcurrency"
            (Ojs.float_to_js x1606);
          t_of_js x1607
    let cast_from = Obj.magic
  end
module MediaEncodingType =
  struct
    type t = [ `L_s167_record  | `L_s212_webrtc ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1609 : Ojs.t) ->
        let x1610 = x1609 in
        match Ojs.string_of_js x1610 with
        | "record" -> `L_s167_record
        | "webrtc" -> `L_s212_webrtc
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x1608 : [ `L_s167_record  | `L_s212_webrtc ]) ->
        match x1608 with
        | `L_s167_record -> Ojs.string_to_js "record"
        | `L_s212_webrtc -> Ojs.string_to_js "webrtc"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1612 : Ojs.t) -> t_of_js x1612
    and t_0_to_js : t_0 -> Ojs.t = fun (x1611 : t) -> t_to_js x1611
  end
module TransferFunction =
  struct
    type t = [ `L_s153_pq  | `L_s187_srgb  | `L_s88_hlg ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1614 : Ojs.t) ->
        let x1615 = x1614 in
        match Ojs.string_of_js x1615 with
        | "pq" -> `L_s153_pq
        | "srgb" -> `L_s187_srgb
        | "hlg" -> `L_s88_hlg
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x1613 : [ `L_s153_pq  | `L_s187_srgb  | `L_s88_hlg ]) ->
        match x1613 with
        | `L_s153_pq -> Ojs.string_to_js "pq"
        | `L_s187_srgb -> Ojs.string_to_js "srgb"
        | `L_s88_hlg -> Ojs.string_to_js "hlg"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1617 : Ojs.t) -> t_of_js x1617
    and t_0_to_js : t_0 -> Ojs.t = fun (x1616 : t) -> t_to_js x1616
  end
module HdrMetadataType =
  struct
    type t =
      [ `L_s183_smpteSt2086  | `L_s184_smpteSt2094_10 
      | `L_s185_smpteSt2094_40 ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1619 : Ojs.t) ->
        let x1620 = x1619 in
        match Ojs.string_of_js x1620 with
        | "smpteSt2086" -> `L_s183_smpteSt2086
        | "smpteSt2094-10" -> `L_s184_smpteSt2094_10
        | "smpteSt2094-40" -> `L_s185_smpteSt2094_40
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x1618 :
          [ `L_s183_smpteSt2086  | `L_s184_smpteSt2094_10 
          | `L_s185_smpteSt2094_40 ])
        ->
        match x1618 with
        | `L_s183_smpteSt2086 -> Ojs.string_to_js "smpteSt2086"
        | `L_s184_smpteSt2094_10 -> Ojs.string_to_js "smpteSt2094-10"
        | `L_s185_smpteSt2094_40 -> Ojs.string_to_js "smpteSt2094-40"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1622 : Ojs.t) -> t_of_js x1622
    and t_0_to_js : t_0 -> Ojs.t = fun (x1621 : t) -> t_to_js x1621
  end
module ColorGamut =
  struct
    type t = [ `L_s146_p3  | `L_s166_rec2020  | `L_s187_srgb ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1624 : Ojs.t) ->
        let x1625 = x1624 in
        match Ojs.string_of_js x1625 with
        | "p3" -> `L_s146_p3
        | "rec2020" -> `L_s166_rec2020
        | "srgb" -> `L_s187_srgb
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x1623 : [ `L_s146_p3  | `L_s166_rec2020  | `L_s187_srgb ]) ->
        match x1623 with
        | `L_s146_p3 -> Ojs.string_to_js "p3"
        | `L_s166_rec2020 -> Ojs.string_to_js "rec2020"
        | `L_s187_srgb -> Ojs.string_to_js "srgb"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1627 : Ojs.t) -> t_of_js x1627
    and t_0_to_js : t_0 -> Ojs.t = fun (x1626 : t) -> t_to_js x1626
  end
module VideoConfiguration =
  struct
    type t = [ `VideoConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1629 : Ojs.t) -> t_of_js x1629
    and t_0_to_js : t_0 -> Ojs.t = fun (x1628 : t) -> t_to_js x1628
    type tags = [ `VideoConfiguration ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `VideoConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1632 : Ojs.t) -> intf_of_js __tags_of_js x1632
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1630 : __tags intf) -> intf_to_js __tags_to_js x1630
    let (get_bitrate : 'tags this -> float) =
      fun (x1634 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1634) "bitrate")
    let (set_bitrate : 'tags this -> float -> unit) =
      fun (x1636 : 'tags this) ->
        fun (x1637 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1636) "bitrate"
            (Ojs.float_to_js x1637)
    let (get_colorGamut : 'tags this -> ColorGamut.t option) =
      fun (x1639 : 'tags this) ->
        Ojs.option_of_js ColorGamut.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1639) "colorGamut")
    let (set_colorGamut : 'tags this -> ColorGamut.t -> unit) =
      fun (x1642 : 'tags this) ->
        fun (x1643 : ColorGamut.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1642) "colorGamut"
            (ColorGamut.t_to_js x1643)
    let (get_contentType : 'tags this -> string) =
      fun (x1645 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1645) "contentType")
    let (set_contentType : 'tags this -> string -> unit) =
      fun (x1647 : 'tags this) ->
        fun (x1648 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1647) "contentType"
            (Ojs.string_to_js x1648)
    let (get_framerate : 'tags this -> float) =
      fun (x1650 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1650) "framerate")
    let (set_framerate : 'tags this -> float -> unit) =
      fun (x1652 : 'tags this) ->
        fun (x1653 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1652) "framerate"
            (Ojs.float_to_js x1653)
    let (get_hdrMetadataType : 'tags this -> HdrMetadataType.t option) =
      fun (x1655 : 'tags this) ->
        Ojs.option_of_js HdrMetadataType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1655) "hdrMetadataType")
    let (set_hdrMetadataType : 'tags this -> HdrMetadataType.t -> unit) =
      fun (x1658 : 'tags this) ->
        fun (x1659 : HdrMetadataType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1658) "hdrMetadataType"
            (HdrMetadataType.t_to_js x1659)
    let (get_height : 'tags this -> float) =
      fun (x1661 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1661) "height")
    let (set_height : 'tags this -> float -> unit) =
      fun (x1663 : 'tags this) ->
        fun (x1664 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1663) "height"
            (Ojs.float_to_js x1664)
    let (get_scalabilityMode : 'tags this -> string option) =
      fun (x1666 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1666) "scalabilityMode")
    let (set_scalabilityMode : 'tags this -> string -> unit) =
      fun (x1669 : 'tags this) ->
        fun (x1670 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1669) "scalabilityMode"
            (Ojs.string_to_js x1670)
    let (get_transferFunction : 'tags this -> TransferFunction.t option) =
      fun (x1672 : 'tags this) ->
        Ojs.option_of_js TransferFunction.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1672) "transferFunction")
    let (set_transferFunction : 'tags this -> TransferFunction.t -> unit) =
      fun (x1675 : 'tags this) ->
        fun (x1676 : TransferFunction.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1675) "transferFunction"
            (TransferFunction.t_to_js x1676)
    let (get_width : 'tags this -> float) =
      fun (x1678 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1678) "width")
    let (set_width : 'tags this -> float -> unit) =
      fun (x1680 : 'tags this) ->
        fun (x1681 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1680) "width"
            (Ojs.float_to_js x1681)
    let (create :
      bitrate:float ->
        ?colorGamut:ColorGamut.t ->
          contentType:string ->
            framerate:float ->
              ?hdrMetadataType:HdrMetadataType.t ->
                height:float ->
                  ?scalabilityMode:string ->
                    ?transferFunction:TransferFunction.t ->
                      width:float -> unit -> t)
      =
      fun ~bitrate:(x1683 : float) ->
        fun ?colorGamut:(x1684 : ColorGamut.t option) ->
          fun ~contentType:(x1685 : string) ->
            fun ~framerate:(x1686 : float) ->
              fun ?hdrMetadataType:(x1687 : HdrMetadataType.t option) ->
                fun ~height:(x1688 : float) ->
                  fun ?scalabilityMode:(x1689 : string option) ->
                    fun ?transferFunction:(x1690 : TransferFunction.t option)
                      ->
                      fun ~width:(x1691 : float) ->
                        fun () ->
                          let x1692 = Ojs.empty_obj () in
                          Ojs.set_prop_ascii x1692 "bitrate"
                            (Ojs.float_to_js x1683);
                          (match x1684 with
                           | Some x1696 ->
                               Ojs.set_prop_ascii x1692 "colorGamut"
                                 (ColorGamut.t_to_js x1696)
                           | None -> ());
                          Ojs.set_prop_ascii x1692 "contentType"
                            (Ojs.string_to_js x1685);
                          Ojs.set_prop_ascii x1692 "framerate"
                            (Ojs.float_to_js x1686);
                          (match x1687 with
                           | Some x1695 ->
                               Ojs.set_prop_ascii x1692 "hdrMetadataType"
                                 (HdrMetadataType.t_to_js x1695)
                           | None -> ());
                          Ojs.set_prop_ascii x1692 "height"
                            (Ojs.float_to_js x1688);
                          (match x1689 with
                           | Some x1694 ->
                               Ojs.set_prop_ascii x1692 "scalabilityMode"
                                 (Ojs.string_to_js x1694)
                           | None -> ());
                          (match x1690 with
                           | Some x1693 ->
                               Ojs.set_prop_ascii x1692 "transferFunction"
                                 (TransferFunction.t_to_js x1693)
                           | None -> ());
                          Ojs.set_prop_ascii x1692 "width"
                            (Ojs.float_to_js x1691);
                          t_of_js x1692
    let cast_from = Obj.magic
  end
module AudioConfiguration =
  struct
    type t = [ `AudioConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1698 : Ojs.t) -> t_of_js x1698
    and t_0_to_js : t_0 -> Ojs.t = fun (x1697 : t) -> t_to_js x1697
    type tags = [ `AudioConfiguration ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AudioConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1701 : Ojs.t) -> intf_of_js __tags_of_js x1701
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1699 : __tags intf) -> intf_to_js __tags_to_js x1699
    let (get_bitrate : 'tags this -> float option) =
      fun (x1703 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1703) "bitrate")
    let (set_bitrate : 'tags this -> float -> unit) =
      fun (x1706 : 'tags this) ->
        fun (x1707 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1706) "bitrate"
            (Ojs.float_to_js x1707)
    let (get_channels : 'tags this -> string option) =
      fun (x1709 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1709) "channels")
    let (set_channels : 'tags this -> string -> unit) =
      fun (x1712 : 'tags this) ->
        fun (x1713 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1712) "channels"
            (Ojs.string_to_js x1713)
    let (get_contentType : 'tags this -> string) =
      fun (x1715 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1715) "contentType")
    let (set_contentType : 'tags this -> string -> unit) =
      fun (x1717 : 'tags this) ->
        fun (x1718 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1717) "contentType"
            (Ojs.string_to_js x1718)
    let (get_samplerate : 'tags this -> float option) =
      fun (x1720 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1720) "samplerate")
    let (set_samplerate : 'tags this -> float -> unit) =
      fun (x1723 : 'tags this) ->
        fun (x1724 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1723) "samplerate"
            (Ojs.float_to_js x1724)
    let (get_spatialRendering : 'tags this -> bool option) =
      fun (x1726 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1726) "spatialRendering")
    let (set_spatialRendering : 'tags this -> bool -> unit) =
      fun (x1729 : 'tags this) ->
        fun (x1730 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1729) "spatialRendering"
            (Ojs.bool_to_js x1730)
    let (create :
      ?bitrate:float ->
        ?channels:string ->
          contentType:string ->
            ?samplerate:float -> ?spatialRendering:bool -> unit -> t)
      =
      fun ?bitrate:(x1732 : float option) ->
        fun ?channels:(x1733 : string option) ->
          fun ~contentType:(x1734 : string) ->
            fun ?samplerate:(x1735 : float option) ->
              fun ?spatialRendering:(x1736 : bool option) ->
                fun () ->
                  let x1737 = Ojs.empty_obj () in
                  (match x1732 with
                   | Some x1741 ->
                       Ojs.set_prop_ascii x1737 "bitrate"
                         (Ojs.float_to_js x1741)
                   | None -> ());
                  (match x1733 with
                   | Some x1740 ->
                       Ojs.set_prop_ascii x1737 "channels"
                         (Ojs.string_to_js x1740)
                   | None -> ());
                  Ojs.set_prop_ascii x1737 "contentType"
                    (Ojs.string_to_js x1734);
                  (match x1735 with
                   | Some x1739 ->
                       Ojs.set_prop_ascii x1737 "samplerate"
                         (Ojs.float_to_js x1739)
                   | None -> ());
                  (match x1736 with
                   | Some x1738 ->
                       Ojs.set_prop_ascii x1737 "spatialRendering"
                         (Ojs.bool_to_js x1738)
                   | None -> ());
                  t_of_js x1737
    let cast_from = Obj.magic
  end
module MediaConfiguration =
  struct
    type t = [ `MediaConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1743 : Ojs.t) -> t_of_js x1743
    and t_0_to_js : t_0 -> Ojs.t = fun (x1742 : t) -> t_to_js x1742
    type tags = [ `MediaConfiguration ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `MediaConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1746 : Ojs.t) -> intf_of_js __tags_of_js x1746
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1744 : __tags intf) -> intf_to_js __tags_to_js x1744
    let (get_audio : 'tags this -> AudioConfiguration.t option) =
      fun (x1748 : 'tags this) ->
        Ojs.option_of_js AudioConfiguration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1748) "audio")
    let (set_audio : 'tags this -> AudioConfiguration.t -> unit) =
      fun (x1751 : 'tags this) ->
        fun (x1752 : AudioConfiguration.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1751) "audio"
            (AudioConfiguration.t_to_js x1752)
    let (get_video : 'tags this -> VideoConfiguration.t option) =
      fun (x1754 : 'tags this) ->
        Ojs.option_of_js VideoConfiguration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1754) "video")
    let (set_video : 'tags this -> VideoConfiguration.t -> unit) =
      fun (x1757 : 'tags this) ->
        fun (x1758 : VideoConfiguration.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1757) "video"
            (VideoConfiguration.t_to_js x1758)
    let (create :
      ?audio:AudioConfiguration.t -> ?video:VideoConfiguration.t -> unit -> t)
      =
      fun ?audio:(x1760 : AudioConfiguration.t option) ->
        fun ?video:(x1761 : VideoConfiguration.t option) ->
          fun () ->
            let x1762 = Ojs.empty_obj () in
            (match x1760 with
             | Some x1764 ->
                 Ojs.set_prop_ascii x1762 "audio"
                   (AudioConfiguration.t_to_js x1764)
             | None -> ());
            (match x1761 with
             | Some x1763 ->
                 Ojs.set_prop_ascii x1762 "video"
                   (VideoConfiguration.t_to_js x1763)
             | None -> ());
            t_of_js x1762
    let cast_from = Obj.magic
  end
module MediaEncodingConfiguration =
  struct
    type t = [ `MediaConfiguration  | `MediaEncodingConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1766 : Ojs.t) -> t_of_js x1766
    and t_0_to_js : t_0 -> Ojs.t = fun (x1765 : t) -> t_to_js x1765
    type tags = [ `MediaConfiguration  | `MediaEncodingConfiguration ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaEncodingConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1769 : Ojs.t) -> intf_of_js __tags_of_js x1769
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1767 : __tags intf) -> intf_to_js __tags_to_js x1767
    let (get_type : 'tags this -> MediaEncodingType.t) =
      fun (x1771 : 'tags this) ->
        MediaEncodingType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1771) "type")
    let (set_type : 'tags this -> MediaEncodingType.t -> unit) =
      fun (x1773 : 'tags this) ->
        fun (x1774 : MediaEncodingType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1773) "type"
            (MediaEncodingType.t_to_js x1774)
    let (create : type_:MediaEncodingType.t -> unit -> t) =
      fun ~type_:(x1776 : MediaEncodingType.t) ->
        fun () ->
          let x1777 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x1777 "type" (MediaEncodingType.t_to_js x1776);
          t_of_js x1777
    let cast_from = Obj.magic
  end
module MediaCapabilitiesInfo =
  struct
    type t = [ `MediaCapabilitiesInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1779 : Ojs.t) -> t_of_js x1779
    and t_0_to_js : t_0 -> Ojs.t = fun (x1778 : t) -> t_to_js x1778
    type tags = [ `MediaCapabilitiesInfo ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaCapabilitiesInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1782 : Ojs.t) -> intf_of_js __tags_of_js x1782
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1780 : __tags intf) -> intf_to_js __tags_to_js x1780
    let (get_powerEfficient : 'tags this -> bool) =
      fun (x1784 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1784) "powerEfficient")
    let (set_powerEfficient : 'tags this -> bool -> unit) =
      fun (x1786 : 'tags this) ->
        fun (x1787 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1786) "powerEfficient"
            (Ojs.bool_to_js x1787)
    let (get_smooth : 'tags this -> bool) =
      fun (x1789 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1789) "smooth")
    let (set_smooth : 'tags this -> bool -> unit) =
      fun (x1791 : 'tags this) ->
        fun (x1792 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1791) "smooth"
            (Ojs.bool_to_js x1792)
    let (get_supported : 'tags this -> bool) =
      fun (x1794 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1794) "supported")
    let (set_supported : 'tags this -> bool -> unit) =
      fun (x1796 : 'tags this) ->
        fun (x1797 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1796) "supported"
            (Ojs.bool_to_js x1797)
    let (create :
      powerEfficient:bool -> smooth:bool -> supported:bool -> unit -> t) =
      fun ~powerEfficient:(x1799 : bool) ->
        fun ~smooth:(x1800 : bool) ->
          fun ~supported:(x1801 : bool) ->
            fun () ->
              let x1802 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x1802 "powerEfficient"
                (Ojs.bool_to_js x1799);
              Ojs.set_prop_ascii x1802 "smooth" (Ojs.bool_to_js x1800);
              Ojs.set_prop_ascii x1802 "supported" (Ojs.bool_to_js x1801);
              t_of_js x1802
    let cast_from = Obj.magic
  end
module MediaCapabilitiesEncodingInfo =
  struct
    type t =
      [ `MediaCapabilitiesEncodingInfo  | `MediaCapabilitiesInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1804 : Ojs.t) -> t_of_js x1804
    and t_0_to_js : t_0 -> Ojs.t = fun (x1803 : t) -> t_to_js x1803
    type tags = [ `MediaCapabilitiesEncodingInfo  | `MediaCapabilitiesInfo ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaCapabilitiesEncodingInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1807 : Ojs.t) -> intf_of_js __tags_of_js x1807
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1805 : __tags intf) -> intf_to_js __tags_to_js x1805
    let (get_configuration :
      'tags this -> MediaEncodingConfiguration.t option) =
      fun (x1809 : 'tags this) ->
        Ojs.option_of_js MediaEncodingConfiguration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1809) "configuration")
    let (set_configuration :
      'tags this -> MediaEncodingConfiguration.t -> unit) =
      fun (x1812 : 'tags this) ->
        fun (x1813 : MediaEncodingConfiguration.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1812) "configuration"
            (MediaEncodingConfiguration.t_to_js x1813)
    let (create : ?configuration:MediaEncodingConfiguration.t -> unit -> t) =
      fun ?configuration:(x1815 : MediaEncodingConfiguration.t option) ->
        fun () ->
          let x1816 = Ojs.empty_obj () in
          (match x1815 with
           | Some x1817 ->
               Ojs.set_prop_ascii x1816 "configuration"
                 (MediaEncodingConfiguration.t_to_js x1817)
           | None -> ());
          t_of_js x1816
    let cast_from = Obj.magic
  end
module MediaDecodingType =
  struct
    type t = [ `L_s113_media_source  | `L_s212_webrtc  | `L_s75_file ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1819 : Ojs.t) ->
        let x1820 = x1819 in
        match Ojs.string_of_js x1820 with
        | "media-source" -> `L_s113_media_source
        | "webrtc" -> `L_s212_webrtc
        | "file" -> `L_s75_file
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x1818 : [ `L_s113_media_source  | `L_s212_webrtc  | `L_s75_file ])
        ->
        match x1818 with
        | `L_s113_media_source -> Ojs.string_to_js "media-source"
        | `L_s212_webrtc -> Ojs.string_to_js "webrtc"
        | `L_s75_file -> Ojs.string_to_js "file"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1822 : Ojs.t) -> t_of_js x1822
    and t_0_to_js : t_0 -> Ojs.t = fun (x1821 : t) -> t_to_js x1821
  end
module MediaDecodingConfiguration =
  struct
    type t = [ `MediaConfiguration  | `MediaDecodingConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1824 : Ojs.t) -> t_of_js x1824
    and t_0_to_js : t_0 -> Ojs.t = fun (x1823 : t) -> t_to_js x1823
    type tags = [ `MediaConfiguration  | `MediaDecodingConfiguration ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaDecodingConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1827 : Ojs.t) -> intf_of_js __tags_of_js x1827
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1825 : __tags intf) -> intf_to_js __tags_to_js x1825
    let (get_type : 'tags this -> MediaDecodingType.t) =
      fun (x1829 : 'tags this) ->
        MediaDecodingType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1829) "type")
    let (set_type : 'tags this -> MediaDecodingType.t -> unit) =
      fun (x1831 : 'tags this) ->
        fun (x1832 : MediaDecodingType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1831) "type"
            (MediaDecodingType.t_to_js x1832)
    let (create : type_:MediaDecodingType.t -> unit -> t) =
      fun ~type_:(x1834 : MediaDecodingType.t) ->
        fun () ->
          let x1835 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x1835 "type" (MediaDecodingType.t_to_js x1834);
          t_of_js x1835
    let cast_from = Obj.magic
  end
module MediaCapabilitiesDecodingInfo =
  struct
    type t =
      [ `MediaCapabilitiesDecodingInfo  | `MediaCapabilitiesInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1837 : Ojs.t) -> t_of_js x1837
    and t_0_to_js : t_0 -> Ojs.t = fun (x1836 : t) -> t_to_js x1836
    type tags = [ `MediaCapabilitiesDecodingInfo  | `MediaCapabilitiesInfo ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaCapabilitiesDecodingInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1840 : Ojs.t) -> intf_of_js __tags_of_js x1840
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1838 : __tags intf) -> intf_to_js __tags_to_js x1838
    let (get_configuration :
      'tags this -> MediaDecodingConfiguration.t option) =
      fun (x1842 : 'tags this) ->
        Ojs.option_of_js MediaDecodingConfiguration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1842) "configuration")
    let (set_configuration :
      'tags this -> MediaDecodingConfiguration.t -> unit) =
      fun (x1845 : 'tags this) ->
        fun (x1846 : MediaDecodingConfiguration.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1845) "configuration"
            (MediaDecodingConfiguration.t_to_js x1846)
    let (create : ?configuration:MediaDecodingConfiguration.t -> unit -> t) =
      fun ?configuration:(x1848 : MediaDecodingConfiguration.t option) ->
        fun () ->
          let x1849 = Ojs.empty_obj () in
          (match x1848 with
           | Some x1850 ->
               Ojs.set_prop_ascii x1849 "configuration"
                 (MediaDecodingConfiguration.t_to_js x1850)
           | None -> ());
          t_of_js x1849
    let cast_from = Obj.magic
  end
module MediaCapabilities =
  struct
    type t = [ `MediaCapabilities ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1852 : Ojs.t) -> t_of_js x1852
    and t_0_to_js : t_0 -> Ojs.t = fun (x1851 : t) -> t_to_js x1851
    type tags = [ `MediaCapabilities ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `MediaCapabilities ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1855 : Ojs.t) -> intf_of_js __tags_of_js x1855
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1853 : __tags intf) -> intf_to_js __tags_to_js x1853
    let (decodingInfo :
      'tags this ->
        configuration:MediaDecodingConfiguration.t ->
          MediaCapabilitiesDecodingInfo.t Promise.t_1)
      =
      fun (x1858 : 'tags this) ->
        fun ~configuration:(x1857 : MediaDecodingConfiguration.t) ->
          Promise.t_1_of_js MediaCapabilitiesDecodingInfo.t_of_js
            (Ojs.call (this_to_js Obj.magic x1858) "decodingInfo"
               [|(MediaDecodingConfiguration.t_to_js x1857)|])
    let (encodingInfo :
      'tags this ->
        configuration:MediaEncodingConfiguration.t ->
          MediaCapabilitiesEncodingInfo.t Promise.t_1)
      =
      fun (x1862 : 'tags this) ->
        fun ~configuration:(x1861 : MediaEncodingConfiguration.t) ->
          Promise.t_1_of_js MediaCapabilitiesEncodingInfo.t_of_js
            (Ojs.call (this_to_js Obj.magic x1862) "encodingInfo"
               [|(MediaEncodingConfiguration.t_to_js x1861)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "MediaCapabilities") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "MediaCapabilities")
             [||])
  end
module NavigatorStatic =
  struct
    let (mediaCapabilities : unit -> MediaCapabilities.t) =
      fun () ->
        MediaCapabilities.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "navigator")
             "mediaCapabilities")
  end
module LocationStatic =
  struct
    let (hash : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "hash")
    let (host : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "host")
    let (hostname : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "hostname")
    let (href : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "href")
    let (toString : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "location") "toString"
             [||])
    let (origin : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "origin")
    let (pathname : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "pathname")
    let (port : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "port")
    let (protocol : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "protocol")
    let (search : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "search")
  end
module IDBVersionChangeEventInit =
  struct
    type t = [ `EventInit  | `IDBVersionChangeEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1866 : Ojs.t) -> t_of_js x1866
    and t_0_to_js : t_0 -> Ojs.t = fun (x1865 : t) -> t_to_js x1865
    type tags = [ `EventInit  | `IDBVersionChangeEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBVersionChangeEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1869 : Ojs.t) -> intf_of_js __tags_of_js x1869
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1867 : __tags intf) -> intf_to_js __tags_to_js x1867
    let (get_newVersion : 'tags this -> float option option) =
      fun (x1871 : 'tags this) ->
        Ojs.option_of_js
          (fun (x1873 : Ojs.t) -> Ojs.option_of_js Ojs.float_of_js x1873)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1871) "newVersion")
    let (set_newVersion : 'tags this -> float option -> unit) =
      fun (x1875 : 'tags this) ->
        fun (x1876 : float option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1875) "newVersion"
            (Ojs.option_to_js Ojs.float_to_js x1876)
    let (get_oldVersion : 'tags this -> float option) =
      fun (x1879 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1879) "oldVersion")
    let (set_oldVersion : 'tags this -> float -> unit) =
      fun (x1882 : 'tags this) ->
        fun (x1883 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1882) "oldVersion"
            (Ojs.float_to_js x1883)
    let (create : ?newVersion:float -> ?oldVersion:float -> unit -> t) =
      fun ?newVersion:(x1885 : float option) ->
        fun ?oldVersion:(x1886 : float option) ->
          fun () ->
            let x1887 = Ojs.empty_obj () in
            (match x1885 with
             | Some x1889 ->
                 Ojs.set_prop_ascii x1887 "newVersion"
                   (Ojs.float_to_js x1889)
             | None -> ());
            (match x1886 with
             | Some x1888 ->
                 Ojs.set_prop_ascii x1887 "oldVersion"
                   (Ojs.float_to_js x1888)
             | None -> ());
            t_of_js x1887
    let cast_from = Obj.magic
  end
module IDBVersionChangeEvent =
  struct
    type t = [ `Event  | `IDBVersionChangeEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1891 : Ojs.t) -> t_of_js x1891
    and t_0_to_js : t_0 -> Ojs.t = fun (x1890 : t) -> t_to_js x1890
    type tags = [ `Event  | `IDBVersionChangeEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBVersionChangeEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1894 : Ojs.t) -> intf_of_js __tags_of_js x1894
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1892 : __tags intf) -> intf_to_js __tags_to_js x1892
    let (get_newVersion : 'tags this -> float option) =
      fun (x1896 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1896) "newVersion")
    let (get_oldVersion : 'tags this -> float) =
      fun (x1899 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1899) "oldVersion")
    let (create : ?newVersion:float -> oldVersion:float -> unit -> t) =
      fun ?newVersion:(x1901 : float option) ->
        fun ~oldVersion:(x1902 : float) ->
          fun () ->
            let x1903 = Ojs.empty_obj () in
            (match x1901 with
             | Some x1904 ->
                 Ojs.set_prop_ascii x1903 "newVersion"
                   (Ojs.float_to_js x1904)
             | None -> ());
            Ojs.set_prop_ascii x1903 "oldVersion" (Ojs.float_to_js x1902);
            t_of_js x1903
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "IDBVersionChangeEvent")
             "prototype")
    let (create' :
      type_:string -> ?eventInitDict:IDBVersionChangeEventInit.t -> unit -> t)
      =
      fun ~type_:(x1905 : string) ->
        fun ?eventInitDict:(x1906 : IDBVersionChangeEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "IDBVersionChangeEvent")
                 (let x1907 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x1907 "push" [|(Ojs.string_to_js x1905)|]);
                  (match x1906 with
                   | Some x1908 ->
                       ignore
                         (Ojs.call x1907 "push"
                            [|(IDBVersionChangeEventInit.t_to_js x1908)|])
                   | None -> ());
                  x1907))
  end
module IDBObjectStoreParameters =
  struct
    type t = [ `IDBObjectStoreParameters ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1910 : Ojs.t) -> t_of_js x1910
    and t_0_to_js : t_0 -> Ojs.t = fun (x1909 : t) -> t_to_js x1909
    type tags = [ `IDBObjectStoreParameters ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBObjectStoreParameters ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1913 : Ojs.t) -> intf_of_js __tags_of_js x1913
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1911 : __tags intf) -> intf_to_js __tags_to_js x1911
    let (get_autoIncrement : 'tags this -> bool option) =
      fun (x1915 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1915) "autoIncrement")
    let (set_autoIncrement : 'tags this -> bool -> unit) =
      fun (x1918 : 'tags this) ->
        fun (x1919 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1918) "autoIncrement"
            (Ojs.bool_to_js x1919)
    let (get_keyPath :
      'tags this ->
        [ `String of string  | `Null  | `Other of string list ] Primitive.t
          option)
      =
      fun (x1921 : 'tags this) ->
        Ojs.option_of_js
          (fun (x1923 : Ojs.t) ->
             Primitive.t_of_js
               (fun (x1924 : Ojs.t) ->
                  let x1925 = x1924 in
                  match Ojs.string_of_js (Ojs.get_prop_ascii x1925 "dummy")
                  with
                  | "String" -> `String (Ojs.string_of_js x1925)
                  | "Null" -> `Null
                  | "Other" -> `Other (Ojs.list_of_js Ojs.string_of_js x1925)
                  | _ -> assert false) x1923)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1921) "keyPath")
    let (set_keyPath :
      'tags this -> [ `Null  | `U1 of string  | `U2 of string list ] -> unit)
      =
      fun (x1927 : 'tags this) ->
        fun (x1928 : [ `Null  | `U1 of string  | `U2 of string list ]) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1927) "keyPath"
            (match x1928 with
             | `Null -> Ojs.null
             | `U1 x1929 -> Ojs.string_to_js x1929
             | `U2 x1930 -> Ojs.list_to_js Ojs.string_to_js x1930)
    let (create :
      ?autoIncrement:bool ->
        ?keyPath:[ `String of string  | `Other of string list ] Primitive.t
          -> unit -> t)
      =
      fun ?autoIncrement:(x1933 : bool option) ->
        fun
          ?keyPath:(x1934 :
                     [ `String of string  | `Other of string list ]
                       Primitive.t option)
          ->
          fun () ->
            let x1935 = Ojs.empty_obj () in
            (match x1933 with
             | Some x1941 ->
                 Ojs.set_prop_ascii x1935 "autoIncrement"
                   (Ojs.bool_to_js x1941)
             | None -> ());
            (match x1934 with
             | Some x1936 ->
                 Ojs.set_prop_ascii x1935 "keyPath"
                   (Primitive.t_to_js
                      (fun
                         (x1937 :
                           [ `String of string  | `Other of string list ])
                         ->
                         match x1937 with
                         | `String x1938 -> Ojs.string_to_js x1938
                         | `Other x1939 ->
                             Ojs.list_to_js Ojs.string_to_js x1939) x1936)
             | None -> ());
            t_of_js x1935
    let cast_from = Obj.magic
  end
module IDBIndexParameters =
  struct
    type t = [ `IDBIndexParameters ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1943 : Ojs.t) -> t_of_js x1943
    and t_0_to_js : t_0 -> Ojs.t = fun (x1942 : t) -> t_to_js x1942
    type tags = [ `IDBIndexParameters ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBIndexParameters ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1946 : Ojs.t) -> intf_of_js __tags_of_js x1946
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1944 : __tags intf) -> intf_to_js __tags_to_js x1944
    let (get_multiEntry : 'tags this -> bool option) =
      fun (x1948 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1948) "multiEntry")
    let (set_multiEntry : 'tags this -> bool -> unit) =
      fun (x1951 : 'tags this) ->
        fun (x1952 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1951) "multiEntry"
            (Ojs.bool_to_js x1952)
    let (get_unique : 'tags this -> bool option) =
      fun (x1954 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1954) "unique")
    let (set_unique : 'tags this -> bool -> unit) =
      fun (x1957 : 'tags this) ->
        fun (x1958 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1957) "unique"
            (Ojs.bool_to_js x1958)
    let (create : ?multiEntry:bool -> ?unique:bool -> unit -> t) =
      fun ?multiEntry:(x1960 : bool option) ->
        fun ?unique:(x1961 : bool option) ->
          fun () ->
            let x1962 = Ojs.empty_obj () in
            (match x1960 with
             | Some x1964 ->
                 Ojs.set_prop_ascii x1962 "multiEntry" (Ojs.bool_to_js x1964)
             | None -> ());
            (match x1961 with
             | Some x1963 ->
                 Ojs.set_prop_ascii x1962 "unique" (Ojs.bool_to_js x1963)
             | None -> ());
            t_of_js x1962
    let cast_from = Obj.magic
  end
module IDBValidKey =
  struct
    type t =
      [ `Number of float  | `String of string 
      | `Other of (t list, BufferSource.t, Date.t_0) union3 ] Primitive.t
    let rec t_of_js : Ojs.t -> t =
      fun (x1974 : Ojs.t) ->
        Primitive.t_of_js
          (fun (x1975 : Ojs.t) ->
             let x1976 = x1975 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x1976 "dummy") with
             | "Number" -> `Number (Ojs.float_of_js x1976)
             | "String" -> `String (Ojs.string_of_js x1976)
             | "Other" ->
                 `Other
                   (union3_of_js
                      (fun (x1977 : Ojs.t) -> Ojs.list_of_js t_of_js x1977)
                      BufferSource.t_of_js Date.t_0_of_js x1976)
             | _ -> assert false) x1974
    and t_to_js : t -> Ojs.t =
      fun
        (x1965 :
          [ `Number of float  | `String of string 
          | `Other of (t list, BufferSource.t, Date.t_0) union3 ] Primitive.t)
        ->
        Primitive.t_to_js
          (fun
             (x1966 :
               [ `Number of float  | `String of string 
               | `Other of (t list, BufferSource.t, Date.t_0) union3 ])
             ->
             match x1966 with
             | `Number x1967 -> Ojs.float_to_js x1967
             | `String x1968 -> Ojs.string_to_js x1968
             | `Other x1969 ->
                 union3_to_js
                   (fun (x1970 : t list) -> Ojs.list_to_js t_to_js x1970)
                   BufferSource.t_to_js Date.t_0_to_js x1969) x1965
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1982 : Ojs.t) -> t_of_js x1982
    and t_0_to_js : t_0 -> Ojs.t = fun (x1981 : t) -> t_to_js x1981
  end
module IDBTransactionMode =
  struct
    type t =
      [ `L_s163_readonly  | `L_s164_readwrite  | `L_s209_versionchange ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1984 : Ojs.t) ->
        let x1985 = x1984 in
        match Ojs.string_of_js x1985 with
        | "readonly" -> `L_s163_readonly
        | "readwrite" -> `L_s164_readwrite
        | "versionchange" -> `L_s209_versionchange
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x1983 :
          [ `L_s163_readonly  | `L_s164_readwrite  | `L_s209_versionchange ])
        ->
        match x1983 with
        | `L_s163_readonly -> Ojs.string_to_js "readonly"
        | `L_s164_readwrite -> Ojs.string_to_js "readwrite"
        | `L_s209_versionchange -> Ojs.string_to_js "versionchange"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1987 : Ojs.t) -> t_of_js x1987
    and t_0_to_js : t_0 -> Ojs.t = fun (x1986 : t) -> t_to_js x1986
  end
module IDBTransactionDurability =
  struct
    type t = [ `L_s170_relaxed  | `L_s189_strict  | `L_s57_default ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1989 : Ojs.t) ->
        let x1990 = x1989 in
        match Ojs.string_of_js x1990 with
        | "relaxed" -> `L_s170_relaxed
        | "strict" -> `L_s189_strict
        | "default" -> `L_s57_default
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x1988 : [ `L_s170_relaxed  | `L_s189_strict  | `L_s57_default ])
        ->
        match x1988 with
        | `L_s170_relaxed -> Ojs.string_to_js "relaxed"
        | `L_s189_strict -> Ojs.string_to_js "strict"
        | `L_s57_default -> Ojs.string_to_js "default"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1992 : Ojs.t) -> t_of_js x1992
    and t_0_to_js : t_0 -> Ojs.t = fun (x1991 : t) -> t_to_js x1991
  end
module IDBRequestReadyState =
  struct
    type t = [ `L_s149_pending  | `L_s64_done ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1994 : Ojs.t) ->
        let x1995 = x1994 in
        match Ojs.string_of_js x1995 with
        | "pending" -> `L_s149_pending
        | "done" -> `L_s64_done
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x1993 : [ `L_s149_pending  | `L_s64_done ]) ->
        match x1993 with
        | `L_s149_pending -> Ojs.string_to_js "pending"
        | `L_s64_done -> Ojs.string_to_js "done"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1997 : Ojs.t) -> t_of_js x1997
    and t_0_to_js : t_0 -> Ojs.t = fun (x1996 : t) -> t_to_js x1996
  end
module IDBKeyRange =
  struct
    type t = [ `IDBKeyRange ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1999 : Ojs.t) -> t_of_js x1999
    and t_0_to_js : t_0 -> Ojs.t = fun (x1998 : t) -> t_to_js x1998
    type tags = [ `IDBKeyRange ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBKeyRange ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x2002 : Ojs.t) -> intf_of_js __tags_of_js x2002
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x2000 : __tags intf) -> intf_to_js __tags_to_js x2000
    let (get_lower : 'tags this -> any) =
      fun (x2004 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x2004) "lower")
    let (get_lowerOpen : 'tags this -> bool) =
      fun (x2006 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2006) "lowerOpen")
    let (get_upper : 'tags this -> any) =
      fun (x2008 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x2008) "upper")
    let (get_upperOpen : 'tags this -> bool) =
      fun (x2010 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2010) "upperOpen")
    let (includes : 'tags this -> key:any -> bool) =
      fun (x2013 : 'tags this) ->
        fun ~key:(x2012 : any) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x2013) "includes"
               [|(any_to_js x2012)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "IDBKeyRange")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBKeyRange") [||])
    let (bound :
      lower:any ->
        upper:any -> ?lowerOpen:bool -> ?upperOpen:bool -> unit -> t)
      =
      fun ~lower:(x2015 : any) ->
        fun ~upper:(x2016 : any) ->
          fun ?lowerOpen:(x2017 : bool option) ->
            fun ?upperOpen:(x2018 : bool option) ->
              fun () ->
                t_of_js
                  (let x2022 = Ojs.get_prop_ascii Ojs.global "IDBKeyRange" in
                   Ojs.call (Ojs.get_prop_ascii x2022 "bound") "apply"
                     [|x2022;((let x2019 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2019 "push" [|(any_to_js x2015)|]);
                               ignore
                                 (Ojs.call x2019 "push" [|(any_to_js x2016)|]);
                               (match x2017 with
                                | Some x2021 ->
                                    ignore
                                      (Ojs.call x2019 "push"
                                         [|(Ojs.bool_to_js x2021)|])
                                | None -> ());
                               (match x2018 with
                                | Some x2020 ->
                                    ignore
                                      (Ojs.call x2019 "push"
                                         [|(Ojs.bool_to_js x2020)|])
                                | None -> ());
                               x2019))|])
    let (lowerBound : lower:any -> ?open_:bool -> unit -> t) =
      fun ~lower:(x2023 : any) ->
        fun ?open_:(x2024 : bool option) ->
          fun () ->
            t_of_js
              (let x2027 = Ojs.get_prop_ascii Ojs.global "IDBKeyRange" in
               Ojs.call (Ojs.get_prop_ascii x2027 "lowerBound") "apply"
                 [|x2027;((let x2025 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2025 "push" [|(any_to_js x2023)|]);
                           (match x2024 with
                            | Some x2026 ->
                                ignore
                                  (Ojs.call x2025 "push"
                                     [|(Ojs.bool_to_js x2026)|])
                            | None -> ());
                           x2025))|])
    let (only : any -> t) =
      fun (x2028 : any) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "IDBKeyRange") "only"
             [|(any_to_js x2028)|])
    let (upperBound : upper:any -> ?open_:bool -> unit -> t) =
      fun ~upper:(x2029 : any) ->
        fun ?open_:(x2030 : bool option) ->
          fun () ->
            t_of_js
              (let x2033 = Ojs.get_prop_ascii Ojs.global "IDBKeyRange" in
               Ojs.call (Ojs.get_prop_ascii x2033 "upperBound") "apply"
                 [|x2033;((let x2031 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2031 "push" [|(any_to_js x2029)|]);
                           (match x2030 with
                            | Some x2032 ->
                                ignore
                                  (Ojs.call x2031 "push"
                                     [|(Ojs.bool_to_js x2032)|])
                            | None -> ());
                           x2031))|])
  end
module IDBCursorDirection =
  struct
    type t =
      [ `L_s123_next  | `L_s124_nextunique  | `L_s155_prev 
      | `L_s156_prevunique ]
    let rec t_of_js : Ojs.t -> t =
      fun (x2035 : Ojs.t) ->
        let x2036 = x2035 in
        match Ojs.string_of_js x2036 with
        | "next" -> `L_s123_next
        | "nextunique" -> `L_s124_nextunique
        | "prev" -> `L_s155_prev
        | "prevunique" -> `L_s156_prevunique
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x2034 :
          [ `L_s123_next  | `L_s124_nextunique  | `L_s155_prev 
          | `L_s156_prevunique ])
        ->
        match x2034 with
        | `L_s123_next -> Ojs.string_to_js "next"
        | `L_s124_nextunique -> Ojs.string_to_js "nextunique"
        | `L_s155_prev -> Ojs.string_to_js "prev"
        | `L_s156_prevunique -> Ojs.string_to_js "prevunique"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2038 : Ojs.t) -> t_of_js x2038
    and t_0_to_js : t_0 -> Ojs.t = fun (x2037 : t) -> t_to_js x2037
  end
module DOMStringList =
  struct
    type t =
      [ `DOMStringList  | string ArrayLike.tags_1
      | string IterableIterator.tags_1] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2040 : Ojs.t) -> t_of_js x2040
    and t_0_to_js : t_0 -> Ojs.t = fun (x2039 : t) -> t_to_js x2039
    type tags =
      [ `DOMStringList  | string ArrayLike.tags_1
      | string IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMStringList ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x2043 : Ojs.t) -> intf_of_js __tags_of_js x2043
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x2041 : __tags intf) -> intf_to_js __tags_to_js x2041
    let (get_length : 'tags this -> float) =
      fun (x2045 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2045) "length")
    let (contains : 'tags this -> string:string -> bool) =
      fun (x2048 : 'tags this) ->
        fun ~string:(x2047 : string) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x2048) "contains"
               [|(Ojs.string_to_js x2047)|])
    let (item : 'tags this -> index:float -> string option) =
      fun (x2051 : 'tags this) ->
        fun ~index:(x2050 : float) ->
          Ojs.option_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x2051) "item"
               [|(Ojs.float_to_js x2050)|])
    let (get : 'tags this -> float -> string) =
      fun (x2054 : 'tags this) ->
        fun (x2056 : float) ->
          Ojs.string_of_js
            (Ojs.get_prop (this_to_js Obj.magic x2054)
               (Ojs.float_to_js x2056))
    let (set : 'tags this -> float -> string -> unit) =
      fun (x2057 : 'tags this) ->
        fun (x2059 : float) ->
          fun (x2060 : string) ->
            Ojs.set_prop (this_to_js Obj.magic x2057) (Ojs.float_to_js x2059)
              (Ojs.string_to_js x2060)
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMStringList")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "DOMStringList") [||])
  end
module DOMException =
  struct
    type t = [ `DOMException ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2062 : Ojs.t) -> t_of_js x2062
    and t_0_to_js : t_0 -> Ojs.t = fun (x2061 : t) -> t_to_js x2061
    type tags = [ `DOMException ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMException ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x2065 : Ojs.t) -> intf_of_js __tags_of_js x2065
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x2063 : __tags intf) -> intf_to_js __tags_to_js x2063
    let (get_code : 'tags this -> float) =
      fun (x2067 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2067) "code")
    let (get_message : 'tags this -> string) =
      fun (x2069 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2069) "message")
    let (get_name : 'tags this -> string) =
      fun (x2071 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2071) "name")
    let (get_ABORT_ERR : 'tags this -> float) =
      fun (x2073 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2073) "ABORT_ERR")
    let (get_DATA_CLONE_ERR : 'tags this -> float) =
      fun (x2075 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2075) "DATA_CLONE_ERR")
    let (get_DOMSTRING_SIZE_ERR : 'tags this -> float) =
      fun (x2077 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2077)
             "DOMSTRING_SIZE_ERR")
    let (get_HIERARCHY_REQUEST_ERR : 'tags this -> float) =
      fun (x2079 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2079)
             "HIERARCHY_REQUEST_ERR")
    let (get_INDEX_SIZE_ERR : 'tags this -> float) =
      fun (x2081 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2081) "INDEX_SIZE_ERR")
    let (get_INUSE_ATTRIBUTE_ERR : 'tags this -> float) =
      fun (x2083 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2083)
             "INUSE_ATTRIBUTE_ERR")
    let (get_INVALID_ACCESS_ERR : 'tags this -> float) =
      fun (x2085 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2085)
             "INVALID_ACCESS_ERR")
    let (get_INVALID_CHARACTER_ERR : 'tags this -> float) =
      fun (x2087 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2087)
             "INVALID_CHARACTER_ERR")
    let (get_INVALID_MODIFICATION_ERR : 'tags this -> float) =
      fun (x2089 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2089)
             "INVALID_MODIFICATION_ERR")
    let (get_INVALID_NODE_TYPE_ERR : 'tags this -> float) =
      fun (x2091 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2091)
             "INVALID_NODE_TYPE_ERR")
    let (get_INVALID_STATE_ERR : 'tags this -> float) =
      fun (x2093 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2093)
             "INVALID_STATE_ERR")
    let (get_NAMESPACE_ERR : 'tags this -> float) =
      fun (x2095 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2095) "NAMESPACE_ERR")
    let (get_NETWORK_ERR : 'tags this -> float) =
      fun (x2097 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2097) "NETWORK_ERR")
    let (get_NOT_FOUND_ERR : 'tags this -> float) =
      fun (x2099 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2099) "NOT_FOUND_ERR")
    let (get_NOT_SUPPORTED_ERR : 'tags this -> float) =
      fun (x2101 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2101)
             "NOT_SUPPORTED_ERR")
    let (get_NO_DATA_ALLOWED_ERR : 'tags this -> float) =
      fun (x2103 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2103)
             "NO_DATA_ALLOWED_ERR")
    let (get_NO_MODIFICATION_ALLOWED_ERR : 'tags this -> float) =
      fun (x2105 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2105)
             "NO_MODIFICATION_ALLOWED_ERR")
    let (get_QUOTA_EXCEEDED_ERR : 'tags this -> float) =
      fun (x2107 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2107)
             "QUOTA_EXCEEDED_ERR")
    let (get_SECURITY_ERR : 'tags this -> float) =
      fun (x2109 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2109) "SECURITY_ERR")
    let (get_SYNTAX_ERR : 'tags this -> float) =
      fun (x2111 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2111) "SYNTAX_ERR")
    let (get_TIMEOUT_ERR : 'tags this -> float) =
      fun (x2113 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2113) "TIMEOUT_ERR")
    let (get_TYPE_MISMATCH_ERR : 'tags this -> float) =
      fun (x2115 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2115)
             "TYPE_MISMATCH_ERR")
    let (get_URL_MISMATCH_ERR : 'tags this -> float) =
      fun (x2117 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2117) "URL_MISMATCH_ERR")
    let (get_VALIDATION_ERR : 'tags this -> float) =
      fun (x2119 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2119) "VALIDATION_ERR")
    let (get_WRONG_DOCUMENT_ERR : 'tags this -> float) =
      fun (x2121 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2121)
             "WRONG_DOCUMENT_ERR")
    let (create :
      code:float ->
        message:string ->
          name:string ->
            abort_err:float ->
              data_clone_err:float ->
                domstring_size_err:float ->
                  hierarchy_request_err:float ->
                    index_size_err:float ->
                      inuse_attribute_err:float ->
                        invalid_access_err:float ->
                          invalid_character_err:float ->
                            invalid_modification_err:float ->
                              invalid_node_type_err:float ->
                                invalid_state_err:float ->
                                  namespace_err:float ->
                                    network_err:float ->
                                      not_found_err:float ->
                                        not_supported_err:float ->
                                          no_data_allowed_err:float ->
                                            no_modification_allowed_err:float
                                              ->
                                              quota_exceeded_err:float ->
                                                security_err:float ->
                                                  syntax_err:float ->
                                                    timeout_err:float ->
                                                      type_mismatch_err:float
                                                        ->
                                                        url_mismatch_err:float
                                                          ->
                                                          validation_err:float
                                                            ->
                                                            wrong_document_err:float
                                                              -> unit -> t)
      =
      fun ~code:(x2123 : float) ->
        fun ~message:(x2124 : string) ->
          fun ~name:(x2125 : string) ->
            fun ~abort_err:(x2126 : float) ->
              fun ~data_clone_err:(x2127 : float) ->
                fun ~domstring_size_err:(x2128 : float) ->
                  fun ~hierarchy_request_err:(x2129 : float) ->
                    fun ~index_size_err:(x2130 : float) ->
                      fun ~inuse_attribute_err:(x2131 : float) ->
                        fun ~invalid_access_err:(x2132 : float) ->
                          fun ~invalid_character_err:(x2133 : float) ->
                            fun ~invalid_modification_err:(x2134 : float) ->
                              fun ~invalid_node_type_err:(x2135 : float) ->
                                fun ~invalid_state_err:(x2136 : float) ->
                                  fun ~namespace_err:(x2137 : float) ->
                                    fun ~network_err:(x2138 : float) ->
                                      fun ~not_found_err:(x2139 : float) ->
                                        fun
                                          ~not_supported_err:(x2140 : float)
                                          ->
                                          fun
                                            ~no_data_allowed_err:(x2141 :
                                                                   float)
                                            ->
                                            fun
                                              ~no_modification_allowed_err:
                                              (x2142 : float) ->
                                              fun
                                                ~quota_exceeded_err:(x2143 :
                                                                    float)
                                                ->
                                                fun
                                                  ~security_err:(x2144 :
                                                                  float)
                                                  ->
                                                  fun
                                                    ~syntax_err:(x2145 :
                                                                  float)
                                                    ->
                                                    fun
                                                      ~timeout_err:(x2146 :
                                                                    float)
                                                      ->
                                                      fun
                                                        ~type_mismatch_err:
                                                        (x2147 : float) ->
                                                        fun
                                                          ~url_mismatch_err:
                                                          (x2148 : float) ->
                                                          fun
                                                            ~validation_err:
                                                            (x2149 : 
                                                              float)
                                                            ->
                                                            fun
                                                              ~wrong_document_err:
                                                              (x2150 : 
                                                                float)
                                                              ->
                                                              fun () ->
                                                                let x2151 =
                                                                  Ojs.empty_obj
                                                                    () in
                                                                Ojs.set_prop_ascii
                                                                  x2151
                                                                  "code"
                                                                  (Ojs.float_to_js
                                                                    x2123);
                                                                Ojs.set_prop_ascii
                                                                  x2151
                                                                  "message"
                                                                  (Ojs.string_to_js
                                                                    x2124);
                                                                Ojs.set_prop_ascii
                                                                  x2151
                                                                  "name"
                                                                  (Ojs.string_to_js
                                                                    x2125);
                                                                Ojs.set_prop_ascii
                                                                  x2151
                                                                  "ABORT_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2126);
                                                                Ojs.set_prop_ascii
                                                                  x2151
                                                                  "DATA_CLONE_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2127);
                                                                Ojs.set_prop_ascii
                                                                  x2151
                                                                  "DOMSTRING_SIZE_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2128);
                                                                Ojs.set_prop_ascii
                                                                  x2151
                                                                  "HIERARCHY_REQUEST_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2129);
                                                                Ojs.set_prop_ascii
                                                                  x2151
                                                                  "INDEX_SIZE_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2130);
                                                                Ojs.set_prop_ascii
                                                                  x2151
                                                                  "INUSE_ATTRIBUTE_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2131);
                                                                Ojs.set_prop_ascii
                                                                  x2151
                                                                  "INVALID_ACCESS_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2132);
                                                                Ojs.set_prop_ascii
                                                                  x2151
                                                                  "INVALID_CHARACTER_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2133);
                                                                Ojs.set_prop_ascii
                                                                  x2151
                                                                  "INVALID_MODIFICATION_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2134);
                                                                Ojs.set_prop_ascii
                                                                  x2151
                                                                  "INVALID_NODE_TYPE_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2135);
                                                                Ojs.set_prop_ascii
                                                                  x2151
                                                                  "INVALID_STATE_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2136);
                                                                Ojs.set_prop_ascii
                                                                  x2151
                                                                  "NAMESPACE_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2137);
                                                                Ojs.set_prop_ascii
                                                                  x2151
                                                                  "NETWORK_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2138);
                                                                Ojs.set_prop_ascii
                                                                  x2151
                                                                  "NOT_FOUND_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2139);
                                                                Ojs.set_prop_ascii
                                                                  x2151
                                                                  "NOT_SUPPORTED_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2140);
                                                                Ojs.set_prop_ascii
                                                                  x2151
                                                                  "NO_DATA_ALLOWED_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2141);
                                                                Ojs.set_prop_ascii
                                                                  x2151
                                                                  "NO_MODIFICATION_ALLOWED_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2142);
                                                                Ojs.set_prop_ascii
                                                                  x2151
                                                                  "QUOTA_EXCEEDED_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2143);
                                                                Ojs.set_prop_ascii
                                                                  x2151
                                                                  "SECURITY_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2144);
                                                                Ojs.set_prop_ascii
                                                                  x2151
                                                                  "SYNTAX_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2145);
                                                                Ojs.set_prop_ascii
                                                                  x2151
                                                                  "TIMEOUT_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2146);
                                                                Ojs.set_prop_ascii
                                                                  x2151
                                                                  "TYPE_MISMATCH_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2147);
                                                                Ojs.set_prop_ascii
                                                                  x2151
                                                                  "URL_MISMATCH_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2148);
                                                                Ojs.set_prop_ascii
                                                                  x2151
                                                                  "VALIDATION_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2149);
                                                                Ojs.set_prop_ascii
                                                                  x2151
                                                                  "WRONG_DOCUMENT_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2150);
                                                                t_of_js x2151
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "prototype")
    let (create' : ?message:string -> ?name:string -> unit -> t) =
      fun ?message:(x2152 : string option) ->
        fun ?name:(x2153 : string option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMException")
                 (let x2154 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x2152 with
                   | Some x2156 ->
                       ignore
                         (Ojs.call x2154 "push" [|(Ojs.string_to_js x2156)|])
                   | None -> ());
                  (match x2153 with
                   | Some x2155 ->
                       ignore
                         (Ojs.call x2154 "push" [|(Ojs.string_to_js x2155)|])
                   | None -> ());
                  x2154))
    let (abort_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "ABORT_ERR")
    let (data_clone_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "DATA_CLONE_ERR")
    let (domstring_size_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "DOMSTRING_SIZE_ERR")
    let (hierarchy_request_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "HIERARCHY_REQUEST_ERR")
    let (index_size_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INDEX_SIZE_ERR")
    let (inuse_attribute_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INUSE_ATTRIBUTE_ERR")
    let (invalid_access_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_ACCESS_ERR")
    let (invalid_character_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_CHARACTER_ERR")
    let (invalid_modification_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_MODIFICATION_ERR")
    let (invalid_node_type_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_NODE_TYPE_ERR")
    let (invalid_state_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_STATE_ERR")
    let (namespace_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NAMESPACE_ERR")
    let (network_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NETWORK_ERR")
    let (not_found_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NOT_FOUND_ERR")
    let (not_supported_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NOT_SUPPORTED_ERR")
    let (no_data_allowed_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NO_DATA_ALLOWED_ERR")
    let (no_modification_allowed_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NO_MODIFICATION_ALLOWED_ERR")
    let (quota_exceeded_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "QUOTA_EXCEEDED_ERR")
    let (security_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "SECURITY_ERR")
    let (syntax_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "SYNTAX_ERR")
    let (timeout_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "TIMEOUT_ERR")
    let (type_mismatch_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "TYPE_MISMATCH_ERR")
    let (url_mismatch_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "URL_MISMATCH_ERR")
    let (validation_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "VALIDATION_ERR")
    let (wrong_document_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "WRONG_DOCUMENT_ERR")
  end
module rec
  IDBCursor:sig
              type t = [ `IDBCursor ] intf
              type t_0 = t
              [@@@js.stop ]
              type tags = [ `IDBCursor ]
              type tags_0 = tags
              [@@@js.start ]
              [@@@js.implem type tags = [ `IDBCursor ]
                type tags_0 = tags]
              type 'tags this = 'tags intf constraint 'tags = [> `IDBCursor ]
              val t_to_js : t -> Ojs.t
              val t_of_js : Ojs.t -> t
              val t_0_to_js : t_0 -> Ojs.t
              val t_0_of_js : Ojs.t -> t_0
              val get_direction : 'tags this -> IDBCursorDirection.t
              val get_key : 'tags this -> IDBValidKey.t
              val get_primaryKey : 'tags this -> IDBValidKey.t
              val get_request : 'tags this -> IDBRequest.t_0
              val get_source :
                'tags this -> (IDBIndex.t, IDBObjectStore.t) union2
              val advance : 'tags this -> count:float -> unit
              val continue : 'tags this -> ?key:IDBValidKey.t -> unit -> unit
              val continuePrimaryKey :
                'tags this ->
                  key:IDBValidKey.t -> primaryKey:IDBValidKey.t -> unit
              val delete : 'tags this -> undefined IDBRequest.t
              val update :
                'tags this -> value:any -> IDBValidKey.t IDBRequest.t
              val cast_from : 'tags this -> t
              val prototype : unit -> t
              val create : unit -> t
            end =
  struct
    type t = [ `IDBCursor ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2158 : Ojs.t) -> t_of_js x2158
    and t_0_to_js : t_0 -> Ojs.t = fun (x2157 : t) -> t_to_js x2157
    type tags = [ `IDBCursor ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBCursor ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x2161 : Ojs.t) -> intf_of_js __tags_of_js x2161
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x2159 : __tags intf) -> intf_to_js __tags_to_js x2159
    let (get_direction : 'tags this -> IDBCursorDirection.t) =
      fun (x2163 : 'tags this) ->
        IDBCursorDirection.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2163) "direction")
    let (get_key : 'tags this -> IDBValidKey.t) =
      fun (x2165 : 'tags this) ->
        IDBValidKey.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2165) "key")
    let (get_primaryKey : 'tags this -> IDBValidKey.t) =
      fun (x2167 : 'tags this) ->
        IDBValidKey.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2167) "primaryKey")
    let (get_request : 'tags this -> IDBRequest.t_0) =
      fun (x2169 : 'tags this) ->
        IDBRequest.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2169) "request")
    let (get_source : 'tags this -> (IDBIndex.t, IDBObjectStore.t) union2) =
      fun (x2171 : 'tags this) ->
        union2_of_js IDBIndex.t_of_js IDBObjectStore.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2171) "source")
    let (advance : 'tags this -> count:float -> unit) =
      fun (x2176 : 'tags this) ->
        fun ~count:(x2175 : float) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x2176) "advance"
               [|(Ojs.float_to_js x2175)|])
    let (continue : 'tags this -> ?key:IDBValidKey.t -> unit -> unit) =
      fun (x2181 : 'tags this) ->
        fun ?key:(x2178 : IDBValidKey.t option) ->
          fun () ->
            ignore
              (let x2183 = this_to_js Obj.magic x2181 in
               Ojs.call (Ojs.get_prop_ascii x2183 "continue") "apply"
                 [|x2183;((let x2179 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x2178 with
                            | Some x2180 ->
                                ignore
                                  (Ojs.call x2179 "push"
                                     [|(IDBValidKey.t_to_js x2180)|])
                            | None -> ());
                           x2179))|])
    let (continuePrimaryKey :
      'tags this -> key:IDBValidKey.t -> primaryKey:IDBValidKey.t -> unit) =
      fun (x2186 : 'tags this) ->
        fun ~key:(x2184 : IDBValidKey.t) ->
          fun ~primaryKey:(x2185 : IDBValidKey.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x2186) "continuePrimaryKey"
                 [|(IDBValidKey.t_to_js x2184);(IDBValidKey.t_to_js x2185)|])
    let (delete : 'tags this -> undefined IDBRequest.t) =
      fun (x2188 : 'tags this) ->
        IDBRequest.t_of_js undefined_of_js
          (Ojs.call (this_to_js Obj.magic x2188) "delete" [||])
    let (update : 'tags this -> value:any -> IDBValidKey.t IDBRequest.t) =
      fun (x2192 : 'tags this) ->
        fun ~value:(x2191 : any) ->
          IDBRequest.t_of_js IDBValidKey.t_of_js
            (Ojs.call (this_to_js Obj.magic x2192) "update"
               [|(any_to_js x2191)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "IDBCursor")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBCursor") [||])
  end
 and
  IDBCursorWithValue:sig
                       type t = [ `IDBCursor  | `IDBCursorWithValue ] intf
                       type t_0 = t
                       [@@@js.stop ]
                       type tags = [ `IDBCursor  | `IDBCursorWithValue ]
                       type tags_0 = tags
                       [@@@js.start ]
                       [@@@js.implem
                         type tags = [ `IDBCursor  | `IDBCursorWithValue ]
                         type tags_0 = tags]
                       type 'tags this =
                         'tags intf constraint 'tags =
                                     [> `IDBCursorWithValue ]
                       val t_to_js : t -> Ojs.t
                       val t_of_js : Ojs.t -> t
                       val t_0_to_js : t_0 -> Ojs.t
                       val t_0_of_js : Ojs.t -> t_0
                       val get_value : 'tags this -> any
                       val create : value:any -> unit -> t
                       val cast_from : 'tags this -> t
                       val prototype : unit -> t
                       val create' : unit -> t
                     end =
  struct
    type t = [ `IDBCursor  | `IDBCursorWithValue ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2196 : Ojs.t) -> t_of_js x2196
    and t_0_to_js : t_0 -> Ojs.t = fun (x2195 : t) -> t_to_js x2195
    type tags = [ `IDBCursor  | `IDBCursorWithValue ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBCursorWithValue ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x2199 : Ojs.t) -> intf_of_js __tags_of_js x2199
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x2197 : __tags intf) -> intf_to_js __tags_to_js x2197
    let (get_value : 'tags this -> any) =
      fun (x2201 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x2201) "value")
    let (create : value:any -> unit -> t) =
      fun ~value:(x2203 : any) ->
        fun () ->
          let x2204 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x2204 "value" (any_to_js x2203); t_of_js x2204
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "IDBCursorWithValue") "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBCursorWithValue")
             [||])
  end and
       IDBDatabase:sig
                     type t = [ `EventTarget  | `IDBDatabase ] intf
                     type t_0 = t
                     [@@@js.stop ]
                     type tags = [ `EventTarget  | `IDBDatabase ]
                     type tags_0 = tags
                     [@@@js.start ]
                     [@@@js.implem
                       type tags = [ `EventTarget  | `IDBDatabase ]
                       type tags_0 = tags]
                     type 'tags this =
                       'tags intf constraint 'tags = [> `IDBDatabase ]
                     val t_to_js : t -> Ojs.t
                     val t_of_js : Ojs.t -> t
                     val t_0_to_js : t_0 -> Ojs.t
                     val t_0_of_js : Ojs.t -> t_0
                     val get_name : 'tags this -> string
                     val get_objectStoreNames : 'tags this -> DOMStringList.t
                     val get_onabort :
                       'tags this -> (this:t -> ev:Event.t -> any) option
                     val set_onabort :
                       'tags this ->
                         (this:t -> ev:Event.t -> any) option -> unit
                     val get_onclose :
                       'tags this -> (this:t -> ev:Event.t -> any) option
                     val set_onclose :
                       'tags this ->
                         (this:t -> ev:Event.t -> any) option -> unit
                     val get_onerror :
                       'tags this -> (this:t -> ev:Event.t -> any) option
                     val set_onerror :
                       'tags this ->
                         (this:t -> ev:Event.t -> any) option -> unit
                     val get_onversionchange :
                       'tags this ->
                         (this:t -> ev:IDBVersionChangeEvent.t -> any) option
                     val set_onversionchange :
                       'tags this ->
                         (this:t -> ev:IDBVersionChangeEvent.t -> any) option
                           -> unit
                     val get_version : 'tags this -> float
                     val close : 'tags this -> unit
                     val createObjectStore :
                       'tags this ->
                         name:string ->
                           ?options:IDBObjectStoreParameters.t ->
                             unit -> IDBObjectStore.t
                     val deleteObjectStore :
                       'tags this -> name:string -> unit
                     val transaction :
                       'tags this ->
                         storeNames:[ `U1 of string  | `U2 of string list ]
                           ->
                           ?mode:IDBTransactionMode.t ->
                             unit -> IDBTransaction.t
                     val addEventListener :
                       'tags this ->
                         type_:'K ->
                           listener:(this:t -> ev:any -> any) ->
                             ?options:[ `U1 of bool 
                                      | `U2 of AddEventListenerOptions.t ]
                               -> unit -> unit
                     val addEventListener' :
                       'tags this ->
                         type_:string ->
                           listener:EventListenerOrEventListenerObject.t ->
                             ?options:[ `U1 of bool 
                                      | `U2 of AddEventListenerOptions.t ]
                               -> unit -> unit
                     val removeEventListener :
                       'tags this ->
                         type_:'K ->
                           listener:(this:t -> ev:any -> any) ->
                             ?options:[ `U1 of bool 
                                      | `U2 of EventListenerOptions.t ]
                               -> unit -> unit
                     val removeEventListener' :
                       'tags this ->
                         type_:string ->
                           listener:EventListenerOrEventListenerObject.t ->
                             ?options:[ `U1 of bool 
                                      | `U2 of EventListenerOptions.t ]
                               -> unit -> unit
                     val transaction' :
                       'tags this ->
                         storeNames:[ `U1 of string 
                                    | `U2 of string Iterable.t_1 ]
                           ->
                           ?mode:IDBTransactionMode.t ->
                             unit -> IDBTransaction.t
                     val cast_from : 'tags this -> t
                     val prototype : unit -> t
                     val create : unit -> t
                   end =
       struct
         type t = [ `EventTarget  | `IDBDatabase ] intf
         let rec t_of_js : Ojs.t -> t = Obj.magic
         and t_to_js : t -> Ojs.t = Obj.magic
         type t_0 = t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x2206 : Ojs.t) -> t_of_js x2206
         and t_0_to_js : t_0 -> Ojs.t = fun (x2205 : t) -> t_to_js x2205
         type tags = [ `EventTarget  | `IDBDatabase ]
         type tags_0 = tags
         type 'tags this = 'tags intf constraint 'tags = [> `IDBDatabase ]
         let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
           =
           fun (type __tags) ->
             fun (__tags_of_js : Ojs.t -> __tags) ->
               fun (x2209 : Ojs.t) -> intf_of_js __tags_of_js x2209
         and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
           fun (type __tags) ->
             fun (__tags_to_js : __tags -> Ojs.t) ->
               fun (x2207 : __tags intf) -> intf_to_js __tags_to_js x2207
         let (get_name : 'tags this -> string) =
           fun (x2211 : 'tags this) ->
             Ojs.string_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x2211) "name")
         let (get_objectStoreNames : 'tags this -> DOMStringList.t) =
           fun (x2213 : 'tags this) ->
             DOMStringList.t_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x2213)
                  "objectStoreNames")
         let (get_onabort :
           'tags this -> (this:t -> ev:Event.t -> any) option) =
           fun (x2215 : 'tags this) ->
             Ojs.option_of_js
               (fun (x2217 : Ojs.t) ->
                  fun ~this:(x2218 : t) ->
                    fun ~ev:(x2219 : Event.t) ->
                      any_of_js
                        (Ojs.apply x2217
                           [|(t_to_js x2218);(Event.t_to_js x2219)|]))
               (Ojs.get_prop_ascii (this_to_js Obj.magic x2215) "onabort")
         let (set_onabort :
           'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
           fun (x2220 : 'tags this) ->
             fun (x2221 : (this:t -> ev:Event.t -> any) option) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x2220) "onabort"
                 (Ojs.option_to_js
                    (fun (x2222 : this:t -> ev:Event.t -> any) ->
                       Ojs.fun_to_js 2
                         (fun (x2223 : Ojs.t) ->
                            fun (x2224 : Ojs.t) ->
                              any_to_js
                                (x2222 ~this:(t_of_js x2223)
                                   ~ev:(Event.t_of_js x2224)))) x2221)
         let (get_onclose :
           'tags this -> (this:t -> ev:Event.t -> any) option) =
           fun (x2226 : 'tags this) ->
             Ojs.option_of_js
               (fun (x2228 : Ojs.t) ->
                  fun ~this:(x2229 : t) ->
                    fun ~ev:(x2230 : Event.t) ->
                      any_of_js
                        (Ojs.apply x2228
                           [|(t_to_js x2229);(Event.t_to_js x2230)|]))
               (Ojs.get_prop_ascii (this_to_js Obj.magic x2226) "onclose")
         let (set_onclose :
           'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
           fun (x2231 : 'tags this) ->
             fun (x2232 : (this:t -> ev:Event.t -> any) option) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x2231) "onclose"
                 (Ojs.option_to_js
                    (fun (x2233 : this:t -> ev:Event.t -> any) ->
                       Ojs.fun_to_js 2
                         (fun (x2234 : Ojs.t) ->
                            fun (x2235 : Ojs.t) ->
                              any_to_js
                                (x2233 ~this:(t_of_js x2234)
                                   ~ev:(Event.t_of_js x2235)))) x2232)
         let (get_onerror :
           'tags this -> (this:t -> ev:Event.t -> any) option) =
           fun (x2237 : 'tags this) ->
             Ojs.option_of_js
               (fun (x2239 : Ojs.t) ->
                  fun ~this:(x2240 : t) ->
                    fun ~ev:(x2241 : Event.t) ->
                      any_of_js
                        (Ojs.apply x2239
                           [|(t_to_js x2240);(Event.t_to_js x2241)|]))
               (Ojs.get_prop_ascii (this_to_js Obj.magic x2237) "onerror")
         let (set_onerror :
           'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
           fun (x2242 : 'tags this) ->
             fun (x2243 : (this:t -> ev:Event.t -> any) option) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x2242) "onerror"
                 (Ojs.option_to_js
                    (fun (x2244 : this:t -> ev:Event.t -> any) ->
                       Ojs.fun_to_js 2
                         (fun (x2245 : Ojs.t) ->
                            fun (x2246 : Ojs.t) ->
                              any_to_js
                                (x2244 ~this:(t_of_js x2245)
                                   ~ev:(Event.t_of_js x2246)))) x2243)
         let (get_onversionchange :
           'tags this -> (this:t -> ev:IDBVersionChangeEvent.t -> any) option)
           =
           fun (x2248 : 'tags this) ->
             Ojs.option_of_js
               (fun (x2250 : Ojs.t) ->
                  fun ~this:(x2251 : t) ->
                    fun ~ev:(x2252 : IDBVersionChangeEvent.t) ->
                      any_of_js
                        (Ojs.apply x2250
                           [|(t_to_js x2251);(IDBVersionChangeEvent.t_to_js
                                                x2252)|]))
               (Ojs.get_prop_ascii (this_to_js Obj.magic x2248)
                  "onversionchange")
         let (set_onversionchange :
           'tags this ->
             (this:t -> ev:IDBVersionChangeEvent.t -> any) option -> unit)
           =
           fun (x2253 : 'tags this) ->
             fun
               (x2254 : (this:t -> ev:IDBVersionChangeEvent.t -> any) option)
               ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x2253)
                 "onversionchange"
                 (Ojs.option_to_js
                    (fun
                       (x2255 : this:t -> ev:IDBVersionChangeEvent.t -> any)
                       ->
                       Ojs.fun_to_js 2
                         (fun (x2256 : Ojs.t) ->
                            fun (x2257 : Ojs.t) ->
                              any_to_js
                                (x2255 ~this:(t_of_js x2256)
                                   ~ev:(IDBVersionChangeEvent.t_of_js x2257))))
                    x2254)
         let (get_version : 'tags this -> float) =
           fun (x2259 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x2259) "version")
         let (close : 'tags this -> unit) =
           fun (x2261 : 'tags this) ->
             ignore (Ojs.call (this_to_js Obj.magic x2261) "close" [||])
         let (createObjectStore :
           'tags this ->
             name:string ->
               ?options:IDBObjectStoreParameters.t ->
                 unit -> IDBObjectStore.t)
           =
           fun (x2267 : 'tags this) ->
             fun ~name:(x2263 : string) ->
               fun ?options:(x2264 : IDBObjectStoreParameters.t option) ->
                 fun () ->
                   IDBObjectStore.t_of_js
                     (let x2269 = this_to_js Obj.magic x2267 in
                      Ojs.call (Ojs.get_prop_ascii x2269 "createObjectStore")
                        "apply"
                        [|x2269;((let x2265 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x2265 "push"
                                       [|(Ojs.string_to_js x2263)|]);
                                  (match x2264 with
                                   | Some x2266 ->
                                       ignore
                                         (Ojs.call x2265 "push"
                                            [|(IDBObjectStoreParameters.t_to_js
                                                 x2266)|])
                                   | None -> ());
                                  x2265))|])
         let (deleteObjectStore : 'tags this -> name:string -> unit) =
           fun (x2271 : 'tags this) ->
             fun ~name:(x2270 : string) ->
               ignore
                 (Ojs.call (this_to_js Obj.magic x2271) "deleteObjectStore"
                    [|(Ojs.string_to_js x2270)|])
         let (transaction :
           'tags this ->
             storeNames:[ `U1 of string  | `U2 of string list ] ->
               ?mode:IDBTransactionMode.t -> unit -> IDBTransaction.t)
           =
           fun (x2280 : 'tags this) ->
             fun
               ~storeNames:(x2273 : [ `U1 of string  | `U2 of string list ])
               ->
               fun ?mode:(x2274 : IDBTransactionMode.t option) ->
                 fun () ->
                   IDBTransaction.t_of_js
                     (let x2282 = this_to_js Obj.magic x2280 in
                      Ojs.call (Ojs.get_prop_ascii x2282 "transaction")
                        "apply"
                        [|x2282;((let x2275 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x2275 "push"
                                       [|((match x2273 with
                                           | `U1 x2277 ->
                                               Ojs.string_to_js x2277
                                           | `U2 x2278 ->
                                               Ojs.list_to_js
                                                 Ojs.string_to_js x2278))|]);
                                  (match x2274 with
                                   | Some x2276 ->
                                       ignore
                                         (Ojs.call x2275 "push"
                                            [|(IDBTransactionMode.t_to_js
                                                 x2276)|])
                                   | None -> ());
                                  x2275))|])
         let (addEventListener :
           'tags this ->
             type_:'K ->
               listener:(this:t -> ev:any -> any) ->
                 ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                   -> unit -> unit)
           =
           fun (x2292 : 'tags this) ->
             fun ~type_:(x2283 : 'K) ->
               fun ~listener:(x2284 : this:t -> ev:any -> any) ->
                 fun
                   ?options:(x2285 :
                              [ `U1 of bool 
                              | `U2 of AddEventListenerOptions.t ] option)
                   ->
                   fun () ->
                     ignore
                       (let x2294 = this_to_js Obj.magic x2292 in
                        Ojs.call
                          (Ojs.get_prop_ascii x2294 "addEventListener")
                          "apply"
                          [|x2294;((let x2286 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x2286 "push"
                                         [|(Obj.magic x2283)|]);
                                    ignore
                                      (Ojs.call x2286 "push"
                                         [|(Ojs.fun_to_js 2
                                              (fun (x2290 : Ojs.t) ->
                                                 fun (x2291 : Ojs.t) ->
                                                   any_to_js
                                                     (x2284
                                                        ~this:(t_of_js x2290)
                                                        ~ev:(any_of_js x2291))))|]);
                                    (match x2285 with
                                     | Some x2287 ->
                                         ignore
                                           (Ojs.call x2286 "push"
                                              [|((match x2287 with
                                                  | `U1 x2288 ->
                                                      Ojs.bool_to_js x2288
                                                  | `U2 x2289 ->
                                                      AddEventListenerOptions.t_to_js
                                                        x2289))|])
                                     | None -> ());
                                    x2286))|])
         let (addEventListener' :
           'tags this ->
             type_:string ->
               listener:EventListenerOrEventListenerObject.t ->
                 ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                   -> unit -> unit)
           =
           fun (x2302 : 'tags this) ->
             fun ~type_:(x2295 : string) ->
               fun ~listener:(x2296 : EventListenerOrEventListenerObject.t)
                 ->
                 fun
                   ?options:(x2297 :
                              [ `U1 of bool 
                              | `U2 of AddEventListenerOptions.t ] option)
                   ->
                   fun () ->
                     ignore
                       (let x2304 = this_to_js Obj.magic x2302 in
                        Ojs.call
                          (Ojs.get_prop_ascii x2304 "addEventListener")
                          "apply"
                          [|x2304;((let x2298 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x2298 "push"
                                         [|(Ojs.string_to_js x2295)|]);
                                    ignore
                                      (Ojs.call x2298 "push"
                                         [|(EventListenerOrEventListenerObject.t_to_js
                                              x2296)|]);
                                    (match x2297 with
                                     | Some x2299 ->
                                         ignore
                                           (Ojs.call x2298 "push"
                                              [|((match x2299 with
                                                  | `U1 x2300 ->
                                                      Ojs.bool_to_js x2300
                                                  | `U2 x2301 ->
                                                      AddEventListenerOptions.t_to_js
                                                        x2301))|])
                                     | None -> ());
                                    x2298))|])
         let (removeEventListener :
           'tags this ->
             type_:'K ->
               listener:(this:t -> ev:any -> any) ->
                 ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
                   unit -> unit)
           =
           fun (x2314 : 'tags this) ->
             fun ~type_:(x2305 : 'K) ->
               fun ~listener:(x2306 : this:t -> ev:any -> any) ->
                 fun
                   ?options:(x2307 :
                              [ `U1 of bool 
                              | `U2 of EventListenerOptions.t ] option)
                   ->
                   fun () ->
                     ignore
                       (let x2316 = this_to_js Obj.magic x2314 in
                        Ojs.call
                          (Ojs.get_prop_ascii x2316 "removeEventListener")
                          "apply"
                          [|x2316;((let x2308 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x2308 "push"
                                         [|(Obj.magic x2305)|]);
                                    ignore
                                      (Ojs.call x2308 "push"
                                         [|(Ojs.fun_to_js 2
                                              (fun (x2312 : Ojs.t) ->
                                                 fun (x2313 : Ojs.t) ->
                                                   any_to_js
                                                     (x2306
                                                        ~this:(t_of_js x2312)
                                                        ~ev:(any_of_js x2313))))|]);
                                    (match x2307 with
                                     | Some x2309 ->
                                         ignore
                                           (Ojs.call x2308 "push"
                                              [|((match x2309 with
                                                  | `U1 x2310 ->
                                                      Ojs.bool_to_js x2310
                                                  | `U2 x2311 ->
                                                      EventListenerOptions.t_to_js
                                                        x2311))|])
                                     | None -> ());
                                    x2308))|])
         let (removeEventListener' :
           'tags this ->
             type_:string ->
               listener:EventListenerOrEventListenerObject.t ->
                 ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
                   unit -> unit)
           =
           fun (x2324 : 'tags this) ->
             fun ~type_:(x2317 : string) ->
               fun ~listener:(x2318 : EventListenerOrEventListenerObject.t)
                 ->
                 fun
                   ?options:(x2319 :
                              [ `U1 of bool 
                              | `U2 of EventListenerOptions.t ] option)
                   ->
                   fun () ->
                     ignore
                       (let x2326 = this_to_js Obj.magic x2324 in
                        Ojs.call
                          (Ojs.get_prop_ascii x2326 "removeEventListener")
                          "apply"
                          [|x2326;((let x2320 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x2320 "push"
                                         [|(Ojs.string_to_js x2317)|]);
                                    ignore
                                      (Ojs.call x2320 "push"
                                         [|(EventListenerOrEventListenerObject.t_to_js
                                              x2318)|]);
                                    (match x2319 with
                                     | Some x2321 ->
                                         ignore
                                           (Ojs.call x2320 "push"
                                              [|((match x2321 with
                                                  | `U1 x2322 ->
                                                      Ojs.bool_to_js x2322
                                                  | `U2 x2323 ->
                                                      EventListenerOptions.t_to_js
                                                        x2323))|])
                                     | None -> ());
                                    x2320))|])
         let (transaction' :
           'tags this ->
             storeNames:[ `U1 of string  | `U2 of string Iterable.t_1 ] ->
               ?mode:IDBTransactionMode.t -> unit -> IDBTransaction.t)
           =
           fun (x2334 : 'tags this) ->
             fun
               ~storeNames:(x2327 :
                             [ `U1 of string  | `U2 of string Iterable.t_1 ])
               ->
               fun ?mode:(x2328 : IDBTransactionMode.t option) ->
                 fun () ->
                   IDBTransaction.t_of_js
                     (let x2336 = this_to_js Obj.magic x2334 in
                      Ojs.call (Ojs.get_prop_ascii x2336 "transaction")
                        "apply"
                        [|x2336;((let x2329 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x2329 "push"
                                       [|((match x2327 with
                                           | `U1 x2331 ->
                                               Ojs.string_to_js x2331
                                           | `U2 x2332 ->
                                               Iterable.t_1_to_js
                                                 Ojs.string_to_js x2332))|]);
                                  (match x2328 with
                                   | Some x2330 ->
                                       ignore
                                         (Ojs.call x2329 "push"
                                            [|(IDBTransactionMode.t_to_js
                                                 x2330)|])
                                   | None -> ());
                                  x2329))|])
         let cast_from = Obj.magic
         let (prototype : unit -> t) =
           fun () ->
             t_of_js
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global "IDBDatabase") "prototype")
         let (create : unit -> t) =
           fun () ->
             t_of_js
               (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBDatabase")
                  [||])
       end and
            IDBIndex:sig
                       type t = [ `IDBIndex ] intf
                       type t_0 = t
                       [@@@js.stop ]
                       type tags = [ `IDBIndex ]
                       type tags_0 = tags
                       [@@@js.start ]
                       [@@@js.implem
                         type tags = [ `IDBIndex ]
                         type tags_0 = tags]
                       type 'tags this =
                         'tags intf constraint 'tags = [> `IDBIndex ]
                       val t_to_js : t -> Ojs.t
                       val t_of_js : Ojs.t -> t
                       val t_0_to_js : t_0 -> Ojs.t
                       val t_0_of_js : Ojs.t -> t_0
                       val get_keyPath :
                         'tags this ->
                           [ `String of string  | `Other of string list ]
                             Primitive.t
                       val get_multiEntry : 'tags this -> bool
                       val get_name : 'tags this -> string
                       val set_name : 'tags this -> string -> unit
                       val get_objectStore : 'tags this -> IDBObjectStore.t
                       val get_unique : 'tags this -> bool
                       val count :
                         'tags this ->
                           ?query:[ `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ]
                             -> unit -> float IDBRequest.t
                       val get_ :
                         'tags this ->
                           query:[ `U1 of IDBValidKey.t 
                                 | `U2 of IDBKeyRange.t ]
                             -> any IDBRequest.t
                       val getAll :
                         'tags this ->
                           ?query:[ `Null  | `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ]
                             -> ?count:float -> unit -> any list IDBRequest.t
                       val getAllKeys :
                         'tags this ->
                           ?query:[ `Null  | `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ]
                             ->
                             ?count:float ->
                               unit -> IDBValidKey.t list IDBRequest.t
                       val getKey :
                         'tags this ->
                           query:[ `U1 of IDBValidKey.t 
                                 | `U2 of IDBKeyRange.t ]
                             -> IDBValidKey.t option IDBRequest.t
                       val openCursor :
                         'tags this ->
                           ?query:[ `Null  | `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ]
                             ->
                             ?direction:IDBCursorDirection.t ->
                               unit ->
                                 IDBCursorWithValue.t option IDBRequest.t
                       val openKeyCursor :
                         'tags this ->
                           ?query:[ `Null  | `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ]
                             ->
                             ?direction:IDBCursorDirection.t ->
                               unit -> IDBCursor.t option IDBRequest.t
                       val cast_from : 'tags this -> t
                       val prototype : unit -> t
                       val create : unit -> t
                     end =
            struct
              type t = [ `IDBIndex ] intf
              let rec t_of_js : Ojs.t -> t = Obj.magic
              and t_to_js : t -> Ojs.t = Obj.magic
              type t_0 = t
              let rec t_0_of_js : Ojs.t -> t_0 =
                fun (x2338 : Ojs.t) -> t_of_js x2338
              and t_0_to_js : t_0 -> Ojs.t = fun (x2337 : t) -> t_to_js x2337
              type tags = [ `IDBIndex ]
              type tags_0 = tags
              type 'tags this = 'tags intf constraint 'tags = [> `IDBIndex ]
              let rec this_of_js :
                'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
                fun (type __tags) ->
                  fun (__tags_of_js : Ojs.t -> __tags) ->
                    fun (x2341 : Ojs.t) -> intf_of_js __tags_of_js x2341
              and this_to_js :
                'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
                fun (type __tags) ->
                  fun (__tags_to_js : __tags -> Ojs.t) ->
                    fun (x2339 : __tags intf) ->
                      intf_to_js __tags_to_js x2339
              let (get_keyPath :
                'tags this ->
                  [ `String of string  | `Other of string list ] Primitive.t)
                =
                fun (x2343 : 'tags this) ->
                  Primitive.t_of_js
                    (fun (x2345 : Ojs.t) ->
                       let x2346 = x2345 in
                       match Ojs.string_of_js
                               (Ojs.get_prop_ascii x2346 "dummy")
                       with
                       | "String" -> `String (Ojs.string_of_js x2346)
                       | "Other" ->
                           `Other (Ojs.list_of_js Ojs.string_of_js x2346)
                       | _ -> assert false)
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x2343)
                       "keyPath")
              let (get_multiEntry : 'tags this -> bool) =
                fun (x2348 : 'tags this) ->
                  Ojs.bool_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x2348)
                       "multiEntry")
              let (get_name : 'tags this -> string) =
                fun (x2350 : 'tags this) ->
                  Ojs.string_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x2350) "name")
              let (set_name : 'tags this -> string -> unit) =
                fun (x2352 : 'tags this) ->
                  fun (x2353 : string) ->
                    Ojs.set_prop_ascii (this_to_js Obj.magic x2352) "name"
                      (Ojs.string_to_js x2353)
              let (get_objectStore : 'tags this -> IDBObjectStore.t) =
                fun (x2355 : 'tags this) ->
                  IDBObjectStore.t_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x2355)
                       "objectStore")
              let (get_unique : 'tags this -> bool) =
                fun (x2357 : 'tags this) ->
                  Ojs.bool_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x2357) "unique")
              let (count :
                'tags this ->
                  ?query:[ `U1 of IDBValidKey.t  | `U2 of IDBKeyRange.t ] ->
                    unit -> float IDBRequest.t)
                =
                fun (x2364 : 'tags this) ->
                  fun
                    ?query:(x2359 :
                             [ `U1 of IDBValidKey.t  | `U2 of IDBKeyRange.t ]
                               option)
                    ->
                    fun () ->
                      IDBRequest.t_of_js Ojs.float_of_js
                        (let x2366 = this_to_js Obj.magic x2364 in
                         Ojs.call (Ojs.get_prop_ascii x2366 "count") "apply"
                           [|x2366;((let x2360 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     (match x2359 with
                                      | Some x2361 ->
                                          ignore
                                            (Ojs.call x2360 "push"
                                               [|((match x2361 with
                                                   | `U1 x2362 ->
                                                       IDBValidKey.t_to_js
                                                         x2362
                                                   | `U2 x2363 ->
                                                       IDBKeyRange.t_to_js
                                                         x2363))|])
                                      | None -> ());
                                     x2360))|])
              let (get_ :
                'tags this ->
                  query:[ `U1 of IDBValidKey.t  | `U2 of IDBKeyRange.t ] ->
                    any IDBRequest.t)
                =
                fun (x2371 : 'tags this) ->
                  fun
                    ~query:(x2368 :
                             [ `U1 of IDBValidKey.t  | `U2 of IDBKeyRange.t ])
                    ->
                    IDBRequest.t_of_js any_of_js
                      (Ojs.call (this_to_js Obj.magic x2371) "get"
                         [|((match x2368 with
                             | `U1 x2369 -> IDBValidKey.t_to_js x2369
                             | `U2 x2370 -> IDBKeyRange.t_to_js x2370))|])
              let (getAll :
                'tags this ->
                  ?query:[ `Null  | `U1 of IDBValidKey.t 
                         | `U2 of IDBKeyRange.t ]
                    -> ?count:float -> unit -> any list IDBRequest.t)
                =
                fun (x2381 : 'tags this) ->
                  fun
                    ?query:(x2374 :
                             [ `Null  | `U1 of IDBValidKey.t 
                             | `U2 of IDBKeyRange.t ] option)
                    ->
                    fun ?count:(x2375 : float option) ->
                      fun () ->
                        IDBRequest.t_of_js
                          (fun (x2384 : Ojs.t) ->
                             Ojs.list_of_js any_of_js x2384)
                          (let x2383 = this_to_js Obj.magic x2381 in
                           Ojs.call (Ojs.get_prop_ascii x2383 "getAll")
                             "apply"
                             [|x2383;((let x2376 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       (match x2374 with
                                        | Some x2378 ->
                                            ignore
                                              (Ojs.call x2376 "push"
                                                 [|((match x2378 with
                                                     | `Null -> Ojs.null
                                                     | `U1 x2379 ->
                                                         IDBValidKey.t_to_js
                                                           x2379
                                                     | `U2 x2380 ->
                                                         IDBKeyRange.t_to_js
                                                           x2380))|])
                                        | None -> ());
                                       (match x2375 with
                                        | Some x2377 ->
                                            ignore
                                              (Ojs.call x2376 "push"
                                                 [|(Ojs.float_to_js x2377)|])
                                        | None -> ());
                                       x2376))|])
              let (getAllKeys :
                'tags this ->
                  ?query:[ `Null  | `U1 of IDBValidKey.t 
                         | `U2 of IDBKeyRange.t ]
                    ->
                    ?count:float -> unit -> IDBValidKey.t list IDBRequest.t)
                =
                fun (x2393 : 'tags this) ->
                  fun
                    ?query:(x2386 :
                             [ `Null  | `U1 of IDBValidKey.t 
                             | `U2 of IDBKeyRange.t ] option)
                    ->
                    fun ?count:(x2387 : float option) ->
                      fun () ->
                        IDBRequest.t_of_js
                          (fun (x2396 : Ojs.t) ->
                             Ojs.list_of_js IDBValidKey.t_of_js x2396)
                          (let x2395 = this_to_js Obj.magic x2393 in
                           Ojs.call (Ojs.get_prop_ascii x2395 "getAllKeys")
                             "apply"
                             [|x2395;((let x2388 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       (match x2386 with
                                        | Some x2390 ->
                                            ignore
                                              (Ojs.call x2388 "push"
                                                 [|((match x2390 with
                                                     | `Null -> Ojs.null
                                                     | `U1 x2391 ->
                                                         IDBValidKey.t_to_js
                                                           x2391
                                                     | `U2 x2392 ->
                                                         IDBKeyRange.t_to_js
                                                           x2392))|])
                                        | None -> ());
                                       (match x2387 with
                                        | Some x2389 ->
                                            ignore
                                              (Ojs.call x2388 "push"
                                                 [|(Ojs.float_to_js x2389)|])
                                        | None -> ());
                                       x2388))|])
              let (getKey :
                'tags this ->
                  query:[ `U1 of IDBValidKey.t  | `U2 of IDBKeyRange.t ] ->
                    IDBValidKey.t option IDBRequest.t)
                =
                fun (x2401 : 'tags this) ->
                  fun
                    ~query:(x2398 :
                             [ `U1 of IDBValidKey.t  | `U2 of IDBKeyRange.t ])
                    ->
                    IDBRequest.t_of_js
                      (fun (x2403 : Ojs.t) ->
                         Ojs.option_of_js IDBValidKey.t_of_js x2403)
                      (Ojs.call (this_to_js Obj.magic x2401) "getKey"
                         [|((match x2398 with
                             | `U1 x2399 -> IDBValidKey.t_to_js x2399
                             | `U2 x2400 -> IDBKeyRange.t_to_js x2400))|])
              let (openCursor :
                'tags this ->
                  ?query:[ `Null  | `U1 of IDBValidKey.t 
                         | `U2 of IDBKeyRange.t ]
                    ->
                    ?direction:IDBCursorDirection.t ->
                      unit -> IDBCursorWithValue.t option IDBRequest.t)
                =
                fun (x2412 : 'tags this) ->
                  fun
                    ?query:(x2405 :
                             [ `Null  | `U1 of IDBValidKey.t 
                             | `U2 of IDBKeyRange.t ] option)
                    ->
                    fun ?direction:(x2406 : IDBCursorDirection.t option) ->
                      fun () ->
                        IDBRequest.t_of_js
                          (fun (x2415 : Ojs.t) ->
                             Ojs.option_of_js IDBCursorWithValue.t_of_js
                               x2415)
                          (let x2414 = this_to_js Obj.magic x2412 in
                           Ojs.call (Ojs.get_prop_ascii x2414 "openCursor")
                             "apply"
                             [|x2414;((let x2407 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       (match x2405 with
                                        | Some x2409 ->
                                            ignore
                                              (Ojs.call x2407 "push"
                                                 [|((match x2409 with
                                                     | `Null -> Ojs.null
                                                     | `U1 x2410 ->
                                                         IDBValidKey.t_to_js
                                                           x2410
                                                     | `U2 x2411 ->
                                                         IDBKeyRange.t_to_js
                                                           x2411))|])
                                        | None -> ());
                                       (match x2406 with
                                        | Some x2408 ->
                                            ignore
                                              (Ojs.call x2407 "push"
                                                 [|(IDBCursorDirection.t_to_js
                                                      x2408)|])
                                        | None -> ());
                                       x2407))|])
              let (openKeyCursor :
                'tags this ->
                  ?query:[ `Null  | `U1 of IDBValidKey.t 
                         | `U2 of IDBKeyRange.t ]
                    ->
                    ?direction:IDBCursorDirection.t ->
                      unit -> IDBCursor.t option IDBRequest.t)
                =
                fun (x2424 : 'tags this) ->
                  fun
                    ?query:(x2417 :
                             [ `Null  | `U1 of IDBValidKey.t 
                             | `U2 of IDBKeyRange.t ] option)
                    ->
                    fun ?direction:(x2418 : IDBCursorDirection.t option) ->
                      fun () ->
                        IDBRequest.t_of_js
                          (fun (x2427 : Ojs.t) ->
                             Ojs.option_of_js IDBCursor.t_of_js x2427)
                          (let x2426 = this_to_js Obj.magic x2424 in
                           Ojs.call
                             (Ojs.get_prop_ascii x2426 "openKeyCursor")
                             "apply"
                             [|x2426;((let x2419 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       (match x2417 with
                                        | Some x2421 ->
                                            ignore
                                              (Ojs.call x2419 "push"
                                                 [|((match x2421 with
                                                     | `Null -> Ojs.null
                                                     | `U1 x2422 ->
                                                         IDBValidKey.t_to_js
                                                           x2422
                                                     | `U2 x2423 ->
                                                         IDBKeyRange.t_to_js
                                                           x2423))|])
                                        | None -> ());
                                       (match x2418 with
                                        | Some x2420 ->
                                            ignore
                                              (Ojs.call x2419 "push"
                                                 [|(IDBCursorDirection.t_to_js
                                                      x2420)|])
                                        | None -> ());
                                       x2419))|])
              let cast_from = Obj.magic
              let (prototype : unit -> t) =
                fun () ->
                  t_of_js
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "IDBIndex") "prototype")
              let (create : unit -> t) =
                fun () ->
                  t_of_js
                    (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBIndex")
                       [||])
            end and
                 IDBObjectStore:sig
                                  type t = [ `IDBObjectStore ] intf
                                  type t_0 = t
                                  [@@@js.stop ]
                                  type tags = [ `IDBObjectStore ]
                                  type tags_0 = tags
                                  [@@@js.start ]
                                  [@@@js.implem
                                    type tags = [ `IDBObjectStore ]
                                    type tags_0 = tags]
                                  type 'tags this =
                                    'tags intf constraint 'tags =
                                                [> `IDBObjectStore ]
                                  val t_to_js : t -> Ojs.t
                                  val t_of_js : Ojs.t -> t
                                  val t_0_to_js : t_0 -> Ojs.t
                                  val t_0_of_js : Ojs.t -> t_0
                                  val get_autoIncrement : 'tags this -> bool
                                  val get_indexNames :
                                    'tags this -> DOMStringList.t
                                  val get_keyPath :
                                    'tags this ->
                                      [ `String of string 
                                      | `Other of string list ] Primitive.t
                                  val get_name : 'tags this -> string
                                  val set_name : 'tags this -> string -> unit
                                  val get_transaction :
                                    'tags this -> IDBTransaction.t
                                  val add :
                                    'tags this ->
                                      value:any ->
                                        ?key:IDBValidKey.t ->
                                          unit -> IDBValidKey.t IDBRequest.t
                                  val clear :
                                    'tags this -> undefined IDBRequest.t
                                  val count :
                                    'tags this ->
                                      ?query:[ `U1 of IDBValidKey.t 
                                             | `U2 of IDBKeyRange.t ]
                                        -> unit -> float IDBRequest.t
                                  val createIndex :
                                    'tags this ->
                                      name:string ->
                                        keyPath:[ `U1 of string 
                                                | `U2 of string list ]
                                          ->
                                          ?options:IDBIndexParameters.t ->
                                            unit -> IDBIndex.t
                                  val delete :
                                    'tags this ->
                                      query:[ `U1 of IDBValidKey.t 
                                            | `U2 of IDBKeyRange.t ]
                                        -> undefined IDBRequest.t
                                  val deleteIndex :
                                    'tags this -> name:string -> unit
                                  val get_ :
                                    'tags this ->
                                      query:[ `U1 of IDBValidKey.t 
                                            | `U2 of IDBKeyRange.t ]
                                        -> any IDBRequest.t
                                  val getAll :
                                    'tags this ->
                                      ?query:[ `Null  | `U1 of IDBValidKey.t 
                                             | `U2 of IDBKeyRange.t ]
                                        ->
                                        ?count:float ->
                                          unit -> any list IDBRequest.t
                                  val getAllKeys :
                                    'tags this ->
                                      ?query:[ `Null  | `U1 of IDBValidKey.t 
                                             | `U2 of IDBKeyRange.t ]
                                        ->
                                        ?count:float ->
                                          unit ->
                                            IDBValidKey.t list IDBRequest.t
                                  val getKey :
                                    'tags this ->
                                      query:[ `U1 of IDBValidKey.t 
                                            | `U2 of IDBKeyRange.t ]
                                        -> IDBValidKey.t option IDBRequest.t
                                  val index :
                                    'tags this -> name:string -> IDBIndex.t
                                  val openCursor :
                                    'tags this ->
                                      ?query:[ `Null  | `U1 of IDBValidKey.t 
                                             | `U2 of IDBKeyRange.t ]
                                        ->
                                        ?direction:IDBCursorDirection.t ->
                                          unit ->
                                            IDBCursorWithValue.t option
                                              IDBRequest.t
                                  val openKeyCursor :
                                    'tags this ->
                                      ?query:[ `Null  | `U1 of IDBValidKey.t 
                                             | `U2 of IDBKeyRange.t ]
                                        ->
                                        ?direction:IDBCursorDirection.t ->
                                          unit ->
                                            IDBCursor.t option IDBRequest.t
                                  val put :
                                    'tags this ->
                                      value:any ->
                                        ?key:IDBValidKey.t ->
                                          unit -> IDBValidKey.t IDBRequest.t
                                  val createIndex' :
                                    'tags this ->
                                      name:string ->
                                        keyPath:[ `U1 of string 
                                                | `U2 of string Iterable.t_1 ]
                                          ->
                                          ?options:IDBIndexParameters.t ->
                                            unit -> IDBIndex.t
                                  val cast_from : 'tags this -> t
                                  val prototype : unit -> t
                                  val create : unit -> t
                                end =
                 struct
                   type t = [ `IDBObjectStore ] intf
                   let rec t_of_js : Ojs.t -> t = Obj.magic
                   and t_to_js : t -> Ojs.t = Obj.magic
                   type t_0 = t
                   let rec t_0_of_js : Ojs.t -> t_0 =
                     fun (x2430 : Ojs.t) -> t_of_js x2430
                   and t_0_to_js : t_0 -> Ojs.t =
                     fun (x2429 : t) -> t_to_js x2429
                   type tags = [ `IDBObjectStore ]
                   type tags_0 = tags
                   type 'tags this =
                     'tags intf constraint 'tags = [> `IDBObjectStore ]
                   let rec this_of_js :
                     'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
                     fun (type __tags) ->
                       fun (__tags_of_js : Ojs.t -> __tags) ->
                         fun (x2433 : Ojs.t) -> intf_of_js __tags_of_js x2433
                   and this_to_js :
                     'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
                     fun (type __tags) ->
                       fun (__tags_to_js : __tags -> Ojs.t) ->
                         fun (x2431 : __tags intf) ->
                           intf_to_js __tags_to_js x2431
                   let (get_autoIncrement : 'tags this -> bool) =
                     fun (x2435 : 'tags this) ->
                       Ojs.bool_of_js
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x2435)
                            "autoIncrement")
                   let (get_indexNames : 'tags this -> DOMStringList.t) =
                     fun (x2437 : 'tags this) ->
                       DOMStringList.t_of_js
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x2437)
                            "indexNames")
                   let (get_keyPath :
                     'tags this ->
                       [ `String of string  | `Other of string list ]
                         Primitive.t)
                     =
                     fun (x2439 : 'tags this) ->
                       Primitive.t_of_js
                         (fun (x2441 : Ojs.t) ->
                            let x2442 = x2441 in
                            match Ojs.string_of_js
                                    (Ojs.get_prop_ascii x2442 "dummy")
                            with
                            | "String" -> `String (Ojs.string_of_js x2442)
                            | "Other" ->
                                `Other
                                  (Ojs.list_of_js Ojs.string_of_js x2442)
                            | _ -> assert false)
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x2439)
                            "keyPath")
                   let (get_name : 'tags this -> string) =
                     fun (x2444 : 'tags this) ->
                       Ojs.string_of_js
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x2444)
                            "name")
                   let (set_name : 'tags this -> string -> unit) =
                     fun (x2446 : 'tags this) ->
                       fun (x2447 : string) ->
                         Ojs.set_prop_ascii (this_to_js Obj.magic x2446)
                           "name" (Ojs.string_to_js x2447)
                   let (get_transaction : 'tags this -> IDBTransaction.t) =
                     fun (x2449 : 'tags this) ->
                       IDBTransaction.t_of_js
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x2449)
                            "transaction")
                   let (add :
                     'tags this ->
                       value:any ->
                         ?key:IDBValidKey.t ->
                           unit -> IDBValidKey.t IDBRequest.t)
                     =
                     fun (x2455 : 'tags this) ->
                       fun ~value:(x2451 : any) ->
                         fun ?key:(x2452 : IDBValidKey.t option) ->
                           fun () ->
                             IDBRequest.t_of_js IDBValidKey.t_of_js
                               (let x2457 = this_to_js Obj.magic x2455 in
                                Ojs.call (Ojs.get_prop_ascii x2457 "add")
                                  "apply"
                                  [|x2457;((let x2453 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            ignore
                                              (Ojs.call x2453 "push"
                                                 [|(any_to_js x2451)|]);
                                            (match x2452 with
                                             | Some x2454 ->
                                                 ignore
                                                   (Ojs.call x2453 "push"
                                                      [|(IDBValidKey.t_to_js
                                                           x2454)|])
                                             | None -> ());
                                            x2453))|])
                   let (clear : 'tags this -> undefined IDBRequest.t) =
                     fun (x2459 : 'tags this) ->
                       IDBRequest.t_of_js undefined_of_js
                         (Ojs.call (this_to_js Obj.magic x2459) "clear" [||])
                   let (count :
                     'tags this ->
                       ?query:[ `U1 of IDBValidKey.t 
                              | `U2 of IDBKeyRange.t ]
                         -> unit -> float IDBRequest.t)
                     =
                     fun (x2467 : 'tags this) ->
                       fun
                         ?query:(x2462 :
                                  [ `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ] option)
                         ->
                         fun () ->
                           IDBRequest.t_of_js Ojs.float_of_js
                             (let x2469 = this_to_js Obj.magic x2467 in
                              Ojs.call (Ojs.get_prop_ascii x2469 "count")
                                "apply"
                                [|x2469;((let x2463 =
                                            Ojs.new_obj
                                              (Ojs.get_prop_ascii Ojs.global
                                                 "Array") [||] in
                                          (match x2462 with
                                           | Some x2464 ->
                                               ignore
                                                 (Ojs.call x2463 "push"
                                                    [|((match x2464 with
                                                        | `U1 x2465 ->
                                                            IDBValidKey.t_to_js
                                                              x2465
                                                        | `U2 x2466 ->
                                                            IDBKeyRange.t_to_js
                                                              x2466))|])
                                           | None -> ());
                                          x2463))|])
                   let (createIndex :
                     'tags this ->
                       name:string ->
                         keyPath:[ `U1 of string  | `U2 of string list ] ->
                           ?options:IDBIndexParameters.t ->
                             unit -> IDBIndex.t)
                     =
                     fun (x2479 : 'tags this) ->
                       fun ~name:(x2471 : string) ->
                         fun
                           ~keyPath:(x2472 :
                                      [ `U1 of string  | `U2 of string list ])
                           ->
                           fun ?options:(x2473 : IDBIndexParameters.t option)
                             ->
                             fun () ->
                               IDBIndex.t_of_js
                                 (let x2481 = this_to_js Obj.magic x2479 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x2481 "createIndex")
                                    "apply"
                                    [|x2481;((let x2474 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x2474 "push"
                                                   [|(Ojs.string_to_js x2471)|]);
                                              ignore
                                                (Ojs.call x2474 "push"
                                                   [|((match x2472 with
                                                       | `U1 x2476 ->
                                                           Ojs.string_to_js
                                                             x2476
                                                       | `U2 x2477 ->
                                                           Ojs.list_to_js
                                                             Ojs.string_to_js
                                                             x2477))|]);
                                              (match x2473 with
                                               | Some x2475 ->
                                                   ignore
                                                     (Ojs.call x2474 "push"
                                                        [|(IDBIndexParameters.t_to_js
                                                             x2475)|])
                                               | None -> ());
                                              x2474))|])
                   let (delete :
                     'tags this ->
                       query:[ `U1 of IDBValidKey.t  | `U2 of IDBKeyRange.t ]
                         -> undefined IDBRequest.t)
                     =
                     fun (x2485 : 'tags this) ->
                       fun
                         ~query:(x2482 :
                                  [ `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ])
                         ->
                         IDBRequest.t_of_js undefined_of_js
                           (Ojs.call (this_to_js Obj.magic x2485) "delete"
                              [|((match x2482 with
                                  | `U1 x2483 -> IDBValidKey.t_to_js x2483
                                  | `U2 x2484 -> IDBKeyRange.t_to_js x2484))|])
                   let (deleteIndex : 'tags this -> name:string -> unit) =
                     fun (x2489 : 'tags this) ->
                       fun ~name:(x2488 : string) ->
                         ignore
                           (Ojs.call (this_to_js Obj.magic x2489)
                              "deleteIndex" [|(Ojs.string_to_js x2488)|])
                   let (get_ :
                     'tags this ->
                       query:[ `U1 of IDBValidKey.t  | `U2 of IDBKeyRange.t ]
                         -> any IDBRequest.t)
                     =
                     fun (x2494 : 'tags this) ->
                       fun
                         ~query:(x2491 :
                                  [ `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ])
                         ->
                         IDBRequest.t_of_js any_of_js
                           (Ojs.call (this_to_js Obj.magic x2494) "get"
                              [|((match x2491 with
                                  | `U1 x2492 -> IDBValidKey.t_to_js x2492
                                  | `U2 x2493 -> IDBKeyRange.t_to_js x2493))|])
                   let (getAll :
                     'tags this ->
                       ?query:[ `Null  | `U1 of IDBValidKey.t 
                              | `U2 of IDBKeyRange.t ]
                         -> ?count:float -> unit -> any list IDBRequest.t)
                     =
                     fun (x2504 : 'tags this) ->
                       fun
                         ?query:(x2497 :
                                  [ `Null  | `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ] option)
                         ->
                         fun ?count:(x2498 : float option) ->
                           fun () ->
                             IDBRequest.t_of_js
                               (fun (x2507 : Ojs.t) ->
                                  Ojs.list_of_js any_of_js x2507)
                               (let x2506 = this_to_js Obj.magic x2504 in
                                Ojs.call (Ojs.get_prop_ascii x2506 "getAll")
                                  "apply"
                                  [|x2506;((let x2499 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            (match x2497 with
                                             | Some x2501 ->
                                                 ignore
                                                   (Ojs.call x2499 "push"
                                                      [|((match x2501 with
                                                          | `Null -> Ojs.null
                                                          | `U1 x2502 ->
                                                              IDBValidKey.t_to_js
                                                                x2502
                                                          | `U2 x2503 ->
                                                              IDBKeyRange.t_to_js
                                                                x2503))|])
                                             | None -> ());
                                            (match x2498 with
                                             | Some x2500 ->
                                                 ignore
                                                   (Ojs.call x2499 "push"
                                                      [|(Ojs.float_to_js
                                                           x2500)|])
                                             | None -> ());
                                            x2499))|])
                   let (getAllKeys :
                     'tags this ->
                       ?query:[ `Null  | `U1 of IDBValidKey.t 
                              | `U2 of IDBKeyRange.t ]
                         ->
                         ?count:float ->
                           unit -> IDBValidKey.t list IDBRequest.t)
                     =
                     fun (x2516 : 'tags this) ->
                       fun
                         ?query:(x2509 :
                                  [ `Null  | `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ] option)
                         ->
                         fun ?count:(x2510 : float option) ->
                           fun () ->
                             IDBRequest.t_of_js
                               (fun (x2519 : Ojs.t) ->
                                  Ojs.list_of_js IDBValidKey.t_of_js x2519)
                               (let x2518 = this_to_js Obj.magic x2516 in
                                Ojs.call
                                  (Ojs.get_prop_ascii x2518 "getAllKeys")
                                  "apply"
                                  [|x2518;((let x2511 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            (match x2509 with
                                             | Some x2513 ->
                                                 ignore
                                                   (Ojs.call x2511 "push"
                                                      [|((match x2513 with
                                                          | `Null -> Ojs.null
                                                          | `U1 x2514 ->
                                                              IDBValidKey.t_to_js
                                                                x2514
                                                          | `U2 x2515 ->
                                                              IDBKeyRange.t_to_js
                                                                x2515))|])
                                             | None -> ());
                                            (match x2510 with
                                             | Some x2512 ->
                                                 ignore
                                                   (Ojs.call x2511 "push"
                                                      [|(Ojs.float_to_js
                                                           x2512)|])
                                             | None -> ());
                                            x2511))|])
                   let (getKey :
                     'tags this ->
                       query:[ `U1 of IDBValidKey.t  | `U2 of IDBKeyRange.t ]
                         -> IDBValidKey.t option IDBRequest.t)
                     =
                     fun (x2524 : 'tags this) ->
                       fun
                         ~query:(x2521 :
                                  [ `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ])
                         ->
                         IDBRequest.t_of_js
                           (fun (x2526 : Ojs.t) ->
                              Ojs.option_of_js IDBValidKey.t_of_js x2526)
                           (Ojs.call (this_to_js Obj.magic x2524) "getKey"
                              [|((match x2521 with
                                  | `U1 x2522 -> IDBValidKey.t_to_js x2522
                                  | `U2 x2523 -> IDBKeyRange.t_to_js x2523))|])
                   let (index : 'tags this -> name:string -> IDBIndex.t) =
                     fun (x2529 : 'tags this) ->
                       fun ~name:(x2528 : string) ->
                         IDBIndex.t_of_js
                           (Ojs.call (this_to_js Obj.magic x2529) "index"
                              [|(Ojs.string_to_js x2528)|])
                   let (openCursor :
                     'tags this ->
                       ?query:[ `Null  | `U1 of IDBValidKey.t 
                              | `U2 of IDBKeyRange.t ]
                         ->
                         ?direction:IDBCursorDirection.t ->
                           unit -> IDBCursorWithValue.t option IDBRequest.t)
                     =
                     fun (x2538 : 'tags this) ->
                       fun
                         ?query:(x2531 :
                                  [ `Null  | `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ] option)
                         ->
                         fun ?direction:(x2532 : IDBCursorDirection.t option)
                           ->
                           fun () ->
                             IDBRequest.t_of_js
                               (fun (x2541 : Ojs.t) ->
                                  Ojs.option_of_js IDBCursorWithValue.t_of_js
                                    x2541)
                               (let x2540 = this_to_js Obj.magic x2538 in
                                Ojs.call
                                  (Ojs.get_prop_ascii x2540 "openCursor")
                                  "apply"
                                  [|x2540;((let x2533 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            (match x2531 with
                                             | Some x2535 ->
                                                 ignore
                                                   (Ojs.call x2533 "push"
                                                      [|((match x2535 with
                                                          | `Null -> Ojs.null
                                                          | `U1 x2536 ->
                                                              IDBValidKey.t_to_js
                                                                x2536
                                                          | `U2 x2537 ->
                                                              IDBKeyRange.t_to_js
                                                                x2537))|])
                                             | None -> ());
                                            (match x2532 with
                                             | Some x2534 ->
                                                 ignore
                                                   (Ojs.call x2533 "push"
                                                      [|(IDBCursorDirection.t_to_js
                                                           x2534)|])
                                             | None -> ());
                                            x2533))|])
                   let (openKeyCursor :
                     'tags this ->
                       ?query:[ `Null  | `U1 of IDBValidKey.t 
                              | `U2 of IDBKeyRange.t ]
                         ->
                         ?direction:IDBCursorDirection.t ->
                           unit -> IDBCursor.t option IDBRequest.t)
                     =
                     fun (x2550 : 'tags this) ->
                       fun
                         ?query:(x2543 :
                                  [ `Null  | `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ] option)
                         ->
                         fun ?direction:(x2544 : IDBCursorDirection.t option)
                           ->
                           fun () ->
                             IDBRequest.t_of_js
                               (fun (x2553 : Ojs.t) ->
                                  Ojs.option_of_js IDBCursor.t_of_js x2553)
                               (let x2552 = this_to_js Obj.magic x2550 in
                                Ojs.call
                                  (Ojs.get_prop_ascii x2552 "openKeyCursor")
                                  "apply"
                                  [|x2552;((let x2545 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            (match x2543 with
                                             | Some x2547 ->
                                                 ignore
                                                   (Ojs.call x2545 "push"
                                                      [|((match x2547 with
                                                          | `Null -> Ojs.null
                                                          | `U1 x2548 ->
                                                              IDBValidKey.t_to_js
                                                                x2548
                                                          | `U2 x2549 ->
                                                              IDBKeyRange.t_to_js
                                                                x2549))|])
                                             | None -> ());
                                            (match x2544 with
                                             | Some x2546 ->
                                                 ignore
                                                   (Ojs.call x2545 "push"
                                                      [|(IDBCursorDirection.t_to_js
                                                           x2546)|])
                                             | None -> ());
                                            x2545))|])
                   let (put :
                     'tags this ->
                       value:any ->
                         ?key:IDBValidKey.t ->
                           unit -> IDBValidKey.t IDBRequest.t)
                     =
                     fun (x2559 : 'tags this) ->
                       fun ~value:(x2555 : any) ->
                         fun ?key:(x2556 : IDBValidKey.t option) ->
                           fun () ->
                             IDBRequest.t_of_js IDBValidKey.t_of_js
                               (let x2561 = this_to_js Obj.magic x2559 in
                                Ojs.call (Ojs.get_prop_ascii x2561 "put")
                                  "apply"
                                  [|x2561;((let x2557 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            ignore
                                              (Ojs.call x2557 "push"
                                                 [|(any_to_js x2555)|]);
                                            (match x2556 with
                                             | Some x2558 ->
                                                 ignore
                                                   (Ojs.call x2557 "push"
                                                      [|(IDBValidKey.t_to_js
                                                           x2558)|])
                                             | None -> ());
                                            x2557))|])
                   let (createIndex' :
                     'tags this ->
                       name:string ->
                         keyPath:[ `U1 of string 
                                 | `U2 of string Iterable.t_1 ]
                           ->
                           ?options:IDBIndexParameters.t ->
                             unit -> IDBIndex.t)
                     =
                     fun (x2571 : 'tags this) ->
                       fun ~name:(x2563 : string) ->
                         fun
                           ~keyPath:(x2564 :
                                      [ `U1 of string 
                                      | `U2 of string Iterable.t_1 ])
                           ->
                           fun ?options:(x2565 : IDBIndexParameters.t option)
                             ->
                             fun () ->
                               IDBIndex.t_of_js
                                 (let x2573 = this_to_js Obj.magic x2571 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x2573 "createIndex")
                                    "apply"
                                    [|x2573;((let x2566 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x2566 "push"
                                                   [|(Ojs.string_to_js x2563)|]);
                                              ignore
                                                (Ojs.call x2566 "push"
                                                   [|((match x2564 with
                                                       | `U1 x2568 ->
                                                           Ojs.string_to_js
                                                             x2568
                                                       | `U2 x2569 ->
                                                           Iterable.t_1_to_js
                                                             Ojs.string_to_js
                                                             x2569))|]);
                                              (match x2565 with
                                               | Some x2567 ->
                                                   ignore
                                                     (Ojs.call x2566 "push"
                                                        [|(IDBIndexParameters.t_to_js
                                                             x2567)|])
                                               | None -> ());
                                              x2566))|])
                   let cast_from = Obj.magic
                   let (prototype : unit -> t) =
                     fun () ->
                       t_of_js
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global "IDBObjectStore")
                            "prototype")
                   let (create : unit -> t) =
                     fun () ->
                       t_of_js
                         (Ojs.new_obj
                            (Ojs.get_prop_ascii Ojs.global "IDBObjectStore")
                            [||])
                 end and
                      IDBRequest:sig
                                   type 'T t =
                                     [ `EventTarget  | `IDBRequest of 'T ]
                                       intf
                                   type 'T t_1 = 'T t
                                   type t_0 = any t
                                   [@@@js.stop ]
                                   type 'T tags =
                                     [ `EventTarget  | `IDBRequest of 'T ]
                                   type 'T tags_1 = 'T tags
                                   type tags_0 = any tags
                                   [@@@js.start ]
                                   [@@@js.implem
                                     type 'T tags =
                                       [ `EventTarget  | `IDBRequest of 'T ]
                                     type 'T tags_1 = 'T tags
                                     type tags_0 = any tags]
                                   type ('tags, 'T) this =
                                     'tags intf constraint 'tags =
                                                 [> `IDBRequest of 'T ]
                                   val t_to_js :
                                     ('T -> Ojs.t) -> 'T t -> Ojs.t
                                   val t_of_js :
                                     (Ojs.t -> 'T) -> Ojs.t -> 'T t
                                   val t_1_to_js :
                                     ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
                                   val t_1_of_js :
                                     (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
                                   val t_0_to_js : t_0 -> Ojs.t
                                   val t_0_of_js : Ojs.t -> t_0
                                   val get_error :
                                     ('tags, 'T) this ->
                                       DOMException.t option
                                   val get_onerror :
                                     ('tags, 'T) this ->
                                       (this:'T t -> ev:Event.t -> any)
                                         option
                                   val set_onerror :
                                     ('tags, 'T) this ->
                                       (this:'T t -> ev:Event.t -> any)
                                         option -> unit
                                   val get_onsuccess :
                                     ('tags, 'T) this ->
                                       (this:'T t -> ev:Event.t -> any)
                                         option
                                   val set_onsuccess :
                                     ('tags, 'T) this ->
                                       (this:'T t -> ev:Event.t -> any)
                                         option -> unit
                                   val get_readyState :
                                     ('tags, 'T) this ->
                                       IDBRequestReadyState.t
                                   val get_result : ('tags, 'T) this -> 'T
                                   val get_source :
                                     ('tags, 'T) this ->
                                       (IDBCursor.t, IDBIndex.t,
                                         IDBObjectStore.t) union3
                                   val get_transaction :
                                     ('tags, 'T) this ->
                                       IDBTransaction.t option
                                   val addEventListener :
                                     ('tags, 'T) this ->
                                       type_:'K ->
                                         listener:(this:'T t -> ev:any -> any)
                                           ->
                                           ?options:[ `U1 of bool 
                                                    | `U2 of
                                                        AddEventListenerOptions.t
                                                        ]
                                             -> unit -> unit
                                   val addEventListener' :
                                     ('tags, 'T) this ->
                                       type_:string ->
                                         listener:EventListenerOrEventListenerObject.t
                                           ->
                                           ?options:[ `U1 of bool 
                                                    | `U2 of
                                                        AddEventListenerOptions.t
                                                        ]
                                             -> unit -> unit
                                   val removeEventListener :
                                     ('tags, 'T) this ->
                                       type_:'K ->
                                         listener:(this:'T t -> ev:any -> any)
                                           ->
                                           ?options:[ `U1 of bool 
                                                    | `U2 of
                                                        EventListenerOptions.t
                                                        ]
                                             -> unit -> unit
                                   val removeEventListener' :
                                     ('tags, 'T) this ->
                                       type_:string ->
                                         listener:EventListenerOrEventListenerObject.t
                                           ->
                                           ?options:[ `U1 of bool 
                                                    | `U2 of
                                                        EventListenerOptions.t
                                                        ]
                                             -> unit -> unit
                                   val cast_from : ('tags, 'T) this -> 'T t
                                   val prototype : unit -> t_0
                                   val create : unit -> t_0
                                 end =
                      struct
                        type 'T t =
                          [ `EventTarget  | `IDBRequest of 'T ] intf
                        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t
                          = fun _T -> Obj.magic
                        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t =
                          fun _T -> Obj.magic
                        type 'T t_1 = 'T t
                        let rec t_1_of_js :
                          'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
                          fun (type __T) ->
                            fun (__T_of_js : Ojs.t -> __T) ->
                              fun (x2576 : Ojs.t) -> t_of_js __T_of_js x2576
                        and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
                          =
                          fun (type __T) ->
                            fun (__T_to_js : __T -> Ojs.t) ->
                              fun (x2574 : __T t) -> t_to_js __T_to_js x2574
                        type t_0 = any t
                        let rec t_0_of_js : Ojs.t -> t_0 =
                          fun (x2580 : Ojs.t) -> t_of_js any_of_js x2580
                        and t_0_to_js : t_0 -> Ojs.t =
                          fun (x2578 : any t) -> t_to_js any_to_js x2578
                        type 'T tags = [ `EventTarget  | `IDBRequest of 'T ]
                        type 'T tags_1 = 'T tags
                        type tags_0 = any tags
                        type ('tags, 'T) this =
                          'tags intf constraint 'tags =
                                      [> `IDBRequest of 'T ]
                        let rec this_of_js :
                          'tags 'T .
                            (Ojs.t -> 'tags) ->
                              (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
                          =
                          fun (type __tags) ->
                            fun (type __T) ->
                              fun (__tags_of_js : Ojs.t -> __tags) ->
                                fun (__T_of_js : Ojs.t -> __T) ->
                                  fun (x2584 : Ojs.t) ->
                                    intf_of_js __tags_of_js x2584
                        and this_to_js :
                          'tags 'T .
                            ('tags -> Ojs.t) ->
                              ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
                          =
                          fun (type __tags) ->
                            fun (type __T) ->
                              fun (__tags_to_js : __tags -> Ojs.t) ->
                                fun (__T_to_js : __T -> Ojs.t) ->
                                  fun (x2582 : __tags intf) ->
                                    intf_to_js __tags_to_js x2582
                        let (get_error :
                          ('tags, 'T) this -> DOMException.t option) =
                          fun (x2586 : ('tags, 'T) this) ->
                            Ojs.option_of_js DOMException.t_of_js
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x2586)
                                 "error")
                        let (get_onerror :
                          ('tags, 'T) this ->
                            (this:'T t -> ev:Event.t -> any) option)
                          =
                          fun (x2590 : ('tags, 'T) this) ->
                            Ojs.option_of_js
                              (fun (x2593 : Ojs.t) ->
                                 fun ~this:(x2594 : 'T t) ->
                                   fun ~ev:(x2596 : Event.t) ->
                                     any_of_js
                                       (Ojs.apply x2593
                                          [|(t_to_js Obj.magic x2594);(
                                            Event.t_to_js x2596)|]))
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x2590)
                                 "onerror")
                        let (set_onerror :
                          ('tags, 'T) this ->
                            (this:'T t -> ev:Event.t -> any) option -> unit)
                          =
                          fun (x2597 : ('tags, 'T) this) ->
                            fun
                              (x2598 :
                                (this:'T t -> ev:Event.t -> any) option)
                              ->
                              Ojs.set_prop_ascii
                                (this_to_js Obj.magic Obj.magic x2597)
                                "onerror"
                                (Ojs.option_to_js
                                   (fun
                                      (x2599 :
                                        this:'T t -> ev:Event.t -> any)
                                      ->
                                      Ojs.fun_to_js 2
                                        (fun (x2600 : Ojs.t) ->
                                           fun (x2602 : Ojs.t) ->
                                             any_to_js
                                               (x2599
                                                  ~this:(t_of_js Obj.magic
                                                           x2600)
                                                  ~ev:(Event.t_of_js x2602))))
                                   x2598)
                        let (get_onsuccess :
                          ('tags, 'T) this ->
                            (this:'T t -> ev:Event.t -> any) option)
                          =
                          fun (x2605 : ('tags, 'T) this) ->
                            Ojs.option_of_js
                              (fun (x2608 : Ojs.t) ->
                                 fun ~this:(x2609 : 'T t) ->
                                   fun ~ev:(x2611 : Event.t) ->
                                     any_of_js
                                       (Ojs.apply x2608
                                          [|(t_to_js Obj.magic x2609);(
                                            Event.t_to_js x2611)|]))
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x2605)
                                 "onsuccess")
                        let (set_onsuccess :
                          ('tags, 'T) this ->
                            (this:'T t -> ev:Event.t -> any) option -> unit)
                          =
                          fun (x2612 : ('tags, 'T) this) ->
                            fun
                              (x2613 :
                                (this:'T t -> ev:Event.t -> any) option)
                              ->
                              Ojs.set_prop_ascii
                                (this_to_js Obj.magic Obj.magic x2612)
                                "onsuccess"
                                (Ojs.option_to_js
                                   (fun
                                      (x2614 :
                                        this:'T t -> ev:Event.t -> any)
                                      ->
                                      Ojs.fun_to_js 2
                                        (fun (x2615 : Ojs.t) ->
                                           fun (x2617 : Ojs.t) ->
                                             any_to_js
                                               (x2614
                                                  ~this:(t_of_js Obj.magic
                                                           x2615)
                                                  ~ev:(Event.t_of_js x2617))))
                                   x2613)
                        let (get_readyState :
                          ('tags, 'T) this -> IDBRequestReadyState.t) =
                          fun (x2620 : ('tags, 'T) this) ->
                            IDBRequestReadyState.t_of_js
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x2620)
                                 "readyState")
                        let (get_result : ('tags, 'T) this -> 'T) =
                          fun (x2623 : ('tags, 'T) this) ->
                            Obj.magic
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x2623)
                                 "result")
                        let (get_source :
                          ('tags, 'T) this ->
                            (IDBCursor.t, IDBIndex.t, IDBObjectStore.t)
                              union3)
                          =
                          fun (x2626 : ('tags, 'T) this) ->
                            union3_of_js IDBCursor.t_of_js IDBIndex.t_of_js
                              IDBObjectStore.t_of_js
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x2626)
                                 "source")
                        let (get_transaction :
                          ('tags, 'T) this -> IDBTransaction.t option) =
                          fun (x2632 : ('tags, 'T) this) ->
                            Ojs.option_of_js IDBTransaction.t_of_js
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x2632)
                                 "transaction")
                        let (addEventListener :
                          ('tags, 'T) this ->
                            type_:'K ->
                              listener:(this:'T t -> ev:any -> any) ->
                                ?options:[ `U1 of bool 
                                         | `U2 of AddEventListenerOptions.t ]
                                  -> unit -> unit)
                          =
                          fun (x2646 : ('tags, 'T) this) ->
                            fun ~type_:(x2636 : 'K) ->
                              fun
                                ~listener:(x2637 :
                                            this:'T t -> ev:any -> any)
                                ->
                                fun
                                  ?options:(x2638 :
                                             [ `U1 of bool 
                                             | `U2 of
                                                 AddEventListenerOptions.t ]
                                               option)
                                  ->
                                  fun () ->
                                    ignore
                                      (let x2649 =
                                         this_to_js Obj.magic Obj.magic x2646 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x2649
                                            "addEventListener") "apply"
                                         [|x2649;((let x2639 =
                                                     Ojs.new_obj
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global "Array")
                                                       [||] in
                                                   ignore
                                                     (Ojs.call x2639 "push"
                                                        [|(Obj.magic x2636)|]);
                                                   ignore
                                                     (Ojs.call x2639 "push"
                                                        [|(Ojs.fun_to_js 2
                                                             (fun
                                                                (x2643 :
                                                                  Ojs.t)
                                                                ->
                                                                fun
                                                                  (x2645 :
                                                                    Ojs.t)
                                                                  ->
                                                                  any_to_js
                                                                    (
                                                                    x2637
                                                                    ~this:(
                                                                    t_of_js
                                                                    Obj.magic
                                                                    x2643)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x2645))))|]);
                                                   (match x2638 with
                                                    | Some x2640 ->
                                                        ignore
                                                          (Ojs.call x2639
                                                             "push"
                                                             [|((match x2640
                                                                 with
                                                                 | `U1 x2641
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x2641
                                                                 | `U2 x2642
                                                                    ->
                                                                    AddEventListenerOptions.t_to_js
                                                                    x2642))|])
                                                    | None -> ());
                                                   x2639))|])
                        let (addEventListener' :
                          ('tags, 'T) this ->
                            type_:string ->
                              listener:EventListenerOrEventListenerObject.t
                                ->
                                ?options:[ `U1 of bool 
                                         | `U2 of AddEventListenerOptions.t ]
                                  -> unit -> unit)
                          =
                          fun (x2657 : ('tags, 'T) this) ->
                            fun ~type_:(x2650 : string) ->
                              fun
                                ~listener:(x2651 :
                                            EventListenerOrEventListenerObject.t)
                                ->
                                fun
                                  ?options:(x2652 :
                                             [ `U1 of bool 
                                             | `U2 of
                                                 AddEventListenerOptions.t ]
                                               option)
                                  ->
                                  fun () ->
                                    ignore
                                      (let x2660 =
                                         this_to_js Obj.magic Obj.magic x2657 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x2660
                                            "addEventListener") "apply"
                                         [|x2660;((let x2653 =
                                                     Ojs.new_obj
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global "Array")
                                                       [||] in
                                                   ignore
                                                     (Ojs.call x2653 "push"
                                                        [|(Ojs.string_to_js
                                                             x2650)|]);
                                                   ignore
                                                     (Ojs.call x2653 "push"
                                                        [|(EventListenerOrEventListenerObject.t_to_js
                                                             x2651)|]);
                                                   (match x2652 with
                                                    | Some x2654 ->
                                                        ignore
                                                          (Ojs.call x2653
                                                             "push"
                                                             [|((match x2654
                                                                 with
                                                                 | `U1 x2655
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x2655
                                                                 | `U2 x2656
                                                                    ->
                                                                    AddEventListenerOptions.t_to_js
                                                                    x2656))|])
                                                    | None -> ());
                                                   x2653))|])
                        let (removeEventListener :
                          ('tags, 'T) this ->
                            type_:'K ->
                              listener:(this:'T t -> ev:any -> any) ->
                                ?options:[ `U1 of bool 
                                         | `U2 of EventListenerOptions.t ]
                                  -> unit -> unit)
                          =
                          fun (x2671 : ('tags, 'T) this) ->
                            fun ~type_:(x2661 : 'K) ->
                              fun
                                ~listener:(x2662 :
                                            this:'T t -> ev:any -> any)
                                ->
                                fun
                                  ?options:(x2663 :
                                             [ `U1 of bool 
                                             | `U2 of EventListenerOptions.t ]
                                               option)
                                  ->
                                  fun () ->
                                    ignore
                                      (let x2674 =
                                         this_to_js Obj.magic Obj.magic x2671 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x2674
                                            "removeEventListener") "apply"
                                         [|x2674;((let x2664 =
                                                     Ojs.new_obj
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global "Array")
                                                       [||] in
                                                   ignore
                                                     (Ojs.call x2664 "push"
                                                        [|(Obj.magic x2661)|]);
                                                   ignore
                                                     (Ojs.call x2664 "push"
                                                        [|(Ojs.fun_to_js 2
                                                             (fun
                                                                (x2668 :
                                                                  Ojs.t)
                                                                ->
                                                                fun
                                                                  (x2670 :
                                                                    Ojs.t)
                                                                  ->
                                                                  any_to_js
                                                                    (
                                                                    x2662
                                                                    ~this:(
                                                                    t_of_js
                                                                    Obj.magic
                                                                    x2668)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x2670))))|]);
                                                   (match x2663 with
                                                    | Some x2665 ->
                                                        ignore
                                                          (Ojs.call x2664
                                                             "push"
                                                             [|((match x2665
                                                                 with
                                                                 | `U1 x2666
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x2666
                                                                 | `U2 x2667
                                                                    ->
                                                                    EventListenerOptions.t_to_js
                                                                    x2667))|])
                                                    | None -> ());
                                                   x2664))|])
                        let (removeEventListener' :
                          ('tags, 'T) this ->
                            type_:string ->
                              listener:EventListenerOrEventListenerObject.t
                                ->
                                ?options:[ `U1 of bool 
                                         | `U2 of EventListenerOptions.t ]
                                  -> unit -> unit)
                          =
                          fun (x2682 : ('tags, 'T) this) ->
                            fun ~type_:(x2675 : string) ->
                              fun
                                ~listener:(x2676 :
                                            EventListenerOrEventListenerObject.t)
                                ->
                                fun
                                  ?options:(x2677 :
                                             [ `U1 of bool 
                                             | `U2 of EventListenerOptions.t ]
                                               option)
                                  ->
                                  fun () ->
                                    ignore
                                      (let x2685 =
                                         this_to_js Obj.magic Obj.magic x2682 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x2685
                                            "removeEventListener") "apply"
                                         [|x2685;((let x2678 =
                                                     Ojs.new_obj
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global "Array")
                                                       [||] in
                                                   ignore
                                                     (Ojs.call x2678 "push"
                                                        [|(Ojs.string_to_js
                                                             x2675)|]);
                                                   ignore
                                                     (Ojs.call x2678 "push"
                                                        [|(EventListenerOrEventListenerObject.t_to_js
                                                             x2676)|]);
                                                   (match x2677 with
                                                    | Some x2679 ->
                                                        ignore
                                                          (Ojs.call x2678
                                                             "push"
                                                             [|((match x2679
                                                                 with
                                                                 | `U1 x2680
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x2680
                                                                 | `U2 x2681
                                                                    ->
                                                                    EventListenerOptions.t_to_js
                                                                    x2681))|])
                                                    | None -> ());
                                                   x2678))|])
                        let cast_from = Obj.magic
                        let (prototype : unit -> t_0) =
                          fun () ->
                            t_0_of_js
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global "IDBRequest")
                                 "prototype")
                        let (create : unit -> t_0) =
                          fun () ->
                            t_0_of_js
                              (Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "IDBRequest")
                                 [||])
                      end and
                           IDBTransaction:sig
                                            type t =
                                              [ `EventTarget 
                                              | `IDBTransaction ] intf
                                            type t_0 = t
                                            [@@@js.stop ]
                                            type tags =
                                              [ `EventTarget 
                                              | `IDBTransaction ]
                                            type tags_0 = tags
                                            [@@@js.start ]
                                            [@@@js.implem
                                              type tags =
                                                [ `EventTarget 
                                                | `IDBTransaction ]
                                              type tags_0 = tags]
                                            type 'tags this =
                                              'tags intf constraint 'tags =
                                                          [>
                                                            `IDBTransaction ]
                                            val t_to_js : t -> Ojs.t
                                            val t_of_js : Ojs.t -> t
                                            val t_0_to_js : t_0 -> Ojs.t
                                            val t_0_of_js : Ojs.t -> t_0
                                            val get_db :
                                              'tags this -> IDBDatabase.t
                                            val get_durability :
                                              'tags this ->
                                                IDBTransactionDurability.t
                                            val get_error :
                                              'tags this ->
                                                DOMException.t option
                                            val get_mode :
                                              'tags this ->
                                                IDBTransactionMode.t
                                            val get_objectStoreNames :
                                              'tags this -> DOMStringList.t
                                            val get_onabort :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  option
                                            val set_onabort :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  option -> unit
                                            val get_oncomplete :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  option
                                            val set_oncomplete :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  option -> unit
                                            val get_onerror :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  option
                                            val set_onerror :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  option -> unit
                                            val abort : 'tags this -> unit
                                            val commit : 'tags this -> unit
                                            val objectStore :
                                              'tags this ->
                                                name:string ->
                                                  IDBObjectStore.t
                                            val addEventListener :
                                              'tags this ->
                                                type_:'K ->
                                                  listener:(this:t ->
                                                              ev:any -> any)
                                                    ->
                                                    ?options:[ `U1 of bool 
                                                             | `U2 of
                                                                 AddEventListenerOptions.t
                                                                 ]
                                                      -> unit -> unit
                                            val addEventListener' :
                                              'tags this ->
                                                type_:string ->
                                                  listener:EventListenerOrEventListenerObject.t
                                                    ->
                                                    ?options:[ `U1 of bool 
                                                             | `U2 of
                                                                 AddEventListenerOptions.t
                                                                 ]
                                                      -> unit -> unit
                                            val removeEventListener :
                                              'tags this ->
                                                type_:'K ->
                                                  listener:(this:t ->
                                                              ev:any -> any)
                                                    ->
                                                    ?options:[ `U1 of bool 
                                                             | `U2 of
                                                                 EventListenerOptions.t
                                                                 ]
                                                      -> unit -> unit
                                            val removeEventListener' :
                                              'tags this ->
                                                type_:string ->
                                                  listener:EventListenerOrEventListenerObject.t
                                                    ->
                                                    ?options:[ `U1 of bool 
                                                             | `U2 of
                                                                 EventListenerOptions.t
                                                                 ]
                                                      -> unit -> unit
                                            val cast_from : 'tags this -> t
                                            val prototype : unit -> t
                                            val create : unit -> t
                                          end =
                           struct
                             type t =
                               [ `EventTarget  | `IDBTransaction ] intf
                             let rec t_of_js : Ojs.t -> t = Obj.magic
                             and t_to_js : t -> Ojs.t = Obj.magic
                             type t_0 = t
                             let rec t_0_of_js : Ojs.t -> t_0 =
                               fun (x2687 : Ojs.t) -> t_of_js x2687
                             and t_0_to_js : t_0 -> Ojs.t =
                               fun (x2686 : t) -> t_to_js x2686
                             type tags = [ `EventTarget  | `IDBTransaction ]
                             type tags_0 = tags
                             type 'tags this =
                               'tags intf constraint 'tags =
                                           [> `IDBTransaction ]
                             let rec this_of_js :
                               'tags .
                                 (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
                               =
                               fun (type __tags) ->
                                 fun (__tags_of_js : Ojs.t -> __tags) ->
                                   fun (x2690 : Ojs.t) ->
                                     intf_of_js __tags_of_js x2690
                             and this_to_js :
                               'tags .
                                 ('tags -> Ojs.t) -> 'tags this -> Ojs.t
                               =
                               fun (type __tags) ->
                                 fun (__tags_to_js : __tags -> Ojs.t) ->
                                   fun (x2688 : __tags intf) ->
                                     intf_to_js __tags_to_js x2688
                             let (get_db : 'tags this -> IDBDatabase.t) =
                               fun (x2692 : 'tags this) ->
                                 IDBDatabase.t_of_js
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x2692) "db")
                             let (get_durability :
                               'tags this -> IDBTransactionDurability.t) =
                               fun (x2694 : 'tags this) ->
                                 IDBTransactionDurability.t_of_js
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x2694)
                                      "durability")
                             let (get_error :
                               'tags this -> DOMException.t option) =
                               fun (x2696 : 'tags this) ->
                                 Ojs.option_of_js DOMException.t_of_js
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x2696) "error")
                             let (get_mode :
                               'tags this -> IDBTransactionMode.t) =
                               fun (x2699 : 'tags this) ->
                                 IDBTransactionMode.t_of_js
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x2699) "mode")
                             let (get_objectStoreNames :
                               'tags this -> DOMStringList.t) =
                               fun (x2701 : 'tags this) ->
                                 DOMStringList.t_of_js
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x2701)
                                      "objectStoreNames")
                             let (get_onabort :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) option)
                               =
                               fun (x2703 : 'tags this) ->
                                 Ojs.option_of_js
                                   (fun (x2705 : Ojs.t) ->
                                      fun ~this:(x2706 : t) ->
                                        fun ~ev:(x2707 : Event.t) ->
                                          any_of_js
                                            (Ojs.apply x2705
                                               [|(t_to_js x2706);(Event.t_to_js
                                                                    x2707)|]))
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x2703) "onabort")
                             let (set_onabort :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) option -> unit)
                               =
                               fun (x2708 : 'tags this) ->
                                 fun
                                   (x2709 :
                                     (this:t -> ev:Event.t -> any) option)
                                   ->
                                   Ojs.set_prop_ascii
                                     (this_to_js Obj.magic x2708) "onabort"
                                     (Ojs.option_to_js
                                        (fun
                                           (x2710 :
                                             this:t -> ev:Event.t -> any)
                                           ->
                                           Ojs.fun_to_js 2
                                             (fun (x2711 : Ojs.t) ->
                                                fun (x2712 : Ojs.t) ->
                                                  any_to_js
                                                    (x2710
                                                       ~this:(t_of_js x2711)
                                                       ~ev:(Event.t_of_js
                                                              x2712)))) x2709)
                             let (get_oncomplete :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) option)
                               =
                               fun (x2714 : 'tags this) ->
                                 Ojs.option_of_js
                                   (fun (x2716 : Ojs.t) ->
                                      fun ~this:(x2717 : t) ->
                                        fun ~ev:(x2718 : Event.t) ->
                                          any_of_js
                                            (Ojs.apply x2716
                                               [|(t_to_js x2717);(Event.t_to_js
                                                                    x2718)|]))
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x2714)
                                      "oncomplete")
                             let (set_oncomplete :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) option -> unit)
                               =
                               fun (x2719 : 'tags this) ->
                                 fun
                                   (x2720 :
                                     (this:t -> ev:Event.t -> any) option)
                                   ->
                                   Ojs.set_prop_ascii
                                     (this_to_js Obj.magic x2719)
                                     "oncomplete"
                                     (Ojs.option_to_js
                                        (fun
                                           (x2721 :
                                             this:t -> ev:Event.t -> any)
                                           ->
                                           Ojs.fun_to_js 2
                                             (fun (x2722 : Ojs.t) ->
                                                fun (x2723 : Ojs.t) ->
                                                  any_to_js
                                                    (x2721
                                                       ~this:(t_of_js x2722)
                                                       ~ev:(Event.t_of_js
                                                              x2723)))) x2720)
                             let (get_onerror :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) option)
                               =
                               fun (x2725 : 'tags this) ->
                                 Ojs.option_of_js
                                   (fun (x2727 : Ojs.t) ->
                                      fun ~this:(x2728 : t) ->
                                        fun ~ev:(x2729 : Event.t) ->
                                          any_of_js
                                            (Ojs.apply x2727
                                               [|(t_to_js x2728);(Event.t_to_js
                                                                    x2729)|]))
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x2725) "onerror")
                             let (set_onerror :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) option -> unit)
                               =
                               fun (x2730 : 'tags this) ->
                                 fun
                                   (x2731 :
                                     (this:t -> ev:Event.t -> any) option)
                                   ->
                                   Ojs.set_prop_ascii
                                     (this_to_js Obj.magic x2730) "onerror"
                                     (Ojs.option_to_js
                                        (fun
                                           (x2732 :
                                             this:t -> ev:Event.t -> any)
                                           ->
                                           Ojs.fun_to_js 2
                                             (fun (x2733 : Ojs.t) ->
                                                fun (x2734 : Ojs.t) ->
                                                  any_to_js
                                                    (x2732
                                                       ~this:(t_of_js x2733)
                                                       ~ev:(Event.t_of_js
                                                              x2734)))) x2731)
                             let (abort : 'tags this -> unit) =
                               fun (x2736 : 'tags this) ->
                                 ignore
                                   (Ojs.call (this_to_js Obj.magic x2736)
                                      "abort" [||])
                             let (commit : 'tags this -> unit) =
                               fun (x2738 : 'tags this) ->
                                 ignore
                                   (Ojs.call (this_to_js Obj.magic x2738)
                                      "commit" [||])
                             let (objectStore :
                               'tags this -> name:string -> IDBObjectStore.t)
                               =
                               fun (x2741 : 'tags this) ->
                                 fun ~name:(x2740 : string) ->
                                   IDBObjectStore.t_of_js
                                     (Ojs.call (this_to_js Obj.magic x2741)
                                        "objectStore"
                                        [|(Ojs.string_to_js x2740)|])
                             let (addEventListener :
                               'tags this ->
                                 type_:'K ->
                                   listener:(this:t -> ev:any -> any) ->
                                     ?options:[ `U1 of bool 
                                              | `U2 of
                                                  AddEventListenerOptions.t ]
                                       -> unit -> unit)
                               =
                               fun (x2752 : 'tags this) ->
                                 fun ~type_:(x2743 : 'K) ->
                                   fun
                                     ~listener:(x2744 :
                                                 this:t -> ev:any -> any)
                                     ->
                                     fun
                                       ?options:(x2745 :
                                                  [ `U1 of bool 
                                                  | `U2 of
                                                      AddEventListenerOptions.t
                                                      ]
                                                    option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x2754 =
                                              this_to_js Obj.magic x2752 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x2754
                                                 "addEventListener") "apply"
                                              [|x2754;((let x2746 =
                                                          Ojs.new_obj
                                                            (Ojs.get_prop_ascii
                                                               Ojs.global
                                                               "Array") 
                                                            [||] in
                                                        ignore
                                                          (Ojs.call x2746
                                                             "push"
                                                             [|(Obj.magic
                                                                  x2743)|]);
                                                        ignore
                                                          (Ojs.call x2746
                                                             "push"
                                                             [|(Ojs.fun_to_js
                                                                  2
                                                                  (fun
                                                                    (x2750 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x2751 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x2744
                                                                    ~this:(
                                                                    t_of_js
                                                                    x2750)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x2751))))|]);
                                                        (match x2745 with
                                                         | Some x2747 ->
                                                             ignore
                                                               (Ojs.call
                                                                  x2746
                                                                  "push"
                                                                  [|((
                                                                    match x2747
                                                                    with
                                                                    | 
                                                                    `U1 x2748
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x2748
                                                                    | 
                                                                    `U2 x2749
                                                                    ->
                                                                    AddEventListenerOptions.t_to_js
                                                                    x2749))|])
                                                         | None -> ());
                                                        x2746))|])
                             let (addEventListener' :
                               'tags this ->
                                 type_:string ->
                                   listener:EventListenerOrEventListenerObject.t
                                     ->
                                     ?options:[ `U1 of bool 
                                              | `U2 of
                                                  AddEventListenerOptions.t ]
                                       -> unit -> unit)
                               =
                               fun (x2762 : 'tags this) ->
                                 fun ~type_:(x2755 : string) ->
                                   fun
                                     ~listener:(x2756 :
                                                 EventListenerOrEventListenerObject.t)
                                     ->
                                     fun
                                       ?options:(x2757 :
                                                  [ `U1 of bool 
                                                  | `U2 of
                                                      AddEventListenerOptions.t
                                                      ]
                                                    option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x2764 =
                                              this_to_js Obj.magic x2762 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x2764
                                                 "addEventListener") "apply"
                                              [|x2764;((let x2758 =
                                                          Ojs.new_obj
                                                            (Ojs.get_prop_ascii
                                                               Ojs.global
                                                               "Array") 
                                                            [||] in
                                                        ignore
                                                          (Ojs.call x2758
                                                             "push"
                                                             [|(Ojs.string_to_js
                                                                  x2755)|]);
                                                        ignore
                                                          (Ojs.call x2758
                                                             "push"
                                                             [|(EventListenerOrEventListenerObject.t_to_js
                                                                  x2756)|]);
                                                        (match x2757 with
                                                         | Some x2759 ->
                                                             ignore
                                                               (Ojs.call
                                                                  x2758
                                                                  "push"
                                                                  [|((
                                                                    match x2759
                                                                    with
                                                                    | 
                                                                    `U1 x2760
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x2760
                                                                    | 
                                                                    `U2 x2761
                                                                    ->
                                                                    AddEventListenerOptions.t_to_js
                                                                    x2761))|])
                                                         | None -> ());
                                                        x2758))|])
                             let (removeEventListener :
                               'tags this ->
                                 type_:'K ->
                                   listener:(this:t -> ev:any -> any) ->
                                     ?options:[ `U1 of bool 
                                              | `U2 of EventListenerOptions.t ]
                                       -> unit -> unit)
                               =
                               fun (x2774 : 'tags this) ->
                                 fun ~type_:(x2765 : 'K) ->
                                   fun
                                     ~listener:(x2766 :
                                                 this:t -> ev:any -> any)
                                     ->
                                     fun
                                       ?options:(x2767 :
                                                  [ `U1 of bool 
                                                  | `U2 of
                                                      EventListenerOptions.t ]
                                                    option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x2776 =
                                              this_to_js Obj.magic x2774 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x2776
                                                 "removeEventListener")
                                              "apply"
                                              [|x2776;((let x2768 =
                                                          Ojs.new_obj
                                                            (Ojs.get_prop_ascii
                                                               Ojs.global
                                                               "Array") 
                                                            [||] in
                                                        ignore
                                                          (Ojs.call x2768
                                                             "push"
                                                             [|(Obj.magic
                                                                  x2765)|]);
                                                        ignore
                                                          (Ojs.call x2768
                                                             "push"
                                                             [|(Ojs.fun_to_js
                                                                  2
                                                                  (fun
                                                                    (x2772 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x2773 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x2766
                                                                    ~this:(
                                                                    t_of_js
                                                                    x2772)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x2773))))|]);
                                                        (match x2767 with
                                                         | Some x2769 ->
                                                             ignore
                                                               (Ojs.call
                                                                  x2768
                                                                  "push"
                                                                  [|((
                                                                    match x2769
                                                                    with
                                                                    | 
                                                                    `U1 x2770
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x2770
                                                                    | 
                                                                    `U2 x2771
                                                                    ->
                                                                    EventListenerOptions.t_to_js
                                                                    x2771))|])
                                                         | None -> ());
                                                        x2768))|])
                             let (removeEventListener' :
                               'tags this ->
                                 type_:string ->
                                   listener:EventListenerOrEventListenerObject.t
                                     ->
                                     ?options:[ `U1 of bool 
                                              | `U2 of EventListenerOptions.t ]
                                       -> unit -> unit)
                               =
                               fun (x2784 : 'tags this) ->
                                 fun ~type_:(x2777 : string) ->
                                   fun
                                     ~listener:(x2778 :
                                                 EventListenerOrEventListenerObject.t)
                                     ->
                                     fun
                                       ?options:(x2779 :
                                                  [ `U1 of bool 
                                                  | `U2 of
                                                      EventListenerOptions.t ]
                                                    option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x2786 =
                                              this_to_js Obj.magic x2784 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x2786
                                                 "removeEventListener")
                                              "apply"
                                              [|x2786;((let x2780 =
                                                          Ojs.new_obj
                                                            (Ojs.get_prop_ascii
                                                               Ojs.global
                                                               "Array") 
                                                            [||] in
                                                        ignore
                                                          (Ojs.call x2780
                                                             "push"
                                                             [|(Ojs.string_to_js
                                                                  x2777)|]);
                                                        ignore
                                                          (Ojs.call x2780
                                                             "push"
                                                             [|(EventListenerOrEventListenerObject.t_to_js
                                                                  x2778)|]);
                                                        (match x2779 with
                                                         | Some x2781 ->
                                                             ignore
                                                               (Ojs.call
                                                                  x2780
                                                                  "push"
                                                                  [|((
                                                                    match x2781
                                                                    with
                                                                    | 
                                                                    `U1 x2782
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x2782
                                                                    | 
                                                                    `U2 x2783
                                                                    ->
                                                                    EventListenerOptions.t_to_js
                                                                    x2783))|])
                                                         | None -> ());
                                                        x2780))|])
                             let cast_from = Obj.magic
                             let (prototype : unit -> t) =
                               fun () ->
                                 t_of_js
                                   (Ojs.get_prop_ascii
                                      (Ojs.get_prop_ascii Ojs.global
                                         "IDBTransaction") "prototype")
                             let (create : unit -> t) =
                               fun () ->
                                 t_of_js
                                   (Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global
                                         "IDBTransaction") [||])
                           end
module IDBOpenDBRequest =
  struct
    type t =
      [ `EventTarget  | `IDBOpenDBRequest  | `IDBRequest of IDBDatabase.t ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2788 : Ojs.t) -> t_of_js x2788
    and t_0_to_js : t_0 -> Ojs.t = fun (x2787 : t) -> t_to_js x2787
    type tags =
      [ `EventTarget  | `IDBOpenDBRequest  | `IDBRequest of IDBDatabase.t ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBOpenDBRequest ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x2791 : Ojs.t) -> intf_of_js __tags_of_js x2791
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x2789 : __tags intf) -> intf_to_js __tags_to_js x2789
    let (get_onblocked : 'tags this -> (this:t -> ev:Event.t -> any) option)
      =
      fun (x2793 : 'tags this) ->
        Ojs.option_of_js
          (fun (x2795 : Ojs.t) ->
             fun ~this:(x2796 : t) ->
               fun ~ev:(x2797 : Event.t) ->
                 any_of_js
                   (Ojs.apply x2795 [|(t_to_js x2796);(Event.t_to_js x2797)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2793) "onblocked")
    let (set_onblocked :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x2798 : 'tags this) ->
        fun (x2799 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2798) "onblocked"
            (Ojs.option_to_js
               (fun (x2800 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x2801 : Ojs.t) ->
                       fun (x2802 : Ojs.t) ->
                         any_to_js
                           (x2800 ~this:(t_of_js x2801)
                              ~ev:(Event.t_of_js x2802)))) x2799)
    let (get_onupgradeneeded :
      'tags this -> (this:t -> ev:IDBVersionChangeEvent.t -> any) option) =
      fun (x2804 : 'tags this) ->
        Ojs.option_of_js
          (fun (x2806 : Ojs.t) ->
             fun ~this:(x2807 : t) ->
               fun ~ev:(x2808 : IDBVersionChangeEvent.t) ->
                 any_of_js
                   (Ojs.apply x2806
                      [|(t_to_js x2807);(IDBVersionChangeEvent.t_to_js x2808)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2804) "onupgradeneeded")
    let (set_onupgradeneeded :
      'tags this ->
        (this:t -> ev:IDBVersionChangeEvent.t -> any) option -> unit)
      =
      fun (x2809 : 'tags this) ->
        fun (x2810 : (this:t -> ev:IDBVersionChangeEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2809) "onupgradeneeded"
            (Ojs.option_to_js
               (fun (x2811 : this:t -> ev:IDBVersionChangeEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x2812 : Ojs.t) ->
                       fun (x2813 : Ojs.t) ->
                         any_to_js
                           (x2811 ~this:(t_of_js x2812)
                              ~ev:(IDBVersionChangeEvent.t_of_js x2813))))
               x2810)
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x2824 : 'tags this) ->
        fun ~type_:(x2815 : 'K) ->
          fun ~listener:(x2816 : this:t -> ev:any -> any) ->
            fun
              ?options:(x2817 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x2826 = this_to_js Obj.magic x2824 in
                   Ojs.call (Ojs.get_prop_ascii x2826 "addEventListener")
                     "apply"
                     [|x2826;((let x2818 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2818 "push" [|(Obj.magic x2815)|]);
                               ignore
                                 (Ojs.call x2818 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x2822 : Ojs.t) ->
                                            fun (x2823 : Ojs.t) ->
                                              any_to_js
                                                (x2816 ~this:(t_of_js x2822)
                                                   ~ev:(any_of_js x2823))))|]);
                               (match x2817 with
                                | Some x2819 ->
                                    ignore
                                      (Ojs.call x2818 "push"
                                         [|((match x2819 with
                                             | `U1 x2820 ->
                                                 Ojs.bool_to_js x2820
                                             | `U2 x2821 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x2821))|])
                                | None -> ());
                               x2818))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x2834 : 'tags this) ->
        fun ~type_:(x2827 : string) ->
          fun ~listener:(x2828 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x2829 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x2836 = this_to_js Obj.magic x2834 in
                   Ojs.call (Ojs.get_prop_ascii x2836 "addEventListener")
                     "apply"
                     [|x2836;((let x2830 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2830 "push"
                                    [|(Ojs.string_to_js x2827)|]);
                               ignore
                                 (Ojs.call x2830 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x2828)|]);
                               (match x2829 with
                                | Some x2831 ->
                                    ignore
                                      (Ojs.call x2830 "push"
                                         [|((match x2831 with
                                             | `U1 x2832 ->
                                                 Ojs.bool_to_js x2832
                                             | `U2 x2833 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x2833))|])
                                | None -> ());
                               x2830))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x2846 : 'tags this) ->
        fun ~type_:(x2837 : 'K) ->
          fun ~listener:(x2838 : this:t -> ev:any -> any) ->
            fun
              ?options:(x2839 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x2848 = this_to_js Obj.magic x2846 in
                   Ojs.call (Ojs.get_prop_ascii x2848 "removeEventListener")
                     "apply"
                     [|x2848;((let x2840 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2840 "push" [|(Obj.magic x2837)|]);
                               ignore
                                 (Ojs.call x2840 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x2844 : Ojs.t) ->
                                            fun (x2845 : Ojs.t) ->
                                              any_to_js
                                                (x2838 ~this:(t_of_js x2844)
                                                   ~ev:(any_of_js x2845))))|]);
                               (match x2839 with
                                | Some x2841 ->
                                    ignore
                                      (Ojs.call x2840 "push"
                                         [|((match x2841 with
                                             | `U1 x2842 ->
                                                 Ojs.bool_to_js x2842
                                             | `U2 x2843 ->
                                                 EventListenerOptions.t_to_js
                                                   x2843))|])
                                | None -> ());
                               x2840))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x2856 : 'tags this) ->
        fun ~type_:(x2849 : string) ->
          fun ~listener:(x2850 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x2851 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x2858 = this_to_js Obj.magic x2856 in
                   Ojs.call (Ojs.get_prop_ascii x2858 "removeEventListener")
                     "apply"
                     [|x2858;((let x2852 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2852 "push"
                                    [|(Ojs.string_to_js x2849)|]);
                               ignore
                                 (Ojs.call x2852 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x2850)|]);
                               (match x2851 with
                                | Some x2853 ->
                                    ignore
                                      (Ojs.call x2852 "push"
                                         [|((match x2853 with
                                             | `U1 x2854 ->
                                                 Ojs.bool_to_js x2854
                                             | `U2 x2855 ->
                                                 EventListenerOptions.t_to_js
                                                   x2855))|])
                                | None -> ());
                               x2852))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "IDBOpenDBRequest") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBOpenDBRequest")
             [||])
  end
module IDBDatabaseInfo =
  struct
    type t = [ `IDBDatabaseInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2860 : Ojs.t) -> t_of_js x2860
    and t_0_to_js : t_0 -> Ojs.t = fun (x2859 : t) -> t_to_js x2859
    type tags = [ `IDBDatabaseInfo ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBDatabaseInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x2863 : Ojs.t) -> intf_of_js __tags_of_js x2863
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x2861 : __tags intf) -> intf_to_js __tags_to_js x2861
    let (get_name : 'tags this -> string option) =
      fun (x2865 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2865) "name")
    let (set_name : 'tags this -> string -> unit) =
      fun (x2868 : 'tags this) ->
        fun (x2869 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2868) "name"
            (Ojs.string_to_js x2869)
    let (get_version : 'tags this -> float option) =
      fun (x2871 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2871) "version")
    let (set_version : 'tags this -> float -> unit) =
      fun (x2874 : 'tags this) ->
        fun (x2875 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2874) "version"
            (Ojs.float_to_js x2875)
    let (create : ?name:string -> ?version:float -> unit -> t) =
      fun ?name:(x2877 : string option) ->
        fun ?version:(x2878 : float option) ->
          fun () ->
            let x2879 = Ojs.empty_obj () in
            (match x2877 with
             | Some x2881 ->
                 Ojs.set_prop_ascii x2879 "name" (Ojs.string_to_js x2881)
             | None -> ());
            (match x2878 with
             | Some x2880 ->
                 Ojs.set_prop_ascii x2879 "version" (Ojs.float_to_js x2880)
             | None -> ());
            t_of_js x2879
    let cast_from = Obj.magic
  end
module IndexedDBStatic =
  struct
    let (cmp : first:any -> second:any -> float) =
      fun ~first:(x2882 : any) ->
        fun ~second:(x2883 : any) ->
          Ojs.float_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "indexedDB") "cmp"
               [|(any_to_js x2882);(any_to_js x2883)|])
    let (databases : unit -> IDBDatabaseInfo.t list Promise.t_1) =
      fun () ->
        Promise.t_1_of_js
          (fun (x2884 : Ojs.t) ->
             Ojs.list_of_js IDBDatabaseInfo.t_of_js x2884)
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "indexedDB") "databases"
             [||])
    let (deleteDatabase : string -> IDBOpenDBRequest.t) =
      fun (x2886 : string) ->
        IDBOpenDBRequest.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "indexedDB")
             "deleteDatabase" [|(Ojs.string_to_js x2886)|])
    let (open_ : name:string -> ?version:float -> unit -> IDBOpenDBRequest.t)
      =
      fun ~name:(x2887 : string) ->
        fun ?version:(x2888 : float option) ->
          fun () ->
            IDBOpenDBRequest.t_of_js
              (let x2891 = Ojs.get_prop_ascii Ojs.global "indexedDB" in
               Ojs.call (Ojs.get_prop_ascii x2891 "open") "apply"
                 [|x2891;((let x2889 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2889 "push"
                                [|(Ojs.string_to_js x2887)|]);
                           (match x2888 with
                            | Some x2890 ->
                                ignore
                                  (Ojs.call x2889 "push"
                                     [|(Ojs.float_to_js x2890)|])
                            | None -> ());
                           x2889))|])
  end
module FontFaceSetLoadStatus =
  struct
    type t = [ `L_s102_loaded  | `L_s104_loading ]
    let rec t_of_js : Ojs.t -> t =
      fun (x2893 : Ojs.t) ->
        let x2894 = x2893 in
        match Ojs.string_of_js x2894 with
        | "loaded" -> `L_s102_loaded
        | "loading" -> `L_s104_loading
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x2892 : [ `L_s102_loaded  | `L_s104_loading ]) ->
        match x2892 with
        | `L_s102_loaded -> Ojs.string_to_js "loaded"
        | `L_s104_loading -> Ojs.string_to_js "loading"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2896 : Ojs.t) -> t_of_js x2896
    and t_0_to_js : t_0 -> Ojs.t = fun (x2895 : t) -> t_to_js x2895
  end
module FontFaceLoadStatus =
  struct
    type t =
      [ `L_s102_loaded  | `L_s104_loading  | `L_s202_unloaded 
      | `L_s68_error ]
    let rec t_of_js : Ojs.t -> t =
      fun (x2898 : Ojs.t) ->
        let x2899 = x2898 in
        match Ojs.string_of_js x2899 with
        | "loaded" -> `L_s102_loaded
        | "loading" -> `L_s104_loading
        | "unloaded" -> `L_s202_unloaded
        | "error" -> `L_s68_error
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x2897 :
          [ `L_s102_loaded  | `L_s104_loading  | `L_s202_unloaded 
          | `L_s68_error ])
        ->
        match x2897 with
        | `L_s102_loaded -> Ojs.string_to_js "loaded"
        | `L_s104_loading -> Ojs.string_to_js "loading"
        | `L_s202_unloaded -> Ojs.string_to_js "unloaded"
        | `L_s68_error -> Ojs.string_to_js "error"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2901 : Ojs.t) -> t_of_js x2901
    and t_0_to_js : t_0 -> Ojs.t = fun (x2900 : t) -> t_to_js x2900
  end
module FontFaceDescriptors =
  struct
    type t = [ `FontFaceDescriptors ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2903 : Ojs.t) -> t_of_js x2903
    and t_0_to_js : t_0 -> Ojs.t = fun (x2902 : t) -> t_to_js x2902
    type tags = [ `FontFaceDescriptors ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFaceDescriptors ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x2906 : Ojs.t) -> intf_of_js __tags_of_js x2906
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x2904 : __tags intf) -> intf_to_js __tags_to_js x2904
    let (get_display : 'tags this -> string option) =
      fun (x2908 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2908) "display")
    let (set_display : 'tags this -> string -> unit) =
      fun (x2911 : 'tags this) ->
        fun (x2912 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2911) "display"
            (Ojs.string_to_js x2912)
    let (get_featureSettings : 'tags this -> string option) =
      fun (x2914 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2914) "featureSettings")
    let (set_featureSettings : 'tags this -> string -> unit) =
      fun (x2917 : 'tags this) ->
        fun (x2918 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2917) "featureSettings"
            (Ojs.string_to_js x2918)
    let (get_stretch : 'tags this -> string option) =
      fun (x2920 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2920) "stretch")
    let (set_stretch : 'tags this -> string -> unit) =
      fun (x2923 : 'tags this) ->
        fun (x2924 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2923) "stretch"
            (Ojs.string_to_js x2924)
    let (get_style : 'tags this -> string option) =
      fun (x2926 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2926) "style")
    let (set_style : 'tags this -> string -> unit) =
      fun (x2929 : 'tags this) ->
        fun (x2930 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2929) "style"
            (Ojs.string_to_js x2930)
    let (get_unicodeRange : 'tags this -> string option) =
      fun (x2932 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2932) "unicodeRange")
    let (set_unicodeRange : 'tags this -> string -> unit) =
      fun (x2935 : 'tags this) ->
        fun (x2936 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2935) "unicodeRange"
            (Ojs.string_to_js x2936)
    let (get_variant : 'tags this -> string option) =
      fun (x2938 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2938) "variant")
    let (set_variant : 'tags this -> string -> unit) =
      fun (x2941 : 'tags this) ->
        fun (x2942 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2941) "variant"
            (Ojs.string_to_js x2942)
    let (get_weight : 'tags this -> string option) =
      fun (x2944 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2944) "weight")
    let (set_weight : 'tags this -> string -> unit) =
      fun (x2947 : 'tags this) ->
        fun (x2948 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2947) "weight"
            (Ojs.string_to_js x2948)
    let (create :
      ?display:string ->
        ?featureSettings:string ->
          ?stretch:string ->
            ?style:string ->
              ?unicodeRange:string ->
                ?variant:string -> ?weight:string -> unit -> t)
      =
      fun ?display:(x2950 : string option) ->
        fun ?featureSettings:(x2951 : string option) ->
          fun ?stretch:(x2952 : string option) ->
            fun ?style:(x2953 : string option) ->
              fun ?unicodeRange:(x2954 : string option) ->
                fun ?variant:(x2955 : string option) ->
                  fun ?weight:(x2956 : string option) ->
                    fun () ->
                      let x2957 = Ojs.empty_obj () in
                      (match x2950 with
                       | Some x2964 ->
                           Ojs.set_prop_ascii x2957 "display"
                             (Ojs.string_to_js x2964)
                       | None -> ());
                      (match x2951 with
                       | Some x2963 ->
                           Ojs.set_prop_ascii x2957 "featureSettings"
                             (Ojs.string_to_js x2963)
                       | None -> ());
                      (match x2952 with
                       | Some x2962 ->
                           Ojs.set_prop_ascii x2957 "stretch"
                             (Ojs.string_to_js x2962)
                       | None -> ());
                      (match x2953 with
                       | Some x2961 ->
                           Ojs.set_prop_ascii x2957 "style"
                             (Ojs.string_to_js x2961)
                       | None -> ());
                      (match x2954 with
                       | Some x2960 ->
                           Ojs.set_prop_ascii x2957 "unicodeRange"
                             (Ojs.string_to_js x2960)
                       | None -> ());
                      (match x2955 with
                       | Some x2959 ->
                           Ojs.set_prop_ascii x2957 "variant"
                             (Ojs.string_to_js x2959)
                       | None -> ());
                      (match x2956 with
                       | Some x2958 ->
                           Ojs.set_prop_ascii x2957 "weight"
                             (Ojs.string_to_js x2958)
                       | None -> ());
                      t_of_js x2957
    let cast_from = Obj.magic
  end
module BinaryData =
  struct
    type t = (ArrayBuffer.t_0, ArrayBufferView.t_0) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x2968 : Ojs.t) ->
        union2_of_js ArrayBuffer.t_0_of_js ArrayBufferView.t_0_of_js x2968
    and t_to_js : t -> Ojs.t =
      fun (x2965 : (ArrayBuffer.t_0, ArrayBufferView.t_0) union2) ->
        union2_to_js ArrayBuffer.t_0_to_js ArrayBufferView.t_0_to_js x2965
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2972 : Ojs.t) -> t_of_js x2972
    and t_0_to_js : t_0 -> Ojs.t = fun (x2971 : t) -> t_to_js x2971
  end
module FontFace =
  struct
    type t = [ `FontFace ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2974 : Ojs.t) -> t_of_js x2974
    and t_0_to_js : t_0 -> Ojs.t = fun (x2973 : t) -> t_to_js x2973
    type tags = [ `FontFace ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFace ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x2977 : Ojs.t) -> intf_of_js __tags_of_js x2977
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x2975 : __tags intf) -> intf_to_js __tags_to_js x2975
    let (get_ascentOverride : 'tags this -> string) =
      fun (x2979 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2979) "ascentOverride")
    let (set_ascentOverride : 'tags this -> string -> unit) =
      fun (x2981 : 'tags this) ->
        fun (x2982 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2981) "ascentOverride"
            (Ojs.string_to_js x2982)
    let (get_descentOverride : 'tags this -> string) =
      fun (x2984 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2984) "descentOverride")
    let (set_descentOverride : 'tags this -> string -> unit) =
      fun (x2986 : 'tags this) ->
        fun (x2987 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2986) "descentOverride"
            (Ojs.string_to_js x2987)
    let (get_display : 'tags this -> string) =
      fun (x2989 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2989) "display")
    let (set_display : 'tags this -> string -> unit) =
      fun (x2991 : 'tags this) ->
        fun (x2992 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2991) "display"
            (Ojs.string_to_js x2992)
    let (get_family : 'tags this -> string) =
      fun (x2994 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2994) "family")
    let (set_family : 'tags this -> string -> unit) =
      fun (x2996 : 'tags this) ->
        fun (x2997 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2996) "family"
            (Ojs.string_to_js x2997)
    let (get_featureSettings : 'tags this -> string) =
      fun (x2999 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2999) "featureSettings")
    let (set_featureSettings : 'tags this -> string -> unit) =
      fun (x3001 : 'tags this) ->
        fun (x3002 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3001) "featureSettings"
            (Ojs.string_to_js x3002)
    let (get_lineGapOverride : 'tags this -> string) =
      fun (x3004 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3004) "lineGapOverride")
    let (set_lineGapOverride : 'tags this -> string -> unit) =
      fun (x3006 : 'tags this) ->
        fun (x3007 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3006) "lineGapOverride"
            (Ojs.string_to_js x3007)
    let (get_loaded : 'tags this -> t Promise.t_1) =
      fun (x3009 : 'tags this) ->
        Promise.t_1_of_js t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3009) "loaded")
    let (get_status : 'tags this -> FontFaceLoadStatus.t) =
      fun (x3012 : 'tags this) ->
        FontFaceLoadStatus.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3012) "status")
    let (get_stretch : 'tags this -> string) =
      fun (x3014 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3014) "stretch")
    let (set_stretch : 'tags this -> string -> unit) =
      fun (x3016 : 'tags this) ->
        fun (x3017 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3016) "stretch"
            (Ojs.string_to_js x3017)
    let (get_style : 'tags this -> string) =
      fun (x3019 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3019) "style")
    let (set_style : 'tags this -> string -> unit) =
      fun (x3021 : 'tags this) ->
        fun (x3022 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3021) "style"
            (Ojs.string_to_js x3022)
    let (get_unicodeRange : 'tags this -> string) =
      fun (x3024 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3024) "unicodeRange")
    let (set_unicodeRange : 'tags this -> string -> unit) =
      fun (x3026 : 'tags this) ->
        fun (x3027 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3026) "unicodeRange"
            (Ojs.string_to_js x3027)
    let (get_variant : 'tags this -> string) =
      fun (x3029 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3029) "variant")
    let (set_variant : 'tags this -> string -> unit) =
      fun (x3031 : 'tags this) ->
        fun (x3032 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3031) "variant"
            (Ojs.string_to_js x3032)
    let (get_variationSettings : 'tags this -> string) =
      fun (x3034 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3034)
             "variationSettings")
    let (set_variationSettings : 'tags this -> string -> unit) =
      fun (x3036 : 'tags this) ->
        fun (x3037 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3036) "variationSettings"
            (Ojs.string_to_js x3037)
    let (get_weight : 'tags this -> string) =
      fun (x3039 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3039) "weight")
    let (set_weight : 'tags this -> string -> unit) =
      fun (x3041 : 'tags this) ->
        fun (x3042 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3041) "weight"
            (Ojs.string_to_js x3042)
    let (load : 'tags this -> t Promise.t_1) =
      fun (x3044 : 'tags this) ->
        Promise.t_1_of_js t_of_js
          (Ojs.call (this_to_js Obj.magic x3044) "load" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FontFace")
             "prototype")
    let (create :
      family:string ->
        source:[ `U1 of string  | `U2 of BinaryData.t ] ->
          ?descriptors:FontFaceDescriptors.t -> unit -> t)
      =
      fun ~family:(x3047 : string) ->
        fun ~source:(x3048 : [ `U1 of string  | `U2 of BinaryData.t ]) ->
          fun ?descriptors:(x3049 : FontFaceDescriptors.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "FontFace")
                   (let x3050 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x3050 "push" [|(Ojs.string_to_js x3047)|]);
                    ignore
                      (Ojs.call x3050 "push"
                         [|((match x3048 with
                             | `U1 x3052 -> Ojs.string_to_js x3052
                             | `U2 x3053 -> BinaryData.t_to_js x3053))|]);
                    (match x3049 with
                     | Some x3051 ->
                         ignore
                           (Ojs.call x3050 "push"
                              [|(FontFaceDescriptors.t_to_js x3051)|])
                     | None -> ());
                    x3050))
  end
module FontFaceSet =
  struct
    type t = [ `EventTarget  | `FontFaceSet ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3055 : Ojs.t) -> t_of_js x3055
    and t_0_to_js : t_0 -> Ojs.t = fun (x3054 : t) -> t_to_js x3054
    type tags = [ `EventTarget  | `FontFaceSet ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFaceSet ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3058 : Ojs.t) -> intf_of_js __tags_of_js x3058
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3056 : __tags intf) -> intf_to_js __tags_to_js x3056
    let (get_onloading : 'tags this -> (this:t -> ev:Event.t -> any) option)
      =
      fun (x3060 : 'tags this) ->
        Ojs.option_of_js
          (fun (x3062 : Ojs.t) ->
             fun ~this:(x3063 : t) ->
               fun ~ev:(x3064 : Event.t) ->
                 any_of_js
                   (Ojs.apply x3062 [|(t_to_js x3063);(Event.t_to_js x3064)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3060) "onloading")
    let (set_onloading :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x3065 : 'tags this) ->
        fun (x3066 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3065) "onloading"
            (Ojs.option_to_js
               (fun (x3067 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x3068 : Ojs.t) ->
                       fun (x3069 : Ojs.t) ->
                         any_to_js
                           (x3067 ~this:(t_of_js x3068)
                              ~ev:(Event.t_of_js x3069)))) x3066)
    let (get_onloadingdone :
      'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x3071 : 'tags this) ->
        Ojs.option_of_js
          (fun (x3073 : Ojs.t) ->
             fun ~this:(x3074 : t) ->
               fun ~ev:(x3075 : Event.t) ->
                 any_of_js
                   (Ojs.apply x3073 [|(t_to_js x3074);(Event.t_to_js x3075)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3071) "onloadingdone")
    let (set_onloadingdone :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x3076 : 'tags this) ->
        fun (x3077 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3076) "onloadingdone"
            (Ojs.option_to_js
               (fun (x3078 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x3079 : Ojs.t) ->
                       fun (x3080 : Ojs.t) ->
                         any_to_js
                           (x3078 ~this:(t_of_js x3079)
                              ~ev:(Event.t_of_js x3080)))) x3077)
    let (get_onloadingerror :
      'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x3082 : 'tags this) ->
        Ojs.option_of_js
          (fun (x3084 : Ojs.t) ->
             fun ~this:(x3085 : t) ->
               fun ~ev:(x3086 : Event.t) ->
                 any_of_js
                   (Ojs.apply x3084 [|(t_to_js x3085);(Event.t_to_js x3086)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3082) "onloadingerror")
    let (set_onloadingerror :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x3087 : 'tags this) ->
        fun (x3088 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3087) "onloadingerror"
            (Ojs.option_to_js
               (fun (x3089 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x3090 : Ojs.t) ->
                       fun (x3091 : Ojs.t) ->
                         any_to_js
                           (x3089 ~this:(t_of_js x3090)
                              ~ev:(Event.t_of_js x3091)))) x3088)
    let (get_ready : 'tags this -> t Promise.t_1) =
      fun (x3093 : 'tags this) ->
        Promise.t_1_of_js t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3093) "ready")
    let (get_status : 'tags this -> FontFaceSetLoadStatus.t) =
      fun (x3096 : 'tags this) ->
        FontFaceSetLoadStatus.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3096) "status")
    let (check : 'tags this -> font:string -> ?text:string -> unit -> bool) =
      fun (x3102 : 'tags this) ->
        fun ~font:(x3098 : string) ->
          fun ?text:(x3099 : string option) ->
            fun () ->
              Ojs.bool_of_js
                (let x3104 = this_to_js Obj.magic x3102 in
                 Ojs.call (Ojs.get_prop_ascii x3104 "check") "apply"
                   [|x3104;((let x3100 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3100 "push"
                                  [|(Ojs.string_to_js x3098)|]);
                             (match x3099 with
                              | Some x3101 ->
                                  ignore
                                    (Ojs.call x3100 "push"
                                       [|(Ojs.string_to_js x3101)|])
                              | None -> ());
                             x3100))|])
    let (load :
      'tags this ->
        font:string -> ?text:string -> unit -> FontFace.t list Promise.t_1)
      =
      fun (x3109 : 'tags this) ->
        fun ~font:(x3105 : string) ->
          fun ?text:(x3106 : string option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x3112 : Ojs.t) -> Ojs.list_of_js FontFace.t_of_js x3112)
                (let x3111 = this_to_js Obj.magic x3109 in
                 Ojs.call (Ojs.get_prop_ascii x3111 "load") "apply"
                   [|x3111;((let x3107 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3107 "push"
                                  [|(Ojs.string_to_js x3105)|]);
                             (match x3106 with
                              | Some x3108 ->
                                  ignore
                                    (Ojs.call x3107 "push"
                                       [|(Ojs.string_to_js x3108)|])
                              | None -> ());
                             x3107))|])
    let (forEach :
      'tags this ->
        callbackfn:(value:FontFace.t -> key:FontFace.t -> parent:t -> unit)
          -> ?thisArg:any -> unit -> unit)
      =
      fun (x3121 : 'tags this) ->
        fun
          ~callbackfn:(x3114 :
                        value:FontFace.t ->
                          key:FontFace.t -> parent:t -> unit)
          ->
          fun ?thisArg:(x3115 : any option) ->
            fun () ->
              ignore
                (let x3123 = this_to_js Obj.magic x3121 in
                 Ojs.call (Ojs.get_prop_ascii x3123 "forEach") "apply"
                   [|x3123;((let x3116 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3116 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3118 : Ojs.t) ->
                                          fun (x3119 : Ojs.t) ->
                                            fun (x3120 : Ojs.t) ->
                                              x3114
                                                ~value:(FontFace.t_of_js
                                                          x3118)
                                                ~key:(FontFace.t_of_js x3119)
                                                ~parent:(t_of_js x3120)))|]);
                             (match x3115 with
                              | Some x3117 ->
                                  ignore
                                    (Ojs.call x3116 "push"
                                       [|(any_to_js x3117)|])
                              | None -> ());
                             x3116))|])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x3133 : 'tags this) ->
        fun ~type_:(x3124 : 'K) ->
          fun ~listener:(x3125 : this:t -> ev:any -> any) ->
            fun
              ?options:(x3126 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x3135 = this_to_js Obj.magic x3133 in
                   Ojs.call (Ojs.get_prop_ascii x3135 "addEventListener")
                     "apply"
                     [|x3135;((let x3127 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3127 "push" [|(Obj.magic x3124)|]);
                               ignore
                                 (Ojs.call x3127 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x3131 : Ojs.t) ->
                                            fun (x3132 : Ojs.t) ->
                                              any_to_js
                                                (x3125 ~this:(t_of_js x3131)
                                                   ~ev:(any_of_js x3132))))|]);
                               (match x3126 with
                                | Some x3128 ->
                                    ignore
                                      (Ojs.call x3127 "push"
                                         [|((match x3128 with
                                             | `U1 x3129 ->
                                                 Ojs.bool_to_js x3129
                                             | `U2 x3130 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x3130))|])
                                | None -> ());
                               x3127))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x3143 : 'tags this) ->
        fun ~type_:(x3136 : string) ->
          fun ~listener:(x3137 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x3138 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x3145 = this_to_js Obj.magic x3143 in
                   Ojs.call (Ojs.get_prop_ascii x3145 "addEventListener")
                     "apply"
                     [|x3145;((let x3139 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3139 "push"
                                    [|(Ojs.string_to_js x3136)|]);
                               ignore
                                 (Ojs.call x3139 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x3137)|]);
                               (match x3138 with
                                | Some x3140 ->
                                    ignore
                                      (Ojs.call x3139 "push"
                                         [|((match x3140 with
                                             | `U1 x3141 ->
                                                 Ojs.bool_to_js x3141
                                             | `U2 x3142 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x3142))|])
                                | None -> ());
                               x3139))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x3155 : 'tags this) ->
        fun ~type_:(x3146 : 'K) ->
          fun ~listener:(x3147 : this:t -> ev:any -> any) ->
            fun
              ?options:(x3148 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x3157 = this_to_js Obj.magic x3155 in
                   Ojs.call (Ojs.get_prop_ascii x3157 "removeEventListener")
                     "apply"
                     [|x3157;((let x3149 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3149 "push" [|(Obj.magic x3146)|]);
                               ignore
                                 (Ojs.call x3149 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x3153 : Ojs.t) ->
                                            fun (x3154 : Ojs.t) ->
                                              any_to_js
                                                (x3147 ~this:(t_of_js x3153)
                                                   ~ev:(any_of_js x3154))))|]);
                               (match x3148 with
                                | Some x3150 ->
                                    ignore
                                      (Ojs.call x3149 "push"
                                         [|((match x3150 with
                                             | `U1 x3151 ->
                                                 Ojs.bool_to_js x3151
                                             | `U2 x3152 ->
                                                 EventListenerOptions.t_to_js
                                                   x3152))|])
                                | None -> ());
                               x3149))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x3165 : 'tags this) ->
        fun ~type_:(x3158 : string) ->
          fun ~listener:(x3159 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x3160 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x3167 = this_to_js Obj.magic x3165 in
                   Ojs.call (Ojs.get_prop_ascii x3167 "removeEventListener")
                     "apply"
                     [|x3167;((let x3161 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3161 "push"
                                    [|(Ojs.string_to_js x3158)|]);
                               ignore
                                 (Ojs.call x3161 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x3159)|]);
                               (match x3160 with
                                | Some x3162 ->
                                    ignore
                                      (Ojs.call x3161 "push"
                                         [|((match x3162 with
                                             | `U1 x3163 ->
                                                 Ojs.bool_to_js x3163
                                             | `U2 x3164 ->
                                                 EventListenerOptions.t_to_js
                                                   x3164))|])
                                | None -> ());
                               x3161))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FontFaceSet")
             "prototype")
    let (create : FontFace.t list -> t) =
      fun (x3168 : FontFace.t list) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FontFaceSet")
             [|(Ojs.list_to_js FontFace.t_to_js x3168)|])
  end
module FontsStatic =
  struct
    let (onloading :
      unit -> (this:FontFaceSet.t -> ev:Event.t -> any) option) =
      fun () ->
        Ojs.option_of_js
          (fun (x3170 : Ojs.t) ->
             fun ~this:(x3171 : FontFaceSet.t) ->
               fun ~ev:(x3172 : Event.t) ->
                 any_of_js
                   (Ojs.apply x3170
                      [|(FontFaceSet.t_to_js x3171);(Event.t_to_js x3172)|]))
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts")
             "onloading")
    let (onloadingdone :
      unit -> (this:FontFaceSet.t -> ev:Event.t -> any) option) =
      fun () ->
        Ojs.option_of_js
          (fun (x3173 : Ojs.t) ->
             fun ~this:(x3174 : FontFaceSet.t) ->
               fun ~ev:(x3175 : Event.t) ->
                 any_of_js
                   (Ojs.apply x3173
                      [|(FontFaceSet.t_to_js x3174);(Event.t_to_js x3175)|]))
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts")
             "onloadingdone")
    let (onloadingerror :
      unit -> (this:FontFaceSet.t -> ev:Event.t -> any) option) =
      fun () ->
        Ojs.option_of_js
          (fun (x3176 : Ojs.t) ->
             fun ~this:(x3177 : FontFaceSet.t) ->
               fun ~ev:(x3178 : Event.t) ->
                 any_of_js
                   (Ojs.apply x3176
                      [|(FontFaceSet.t_to_js x3177);(Event.t_to_js x3178)|]))
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts")
             "onloadingerror")
    let (ready : unit -> FontFaceSet.t Promise.t_1) =
      fun () ->
        Promise.t_1_of_js FontFaceSet.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts") "ready")
    let (status : unit -> FontFaceSetLoadStatus.t) =
      fun () ->
        FontFaceSetLoadStatus.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts")
             "status")
    let (check : font:string -> ?text:string -> unit -> bool) =
      fun ~font:(x3180 : string) ->
        fun ?text:(x3181 : string option) ->
          fun () ->
            Ojs.bool_of_js
              (let x3184 = Ojs.get_prop_ascii Ojs.global "fonts" in
               Ojs.call (Ojs.get_prop_ascii x3184 "check") "apply"
                 [|x3184;((let x3182 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x3182 "push"
                                [|(Ojs.string_to_js x3180)|]);
                           (match x3181 with
                            | Some x3183 ->
                                ignore
                                  (Ojs.call x3182 "push"
                                     [|(Ojs.string_to_js x3183)|])
                            | None -> ());
                           x3182))|])
    let (load :
      font:string -> ?text:string -> unit -> FontFace.t list Promise.t_1) =
      fun ~font:(x3185 : string) ->
        fun ?text:(x3186 : string option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x3190 : Ojs.t) -> Ojs.list_of_js FontFace.t_of_js x3190)
              (let x3189 = Ojs.get_prop_ascii Ojs.global "fonts" in
               Ojs.call (Ojs.get_prop_ascii x3189 "load") "apply"
                 [|x3189;((let x3187 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x3187 "push"
                                [|(Ojs.string_to_js x3185)|]);
                           (match x3186 with
                            | Some x3188 ->
                                ignore
                                  (Ojs.call x3187 "push"
                                     [|(Ojs.string_to_js x3188)|])
                            | None -> ());
                           x3187))|])
    let (forEach :
      callbackfn:(value:FontFace.t ->
                    key:FontFace.t -> parent:FontFaceSet.t -> unit)
        -> ?thisArg:any -> unit -> unit)
      =
      fun
        ~callbackfn:(x3192 :
                      value:FontFace.t ->
                        key:FontFace.t -> parent:FontFaceSet.t -> unit)
        ->
        fun ?thisArg:(x3193 : any option) ->
          fun () ->
            ignore
              (let x3199 = Ojs.get_prop_ascii Ojs.global "fonts" in
               Ojs.call (Ojs.get_prop_ascii x3199 "forEach") "apply"
                 [|x3199;((let x3194 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x3194 "push"
                                [|(Ojs.fun_to_js 3
                                     (fun (x3196 : Ojs.t) ->
                                        fun (x3197 : Ojs.t) ->
                                          fun (x3198 : Ojs.t) ->
                                            x3192
                                              ~value:(FontFace.t_of_js x3196)
                                              ~key:(FontFace.t_of_js x3197)
                                              ~parent:(FontFaceSet.t_of_js
                                                         x3198)))|]);
                           (match x3193 with
                            | Some x3195 ->
                                ignore
                                  (Ojs.call x3194 "push"
                                     [|(any_to_js x3195)|])
                            | None -> ());
                           x3194))|])
    let (addEventListener :
      type_:'K ->
        listener:(this:FontFaceSet.t -> ev:any -> any) ->
          ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
            unit -> unit)
      =
      fun ~type_:(x3200 : 'K) ->
        fun ~listener:(x3201 : this:FontFaceSet.t -> ev:any -> any) ->
          fun
            ?options:(x3202 :
                       [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                         option)
            ->
            fun () ->
              ignore
                (let x3209 = Ojs.get_prop_ascii Ojs.global "fonts" in
                 Ojs.call (Ojs.get_prop_ascii x3209 "addEventListener")
                   "apply"
                   [|x3209;((let x3203 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3203 "push" [|(Obj.magic x3200)|]);
                             ignore
                               (Ojs.call x3203 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x3207 : Ojs.t) ->
                                          fun (x3208 : Ojs.t) ->
                                            any_to_js
                                              (x3201
                                                 ~this:(FontFaceSet.t_of_js
                                                          x3207)
                                                 ~ev:(any_of_js x3208))))|]);
                             (match x3202 with
                              | Some x3204 ->
                                  ignore
                                    (Ojs.call x3203 "push"
                                       [|((match x3204 with
                                           | `U1 x3205 ->
                                               Ojs.bool_to_js x3205
                                           | `U2 x3206 ->
                                               AddEventListenerOptions.t_to_js
                                                 x3206))|])
                              | None -> ());
                             x3203))|])
    let (addEventListener' :
      type_:string ->
        listener:EventListenerOrEventListenerObject.t ->
          ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
            unit -> unit)
      =
      fun ~type_:(x3210 : string) ->
        fun ~listener:(x3211 : EventListenerOrEventListenerObject.t) ->
          fun
            ?options:(x3212 :
                       [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                         option)
            ->
            fun () ->
              ignore
                (let x3217 = Ojs.get_prop_ascii Ojs.global "fonts" in
                 Ojs.call (Ojs.get_prop_ascii x3217 "addEventListener")
                   "apply"
                   [|x3217;((let x3213 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3213 "push"
                                  [|(Ojs.string_to_js x3210)|]);
                             ignore
                               (Ojs.call x3213 "push"
                                  [|(EventListenerOrEventListenerObject.t_to_js
                                       x3211)|]);
                             (match x3212 with
                              | Some x3214 ->
                                  ignore
                                    (Ojs.call x3213 "push"
                                       [|((match x3214 with
                                           | `U1 x3215 ->
                                               Ojs.bool_to_js x3215
                                           | `U2 x3216 ->
                                               AddEventListenerOptions.t_to_js
                                                 x3216))|])
                              | None -> ());
                             x3213))|])
    let (removeEventListener :
      type_:'K ->
        listener:(this:FontFaceSet.t -> ev:any -> any) ->
          ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
            unit -> unit)
      =
      fun ~type_:(x3218 : 'K) ->
        fun ~listener:(x3219 : this:FontFaceSet.t -> ev:any -> any) ->
          fun
            ?options:(x3220 :
                       [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                         option)
            ->
            fun () ->
              ignore
                (let x3227 = Ojs.get_prop_ascii Ojs.global "fonts" in
                 Ojs.call (Ojs.get_prop_ascii x3227 "removeEventListener")
                   "apply"
                   [|x3227;((let x3221 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3221 "push" [|(Obj.magic x3218)|]);
                             ignore
                               (Ojs.call x3221 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x3225 : Ojs.t) ->
                                          fun (x3226 : Ojs.t) ->
                                            any_to_js
                                              (x3219
                                                 ~this:(FontFaceSet.t_of_js
                                                          x3225)
                                                 ~ev:(any_of_js x3226))))|]);
                             (match x3220 with
                              | Some x3222 ->
                                  ignore
                                    (Ojs.call x3221 "push"
                                       [|((match x3222 with
                                           | `U1 x3223 ->
                                               Ojs.bool_to_js x3223
                                           | `U2 x3224 ->
                                               EventListenerOptions.t_to_js
                                                 x3224))|])
                              | None -> ());
                             x3221))|])
    let (removeEventListener' :
      type_:string ->
        listener:EventListenerOrEventListenerObject.t ->
          ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
            unit -> unit)
      =
      fun ~type_:(x3228 : string) ->
        fun ~listener:(x3229 : EventListenerOrEventListenerObject.t) ->
          fun
            ?options:(x3230 :
                       [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                         option)
            ->
            fun () ->
              ignore
                (let x3235 = Ojs.get_prop_ascii Ojs.global "fonts" in
                 Ojs.call (Ojs.get_prop_ascii x3235 "removeEventListener")
                   "apply"
                   [|x3235;((let x3231 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3231 "push"
                                  [|(Ojs.string_to_js x3228)|]);
                             ignore
                               (Ojs.call x3231 "push"
                                  [|(EventListenerOrEventListenerObject.t_to_js
                                       x3229)|]);
                             (match x3230 with
                              | Some x3232 ->
                                  ignore
                                    (Ojs.call x3231 "push"
                                       [|((match x3232 with
                                           | `U1 x3233 ->
                                               Ojs.bool_to_js x3233
                                           | `U2 x3234 ->
                                               EventListenerOptions.t_to_js
                                                 x3234))|])
                              | None -> ());
                             x3231))|])
  end
module Algorithm =
  struct
    type t = [ `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3237 : Ojs.t) -> t_of_js x3237
    and t_0_to_js : t_0 -> Ojs.t = fun (x3236 : t) -> t_to_js x3236
    type tags = [ `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Algorithm ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3240 : Ojs.t) -> intf_of_js __tags_of_js x3240
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3238 : __tags intf) -> intf_to_js __tags_to_js x3238
    let (get_name : 'tags this -> string) =
      fun (x3242 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3242) "name")
    let (set_name : 'tags this -> string -> unit) =
      fun (x3244 : 'tags this) ->
        fun (x3245 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3244) "name"
            (Ojs.string_to_js x3245)
    let (create : name:string -> unit -> t) =
      fun ~name:(x3247 : string) ->
        fun () ->
          let x3248 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3248 "name" (Ojs.string_to_js x3247);
          t_of_js x3248
    let cast_from = Obj.magic
  end
module RsaPssParams =
  struct
    type t = [ `Algorithm  | `RsaPssParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3250 : Ojs.t) -> t_of_js x3250
    and t_0_to_js : t_0 -> Ojs.t = fun (x3249 : t) -> t_to_js x3249
    type tags = [ `Algorithm  | `RsaPssParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RsaPssParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3253 : Ojs.t) -> intf_of_js __tags_of_js x3253
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3251 : __tags intf) -> intf_to_js __tags_to_js x3251
    let (get_saltLength : 'tags this -> float) =
      fun (x3255 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3255) "saltLength")
    let (set_saltLength : 'tags this -> float -> unit) =
      fun (x3257 : 'tags this) ->
        fun (x3258 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3257) "saltLength"
            (Ojs.float_to_js x3258)
    let (create : saltLength:float -> unit -> t) =
      fun ~saltLength:(x3260 : float) ->
        fun () ->
          let x3261 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3261 "saltLength" (Ojs.float_to_js x3260);
          t_of_js x3261
    let cast_from = Obj.magic
  end
module RsaOaepParams =
  struct
    type t = [ `Algorithm  | `RsaOaepParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3263 : Ojs.t) -> t_of_js x3263
    and t_0_to_js : t_0 -> Ojs.t = fun (x3262 : t) -> t_to_js x3262
    type tags = [ `Algorithm  | `RsaOaepParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RsaOaepParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3266 : Ojs.t) -> intf_of_js __tags_of_js x3266
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3264 : __tags intf) -> intf_to_js __tags_to_js x3264
    let (get_label : 'tags this -> BufferSource.t option) =
      fun (x3268 : 'tags this) ->
        Ojs.option_of_js BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3268) "label")
    let (set_label : 'tags this -> BufferSource.t -> unit) =
      fun (x3271 : 'tags this) ->
        fun (x3272 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3271) "label"
            (BufferSource.t_to_js x3272)
    let (create : ?label:BufferSource.t -> unit -> t) =
      fun ?label:(x3274 : BufferSource.t option) ->
        fun () ->
          let x3275 = Ojs.empty_obj () in
          (match x3274 with
           | Some x3276 ->
               Ojs.set_prop_ascii x3275 "label" (BufferSource.t_to_js x3276)
           | None -> ());
          t_of_js x3275
    let cast_from = Obj.magic
  end
module BigInteger =
  struct
    type t = Uint8Array.t_0
    let rec t_of_js : Ojs.t -> t =
      fun (x3278 : Ojs.t) -> Uint8Array.t_0_of_js x3278
    and t_to_js : t -> Ojs.t =
      fun (x3277 : Uint8Array.t_0) -> Uint8Array.t_0_to_js x3277
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3280 : Ojs.t) -> t_of_js x3280
    and t_0_to_js : t_0 -> Ojs.t = fun (x3279 : t) -> t_to_js x3279
  end
module RsaKeyGenParams =
  struct
    type t = [ `Algorithm  | `RsaKeyGenParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3282 : Ojs.t) -> t_of_js x3282
    and t_0_to_js : t_0 -> Ojs.t = fun (x3281 : t) -> t_to_js x3281
    type tags = [ `Algorithm  | `RsaKeyGenParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RsaKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3285 : Ojs.t) -> intf_of_js __tags_of_js x3285
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3283 : __tags intf) -> intf_to_js __tags_to_js x3283
    let (get_modulusLength : 'tags this -> float) =
      fun (x3287 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3287) "modulusLength")
    let (set_modulusLength : 'tags this -> float -> unit) =
      fun (x3289 : 'tags this) ->
        fun (x3290 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3289) "modulusLength"
            (Ojs.float_to_js x3290)
    let (get_publicExponent : 'tags this -> BigInteger.t) =
      fun (x3292 : 'tags this) ->
        BigInteger.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3292) "publicExponent")
    let (set_publicExponent : 'tags this -> BigInteger.t -> unit) =
      fun (x3294 : 'tags this) ->
        fun (x3295 : BigInteger.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3294) "publicExponent"
            (BigInteger.t_to_js x3295)
    let (create :
      modulusLength:float -> publicExponent:BigInteger.t -> unit -> t) =
      fun ~modulusLength:(x3297 : float) ->
        fun ~publicExponent:(x3298 : BigInteger.t) ->
          fun () ->
            let x3299 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x3299 "modulusLength" (Ojs.float_to_js x3297);
            Ojs.set_prop_ascii x3299 "publicExponent"
              (BigInteger.t_to_js x3298);
            t_of_js x3299
    let cast_from = Obj.magic
  end
module AlgorithmIdentifier =
  struct
    type t = [ `String of string  | `Other of Algorithm.t ] Primitive.t
    let rec t_of_js : Ojs.t -> t =
      fun (x3304 : Ojs.t) ->
        Primitive.t_of_js
          (fun (x3305 : Ojs.t) ->
             let x3306 = x3305 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x3306 "dummy") with
             | "String" -> `String (Ojs.string_of_js x3306)
             | "Other" -> `Other (Algorithm.t_of_js x3306)
             | _ -> assert false) x3304
    and t_to_js : t -> Ojs.t =
      fun
        (x3300 : [ `String of string  | `Other of Algorithm.t ] Primitive.t)
        ->
        Primitive.t_to_js
          (fun (x3301 : [ `String of string  | `Other of Algorithm.t ]) ->
             match x3301 with
             | `String x3302 -> Ojs.string_to_js x3302
             | `Other x3303 -> Algorithm.t_to_js x3303) x3300
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3308 : Ojs.t) -> t_of_js x3308
    and t_0_to_js : t_0 -> Ojs.t = fun (x3307 : t) -> t_to_js x3307
  end
module HashAlgorithmIdentifier =
  struct
    type t = AlgorithmIdentifier.t
    let rec t_of_js : Ojs.t -> t =
      fun (x3310 : Ojs.t) -> AlgorithmIdentifier.t_of_js x3310
    and t_to_js : t -> Ojs.t =
      fun (x3309 : AlgorithmIdentifier.t) ->
        AlgorithmIdentifier.t_to_js x3309
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3312 : Ojs.t) -> t_of_js x3312
    and t_0_to_js : t_0 -> Ojs.t = fun (x3311 : t) -> t_to_js x3311
  end
module RsaHashedKeyGenParams =
  struct
    type t =
      [ `Algorithm  | `RsaHashedKeyGenParams  | `RsaKeyGenParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3314 : Ojs.t) -> t_of_js x3314
    and t_0_to_js : t_0 -> Ojs.t = fun (x3313 : t) -> t_to_js x3313
    type tags = [ `Algorithm  | `RsaHashedKeyGenParams  | `RsaKeyGenParams ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `RsaHashedKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3317 : Ojs.t) -> intf_of_js __tags_of_js x3317
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3315 : __tags intf) -> intf_to_js __tags_to_js x3315
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x3319 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3319) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x3321 : 'tags this) ->
        fun (x3322 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3321) "hash"
            (HashAlgorithmIdentifier.t_to_js x3322)
    let (create : hash:HashAlgorithmIdentifier.t -> unit -> t) =
      fun ~hash:(x3324 : HashAlgorithmIdentifier.t) ->
        fun () ->
          let x3325 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3325 "hash"
            (HashAlgorithmIdentifier.t_to_js x3324);
          t_of_js x3325
    let cast_from = Obj.magic
  end
module RsaHashedImportParams =
  struct
    type t = [ `Algorithm  | `RsaHashedImportParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3327 : Ojs.t) -> t_of_js x3327
    and t_0_to_js : t_0 -> Ojs.t = fun (x3326 : t) -> t_to_js x3326
    type tags = [ `Algorithm  | `RsaHashedImportParams ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `RsaHashedImportParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3330 : Ojs.t) -> intf_of_js __tags_of_js x3330
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3328 : __tags intf) -> intf_to_js __tags_to_js x3328
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x3332 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3332) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x3334 : 'tags this) ->
        fun (x3335 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3334) "hash"
            (HashAlgorithmIdentifier.t_to_js x3335)
    let (create : hash:HashAlgorithmIdentifier.t -> unit -> t) =
      fun ~hash:(x3337 : HashAlgorithmIdentifier.t) ->
        fun () ->
          let x3338 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3338 "hash"
            (HashAlgorithmIdentifier.t_to_js x3337);
          t_of_js x3338
    let cast_from = Obj.magic
  end
module Pbkdf2Params =
  struct
    type t = [ `Algorithm  | `Pbkdf2Params ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3340 : Ojs.t) -> t_of_js x3340
    and t_0_to_js : t_0 -> Ojs.t = fun (x3339 : t) -> t_to_js x3339
    type tags = [ `Algorithm  | `Pbkdf2Params ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Pbkdf2Params ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3343 : Ojs.t) -> intf_of_js __tags_of_js x3343
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3341 : __tags intf) -> intf_to_js __tags_to_js x3341
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x3345 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3345) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x3347 : 'tags this) ->
        fun (x3348 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3347) "hash"
            (HashAlgorithmIdentifier.t_to_js x3348)
    let (get_iterations : 'tags this -> float) =
      fun (x3350 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3350) "iterations")
    let (set_iterations : 'tags this -> float -> unit) =
      fun (x3352 : 'tags this) ->
        fun (x3353 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3352) "iterations"
            (Ojs.float_to_js x3353)
    let (get_salt : 'tags this -> BufferSource.t) =
      fun (x3355 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3355) "salt")
    let (set_salt : 'tags this -> BufferSource.t -> unit) =
      fun (x3357 : 'tags this) ->
        fun (x3358 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3357) "salt"
            (BufferSource.t_to_js x3358)
    let (create :
      hash:HashAlgorithmIdentifier.t ->
        iterations:float -> salt:BufferSource.t -> unit -> t)
      =
      fun ~hash:(x3360 : HashAlgorithmIdentifier.t) ->
        fun ~iterations:(x3361 : float) ->
          fun ~salt:(x3362 : BufferSource.t) ->
            fun () ->
              let x3363 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x3363 "hash"
                (HashAlgorithmIdentifier.t_to_js x3360);
              Ojs.set_prop_ascii x3363 "iterations" (Ojs.float_to_js x3361);
              Ojs.set_prop_ascii x3363 "salt" (BufferSource.t_to_js x3362);
              t_of_js x3363
    let cast_from = Obj.magic
  end
module KeyFormat =
  struct
    type t = [ `L_s152_pkcs8  | `L_s162_raw  | `L_s186_spki  | `L_s99_jwk ]
    let rec t_of_js : Ojs.t -> t =
      fun (x3365 : Ojs.t) ->
        let x3366 = x3365 in
        match Ojs.string_of_js x3366 with
        | "pkcs8" -> `L_s152_pkcs8
        | "raw" -> `L_s162_raw
        | "spki" -> `L_s186_spki
        | "jwk" -> `L_s99_jwk
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x3364 :
          [ `L_s152_pkcs8  | `L_s162_raw  | `L_s186_spki  | `L_s99_jwk ])
        ->
        match x3364 with
        | `L_s152_pkcs8 -> Ojs.string_to_js "pkcs8"
        | `L_s162_raw -> Ojs.string_to_js "raw"
        | `L_s186_spki -> Ojs.string_to_js "spki"
        | `L_s99_jwk -> Ojs.string_to_js "jwk"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3368 : Ojs.t) -> t_of_js x3368
    and t_0_to_js : t_0 -> Ojs.t = fun (x3367 : t) -> t_to_js x3367
  end
module RsaOtherPrimesInfo =
  struct
    type t = [ `RsaOtherPrimesInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3370 : Ojs.t) -> t_of_js x3370
    and t_0_to_js : t_0 -> Ojs.t = fun (x3369 : t) -> t_to_js x3369
    type tags = [ `RsaOtherPrimesInfo ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RsaOtherPrimesInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3373 : Ojs.t) -> intf_of_js __tags_of_js x3373
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3371 : __tags intf) -> intf_to_js __tags_to_js x3371
    let (get_d : 'tags this -> string option) =
      fun (x3375 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3375) "d")
    let (set_d : 'tags this -> string -> unit) =
      fun (x3378 : 'tags this) ->
        fun (x3379 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3378) "d"
            (Ojs.string_to_js x3379)
    let (get_r : 'tags this -> string option) =
      fun (x3381 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3381) "r")
    let (set_r : 'tags this -> string -> unit) =
      fun (x3384 : 'tags this) ->
        fun (x3385 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3384) "r"
            (Ojs.string_to_js x3385)
    let (get_t : 'tags this -> string option) =
      fun (x3387 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3387) "t")
    let (set_t : 'tags this -> string -> unit) =
      fun (x3390 : 'tags this) ->
        fun (x3391 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3390) "t"
            (Ojs.string_to_js x3391)
    let (create : ?d:string -> ?r:string -> ?t:string -> unit -> t) =
      fun ?d:(x3393 : string option) ->
        fun ?r:(x3394 : string option) ->
          fun ?t:(x3395 : string option) ->
            fun () ->
              let x3396 = Ojs.empty_obj () in
              (match x3393 with
               | Some x3399 ->
                   Ojs.set_prop_ascii x3396 "d" (Ojs.string_to_js x3399)
               | None -> ());
              (match x3394 with
               | Some x3398 ->
                   Ojs.set_prop_ascii x3396 "r" (Ojs.string_to_js x3398)
               | None -> ());
              (match x3395 with
               | Some x3397 ->
                   Ojs.set_prop_ascii x3396 "t" (Ojs.string_to_js x3397)
               | None -> ());
              t_of_js x3396
    let cast_from = Obj.magic
  end
module JsonWebKey =
  struct
    type t = [ `JsonWebKey ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3401 : Ojs.t) -> t_of_js x3401
    and t_0_to_js : t_0 -> Ojs.t = fun (x3400 : t) -> t_to_js x3400
    type tags = [ `JsonWebKey ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `JsonWebKey ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3404 : Ojs.t) -> intf_of_js __tags_of_js x3404
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3402 : __tags intf) -> intf_to_js __tags_to_js x3402
    let (get_alg : 'tags this -> string option) =
      fun (x3406 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3406) "alg")
    let (set_alg : 'tags this -> string -> unit) =
      fun (x3409 : 'tags this) ->
        fun (x3410 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3409) "alg"
            (Ojs.string_to_js x3410)
    let (get_crv : 'tags this -> string option) =
      fun (x3412 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3412) "crv")
    let (set_crv : 'tags this -> string -> unit) =
      fun (x3415 : 'tags this) ->
        fun (x3416 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3415) "crv"
            (Ojs.string_to_js x3416)
    let (get_d : 'tags this -> string option) =
      fun (x3418 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3418) "d")
    let (set_d : 'tags this -> string -> unit) =
      fun (x3421 : 'tags this) ->
        fun (x3422 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3421) "d"
            (Ojs.string_to_js x3422)
    let (get_dp : 'tags this -> string option) =
      fun (x3424 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3424) "dp")
    let (set_dp : 'tags this -> string -> unit) =
      fun (x3427 : 'tags this) ->
        fun (x3428 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3427) "dp"
            (Ojs.string_to_js x3428)
    let (get_dq : 'tags this -> string option) =
      fun (x3430 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3430) "dq")
    let (set_dq : 'tags this -> string -> unit) =
      fun (x3433 : 'tags this) ->
        fun (x3434 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3433) "dq"
            (Ojs.string_to_js x3434)
    let (get_e : 'tags this -> string option) =
      fun (x3436 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3436) "e")
    let (set_e : 'tags this -> string -> unit) =
      fun (x3439 : 'tags this) ->
        fun (x3440 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3439) "e"
            (Ojs.string_to_js x3440)
    let (get_ext : 'tags this -> bool option) =
      fun (x3442 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3442) "ext")
    let (set_ext : 'tags this -> bool -> unit) =
      fun (x3445 : 'tags this) ->
        fun (x3446 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3445) "ext"
            (Ojs.bool_to_js x3446)
    let (get_k : 'tags this -> string option) =
      fun (x3448 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3448) "k")
    let (set_k : 'tags this -> string -> unit) =
      fun (x3451 : 'tags this) ->
        fun (x3452 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3451) "k"
            (Ojs.string_to_js x3452)
    let (get_key_ops : 'tags this -> string list option) =
      fun (x3454 : 'tags this) ->
        Ojs.option_of_js
          (fun (x3456 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x3456)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3454) "key_ops")
    let (set_key_ops : 'tags this -> string list -> unit) =
      fun (x3458 : 'tags this) ->
        fun (x3459 : string list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3458) "key_ops"
            (Ojs.list_to_js Ojs.string_to_js x3459)
    let (get_kty : 'tags this -> string option) =
      fun (x3462 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3462) "kty")
    let (set_kty : 'tags this -> string -> unit) =
      fun (x3465 : 'tags this) ->
        fun (x3466 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3465) "kty"
            (Ojs.string_to_js x3466)
    let (get_n : 'tags this -> string option) =
      fun (x3468 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3468) "n")
    let (set_n : 'tags this -> string -> unit) =
      fun (x3471 : 'tags this) ->
        fun (x3472 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3471) "n"
            (Ojs.string_to_js x3472)
    let (get_oth : 'tags this -> RsaOtherPrimesInfo.t list option) =
      fun (x3474 : 'tags this) ->
        Ojs.option_of_js
          (fun (x3476 : Ojs.t) ->
             Ojs.list_of_js RsaOtherPrimesInfo.t_of_js x3476)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3474) "oth")
    let (set_oth : 'tags this -> RsaOtherPrimesInfo.t list -> unit) =
      fun (x3478 : 'tags this) ->
        fun (x3479 : RsaOtherPrimesInfo.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3478) "oth"
            (Ojs.list_to_js RsaOtherPrimesInfo.t_to_js x3479)
    let (get_p : 'tags this -> string option) =
      fun (x3482 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3482) "p")
    let (set_p : 'tags this -> string -> unit) =
      fun (x3485 : 'tags this) ->
        fun (x3486 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3485) "p"
            (Ojs.string_to_js x3486)
    let (get_q : 'tags this -> string option) =
      fun (x3488 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3488) "q")
    let (set_q : 'tags this -> string -> unit) =
      fun (x3491 : 'tags this) ->
        fun (x3492 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3491) "q"
            (Ojs.string_to_js x3492)
    let (get_qi : 'tags this -> string option) =
      fun (x3494 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3494) "qi")
    let (set_qi : 'tags this -> string -> unit) =
      fun (x3497 : 'tags this) ->
        fun (x3498 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3497) "qi"
            (Ojs.string_to_js x3498)
    let (get_use : 'tags this -> string option) =
      fun (x3500 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3500) "use")
    let (set_use : 'tags this -> string -> unit) =
      fun (x3503 : 'tags this) ->
        fun (x3504 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3503) "use"
            (Ojs.string_to_js x3504)
    let (get_x : 'tags this -> string option) =
      fun (x3506 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3506) "x")
    let (set_x : 'tags this -> string -> unit) =
      fun (x3509 : 'tags this) ->
        fun (x3510 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3509) "x"
            (Ojs.string_to_js x3510)
    let (get_y : 'tags this -> string option) =
      fun (x3512 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3512) "y")
    let (set_y : 'tags this -> string -> unit) =
      fun (x3515 : 'tags this) ->
        fun (x3516 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3515) "y"
            (Ojs.string_to_js x3516)
    let (create :
      ?alg:string ->
        ?crv:string ->
          ?d:string ->
            ?dp:string ->
              ?dq:string ->
                ?e:string ->
                  ?ext:bool ->
                    ?k:string ->
                      ?key_ops:string list ->
                        ?kty:string ->
                          ?n:string ->
                            ?oth:RsaOtherPrimesInfo.t list ->
                              ?p:string ->
                                ?q:string ->
                                  ?qi:string ->
                                    ?use:string ->
                                      ?x:string -> ?y:string -> unit -> t)
      =
      fun ?alg:(x3518 : string option) ->
        fun ?crv:(x3519 : string option) ->
          fun ?d:(x3520 : string option) ->
            fun ?dp:(x3521 : string option) ->
              fun ?dq:(x3522 : string option) ->
                fun ?e:(x3523 : string option) ->
                  fun ?ext:(x3524 : bool option) ->
                    fun ?k:(x3525 : string option) ->
                      fun ?key_ops:(x3526 : string list option) ->
                        fun ?kty:(x3527 : string option) ->
                          fun ?n:(x3528 : string option) ->
                            fun
                              ?oth:(x3529 : RsaOtherPrimesInfo.t list option)
                              ->
                              fun ?p:(x3530 : string option) ->
                                fun ?q:(x3531 : string option) ->
                                  fun ?qi:(x3532 : string option) ->
                                    fun ?use:(x3533 : string option) ->
                                      fun ?x:(x3534 : string option) ->
                                        fun ?y:(x3535 : string option) ->
                                          fun () ->
                                            let x3536 = Ojs.empty_obj () in
                                            (match x3518 with
                                             | Some x3556 ->
                                                 Ojs.set_prop_ascii x3536
                                                   "alg"
                                                   (Ojs.string_to_js x3556)
                                             | None -> ());
                                            (match x3519 with
                                             | Some x3555 ->
                                                 Ojs.set_prop_ascii x3536
                                                   "crv"
                                                   (Ojs.string_to_js x3555)
                                             | None -> ());
                                            (match x3520 with
                                             | Some x3554 ->
                                                 Ojs.set_prop_ascii x3536 "d"
                                                   (Ojs.string_to_js x3554)
                                             | None -> ());
                                            (match x3521 with
                                             | Some x3553 ->
                                                 Ojs.set_prop_ascii x3536
                                                   "dp"
                                                   (Ojs.string_to_js x3553)
                                             | None -> ());
                                            (match x3522 with
                                             | Some x3552 ->
                                                 Ojs.set_prop_ascii x3536
                                                   "dq"
                                                   (Ojs.string_to_js x3552)
                                             | None -> ());
                                            (match x3523 with
                                             | Some x3551 ->
                                                 Ojs.set_prop_ascii x3536 "e"
                                                   (Ojs.string_to_js x3551)
                                             | None -> ());
                                            (match x3524 with
                                             | Some x3550 ->
                                                 Ojs.set_prop_ascii x3536
                                                   "ext"
                                                   (Ojs.bool_to_js x3550)
                                             | None -> ());
                                            (match x3525 with
                                             | Some x3549 ->
                                                 Ojs.set_prop_ascii x3536 "k"
                                                   (Ojs.string_to_js x3549)
                                             | None -> ());
                                            (match x3526 with
                                             | Some x3547 ->
                                                 Ojs.set_prop_ascii x3536
                                                   "keyOps"
                                                   (Ojs.list_to_js
                                                      Ojs.string_to_js x3547)
                                             | None -> ());
                                            (match x3527 with
                                             | Some x3546 ->
                                                 Ojs.set_prop_ascii x3536
                                                   "kty"
                                                   (Ojs.string_to_js x3546)
                                             | None -> ());
                                            (match x3528 with
                                             | Some x3545 ->
                                                 Ojs.set_prop_ascii x3536 "n"
                                                   (Ojs.string_to_js x3545)
                                             | None -> ());
                                            (match x3529 with
                                             | Some x3543 ->
                                                 Ojs.set_prop_ascii x3536
                                                   "oth"
                                                   (Ojs.list_to_js
                                                      RsaOtherPrimesInfo.t_to_js
                                                      x3543)
                                             | None -> ());
                                            (match x3530 with
                                             | Some x3542 ->
                                                 Ojs.set_prop_ascii x3536 "p"
                                                   (Ojs.string_to_js x3542)
                                             | None -> ());
                                            (match x3531 with
                                             | Some x3541 ->
                                                 Ojs.set_prop_ascii x3536 "q"
                                                   (Ojs.string_to_js x3541)
                                             | None -> ());
                                            (match x3532 with
                                             | Some x3540 ->
                                                 Ojs.set_prop_ascii x3536
                                                   "qi"
                                                   (Ojs.string_to_js x3540)
                                             | None -> ());
                                            (match x3533 with
                                             | Some x3539 ->
                                                 Ojs.set_prop_ascii x3536
                                                   "use"
                                                   (Ojs.string_to_js x3539)
                                             | None -> ());
                                            (match x3534 with
                                             | Some x3538 ->
                                                 Ojs.set_prop_ascii x3536 "x"
                                                   (Ojs.string_to_js x3538)
                                             | None -> ());
                                            (match x3535 with
                                             | Some x3537 ->
                                                 Ojs.set_prop_ascii x3536 "y"
                                                   (Ojs.string_to_js x3537)
                                             | None -> ());
                                            t_of_js x3536
    let cast_from = Obj.magic
  end
module HmacKeyGenParams =
  struct
    type t = [ `Algorithm  | `HmacKeyGenParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3558 : Ojs.t) -> t_of_js x3558
    and t_0_to_js : t_0 -> Ojs.t = fun (x3557 : t) -> t_to_js x3557
    type tags = [ `Algorithm  | `HmacKeyGenParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `HmacKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3561 : Ojs.t) -> intf_of_js __tags_of_js x3561
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3559 : __tags intf) -> intf_to_js __tags_to_js x3559
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x3563 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3563) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x3565 : 'tags this) ->
        fun (x3566 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3565) "hash"
            (HashAlgorithmIdentifier.t_to_js x3566)
    let (get_length : 'tags this -> float option) =
      fun (x3568 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3568) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x3571 : 'tags this) ->
        fun (x3572 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3571) "length"
            (Ojs.float_to_js x3572)
    let (create :
      hash:HashAlgorithmIdentifier.t -> ?length:float -> unit -> t) =
      fun ~hash:(x3574 : HashAlgorithmIdentifier.t) ->
        fun ?length:(x3575 : float option) ->
          fun () ->
            let x3576 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x3576 "hash"
              (HashAlgorithmIdentifier.t_to_js x3574);
            (match x3575 with
             | Some x3577 ->
                 Ojs.set_prop_ascii x3576 "length" (Ojs.float_to_js x3577)
             | None -> ());
            t_of_js x3576
    let cast_from = Obj.magic
  end
module HmacImportParams =
  struct
    type t = [ `Algorithm  | `HmacImportParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3579 : Ojs.t) -> t_of_js x3579
    and t_0_to_js : t_0 -> Ojs.t = fun (x3578 : t) -> t_to_js x3578
    type tags = [ `Algorithm  | `HmacImportParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `HmacImportParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3582 : Ojs.t) -> intf_of_js __tags_of_js x3582
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3580 : __tags intf) -> intf_to_js __tags_to_js x3580
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x3584 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3584) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x3586 : 'tags this) ->
        fun (x3587 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3586) "hash"
            (HashAlgorithmIdentifier.t_to_js x3587)
    let (get_length : 'tags this -> float option) =
      fun (x3589 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3589) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x3592 : 'tags this) ->
        fun (x3593 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3592) "length"
            (Ojs.float_to_js x3593)
    let (create :
      hash:HashAlgorithmIdentifier.t -> ?length:float -> unit -> t) =
      fun ~hash:(x3595 : HashAlgorithmIdentifier.t) ->
        fun ?length:(x3596 : float option) ->
          fun () ->
            let x3597 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x3597 "hash"
              (HashAlgorithmIdentifier.t_to_js x3595);
            (match x3596 with
             | Some x3598 ->
                 Ojs.set_prop_ascii x3597 "length" (Ojs.float_to_js x3598)
             | None -> ());
            t_of_js x3597
    let cast_from = Obj.magic
  end
module HkdfParams =
  struct
    type t = [ `Algorithm  | `HkdfParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3600 : Ojs.t) -> t_of_js x3600
    and t_0_to_js : t_0 -> Ojs.t = fun (x3599 : t) -> t_to_js x3599
    type tags = [ `Algorithm  | `HkdfParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `HkdfParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3603 : Ojs.t) -> intf_of_js __tags_of_js x3603
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3601 : __tags intf) -> intf_to_js __tags_to_js x3601
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x3605 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3605) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x3607 : 'tags this) ->
        fun (x3608 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3607) "hash"
            (HashAlgorithmIdentifier.t_to_js x3608)
    let (get_info : 'tags this -> BufferSource.t) =
      fun (x3610 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3610) "info")
    let (set_info : 'tags this -> BufferSource.t -> unit) =
      fun (x3612 : 'tags this) ->
        fun (x3613 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3612) "info"
            (BufferSource.t_to_js x3613)
    let (get_salt : 'tags this -> BufferSource.t) =
      fun (x3615 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3615) "salt")
    let (set_salt : 'tags this -> BufferSource.t -> unit) =
      fun (x3617 : 'tags this) ->
        fun (x3618 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3617) "salt"
            (BufferSource.t_to_js x3618)
    let (create :
      hash:HashAlgorithmIdentifier.t ->
        info:BufferSource.t -> salt:BufferSource.t -> unit -> t)
      =
      fun ~hash:(x3620 : HashAlgorithmIdentifier.t) ->
        fun ~info:(x3621 : BufferSource.t) ->
          fun ~salt:(x3622 : BufferSource.t) ->
            fun () ->
              let x3623 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x3623 "hash"
                (HashAlgorithmIdentifier.t_to_js x3620);
              Ojs.set_prop_ascii x3623 "info" (BufferSource.t_to_js x3621);
              Ojs.set_prop_ascii x3623 "salt" (BufferSource.t_to_js x3622);
              t_of_js x3623
    let cast_from = Obj.magic
  end
module EcdsaParams =
  struct
    type t = [ `Algorithm  | `EcdsaParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3625 : Ojs.t) -> t_of_js x3625
    and t_0_to_js : t_0 -> Ojs.t = fun (x3624 : t) -> t_to_js x3624
    type tags = [ `Algorithm  | `EcdsaParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EcdsaParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3628 : Ojs.t) -> intf_of_js __tags_of_js x3628
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3626 : __tags intf) -> intf_to_js __tags_to_js x3626
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x3630 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3630) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x3632 : 'tags this) ->
        fun (x3633 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3632) "hash"
            (HashAlgorithmIdentifier.t_to_js x3633)
    let (create : hash:HashAlgorithmIdentifier.t -> unit -> t) =
      fun ~hash:(x3635 : HashAlgorithmIdentifier.t) ->
        fun () ->
          let x3636 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3636 "hash"
            (HashAlgorithmIdentifier.t_to_js x3635);
          t_of_js x3636
    let cast_from = Obj.magic
  end
module KeyUsage =
  struct
    type t =
      [ `L_s182_sign  | `L_s204_unwrapKey  | `L_s208_verify 
      | `L_s216_wrapKey  | `L_s56_decrypt  | `L_s59_deriveBits 
      | `L_s60_deriveKey  | `L_s66_encrypt ]
    let rec t_of_js : Ojs.t -> t =
      fun (x3638 : Ojs.t) ->
        let x3639 = x3638 in
        match Ojs.string_of_js x3639 with
        | "sign" -> `L_s182_sign
        | "unwrapKey" -> `L_s204_unwrapKey
        | "verify" -> `L_s208_verify
        | "wrapKey" -> `L_s216_wrapKey
        | "decrypt" -> `L_s56_decrypt
        | "deriveBits" -> `L_s59_deriveBits
        | "deriveKey" -> `L_s60_deriveKey
        | "encrypt" -> `L_s66_encrypt
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x3637 :
          [ `L_s182_sign  | `L_s204_unwrapKey  | `L_s208_verify 
          | `L_s216_wrapKey  | `L_s56_decrypt  | `L_s59_deriveBits 
          | `L_s60_deriveKey  | `L_s66_encrypt ])
        ->
        match x3637 with
        | `L_s182_sign -> Ojs.string_to_js "sign"
        | `L_s204_unwrapKey -> Ojs.string_to_js "unwrapKey"
        | `L_s208_verify -> Ojs.string_to_js "verify"
        | `L_s216_wrapKey -> Ojs.string_to_js "wrapKey"
        | `L_s56_decrypt -> Ojs.string_to_js "decrypt"
        | `L_s59_deriveBits -> Ojs.string_to_js "deriveBits"
        | `L_s60_deriveKey -> Ojs.string_to_js "deriveKey"
        | `L_s66_encrypt -> Ojs.string_to_js "encrypt"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3641 : Ojs.t) -> t_of_js x3641
    and t_0_to_js : t_0 -> Ojs.t = fun (x3640 : t) -> t_to_js x3640
  end
module KeyType =
  struct
    type t = [ `L_s157_private  | `L_s160_public  | `L_s178_secret ]
    let rec t_of_js : Ojs.t -> t =
      fun (x3643 : Ojs.t) ->
        let x3644 = x3643 in
        match Ojs.string_of_js x3644 with
        | "private" -> `L_s157_private
        | "public" -> `L_s160_public
        | "secret" -> `L_s178_secret
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x3642 : [ `L_s157_private  | `L_s160_public  | `L_s178_secret ])
        ->
        match x3642 with
        | `L_s157_private -> Ojs.string_to_js "private"
        | `L_s160_public -> Ojs.string_to_js "public"
        | `L_s178_secret -> Ojs.string_to_js "secret"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3646 : Ojs.t) -> t_of_js x3646
    and t_0_to_js : t_0 -> Ojs.t = fun (x3645 : t) -> t_to_js x3645
  end
module KeyAlgorithm =
  struct
    type t = [ `KeyAlgorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3648 : Ojs.t) -> t_of_js x3648
    and t_0_to_js : t_0 -> Ojs.t = fun (x3647 : t) -> t_to_js x3647
    type tags = [ `KeyAlgorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `KeyAlgorithm ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3651 : Ojs.t) -> intf_of_js __tags_of_js x3651
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3649 : __tags intf) -> intf_to_js __tags_to_js x3649
    let (get_name : 'tags this -> string) =
      fun (x3653 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3653) "name")
    let (set_name : 'tags this -> string -> unit) =
      fun (x3655 : 'tags this) ->
        fun (x3656 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3655) "name"
            (Ojs.string_to_js x3656)
    let (create : name:string -> unit -> t) =
      fun ~name:(x3658 : string) ->
        fun () ->
          let x3659 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3659 "name" (Ojs.string_to_js x3658);
          t_of_js x3659
    let cast_from = Obj.magic
  end
module CryptoKey =
  struct
    type t = [ `CryptoKey ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3661 : Ojs.t) -> t_of_js x3661
    and t_0_to_js : t_0 -> Ojs.t = fun (x3660 : t) -> t_to_js x3660
    type tags = [ `CryptoKey ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CryptoKey ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3664 : Ojs.t) -> intf_of_js __tags_of_js x3664
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3662 : __tags intf) -> intf_to_js __tags_to_js x3662
    let (get_algorithm : 'tags this -> KeyAlgorithm.t) =
      fun (x3666 : 'tags this) ->
        KeyAlgorithm.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3666) "algorithm")
    let (get_extractable : 'tags this -> bool) =
      fun (x3668 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3668) "extractable")
    let (get_type : 'tags this -> KeyType.t) =
      fun (x3670 : 'tags this) ->
        KeyType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3670) "type")
    let (get_usages : 'tags this -> KeyUsage.t list) =
      fun (x3672 : 'tags this) ->
        Ojs.list_of_js KeyUsage.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3672) "usages")
    let (create :
      algorithm:KeyAlgorithm.t ->
        extractable:bool ->
          type_:KeyType.t -> usages:KeyUsage.t list -> unit -> t)
      =
      fun ~algorithm:(x3675 : KeyAlgorithm.t) ->
        fun ~extractable:(x3676 : bool) ->
          fun ~type_:(x3677 : KeyType.t) ->
            fun ~usages:(x3678 : KeyUsage.t list) ->
              fun () ->
                let x3679 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x3679 "algorithm"
                  (KeyAlgorithm.t_to_js x3675);
                Ojs.set_prop_ascii x3679 "extractable" (Ojs.bool_to_js x3676);
                Ojs.set_prop_ascii x3679 "type" (KeyType.t_to_js x3677);
                Ojs.set_prop_ascii x3679 "usages"
                  (Ojs.list_to_js KeyUsage.t_to_js x3678);
                t_of_js x3679
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CryptoKey")
             "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CryptoKey") [||])
  end
module EcdhKeyDeriveParams =
  struct
    type t = [ `Algorithm  | `EcdhKeyDeriveParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3682 : Ojs.t) -> t_of_js x3682
    and t_0_to_js : t_0 -> Ojs.t = fun (x3681 : t) -> t_to_js x3681
    type tags = [ `Algorithm  | `EcdhKeyDeriveParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EcdhKeyDeriveParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3685 : Ojs.t) -> intf_of_js __tags_of_js x3685
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3683 : __tags intf) -> intf_to_js __tags_to_js x3683
    let (get_public : 'tags this -> CryptoKey.t) =
      fun (x3687 : 'tags this) ->
        CryptoKey.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3687) "public")
    let (set_public : 'tags this -> CryptoKey.t -> unit) =
      fun (x3689 : 'tags this) ->
        fun (x3690 : CryptoKey.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3689) "public"
            (CryptoKey.t_to_js x3690)
    let (create : public:CryptoKey.t -> unit -> t) =
      fun ~public:(x3692 : CryptoKey.t) ->
        fun () ->
          let x3693 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3693 "public" (CryptoKey.t_to_js x3692);
          t_of_js x3693
    let cast_from = Obj.magic
  end
module NamedCurve =
  struct
    type t = string
    let rec t_of_js : Ojs.t -> t =
      fun (x3695 : Ojs.t) -> Ojs.string_of_js x3695
    and t_to_js : t -> Ojs.t = fun (x3694 : string) -> Ojs.string_to_js x3694
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3697 : Ojs.t) -> t_of_js x3697
    and t_0_to_js : t_0 -> Ojs.t = fun (x3696 : t) -> t_to_js x3696
  end
module EcKeyImportParams =
  struct
    type t = [ `Algorithm  | `EcKeyImportParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3699 : Ojs.t) -> t_of_js x3699
    and t_0_to_js : t_0 -> Ojs.t = fun (x3698 : t) -> t_to_js x3698
    type tags = [ `Algorithm  | `EcKeyImportParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EcKeyImportParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3702 : Ojs.t) -> intf_of_js __tags_of_js x3702
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3700 : __tags intf) -> intf_to_js __tags_to_js x3700
    let (get_namedCurve : 'tags this -> NamedCurve.t) =
      fun (x3704 : 'tags this) ->
        NamedCurve.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3704) "namedCurve")
    let (set_namedCurve : 'tags this -> NamedCurve.t -> unit) =
      fun (x3706 : 'tags this) ->
        fun (x3707 : NamedCurve.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3706) "namedCurve"
            (NamedCurve.t_to_js x3707)
    let (create : namedCurve:NamedCurve.t -> unit -> t) =
      fun ~namedCurve:(x3709 : NamedCurve.t) ->
        fun () ->
          let x3710 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3710 "namedCurve" (NamedCurve.t_to_js x3709);
          t_of_js x3710
    let cast_from = Obj.magic
  end
module EcKeyGenParams =
  struct
    type t = [ `Algorithm  | `EcKeyGenParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3712 : Ojs.t) -> t_of_js x3712
    and t_0_to_js : t_0 -> Ojs.t = fun (x3711 : t) -> t_to_js x3711
    type tags = [ `Algorithm  | `EcKeyGenParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EcKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3715 : Ojs.t) -> intf_of_js __tags_of_js x3715
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3713 : __tags intf) -> intf_to_js __tags_to_js x3713
    let (get_namedCurve : 'tags this -> NamedCurve.t) =
      fun (x3717 : 'tags this) ->
        NamedCurve.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3717) "namedCurve")
    let (set_namedCurve : 'tags this -> NamedCurve.t -> unit) =
      fun (x3719 : 'tags this) ->
        fun (x3720 : NamedCurve.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3719) "namedCurve"
            (NamedCurve.t_to_js x3720)
    let (create : namedCurve:NamedCurve.t -> unit -> t) =
      fun ~namedCurve:(x3722 : NamedCurve.t) ->
        fun () ->
          let x3723 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3723 "namedCurve" (NamedCurve.t_to_js x3722);
          t_of_js x3723
    let cast_from = Obj.magic
  end
module CryptoKeyPair =
  struct
    type t = [ `CryptoKeyPair ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3725 : Ojs.t) -> t_of_js x3725
    and t_0_to_js : t_0 -> Ojs.t = fun (x3724 : t) -> t_to_js x3724
    type tags = [ `CryptoKeyPair ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CryptoKeyPair ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3728 : Ojs.t) -> intf_of_js __tags_of_js x3728
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3726 : __tags intf) -> intf_to_js __tags_to_js x3726
    let (get_privateKey : 'tags this -> CryptoKey.t) =
      fun (x3730 : 'tags this) ->
        CryptoKey.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3730) "privateKey")
    let (set_privateKey : 'tags this -> CryptoKey.t -> unit) =
      fun (x3732 : 'tags this) ->
        fun (x3733 : CryptoKey.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3732) "privateKey"
            (CryptoKey.t_to_js x3733)
    let (get_publicKey : 'tags this -> CryptoKey.t) =
      fun (x3735 : 'tags this) ->
        CryptoKey.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3735) "publicKey")
    let (set_publicKey : 'tags this -> CryptoKey.t -> unit) =
      fun (x3737 : 'tags this) ->
        fun (x3738 : CryptoKey.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3737) "publicKey"
            (CryptoKey.t_to_js x3738)
    let (create :
      privateKey:CryptoKey.t -> publicKey:CryptoKey.t -> unit -> t) =
      fun ~privateKey:(x3740 : CryptoKey.t) ->
        fun ~publicKey:(x3741 : CryptoKey.t) ->
          fun () ->
            let x3742 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x3742 "privateKey" (CryptoKey.t_to_js x3740);
            Ojs.set_prop_ascii x3742 "publicKey" (CryptoKey.t_to_js x3741);
            t_of_js x3742
    let cast_from = Obj.magic
  end
module AesKeyGenParams =
  struct
    type t = [ `AesKeyGenParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3744 : Ojs.t) -> t_of_js x3744
    and t_0_to_js : t_0 -> Ojs.t = fun (x3743 : t) -> t_to_js x3743
    type tags = [ `AesKeyGenParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3747 : Ojs.t) -> intf_of_js __tags_of_js x3747
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3745 : __tags intf) -> intf_to_js __tags_to_js x3745
    let (get_length : 'tags this -> float) =
      fun (x3749 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3749) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x3751 : 'tags this) ->
        fun (x3752 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3751) "length"
            (Ojs.float_to_js x3752)
    let (create : length:float -> unit -> t) =
      fun ~length:(x3754 : float) ->
        fun () ->
          let x3755 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3755 "length" (Ojs.float_to_js x3754);
          t_of_js x3755
    let cast_from = Obj.magic
  end
module AesKeyAlgorithm =
  struct
    type t = [ `AesKeyAlgorithm  | `KeyAlgorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3757 : Ojs.t) -> t_of_js x3757
    and t_0_to_js : t_0 -> Ojs.t = fun (x3756 : t) -> t_to_js x3756
    type tags = [ `AesKeyAlgorithm  | `KeyAlgorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesKeyAlgorithm ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3760 : Ojs.t) -> intf_of_js __tags_of_js x3760
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3758 : __tags intf) -> intf_to_js __tags_to_js x3758
    let (get_length : 'tags this -> float) =
      fun (x3762 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3762) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x3764 : 'tags this) ->
        fun (x3765 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3764) "length"
            (Ojs.float_to_js x3765)
    let (create : length:float -> unit -> t) =
      fun ~length:(x3767 : float) ->
        fun () ->
          let x3768 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3768 "length" (Ojs.float_to_js x3767);
          t_of_js x3768
    let cast_from = Obj.magic
  end
module AesGcmParams =
  struct
    type t = [ `AesGcmParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3770 : Ojs.t) -> t_of_js x3770
    and t_0_to_js : t_0 -> Ojs.t = fun (x3769 : t) -> t_to_js x3769
    type tags = [ `AesGcmParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesGcmParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3773 : Ojs.t) -> intf_of_js __tags_of_js x3773
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3771 : __tags intf) -> intf_to_js __tags_to_js x3771
    let (get_additionalData : 'tags this -> BufferSource.t option) =
      fun (x3775 : 'tags this) ->
        Ojs.option_of_js BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3775) "additionalData")
    let (set_additionalData : 'tags this -> BufferSource.t -> unit) =
      fun (x3778 : 'tags this) ->
        fun (x3779 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3778) "additionalData"
            (BufferSource.t_to_js x3779)
    let (get_iv : 'tags this -> BufferSource.t) =
      fun (x3781 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3781) "iv")
    let (set_iv : 'tags this -> BufferSource.t -> unit) =
      fun (x3783 : 'tags this) ->
        fun (x3784 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3783) "iv"
            (BufferSource.t_to_js x3784)
    let (get_tagLength : 'tags this -> float option) =
      fun (x3786 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3786) "tagLength")
    let (set_tagLength : 'tags this -> float -> unit) =
      fun (x3789 : 'tags this) ->
        fun (x3790 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3789) "tagLength"
            (Ojs.float_to_js x3790)
    let (create :
      ?additionalData:BufferSource.t ->
        iv:BufferSource.t -> ?tagLength:float -> unit -> t)
      =
      fun ?additionalData:(x3792 : BufferSource.t option) ->
        fun ~iv:(x3793 : BufferSource.t) ->
          fun ?tagLength:(x3794 : float option) ->
            fun () ->
              let x3795 = Ojs.empty_obj () in
              (match x3792 with
               | Some x3797 ->
                   Ojs.set_prop_ascii x3795 "additionalData"
                     (BufferSource.t_to_js x3797)
               | None -> ());
              Ojs.set_prop_ascii x3795 "iv" (BufferSource.t_to_js x3793);
              (match x3794 with
               | Some x3796 ->
                   Ojs.set_prop_ascii x3795 "tagLength"
                     (Ojs.float_to_js x3796)
               | None -> ());
              t_of_js x3795
    let cast_from = Obj.magic
  end
module AesDerivedKeyParams =
  struct
    type t = [ `AesDerivedKeyParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3799 : Ojs.t) -> t_of_js x3799
    and t_0_to_js : t_0 -> Ojs.t = fun (x3798 : t) -> t_to_js x3798
    type tags = [ `AesDerivedKeyParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesDerivedKeyParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3802 : Ojs.t) -> intf_of_js __tags_of_js x3802
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3800 : __tags intf) -> intf_to_js __tags_to_js x3800
    let (get_length : 'tags this -> float) =
      fun (x3804 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3804) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x3806 : 'tags this) ->
        fun (x3807 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3806) "length"
            (Ojs.float_to_js x3807)
    let (create : length:float -> unit -> t) =
      fun ~length:(x3809 : float) ->
        fun () ->
          let x3810 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3810 "length" (Ojs.float_to_js x3809);
          t_of_js x3810
    let cast_from = Obj.magic
  end
module AesCtrParams =
  struct
    type t = [ `AesCtrParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3812 : Ojs.t) -> t_of_js x3812
    and t_0_to_js : t_0 -> Ojs.t = fun (x3811 : t) -> t_to_js x3811
    type tags = [ `AesCtrParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesCtrParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3815 : Ojs.t) -> intf_of_js __tags_of_js x3815
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3813 : __tags intf) -> intf_to_js __tags_to_js x3813
    let (get_counter : 'tags this -> BufferSource.t) =
      fun (x3817 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3817) "counter")
    let (set_counter : 'tags this -> BufferSource.t -> unit) =
      fun (x3819 : 'tags this) ->
        fun (x3820 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3819) "counter"
            (BufferSource.t_to_js x3820)
    let (get_length : 'tags this -> float) =
      fun (x3822 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3822) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x3824 : 'tags this) ->
        fun (x3825 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3824) "length"
            (Ojs.float_to_js x3825)
    let (create : counter:BufferSource.t -> length:float -> unit -> t) =
      fun ~counter:(x3827 : BufferSource.t) ->
        fun ~length:(x3828 : float) ->
          fun () ->
            let x3829 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x3829 "counter" (BufferSource.t_to_js x3827);
            Ojs.set_prop_ascii x3829 "length" (Ojs.float_to_js x3828);
            t_of_js x3829
    let cast_from = Obj.magic
  end
module AesCbcParams =
  struct
    type t = [ `AesCbcParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3831 : Ojs.t) -> t_of_js x3831
    and t_0_to_js : t_0 -> Ojs.t = fun (x3830 : t) -> t_to_js x3830
    type tags = [ `AesCbcParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesCbcParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3834 : Ojs.t) -> intf_of_js __tags_of_js x3834
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3832 : __tags intf) -> intf_to_js __tags_to_js x3832
    let (get_iv : 'tags this -> BufferSource.t) =
      fun (x3836 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3836) "iv")
    let (set_iv : 'tags this -> BufferSource.t -> unit) =
      fun (x3838 : 'tags this) ->
        fun (x3839 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3838) "iv"
            (BufferSource.t_to_js x3839)
    let (create : iv:BufferSource.t -> unit -> t) =
      fun ~iv:(x3841 : BufferSource.t) ->
        fun () ->
          let x3842 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3842 "iv" (BufferSource.t_to_js x3841);
          t_of_js x3842
    let cast_from = Obj.magic
  end
module SubtleCrypto =
  struct
    type t = [ `SubtleCrypto ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3844 : Ojs.t) -> t_of_js x3844
    and t_0_to_js : t_0 -> Ojs.t = fun (x3843 : t) -> t_to_js x3843
    type tags = [ `SubtleCrypto ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `SubtleCrypto ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3847 : Ojs.t) -> intf_of_js __tags_of_js x3847
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3845 : __tags intf) -> intf_to_js __tags_to_js x3845
    let (decrypt :
      'tags this ->
        algorithm:[ `U1 of AlgorithmIdentifier.t  | `U2 of RsaOaepParams.t 
                  | `U3 of AesCtrParams.t  | `U4 of AesCbcParams.t 
                  | `U5 of AesGcmParams.t ]
          -> key:CryptoKey.t -> data:BufferSource.t -> any Promise.t_1)
      =
      fun (x3857 : 'tags this) ->
        fun
          ~algorithm:(x3849 :
                       [ `U1 of AlgorithmIdentifier.t 
                       | `U2 of RsaOaepParams.t  | `U3 of AesCtrParams.t 
                       | `U4 of AesCbcParams.t  | `U5 of AesGcmParams.t ])
          ->
          fun ~key:(x3855 : CryptoKey.t) ->
            fun ~data:(x3856 : BufferSource.t) ->
              Promise.t_1_of_js any_of_js
                (Ojs.call (this_to_js Obj.magic x3857) "decrypt"
                   [|((match x3849 with
                       | `U1 x3850 -> AlgorithmIdentifier.t_to_js x3850
                       | `U2 x3851 -> RsaOaepParams.t_to_js x3851
                       | `U3 x3852 -> AesCtrParams.t_to_js x3852
                       | `U4 x3853 -> AesCbcParams.t_to_js x3853
                       | `U5 x3854 -> AesGcmParams.t_to_js x3854));(CryptoKey.t_to_js
                                                                    x3855);(
                     BufferSource.t_to_js x3856)|])
    let (deriveBits :
      'tags this ->
        algorithm:[ `U1 of AlgorithmIdentifier.t 
                  | `U2 of EcdhKeyDeriveParams.t  | `U3 of HkdfParams.t 
                  | `U4 of Pbkdf2Params.t ]
          ->
          baseKey:CryptoKey.t -> length:float -> ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x3867 : 'tags this) ->
        fun
          ~algorithm:(x3860 :
                       [ `U1 of AlgorithmIdentifier.t 
                       | `U2 of EcdhKeyDeriveParams.t  | `U3 of HkdfParams.t 
                       | `U4 of Pbkdf2Params.t ])
          ->
          fun ~baseKey:(x3865 : CryptoKey.t) ->
            fun ~length:(x3866 : float) ->
              Promise.t_1_of_js ArrayBuffer.t_0_of_js
                (Ojs.call (this_to_js Obj.magic x3867) "deriveBits"
                   [|((match x3860 with
                       | `U1 x3861 -> AlgorithmIdentifier.t_to_js x3861
                       | `U2 x3862 -> EcdhKeyDeriveParams.t_to_js x3862
                       | `U3 x3863 -> HkdfParams.t_to_js x3863
                       | `U4 x3864 -> Pbkdf2Params.t_to_js x3864));(CryptoKey.t_to_js
                                                                    x3865);(
                     Ojs.float_to_js x3866)|])
    let (deriveKey :
      'tags this ->
        algorithm:[ `U1 of AlgorithmIdentifier.t 
                  | `U2 of EcdhKeyDeriveParams.t  | `U3 of HkdfParams.t 
                  | `U4 of Pbkdf2Params.t ]
          ->
          baseKey:CryptoKey.t ->
            derivedKeyType:[ `U1 of AlgorithmIdentifier.t 
                           | `U2 of AesDerivedKeyParams.t 
                           | `U3 of HmacImportParams.t 
                           | `U4 of HkdfParams.t  | `U5 of Pbkdf2Params.t ]
              ->
              extractable:bool ->
                keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x3885 : 'tags this) ->
        fun
          ~algorithm:(x3870 :
                       [ `U1 of AlgorithmIdentifier.t 
                       | `U2 of EcdhKeyDeriveParams.t  | `U3 of HkdfParams.t 
                       | `U4 of Pbkdf2Params.t ])
          ->
          fun ~baseKey:(x3875 : CryptoKey.t) ->
            fun
              ~derivedKeyType:(x3876 :
                                [ `U1 of AlgorithmIdentifier.t 
                                | `U2 of AesDerivedKeyParams.t 
                                | `U3 of HmacImportParams.t 
                                | `U4 of HkdfParams.t 
                                | `U5 of Pbkdf2Params.t ])
              ->
              fun ~extractable:(x3882 : bool) ->
                fun ~keyUsages:(x3883 : KeyUsage.t list) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x3885) "deriveKey"
                       [|((match x3870 with
                           | `U1 x3871 -> AlgorithmIdentifier.t_to_js x3871
                           | `U2 x3872 -> EcdhKeyDeriveParams.t_to_js x3872
                           | `U3 x3873 -> HkdfParams.t_to_js x3873
                           | `U4 x3874 -> Pbkdf2Params.t_to_js x3874));(
                         CryptoKey.t_to_js x3875);((match x3876 with
                                                    | `U1 x3877 ->
                                                        AlgorithmIdentifier.t_to_js
                                                          x3877
                                                    | `U2 x3878 ->
                                                        AesDerivedKeyParams.t_to_js
                                                          x3878
                                                    | `U3 x3879 ->
                                                        HmacImportParams.t_to_js
                                                          x3879
                                                    | `U4 x3880 ->
                                                        HkdfParams.t_to_js
                                                          x3880
                                                    | `U5 x3881 ->
                                                        Pbkdf2Params.t_to_js
                                                          x3881));(Ojs.bool_to_js
                                                                    x3882);(
                         Ojs.list_to_js KeyUsage.t_to_js x3883)|])
    let (digest :
      'tags this ->
        algorithm:AlgorithmIdentifier.t ->
          data:BufferSource.t -> ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x3890 : 'tags this) ->
        fun ~algorithm:(x3888 : AlgorithmIdentifier.t) ->
          fun ~data:(x3889 : BufferSource.t) ->
            Promise.t_1_of_js ArrayBuffer.t_0_of_js
              (Ojs.call (this_to_js Obj.magic x3890) "digest"
                 [|(AlgorithmIdentifier.t_to_js x3888);(BufferSource.t_to_js
                                                          x3889)|])
    let (encrypt :
      'tags this ->
        algorithm:[ `U1 of AlgorithmIdentifier.t  | `U2 of RsaOaepParams.t 
                  | `U3 of AesCtrParams.t  | `U4 of AesCbcParams.t 
                  | `U5 of AesGcmParams.t ]
          -> key:CryptoKey.t -> data:BufferSource.t -> any Promise.t_1)
      =
      fun (x3901 : 'tags this) ->
        fun
          ~algorithm:(x3893 :
                       [ `U1 of AlgorithmIdentifier.t 
                       | `U2 of RsaOaepParams.t  | `U3 of AesCtrParams.t 
                       | `U4 of AesCbcParams.t  | `U5 of AesGcmParams.t ])
          ->
          fun ~key:(x3899 : CryptoKey.t) ->
            fun ~data:(x3900 : BufferSource.t) ->
              Promise.t_1_of_js any_of_js
                (Ojs.call (this_to_js Obj.magic x3901) "encrypt"
                   [|((match x3893 with
                       | `U1 x3894 -> AlgorithmIdentifier.t_to_js x3894
                       | `U2 x3895 -> RsaOaepParams.t_to_js x3895
                       | `U3 x3896 -> AesCtrParams.t_to_js x3896
                       | `U4 x3897 -> AesCbcParams.t_to_js x3897
                       | `U5 x3898 -> AesGcmParams.t_to_js x3898));(CryptoKey.t_to_js
                                                                    x3899);(
                     BufferSource.t_to_js x3900)|])
    let (exportKey :
      'tags this ->
        format:[ `L_s99_jwk ] -> key:CryptoKey.t -> JsonWebKey.t Promise.t_1)
      =
      fun (x3906 : 'tags this) ->
        fun ~format:(x3904 : [ `L_s99_jwk ]) ->
          fun ~key:(x3905 : CryptoKey.t) ->
            Promise.t_1_of_js JsonWebKey.t_of_js
              (Ojs.call (this_to_js Obj.magic x3906) "exportKey"
                 [|((match x3904 with | `L_s99_jwk -> Ojs.string_to_js "jwk"));(
                   CryptoKey.t_to_js x3905)|])
    let (exportKey' :
      'tags this ->
        format:(KeyFormat.t, [ `L_s99_jwk ]) Exclude.t_2 ->
          key:CryptoKey.t -> ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x3913 : 'tags this) ->
        fun ~format:(x3909 : (KeyFormat.t, [ `L_s99_jwk ]) Exclude.t_2) ->
          fun ~key:(x3912 : CryptoKey.t) ->
            Promise.t_1_of_js ArrayBuffer.t_0_of_js
              (Ojs.call (this_to_js Obj.magic x3913) "exportKey"
                 [|(Exclude.t_2_to_js KeyFormat.t_to_js
                      (fun (x3911 : [ `L_s99_jwk ]) ->
                         match x3911 with
                         | `L_s99_jwk -> Ojs.string_to_js "jwk") x3909);(
                   CryptoKey.t_to_js x3912)|])
    let (generateKey :
      'tags this ->
        algorithm:[ `U1 of RsaHashedKeyGenParams.t 
                  | `U2 of EcKeyGenParams.t ]
          ->
          extractable:bool ->
            keyUsages:KeyUsage.t list -> CryptoKeyPair.t Promise.t_1)
      =
      fun (x3922 : 'tags this) ->
        fun
          ~algorithm:(x3916 :
                       [ `U1 of RsaHashedKeyGenParams.t 
                       | `U2 of EcKeyGenParams.t ])
          ->
          fun ~extractable:(x3919 : bool) ->
            fun ~keyUsages:(x3920 : KeyUsage.t list) ->
              Promise.t_1_of_js CryptoKeyPair.t_of_js
                (Ojs.call (this_to_js Obj.magic x3922) "generateKey"
                   [|((match x3916 with
                       | `U1 x3917 -> RsaHashedKeyGenParams.t_to_js x3917
                       | `U2 x3918 -> EcKeyGenParams.t_to_js x3918));(
                     Ojs.bool_to_js x3919);(Ojs.list_to_js KeyUsage.t_to_js
                                              x3920)|])
    let (generateKey' :
      'tags this ->
        algorithm:[ `U1 of AesKeyGenParams.t  | `U2 of HmacKeyGenParams.t 
                  | `U3 of Pbkdf2Params.t ]
          ->
          extractable:bool ->
            keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x3932 : 'tags this) ->
        fun
          ~algorithm:(x3925 :
                       [ `U1 of AesKeyGenParams.t 
                       | `U2 of HmacKeyGenParams.t  | `U3 of Pbkdf2Params.t ])
          ->
          fun ~extractable:(x3929 : bool) ->
            fun ~keyUsages:(x3930 : KeyUsage.t list) ->
              Promise.t_1_of_js CryptoKey.t_of_js
                (Ojs.call (this_to_js Obj.magic x3932) "generateKey"
                   [|((match x3925 with
                       | `U1 x3926 -> AesKeyGenParams.t_to_js x3926
                       | `U2 x3927 -> HmacKeyGenParams.t_to_js x3927
                       | `U3 x3928 -> Pbkdf2Params.t_to_js x3928));(Ojs.bool_to_js
                                                                    x3929);(
                     Ojs.list_to_js KeyUsage.t_to_js x3930)|])
    let (generateKey'' :
      'tags this ->
        algorithm:AlgorithmIdentifier.t ->
          extractable:bool ->
            keyUsages:KeyUsage.t list ->
              (CryptoKey.t, CryptoKeyPair.t) union2 Promise.t_1)
      =
      fun (x3939 : 'tags this) ->
        fun ~algorithm:(x3935 : AlgorithmIdentifier.t) ->
          fun ~extractable:(x3936 : bool) ->
            fun ~keyUsages:(x3937 : KeyUsage.t list) ->
              Promise.t_1_of_js
                (fun (x3941 : Ojs.t) ->
                   union2_of_js CryptoKey.t_of_js CryptoKeyPair.t_of_js x3941)
                (Ojs.call (this_to_js Obj.magic x3939) "generateKey"
                   [|(AlgorithmIdentifier.t_to_js x3935);(Ojs.bool_to_js
                                                            x3936);(Ojs.list_to_js
                                                                    KeyUsage.t_to_js
                                                                    x3937)|])
    let (importKey :
      'tags this ->
        format:[ `L_s99_jwk ] ->
          keyData:JsonWebKey.t ->
            algorithm:[ `U1 of AlgorithmIdentifier.t 
                      | `U2 of RsaHashedImportParams.t 
                      | `U3 of EcKeyImportParams.t 
                      | `U4 of HmacImportParams.t 
                      | `U5 of AesKeyAlgorithm.t ]
              ->
              extractable:bool ->
                keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x3955 : 'tags this) ->
        fun ~format:(x3944 : [ `L_s99_jwk ]) ->
          fun ~keyData:(x3945 : JsonWebKey.t) ->
            fun
              ~algorithm:(x3946 :
                           [ `U1 of AlgorithmIdentifier.t 
                           | `U2 of RsaHashedImportParams.t 
                           | `U3 of EcKeyImportParams.t 
                           | `U4 of HmacImportParams.t 
                           | `U5 of AesKeyAlgorithm.t ])
              ->
              fun ~extractable:(x3952 : bool) ->
                fun ~keyUsages:(x3953 : KeyUsage.t list) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x3955) "importKey"
                       [|((match x3944 with
                           | `L_s99_jwk -> Ojs.string_to_js "jwk"));(
                         JsonWebKey.t_to_js x3945);((match x3946 with
                                                     | `U1 x3947 ->
                                                         AlgorithmIdentifier.t_to_js
                                                           x3947
                                                     | `U2 x3948 ->
                                                         RsaHashedImportParams.t_to_js
                                                           x3948
                                                     | `U3 x3949 ->
                                                         EcKeyImportParams.t_to_js
                                                           x3949
                                                     | `U4 x3950 ->
                                                         HmacImportParams.t_to_js
                                                           x3950
                                                     | `U5 x3951 ->
                                                         AesKeyAlgorithm.t_to_js
                                                           x3951));(Ojs.bool_to_js
                                                                    x3952);(
                         Ojs.list_to_js KeyUsage.t_to_js x3953)|])
    let (importKey' :
      'tags this ->
        format:(KeyFormat.t, [ `L_s99_jwk ]) Exclude.t_2 ->
          keyData:BufferSource.t ->
            algorithm:[ `U1 of AlgorithmIdentifier.t 
                      | `U2 of RsaHashedImportParams.t 
                      | `U3 of EcKeyImportParams.t 
                      | `U4 of HmacImportParams.t 
                      | `U5 of AesKeyAlgorithm.t ]
              ->
              extractable:bool ->
                keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x3971 : 'tags this) ->
        fun ~format:(x3958 : (KeyFormat.t, [ `L_s99_jwk ]) Exclude.t_2) ->
          fun ~keyData:(x3961 : BufferSource.t) ->
            fun
              ~algorithm:(x3962 :
                           [ `U1 of AlgorithmIdentifier.t 
                           | `U2 of RsaHashedImportParams.t 
                           | `U3 of EcKeyImportParams.t 
                           | `U4 of HmacImportParams.t 
                           | `U5 of AesKeyAlgorithm.t ])
              ->
              fun ~extractable:(x3968 : bool) ->
                fun ~keyUsages:(x3969 : KeyUsage.t list) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x3971) "importKey"
                       [|(Exclude.t_2_to_js KeyFormat.t_to_js
                            (fun (x3960 : [ `L_s99_jwk ]) ->
                               match x3960 with
                               | `L_s99_jwk -> Ojs.string_to_js "jwk") x3958);(
                         BufferSource.t_to_js x3961);((match x3962 with
                                                       | `U1 x3963 ->
                                                           AlgorithmIdentifier.t_to_js
                                                             x3963
                                                       | `U2 x3964 ->
                                                           RsaHashedImportParams.t_to_js
                                                             x3964
                                                       | `U3 x3965 ->
                                                           EcKeyImportParams.t_to_js
                                                             x3965
                                                       | `U4 x3966 ->
                                                           HmacImportParams.t_to_js
                                                             x3966
                                                       | `U5 x3967 ->
                                                           AesKeyAlgorithm.t_to_js
                                                             x3967));(
                         Ojs.bool_to_js x3968);(Ojs.list_to_js
                                                  KeyUsage.t_to_js x3969)|])
    let (sign :
      'tags this ->
        algorithm:[ `U1 of AlgorithmIdentifier.t  | `U2 of RsaPssParams.t 
                  | `U3 of EcdsaParams.t ]
          ->
          key:CryptoKey.t ->
            data:BufferSource.t -> ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x3980 : 'tags this) ->
        fun
          ~algorithm:(x3974 :
                       [ `U1 of AlgorithmIdentifier.t 
                       | `U2 of RsaPssParams.t  | `U3 of EcdsaParams.t ])
          ->
          fun ~key:(x3978 : CryptoKey.t) ->
            fun ~data:(x3979 : BufferSource.t) ->
              Promise.t_1_of_js ArrayBuffer.t_0_of_js
                (Ojs.call (this_to_js Obj.magic x3980) "sign"
                   [|((match x3974 with
                       | `U1 x3975 -> AlgorithmIdentifier.t_to_js x3975
                       | `U2 x3976 -> RsaPssParams.t_to_js x3976
                       | `U3 x3977 -> EcdsaParams.t_to_js x3977));(CryptoKey.t_to_js
                                                                    x3978);(
                     BufferSource.t_to_js x3979)|])
    let (unwrapKey :
      'tags this ->
        format:KeyFormat.t ->
          wrappedKey:BufferSource.t ->
            unwrappingKey:CryptoKey.t ->
              unwrapAlgorithm:[ `U1 of AlgorithmIdentifier.t 
                              | `U2 of RsaOaepParams.t 
                              | `U3 of AesCtrParams.t 
                              | `U4 of AesCbcParams.t 
                              | `U5 of AesGcmParams.t ]
                ->
                unwrappedKeyAlgorithm:[ `U1 of AlgorithmIdentifier.t 
                                      | `U2 of RsaHashedImportParams.t 
                                      | `U3 of EcKeyImportParams.t 
                                      | `U4 of HmacImportParams.t 
                                      | `U5 of AesKeyAlgorithm.t ]
                  ->
                  extractable:bool ->
                    keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x4001 : 'tags this) ->
        fun ~format:(x3983 : KeyFormat.t) ->
          fun ~wrappedKey:(x3984 : BufferSource.t) ->
            fun ~unwrappingKey:(x3985 : CryptoKey.t) ->
              fun
                ~unwrapAlgorithm:(x3986 :
                                   [ `U1 of AlgorithmIdentifier.t 
                                   | `U2 of RsaOaepParams.t 
                                   | `U3 of AesCtrParams.t 
                                   | `U4 of AesCbcParams.t 
                                   | `U5 of AesGcmParams.t ])
                ->
                fun
                  ~unwrappedKeyAlgorithm:(x3992 :
                                           [ `U1 of AlgorithmIdentifier.t 
                                           | `U2 of RsaHashedImportParams.t 
                                           | `U3 of EcKeyImportParams.t 
                                           | `U4 of HmacImportParams.t 
                                           | `U5 of AesKeyAlgorithm.t ])
                  ->
                  fun ~extractable:(x3998 : bool) ->
                    fun ~keyUsages:(x3999 : KeyUsage.t list) ->
                      Promise.t_1_of_js CryptoKey.t_of_js
                        (Ojs.call (this_to_js Obj.magic x4001) "unwrapKey"
                           [|(KeyFormat.t_to_js x3983);(BufferSource.t_to_js
                                                          x3984);(CryptoKey.t_to_js
                                                                    x3985);((
                             match x3986 with
                             | `U1 x3987 -> AlgorithmIdentifier.t_to_js x3987
                             | `U2 x3988 -> RsaOaepParams.t_to_js x3988
                             | `U3 x3989 -> AesCtrParams.t_to_js x3989
                             | `U4 x3990 -> AesCbcParams.t_to_js x3990
                             | `U5 x3991 -> AesGcmParams.t_to_js x3991));((
                             match x3992 with
                             | `U1 x3993 -> AlgorithmIdentifier.t_to_js x3993
                             | `U2 x3994 ->
                                 RsaHashedImportParams.t_to_js x3994
                             | `U3 x3995 -> EcKeyImportParams.t_to_js x3995
                             | `U4 x3996 -> HmacImportParams.t_to_js x3996
                             | `U5 x3997 -> AesKeyAlgorithm.t_to_js x3997));(
                             Ojs.bool_to_js x3998);(Ojs.list_to_js
                                                      KeyUsage.t_to_js x3999)|])
    let (verify :
      'tags this ->
        algorithm:[ `U1 of AlgorithmIdentifier.t  | `U2 of RsaPssParams.t 
                  | `U3 of EcdsaParams.t ]
          ->
          key:CryptoKey.t ->
            signature:BufferSource.t ->
              data:BufferSource.t -> bool Promise.t_1)
      =
      fun (x4011 : 'tags this) ->
        fun
          ~algorithm:(x4004 :
                       [ `U1 of AlgorithmIdentifier.t 
                       | `U2 of RsaPssParams.t  | `U3 of EcdsaParams.t ])
          ->
          fun ~key:(x4008 : CryptoKey.t) ->
            fun ~signature:(x4009 : BufferSource.t) ->
              fun ~data:(x4010 : BufferSource.t) ->
                Promise.t_1_of_js Ojs.bool_of_js
                  (Ojs.call (this_to_js Obj.magic x4011) "verify"
                     [|((match x4004 with
                         | `U1 x4005 -> AlgorithmIdentifier.t_to_js x4005
                         | `U2 x4006 -> RsaPssParams.t_to_js x4006
                         | `U3 x4007 -> EcdsaParams.t_to_js x4007));(
                       CryptoKey.t_to_js x4008);(BufferSource.t_to_js x4009);(
                       BufferSource.t_to_js x4010)|])
    let (wrapKey :
      'tags this ->
        format:KeyFormat.t ->
          key:CryptoKey.t ->
            wrappingKey:CryptoKey.t ->
              wrapAlgorithm:[ `U1 of AlgorithmIdentifier.t 
                            | `U2 of RsaOaepParams.t 
                            | `U3 of AesCtrParams.t  | `U4 of AesCbcParams.t 
                            | `U5 of AesGcmParams.t ]
                -> ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x4023 : 'tags this) ->
        fun ~format:(x4014 : KeyFormat.t) ->
          fun ~key:(x4015 : CryptoKey.t) ->
            fun ~wrappingKey:(x4016 : CryptoKey.t) ->
              fun
                ~wrapAlgorithm:(x4017 :
                                 [ `U1 of AlgorithmIdentifier.t 
                                 | `U2 of RsaOaepParams.t 
                                 | `U3 of AesCtrParams.t 
                                 | `U4 of AesCbcParams.t 
                                 | `U5 of AesGcmParams.t ])
                ->
                Promise.t_1_of_js ArrayBuffer.t_0_of_js
                  (Ojs.call (this_to_js Obj.magic x4023) "wrapKey"
                     [|(KeyFormat.t_to_js x4014);(CryptoKey.t_to_js x4015);(
                       CryptoKey.t_to_js x4016);((match x4017 with
                                                  | `U1 x4018 ->
                                                      AlgorithmIdentifier.t_to_js
                                                        x4018
                                                  | `U2 x4019 ->
                                                      RsaOaepParams.t_to_js
                                                        x4019
                                                  | `U3 x4020 ->
                                                      AesCtrParams.t_to_js
                                                        x4020
                                                  | `U4 x4021 ->
                                                      AesCbcParams.t_to_js
                                                        x4021
                                                  | `U5 x4022 ->
                                                      AesGcmParams.t_to_js
                                                        x4022))|])
    let (deriveKey' :
      'tags this ->
        algorithm:[ `U1 of AlgorithmIdentifier.t 
                  | `U2 of EcdhKeyDeriveParams.t  | `U3 of HkdfParams.t 
                  | `U4 of Pbkdf2Params.t ]
          ->
          baseKey:CryptoKey.t ->
            derivedKeyType:[ `U1 of AlgorithmIdentifier.t 
                           | `U2 of AesDerivedKeyParams.t 
                           | `U3 of HmacImportParams.t 
                           | `U4 of HkdfParams.t  | `U5 of Pbkdf2Params.t ]
              ->
              extractable:bool ->
                keyUsages:KeyUsage.t Iterable.t_1 -> CryptoKey.t Promise.t_1)
      =
      fun (x4041 : 'tags this) ->
        fun
          ~algorithm:(x4026 :
                       [ `U1 of AlgorithmIdentifier.t 
                       | `U2 of EcdhKeyDeriveParams.t  | `U3 of HkdfParams.t 
                       | `U4 of Pbkdf2Params.t ])
          ->
          fun ~baseKey:(x4031 : CryptoKey.t) ->
            fun
              ~derivedKeyType:(x4032 :
                                [ `U1 of AlgorithmIdentifier.t 
                                | `U2 of AesDerivedKeyParams.t 
                                | `U3 of HmacImportParams.t 
                                | `U4 of HkdfParams.t 
                                | `U5 of Pbkdf2Params.t ])
              ->
              fun ~extractable:(x4038 : bool) ->
                fun ~keyUsages:(x4039 : KeyUsage.t Iterable.t_1) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x4041) "deriveKey"
                       [|((match x4026 with
                           | `U1 x4027 -> AlgorithmIdentifier.t_to_js x4027
                           | `U2 x4028 -> EcdhKeyDeriveParams.t_to_js x4028
                           | `U3 x4029 -> HkdfParams.t_to_js x4029
                           | `U4 x4030 -> Pbkdf2Params.t_to_js x4030));(
                         CryptoKey.t_to_js x4031);((match x4032 with
                                                    | `U1 x4033 ->
                                                        AlgorithmIdentifier.t_to_js
                                                          x4033
                                                    | `U2 x4034 ->
                                                        AesDerivedKeyParams.t_to_js
                                                          x4034
                                                    | `U3 x4035 ->
                                                        HmacImportParams.t_to_js
                                                          x4035
                                                    | `U4 x4036 ->
                                                        HkdfParams.t_to_js
                                                          x4036
                                                    | `U5 x4037 ->
                                                        Pbkdf2Params.t_to_js
                                                          x4037));(Ojs.bool_to_js
                                                                    x4038);(
                         Iterable.t_1_to_js KeyUsage.t_to_js x4039)|])
    let (generateKey''' :
      'tags this ->
        algorithm:[ `U1 of RsaHashedKeyGenParams.t 
                  | `U2 of EcKeyGenParams.t ]
          ->
          extractable:bool ->
            keyUsages:KeyUsage.t list -> CryptoKeyPair.t Promise.t_1)
      =
      fun (x4050 : 'tags this) ->
        fun
          ~algorithm:(x4044 :
                       [ `U1 of RsaHashedKeyGenParams.t 
                       | `U2 of EcKeyGenParams.t ])
          ->
          fun ~extractable:(x4047 : bool) ->
            fun ~keyUsages:(x4048 : KeyUsage.t list) ->
              Promise.t_1_of_js CryptoKeyPair.t_of_js
                (Ojs.call (this_to_js Obj.magic x4050) "generateKey"
                   [|((match x4044 with
                       | `U1 x4045 -> RsaHashedKeyGenParams.t_to_js x4045
                       | `U2 x4046 -> EcKeyGenParams.t_to_js x4046));(
                     Ojs.bool_to_js x4047);(Ojs.list_to_js KeyUsage.t_to_js
                                              x4048)|])
    let (generateKey'''' :
      'tags this ->
        algorithm:[ `U1 of AesKeyGenParams.t  | `U2 of HmacKeyGenParams.t 
                  | `U3 of Pbkdf2Params.t ]
          ->
          extractable:bool ->
            keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x4060 : 'tags this) ->
        fun
          ~algorithm:(x4053 :
                       [ `U1 of AesKeyGenParams.t 
                       | `U2 of HmacKeyGenParams.t  | `U3 of Pbkdf2Params.t ])
          ->
          fun ~extractable:(x4057 : bool) ->
            fun ~keyUsages:(x4058 : KeyUsage.t list) ->
              Promise.t_1_of_js CryptoKey.t_of_js
                (Ojs.call (this_to_js Obj.magic x4060) "generateKey"
                   [|((match x4053 with
                       | `U1 x4054 -> AesKeyGenParams.t_to_js x4054
                       | `U2 x4055 -> HmacKeyGenParams.t_to_js x4055
                       | `U3 x4056 -> Pbkdf2Params.t_to_js x4056));(Ojs.bool_to_js
                                                                    x4057);(
                     Ojs.list_to_js KeyUsage.t_to_js x4058)|])
    let (generateKey''''' :
      'tags this ->
        algorithm:AlgorithmIdentifier.t ->
          extractable:bool ->
            keyUsages:KeyUsage.t Iterable.t_1 ->
              (CryptoKey.t, CryptoKeyPair.t) union2 Promise.t_1)
      =
      fun (x4067 : 'tags this) ->
        fun ~algorithm:(x4063 : AlgorithmIdentifier.t) ->
          fun ~extractable:(x4064 : bool) ->
            fun ~keyUsages:(x4065 : KeyUsage.t Iterable.t_1) ->
              Promise.t_1_of_js
                (fun (x4069 : Ojs.t) ->
                   union2_of_js CryptoKey.t_of_js CryptoKeyPair.t_of_js x4069)
                (Ojs.call (this_to_js Obj.magic x4067) "generateKey"
                   [|(AlgorithmIdentifier.t_to_js x4063);(Ojs.bool_to_js
                                                            x4064);(Iterable.t_1_to_js
                                                                    KeyUsage.t_to_js
                                                                    x4065)|])
    let (importKey'' :
      'tags this ->
        format:[ `L_s99_jwk ] ->
          keyData:JsonWebKey.t ->
            algorithm:[ `U1 of AlgorithmIdentifier.t 
                      | `U2 of RsaHashedImportParams.t 
                      | `U3 of EcKeyImportParams.t 
                      | `U4 of HmacImportParams.t 
                      | `U5 of AesKeyAlgorithm.t ]
              ->
              extractable:bool ->
                keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x4083 : 'tags this) ->
        fun ~format:(x4072 : [ `L_s99_jwk ]) ->
          fun ~keyData:(x4073 : JsonWebKey.t) ->
            fun
              ~algorithm:(x4074 :
                           [ `U1 of AlgorithmIdentifier.t 
                           | `U2 of RsaHashedImportParams.t 
                           | `U3 of EcKeyImportParams.t 
                           | `U4 of HmacImportParams.t 
                           | `U5 of AesKeyAlgorithm.t ])
              ->
              fun ~extractable:(x4080 : bool) ->
                fun ~keyUsages:(x4081 : KeyUsage.t list) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x4083) "importKey"
                       [|((match x4072 with
                           | `L_s99_jwk -> Ojs.string_to_js "jwk"));(
                         JsonWebKey.t_to_js x4073);((match x4074 with
                                                     | `U1 x4075 ->
                                                         AlgorithmIdentifier.t_to_js
                                                           x4075
                                                     | `U2 x4076 ->
                                                         RsaHashedImportParams.t_to_js
                                                           x4076
                                                     | `U3 x4077 ->
                                                         EcKeyImportParams.t_to_js
                                                           x4077
                                                     | `U4 x4078 ->
                                                         HmacImportParams.t_to_js
                                                           x4078
                                                     | `U5 x4079 ->
                                                         AesKeyAlgorithm.t_to_js
                                                           x4079));(Ojs.bool_to_js
                                                                    x4080);(
                         Ojs.list_to_js KeyUsage.t_to_js x4081)|])
    let (importKey''' :
      'tags this ->
        format:(KeyFormat.t, [ `L_s99_jwk ]) Exclude.t_2 ->
          keyData:BufferSource.t ->
            algorithm:[ `U1 of AlgorithmIdentifier.t 
                      | `U2 of RsaHashedImportParams.t 
                      | `U3 of EcKeyImportParams.t 
                      | `U4 of HmacImportParams.t 
                      | `U5 of AesKeyAlgorithm.t ]
              ->
              extractable:bool ->
                keyUsages:KeyUsage.t Iterable.t_1 -> CryptoKey.t Promise.t_1)
      =
      fun (x4099 : 'tags this) ->
        fun ~format:(x4086 : (KeyFormat.t, [ `L_s99_jwk ]) Exclude.t_2) ->
          fun ~keyData:(x4089 : BufferSource.t) ->
            fun
              ~algorithm:(x4090 :
                           [ `U1 of AlgorithmIdentifier.t 
                           | `U2 of RsaHashedImportParams.t 
                           | `U3 of EcKeyImportParams.t 
                           | `U4 of HmacImportParams.t 
                           | `U5 of AesKeyAlgorithm.t ])
              ->
              fun ~extractable:(x4096 : bool) ->
                fun ~keyUsages:(x4097 : KeyUsage.t Iterable.t_1) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x4099) "importKey"
                       [|(Exclude.t_2_to_js KeyFormat.t_to_js
                            (fun (x4088 : [ `L_s99_jwk ]) ->
                               match x4088 with
                               | `L_s99_jwk -> Ojs.string_to_js "jwk") x4086);(
                         BufferSource.t_to_js x4089);((match x4090 with
                                                       | `U1 x4091 ->
                                                           AlgorithmIdentifier.t_to_js
                                                             x4091
                                                       | `U2 x4092 ->
                                                           RsaHashedImportParams.t_to_js
                                                             x4092
                                                       | `U3 x4093 ->
                                                           EcKeyImportParams.t_to_js
                                                             x4093
                                                       | `U4 x4094 ->
                                                           HmacImportParams.t_to_js
                                                             x4094
                                                       | `U5 x4095 ->
                                                           AesKeyAlgorithm.t_to_js
                                                             x4095));(
                         Ojs.bool_to_js x4096);(Iterable.t_1_to_js
                                                  KeyUsage.t_to_js x4097)|])
    let (unwrapKey' :
      'tags this ->
        format:KeyFormat.t ->
          wrappedKey:BufferSource.t ->
            unwrappingKey:CryptoKey.t ->
              unwrapAlgorithm:[ `U1 of AlgorithmIdentifier.t 
                              | `U2 of RsaOaepParams.t 
                              | `U3 of AesCtrParams.t 
                              | `U4 of AesCbcParams.t 
                              | `U5 of AesGcmParams.t ]
                ->
                unwrappedKeyAlgorithm:[ `U1 of AlgorithmIdentifier.t 
                                      | `U2 of RsaHashedImportParams.t 
                                      | `U3 of EcKeyImportParams.t 
                                      | `U4 of HmacImportParams.t 
                                      | `U5 of AesKeyAlgorithm.t ]
                  ->
                  extractable:bool ->
                    keyUsages:KeyUsage.t Iterable.t_1 ->
                      CryptoKey.t Promise.t_1)
      =
      fun (x4120 : 'tags this) ->
        fun ~format:(x4102 : KeyFormat.t) ->
          fun ~wrappedKey:(x4103 : BufferSource.t) ->
            fun ~unwrappingKey:(x4104 : CryptoKey.t) ->
              fun
                ~unwrapAlgorithm:(x4105 :
                                   [ `U1 of AlgorithmIdentifier.t 
                                   | `U2 of RsaOaepParams.t 
                                   | `U3 of AesCtrParams.t 
                                   | `U4 of AesCbcParams.t 
                                   | `U5 of AesGcmParams.t ])
                ->
                fun
                  ~unwrappedKeyAlgorithm:(x4111 :
                                           [ `U1 of AlgorithmIdentifier.t 
                                           | `U2 of RsaHashedImportParams.t 
                                           | `U3 of EcKeyImportParams.t 
                                           | `U4 of HmacImportParams.t 
                                           | `U5 of AesKeyAlgorithm.t ])
                  ->
                  fun ~extractable:(x4117 : bool) ->
                    fun ~keyUsages:(x4118 : KeyUsage.t Iterable.t_1) ->
                      Promise.t_1_of_js CryptoKey.t_of_js
                        (Ojs.call (this_to_js Obj.magic x4120) "unwrapKey"
                           [|(KeyFormat.t_to_js x4102);(BufferSource.t_to_js
                                                          x4103);(CryptoKey.t_to_js
                                                                    x4104);((
                             match x4105 with
                             | `U1 x4106 -> AlgorithmIdentifier.t_to_js x4106
                             | `U2 x4107 -> RsaOaepParams.t_to_js x4107
                             | `U3 x4108 -> AesCtrParams.t_to_js x4108
                             | `U4 x4109 -> AesCbcParams.t_to_js x4109
                             | `U5 x4110 -> AesGcmParams.t_to_js x4110));((
                             match x4111 with
                             | `U1 x4112 -> AlgorithmIdentifier.t_to_js x4112
                             | `U2 x4113 ->
                                 RsaHashedImportParams.t_to_js x4113
                             | `U3 x4114 -> EcKeyImportParams.t_to_js x4114
                             | `U4 x4115 -> HmacImportParams.t_to_js x4115
                             | `U5 x4116 -> AesKeyAlgorithm.t_to_js x4116));(
                             Ojs.bool_to_js x4117);(Iterable.t_1_to_js
                                                      KeyUsage.t_to_js x4118)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SubtleCrypto")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "SubtleCrypto") [||])
  end
module CryptoStatic =
  struct
    let (subtle : unit -> SubtleCrypto.t) =
      fun () ->
        SubtleCrypto.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "crypto")
             "subtle")
    let (getRandomValues : 'T -> 'T) =
      fun (x4123 : 'T) ->
        Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "crypto")
             "getRandomValues" [|(Obj.magic x4123)|])
    let (randomUUID : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "crypto") "randomUUID"
             [||])
  end
module ConsoleStatic =
  struct
    let (assert_ : ?condition:bool -> data:any list -> unit -> unit) =
      fun ?condition:(x4124 : bool option) ->
        fun ~data:(x4125 : any list) ->
          fun () ->
            ignore
              (let x4129 = Ojs.get_prop_ascii Ojs.global "console" in
               Ojs.call (Ojs.get_prop_ascii x4129 "assert") "apply"
                 [|x4129;((let x4126 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x4124 with
                            | Some x4128 ->
                                ignore
                                  (Ojs.call x4126 "push"
                                     [|(Ojs.bool_to_js x4128)|])
                            | None -> ());
                           List.iter
                             (fun (x4127 : any) ->
                                ignore
                                  (Ojs.call x4126 "push"
                                     [|(any_to_js x4127)|])) x4125;
                           x4126))|])
    let (clear : unit -> unit) =
      fun () ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "console") "clear" [||])
    let (count : ?label:string -> unit -> unit) =
      fun ?label:(x4130 : string option) ->
        fun () ->
          ignore
            (let x4133 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x4133 "count") "apply"
               [|x4133;((let x4131 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x4130 with
                          | Some x4132 ->
                              ignore
                                (Ojs.call x4131 "push"
                                   [|(Ojs.string_to_js x4132)|])
                          | None -> ());
                         x4131))|])
    let (countReset : ?label:string -> unit -> unit) =
      fun ?label:(x4134 : string option) ->
        fun () ->
          ignore
            (let x4137 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x4137 "countReset") "apply"
               [|x4137;((let x4135 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x4134 with
                          | Some x4136 ->
                              ignore
                                (Ojs.call x4135 "push"
                                   [|(Ojs.string_to_js x4136)|])
                          | None -> ());
                         x4135))|])
    let (debug : any list -> unit) =
      fun (x4138 : any list) ->
        ignore
          (let x4141 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x4141 "debug") "apply"
             [|x4141;((let x4139 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x4140 : any) ->
                            ignore
                              (Ojs.call x4139 "push" [|(any_to_js x4140)|]))
                         x4138;
                       x4139))|])
    let (dir : ?item:any -> ?options:any -> unit -> unit) =
      fun ?item:(x4142 : any option) ->
        fun ?options:(x4143 : any option) ->
          fun () ->
            ignore
              (let x4147 = Ojs.get_prop_ascii Ojs.global "console" in
               Ojs.call (Ojs.get_prop_ascii x4147 "dir") "apply"
                 [|x4147;((let x4144 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x4142 with
                            | Some x4146 ->
                                ignore
                                  (Ojs.call x4144 "push"
                                     [|(any_to_js x4146)|])
                            | None -> ());
                           (match x4143 with
                            | Some x4145 ->
                                ignore
                                  (Ojs.call x4144 "push"
                                     [|(any_to_js x4145)|])
                            | None -> ());
                           x4144))|])
    let (dirxml : any list -> unit) =
      fun (x4148 : any list) ->
        ignore
          (let x4151 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x4151 "dirxml") "apply"
             [|x4151;((let x4149 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x4150 : any) ->
                            ignore
                              (Ojs.call x4149 "push" [|(any_to_js x4150)|]))
                         x4148;
                       x4149))|])
    let (error : any list -> unit) =
      fun (x4152 : any list) ->
        ignore
          (let x4155 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x4155 "error") "apply"
             [|x4155;((let x4153 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x4154 : any) ->
                            ignore
                              (Ojs.call x4153 "push" [|(any_to_js x4154)|]))
                         x4152;
                       x4153))|])
    let (group : any list -> unit) =
      fun (x4156 : any list) ->
        ignore
          (let x4159 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x4159 "group") "apply"
             [|x4159;((let x4157 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x4158 : any) ->
                            ignore
                              (Ojs.call x4157 "push" [|(any_to_js x4158)|]))
                         x4156;
                       x4157))|])
    let (groupCollapsed : any list -> unit) =
      fun (x4160 : any list) ->
        ignore
          (let x4163 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x4163 "groupCollapsed") "apply"
             [|x4163;((let x4161 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x4162 : any) ->
                            ignore
                              (Ojs.call x4161 "push" [|(any_to_js x4162)|]))
                         x4160;
                       x4161))|])
    let (groupEnd : unit -> unit) =
      fun () ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "console") "groupEnd" [||])
    let (info : any list -> unit) =
      fun (x4164 : any list) ->
        ignore
          (let x4167 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x4167 "info") "apply"
             [|x4167;((let x4165 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x4166 : any) ->
                            ignore
                              (Ojs.call x4165 "push" [|(any_to_js x4166)|]))
                         x4164;
                       x4165))|])
    let (log : any list -> unit) =
      fun (x4168 : any list) ->
        ignore
          (let x4171 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x4171 "log") "apply"
             [|x4171;((let x4169 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x4170 : any) ->
                            ignore
                              (Ojs.call x4169 "push" [|(any_to_js x4170)|]))
                         x4168;
                       x4169))|])
    let (table : ?tabularData:any -> ?properties:string list -> unit -> unit)
      =
      fun ?tabularData:(x4172 : any option) ->
        fun ?properties:(x4173 : string list option) ->
          fun () ->
            ignore
              (let x4178 = Ojs.get_prop_ascii Ojs.global "console" in
               Ojs.call (Ojs.get_prop_ascii x4178 "table") "apply"
                 [|x4178;((let x4174 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x4172 with
                            | Some x4177 ->
                                ignore
                                  (Ojs.call x4174 "push"
                                     [|(any_to_js x4177)|])
                            | None -> ());
                           (match x4173 with
                            | Some x4175 ->
                                ignore
                                  (Ojs.call x4174 "push"
                                     [|(Ojs.list_to_js Ojs.string_to_js x4175)|])
                            | None -> ());
                           x4174))|])
    let (time : ?label:string -> unit -> unit) =
      fun ?label:(x4179 : string option) ->
        fun () ->
          ignore
            (let x4182 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x4182 "time") "apply"
               [|x4182;((let x4180 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x4179 with
                          | Some x4181 ->
                              ignore
                                (Ojs.call x4180 "push"
                                   [|(Ojs.string_to_js x4181)|])
                          | None -> ());
                         x4180))|])
    let (timeEnd : ?label:string -> unit -> unit) =
      fun ?label:(x4183 : string option) ->
        fun () ->
          ignore
            (let x4186 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x4186 "timeEnd") "apply"
               [|x4186;((let x4184 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x4183 with
                          | Some x4185 ->
                              ignore
                                (Ojs.call x4184 "push"
                                   [|(Ojs.string_to_js x4185)|])
                          | None -> ());
                         x4184))|])
    let (timeLog : ?label:string -> data:any list -> unit -> unit) =
      fun ?label:(x4187 : string option) ->
        fun ~data:(x4188 : any list) ->
          fun () ->
            ignore
              (let x4192 = Ojs.get_prop_ascii Ojs.global "console" in
               Ojs.call (Ojs.get_prop_ascii x4192 "timeLog") "apply"
                 [|x4192;((let x4189 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x4187 with
                            | Some x4191 ->
                                ignore
                                  (Ojs.call x4189 "push"
                                     [|(Ojs.string_to_js x4191)|])
                            | None -> ());
                           List.iter
                             (fun (x4190 : any) ->
                                ignore
                                  (Ojs.call x4189 "push"
                                     [|(any_to_js x4190)|])) x4188;
                           x4189))|])
    let (timeStamp : ?label:string -> unit -> unit) =
      fun ?label:(x4193 : string option) ->
        fun () ->
          ignore
            (let x4196 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x4196 "timeStamp") "apply"
               [|x4196;((let x4194 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x4193 with
                          | Some x4195 ->
                              ignore
                                (Ojs.call x4194 "push"
                                   [|(Ojs.string_to_js x4195)|])
                          | None -> ());
                         x4194))|])
    let (trace : any list -> unit) =
      fun (x4197 : any list) ->
        ignore
          (let x4200 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x4200 "trace") "apply"
             [|x4200;((let x4198 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x4199 : any) ->
                            ignore
                              (Ojs.call x4198 "push" [|(any_to_js x4199)|]))
                         x4197;
                       x4198))|])
    let (warn : any list -> unit) =
      fun (x4201 : any list) ->
        ignore
          (let x4204 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x4204 "warn") "apply"
             [|x4204;((let x4202 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x4203 : any) ->
                            ignore
                              (Ojs.call x4202 "push" [|(any_to_js x4203)|]))
                         x4201;
                       x4202))|])
  end
module CacheQueryOptions =
  struct
    type t = [ `CacheQueryOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4206 : Ojs.t) -> t_of_js x4206
    and t_0_to_js : t_0 -> Ojs.t = fun (x4205 : t) -> t_to_js x4205
    type tags = [ `CacheQueryOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CacheQueryOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4209 : Ojs.t) -> intf_of_js __tags_of_js x4209
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4207 : __tags intf) -> intf_to_js __tags_to_js x4207
    let (get_ignoreMethod : 'tags this -> bool option) =
      fun (x4211 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4211) "ignoreMethod")
    let (set_ignoreMethod : 'tags this -> bool -> unit) =
      fun (x4214 : 'tags this) ->
        fun (x4215 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4214) "ignoreMethod"
            (Ojs.bool_to_js x4215)
    let (get_ignoreSearch : 'tags this -> bool option) =
      fun (x4217 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4217) "ignoreSearch")
    let (set_ignoreSearch : 'tags this -> bool -> unit) =
      fun (x4220 : 'tags this) ->
        fun (x4221 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4220) "ignoreSearch"
            (Ojs.bool_to_js x4221)
    let (get_ignoreVary : 'tags this -> bool option) =
      fun (x4223 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4223) "ignoreVary")
    let (set_ignoreVary : 'tags this -> bool -> unit) =
      fun (x4226 : 'tags this) ->
        fun (x4227 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4226) "ignoreVary"
            (Ojs.bool_to_js x4227)
    let (create :
      ?ignoreMethod:bool ->
        ?ignoreSearch:bool -> ?ignoreVary:bool -> unit -> t)
      =
      fun ?ignoreMethod:(x4229 : bool option) ->
        fun ?ignoreSearch:(x4230 : bool option) ->
          fun ?ignoreVary:(x4231 : bool option) ->
            fun () ->
              let x4232 = Ojs.empty_obj () in
              (match x4229 with
               | Some x4235 ->
                   Ojs.set_prop_ascii x4232 "ignoreMethod"
                     (Ojs.bool_to_js x4235)
               | None -> ());
              (match x4230 with
               | Some x4234 ->
                   Ojs.set_prop_ascii x4232 "ignoreSearch"
                     (Ojs.bool_to_js x4234)
               | None -> ());
              (match x4231 with
               | Some x4233 ->
                   Ojs.set_prop_ascii x4232 "ignoreVary"
                     (Ojs.bool_to_js x4233)
               | None -> ());
              t_of_js x4232
    let cast_from = Obj.magic
  end
module MultiCacheQueryOptions =
  struct
    type t = [ `CacheQueryOptions  | `MultiCacheQueryOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4237 : Ojs.t) -> t_of_js x4237
    and t_0_to_js : t_0 -> Ojs.t = fun (x4236 : t) -> t_to_js x4236
    type tags = [ `CacheQueryOptions  | `MultiCacheQueryOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MultiCacheQueryOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4240 : Ojs.t) -> intf_of_js __tags_of_js x4240
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4238 : __tags intf) -> intf_to_js __tags_to_js x4238
    let (get_cacheName : 'tags this -> string option) =
      fun (x4242 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4242) "cacheName")
    let (set_cacheName : 'tags this -> string -> unit) =
      fun (x4245 : 'tags this) ->
        fun (x4246 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4245) "cacheName"
            (Ojs.string_to_js x4246)
    let (create : ?cacheName:string -> unit -> t) =
      fun ?cacheName:(x4248 : string option) ->
        fun () ->
          let x4249 = Ojs.empty_obj () in
          (match x4248 with
           | Some x4250 ->
               Ojs.set_prop_ascii x4249 "cacheName" (Ojs.string_to_js x4250)
           | None -> ());
          t_of_js x4249
    let cast_from = Obj.magic
  end
module URLSearchParams =
  struct
    type t =
      [ `URLSearchParams  | (string * string) IterableIterator.tags_1] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4252 : Ojs.t) -> t_of_js x4252
    and t_0_to_js : t_0 -> Ojs.t = fun (x4251 : t) -> t_to_js x4251
    type tags =
      [ `URLSearchParams  | (string * string) IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `URLSearchParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4255 : Ojs.t) -> intf_of_js __tags_of_js x4255
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4253 : __tags intf) -> intf_to_js __tags_to_js x4253
    let (append : 'tags this -> name:string -> value:string -> unit) =
      fun (x4259 : 'tags this) ->
        fun ~name:(x4257 : string) ->
          fun ~value:(x4258 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x4259) "append"
                 [|(Ojs.string_to_js x4257);(Ojs.string_to_js x4258)|])
    let (delete : 'tags this -> name:string -> unit) =
      fun (x4262 : 'tags this) ->
        fun ~name:(x4261 : string) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x4262) "delete"
               [|(Ojs.string_to_js x4261)|])
    let (get_ : 'tags this -> name:string -> string option) =
      fun (x4265 : 'tags this) ->
        fun ~name:(x4264 : string) ->
          Ojs.option_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x4265) "get"
               [|(Ojs.string_to_js x4264)|])
    let (getAll : 'tags this -> name:string -> string list) =
      fun (x4269 : 'tags this) ->
        fun ~name:(x4268 : string) ->
          Ojs.list_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x4269) "getAll"
               [|(Ojs.string_to_js x4268)|])
    let (has : 'tags this -> name:string -> bool) =
      fun (x4273 : 'tags this) ->
        fun ~name:(x4272 : string) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x4273) "has"
               [|(Ojs.string_to_js x4272)|])
    let (set_ : 'tags this -> name:string -> value:string -> unit) =
      fun (x4277 : 'tags this) ->
        fun ~name:(x4275 : string) ->
          fun ~value:(x4276 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x4277) "set"
                 [|(Ojs.string_to_js x4275);(Ojs.string_to_js x4276)|])
    let (sort : 'tags this -> unit) =
      fun (x4279 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x4279) "sort" [||])
    let (toString : 'tags this -> string) =
      fun (x4281 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4281) "toString" [||])
    let (forEach :
      'tags this ->
        callbackfn:(value:string -> key:string -> parent:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x4290 : 'tags this) ->
        fun
          ~callbackfn:(x4283 :
                        value:string -> key:string -> parent:t -> unit)
          ->
          fun ?thisArg:(x4284 : any option) ->
            fun () ->
              ignore
                (let x4292 = this_to_js Obj.magic x4290 in
                 Ojs.call (Ojs.get_prop_ascii x4292 "forEach") "apply"
                   [|x4292;((let x4285 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4285 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4287 : Ojs.t) ->
                                          fun (x4288 : Ojs.t) ->
                                            fun (x4289 : Ojs.t) ->
                                              x4283
                                                ~value:(Ojs.string_of_js
                                                          x4287)
                                                ~key:(Ojs.string_of_js x4288)
                                                ~parent:(t_of_js x4289)))|]);
                             (match x4284 with
                              | Some x4286 ->
                                  ignore
                                    (Ojs.call x4285 "push"
                                       [|(any_to_js x4286)|])
                              | None -> ());
                             x4285))|])
    let (entries : 'tags this -> (string * string) IterableIterator.t_1) =
      fun (x4293 : 'tags this) ->
        IterableIterator.t_1_of_js
          (fun (x4295 : Ojs.t) ->
             let x4296 = x4295 in
             ((Ojs.string_of_js (Ojs.array_get x4296 0)),
               (Ojs.string_of_js (Ojs.array_get x4296 1))))
          (Ojs.call (this_to_js Obj.magic x4293) "entries" [||])
    let (keys : 'tags this -> string IterableIterator.t_1) =
      fun (x4297 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4297) "keys" [||])
    let (values : 'tags this -> string IterableIterator.t_1) =
      fun (x4300 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4300) "values" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "URLSearchParams") "prototype")
    let (create :
      ?init:[ `U1 of string list list  | `U2 of (string, string) Record.t_2 
            | `U3 of string  | `U4 of t ]
        -> unit -> t)
      =
      fun
        ?init:(x4303 :
                [ `U1 of string list list 
                | `U2 of (string, string) Record.t_2  | `U3 of string 
                | `U4 of t ] option)
        ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr
               (Ojs.get_prop_ascii Ojs.global "URLSearchParams")
               (let x4304 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x4303 with
                 | Some x4305 ->
                     ignore
                       (Ojs.call x4304 "push"
                          [|((match x4305 with
                              | `U1 x4306 ->
                                  Ojs.list_to_js
                                    (fun (x4307 : string list) ->
                                       Ojs.list_to_js Ojs.string_to_js x4307)
                                    x4306
                              | `U2 x4309 ->
                                  Record.t_2_to_js Ojs.string_to_js
                                    Ojs.string_to_js x4309
                              | `U3 x4312 -> Ojs.string_to_js x4312
                              | `U4 x4313 -> t_to_js x4313))|])
                 | None -> ());
                x4304))
    let (toString' : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "URLSearchParams")
             "toString" [||])
  end
module URL =
  struct
    type t = [ `URL ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4315 : Ojs.t) -> t_of_js x4315
    and t_0_to_js : t_0 -> Ojs.t = fun (x4314 : t) -> t_to_js x4314
    type tags = [ `URL ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `URL ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4318 : Ojs.t) -> intf_of_js __tags_of_js x4318
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4316 : __tags intf) -> intf_to_js __tags_to_js x4316
    let (get_hash : 'tags this -> string) =
      fun (x4320 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4320) "hash")
    let (set_hash : 'tags this -> string -> unit) =
      fun (x4322 : 'tags this) ->
        fun (x4323 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4322) "hash"
            (Ojs.string_to_js x4323)
    let (get_host : 'tags this -> string) =
      fun (x4325 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4325) "host")
    let (set_host : 'tags this -> string -> unit) =
      fun (x4327 : 'tags this) ->
        fun (x4328 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4327) "host"
            (Ojs.string_to_js x4328)
    let (get_hostname : 'tags this -> string) =
      fun (x4330 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4330) "hostname")
    let (set_hostname : 'tags this -> string -> unit) =
      fun (x4332 : 'tags this) ->
        fun (x4333 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4332) "hostname"
            (Ojs.string_to_js x4333)
    let (get_href : 'tags this -> string) =
      fun (x4335 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4335) "href")
    let (set_href : 'tags this -> string -> unit) =
      fun (x4337 : 'tags this) ->
        fun (x4338 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4337) "href"
            (Ojs.string_to_js x4338)
    let (toString : 'tags this -> string) =
      fun (x4340 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4340) "toString" [||])
    let (get_origin : 'tags this -> string) =
      fun (x4342 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4342) "origin")
    let (get_password : 'tags this -> string) =
      fun (x4344 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4344) "password")
    let (set_password : 'tags this -> string -> unit) =
      fun (x4346 : 'tags this) ->
        fun (x4347 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4346) "password"
            (Ojs.string_to_js x4347)
    let (get_pathname : 'tags this -> string) =
      fun (x4349 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4349) "pathname")
    let (set_pathname : 'tags this -> string -> unit) =
      fun (x4351 : 'tags this) ->
        fun (x4352 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4351) "pathname"
            (Ojs.string_to_js x4352)
    let (get_port : 'tags this -> string) =
      fun (x4354 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4354) "port")
    let (set_port : 'tags this -> string -> unit) =
      fun (x4356 : 'tags this) ->
        fun (x4357 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4356) "port"
            (Ojs.string_to_js x4357)
    let (get_protocol : 'tags this -> string) =
      fun (x4359 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4359) "protocol")
    let (set_protocol : 'tags this -> string -> unit) =
      fun (x4361 : 'tags this) ->
        fun (x4362 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4361) "protocol"
            (Ojs.string_to_js x4362)
    let (get_search : 'tags this -> string) =
      fun (x4364 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4364) "search")
    let (set_search : 'tags this -> string -> unit) =
      fun (x4366 : 'tags this) ->
        fun (x4367 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4366) "search"
            (Ojs.string_to_js x4367)
    let (get_searchParams : 'tags this -> URLSearchParams.t) =
      fun (x4369 : 'tags this) ->
        URLSearchParams.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4369) "searchParams")
    let (get_username : 'tags this -> string) =
      fun (x4371 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4371) "username")
    let (set_username : 'tags this -> string -> unit) =
      fun (x4373 : 'tags this) ->
        fun (x4374 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4373) "username"
            (Ojs.string_to_js x4374)
    let (toJSON : 'tags this -> string) =
      fun (x4376 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4376) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "URL")
             "prototype")
    let (create :
      url:[ `U1 of string  | `U2 of t ] ->
        ?base:[ `U1 of string  | `U2 of t ] -> unit -> t)
      =
      fun ~url:(x4378 : [ `U1 of string  | `U2 of t ]) ->
        fun ?base:(x4379 : [ `U1 of string  | `U2 of t ] option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "URL")
                 (let x4380 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x4380 "push"
                       [|((match x4378 with
                           | `U1 x4384 -> Ojs.string_to_js x4384
                           | `U2 x4385 -> t_to_js x4385))|]);
                  (match x4379 with
                   | Some x4381 ->
                       ignore
                         (Ojs.call x4380 "push"
                            [|((match x4381 with
                                | `U1 x4382 -> Ojs.string_to_js x4382
                                | `U2 x4383 -> t_to_js x4383))|])
                   | None -> ());
                  x4380))
    let (createObjectURL : Blob.t -> string) =
      fun (x4386 : Blob.t) ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "URL") "createObjectURL"
             [|(Blob.t_to_js x4386)|])
    let (revokeObjectURL : string -> unit) =
      fun (x4387 : string) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "URL") "revokeObjectURL"
             [|(Ojs.string_to_js x4387)|])
  end
module ResponseType =
  struct
    type t =
      [ `L_s139_opaque  | `L_s140_opaqueredirect  | `L_s43_basic 
      | `L_s55_cors  | `L_s57_default  | `L_s68_error ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4389 : Ojs.t) ->
        let x4390 = x4389 in
        match Ojs.string_of_js x4390 with
        | "opaque" -> `L_s139_opaque
        | "opaqueredirect" -> `L_s140_opaqueredirect
        | "basic" -> `L_s43_basic
        | "cors" -> `L_s55_cors
        | "default" -> `L_s57_default
        | "error" -> `L_s68_error
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x4388 :
          [ `L_s139_opaque  | `L_s140_opaqueredirect  | `L_s43_basic 
          | `L_s55_cors  | `L_s57_default  | `L_s68_error ])
        ->
        match x4388 with
        | `L_s139_opaque -> Ojs.string_to_js "opaque"
        | `L_s140_opaqueredirect -> Ojs.string_to_js "opaqueredirect"
        | `L_s43_basic -> Ojs.string_to_js "basic"
        | `L_s55_cors -> Ojs.string_to_js "cors"
        | `L_s57_default -> Ojs.string_to_js "default"
        | `L_s68_error -> Ojs.string_to_js "error"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4392 : Ojs.t) -> t_of_js x4392
    and t_0_to_js : t_0 -> Ojs.t = fun (x4391 : t) -> t_to_js x4391
  end
module rec
  Headers:sig
            type t =
              [ `Headers  | (string * string) IterableIterator.tags_1] intf
            type t_0 = t
            [@@@js.stop ]
            type tags =
              [ `Headers  | (string * string) IterableIterator.tags_1]
            type tags_0 = tags
            [@@@js.start ]
            [@@@js.implem
              type tags =
                [ `Headers  | (string * string) IterableIterator.tags_1]
              type tags_0 = tags]
            type 'tags this = 'tags intf constraint 'tags = [> `Headers ]
            val t_to_js : t -> Ojs.t
            val t_of_js : Ojs.t -> t
            val t_0_to_js : t_0 -> Ojs.t
            val t_0_of_js : Ojs.t -> t_0
            val append : 'tags this -> name:string -> value:string -> unit
            val delete : 'tags this -> name:string -> unit
            val get_ : 'tags this -> name:string -> string option
            val has : 'tags this -> name:string -> bool
            val set_ : 'tags this -> name:string -> value:string -> unit
            val forEach :
              'tags this ->
                callbackfn:(value:string -> key:string -> parent:t -> unit)
                  -> ?thisArg:any -> unit -> unit
            val entries :
              'tags this -> (string * string) IterableIterator.t_1
            val keys : 'tags this -> string IterableIterator.t_1
            val values : 'tags this -> string IterableIterator.t_1
            val cast_from : 'tags this -> t
            val prototype : unit -> t
            val create : ?init:HeadersInit.t -> unit -> t
          end =
  struct
    type t = [ `Headers  | (string * string) IterableIterator.tags_1] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4394 : Ojs.t) -> t_of_js x4394
    and t_0_to_js : t_0 -> Ojs.t = fun (x4393 : t) -> t_to_js x4393
    type tags = [ `Headers  | (string * string) IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Headers ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4397 : Ojs.t) -> intf_of_js __tags_of_js x4397
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4395 : __tags intf) -> intf_to_js __tags_to_js x4395
    let (append : 'tags this -> name:string -> value:string -> unit) =
      fun (x4401 : 'tags this) ->
        fun ~name:(x4399 : string) ->
          fun ~value:(x4400 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x4401) "append"
                 [|(Ojs.string_to_js x4399);(Ojs.string_to_js x4400)|])
    let (delete : 'tags this -> name:string -> unit) =
      fun (x4404 : 'tags this) ->
        fun ~name:(x4403 : string) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x4404) "delete"
               [|(Ojs.string_to_js x4403)|])
    let (get_ : 'tags this -> name:string -> string option) =
      fun (x4407 : 'tags this) ->
        fun ~name:(x4406 : string) ->
          Ojs.option_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x4407) "get"
               [|(Ojs.string_to_js x4406)|])
    let (has : 'tags this -> name:string -> bool) =
      fun (x4411 : 'tags this) ->
        fun ~name:(x4410 : string) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x4411) "has"
               [|(Ojs.string_to_js x4410)|])
    let (set_ : 'tags this -> name:string -> value:string -> unit) =
      fun (x4415 : 'tags this) ->
        fun ~name:(x4413 : string) ->
          fun ~value:(x4414 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x4415) "set"
                 [|(Ojs.string_to_js x4413);(Ojs.string_to_js x4414)|])
    let (forEach :
      'tags this ->
        callbackfn:(value:string -> key:string -> parent:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x4424 : 'tags this) ->
        fun
          ~callbackfn:(x4417 :
                        value:string -> key:string -> parent:t -> unit)
          ->
          fun ?thisArg:(x4418 : any option) ->
            fun () ->
              ignore
                (let x4426 = this_to_js Obj.magic x4424 in
                 Ojs.call (Ojs.get_prop_ascii x4426 "forEach") "apply"
                   [|x4426;((let x4419 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4419 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4421 : Ojs.t) ->
                                          fun (x4422 : Ojs.t) ->
                                            fun (x4423 : Ojs.t) ->
                                              x4417
                                                ~value:(Ojs.string_of_js
                                                          x4421)
                                                ~key:(Ojs.string_of_js x4422)
                                                ~parent:(t_of_js x4423)))|]);
                             (match x4418 with
                              | Some x4420 ->
                                  ignore
                                    (Ojs.call x4419 "push"
                                       [|(any_to_js x4420)|])
                              | None -> ());
                             x4419))|])
    let (entries : 'tags this -> (string * string) IterableIterator.t_1) =
      fun (x4427 : 'tags this) ->
        IterableIterator.t_1_of_js
          (fun (x4429 : Ojs.t) ->
             let x4430 = x4429 in
             ((Ojs.string_of_js (Ojs.array_get x4430 0)),
               (Ojs.string_of_js (Ojs.array_get x4430 1))))
          (Ojs.call (this_to_js Obj.magic x4427) "entries" [||])
    let (keys : 'tags this -> string IterableIterator.t_1) =
      fun (x4431 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4431) "keys" [||])
    let (values : 'tags this -> string IterableIterator.t_1) =
      fun (x4434 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4434) "values" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Headers")
             "prototype")
    let (create : ?init:HeadersInit.t -> unit -> t) =
      fun ?init:(x4437 : HeadersInit.t option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Headers")
               (let x4438 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x4437 with
                 | Some x4439 ->
                     ignore
                       (Ojs.call x4438 "push" [|(HeadersInit.t_to_js x4439)|])
                 | None -> ());
                x4438))
  end
 and
  HeadersInit:sig
                type t =
                  (string list list, Headers.t, (string, string) Record.t_2)
                    union3
                type t_0 = t
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
              end =
  struct
    type t =
      (string list list, Headers.t, (string, string) Record.t_2) union3
    let rec t_of_js : Ojs.t -> t =
      fun (x4448 : Ojs.t) ->
        union3_of_js
          (fun (x4449 : Ojs.t) ->
             Ojs.list_of_js
               (fun (x4450 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x4450)
               x4449) Headers.t_of_js
          (fun (x4453 : Ojs.t) ->
             Record.t_2_of_js Ojs.string_of_js Ojs.string_of_js x4453) x4448
    and t_to_js : t -> Ojs.t =
      fun
        (x4440 :
          (string list list, Headers.t, (string, string) Record.t_2) union3)
        ->
        union3_to_js
          (fun (x4441 : string list list) ->
             Ojs.list_to_js
               (fun (x4442 : string list) ->
                  Ojs.list_to_js Ojs.string_to_js x4442) x4441)
          Headers.t_to_js
          (fun (x4445 : (string, string) Record.t_2) ->
             Record.t_2_to_js Ojs.string_to_js Ojs.string_to_js x4445) x4440
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4457 : Ojs.t) -> t_of_js x4457
    and t_0_to_js : t_0 -> Ojs.t = fun (x4456 : t) -> t_to_js x4456
  end
module ResponseInit =
  struct
    type t = [ `ResponseInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4459 : Ojs.t) -> t_of_js x4459
    and t_0_to_js : t_0 -> Ojs.t = fun (x4458 : t) -> t_to_js x4458
    type tags = [ `ResponseInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ResponseInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4462 : Ojs.t) -> intf_of_js __tags_of_js x4462
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4460 : __tags intf) -> intf_to_js __tags_to_js x4460
    let (get_headers : 'tags this -> HeadersInit.t option) =
      fun (x4464 : 'tags this) ->
        Ojs.option_of_js HeadersInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4464) "headers")
    let (set_headers : 'tags this -> HeadersInit.t -> unit) =
      fun (x4467 : 'tags this) ->
        fun (x4468 : HeadersInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4467) "headers"
            (HeadersInit.t_to_js x4468)
    let (get_status : 'tags this -> float option) =
      fun (x4470 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4470) "status")
    let (set_status : 'tags this -> float -> unit) =
      fun (x4473 : 'tags this) ->
        fun (x4474 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4473) "status"
            (Ojs.float_to_js x4474)
    let (get_statusText : 'tags this -> string option) =
      fun (x4476 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4476) "statusText")
    let (set_statusText : 'tags this -> string -> unit) =
      fun (x4479 : 'tags this) ->
        fun (x4480 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4479) "statusText"
            (Ojs.string_to_js x4480)
    let (create :
      ?headers:HeadersInit.t ->
        ?status:float -> ?statusText:string -> unit -> t)
      =
      fun ?headers:(x4482 : HeadersInit.t option) ->
        fun ?status:(x4483 : float option) ->
          fun ?statusText:(x4484 : string option) ->
            fun () ->
              let x4485 = Ojs.empty_obj () in
              (match x4482 with
               | Some x4488 ->
                   Ojs.set_prop_ascii x4485 "headers"
                     (HeadersInit.t_to_js x4488)
               | None -> ());
              (match x4483 with
               | Some x4487 ->
                   Ojs.set_prop_ascii x4485 "status" (Ojs.float_to_js x4487)
               | None -> ());
              (match x4484 with
               | Some x4486 ->
                   Ojs.set_prop_ascii x4485 "statusText"
                     (Ojs.string_to_js x4486)
               | None -> ());
              t_of_js x4485
    let cast_from = Obj.magic
  end
module FormDataEntryValue =
  struct
    type t = [ `String of string  | `Other of File.t ] Primitive.t
    let rec t_of_js : Ojs.t -> t =
      fun (x4493 : Ojs.t) ->
        Primitive.t_of_js
          (fun (x4494 : Ojs.t) ->
             let x4495 = x4494 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x4495 "dummy") with
             | "String" -> `String (Ojs.string_of_js x4495)
             | "Other" -> `Other (File.t_of_js x4495)
             | _ -> assert false) x4493
    and t_to_js : t -> Ojs.t =
      fun (x4489 : [ `String of string  | `Other of File.t ] Primitive.t) ->
        Primitive.t_to_js
          (fun (x4490 : [ `String of string  | `Other of File.t ]) ->
             match x4490 with
             | `String x4491 -> Ojs.string_to_js x4491
             | `Other x4492 -> File.t_to_js x4492) x4489
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4497 : Ojs.t) -> t_of_js x4497
    and t_0_to_js : t_0 -> Ojs.t = fun (x4496 : t) -> t_to_js x4496
  end
module FormData =
  struct
    type t =
      [ `FormData  | (string * FormDataEntryValue.t) IterableIterator.tags_1]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4499 : Ojs.t) -> t_of_js x4499
    and t_0_to_js : t_0 -> Ojs.t = fun (x4498 : t) -> t_to_js x4498
    type tags =
      [ `FormData  | (string * FormDataEntryValue.t) IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FormData ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4502 : Ojs.t) -> intf_of_js __tags_of_js x4502
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4500 : __tags intf) -> intf_to_js __tags_to_js x4500
    let (append :
      'tags this ->
        name:string ->
          value:[ `U1 of string  | `U2 of Blob.t ] ->
            ?fileName:string -> unit -> unit)
      =
      fun (x4511 : 'tags this) ->
        fun ~name:(x4504 : string) ->
          fun ~value:(x4505 : [ `U1 of string  | `U2 of Blob.t ]) ->
            fun ?fileName:(x4506 : string option) ->
              fun () ->
                ignore
                  (let x4513 = this_to_js Obj.magic x4511 in
                   Ojs.call (Ojs.get_prop_ascii x4513 "append") "apply"
                     [|x4513;((let x4507 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4507 "push"
                                    [|(Ojs.string_to_js x4504)|]);
                               ignore
                                 (Ojs.call x4507 "push"
                                    [|((match x4505 with
                                        | `U1 x4509 -> Ojs.string_to_js x4509
                                        | `U2 x4510 -> Blob.t_to_js x4510))|]);
                               (match x4506 with
                                | Some x4508 ->
                                    ignore
                                      (Ojs.call x4507 "push"
                                         [|(Ojs.string_to_js x4508)|])
                                | None -> ());
                               x4507))|])
    let (delete : 'tags this -> name:string -> unit) =
      fun (x4515 : 'tags this) ->
        fun ~name:(x4514 : string) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x4515) "delete"
               [|(Ojs.string_to_js x4514)|])
    let (get_ : 'tags this -> name:string -> FormDataEntryValue.t option) =
      fun (x4518 : 'tags this) ->
        fun ~name:(x4517 : string) ->
          Ojs.option_of_js FormDataEntryValue.t_of_js
            (Ojs.call (this_to_js Obj.magic x4518) "get"
               [|(Ojs.string_to_js x4517)|])
    let (getAll : 'tags this -> name:string -> FormDataEntryValue.t list) =
      fun (x4522 : 'tags this) ->
        fun ~name:(x4521 : string) ->
          Ojs.list_of_js FormDataEntryValue.t_of_js
            (Ojs.call (this_to_js Obj.magic x4522) "getAll"
               [|(Ojs.string_to_js x4521)|])
    let (has : 'tags this -> name:string -> bool) =
      fun (x4526 : 'tags this) ->
        fun ~name:(x4525 : string) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x4526) "has"
               [|(Ojs.string_to_js x4525)|])
    let (set_ :
      'tags this ->
        name:string ->
          value:[ `U1 of string  | `U2 of Blob.t ] ->
            ?fileName:string -> unit -> unit)
      =
      fun (x4535 : 'tags this) ->
        fun ~name:(x4528 : string) ->
          fun ~value:(x4529 : [ `U1 of string  | `U2 of Blob.t ]) ->
            fun ?fileName:(x4530 : string option) ->
              fun () ->
                ignore
                  (let x4537 = this_to_js Obj.magic x4535 in
                   Ojs.call (Ojs.get_prop_ascii x4537 "set") "apply"
                     [|x4537;((let x4531 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4531 "push"
                                    [|(Ojs.string_to_js x4528)|]);
                               ignore
                                 (Ojs.call x4531 "push"
                                    [|((match x4529 with
                                        | `U1 x4533 -> Ojs.string_to_js x4533
                                        | `U2 x4534 -> Blob.t_to_js x4534))|]);
                               (match x4530 with
                                | Some x4532 ->
                                    ignore
                                      (Ojs.call x4531 "push"
                                         [|(Ojs.string_to_js x4532)|])
                                | None -> ());
                               x4531))|])
    let (forEach :
      'tags this ->
        callbackfn:(value:FormDataEntryValue.t ->
                      key:string -> parent:t -> unit)
          -> ?thisArg:any -> unit -> unit)
      =
      fun (x4545 : 'tags this) ->
        fun
          ~callbackfn:(x4538 :
                        value:FormDataEntryValue.t ->
                          key:string -> parent:t -> unit)
          ->
          fun ?thisArg:(x4539 : any option) ->
            fun () ->
              ignore
                (let x4547 = this_to_js Obj.magic x4545 in
                 Ojs.call (Ojs.get_prop_ascii x4547 "forEach") "apply"
                   [|x4547;((let x4540 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4540 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4542 : Ojs.t) ->
                                          fun (x4543 : Ojs.t) ->
                                            fun (x4544 : Ojs.t) ->
                                              x4538
                                                ~value:(FormDataEntryValue.t_of_js
                                                          x4542)
                                                ~key:(Ojs.string_of_js x4543)
                                                ~parent:(t_of_js x4544)))|]);
                             (match x4539 with
                              | Some x4541 ->
                                  ignore
                                    (Ojs.call x4540 "push"
                                       [|(any_to_js x4541)|])
                              | None -> ());
                             x4540))|])
    let (entries :
      'tags this -> (string * FormDataEntryValue.t) IterableIterator.t_1) =
      fun (x4548 : 'tags this) ->
        IterableIterator.t_1_of_js
          (fun (x4550 : Ojs.t) ->
             let x4551 = x4550 in
             ((Ojs.string_of_js (Ojs.array_get x4551 0)),
               (FormDataEntryValue.t_of_js (Ojs.array_get x4551 1))))
          (Ojs.call (this_to_js Obj.magic x4548) "entries" [||])
    let (keys : 'tags this -> string IterableIterator.t_1) =
      fun (x4552 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4552) "keys" [||])
    let (values : 'tags this -> FormDataEntryValue.t IterableIterator.t_1) =
      fun (x4555 : 'tags this) ->
        IterableIterator.t_1_of_js FormDataEntryValue.t_of_js
          (Ojs.call (this_to_js Obj.magic x4555) "values" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FormData")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FormData") [||])
  end
module XMLHttpRequestBodyInit =
  struct
    type t =
      [ `String of string 
      | `Other of
          (Blob.t, BufferSource.t, FormData.t, URLSearchParams.t) union4 ]
        Primitive.t
    let rec t_of_js : Ojs.t -> t =
      fun (x4566 : Ojs.t) ->
        Primitive.t_of_js
          (fun (x4567 : Ojs.t) ->
             let x4568 = x4567 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x4568 "dummy") with
             | "String" -> `String (Ojs.string_of_js x4568)
             | "Other" ->
                 `Other
                   (union4_of_js Blob.t_of_js BufferSource.t_of_js
                      FormData.t_of_js URLSearchParams.t_of_js x4568)
             | _ -> assert false) x4566
    and t_to_js : t -> Ojs.t =
      fun
        (x4558 :
          [ `String of string 
          | `Other of
              (Blob.t, BufferSource.t, FormData.t, URLSearchParams.t) union4 ]
            Primitive.t)
        ->
        Primitive.t_to_js
          (fun
             (x4559 :
               [ `String of string 
               | `Other of
                   (Blob.t, BufferSource.t, FormData.t, URLSearchParams.t)
                     union4
                   ])
             ->
             match x4559 with
             | `String x4560 -> Ojs.string_to_js x4560
             | `Other x4561 ->
                 union4_to_js Blob.t_to_js BufferSource.t_to_js
                   FormData.t_to_js URLSearchParams.t_to_js x4561) x4558
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4574 : Ojs.t) -> t_of_js x4574
    and t_0_to_js : t_0 -> Ojs.t = fun (x4573 : t) -> t_to_js x4573
  end
module BodyInit =
  struct
    type t = (ReadableStream.t_0, XMLHttpRequestBodyInit.t) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x4578 : Ojs.t) ->
        union2_of_js ReadableStream.t_0_of_js XMLHttpRequestBodyInit.t_of_js
          x4578
    and t_to_js : t -> Ojs.t =
      fun (x4575 : (ReadableStream.t_0, XMLHttpRequestBodyInit.t) union2) ->
        union2_to_js ReadableStream.t_0_to_js XMLHttpRequestBodyInit.t_to_js
          x4575
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4582 : Ojs.t) -> t_of_js x4582
    and t_0_to_js : t_0 -> Ojs.t = fun (x4581 : t) -> t_to_js x4581
  end
module Body =
  struct
    type t = [ `Body ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4584 : Ojs.t) -> t_of_js x4584
    and t_0_to_js : t_0 -> Ojs.t = fun (x4583 : t) -> t_to_js x4583
    type tags = [ `Body ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Body ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4587 : Ojs.t) -> intf_of_js __tags_of_js x4587
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4585 : __tags intf) -> intf_to_js __tags_to_js x4585
    let (get_body : 'tags this -> Uint8Array.t_0 ReadableStream.t option) =
      fun (x4589 : 'tags this) ->
        Ojs.option_of_js
          (fun (x4591 : Ojs.t) ->
             ReadableStream.t_of_js Uint8Array.t_0_of_js x4591)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4589) "body")
    let (get_bodyUsed : 'tags this -> bool) =
      fun (x4593 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4593) "bodyUsed")
    let (arrayBuffer : 'tags this -> ArrayBuffer.t_0 Promise.t_1) =
      fun (x4595 : 'tags this) ->
        Promise.t_1_of_js ArrayBuffer.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x4595) "arrayBuffer" [||])
    let (blob : 'tags this -> Blob.t Promise.t_1) =
      fun (x4598 : 'tags this) ->
        Promise.t_1_of_js Blob.t_of_js
          (Ojs.call (this_to_js Obj.magic x4598) "blob" [||])
    let (formData : 'tags this -> FormData.t Promise.t_1) =
      fun (x4601 : 'tags this) ->
        Promise.t_1_of_js FormData.t_of_js
          (Ojs.call (this_to_js Obj.magic x4601) "formData" [||])
    let (json : 'tags this -> any Promise.t_1) =
      fun (x4604 : 'tags this) ->
        Promise.t_1_of_js any_of_js
          (Ojs.call (this_to_js Obj.magic x4604) "json" [||])
    let (text : 'tags this -> string Promise.t_1) =
      fun (x4607 : 'tags this) ->
        Promise.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4607) "text" [||])
    let cast_from = Obj.magic
  end
module Response =
  struct
    type t = [ `Body  | `Response ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4611 : Ojs.t) -> t_of_js x4611
    and t_0_to_js : t_0 -> Ojs.t = fun (x4610 : t) -> t_to_js x4610
    type tags = [ `Body  | `Response ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Response ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4614 : Ojs.t) -> intf_of_js __tags_of_js x4614
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4612 : __tags intf) -> intf_to_js __tags_to_js x4612
    let (get_headers : 'tags this -> Headers.t) =
      fun (x4616 : 'tags this) ->
        Headers.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4616) "headers")
    let (get_ok : 'tags this -> bool) =
      fun (x4618 : 'tags this) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x4618) "ok")
    let (get_redirected : 'tags this -> bool) =
      fun (x4620 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4620) "redirected")
    let (get_status : 'tags this -> float) =
      fun (x4622 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4622) "status")
    let (get_statusText : 'tags this -> string) =
      fun (x4624 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4624) "statusText")
    let (get_type : 'tags this -> ResponseType.t) =
      fun (x4626 : 'tags this) ->
        ResponseType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4626) "type")
    let (get_url : 'tags this -> string) =
      fun (x4628 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4628) "url")
    let (clone : 'tags this -> t) =
      fun (x4630 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x4630) "clone" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Response")
             "prototype")
    let (create :
      ?body:BodyInit.t option -> ?init:ResponseInit.t -> unit -> t) =
      fun ?body:(x4632 : BodyInit.t option option) ->
        fun ?init:(x4633 : ResponseInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Response")
                 (let x4634 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x4632 with
                   | Some x4636 ->
                       ignore
                         (Ojs.call x4634 "push"
                            [|(Ojs.option_to_js BodyInit.t_to_js x4636)|])
                   | None -> ());
                  (match x4633 with
                   | Some x4635 ->
                       ignore
                         (Ojs.call x4634 "push"
                            [|(ResponseInit.t_to_js x4635)|])
                   | None -> ());
                  x4634))
    let (error : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Response") "error" [||])
    let (redirect :
      url:[ `U1 of string  | `U2 of URL.t ] -> ?status:float -> unit -> t) =
      fun ~url:(x4638 : [ `U1 of string  | `U2 of URL.t ]) ->
        fun ?status:(x4639 : float option) ->
          fun () ->
            t_of_js
              (let x4644 = Ojs.get_prop_ascii Ojs.global "Response" in
               Ojs.call (Ojs.get_prop_ascii x4644 "redirect") "apply"
                 [|x4644;((let x4640 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x4640 "push"
                                [|((match x4638 with
                                    | `U1 x4642 -> Ojs.string_to_js x4642
                                    | `U2 x4643 -> URL.t_to_js x4643))|]);
                           (match x4639 with
                            | Some x4641 ->
                                ignore
                                  (Ojs.call x4640 "push"
                                     [|(Ojs.float_to_js x4641)|])
                            | None -> ());
                           x4640))|])
  end
module RequestRedirect =
  struct
    type t = [ `L_s112_manual  | `L_s68_error  | `L_s77_follow ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4646 : Ojs.t) ->
        let x4647 = x4646 in
        match Ojs.string_of_js x4647 with
        | "manual" -> `L_s112_manual
        | "error" -> `L_s68_error
        | "follow" -> `L_s77_follow
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x4645 : [ `L_s112_manual  | `L_s68_error  | `L_s77_follow ]) ->
        match x4645 with
        | `L_s112_manual -> Ojs.string_to_js "manual"
        | `L_s68_error -> Ojs.string_to_js "error"
        | `L_s77_follow -> Ojs.string_to_js "follow"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4649 : Ojs.t) -> t_of_js x4649
    and t_0_to_js : t_0 -> Ojs.t = fun (x4648 : t) -> t_to_js x4648
  end
module RequestMode =
  struct
    type t =
      [ `L_s121_navigate  | `L_s126_no_cors  | `L_s175_same_origin 
      | `L_s55_cors ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4651 : Ojs.t) ->
        let x4652 = x4651 in
        match Ojs.string_of_js x4652 with
        | "navigate" -> `L_s121_navigate
        | "no-cors" -> `L_s126_no_cors
        | "same-origin" -> `L_s175_same_origin
        | "cors" -> `L_s55_cors
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x4650 :
          [ `L_s121_navigate  | `L_s126_no_cors  | `L_s175_same_origin 
          | `L_s55_cors ])
        ->
        match x4650 with
        | `L_s121_navigate -> Ojs.string_to_js "navigate"
        | `L_s126_no_cors -> Ojs.string_to_js "no-cors"
        | `L_s175_same_origin -> Ojs.string_to_js "same-origin"
        | `L_s55_cors -> Ojs.string_to_js "cors"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4654 : Ojs.t) -> t_of_js x4654
    and t_0_to_js : t_0 -> Ojs.t = fun (x4653 : t) -> t_to_js x4653
  end
module RequestCredentials =
  struct
    type t = [ `L_s136_omit  | `L_s175_same_origin  | `L_s94_include ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4656 : Ojs.t) ->
        let x4657 = x4656 in
        match Ojs.string_of_js x4657 with
        | "omit" -> `L_s136_omit
        | "same-origin" -> `L_s175_same_origin
        | "include" -> `L_s94_include
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x4655 : [ `L_s136_omit  | `L_s175_same_origin  | `L_s94_include ])
        ->
        match x4655 with
        | `L_s136_omit -> Ojs.string_to_js "omit"
        | `L_s175_same_origin -> Ojs.string_to_js "same-origin"
        | `L_s94_include -> Ojs.string_to_js "include"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4659 : Ojs.t) -> t_of_js x4659
    and t_0_to_js : t_0 -> Ojs.t = fun (x4658 : t) -> t_to_js x4658
  end
module RequestCache =
  struct
    type t =
      [ `L_s125_no_cache  | `L_s129_no_store  | `L_s138_only_if_cached 
      | `L_s171_reload  | `L_s57_default  | `L_s79_force_cache ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4661 : Ojs.t) ->
        let x4662 = x4661 in
        match Ojs.string_of_js x4662 with
        | "no-cache" -> `L_s125_no_cache
        | "no-store" -> `L_s129_no_store
        | "only-if-cached" -> `L_s138_only_if_cached
        | "reload" -> `L_s171_reload
        | "default" -> `L_s57_default
        | "force-cache" -> `L_s79_force_cache
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x4660 :
          [ `L_s125_no_cache  | `L_s129_no_store  | `L_s138_only_if_cached 
          | `L_s171_reload  | `L_s57_default  | `L_s79_force_cache ])
        ->
        match x4660 with
        | `L_s125_no_cache -> Ojs.string_to_js "no-cache"
        | `L_s129_no_store -> Ojs.string_to_js "no-store"
        | `L_s138_only_if_cached -> Ojs.string_to_js "only-if-cached"
        | `L_s171_reload -> Ojs.string_to_js "reload"
        | `L_s57_default -> Ojs.string_to_js "default"
        | `L_s79_force_cache -> Ojs.string_to_js "force-cache"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4664 : Ojs.t) -> t_of_js x4664
    and t_0_to_js : t_0 -> Ojs.t = fun (x4663 : t) -> t_to_js x4663
  end
module ReferrerPolicy =
  struct
    type t =
      [ `L_s0  | `L_s127_no_referrer  | `L_s128_no_referrer_when_downgrade 
      | `L_s142_origin  | `L_s143_origin_when_cross_origin 
      | `L_s175_same_origin  | `L_s190_strict_origin 
      | `L_s191_strict_origin_when_cross_origin  | `L_s203_unsafe_url ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4666 : Ojs.t) ->
        let x4667 = x4666 in
        match Ojs.string_of_js x4667 with
        | "" -> `L_s0
        | "no-referrer" -> `L_s127_no_referrer
        | "no-referrer-when-downgrade" -> `L_s128_no_referrer_when_downgrade
        | "origin" -> `L_s142_origin
        | "origin-when-cross-origin" -> `L_s143_origin_when_cross_origin
        | "same-origin" -> `L_s175_same_origin
        | "strict-origin" -> `L_s190_strict_origin
        | "strict-origin-when-cross-origin" ->
            `L_s191_strict_origin_when_cross_origin
        | "unsafe-url" -> `L_s203_unsafe_url
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x4665 :
          [ `L_s0  | `L_s127_no_referrer 
          | `L_s128_no_referrer_when_downgrade  | `L_s142_origin 
          | `L_s143_origin_when_cross_origin  | `L_s175_same_origin 
          | `L_s190_strict_origin  | `L_s191_strict_origin_when_cross_origin 
          | `L_s203_unsafe_url ])
        ->
        match x4665 with
        | `L_s0 -> Ojs.string_to_js ""
        | `L_s127_no_referrer -> Ojs.string_to_js "no-referrer"
        | `L_s128_no_referrer_when_downgrade ->
            Ojs.string_to_js "no-referrer-when-downgrade"
        | `L_s142_origin -> Ojs.string_to_js "origin"
        | `L_s143_origin_when_cross_origin ->
            Ojs.string_to_js "origin-when-cross-origin"
        | `L_s175_same_origin -> Ojs.string_to_js "same-origin"
        | `L_s190_strict_origin -> Ojs.string_to_js "strict-origin"
        | `L_s191_strict_origin_when_cross_origin ->
            Ojs.string_to_js "strict-origin-when-cross-origin"
        | `L_s203_unsafe_url -> Ojs.string_to_js "unsafe-url"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4669 : Ojs.t) -> t_of_js x4669
    and t_0_to_js : t_0 -> Ojs.t = fun (x4668 : t) -> t_to_js x4668
  end
module RequestInit =
  struct
    type t = [ `RequestInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4671 : Ojs.t) -> t_of_js x4671
    and t_0_to_js : t_0 -> Ojs.t = fun (x4670 : t) -> t_to_js x4670
    type tags = [ `RequestInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RequestInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4674 : Ojs.t) -> intf_of_js __tags_of_js x4674
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4672 : __tags intf) -> intf_to_js __tags_to_js x4672
    let (get_body : 'tags this -> BodyInit.t option option) =
      fun (x4676 : 'tags this) ->
        Ojs.option_of_js
          (fun (x4678 : Ojs.t) -> Ojs.option_of_js BodyInit.t_of_js x4678)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4676) "body")
    let (set_body : 'tags this -> BodyInit.t option -> unit) =
      fun (x4680 : 'tags this) ->
        fun (x4681 : BodyInit.t option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4680) "body"
            (Ojs.option_to_js BodyInit.t_to_js x4681)
    let (get_cache : 'tags this -> RequestCache.t option) =
      fun (x4684 : 'tags this) ->
        Ojs.option_of_js RequestCache.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4684) "cache")
    let (set_cache : 'tags this -> RequestCache.t -> unit) =
      fun (x4687 : 'tags this) ->
        fun (x4688 : RequestCache.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4687) "cache"
            (RequestCache.t_to_js x4688)
    let (get_credentials : 'tags this -> RequestCredentials.t option) =
      fun (x4690 : 'tags this) ->
        Ojs.option_of_js RequestCredentials.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4690) "credentials")
    let (set_credentials : 'tags this -> RequestCredentials.t -> unit) =
      fun (x4693 : 'tags this) ->
        fun (x4694 : RequestCredentials.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4693) "credentials"
            (RequestCredentials.t_to_js x4694)
    let (get_headers : 'tags this -> HeadersInit.t option) =
      fun (x4696 : 'tags this) ->
        Ojs.option_of_js HeadersInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4696) "headers")
    let (set_headers : 'tags this -> HeadersInit.t -> unit) =
      fun (x4699 : 'tags this) ->
        fun (x4700 : HeadersInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4699) "headers"
            (HeadersInit.t_to_js x4700)
    let (get_integrity : 'tags this -> string option) =
      fun (x4702 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4702) "integrity")
    let (set_integrity : 'tags this -> string -> unit) =
      fun (x4705 : 'tags this) ->
        fun (x4706 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4705) "integrity"
            (Ojs.string_to_js x4706)
    let (get_keepalive : 'tags this -> bool option) =
      fun (x4708 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4708) "keepalive")
    let (set_keepalive : 'tags this -> bool -> unit) =
      fun (x4711 : 'tags this) ->
        fun (x4712 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4711) "keepalive"
            (Ojs.bool_to_js x4712)
    let (get_method : 'tags this -> string option) =
      fun (x4714 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4714) "method")
    let (set_method : 'tags this -> string -> unit) =
      fun (x4717 : 'tags this) ->
        fun (x4718 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4717) "method"
            (Ojs.string_to_js x4718)
    let (get_mode : 'tags this -> RequestMode.t option) =
      fun (x4720 : 'tags this) ->
        Ojs.option_of_js RequestMode.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4720) "mode")
    let (set_mode : 'tags this -> RequestMode.t -> unit) =
      fun (x4723 : 'tags this) ->
        fun (x4724 : RequestMode.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4723) "mode"
            (RequestMode.t_to_js x4724)
    let (get_redirect : 'tags this -> RequestRedirect.t option) =
      fun (x4726 : 'tags this) ->
        Ojs.option_of_js RequestRedirect.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4726) "redirect")
    let (set_redirect : 'tags this -> RequestRedirect.t -> unit) =
      fun (x4729 : 'tags this) ->
        fun (x4730 : RequestRedirect.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4729) "redirect"
            (RequestRedirect.t_to_js x4730)
    let (get_referrer : 'tags this -> string option) =
      fun (x4732 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4732) "referrer")
    let (set_referrer : 'tags this -> string -> unit) =
      fun (x4735 : 'tags this) ->
        fun (x4736 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4735) "referrer"
            (Ojs.string_to_js x4736)
    let (get_referrerPolicy : 'tags this -> ReferrerPolicy.t option) =
      fun (x4738 : 'tags this) ->
        Ojs.option_of_js ReferrerPolicy.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4738) "referrerPolicy")
    let (set_referrerPolicy : 'tags this -> ReferrerPolicy.t -> unit) =
      fun (x4741 : 'tags this) ->
        fun (x4742 : ReferrerPolicy.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4741) "referrerPolicy"
            (ReferrerPolicy.t_to_js x4742)
    let (get_signal : 'tags this -> AbortSignal.t option option) =
      fun (x4744 : 'tags this) ->
        Ojs.option_of_js
          (fun (x4746 : Ojs.t) -> Ojs.option_of_js AbortSignal.t_of_js x4746)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4744) "signal")
    let (set_signal : 'tags this -> AbortSignal.t option -> unit) =
      fun (x4748 : 'tags this) ->
        fun (x4749 : AbortSignal.t option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4748) "signal"
            (Ojs.option_to_js AbortSignal.t_to_js x4749)
    let (get_window : 'tags this -> undefined option) =
      fun (x4752 : 'tags this) ->
        Ojs.option_of_js undefined_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4752) "window")
    let (set_window : 'tags this -> null -> unit) =
      fun (x4755 : 'tags this) ->
        fun (x4756 : null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4755) "window"
            (null_to_js x4756)
    let (create :
      ?body:BodyInit.t ->
        ?cache:RequestCache.t ->
          ?credentials:RequestCredentials.t ->
            ?headers:HeadersInit.t ->
              ?integrity:string ->
                ?keepalive:bool ->
                  ?method_:string ->
                    ?mode:RequestMode.t ->
                      ?redirect:RequestRedirect.t ->
                        ?referrer:string ->
                          ?referrerPolicy:ReferrerPolicy.t ->
                            ?signal:AbortSignal.t ->
                              ?window:never -> unit -> t)
      =
      fun ?body:(x4758 : BodyInit.t option) ->
        fun ?cache:(x4759 : RequestCache.t option) ->
          fun ?credentials:(x4760 : RequestCredentials.t option) ->
            fun ?headers:(x4761 : HeadersInit.t option) ->
              fun ?integrity:(x4762 : string option) ->
                fun ?keepalive:(x4763 : bool option) ->
                  fun ?method_:(x4764 : string option) ->
                    fun ?mode:(x4765 : RequestMode.t option) ->
                      fun ?redirect:(x4766 : RequestRedirect.t option) ->
                        fun ?referrer:(x4767 : string option) ->
                          fun
                            ?referrerPolicy:(x4768 : ReferrerPolicy.t option)
                            ->
                            fun ?signal:(x4769 : AbortSignal.t option) ->
                              fun ?window:(x4770 : never option) ->
                                fun () ->
                                  let x4771 = Ojs.empty_obj () in
                                  (match x4758 with
                                   | Some x4784 ->
                                       Ojs.set_prop_ascii x4771 "body"
                                         (BodyInit.t_to_js x4784)
                                   | None -> ());
                                  (match x4759 with
                                   | Some x4783 ->
                                       Ojs.set_prop_ascii x4771 "cache"
                                         (RequestCache.t_to_js x4783)
                                   | None -> ());
                                  (match x4760 with
                                   | Some x4782 ->
                                       Ojs.set_prop_ascii x4771 "credentials"
                                         (RequestCredentials.t_to_js x4782)
                                   | None -> ());
                                  (match x4761 with
                                   | Some x4781 ->
                                       Ojs.set_prop_ascii x4771 "headers"
                                         (HeadersInit.t_to_js x4781)
                                   | None -> ());
                                  (match x4762 with
                                   | Some x4780 ->
                                       Ojs.set_prop_ascii x4771 "integrity"
                                         (Ojs.string_to_js x4780)
                                   | None -> ());
                                  (match x4763 with
                                   | Some x4779 ->
                                       Ojs.set_prop_ascii x4771 "keepalive"
                                         (Ojs.bool_to_js x4779)
                                   | None -> ());
                                  (match x4764 with
                                   | Some x4778 ->
                                       Ojs.set_prop_ascii x4771 "method"
                                         (Ojs.string_to_js x4778)
                                   | None -> ());
                                  (match x4765 with
                                   | Some x4777 ->
                                       Ojs.set_prop_ascii x4771 "mode"
                                         (RequestMode.t_to_js x4777)
                                   | None -> ());
                                  (match x4766 with
                                   | Some x4776 ->
                                       Ojs.set_prop_ascii x4771 "redirect"
                                         (RequestRedirect.t_to_js x4776)
                                   | None -> ());
                                  (match x4767 with
                                   | Some x4775 ->
                                       Ojs.set_prop_ascii x4771 "referrer"
                                         (Ojs.string_to_js x4775)
                                   | None -> ());
                                  (match x4768 with
                                   | Some x4774 ->
                                       Ojs.set_prop_ascii x4771
                                         "referrerPolicy"
                                         (ReferrerPolicy.t_to_js x4774)
                                   | None -> ());
                                  (match x4769 with
                                   | Some x4773 ->
                                       Ojs.set_prop_ascii x4771 "signal"
                                         (AbortSignal.t_to_js x4773)
                                   | None -> ());
                                  (match x4770 with
                                   | Some x4772 ->
                                       Ojs.set_prop_ascii x4771 "window"
                                         (never_to_js x4772)
                                   | None -> ());
                                  t_of_js x4771
    let cast_from = Obj.magic
  end
module RequestDestination =
  struct
    type t =
      [ `L_s0  | `L_s111_manifest  | `L_s134_object  | `L_s147_paintworklet 
      | `L_s172_report  | `L_s177_script  | `L_s180_sharedworker 
      | `L_s192_style  | `L_s198_track  | `L_s210_video  | `L_s215_worker 
      | `L_s218_xslt  | `L_s38_audio  | `L_s39_audioworklet 
      | `L_s63_document  | `L_s65_embed  | `L_s78_font  | `L_s80_frame 
      | `L_s91_iframe  | `L_s92_image ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4786 : Ojs.t) ->
        let x4787 = x4786 in
        match Ojs.string_of_js x4787 with
        | "" -> `L_s0
        | "manifest" -> `L_s111_manifest
        | "object" -> `L_s134_object
        | "paintworklet" -> `L_s147_paintworklet
        | "report" -> `L_s172_report
        | "script" -> `L_s177_script
        | "sharedworker" -> `L_s180_sharedworker
        | "style" -> `L_s192_style
        | "track" -> `L_s198_track
        | "video" -> `L_s210_video
        | "worker" -> `L_s215_worker
        | "xslt" -> `L_s218_xslt
        | "audio" -> `L_s38_audio
        | "audioworklet" -> `L_s39_audioworklet
        | "document" -> `L_s63_document
        | "embed" -> `L_s65_embed
        | "font" -> `L_s78_font
        | "frame" -> `L_s80_frame
        | "iframe" -> `L_s91_iframe
        | "image" -> `L_s92_image
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x4785 :
          [ `L_s0  | `L_s111_manifest  | `L_s134_object 
          | `L_s147_paintworklet  | `L_s172_report  | `L_s177_script 
          | `L_s180_sharedworker  | `L_s192_style  | `L_s198_track 
          | `L_s210_video  | `L_s215_worker  | `L_s218_xslt  | `L_s38_audio 
          | `L_s39_audioworklet  | `L_s63_document  | `L_s65_embed 
          | `L_s78_font  | `L_s80_frame  | `L_s91_iframe  | `L_s92_image ])
        ->
        match x4785 with
        | `L_s0 -> Ojs.string_to_js ""
        | `L_s111_manifest -> Ojs.string_to_js "manifest"
        | `L_s134_object -> Ojs.string_to_js "object"
        | `L_s147_paintworklet -> Ojs.string_to_js "paintworklet"
        | `L_s172_report -> Ojs.string_to_js "report"
        | `L_s177_script -> Ojs.string_to_js "script"
        | `L_s180_sharedworker -> Ojs.string_to_js "sharedworker"
        | `L_s192_style -> Ojs.string_to_js "style"
        | `L_s198_track -> Ojs.string_to_js "track"
        | `L_s210_video -> Ojs.string_to_js "video"
        | `L_s215_worker -> Ojs.string_to_js "worker"
        | `L_s218_xslt -> Ojs.string_to_js "xslt"
        | `L_s38_audio -> Ojs.string_to_js "audio"
        | `L_s39_audioworklet -> Ojs.string_to_js "audioworklet"
        | `L_s63_document -> Ojs.string_to_js "document"
        | `L_s65_embed -> Ojs.string_to_js "embed"
        | `L_s78_font -> Ojs.string_to_js "font"
        | `L_s80_frame -> Ojs.string_to_js "frame"
        | `L_s91_iframe -> Ojs.string_to_js "iframe"
        | `L_s92_image -> Ojs.string_to_js "image"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4789 : Ojs.t) -> t_of_js x4789
    and t_0_to_js : t_0 -> Ojs.t = fun (x4788 : t) -> t_to_js x4788
  end
module rec
  Request:sig
            type t = [ `Body  | `Request ] intf
            type t_0 = t
            [@@@js.stop ]
            type tags = [ `Body  | `Request ]
            type tags_0 = tags
            [@@@js.start ]
            [@@@js.implem
              type tags = [ `Body  | `Request ]
              type tags_0 = tags]
            type 'tags this = 'tags intf constraint 'tags = [> `Request ]
            val t_to_js : t -> Ojs.t
            val t_of_js : Ojs.t -> t
            val t_0_to_js : t_0 -> Ojs.t
            val t_0_of_js : Ojs.t -> t_0
            val get_cache : 'tags this -> RequestCache.t
            val get_credentials : 'tags this -> RequestCredentials.t
            val get_destination : 'tags this -> RequestDestination.t
            val get_headers : 'tags this -> Headers.t
            val get_integrity : 'tags this -> string
            val get_keepalive : 'tags this -> bool
            val get_method : 'tags this -> string
            val get_mode : 'tags this -> RequestMode.t
            val get_redirect : 'tags this -> RequestRedirect.t
            val get_referrer : 'tags this -> string
            val get_referrerPolicy : 'tags this -> ReferrerPolicy.t
            val get_signal : 'tags this -> AbortSignal.t
            val get_url : 'tags this -> string
            val clone : 'tags this -> t
            val cast_from : 'tags this -> t
            val prototype : unit -> t
            val create :
              input:RequestInfo.t -> ?init:RequestInit.t -> unit -> t
          end =
  struct
    type t = [ `Body  | `Request ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4791 : Ojs.t) -> t_of_js x4791
    and t_0_to_js : t_0 -> Ojs.t = fun (x4790 : t) -> t_to_js x4790
    type tags = [ `Body  | `Request ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Request ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4794 : Ojs.t) -> intf_of_js __tags_of_js x4794
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4792 : __tags intf) -> intf_to_js __tags_to_js x4792
    let (get_cache : 'tags this -> RequestCache.t) =
      fun (x4796 : 'tags this) ->
        RequestCache.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4796) "cache")
    let (get_credentials : 'tags this -> RequestCredentials.t) =
      fun (x4798 : 'tags this) ->
        RequestCredentials.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4798) "credentials")
    let (get_destination : 'tags this -> RequestDestination.t) =
      fun (x4800 : 'tags this) ->
        RequestDestination.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4800) "destination")
    let (get_headers : 'tags this -> Headers.t) =
      fun (x4802 : 'tags this) ->
        Headers.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4802) "headers")
    let (get_integrity : 'tags this -> string) =
      fun (x4804 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4804) "integrity")
    let (get_keepalive : 'tags this -> bool) =
      fun (x4806 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4806) "keepalive")
    let (get_method : 'tags this -> string) =
      fun (x4808 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4808) "method")
    let (get_mode : 'tags this -> RequestMode.t) =
      fun (x4810 : 'tags this) ->
        RequestMode.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4810) "mode")
    let (get_redirect : 'tags this -> RequestRedirect.t) =
      fun (x4812 : 'tags this) ->
        RequestRedirect.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4812) "redirect")
    let (get_referrer : 'tags this -> string) =
      fun (x4814 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4814) "referrer")
    let (get_referrerPolicy : 'tags this -> ReferrerPolicy.t) =
      fun (x4816 : 'tags this) ->
        ReferrerPolicy.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4816) "referrerPolicy")
    let (get_signal : 'tags this -> AbortSignal.t) =
      fun (x4818 : 'tags this) ->
        AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4818) "signal")
    let (get_url : 'tags this -> string) =
      fun (x4820 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4820) "url")
    let (clone : 'tags this -> t) =
      fun (x4822 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x4822) "clone" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Request")
             "prototype")
    let (create : input:RequestInfo.t -> ?init:RequestInit.t -> unit -> t) =
      fun ~input:(x4824 : RequestInfo.t) ->
        fun ?init:(x4825 : RequestInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Request")
                 (let x4826 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x4826 "push" [|(RequestInfo.t_to_js x4824)|]);
                  (match x4825 with
                   | Some x4827 ->
                       ignore
                         (Ojs.call x4826 "push"
                            [|(RequestInit.t_to_js x4827)|])
                   | None -> ());
                  x4826))
  end
 and
  RequestInfo:sig
                type t =
                  [ `String of string  | `Other of Request.t ] Primitive.t
                type t_0 = t
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
              end =
  struct
    type t = [ `String of string  | `Other of Request.t ] Primitive.t
    let rec t_of_js : Ojs.t -> t =
      fun (x4832 : Ojs.t) ->
        Primitive.t_of_js
          (fun (x4833 : Ojs.t) ->
             let x4834 = x4833 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x4834 "dummy") with
             | "String" -> `String (Ojs.string_of_js x4834)
             | "Other" -> `Other (Request.t_of_js x4834)
             | _ -> assert false) x4832
    and t_to_js : t -> Ojs.t =
      fun (x4828 : [ `String of string  | `Other of Request.t ] Primitive.t)
        ->
        Primitive.t_to_js
          (fun (x4829 : [ `String of string  | `Other of Request.t ]) ->
             match x4829 with
             | `String x4830 -> Ojs.string_to_js x4830
             | `Other x4831 -> Request.t_to_js x4831) x4828
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4836 : Ojs.t) -> t_of_js x4836
    and t_0_to_js : t_0 -> Ojs.t = fun (x4835 : t) -> t_to_js x4835
  end
module Cache =
  struct
    type t = [ `Cache ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4838 : Ojs.t) -> t_of_js x4838
    and t_0_to_js : t_0 -> Ojs.t = fun (x4837 : t) -> t_to_js x4837
    type tags = [ `Cache ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Cache ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4841 : Ojs.t) -> intf_of_js __tags_of_js x4841
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4839 : __tags intf) -> intf_to_js __tags_to_js x4839
    let (add : 'tags this -> request:RequestInfo.t -> unit Promise.t_1) =
      fun (x4844 : 'tags this) ->
        fun ~request:(x4843 : RequestInfo.t) ->
          Promise.t_1_of_js Ojs.unit_of_js
            (Ojs.call (this_to_js Obj.magic x4844) "add"
               [|(RequestInfo.t_to_js x4843)|])
    let (addAll :
      'tags this -> requests:RequestInfo.t list -> unit Promise.t_1) =
      fun (x4849 : 'tags this) ->
        fun ~requests:(x4847 : RequestInfo.t list) ->
          Promise.t_1_of_js Ojs.unit_of_js
            (Ojs.call (this_to_js Obj.magic x4849) "addAll"
               [|(Ojs.list_to_js RequestInfo.t_to_js x4847)|])
    let (delete :
      'tags this ->
        request:RequestInfo.t ->
          ?options:CacheQueryOptions.t -> unit -> bool Promise.t_1)
      =
      fun (x4856 : 'tags this) ->
        fun ~request:(x4852 : RequestInfo.t) ->
          fun ?options:(x4853 : CacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js Ojs.bool_of_js
                (let x4858 = this_to_js Obj.magic x4856 in
                 Ojs.call (Ojs.get_prop_ascii x4858 "delete") "apply"
                   [|x4858;((let x4854 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4854 "push"
                                  [|(RequestInfo.t_to_js x4852)|]);
                             (match x4853 with
                              | Some x4855 ->
                                  ignore
                                    (Ojs.call x4854 "push"
                                       [|(CacheQueryOptions.t_to_js x4855)|])
                              | None -> ());
                             x4854))|])
    let (keys :
      'tags this ->
        ?request:RequestInfo.t ->
          ?options:CacheQueryOptions.t -> unit -> Request.t list Promise.t_1)
      =
      fun (x4865 : 'tags this) ->
        fun ?request:(x4860 : RequestInfo.t option) ->
          fun ?options:(x4861 : CacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x4868 : Ojs.t) -> Ojs.list_of_js Request.t_of_js x4868)
                (let x4867 = this_to_js Obj.magic x4865 in
                 Ojs.call (Ojs.get_prop_ascii x4867 "keys") "apply"
                   [|x4867;((let x4862 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4860 with
                              | Some x4864 ->
                                  ignore
                                    (Ojs.call x4862 "push"
                                       [|(RequestInfo.t_to_js x4864)|])
                              | None -> ());
                             (match x4861 with
                              | Some x4863 ->
                                  ignore
                                    (Ojs.call x4862 "push"
                                       [|(CacheQueryOptions.t_to_js x4863)|])
                              | None -> ());
                             x4862))|])
    let (match_ :
      'tags this ->
        request:RequestInfo.t ->
          ?options:CacheQueryOptions.t ->
            unit -> Response.t option Promise.t_1)
      =
      fun (x4874 : 'tags this) ->
        fun ~request:(x4870 : RequestInfo.t) ->
          fun ?options:(x4871 : CacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x4877 : Ojs.t) ->
                   Ojs.option_of_js Response.t_of_js x4877)
                (let x4876 = this_to_js Obj.magic x4874 in
                 Ojs.call (Ojs.get_prop_ascii x4876 "match") "apply"
                   [|x4876;((let x4872 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4872 "push"
                                  [|(RequestInfo.t_to_js x4870)|]);
                             (match x4871 with
                              | Some x4873 ->
                                  ignore
                                    (Ojs.call x4872 "push"
                                       [|(CacheQueryOptions.t_to_js x4873)|])
                              | None -> ());
                             x4872))|])
    let (matchAll :
      'tags this ->
        ?request:RequestInfo.t ->
          ?options:CacheQueryOptions.t -> unit -> Response.t list Promise.t_1)
      =
      fun (x4884 : 'tags this) ->
        fun ?request:(x4879 : RequestInfo.t option) ->
          fun ?options:(x4880 : CacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x4887 : Ojs.t) -> Ojs.list_of_js Response.t_of_js x4887)
                (let x4886 = this_to_js Obj.magic x4884 in
                 Ojs.call (Ojs.get_prop_ascii x4886 "matchAll") "apply"
                   [|x4886;((let x4881 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4879 with
                              | Some x4883 ->
                                  ignore
                                    (Ojs.call x4881 "push"
                                       [|(RequestInfo.t_to_js x4883)|])
                              | None -> ());
                             (match x4880 with
                              | Some x4882 ->
                                  ignore
                                    (Ojs.call x4881 "push"
                                       [|(CacheQueryOptions.t_to_js x4882)|])
                              | None -> ());
                             x4881))|])
    let (put :
      'tags this ->
        request:RequestInfo.t -> response:Response.t -> unit Promise.t_1)
      =
      fun (x4891 : 'tags this) ->
        fun ~request:(x4889 : RequestInfo.t) ->
          fun ~response:(x4890 : Response.t) ->
            Promise.t_1_of_js Ojs.unit_of_js
              (Ojs.call (this_to_js Obj.magic x4891) "put"
                 [|(RequestInfo.t_to_js x4889);(Response.t_to_js x4890)|])
    let (addAll' :
      'tags this -> requests:RequestInfo.t Iterable.t_1 -> unit Promise.t_1)
      =
      fun (x4896 : 'tags this) ->
        fun ~requests:(x4894 : RequestInfo.t Iterable.t_1) ->
          Promise.t_1_of_js Ojs.unit_of_js
            (Ojs.call (this_to_js Obj.magic x4896) "addAll"
               [|(Iterable.t_1_to_js RequestInfo.t_to_js x4894)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Cache")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Cache") [||])
  end
module CachesStatic =
  struct
    let (delete : string -> bool Promise.t_1) =
      fun (x4899 : string) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "caches") "delete"
             [|(Ojs.string_to_js x4899)|])
    let (has : string -> bool Promise.t_1) =
      fun (x4901 : string) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "caches") "has"
             [|(Ojs.string_to_js x4901)|])
    let (keys : unit -> string list Promise.t_1) =
      fun () ->
        Promise.t_1_of_js
          (fun (x4903 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x4903)
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "caches") "keys" [||])
    let (match_ :
      request:RequestInfo.t ->
        ?options:MultiCacheQueryOptions.t ->
          unit -> Response.t option Promise.t_1)
      =
      fun ~request:(x4905 : RequestInfo.t) ->
        fun ?options:(x4906 : MultiCacheQueryOptions.t option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x4910 : Ojs.t) -> Ojs.option_of_js Response.t_of_js x4910)
              (let x4909 = Ojs.get_prop_ascii Ojs.global "caches" in
               Ojs.call (Ojs.get_prop_ascii x4909 "match") "apply"
                 [|x4909;((let x4907 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x4907 "push"
                                [|(RequestInfo.t_to_js x4905)|]);
                           (match x4906 with
                            | Some x4908 ->
                                ignore
                                  (Ojs.call x4907 "push"
                                     [|(MultiCacheQueryOptions.t_to_js x4908)|])
                            | None -> ());
                           x4907))|])
    let (open_ : string -> Cache.t Promise.t_1) =
      fun (x4912 : string) ->
        Promise.t_1_of_js Cache.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "caches") "open"
             [|(Ojs.string_to_js x4912)|])
  end
module XMLHttpRequestResponseType =
  struct
    type t =
      [ `L_s0  | `L_s195_text  | `L_s37_arraybuffer  | `L_s44_blob 
      | `L_s63_document  | `L_s98_json ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4915 : Ojs.t) ->
        let x4916 = x4915 in
        match Ojs.string_of_js x4916 with
        | "" -> `L_s0
        | "text" -> `L_s195_text
        | "arraybuffer" -> `L_s37_arraybuffer
        | "blob" -> `L_s44_blob
        | "document" -> `L_s63_document
        | "json" -> `L_s98_json
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x4914 :
          [ `L_s0  | `L_s195_text  | `L_s37_arraybuffer  | `L_s44_blob 
          | `L_s63_document  | `L_s98_json ])
        ->
        match x4914 with
        | `L_s0 -> Ojs.string_to_js ""
        | `L_s195_text -> Ojs.string_to_js "text"
        | `L_s37_arraybuffer -> Ojs.string_to_js "arraybuffer"
        | `L_s44_blob -> Ojs.string_to_js "blob"
        | `L_s63_document -> Ojs.string_to_js "document"
        | `L_s98_json -> Ojs.string_to_js "json"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4918 : Ojs.t) -> t_of_js x4918
    and t_0_to_js : t_0 -> Ojs.t = fun (x4917 : t) -> t_to_js x4917
  end
module ProgressEventInit =
  struct
    type t = [ `EventInit  | `ProgressEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4920 : Ojs.t) -> t_of_js x4920
    and t_0_to_js : t_0 -> Ojs.t = fun (x4919 : t) -> t_to_js x4919
    type tags = [ `EventInit  | `ProgressEventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ProgressEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4923 : Ojs.t) -> intf_of_js __tags_of_js x4923
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4921 : __tags intf) -> intf_to_js __tags_to_js x4921
    let (get_lengthComputable : 'tags this -> bool option) =
      fun (x4925 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4925) "lengthComputable")
    let (set_lengthComputable : 'tags this -> bool -> unit) =
      fun (x4928 : 'tags this) ->
        fun (x4929 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4928) "lengthComputable"
            (Ojs.bool_to_js x4929)
    let (get_loaded : 'tags this -> float option) =
      fun (x4931 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4931) "loaded")
    let (set_loaded : 'tags this -> float -> unit) =
      fun (x4934 : 'tags this) ->
        fun (x4935 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4934) "loaded"
            (Ojs.float_to_js x4935)
    let (get_total : 'tags this -> float option) =
      fun (x4937 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4937) "total")
    let (set_total : 'tags this -> float -> unit) =
      fun (x4940 : 'tags this) ->
        fun (x4941 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4940) "total"
            (Ojs.float_to_js x4941)
    let (create :
      ?lengthComputable:bool -> ?loaded:float -> ?total:float -> unit -> t) =
      fun ?lengthComputable:(x4943 : bool option) ->
        fun ?loaded:(x4944 : float option) ->
          fun ?total:(x4945 : float option) ->
            fun () ->
              let x4946 = Ojs.empty_obj () in
              (match x4943 with
               | Some x4949 ->
                   Ojs.set_prop_ascii x4946 "lengthComputable"
                     (Ojs.bool_to_js x4949)
               | None -> ());
              (match x4944 with
               | Some x4948 ->
                   Ojs.set_prop_ascii x4946 "loaded" (Ojs.float_to_js x4948)
               | None -> ());
              (match x4945 with
               | Some x4947 ->
                   Ojs.set_prop_ascii x4946 "total" (Ojs.float_to_js x4947)
               | None -> ());
              t_of_js x4946
    let cast_from = Obj.magic
  end
module ProgressEvent =
  struct
    type 'T t = [ `Event  | `ProgressEvent of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x4952 : Ojs.t) -> t_of_js __T_of_js x4952
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x4950 : __T t) -> t_to_js __T_to_js x4950
    type t_0 = EventTarget.t t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x4956 : Ojs.t) -> t_of_js EventTarget.t_of_js x4956
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x4954 : EventTarget.t t) -> t_to_js EventTarget.t_to_js x4954
    type 'T tags = [ `Event  | `ProgressEvent of 'T ]
    type 'T tags_1 = 'T tags
    type tags_0 = EventTarget.t tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `ProgressEvent of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__T_of_js : Ojs.t -> __T) ->
              fun (x4960 : Ojs.t) -> intf_of_js __tags_of_js x4960
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__T_to_js : __T -> Ojs.t) ->
              fun (x4958 : __tags intf) -> intf_to_js __tags_to_js x4958
    let (get_lengthComputable : ('tags, 'T) this -> bool) =
      fun (x4962 : ('tags, 'T) this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4962)
             "lengthComputable")
    let (get_loaded : ('tags, 'T) this -> float) =
      fun (x4965 : ('tags, 'T) this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4965) "loaded")
    let (get_target : ('tags, 'T) this -> 'T option) =
      fun (x4968 : ('tags, 'T) this) ->
        Ojs.option_of_js Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4968) "target")
    let (get_total : ('tags, 'T) this -> float) =
      fun (x4972 : ('tags, 'T) this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4972) "total")
    let (create :
      lengthComputable:bool ->
        loaded:float -> ?target:'T -> total:float -> unit -> 'T t)
      =
      fun ~lengthComputable:(x4975 : bool) ->
        fun ~loaded:(x4976 : float) ->
          fun ?target:(x4977 : 'T option) ->
            fun ~total:(x4978 : float) ->
              fun () ->
                let x4979 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x4979 "lengthComputable"
                  (Ojs.bool_to_js x4975);
                Ojs.set_prop_ascii x4979 "loaded" (Ojs.float_to_js x4976);
                (match x4977 with
                 | Some x4981 ->
                     Ojs.set_prop_ascii x4979 "target" (Obj.magic x4981)
                 | None -> ());
                Ojs.set_prop_ascii x4979 "total" (Ojs.float_to_js x4978);
                t_of_js Obj.magic x4979
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ProgressEvent")
             "prototype")
    let (create' :
      type_:string -> ?eventInitDict:ProgressEventInit.t -> unit -> t_0) =
      fun ~type_:(x4982 : string) ->
        fun ?eventInitDict:(x4983 : ProgressEventInit.t option) ->
          fun () ->
            t_0_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "ProgressEvent")
                 (let x4984 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x4984 "push" [|(Ojs.string_to_js x4982)|]);
                  (match x4983 with
                   | Some x4985 ->
                       ignore
                         (Ojs.call x4984 "push"
                            [|(ProgressEventInit.t_to_js x4985)|])
                   | None -> ());
                  x4984))
  end
module rec
  XMLHttpRequest:sig
                   type t =
                     [ `EventTarget  | `XMLHttpRequest 
                     | `XMLHttpRequestEventTarget ] intf
                   type t_0 = t
                   [@@@js.stop ]
                   type tags =
                     [ `EventTarget  | `XMLHttpRequest 
                     | `XMLHttpRequestEventTarget ]
                   type tags_0 = tags
                   [@@@js.start ]
                   [@@@js.implem
                     type tags =
                       [ `EventTarget  | `XMLHttpRequest 
                       | `XMLHttpRequestEventTarget ]
                     type tags_0 = tags]
                   type 'tags this =
                     'tags intf constraint 'tags = [> `XMLHttpRequest ]
                   val t_to_js : t -> Ojs.t
                   val t_of_js : Ojs.t -> t
                   val t_0_to_js : t_0 -> Ojs.t
                   val t_0_of_js : Ojs.t -> t_0
                   val get_onreadystatechange :
                     'tags this -> (this:t -> ev:Event.t -> any) option
                   val set_onreadystatechange :
                     'tags this ->
                       (this:t -> ev:Event.t -> any) option -> unit
                   val get_readyState : 'tags this -> float
                   val get_response : 'tags this -> any
                   val get_responseText : 'tags this -> string
                   val get_responseType :
                     'tags this -> XMLHttpRequestResponseType.t
                   val set_responseType :
                     'tags this -> XMLHttpRequestResponseType.t -> unit
                   val get_responseURL : 'tags this -> string
                   val get_status : 'tags this -> float
                   val get_statusText : 'tags this -> string
                   val get_timeout : 'tags this -> float
                   val set_timeout : 'tags this -> float -> unit
                   val get_upload : 'tags this -> XMLHttpRequestUpload.t
                   val get_withCredentials : 'tags this -> bool
                   val set_withCredentials : 'tags this -> bool -> unit
                   val abort : 'tags this -> unit
                   val getAllResponseHeaders : 'tags this -> string
                   val getResponseHeader :
                     'tags this -> name:string -> string option
                   val open_ :
                     'tags this ->
                       method_:string ->
                         url:[ `U1 of string  | `U2 of URL.t ] -> unit
                   val open_' :
                     'tags this ->
                       method_:string ->
                         url:[ `U1 of string  | `U2 of URL.t ] ->
                           async:bool ->
                             ?username:string option ->
                               ?password:string option -> unit -> unit
                   val overrideMimeType : 'tags this -> mime:string -> unit
                   val send :
                     'tags this ->
                       ?body:XMLHttpRequestBodyInit.t option -> unit -> unit
                   val setRequestHeader :
                     'tags this -> name:string -> value:string -> unit
                   val get_DONE : 'tags this -> float
                   val get_HEADERS_RECEIVED : 'tags this -> float
                   val get_LOADING : 'tags this -> float
                   val get_OPENED : 'tags this -> float
                   val get_UNSENT : 'tags this -> float
                   val addEventListener :
                     'tags this ->
                       type_:'K ->
                         listener:(this:t -> ev:any -> any) ->
                           ?options:[ `U1 of bool 
                                    | `U2 of AddEventListenerOptions.t ]
                             -> unit -> unit
                   val addEventListener' :
                     'tags this ->
                       type_:string ->
                         listener:EventListenerOrEventListenerObject.t ->
                           ?options:[ `U1 of bool 
                                    | `U2 of AddEventListenerOptions.t ]
                             -> unit -> unit
                   val removeEventListener :
                     'tags this ->
                       type_:'K ->
                         listener:(this:t -> ev:any -> any) ->
                           ?options:[ `U1 of bool 
                                    | `U2 of EventListenerOptions.t ]
                             -> unit -> unit
                   val removeEventListener' :
                     'tags this ->
                       type_:string ->
                         listener:EventListenerOrEventListenerObject.t ->
                           ?options:[ `U1 of bool 
                                    | `U2 of EventListenerOptions.t ]
                             -> unit -> unit
                   val cast_from : 'tags this -> t
                   val prototype : unit -> t
                   val create : unit -> t
                   val done_ : unit -> float
                   val headers_received : unit -> float
                   val loading : unit -> float
                   val opened : unit -> float
                   val unsent : unit -> float
                 end =
  struct
    type t =
      [ `EventTarget  | `XMLHttpRequest  | `XMLHttpRequestEventTarget ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4987 : Ojs.t) -> t_of_js x4987
    and t_0_to_js : t_0 -> Ojs.t = fun (x4986 : t) -> t_to_js x4986
    type tags =
      [ `EventTarget  | `XMLHttpRequest  | `XMLHttpRequestEventTarget ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `XMLHttpRequest ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4990 : Ojs.t) -> intf_of_js __tags_of_js x4990
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4988 : __tags intf) -> intf_to_js __tags_to_js x4988
    let (get_onreadystatechange :
      'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x4992 : 'tags this) ->
        Ojs.option_of_js
          (fun (x4994 : Ojs.t) ->
             fun ~this:(x4995 : t) ->
               fun ~ev:(x4996 : Event.t) ->
                 any_of_js
                   (Ojs.apply x4994 [|(t_to_js x4995);(Event.t_to_js x4996)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4992)
             "onreadystatechange")
    let (set_onreadystatechange :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x4997 : 'tags this) ->
        fun (x4998 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4997)
            "onreadystatechange"
            (Ojs.option_to_js
               (fun (x4999 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x5000 : Ojs.t) ->
                       fun (x5001 : Ojs.t) ->
                         any_to_js
                           (x4999 ~this:(t_of_js x5000)
                              ~ev:(Event.t_of_js x5001)))) x4998)
    let (get_readyState : 'tags this -> float) =
      fun (x5003 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5003) "readyState")
    let (get_response : 'tags this -> any) =
      fun (x5005 : 'tags this) ->
        any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5005) "response")
    let (get_responseText : 'tags this -> string) =
      fun (x5007 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5007) "responseText")
    let (get_responseType : 'tags this -> XMLHttpRequestResponseType.t) =
      fun (x5009 : 'tags this) ->
        XMLHttpRequestResponseType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5009) "responseType")
    let (set_responseType :
      'tags this -> XMLHttpRequestResponseType.t -> unit) =
      fun (x5011 : 'tags this) ->
        fun (x5012 : XMLHttpRequestResponseType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5011) "responseType"
            (XMLHttpRequestResponseType.t_to_js x5012)
    let (get_responseURL : 'tags this -> string) =
      fun (x5014 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5014) "responseURL")
    let (get_status : 'tags this -> float) =
      fun (x5016 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5016) "status")
    let (get_statusText : 'tags this -> string) =
      fun (x5018 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5018) "statusText")
    let (get_timeout : 'tags this -> float) =
      fun (x5020 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5020) "timeout")
    let (set_timeout : 'tags this -> float -> unit) =
      fun (x5022 : 'tags this) ->
        fun (x5023 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5022) "timeout"
            (Ojs.float_to_js x5023)
    let (get_upload : 'tags this -> XMLHttpRequestUpload.t) =
      fun (x5025 : 'tags this) ->
        XMLHttpRequestUpload.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5025) "upload")
    let (get_withCredentials : 'tags this -> bool) =
      fun (x5027 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5027) "withCredentials")
    let (set_withCredentials : 'tags this -> bool -> unit) =
      fun (x5029 : 'tags this) ->
        fun (x5030 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5029) "withCredentials"
            (Ojs.bool_to_js x5030)
    let (abort : 'tags this -> unit) =
      fun (x5032 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x5032) "abort" [||])
    let (getAllResponseHeaders : 'tags this -> string) =
      fun (x5034 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x5034) "getAllResponseHeaders" [||])
    let (getResponseHeader : 'tags this -> name:string -> string option) =
      fun (x5037 : 'tags this) ->
        fun ~name:(x5036 : string) ->
          Ojs.option_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x5037) "getResponseHeader"
               [|(Ojs.string_to_js x5036)|])
    let (open_ :
      'tags this ->
        method_:string -> url:[ `U1 of string  | `U2 of URL.t ] -> unit)
      =
      fun (x5044 : 'tags this) ->
        fun ~method_:(x5040 : string) ->
          fun ~url:(x5041 : [ `U1 of string  | `U2 of URL.t ]) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x5044) "open"
                 [|(Ojs.string_to_js x5040);((match x5041 with
                                              | `U1 x5042 ->
                                                  Ojs.string_to_js x5042
                                              | `U2 x5043 ->
                                                  URL.t_to_js x5043))|])
    let (open_' :
      'tags this ->
        method_:string ->
          url:[ `U1 of string  | `U2 of URL.t ] ->
            async:bool ->
              ?username:string option ->
                ?password:string option -> unit -> unit)
      =
      fun (x5058 : 'tags this) ->
        fun ~method_:(x5046 : string) ->
          fun ~url:(x5047 : [ `U1 of string  | `U2 of URL.t ]) ->
            fun ~async:(x5048 : bool) ->
              fun ?username:(x5049 : string option option) ->
                fun ?password:(x5050 : string option option) ->
                  fun () ->
                    ignore
                      (let x5060 = this_to_js Obj.magic x5058 in
                       Ojs.call (Ojs.get_prop_ascii x5060 "open") "apply"
                         [|x5060;((let x5051 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x5051 "push"
                                        [|(Ojs.string_to_js x5046)|]);
                                   ignore
                                     (Ojs.call x5051 "push"
                                        [|((match x5047 with
                                            | `U1 x5056 ->
                                                Ojs.string_to_js x5056
                                            | `U2 x5057 -> URL.t_to_js x5057))|]);
                                   ignore
                                     (Ojs.call x5051 "push"
                                        [|(Ojs.bool_to_js x5048)|]);
                                   (match x5049 with
                                    | Some x5054 ->
                                        ignore
                                          (Ojs.call x5051 "push"
                                             [|(Ojs.option_to_js
                                                  Ojs.string_to_js x5054)|])
                                    | None -> ());
                                   (match x5050 with
                                    | Some x5052 ->
                                        ignore
                                          (Ojs.call x5051 "push"
                                             [|(Ojs.option_to_js
                                                  Ojs.string_to_js x5052)|])
                                    | None -> ());
                                   x5051))|])
    let (overrideMimeType : 'tags this -> mime:string -> unit) =
      fun (x5062 : 'tags this) ->
        fun ~mime:(x5061 : string) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x5062) "overrideMimeType"
               [|(Ojs.string_to_js x5061)|])
    let (send :
      'tags this -> ?body:XMLHttpRequestBodyInit.t option -> unit -> unit) =
      fun (x5068 : 'tags this) ->
        fun ?body:(x5064 : XMLHttpRequestBodyInit.t option option) ->
          fun () ->
            ignore
              (let x5070 = this_to_js Obj.magic x5068 in
               Ojs.call (Ojs.get_prop_ascii x5070 "send") "apply"
                 [|x5070;((let x5065 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x5064 with
                            | Some x5066 ->
                                ignore
                                  (Ojs.call x5065 "push"
                                     [|(Ojs.option_to_js
                                          XMLHttpRequestBodyInit.t_to_js
                                          x5066)|])
                            | None -> ());
                           x5065))|])
    let (setRequestHeader :
      'tags this -> name:string -> value:string -> unit) =
      fun (x5073 : 'tags this) ->
        fun ~name:(x5071 : string) ->
          fun ~value:(x5072 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x5073) "setRequestHeader"
                 [|(Ojs.string_to_js x5071);(Ojs.string_to_js x5072)|])
    let (get_DONE : 'tags this -> float) =
      fun (x5075 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5075) "DONE")
    let (get_HEADERS_RECEIVED : 'tags this -> float) =
      fun (x5077 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5077) "HEADERS_RECEIVED")
    let (get_LOADING : 'tags this -> float) =
      fun (x5079 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5079) "LOADING")
    let (get_OPENED : 'tags this -> float) =
      fun (x5081 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5081) "OPENED")
    let (get_UNSENT : 'tags this -> float) =
      fun (x5083 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5083) "UNSENT")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5094 : 'tags this) ->
        fun ~type_:(x5085 : 'K) ->
          fun ~listener:(x5086 : this:t -> ev:any -> any) ->
            fun
              ?options:(x5087 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5096 = this_to_js Obj.magic x5094 in
                   Ojs.call (Ojs.get_prop_ascii x5096 "addEventListener")
                     "apply"
                     [|x5096;((let x5088 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5088 "push" [|(Obj.magic x5085)|]);
                               ignore
                                 (Ojs.call x5088 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5092 : Ojs.t) ->
                                            fun (x5093 : Ojs.t) ->
                                              any_to_js
                                                (x5086 ~this:(t_of_js x5092)
                                                   ~ev:(any_of_js x5093))))|]);
                               (match x5087 with
                                | Some x5089 ->
                                    ignore
                                      (Ojs.call x5088 "push"
                                         [|((match x5089 with
                                             | `U1 x5090 ->
                                                 Ojs.bool_to_js x5090
                                             | `U2 x5091 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x5091))|])
                                | None -> ());
                               x5088))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5104 : 'tags this) ->
        fun ~type_:(x5097 : string) ->
          fun ~listener:(x5098 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x5099 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5106 = this_to_js Obj.magic x5104 in
                   Ojs.call (Ojs.get_prop_ascii x5106 "addEventListener")
                     "apply"
                     [|x5106;((let x5100 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5100 "push"
                                    [|(Ojs.string_to_js x5097)|]);
                               ignore
                                 (Ojs.call x5100 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5098)|]);
                               (match x5099 with
                                | Some x5101 ->
                                    ignore
                                      (Ojs.call x5100 "push"
                                         [|((match x5101 with
                                             | `U1 x5102 ->
                                                 Ojs.bool_to_js x5102
                                             | `U2 x5103 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x5103))|])
                                | None -> ());
                               x5100))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5116 : 'tags this) ->
        fun ~type_:(x5107 : 'K) ->
          fun ~listener:(x5108 : this:t -> ev:any -> any) ->
            fun
              ?options:(x5109 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5118 = this_to_js Obj.magic x5116 in
                   Ojs.call (Ojs.get_prop_ascii x5118 "removeEventListener")
                     "apply"
                     [|x5118;((let x5110 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5110 "push" [|(Obj.magic x5107)|]);
                               ignore
                                 (Ojs.call x5110 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5114 : Ojs.t) ->
                                            fun (x5115 : Ojs.t) ->
                                              any_to_js
                                                (x5108 ~this:(t_of_js x5114)
                                                   ~ev:(any_of_js x5115))))|]);
                               (match x5109 with
                                | Some x5111 ->
                                    ignore
                                      (Ojs.call x5110 "push"
                                         [|((match x5111 with
                                             | `U1 x5112 ->
                                                 Ojs.bool_to_js x5112
                                             | `U2 x5113 ->
                                                 EventListenerOptions.t_to_js
                                                   x5113))|])
                                | None -> ());
                               x5110))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5126 : 'tags this) ->
        fun ~type_:(x5119 : string) ->
          fun ~listener:(x5120 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x5121 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5128 = this_to_js Obj.magic x5126 in
                   Ojs.call (Ojs.get_prop_ascii x5128 "removeEventListener")
                     "apply"
                     [|x5128;((let x5122 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5122 "push"
                                    [|(Ojs.string_to_js x5119)|]);
                               ignore
                                 (Ojs.call x5122 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5120)|]);
                               (match x5121 with
                                | Some x5123 ->
                                    ignore
                                      (Ojs.call x5122 "push"
                                         [|((match x5123 with
                                             | `U1 x5124 ->
                                                 Ojs.bool_to_js x5124
                                             | `U2 x5125 ->
                                                 EventListenerOptions.t_to_js
                                                   x5125))|])
                                | None -> ());
                               x5122))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") [||])
    let (done_ : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") "DONE")
    let (headers_received : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest")
             "HEADERS_RECEIVED")
    let (loading : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") "LOADING")
    let (opened : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") "OPENED")
    let (unsent : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") "UNSENT")
  end
 and
  XMLHttpRequestEventTarget:sig
                              type t =
                                [ `EventTarget 
                                | `XMLHttpRequestEventTarget ] intf
                              type t_0 = t
                              [@@@js.stop ]
                              type tags =
                                [ `EventTarget 
                                | `XMLHttpRequestEventTarget ]
                              type tags_0 = tags
                              [@@@js.start ]
                              [@@@js.implem
                                type tags =
                                  [ `EventTarget 
                                  | `XMLHttpRequestEventTarget ]
                                type tags_0 = tags]
                              type 'tags this =
                                'tags intf constraint 'tags =
                                            [> `XMLHttpRequestEventTarget ]
                              val t_to_js : t -> Ojs.t
                              val t_of_js : Ojs.t -> t
                              val t_0_to_js : t_0 -> Ojs.t
                              val t_0_of_js : Ojs.t -> t_0
                              val get_onabort :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option
                              val set_onabort :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option -> unit
                              val get_onerror :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option
                              val set_onerror :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option -> unit
                              val get_onload :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option
                              val set_onload :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option -> unit
                              val get_onloadend :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option
                              val set_onloadend :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option -> unit
                              val get_onloadstart :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option
                              val set_onloadstart :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option -> unit
                              val get_onprogress :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option
                              val set_onprogress :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option -> unit
                              val get_ontimeout :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option
                              val set_ontimeout :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option -> unit
                              val addEventListener :
                                'tags this ->
                                  type_:'K ->
                                    listener:(this:t -> ev:any -> any) ->
                                      ?options:[ `U1 of bool 
                                               | `U2 of
                                                   AddEventListenerOptions.t ]
                                        -> unit -> unit
                              val addEventListener' :
                                'tags this ->
                                  type_:string ->
                                    listener:EventListenerOrEventListenerObject.t
                                      ->
                                      ?options:[ `U1 of bool 
                                               | `U2 of
                                                   AddEventListenerOptions.t ]
                                        -> unit -> unit
                              val removeEventListener :
                                'tags this ->
                                  type_:'K ->
                                    listener:(this:t -> ev:any -> any) ->
                                      ?options:[ `U1 of bool 
                                               | `U2 of
                                                   EventListenerOptions.t ]
                                        -> unit -> unit
                              val removeEventListener' :
                                'tags this ->
                                  type_:string ->
                                    listener:EventListenerOrEventListenerObject.t
                                      ->
                                      ?options:[ `U1 of bool 
                                               | `U2 of
                                                   EventListenerOptions.t ]
                                        -> unit -> unit
                              val cast_from : 'tags this -> t
                              val prototype : unit -> t
                              val create : unit -> t
                            end =
  struct
    type t = [ `EventTarget  | `XMLHttpRequestEventTarget ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5130 : Ojs.t) -> t_of_js x5130
    and t_0_to_js : t_0 -> Ojs.t = fun (x5129 : t) -> t_to_js x5129
    type tags = [ `EventTarget  | `XMLHttpRequestEventTarget ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `XMLHttpRequestEventTarget ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x5133 : Ojs.t) -> intf_of_js __tags_of_js x5133
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x5131 : __tags intf) -> intf_to_js __tags_to_js x5131
    let (get_onabort :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
      =
      fun (x5135 : 'tags this) ->
        Ojs.option_of_js
          (fun (x5137 : Ojs.t) ->
             fun ~this:(x5138 : XMLHttpRequest.t) ->
               fun ~ev:(x5139 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x5137
                      [|(XMLHttpRequest.t_to_js x5138);(ProgressEvent.t_0_to_js
                                                          x5139)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5135) "onabort")
    let (set_onabort :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit)
      =
      fun (x5140 : 'tags this) ->
        fun
          (x5141 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5140) "onabort"
            (Ojs.option_to_js
               (fun
                  (x5142 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x5143 : Ojs.t) ->
                       fun (x5144 : Ojs.t) ->
                         any_to_js
                           (x5142 ~this:(XMLHttpRequest.t_of_js x5143)
                              ~ev:(ProgressEvent.t_0_of_js x5144)))) x5141)
    let (get_onerror :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
      =
      fun (x5146 : 'tags this) ->
        Ojs.option_of_js
          (fun (x5148 : Ojs.t) ->
             fun ~this:(x5149 : XMLHttpRequest.t) ->
               fun ~ev:(x5150 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x5148
                      [|(XMLHttpRequest.t_to_js x5149);(ProgressEvent.t_0_to_js
                                                          x5150)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5146) "onerror")
    let (set_onerror :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit)
      =
      fun (x5151 : 'tags this) ->
        fun
          (x5152 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5151) "onerror"
            (Ojs.option_to_js
               (fun
                  (x5153 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x5154 : Ojs.t) ->
                       fun (x5155 : Ojs.t) ->
                         any_to_js
                           (x5153 ~this:(XMLHttpRequest.t_of_js x5154)
                              ~ev:(ProgressEvent.t_0_of_js x5155)))) x5152)
    let (get_onload :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
      =
      fun (x5157 : 'tags this) ->
        Ojs.option_of_js
          (fun (x5159 : Ojs.t) ->
             fun ~this:(x5160 : XMLHttpRequest.t) ->
               fun ~ev:(x5161 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x5159
                      [|(XMLHttpRequest.t_to_js x5160);(ProgressEvent.t_0_to_js
                                                          x5161)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5157) "onload")
    let (set_onload :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit)
      =
      fun (x5162 : 'tags this) ->
        fun
          (x5163 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5162) "onload"
            (Ojs.option_to_js
               (fun
                  (x5164 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x5165 : Ojs.t) ->
                       fun (x5166 : Ojs.t) ->
                         any_to_js
                           (x5164 ~this:(XMLHttpRequest.t_of_js x5165)
                              ~ev:(ProgressEvent.t_0_of_js x5166)))) x5163)
    let (get_onloadend :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
      =
      fun (x5168 : 'tags this) ->
        Ojs.option_of_js
          (fun (x5170 : Ojs.t) ->
             fun ~this:(x5171 : XMLHttpRequest.t) ->
               fun ~ev:(x5172 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x5170
                      [|(XMLHttpRequest.t_to_js x5171);(ProgressEvent.t_0_to_js
                                                          x5172)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5168) "onloadend")
    let (set_onloadend :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit)
      =
      fun (x5173 : 'tags this) ->
        fun
          (x5174 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5173) "onloadend"
            (Ojs.option_to_js
               (fun
                  (x5175 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x5176 : Ojs.t) ->
                       fun (x5177 : Ojs.t) ->
                         any_to_js
                           (x5175 ~this:(XMLHttpRequest.t_of_js x5176)
                              ~ev:(ProgressEvent.t_0_of_js x5177)))) x5174)
    let (get_onloadstart :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
      =
      fun (x5179 : 'tags this) ->
        Ojs.option_of_js
          (fun (x5181 : Ojs.t) ->
             fun ~this:(x5182 : XMLHttpRequest.t) ->
               fun ~ev:(x5183 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x5181
                      [|(XMLHttpRequest.t_to_js x5182);(ProgressEvent.t_0_to_js
                                                          x5183)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5179) "onloadstart")
    let (set_onloadstart :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit)
      =
      fun (x5184 : 'tags this) ->
        fun
          (x5185 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5184) "onloadstart"
            (Ojs.option_to_js
               (fun
                  (x5186 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x5187 : Ojs.t) ->
                       fun (x5188 : Ojs.t) ->
                         any_to_js
                           (x5186 ~this:(XMLHttpRequest.t_of_js x5187)
                              ~ev:(ProgressEvent.t_0_of_js x5188)))) x5185)
    let (get_onprogress :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
      =
      fun (x5190 : 'tags this) ->
        Ojs.option_of_js
          (fun (x5192 : Ojs.t) ->
             fun ~this:(x5193 : XMLHttpRequest.t) ->
               fun ~ev:(x5194 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x5192
                      [|(XMLHttpRequest.t_to_js x5193);(ProgressEvent.t_0_to_js
                                                          x5194)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5190) "onprogress")
    let (set_onprogress :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit)
      =
      fun (x5195 : 'tags this) ->
        fun
          (x5196 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5195) "onprogress"
            (Ojs.option_to_js
               (fun
                  (x5197 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x5198 : Ojs.t) ->
                       fun (x5199 : Ojs.t) ->
                         any_to_js
                           (x5197 ~this:(XMLHttpRequest.t_of_js x5198)
                              ~ev:(ProgressEvent.t_0_of_js x5199)))) x5196)
    let (get_ontimeout :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
      =
      fun (x5201 : 'tags this) ->
        Ojs.option_of_js
          (fun (x5203 : Ojs.t) ->
             fun ~this:(x5204 : XMLHttpRequest.t) ->
               fun ~ev:(x5205 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x5203
                      [|(XMLHttpRequest.t_to_js x5204);(ProgressEvent.t_0_to_js
                                                          x5205)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5201) "ontimeout")
    let (set_ontimeout :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit)
      =
      fun (x5206 : 'tags this) ->
        fun
          (x5207 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5206) "ontimeout"
            (Ojs.option_to_js
               (fun
                  (x5208 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x5209 : Ojs.t) ->
                       fun (x5210 : Ojs.t) ->
                         any_to_js
                           (x5208 ~this:(XMLHttpRequest.t_of_js x5209)
                              ~ev:(ProgressEvent.t_0_of_js x5210)))) x5207)
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5221 : 'tags this) ->
        fun ~type_:(x5212 : 'K) ->
          fun ~listener:(x5213 : this:t -> ev:any -> any) ->
            fun
              ?options:(x5214 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5223 = this_to_js Obj.magic x5221 in
                   Ojs.call (Ojs.get_prop_ascii x5223 "addEventListener")
                     "apply"
                     [|x5223;((let x5215 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5215 "push" [|(Obj.magic x5212)|]);
                               ignore
                                 (Ojs.call x5215 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5219 : Ojs.t) ->
                                            fun (x5220 : Ojs.t) ->
                                              any_to_js
                                                (x5213 ~this:(t_of_js x5219)
                                                   ~ev:(any_of_js x5220))))|]);
                               (match x5214 with
                                | Some x5216 ->
                                    ignore
                                      (Ojs.call x5215 "push"
                                         [|((match x5216 with
                                             | `U1 x5217 ->
                                                 Ojs.bool_to_js x5217
                                             | `U2 x5218 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x5218))|])
                                | None -> ());
                               x5215))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5231 : 'tags this) ->
        fun ~type_:(x5224 : string) ->
          fun ~listener:(x5225 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x5226 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5233 = this_to_js Obj.magic x5231 in
                   Ojs.call (Ojs.get_prop_ascii x5233 "addEventListener")
                     "apply"
                     [|x5233;((let x5227 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5227 "push"
                                    [|(Ojs.string_to_js x5224)|]);
                               ignore
                                 (Ojs.call x5227 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5225)|]);
                               (match x5226 with
                                | Some x5228 ->
                                    ignore
                                      (Ojs.call x5227 "push"
                                         [|((match x5228 with
                                             | `U1 x5229 ->
                                                 Ojs.bool_to_js x5229
                                             | `U2 x5230 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x5230))|])
                                | None -> ());
                               x5227))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5243 : 'tags this) ->
        fun ~type_:(x5234 : 'K) ->
          fun ~listener:(x5235 : this:t -> ev:any -> any) ->
            fun
              ?options:(x5236 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5245 = this_to_js Obj.magic x5243 in
                   Ojs.call (Ojs.get_prop_ascii x5245 "removeEventListener")
                     "apply"
                     [|x5245;((let x5237 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5237 "push" [|(Obj.magic x5234)|]);
                               ignore
                                 (Ojs.call x5237 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5241 : Ojs.t) ->
                                            fun (x5242 : Ojs.t) ->
                                              any_to_js
                                                (x5235 ~this:(t_of_js x5241)
                                                   ~ev:(any_of_js x5242))))|]);
                               (match x5236 with
                                | Some x5238 ->
                                    ignore
                                      (Ojs.call x5237 "push"
                                         [|((match x5238 with
                                             | `U1 x5239 ->
                                                 Ojs.bool_to_js x5239
                                             | `U2 x5240 ->
                                                 EventListenerOptions.t_to_js
                                                   x5240))|])
                                | None -> ());
                               x5237))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5253 : 'tags this) ->
        fun ~type_:(x5246 : string) ->
          fun ~listener:(x5247 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x5248 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5255 = this_to_js Obj.magic x5253 in
                   Ojs.call (Ojs.get_prop_ascii x5255 "removeEventListener")
                     "apply"
                     [|x5255;((let x5249 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5249 "push"
                                    [|(Ojs.string_to_js x5246)|]);
                               ignore
                                 (Ojs.call x5249 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5247)|]);
                               (match x5248 with
                                | Some x5250 ->
                                    ignore
                                      (Ojs.call x5249 "push"
                                         [|((match x5250 with
                                             | `U1 x5251 ->
                                                 Ojs.bool_to_js x5251
                                             | `U2 x5252 ->
                                                 EventListenerOptions.t_to_js
                                                   x5252))|])
                                | None -> ());
                               x5249))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequestEventTarget")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequestEventTarget") 
             [||])
  end and
       XMLHttpRequestUpload:sig
                              type t =
                                [ `EventTarget  | `XMLHttpRequestEventTarget 
                                | `XMLHttpRequestUpload ] intf
                              type t_0 = t
                              [@@@js.stop ]
                              type tags =
                                [ `EventTarget  | `XMLHttpRequestEventTarget 
                                | `XMLHttpRequestUpload ]
                              type tags_0 = tags
                              [@@@js.start ]
                              [@@@js.implem
                                type tags =
                                  [ `EventTarget 
                                  | `XMLHttpRequestEventTarget 
                                  | `XMLHttpRequestUpload ]
                                type tags_0 = tags]
                              type 'tags this =
                                'tags intf constraint 'tags =
                                            [> `XMLHttpRequestUpload ]
                              val t_to_js : t -> Ojs.t
                              val t_of_js : Ojs.t -> t
                              val t_0_to_js : t_0 -> Ojs.t
                              val t_0_of_js : Ojs.t -> t_0
                              val addEventListener :
                                'tags this ->
                                  type_:'K ->
                                    listener:(this:t -> ev:any -> any) ->
                                      ?options:[ `U1 of bool 
                                               | `U2 of
                                                   AddEventListenerOptions.t ]
                                        -> unit -> unit
                              val addEventListener' :
                                'tags this ->
                                  type_:string ->
                                    listener:EventListenerOrEventListenerObject.t
                                      ->
                                      ?options:[ `U1 of bool 
                                               | `U2 of
                                                   AddEventListenerOptions.t ]
                                        -> unit -> unit
                              val removeEventListener :
                                'tags this ->
                                  type_:'K ->
                                    listener:(this:t -> ev:any -> any) ->
                                      ?options:[ `U1 of bool 
                                               | `U2 of
                                                   EventListenerOptions.t ]
                                        -> unit -> unit
                              val removeEventListener' :
                                'tags this ->
                                  type_:string ->
                                    listener:EventListenerOrEventListenerObject.t
                                      ->
                                      ?options:[ `U1 of bool 
                                               | `U2 of
                                                   EventListenerOptions.t ]
                                        -> unit -> unit
                              val cast_from : 'tags this -> t
                              val prototype : unit -> t
                              val create : unit -> t
                            end =
       struct
         type t =
           [ `EventTarget  | `XMLHttpRequestEventTarget 
           | `XMLHttpRequestUpload ] intf
         let rec t_of_js : Ojs.t -> t = Obj.magic
         and t_to_js : t -> Ojs.t = Obj.magic
         type t_0 = t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x5257 : Ojs.t) -> t_of_js x5257
         and t_0_to_js : t_0 -> Ojs.t = fun (x5256 : t) -> t_to_js x5256
         type tags =
           [ `EventTarget  | `XMLHttpRequestEventTarget 
           | `XMLHttpRequestUpload ]
         type tags_0 = tags
         type 'tags this =
           'tags intf constraint 'tags = [> `XMLHttpRequestUpload ]
         let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
           =
           fun (type __tags) ->
             fun (__tags_of_js : Ojs.t -> __tags) ->
               fun (x5260 : Ojs.t) -> intf_of_js __tags_of_js x5260
         and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
           fun (type __tags) ->
             fun (__tags_to_js : __tags -> Ojs.t) ->
               fun (x5258 : __tags intf) -> intf_to_js __tags_to_js x5258
         let (addEventListener :
           'tags this ->
             type_:'K ->
               listener:(this:t -> ev:any -> any) ->
                 ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                   -> unit -> unit)
           =
           fun (x5271 : 'tags this) ->
             fun ~type_:(x5262 : 'K) ->
               fun ~listener:(x5263 : this:t -> ev:any -> any) ->
                 fun
                   ?options:(x5264 :
                              [ `U1 of bool 
                              | `U2 of AddEventListenerOptions.t ] option)
                   ->
                   fun () ->
                     ignore
                       (let x5273 = this_to_js Obj.magic x5271 in
                        Ojs.call
                          (Ojs.get_prop_ascii x5273 "addEventListener")
                          "apply"
                          [|x5273;((let x5265 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x5265 "push"
                                         [|(Obj.magic x5262)|]);
                                    ignore
                                      (Ojs.call x5265 "push"
                                         [|(Ojs.fun_to_js 2
                                              (fun (x5269 : Ojs.t) ->
                                                 fun (x5270 : Ojs.t) ->
                                                   any_to_js
                                                     (x5263
                                                        ~this:(t_of_js x5269)
                                                        ~ev:(any_of_js x5270))))|]);
                                    (match x5264 with
                                     | Some x5266 ->
                                         ignore
                                           (Ojs.call x5265 "push"
                                              [|((match x5266 with
                                                  | `U1 x5267 ->
                                                      Ojs.bool_to_js x5267
                                                  | `U2 x5268 ->
                                                      AddEventListenerOptions.t_to_js
                                                        x5268))|])
                                     | None -> ());
                                    x5265))|])
         let (addEventListener' :
           'tags this ->
             type_:string ->
               listener:EventListenerOrEventListenerObject.t ->
                 ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                   -> unit -> unit)
           =
           fun (x5281 : 'tags this) ->
             fun ~type_:(x5274 : string) ->
               fun ~listener:(x5275 : EventListenerOrEventListenerObject.t)
                 ->
                 fun
                   ?options:(x5276 :
                              [ `U1 of bool 
                              | `U2 of AddEventListenerOptions.t ] option)
                   ->
                   fun () ->
                     ignore
                       (let x5283 = this_to_js Obj.magic x5281 in
                        Ojs.call
                          (Ojs.get_prop_ascii x5283 "addEventListener")
                          "apply"
                          [|x5283;((let x5277 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x5277 "push"
                                         [|(Ojs.string_to_js x5274)|]);
                                    ignore
                                      (Ojs.call x5277 "push"
                                         [|(EventListenerOrEventListenerObject.t_to_js
                                              x5275)|]);
                                    (match x5276 with
                                     | Some x5278 ->
                                         ignore
                                           (Ojs.call x5277 "push"
                                              [|((match x5278 with
                                                  | `U1 x5279 ->
                                                      Ojs.bool_to_js x5279
                                                  | `U2 x5280 ->
                                                      AddEventListenerOptions.t_to_js
                                                        x5280))|])
                                     | None -> ());
                                    x5277))|])
         let (removeEventListener :
           'tags this ->
             type_:'K ->
               listener:(this:t -> ev:any -> any) ->
                 ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
                   unit -> unit)
           =
           fun (x5293 : 'tags this) ->
             fun ~type_:(x5284 : 'K) ->
               fun ~listener:(x5285 : this:t -> ev:any -> any) ->
                 fun
                   ?options:(x5286 :
                              [ `U1 of bool 
                              | `U2 of EventListenerOptions.t ] option)
                   ->
                   fun () ->
                     ignore
                       (let x5295 = this_to_js Obj.magic x5293 in
                        Ojs.call
                          (Ojs.get_prop_ascii x5295 "removeEventListener")
                          "apply"
                          [|x5295;((let x5287 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x5287 "push"
                                         [|(Obj.magic x5284)|]);
                                    ignore
                                      (Ojs.call x5287 "push"
                                         [|(Ojs.fun_to_js 2
                                              (fun (x5291 : Ojs.t) ->
                                                 fun (x5292 : Ojs.t) ->
                                                   any_to_js
                                                     (x5285
                                                        ~this:(t_of_js x5291)
                                                        ~ev:(any_of_js x5292))))|]);
                                    (match x5286 with
                                     | Some x5288 ->
                                         ignore
                                           (Ojs.call x5287 "push"
                                              [|((match x5288 with
                                                  | `U1 x5289 ->
                                                      Ojs.bool_to_js x5289
                                                  | `U2 x5290 ->
                                                      EventListenerOptions.t_to_js
                                                        x5290))|])
                                     | None -> ());
                                    x5287))|])
         let (removeEventListener' :
           'tags this ->
             type_:string ->
               listener:EventListenerOrEventListenerObject.t ->
                 ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
                   unit -> unit)
           =
           fun (x5303 : 'tags this) ->
             fun ~type_:(x5296 : string) ->
               fun ~listener:(x5297 : EventListenerOrEventListenerObject.t)
                 ->
                 fun
                   ?options:(x5298 :
                              [ `U1 of bool 
                              | `U2 of EventListenerOptions.t ] option)
                   ->
                   fun () ->
                     ignore
                       (let x5305 = this_to_js Obj.magic x5303 in
                        Ojs.call
                          (Ojs.get_prop_ascii x5305 "removeEventListener")
                          "apply"
                          [|x5305;((let x5299 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x5299 "push"
                                         [|(Ojs.string_to_js x5296)|]);
                                    ignore
                                      (Ojs.call x5299 "push"
                                         [|(EventListenerOrEventListenerObject.t_to_js
                                              x5297)|]);
                                    (match x5298 with
                                     | Some x5300 ->
                                         ignore
                                           (Ojs.call x5299 "push"
                                              [|((match x5300 with
                                                  | `U1 x5301 ->
                                                      Ojs.bool_to_js x5301
                                                  | `U2 x5302 ->
                                                      EventListenerOptions.t_to_js
                                                        x5302))|])
                                     | None -> ());
                                    x5299))|])
         let cast_from = Obj.magic
         let (prototype : unit -> t) =
           fun () ->
             t_of_js
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global "XMLHttpRequestUpload")
                  "prototype")
         let (create : unit -> t) =
           fun () ->
             t_of_js
               (Ojs.new_obj
                  (Ojs.get_prop_ascii Ojs.global "XMLHttpRequestUpload") 
                  [||])
       end
module XMLHttpRequestEventTargetEventMap =
  struct
    type t = [ `XMLHttpRequestEventTargetEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5307 : Ojs.t) -> t_of_js x5307
    and t_0_to_js : t_0 -> Ojs.t = fun (x5306 : t) -> t_to_js x5306
    type tags = [ `XMLHttpRequestEventTargetEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `XMLHttpRequestEventTargetEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x5310 : Ojs.t) -> intf_of_js __tags_of_js x5310
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x5308 : __tags intf) -> intf_to_js __tags_to_js x5308
    let (get_abort :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5312 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5312) "abort")
    let (set_abort :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5315 : 'tags this) ->
        fun (x5316 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5315) "abort"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5316)
    let (get_error :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5319 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5319) "error")
    let (set_error :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5322 : 'tags this) ->
        fun (x5323 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5322) "error"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5323)
    let (get_load :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5326 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5326) "load")
    let (set_load :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5329 : 'tags this) ->
        fun (x5330 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5329) "load"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5330)
    let (get_loadend :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5333 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5333) "loadend")
    let (set_loadend :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5336 : 'tags this) ->
        fun (x5337 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5336) "loadend"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5337)
    let (get_loadstart :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5340 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5340) "loadstart")
    let (set_loadstart :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5343 : 'tags this) ->
        fun (x5344 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5343) "loadstart"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5344)
    let (get_progress :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5347 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5347) "progress")
    let (set_progress :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5350 : 'tags this) ->
        fun (x5351 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5350) "progress"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5351)
    let (get_timeout :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5354 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5354) "timeout")
    let (set_timeout :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5357 : 'tags this) ->
        fun (x5358 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5357) "timeout"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5358)
    let (create :
      abort:XMLHttpRequestEventTarget.t ProgressEvent.t ->
        error:XMLHttpRequestEventTarget.t ProgressEvent.t ->
          load:XMLHttpRequestEventTarget.t ProgressEvent.t ->
            loadend:XMLHttpRequestEventTarget.t ProgressEvent.t ->
              loadstart:XMLHttpRequestEventTarget.t ProgressEvent.t ->
                progress:XMLHttpRequestEventTarget.t ProgressEvent.t ->
                  timeout:XMLHttpRequestEventTarget.t ProgressEvent.t ->
                    unit -> t)
      =
      fun ~abort:(x5361 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
        fun ~error:(x5362 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          fun ~load:(x5363 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
            fun
              ~loadend:(x5364 : XMLHttpRequestEventTarget.t ProgressEvent.t)
              ->
              fun
                ~loadstart:(x5365 :
                             XMLHttpRequestEventTarget.t ProgressEvent.t)
                ->
                fun
                  ~progress:(x5366 :
                              XMLHttpRequestEventTarget.t ProgressEvent.t)
                  ->
                  fun
                    ~timeout:(x5367 :
                               XMLHttpRequestEventTarget.t ProgressEvent.t)
                    ->
                    fun () ->
                      let x5368 = Ojs.empty_obj () in
                      Ojs.set_prop_ascii x5368 "abort"
                        (ProgressEvent.t_to_js
                           XMLHttpRequestEventTarget.t_to_js x5361);
                      Ojs.set_prop_ascii x5368 "error"
                        (ProgressEvent.t_to_js
                           XMLHttpRequestEventTarget.t_to_js x5362);
                      Ojs.set_prop_ascii x5368 "load"
                        (ProgressEvent.t_to_js
                           XMLHttpRequestEventTarget.t_to_js x5363);
                      Ojs.set_prop_ascii x5368 "loadend"
                        (ProgressEvent.t_to_js
                           XMLHttpRequestEventTarget.t_to_js x5364);
                      Ojs.set_prop_ascii x5368 "loadstart"
                        (ProgressEvent.t_to_js
                           XMLHttpRequestEventTarget.t_to_js x5365);
                      Ojs.set_prop_ascii x5368 "progress"
                        (ProgressEvent.t_to_js
                           XMLHttpRequestEventTarget.t_to_js x5366);
                      Ojs.set_prop_ascii x5368 "timeout"
                        (ProgressEvent.t_to_js
                           XMLHttpRequestEventTarget.t_to_js x5367);
                      t_of_js x5368
    let cast_from = Obj.magic
  end
module XMLHttpRequestEventMap =
  struct
    type t =
      [ `XMLHttpRequestEventMap  | `XMLHttpRequestEventTargetEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5377 : Ojs.t) -> t_of_js x5377
    and t_0_to_js : t_0 -> Ojs.t = fun (x5376 : t) -> t_to_js x5376
    type tags =
      [ `XMLHttpRequestEventMap  | `XMLHttpRequestEventTargetEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `XMLHttpRequestEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x5380 : Ojs.t) -> intf_of_js __tags_of_js x5380
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x5378 : __tags intf) -> intf_to_js __tags_to_js x5378
    let (get_readystatechange : 'tags this -> Event.t) =
      fun (x5382 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5382) "readystatechange")
    let (set_readystatechange : 'tags this -> Event.t -> unit) =
      fun (x5384 : 'tags this) ->
        fun (x5385 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5384) "readystatechange"
            (Event.t_to_js x5385)
    let (create : readystatechange:Event.t -> unit -> t) =
      fun ~readystatechange:(x5387 : Event.t) ->
        fun () ->
          let x5388 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x5388 "readystatechange" (Event.t_to_js x5387);
          t_of_js x5388
    let cast_from = Obj.magic
  end
module ServiceWorkerState =
  struct
    type t =
      [ `L_s148_parsed  | `L_s168_redundant  | `L_s33_activated 
      | `L_s34_activating  | `L_s96_installed  | `L_s97_installing ]
    let rec t_of_js : Ojs.t -> t =
      fun (x5390 : Ojs.t) ->
        let x5391 = x5390 in
        match Ojs.string_of_js x5391 with
        | "parsed" -> `L_s148_parsed
        | "redundant" -> `L_s168_redundant
        | "activated" -> `L_s33_activated
        | "activating" -> `L_s34_activating
        | "installed" -> `L_s96_installed
        | "installing" -> `L_s97_installing
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x5389 :
          [ `L_s148_parsed  | `L_s168_redundant  | `L_s33_activated 
          | `L_s34_activating  | `L_s96_installed  | `L_s97_installing ])
        ->
        match x5389 with
        | `L_s148_parsed -> Ojs.string_to_js "parsed"
        | `L_s168_redundant -> Ojs.string_to_js "redundant"
        | `L_s33_activated -> Ojs.string_to_js "activated"
        | `L_s34_activating -> Ojs.string_to_js "activating"
        | `L_s96_installed -> Ojs.string_to_js "installed"
        | `L_s97_installing -> Ojs.string_to_js "installing"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5393 : Ojs.t) -> t_of_js x5393
    and t_0_to_js : t_0 -> Ojs.t = fun (x5392 : t) -> t_to_js x5392
  end
module ImageBitmap =
  struct
    type t = [ `ImageBitmap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5395 : Ojs.t) -> t_of_js x5395
    and t_0_to_js : t_0 -> Ojs.t = fun (x5394 : t) -> t_to_js x5394
    type tags = [ `ImageBitmap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImageBitmap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x5398 : Ojs.t) -> intf_of_js __tags_of_js x5398
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x5396 : __tags intf) -> intf_to_js __tags_to_js x5396
    let (get_height : 'tags this -> float) =
      fun (x5400 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5400) "height")
    let (get_width : 'tags this -> float) =
      fun (x5402 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5402) "width")
    let (close : 'tags this -> unit) =
      fun (x5404 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x5404) "close" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ImageBitmap")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "ImageBitmap") [||])
  end
module ErrorEventInit =
  struct
    type t = [ `ErrorEventInit  | `EventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5407 : Ojs.t) -> t_of_js x5407
    and t_0_to_js : t_0 -> Ojs.t = fun (x5406 : t) -> t_to_js x5406
    type tags = [ `ErrorEventInit  | `EventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ErrorEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x5410 : Ojs.t) -> intf_of_js __tags_of_js x5410
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x5408 : __tags intf) -> intf_to_js __tags_to_js x5408
    let (get_colno : 'tags this -> float option) =
      fun (x5412 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5412) "colno")
    let (set_colno : 'tags this -> float -> unit) =
      fun (x5415 : 'tags this) ->
        fun (x5416 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5415) "colno"
            (Ojs.float_to_js x5416)
    let (get_error : 'tags this -> any option) =
      fun (x5418 : 'tags this) ->
        Ojs.option_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5418) "error")
    let (set_error : 'tags this -> any -> unit) =
      fun (x5421 : 'tags this) ->
        fun (x5422 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5421) "error"
            (any_to_js x5422)
    let (get_filename : 'tags this -> string option) =
      fun (x5424 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5424) "filename")
    let (set_filename : 'tags this -> string -> unit) =
      fun (x5427 : 'tags this) ->
        fun (x5428 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5427) "filename"
            (Ojs.string_to_js x5428)
    let (get_lineno : 'tags this -> float option) =
      fun (x5430 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5430) "lineno")
    let (set_lineno : 'tags this -> float -> unit) =
      fun (x5433 : 'tags this) ->
        fun (x5434 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5433) "lineno"
            (Ojs.float_to_js x5434)
    let (get_message : 'tags this -> string option) =
      fun (x5436 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5436) "message")
    let (set_message : 'tags this -> string -> unit) =
      fun (x5439 : 'tags this) ->
        fun (x5440 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5439) "message"
            (Ojs.string_to_js x5440)
    let (create :
      ?colno:float ->
        ?error:any ->
          ?filename:string -> ?lineno:float -> ?message:string -> unit -> t)
      =
      fun ?colno:(x5442 : float option) ->
        fun ?error:(x5443 : any option) ->
          fun ?filename:(x5444 : string option) ->
            fun ?lineno:(x5445 : float option) ->
              fun ?message:(x5446 : string option) ->
                fun () ->
                  let x5447 = Ojs.empty_obj () in
                  (match x5442 with
                   | Some x5452 ->
                       Ojs.set_prop_ascii x5447 "colno"
                         (Ojs.float_to_js x5452)
                   | None -> ());
                  (match x5443 with
                   | Some x5451 ->
                       Ojs.set_prop_ascii x5447 "error" (any_to_js x5451)
                   | None -> ());
                  (match x5444 with
                   | Some x5450 ->
                       Ojs.set_prop_ascii x5447 "filename"
                         (Ojs.string_to_js x5450)
                   | None -> ());
                  (match x5445 with
                   | Some x5449 ->
                       Ojs.set_prop_ascii x5447 "lineno"
                         (Ojs.float_to_js x5449)
                   | None -> ());
                  (match x5446 with
                   | Some x5448 ->
                       Ojs.set_prop_ascii x5447 "message"
                         (Ojs.string_to_js x5448)
                   | None -> ());
                  t_of_js x5447
    let cast_from = Obj.magic
  end
module ErrorEvent =
  struct
    type t = [ `ErrorEvent  | `Event ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5454 : Ojs.t) -> t_of_js x5454
    and t_0_to_js : t_0 -> Ojs.t = fun (x5453 : t) -> t_to_js x5453
    type tags = [ `ErrorEvent  | `Event ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ErrorEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x5457 : Ojs.t) -> intf_of_js __tags_of_js x5457
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x5455 : __tags intf) -> intf_to_js __tags_to_js x5455
    let (get_colno : 'tags this -> float) =
      fun (x5459 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5459) "colno")
    let (get_error : 'tags this -> any) =
      fun (x5461 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x5461) "error")
    let (get_filename : 'tags this -> string) =
      fun (x5463 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5463) "filename")
    let (get_lineno : 'tags this -> float) =
      fun (x5465 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5465) "lineno")
    let (get_message : 'tags this -> string) =
      fun (x5467 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5467) "message")
    let (create :
      colno:float ->
        error:any ->
          filename:string -> lineno:float -> message:string -> unit -> t)
      =
      fun ~colno:(x5469 : float) ->
        fun ~error:(x5470 : any) ->
          fun ~filename:(x5471 : string) ->
            fun ~lineno:(x5472 : float) ->
              fun ~message:(x5473 : string) ->
                fun () ->
                  let x5474 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x5474 "colno" (Ojs.float_to_js x5469);
                  Ojs.set_prop_ascii x5474 "error" (any_to_js x5470);
                  Ojs.set_prop_ascii x5474 "filename"
                    (Ojs.string_to_js x5471);
                  Ojs.set_prop_ascii x5474 "lineno" (Ojs.float_to_js x5472);
                  Ojs.set_prop_ascii x5474 "message" (Ojs.string_to_js x5473);
                  t_of_js x5474
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ErrorEvent")
             "prototype")
    let (create' :
      type_:string -> ?eventInitDict:ErrorEventInit.t -> unit -> t) =
      fun ~type_:(x5475 : string) ->
        fun ?eventInitDict:(x5476 : ErrorEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "ErrorEvent")
                 (let x5477 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x5477 "push" [|(Ojs.string_to_js x5475)|]);
                  (match x5476 with
                   | Some x5478 ->
                       ignore
                         (Ojs.call x5477 "push"
                            [|(ErrorEventInit.t_to_js x5478)|])
                   | None -> ());
                  x5477))
  end
module AbstractWorker =
  struct
    type t = [ `AbstractWorker ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5480 : Ojs.t) -> t_of_js x5480
    and t_0_to_js : t_0 -> Ojs.t = fun (x5479 : t) -> t_to_js x5479
    type tags = [ `AbstractWorker ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AbstractWorker ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x5483 : Ojs.t) -> intf_of_js __tags_of_js x5483
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x5481 : __tags intf) -> intf_to_js __tags_to_js x5481
    let (get_onerror :
      'tags this -> (this:t -> ev:ErrorEvent.t -> any) option) =
      fun (x5485 : 'tags this) ->
        Ojs.option_of_js
          (fun (x5487 : Ojs.t) ->
             fun ~this:(x5488 : t) ->
               fun ~ev:(x5489 : ErrorEvent.t) ->
                 any_of_js
                   (Ojs.apply x5487
                      [|(t_to_js x5488);(ErrorEvent.t_to_js x5489)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5485) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:ErrorEvent.t -> any) option -> unit) =
      fun (x5490 : 'tags this) ->
        fun (x5491 : (this:t -> ev:ErrorEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5490) "onerror"
            (Ojs.option_to_js
               (fun (x5492 : this:t -> ev:ErrorEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x5493 : Ojs.t) ->
                       fun (x5494 : Ojs.t) ->
                         any_to_js
                           (x5492 ~this:(t_of_js x5493)
                              ~ev:(ErrorEvent.t_of_js x5494)))) x5491)
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5505 : 'tags this) ->
        fun ~type_:(x5496 : 'K) ->
          fun ~listener:(x5497 : this:t -> ev:any -> any) ->
            fun
              ?options:(x5498 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5507 = this_to_js Obj.magic x5505 in
                   Ojs.call (Ojs.get_prop_ascii x5507 "addEventListener")
                     "apply"
                     [|x5507;((let x5499 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5499 "push" [|(Obj.magic x5496)|]);
                               ignore
                                 (Ojs.call x5499 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5503 : Ojs.t) ->
                                            fun (x5504 : Ojs.t) ->
                                              any_to_js
                                                (x5497 ~this:(t_of_js x5503)
                                                   ~ev:(any_of_js x5504))))|]);
                               (match x5498 with
                                | Some x5500 ->
                                    ignore
                                      (Ojs.call x5499 "push"
                                         [|((match x5500 with
                                             | `U1 x5501 ->
                                                 Ojs.bool_to_js x5501
                                             | `U2 x5502 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x5502))|])
                                | None -> ());
                               x5499))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5515 : 'tags this) ->
        fun ~type_:(x5508 : string) ->
          fun ~listener:(x5509 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x5510 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5517 = this_to_js Obj.magic x5515 in
                   Ojs.call (Ojs.get_prop_ascii x5517 "addEventListener")
                     "apply"
                     [|x5517;((let x5511 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5511 "push"
                                    [|(Ojs.string_to_js x5508)|]);
                               ignore
                                 (Ojs.call x5511 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5509)|]);
                               (match x5510 with
                                | Some x5512 ->
                                    ignore
                                      (Ojs.call x5511 "push"
                                         [|((match x5512 with
                                             | `U1 x5513 ->
                                                 Ojs.bool_to_js x5513
                                             | `U2 x5514 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x5514))|])
                                | None -> ());
                               x5511))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5527 : 'tags this) ->
        fun ~type_:(x5518 : 'K) ->
          fun ~listener:(x5519 : this:t -> ev:any -> any) ->
            fun
              ?options:(x5520 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5529 = this_to_js Obj.magic x5527 in
                   Ojs.call (Ojs.get_prop_ascii x5529 "removeEventListener")
                     "apply"
                     [|x5529;((let x5521 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5521 "push" [|(Obj.magic x5518)|]);
                               ignore
                                 (Ojs.call x5521 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5525 : Ojs.t) ->
                                            fun (x5526 : Ojs.t) ->
                                              any_to_js
                                                (x5519 ~this:(t_of_js x5525)
                                                   ~ev:(any_of_js x5526))))|]);
                               (match x5520 with
                                | Some x5522 ->
                                    ignore
                                      (Ojs.call x5521 "push"
                                         [|((match x5522 with
                                             | `U1 x5523 ->
                                                 Ojs.bool_to_js x5523
                                             | `U2 x5524 ->
                                                 EventListenerOptions.t_to_js
                                                   x5524))|])
                                | None -> ());
                               x5521))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5537 : 'tags this) ->
        fun ~type_:(x5530 : string) ->
          fun ~listener:(x5531 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x5532 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5539 = this_to_js Obj.magic x5537 in
                   Ojs.call (Ojs.get_prop_ascii x5539 "removeEventListener")
                     "apply"
                     [|x5539;((let x5533 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5533 "push"
                                    [|(Ojs.string_to_js x5530)|]);
                               ignore
                                 (Ojs.call x5533 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5531)|]);
                               (match x5532 with
                                | Some x5534 ->
                                    ignore
                                      (Ojs.call x5533 "push"
                                         [|((match x5534 with
                                             | `U1 x5535 ->
                                                 Ojs.bool_to_js x5535
                                             | `U2 x5536 ->
                                                 EventListenerOptions.t_to_js
                                                   x5536))|])
                                | None -> ());
                               x5533))|])
    let cast_from = Obj.magic
  end
module rec
  MessageEvent:sig
                 type 'T t = [ `Event  | `MessageEvent of 'T ] intf
                 type 'T t_1 = 'T t
                 type t_0 = any t
                 [@@@js.stop ]
                 type 'T tags = [ `Event  | `MessageEvent of 'T ]
                 type 'T tags_1 = 'T tags
                 type tags_0 = any tags
                 [@@@js.start ]
                 [@@@js.implem
                   type 'T tags = [ `Event  | `MessageEvent of 'T ]
                   type 'T tags_1 = 'T tags
                   type tags_0 = any tags]
                 type ('tags, 'T) this =
                   'tags intf constraint 'tags = [> `MessageEvent of 'T ]
                 val t_to_js : ('T -> Ojs.t) -> 'T t -> Ojs.t
                 val t_of_js : (Ojs.t -> 'T) -> Ojs.t -> 'T t
                 val t_1_to_js : ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
                 val t_1_of_js : (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
                 val t_0_to_js : t_0 -> Ojs.t
                 val t_0_of_js : Ojs.t -> t_0
                 val get_data : ('tags, 'T) this -> 'T
                 val get_lastEventId : ('tags, 'T) this -> string
                 val get_origin : ('tags, 'T) this -> string
                 val get_ports : ('tags, 'T) this -> MessagePort.t list
                 val get_source :
                   ('tags, 'T) this -> MessageEventSource.t option
                 val initMessageEvent :
                   ('tags, 'T) this ->
                     type_:string ->
                       ?bubbles:bool ->
                         ?cancelable:bool ->
                           ?data:any ->
                             ?origin:string ->
                               ?lastEventId:string ->
                                 ?source:MessageEventSource.t option ->
                                   ?ports:MessagePort.t list -> unit -> unit
                 val initMessageEvent' :
                   ('tags, 'T) this ->
                     type_:string ->
                       ?bubbles:bool ->
                         ?cancelable:bool ->
                           ?data:any ->
                             ?origin:string ->
                               ?lastEventId:string ->
                                 ?source:MessageEventSource.t option ->
                                   ?ports:MessagePort.t Iterable.t_1 ->
                                     unit -> unit
                 val cast_from : ('tags, 'T) this -> 'T t
                 val prototype : unit -> t_0
                 val create :
                   type_:string ->
                     ?eventInitDict:'T MessageEventInit.t -> unit -> 'T t
               end =
  struct
    type 'T t = [ `Event  | `MessageEvent of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x5542 : Ojs.t) -> t_of_js __T_of_js x5542
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x5540 : __T t) -> t_to_js __T_to_js x5540
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x5546 : Ojs.t) -> t_of_js any_of_js x5546
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x5544 : any t) -> t_to_js any_to_js x5544
    type 'T tags = [ `Event  | `MessageEvent of 'T ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `MessageEvent of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__T_of_js : Ojs.t -> __T) ->
              fun (x5550 : Ojs.t) -> intf_of_js __tags_of_js x5550
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__T_to_js : __T -> Ojs.t) ->
              fun (x5548 : __tags intf) -> intf_to_js __tags_to_js x5548
    let (get_data : ('tags, 'T) this -> 'T) =
      fun (x5552 : ('tags, 'T) this) ->
        Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5552) "data")
    let (get_lastEventId : ('tags, 'T) this -> string) =
      fun (x5555 : ('tags, 'T) this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5555)
             "lastEventId")
    let (get_origin : ('tags, 'T) this -> string) =
      fun (x5558 : ('tags, 'T) this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5558) "origin")
    let (get_ports : ('tags, 'T) this -> MessagePort.t list) =
      fun (x5561 : ('tags, 'T) this) ->
        Ojs.list_of_js MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5561) "ports")
    let (get_source : ('tags, 'T) this -> MessageEventSource.t option) =
      fun (x5565 : ('tags, 'T) this) ->
        Ojs.option_of_js MessageEventSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5565) "source")
    let (initMessageEvent :
      ('tags, 'T) this ->
        type_:string ->
          ?bubbles:bool ->
            ?cancelable:bool ->
              ?data:any ->
                ?origin:string ->
                  ?lastEventId:string ->
                    ?source:MessageEventSource.t option ->
                      ?ports:MessagePort.t list -> unit -> unit)
      =
      fun (x5587 : ('tags, 'T) this) ->
        fun ~type_:(x5569 : string) ->
          fun ?bubbles:(x5570 : bool option) ->
            fun ?cancelable:(x5571 : bool option) ->
              fun ?data:(x5572 : any option) ->
                fun ?origin:(x5573 : string option) ->
                  fun ?lastEventId:(x5574 : string option) ->
                    fun ?source:(x5575 : MessageEventSource.t option option)
                      ->
                      fun ?ports:(x5576 : MessagePort.t list option) ->
                        fun () ->
                          ignore
                            (let x5590 = this_to_js Obj.magic Obj.magic x5587 in
                             Ojs.call
                               (Ojs.get_prop_ascii x5590 "initMessageEvent")
                               "apply"
                               [|x5590;((let x5577 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x5577 "push"
                                              [|(Ojs.string_to_js x5569)|]);
                                         (match x5570 with
                                          | Some x5586 ->
                                              ignore
                                                (Ojs.call x5577 "push"
                                                   [|(Ojs.bool_to_js x5586)|])
                                          | None -> ());
                                         (match x5571 with
                                          | Some x5585 ->
                                              ignore
                                                (Ojs.call x5577 "push"
                                                   [|(Ojs.bool_to_js x5585)|])
                                          | None -> ());
                                         (match x5572 with
                                          | Some x5584 ->
                                              ignore
                                                (Ojs.call x5577 "push"
                                                   [|(any_to_js x5584)|])
                                          | None -> ());
                                         (match x5573 with
                                          | Some x5583 ->
                                              ignore
                                                (Ojs.call x5577 "push"
                                                   [|(Ojs.string_to_js x5583)|])
                                          | None -> ());
                                         (match x5574 with
                                          | Some x5582 ->
                                              ignore
                                                (Ojs.call x5577 "push"
                                                   [|(Ojs.string_to_js x5582)|])
                                          | None -> ());
                                         (match x5575 with
                                          | Some x5580 ->
                                              ignore
                                                (Ojs.call x5577 "push"
                                                   [|(Ojs.option_to_js
                                                        MessageEventSource.t_to_js
                                                        x5580)|])
                                          | None -> ());
                                         (match x5576 with
                                          | Some x5578 ->
                                              ignore
                                                (Ojs.call x5577 "push"
                                                   [|(Ojs.list_to_js
                                                        MessagePort.t_to_js
                                                        x5578)|])
                                          | None -> ());
                                         x5577))|])
    let (initMessageEvent' :
      ('tags, 'T) this ->
        type_:string ->
          ?bubbles:bool ->
            ?cancelable:bool ->
              ?data:any ->
                ?origin:string ->
                  ?lastEventId:string ->
                    ?source:MessageEventSource.t option ->
                      ?ports:MessagePort.t Iterable.t_1 -> unit -> unit)
      =
      fun (x5609 : ('tags, 'T) this) ->
        fun ~type_:(x5591 : string) ->
          fun ?bubbles:(x5592 : bool option) ->
            fun ?cancelable:(x5593 : bool option) ->
              fun ?data:(x5594 : any option) ->
                fun ?origin:(x5595 : string option) ->
                  fun ?lastEventId:(x5596 : string option) ->
                    fun ?source:(x5597 : MessageEventSource.t option option)
                      ->
                      fun ?ports:(x5598 : MessagePort.t Iterable.t_1 option)
                        ->
                        fun () ->
                          ignore
                            (let x5612 = this_to_js Obj.magic Obj.magic x5609 in
                             Ojs.call
                               (Ojs.get_prop_ascii x5612 "initMessageEvent")
                               "apply"
                               [|x5612;((let x5599 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x5599 "push"
                                              [|(Ojs.string_to_js x5591)|]);
                                         (match x5592 with
                                          | Some x5608 ->
                                              ignore
                                                (Ojs.call x5599 "push"
                                                   [|(Ojs.bool_to_js x5608)|])
                                          | None -> ());
                                         (match x5593 with
                                          | Some x5607 ->
                                              ignore
                                                (Ojs.call x5599 "push"
                                                   [|(Ojs.bool_to_js x5607)|])
                                          | None -> ());
                                         (match x5594 with
                                          | Some x5606 ->
                                              ignore
                                                (Ojs.call x5599 "push"
                                                   [|(any_to_js x5606)|])
                                          | None -> ());
                                         (match x5595 with
                                          | Some x5605 ->
                                              ignore
                                                (Ojs.call x5599 "push"
                                                   [|(Ojs.string_to_js x5605)|])
                                          | None -> ());
                                         (match x5596 with
                                          | Some x5604 ->
                                              ignore
                                                (Ojs.call x5599 "push"
                                                   [|(Ojs.string_to_js x5604)|])
                                          | None -> ());
                                         (match x5597 with
                                          | Some x5602 ->
                                              ignore
                                                (Ojs.call x5599 "push"
                                                   [|(Ojs.option_to_js
                                                        MessageEventSource.t_to_js
                                                        x5602)|])
                                          | None -> ());
                                         (match x5598 with
                                          | Some x5600 ->
                                              ignore
                                                (Ojs.call x5599 "push"
                                                   [|(Iterable.t_1_to_js
                                                        MessagePort.t_to_js
                                                        x5600)|])
                                          | None -> ());
                                         x5599))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "MessageEvent")
             "prototype")
    let (create :
      type_:string -> ?eventInitDict:'T MessageEventInit.t -> unit -> 'T t) =
      fun ~type_:(x5613 : string) ->
        fun ?eventInitDict:(x5614 : 'T MessageEventInit.t option) ->
          fun () ->
            t_of_js Obj.magic
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "MessageEvent")
                 (let x5615 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x5615 "push" [|(Ojs.string_to_js x5613)|]);
                  (match x5614 with
                   | Some x5616 ->
                       ignore
                         (Ojs.call x5615 "push"
                            [|(MessageEventInit.t_to_js Obj.magic x5616)|])
                   | None -> ());
                  x5615))
  end
 and
  MessageEventInit:sig
                     type 'T t =
                       [ `EventInit  | `MessageEventInit of 'T ] intf
                     type 'T t_1 = 'T t
                     type t_0 = any t
                     [@@@js.stop ]
                     type 'T tags = [ `EventInit  | `MessageEventInit of 'T ]
                     type 'T tags_1 = 'T tags
                     type tags_0 = any tags
                     [@@@js.start ]
                     [@@@js.implem
                       type 'T tags =
                         [ `EventInit  | `MessageEventInit of 'T ]
                       type 'T tags_1 = 'T tags
                       type tags_0 = any tags]
                     type ('tags, 'T) this =
                       'tags intf constraint 'tags =
                                   [> `MessageEventInit of 'T ]
                     val t_to_js : ('T -> Ojs.t) -> 'T t -> Ojs.t
                     val t_of_js : (Ojs.t -> 'T) -> Ojs.t -> 'T t
                     val t_1_to_js : ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
                     val t_1_of_js : (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
                     val t_0_to_js : t_0 -> Ojs.t
                     val t_0_of_js : Ojs.t -> t_0
                     val get_data : ('tags, 'T) this -> 'T option
                     val set_data : ('tags, 'T) this -> 'T -> unit
                     val get_lastEventId : ('tags, 'T) this -> string option
                     val set_lastEventId : ('tags, 'T) this -> string -> unit
                     val get_origin : ('tags, 'T) this -> string option
                     val set_origin : ('tags, 'T) this -> string -> unit
                     val get_ports :
                       ('tags, 'T) this -> MessagePort.t list option
                     val set_ports :
                       ('tags, 'T) this -> MessagePort.t list -> unit
                     val get_source :
                       ('tags, 'T) this -> MessageEventSource.t option option
                     val set_source :
                       ('tags, 'T) this ->
                         MessageEventSource.t option -> unit
                     val create :
                       ?data:'T ->
                         ?lastEventId:string ->
                           ?origin:string ->
                             ?ports:MessagePort.t list ->
                               ?source:MessageEventSource.t -> unit -> 'T t
                     val cast_from : ('tags, 'T) this -> 'T t
                   end =
  struct
    type 'T t = [ `EventInit  | `MessageEventInit of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x5621 : Ojs.t) -> t_of_js __T_of_js x5621
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x5619 : __T t) -> t_to_js __T_to_js x5619
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x5625 : Ojs.t) -> t_of_js any_of_js x5625
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x5623 : any t) -> t_to_js any_to_js x5623
    type 'T tags = [ `EventInit  | `MessageEventInit of 'T ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `MessageEventInit of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__T_of_js : Ojs.t -> __T) ->
              fun (x5629 : Ojs.t) -> intf_of_js __tags_of_js x5629
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__T_to_js : __T -> Ojs.t) ->
              fun (x5627 : __tags intf) -> intf_to_js __tags_to_js x5627
    let (get_data : ('tags, 'T) this -> 'T option) =
      fun (x5631 : ('tags, 'T) this) ->
        Ojs.option_of_js Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5631) "data")
    let (set_data : ('tags, 'T) this -> 'T -> unit) =
      fun (x5635 : ('tags, 'T) this) ->
        fun (x5636 : 'T) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x5635) "data"
            (Obj.magic x5636)
    let (get_lastEventId : ('tags, 'T) this -> string option) =
      fun (x5639 : ('tags, 'T) this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5639)
             "lastEventId")
    let (set_lastEventId : ('tags, 'T) this -> string -> unit) =
      fun (x5643 : ('tags, 'T) this) ->
        fun (x5644 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x5643)
            "lastEventId" (Ojs.string_to_js x5644)
    let (get_origin : ('tags, 'T) this -> string option) =
      fun (x5647 : ('tags, 'T) this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5647) "origin")
    let (set_origin : ('tags, 'T) this -> string -> unit) =
      fun (x5651 : ('tags, 'T) this) ->
        fun (x5652 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x5651) "origin"
            (Ojs.string_to_js x5652)
    let (get_ports : ('tags, 'T) this -> MessagePort.t list option) =
      fun (x5655 : ('tags, 'T) this) ->
        Ojs.option_of_js
          (fun (x5658 : Ojs.t) -> Ojs.list_of_js MessagePort.t_of_js x5658)
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5655) "ports")
    let (set_ports : ('tags, 'T) this -> MessagePort.t list -> unit) =
      fun (x5660 : ('tags, 'T) this) ->
        fun (x5661 : MessagePort.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x5660) "ports"
            (Ojs.list_to_js MessagePort.t_to_js x5661)
    let (get_source : ('tags, 'T) this -> MessageEventSource.t option option)
      =
      fun (x5665 : ('tags, 'T) this) ->
        Ojs.option_of_js
          (fun (x5668 : Ojs.t) ->
             Ojs.option_of_js MessageEventSource.t_of_js x5668)
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5665) "source")
    let (set_source :
      ('tags, 'T) this -> MessageEventSource.t option -> unit) =
      fun (x5670 : ('tags, 'T) this) ->
        fun (x5671 : MessageEventSource.t option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x5670) "source"
            (Ojs.option_to_js MessageEventSource.t_to_js x5671)
    let (create :
      ?data:'T ->
        ?lastEventId:string ->
          ?origin:string ->
            ?ports:MessagePort.t list ->
              ?source:MessageEventSource.t -> unit -> 'T t)
      =
      fun ?data:(x5675 : 'T option) ->
        fun ?lastEventId:(x5676 : string option) ->
          fun ?origin:(x5677 : string option) ->
            fun ?ports:(x5678 : MessagePort.t list option) ->
              fun ?source:(x5679 : MessageEventSource.t option) ->
                fun () ->
                  let x5680 = Ojs.empty_obj () in
                  (match x5675 with
                   | Some x5687 ->
                       Ojs.set_prop_ascii x5680 "data" (Obj.magic x5687)
                   | None -> ());
                  (match x5676 with
                   | Some x5686 ->
                       Ojs.set_prop_ascii x5680 "lastEventId"
                         (Ojs.string_to_js x5686)
                   | None -> ());
                  (match x5677 with
                   | Some x5685 ->
                       Ojs.set_prop_ascii x5680 "origin"
                         (Ojs.string_to_js x5685)
                   | None -> ());
                  (match x5678 with
                   | Some x5683 ->
                       Ojs.set_prop_ascii x5680 "ports"
                         (Ojs.list_to_js MessagePort.t_to_js x5683)
                   | None -> ());
                  (match x5679 with
                   | Some x5682 ->
                       Ojs.set_prop_ascii x5680 "source"
                         (MessageEventSource.t_to_js x5682)
                   | None -> ());
                  t_of_js Obj.magic x5680
    let cast_from = Obj.magic
  end and
       MessageEventSource:sig
                            type t = (MessagePort.t, ServiceWorker.t) union2
                            type t_0 = t
                            val t_to_js : t -> Ojs.t
                            val t_of_js : Ojs.t -> t
                            val t_0_to_js : t_0 -> Ojs.t
                            val t_0_of_js : Ojs.t -> t_0
                          end =
       struct
         type t = (MessagePort.t, ServiceWorker.t) union2
         let rec t_of_js : Ojs.t -> t =
           fun (x5691 : Ojs.t) ->
             union2_of_js MessagePort.t_of_js ServiceWorker.t_of_js x5691
         and t_to_js : t -> Ojs.t =
           fun (x5688 : (MessagePort.t, ServiceWorker.t) union2) ->
             union2_to_js MessagePort.t_to_js ServiceWorker.t_to_js x5688
         type t_0 = t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x5695 : Ojs.t) -> t_of_js x5695
         and t_0_to_js : t_0 -> Ojs.t = fun (x5694 : t) -> t_to_js x5694
       end and
            MessagePort:sig
                          type t = [ `EventTarget  | `MessagePort ] intf
                          type t_0 = t
                          [@@@js.stop ]
                          type tags = [ `EventTarget  | `MessagePort ]
                          type tags_0 = tags
                          [@@@js.start ]
                          [@@@js.implem
                            type tags = [ `EventTarget  | `MessagePort ]
                            type tags_0 = tags]
                          type 'tags this =
                            'tags intf constraint 'tags = [> `MessagePort ]
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val t_0_to_js : t_0 -> Ojs.t
                          val t_0_of_js : Ojs.t -> t_0
                          val get_onmessage :
                            'tags this ->
                              (this:t -> ev:MessageEvent.t_0 -> any) option
                          val set_onmessage :
                            'tags this ->
                              (this:t -> ev:MessageEvent.t_0 -> any) option
                                -> unit
                          val get_onmessageerror :
                            'tags this ->
                              (this:t -> ev:MessageEvent.t_0 -> any) option
                          val set_onmessageerror :
                            'tags this ->
                              (this:t -> ev:MessageEvent.t_0 -> any) option
                                -> unit
                          val close : 'tags this -> unit
                          val postMessage :
                            'tags this ->
                              message:any ->
                                transfer:Transferable.t list -> unit
                          val postMessage' :
                            'tags this ->
                              message:any ->
                                ?options:StructuredSerializeOptions.t ->
                                  unit -> unit
                          val start : 'tags this -> unit
                          val addEventListener :
                            'tags this ->
                              type_:'K ->
                                listener:(this:t -> ev:any -> any) ->
                                  ?options:[ `U1 of bool 
                                           | `U2 of AddEventListenerOptions.t ]
                                    -> unit -> unit
                          val addEventListener' :
                            'tags this ->
                              type_:string ->
                                listener:EventListenerOrEventListenerObject.t
                                  ->
                                  ?options:[ `U1 of bool 
                                           | `U2 of AddEventListenerOptions.t ]
                                    -> unit -> unit
                          val removeEventListener :
                            'tags this ->
                              type_:'K ->
                                listener:(this:t -> ev:any -> any) ->
                                  ?options:[ `U1 of bool 
                                           | `U2 of EventListenerOptions.t ]
                                    -> unit -> unit
                          val removeEventListener' :
                            'tags this ->
                              type_:string ->
                                listener:EventListenerOrEventListenerObject.t
                                  ->
                                  ?options:[ `U1 of bool 
                                           | `U2 of EventListenerOptions.t ]
                                    -> unit -> unit
                          val cast_from : 'tags this -> t
                          val prototype : unit -> t
                          val create : unit -> t
                        end =
            struct
              type t = [ `EventTarget  | `MessagePort ] intf
              let rec t_of_js : Ojs.t -> t = Obj.magic
              and t_to_js : t -> Ojs.t = Obj.magic
              type t_0 = t
              let rec t_0_of_js : Ojs.t -> t_0 =
                fun (x5697 : Ojs.t) -> t_of_js x5697
              and t_0_to_js : t_0 -> Ojs.t = fun (x5696 : t) -> t_to_js x5696
              type tags = [ `EventTarget  | `MessagePort ]
              type tags_0 = tags
              type 'tags this =
                'tags intf constraint 'tags = [> `MessagePort ]
              let rec this_of_js :
                'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
                fun (type __tags) ->
                  fun (__tags_of_js : Ojs.t -> __tags) ->
                    fun (x5700 : Ojs.t) -> intf_of_js __tags_of_js x5700
              and this_to_js :
                'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
                fun (type __tags) ->
                  fun (__tags_to_js : __tags -> Ojs.t) ->
                    fun (x5698 : __tags intf) ->
                      intf_to_js __tags_to_js x5698
              let (get_onmessage :
                'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option)
                =
                fun (x5702 : 'tags this) ->
                  Ojs.option_of_js
                    (fun (x5704 : Ojs.t) ->
                       fun ~this:(x5705 : t) ->
                         fun ~ev:(x5706 : MessageEvent.t_0) ->
                           any_of_js
                             (Ojs.apply x5704
                                [|(t_to_js x5705);(MessageEvent.t_0_to_js
                                                     x5706)|]))
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x5702)
                       "onmessage")
              let (set_onmessage :
                'tags this ->
                  (this:t -> ev:MessageEvent.t_0 -> any) option -> unit)
                =
                fun (x5707 : 'tags this) ->
                  fun (x5708 : (this:t -> ev:MessageEvent.t_0 -> any) option)
                    ->
                    Ojs.set_prop_ascii (this_to_js Obj.magic x5707)
                      "onmessage"
                      (Ojs.option_to_js
                         (fun (x5709 : this:t -> ev:MessageEvent.t_0 -> any)
                            ->
                            Ojs.fun_to_js 2
                              (fun (x5710 : Ojs.t) ->
                                 fun (x5711 : Ojs.t) ->
                                   any_to_js
                                     (x5709 ~this:(t_of_js x5710)
                                        ~ev:(MessageEvent.t_0_of_js x5711))))
                         x5708)
              let (get_onmessageerror :
                'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option)
                =
                fun (x5713 : 'tags this) ->
                  Ojs.option_of_js
                    (fun (x5715 : Ojs.t) ->
                       fun ~this:(x5716 : t) ->
                         fun ~ev:(x5717 : MessageEvent.t_0) ->
                           any_of_js
                             (Ojs.apply x5715
                                [|(t_to_js x5716);(MessageEvent.t_0_to_js
                                                     x5717)|]))
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x5713)
                       "onmessageerror")
              let (set_onmessageerror :
                'tags this ->
                  (this:t -> ev:MessageEvent.t_0 -> any) option -> unit)
                =
                fun (x5718 : 'tags this) ->
                  fun (x5719 : (this:t -> ev:MessageEvent.t_0 -> any) option)
                    ->
                    Ojs.set_prop_ascii (this_to_js Obj.magic x5718)
                      "onmessageerror"
                      (Ojs.option_to_js
                         (fun (x5720 : this:t -> ev:MessageEvent.t_0 -> any)
                            ->
                            Ojs.fun_to_js 2
                              (fun (x5721 : Ojs.t) ->
                                 fun (x5722 : Ojs.t) ->
                                   any_to_js
                                     (x5720 ~this:(t_of_js x5721)
                                        ~ev:(MessageEvent.t_0_of_js x5722))))
                         x5719)
              let (close : 'tags this -> unit) =
                fun (x5724 : 'tags this) ->
                  ignore (Ojs.call (this_to_js Obj.magic x5724) "close" [||])
              let (postMessage :
                'tags this ->
                  message:any -> transfer:Transferable.t list -> unit)
                =
                fun (x5729 : 'tags this) ->
                  fun ~message:(x5726 : any) ->
                    fun ~transfer:(x5727 : Transferable.t list) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x5729) "postMessage"
                           [|(any_to_js x5726);(Ojs.list_to_js
                                                  Transferable.t_to_js x5727)|])
              let (postMessage' :
                'tags this ->
                  message:any ->
                    ?options:StructuredSerializeOptions.t -> unit -> unit)
                =
                fun (x5735 : 'tags this) ->
                  fun ~message:(x5731 : any) ->
                    fun
                      ?options:(x5732 : StructuredSerializeOptions.t option)
                      ->
                      fun () ->
                        ignore
                          (let x5737 = this_to_js Obj.magic x5735 in
                           Ojs.call (Ojs.get_prop_ascii x5737 "postMessage")
                             "apply"
                             [|x5737;((let x5733 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       ignore
                                         (Ojs.call x5733 "push"
                                            [|(any_to_js x5731)|]);
                                       (match x5732 with
                                        | Some x5734 ->
                                            ignore
                                              (Ojs.call x5733 "push"
                                                 [|(StructuredSerializeOptions.t_to_js
                                                      x5734)|])
                                        | None -> ());
                                       x5733))|])
              let (start : 'tags this -> unit) =
                fun (x5738 : 'tags this) ->
                  ignore (Ojs.call (this_to_js Obj.magic x5738) "start" [||])
              let (addEventListener :
                'tags this ->
                  type_:'K ->
                    listener:(this:t -> ev:any -> any) ->
                      ?options:[ `U1 of bool 
                               | `U2 of AddEventListenerOptions.t ]
                        -> unit -> unit)
                =
                fun (x5749 : 'tags this) ->
                  fun ~type_:(x5740 : 'K) ->
                    fun ~listener:(x5741 : this:t -> ev:any -> any) ->
                      fun
                        ?options:(x5742 :
                                   [ `U1 of bool 
                                   | `U2 of AddEventListenerOptions.t ]
                                     option)
                        ->
                        fun () ->
                          ignore
                            (let x5751 = this_to_js Obj.magic x5749 in
                             Ojs.call
                               (Ojs.get_prop_ascii x5751 "addEventListener")
                               "apply"
                               [|x5751;((let x5743 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x5743 "push"
                                              [|(Obj.magic x5740)|]);
                                         ignore
                                           (Ojs.call x5743 "push"
                                              [|(Ojs.fun_to_js 2
                                                   (fun (x5747 : Ojs.t) ->
                                                      fun (x5748 : Ojs.t) ->
                                                        any_to_js
                                                          (x5741
                                                             ~this:(t_of_js
                                                                    x5747)
                                                             ~ev:(any_of_js
                                                                    x5748))))|]);
                                         (match x5742 with
                                          | Some x5744 ->
                                              ignore
                                                (Ojs.call x5743 "push"
                                                   [|((match x5744 with
                                                       | `U1 x5745 ->
                                                           Ojs.bool_to_js
                                                             x5745
                                                       | `U2 x5746 ->
                                                           AddEventListenerOptions.t_to_js
                                                             x5746))|])
                                          | None -> ());
                                         x5743))|])
              let (addEventListener' :
                'tags this ->
                  type_:string ->
                    listener:EventListenerOrEventListenerObject.t ->
                      ?options:[ `U1 of bool 
                               | `U2 of AddEventListenerOptions.t ]
                        -> unit -> unit)
                =
                fun (x5759 : 'tags this) ->
                  fun ~type_:(x5752 : string) ->
                    fun
                      ~listener:(x5753 :
                                  EventListenerOrEventListenerObject.t)
                      ->
                      fun
                        ?options:(x5754 :
                                   [ `U1 of bool 
                                   | `U2 of AddEventListenerOptions.t ]
                                     option)
                        ->
                        fun () ->
                          ignore
                            (let x5761 = this_to_js Obj.magic x5759 in
                             Ojs.call
                               (Ojs.get_prop_ascii x5761 "addEventListener")
                               "apply"
                               [|x5761;((let x5755 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x5755 "push"
                                              [|(Ojs.string_to_js x5752)|]);
                                         ignore
                                           (Ojs.call x5755 "push"
                                              [|(EventListenerOrEventListenerObject.t_to_js
                                                   x5753)|]);
                                         (match x5754 with
                                          | Some x5756 ->
                                              ignore
                                                (Ojs.call x5755 "push"
                                                   [|((match x5756 with
                                                       | `U1 x5757 ->
                                                           Ojs.bool_to_js
                                                             x5757
                                                       | `U2 x5758 ->
                                                           AddEventListenerOptions.t_to_js
                                                             x5758))|])
                                          | None -> ());
                                         x5755))|])
              let (removeEventListener :
                'tags this ->
                  type_:'K ->
                    listener:(this:t -> ev:any -> any) ->
                      ?options:[ `U1 of bool 
                               | `U2 of EventListenerOptions.t ]
                        -> unit -> unit)
                =
                fun (x5771 : 'tags this) ->
                  fun ~type_:(x5762 : 'K) ->
                    fun ~listener:(x5763 : this:t -> ev:any -> any) ->
                      fun
                        ?options:(x5764 :
                                   [ `U1 of bool 
                                   | `U2 of EventListenerOptions.t ] option)
                        ->
                        fun () ->
                          ignore
                            (let x5773 = this_to_js Obj.magic x5771 in
                             Ojs.call
                               (Ojs.get_prop_ascii x5773
                                  "removeEventListener") "apply"
                               [|x5773;((let x5765 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x5765 "push"
                                              [|(Obj.magic x5762)|]);
                                         ignore
                                           (Ojs.call x5765 "push"
                                              [|(Ojs.fun_to_js 2
                                                   (fun (x5769 : Ojs.t) ->
                                                      fun (x5770 : Ojs.t) ->
                                                        any_to_js
                                                          (x5763
                                                             ~this:(t_of_js
                                                                    x5769)
                                                             ~ev:(any_of_js
                                                                    x5770))))|]);
                                         (match x5764 with
                                          | Some x5766 ->
                                              ignore
                                                (Ojs.call x5765 "push"
                                                   [|((match x5766 with
                                                       | `U1 x5767 ->
                                                           Ojs.bool_to_js
                                                             x5767
                                                       | `U2 x5768 ->
                                                           EventListenerOptions.t_to_js
                                                             x5768))|])
                                          | None -> ());
                                         x5765))|])
              let (removeEventListener' :
                'tags this ->
                  type_:string ->
                    listener:EventListenerOrEventListenerObject.t ->
                      ?options:[ `U1 of bool 
                               | `U2 of EventListenerOptions.t ]
                        -> unit -> unit)
                =
                fun (x5781 : 'tags this) ->
                  fun ~type_:(x5774 : string) ->
                    fun
                      ~listener:(x5775 :
                                  EventListenerOrEventListenerObject.t)
                      ->
                      fun
                        ?options:(x5776 :
                                   [ `U1 of bool 
                                   | `U2 of EventListenerOptions.t ] option)
                        ->
                        fun () ->
                          ignore
                            (let x5783 = this_to_js Obj.magic x5781 in
                             Ojs.call
                               (Ojs.get_prop_ascii x5783
                                  "removeEventListener") "apply"
                               [|x5783;((let x5777 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x5777 "push"
                                              [|(Ojs.string_to_js x5774)|]);
                                         ignore
                                           (Ojs.call x5777 "push"
                                              [|(EventListenerOrEventListenerObject.t_to_js
                                                   x5775)|]);
                                         (match x5776 with
                                          | Some x5778 ->
                                              ignore
                                                (Ojs.call x5777 "push"
                                                   [|((match x5778 with
                                                       | `U1 x5779 ->
                                                           Ojs.bool_to_js
                                                             x5779
                                                       | `U2 x5780 ->
                                                           EventListenerOptions.t_to_js
                                                             x5780))|])
                                          | None -> ());
                                         x5777))|])
              let cast_from = Obj.magic
              let (prototype : unit -> t) =
                fun () ->
                  t_of_js
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "MessagePort")
                       "prototype")
              let (create : unit -> t) =
                fun () ->
                  t_of_js
                    (Ojs.new_obj
                       (Ojs.get_prop_ascii Ojs.global "MessagePort") 
                       [||])
            end and
                 ServiceWorker:sig
                                 type t =
                                   [ `AbstractWorker  | `EventTarget 
                                   | `ServiceWorker ] intf
                                 type t_0 = t
                                 [@@@js.stop ]
                                 type tags =
                                   [ `AbstractWorker  | `EventTarget 
                                   | `ServiceWorker ]
                                 type tags_0 = tags
                                 [@@@js.start ]
                                 [@@@js.implem
                                   type tags =
                                     [ `AbstractWorker  | `EventTarget 
                                     | `ServiceWorker ]
                                   type tags_0 = tags]
                                 type 'tags this =
                                   'tags intf constraint 'tags =
                                               [> `ServiceWorker ]
                                 val t_to_js : t -> Ojs.t
                                 val t_of_js : Ojs.t -> t
                                 val t_0_to_js : t_0 -> Ojs.t
                                 val t_0_of_js : Ojs.t -> t_0
                                 val get_onstatechange :
                                   'tags this ->
                                     (this:t -> ev:Event.t -> any) option
                                 val set_onstatechange :
                                   'tags this ->
                                     (this:t -> ev:Event.t -> any) option ->
                                       unit
                                 val get_scriptURL : 'tags this -> string
                                 val get_state :
                                   'tags this -> ServiceWorkerState.t
                                 val postMessage :
                                   'tags this ->
                                     message:any ->
                                       transfer:Transferable.t list -> unit
                                 val postMessage' :
                                   'tags this ->
                                     message:any ->
                                       ?options:StructuredSerializeOptions.t
                                         -> unit -> unit
                                 val addEventListener :
                                   'tags this ->
                                     type_:'K ->
                                       listener:(this:t -> ev:any -> any) ->
                                         ?options:[ `U1 of bool 
                                                  | `U2 of
                                                      AddEventListenerOptions.t
                                                      ]
                                           -> unit -> unit
                                 val addEventListener' :
                                   'tags this ->
                                     type_:string ->
                                       listener:EventListenerOrEventListenerObject.t
                                         ->
                                         ?options:[ `U1 of bool 
                                                  | `U2 of
                                                      AddEventListenerOptions.t
                                                      ]
                                           -> unit -> unit
                                 val removeEventListener :
                                   'tags this ->
                                     type_:'K ->
                                       listener:(this:t -> ev:any -> any) ->
                                         ?options:[ `U1 of bool 
                                                  | `U2 of
                                                      EventListenerOptions.t ]
                                           -> unit -> unit
                                 val removeEventListener' :
                                   'tags this ->
                                     type_:string ->
                                       listener:EventListenerOrEventListenerObject.t
                                         ->
                                         ?options:[ `U1 of bool 
                                                  | `U2 of
                                                      EventListenerOptions.t ]
                                           -> unit -> unit
                                 val cast_from : 'tags this -> t
                                 val prototype : unit -> t
                                 val create : unit -> t
                               end =
                 struct
                   type t =
                     [ `AbstractWorker  | `EventTarget  | `ServiceWorker ]
                       intf
                   let rec t_of_js : Ojs.t -> t = Obj.magic
                   and t_to_js : t -> Ojs.t = Obj.magic
                   type t_0 = t
                   let rec t_0_of_js : Ojs.t -> t_0 =
                     fun (x5785 : Ojs.t) -> t_of_js x5785
                   and t_0_to_js : t_0 -> Ojs.t =
                     fun (x5784 : t) -> t_to_js x5784
                   type tags =
                     [ `AbstractWorker  | `EventTarget  | `ServiceWorker ]
                   type tags_0 = tags
                   type 'tags this =
                     'tags intf constraint 'tags = [> `ServiceWorker ]
                   let rec this_of_js :
                     'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
                     fun (type __tags) ->
                       fun (__tags_of_js : Ojs.t -> __tags) ->
                         fun (x5788 : Ojs.t) -> intf_of_js __tags_of_js x5788
                   and this_to_js :
                     'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
                     fun (type __tags) ->
                       fun (__tags_to_js : __tags -> Ojs.t) ->
                         fun (x5786 : __tags intf) ->
                           intf_to_js __tags_to_js x5786
                   let (get_onstatechange :
                     'tags this -> (this:t -> ev:Event.t -> any) option) =
                     fun (x5790 : 'tags this) ->
                       Ojs.option_of_js
                         (fun (x5792 : Ojs.t) ->
                            fun ~this:(x5793 : t) ->
                              fun ~ev:(x5794 : Event.t) ->
                                any_of_js
                                  (Ojs.apply x5792
                                     [|(t_to_js x5793);(Event.t_to_js x5794)|]))
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x5790)
                            "onstatechange")
                   let (set_onstatechange :
                     'tags this ->
                       (this:t -> ev:Event.t -> any) option -> unit)
                     =
                     fun (x5795 : 'tags this) ->
                       fun (x5796 : (this:t -> ev:Event.t -> any) option) ->
                         Ojs.set_prop_ascii (this_to_js Obj.magic x5795)
                           "onstatechange"
                           (Ojs.option_to_js
                              (fun (x5797 : this:t -> ev:Event.t -> any) ->
                                 Ojs.fun_to_js 2
                                   (fun (x5798 : Ojs.t) ->
                                      fun (x5799 : Ojs.t) ->
                                        any_to_js
                                          (x5797 ~this:(t_of_js x5798)
                                             ~ev:(Event.t_of_js x5799))))
                              x5796)
                   let (get_scriptURL : 'tags this -> string) =
                     fun (x5801 : 'tags this) ->
                       Ojs.string_of_js
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x5801)
                            "scriptURL")
                   let (get_state : 'tags this -> ServiceWorkerState.t) =
                     fun (x5803 : 'tags this) ->
                       ServiceWorkerState.t_of_js
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x5803)
                            "state")
                   let (postMessage :
                     'tags this ->
                       message:any -> transfer:Transferable.t list -> unit)
                     =
                     fun (x5808 : 'tags this) ->
                       fun ~message:(x5805 : any) ->
                         fun ~transfer:(x5806 : Transferable.t list) ->
                           ignore
                             (Ojs.call (this_to_js Obj.magic x5808)
                                "postMessage"
                                [|(any_to_js x5805);(Ojs.list_to_js
                                                       Transferable.t_to_js
                                                       x5806)|])
                   let (postMessage' :
                     'tags this ->
                       message:any ->
                         ?options:StructuredSerializeOptions.t ->
                           unit -> unit)
                     =
                     fun (x5814 : 'tags this) ->
                       fun ~message:(x5810 : any) ->
                         fun
                           ?options:(x5811 :
                                      StructuredSerializeOptions.t option)
                           ->
                           fun () ->
                             ignore
                               (let x5816 = this_to_js Obj.magic x5814 in
                                Ojs.call
                                  (Ojs.get_prop_ascii x5816 "postMessage")
                                  "apply"
                                  [|x5816;((let x5812 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            ignore
                                              (Ojs.call x5812 "push"
                                                 [|(any_to_js x5810)|]);
                                            (match x5811 with
                                             | Some x5813 ->
                                                 ignore
                                                   (Ojs.call x5812 "push"
                                                      [|(StructuredSerializeOptions.t_to_js
                                                           x5813)|])
                                             | None -> ());
                                            x5812))|])
                   let (addEventListener :
                     'tags this ->
                       type_:'K ->
                         listener:(this:t -> ev:any -> any) ->
                           ?options:[ `U1 of bool 
                                    | `U2 of AddEventListenerOptions.t ]
                             -> unit -> unit)
                     =
                     fun (x5826 : 'tags this) ->
                       fun ~type_:(x5817 : 'K) ->
                         fun ~listener:(x5818 : this:t -> ev:any -> any) ->
                           fun
                             ?options:(x5819 :
                                        [ `U1 of bool 
                                        | `U2 of AddEventListenerOptions.t ]
                                          option)
                             ->
                             fun () ->
                               ignore
                                 (let x5828 = this_to_js Obj.magic x5826 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x5828
                                       "addEventListener") "apply"
                                    [|x5828;((let x5820 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x5820 "push"
                                                   [|(Obj.magic x5817)|]);
                                              ignore
                                                (Ojs.call x5820 "push"
                                                   [|(Ojs.fun_to_js 2
                                                        (fun (x5824 : Ojs.t)
                                                           ->
                                                           fun
                                                             (x5825 : Ojs.t)
                                                             ->
                                                             any_to_js
                                                               (x5818
                                                                  ~this:(
                                                                  t_of_js
                                                                    x5824)
                                                                  ~ev:(
                                                                  any_of_js
                                                                    x5825))))|]);
                                              (match x5819 with
                                               | Some x5821 ->
                                                   ignore
                                                     (Ojs.call x5820 "push"
                                                        [|((match x5821 with
                                                            | `U1 x5822 ->
                                                                Ojs.bool_to_js
                                                                  x5822
                                                            | `U2 x5823 ->
                                                                AddEventListenerOptions.t_to_js
                                                                  x5823))|])
                                               | None -> ());
                                              x5820))|])
                   let (addEventListener' :
                     'tags this ->
                       type_:string ->
                         listener:EventListenerOrEventListenerObject.t ->
                           ?options:[ `U1 of bool 
                                    | `U2 of AddEventListenerOptions.t ]
                             -> unit -> unit)
                     =
                     fun (x5836 : 'tags this) ->
                       fun ~type_:(x5829 : string) ->
                         fun
                           ~listener:(x5830 :
                                       EventListenerOrEventListenerObject.t)
                           ->
                           fun
                             ?options:(x5831 :
                                        [ `U1 of bool 
                                        | `U2 of AddEventListenerOptions.t ]
                                          option)
                             ->
                             fun () ->
                               ignore
                                 (let x5838 = this_to_js Obj.magic x5836 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x5838
                                       "addEventListener") "apply"
                                    [|x5838;((let x5832 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x5832 "push"
                                                   [|(Ojs.string_to_js x5829)|]);
                                              ignore
                                                (Ojs.call x5832 "push"
                                                   [|(EventListenerOrEventListenerObject.t_to_js
                                                        x5830)|]);
                                              (match x5831 with
                                               | Some x5833 ->
                                                   ignore
                                                     (Ojs.call x5832 "push"
                                                        [|((match x5833 with
                                                            | `U1 x5834 ->
                                                                Ojs.bool_to_js
                                                                  x5834
                                                            | `U2 x5835 ->
                                                                AddEventListenerOptions.t_to_js
                                                                  x5835))|])
                                               | None -> ());
                                              x5832))|])
                   let (removeEventListener :
                     'tags this ->
                       type_:'K ->
                         listener:(this:t -> ev:any -> any) ->
                           ?options:[ `U1 of bool 
                                    | `U2 of EventListenerOptions.t ]
                             -> unit -> unit)
                     =
                     fun (x5848 : 'tags this) ->
                       fun ~type_:(x5839 : 'K) ->
                         fun ~listener:(x5840 : this:t -> ev:any -> any) ->
                           fun
                             ?options:(x5841 :
                                        [ `U1 of bool 
                                        | `U2 of EventListenerOptions.t ]
                                          option)
                             ->
                             fun () ->
                               ignore
                                 (let x5850 = this_to_js Obj.magic x5848 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x5850
                                       "removeEventListener") "apply"
                                    [|x5850;((let x5842 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x5842 "push"
                                                   [|(Obj.magic x5839)|]);
                                              ignore
                                                (Ojs.call x5842 "push"
                                                   [|(Ojs.fun_to_js 2
                                                        (fun (x5846 : Ojs.t)
                                                           ->
                                                           fun
                                                             (x5847 : Ojs.t)
                                                             ->
                                                             any_to_js
                                                               (x5840
                                                                  ~this:(
                                                                  t_of_js
                                                                    x5846)
                                                                  ~ev:(
                                                                  any_of_js
                                                                    x5847))))|]);
                                              (match x5841 with
                                               | Some x5843 ->
                                                   ignore
                                                     (Ojs.call x5842 "push"
                                                        [|((match x5843 with
                                                            | `U1 x5844 ->
                                                                Ojs.bool_to_js
                                                                  x5844
                                                            | `U2 x5845 ->
                                                                EventListenerOptions.t_to_js
                                                                  x5845))|])
                                               | None -> ());
                                              x5842))|])
                   let (removeEventListener' :
                     'tags this ->
                       type_:string ->
                         listener:EventListenerOrEventListenerObject.t ->
                           ?options:[ `U1 of bool 
                                    | `U2 of EventListenerOptions.t ]
                             -> unit -> unit)
                     =
                     fun (x5858 : 'tags this) ->
                       fun ~type_:(x5851 : string) ->
                         fun
                           ~listener:(x5852 :
                                       EventListenerOrEventListenerObject.t)
                           ->
                           fun
                             ?options:(x5853 :
                                        [ `U1 of bool 
                                        | `U2 of EventListenerOptions.t ]
                                          option)
                             ->
                             fun () ->
                               ignore
                                 (let x5860 = this_to_js Obj.magic x5858 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x5860
                                       "removeEventListener") "apply"
                                    [|x5860;((let x5854 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x5854 "push"
                                                   [|(Ojs.string_to_js x5851)|]);
                                              ignore
                                                (Ojs.call x5854 "push"
                                                   [|(EventListenerOrEventListenerObject.t_to_js
                                                        x5852)|]);
                                              (match x5853 with
                                               | Some x5855 ->
                                                   ignore
                                                     (Ojs.call x5854 "push"
                                                        [|((match x5855 with
                                                            | `U1 x5856 ->
                                                                Ojs.bool_to_js
                                                                  x5856
                                                            | `U2 x5857 ->
                                                                EventListenerOptions.t_to_js
                                                                  x5857))|])
                                               | None -> ());
                                              x5854))|])
                   let cast_from = Obj.magic
                   let (prototype : unit -> t) =
                     fun () ->
                       t_of_js
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global "ServiceWorker")
                            "prototype")
                   let (create : unit -> t) =
                     fun () ->
                       t_of_js
                         (Ojs.new_obj
                            (Ojs.get_prop_ascii Ojs.global "ServiceWorker")
                            [||])
                 end and
                      StructuredSerializeOptions:sig
                                                   type t =
                                                     [
                                                       `StructuredSerializeOptions
                                                         ]
                                                       intf
                                                   type t_0 = t
                                                   [@@@js.stop ]
                                                   type tags =
                                                     [
                                                       `StructuredSerializeOptions
                                                         ]
                                                   type tags_0 = tags
                                                   [@@@js.start ]
                                                   [@@@js.implem
                                                     type tags =
                                                       [
                                                         `StructuredSerializeOptions
                                                           ]
                                                     type tags_0 = tags]
                                                   type 'tags this =
                                                     'tags intf constraint
                                                                 'tags =
                                                                 [>
                                                                   `StructuredSerializeOptions
                                                                    ]
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                   val get_transfer :
                                                     'tags this ->
                                                       Transferable.t list
                                                         option
                                                   val set_transfer :
                                                     'tags this ->
                                                       Transferable.t list ->
                                                         unit
                                                   val create :
                                                     ?transfer:Transferable.t
                                                       list -> unit -> t
                                                   val cast_from :
                                                     'tags this -> t
                                                 end =
                      struct
                        type t = [ `StructuredSerializeOptions ] intf
                        let rec t_of_js : Ojs.t -> t = Obj.magic
                        and t_to_js : t -> Ojs.t = Obj.magic
                        type t_0 = t
                        let rec t_0_of_js : Ojs.t -> t_0 =
                          fun (x5862 : Ojs.t) -> t_of_js x5862
                        and t_0_to_js : t_0 -> Ojs.t =
                          fun (x5861 : t) -> t_to_js x5861
                        type tags = [ `StructuredSerializeOptions ]
                        type tags_0 = tags
                        type 'tags this =
                          'tags intf constraint 'tags =
                                      [> `StructuredSerializeOptions ]
                        let rec this_of_js :
                          'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
                          fun (type __tags) ->
                            fun (__tags_of_js : Ojs.t -> __tags) ->
                              fun (x5865 : Ojs.t) ->
                                intf_of_js __tags_of_js x5865
                        and this_to_js :
                          'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
                          fun (type __tags) ->
                            fun (__tags_to_js : __tags -> Ojs.t) ->
                              fun (x5863 : __tags intf) ->
                                intf_to_js __tags_to_js x5863
                        let (get_transfer :
                          'tags this -> Transferable.t list option) =
                          fun (x5867 : 'tags this) ->
                            Ojs.option_of_js
                              (fun (x5869 : Ojs.t) ->
                                 Ojs.list_of_js Transferable.t_of_js x5869)
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic x5867) "transfer")
                        let (set_transfer :
                          'tags this -> Transferable.t list -> unit) =
                          fun (x5871 : 'tags this) ->
                            fun (x5872 : Transferable.t list) ->
                              Ojs.set_prop_ascii (this_to_js Obj.magic x5871)
                                "transfer"
                                (Ojs.list_to_js Transferable.t_to_js x5872)
                        let (create :
                          ?transfer:Transferable.t list -> unit -> t) =
                          fun ?transfer:(x5875 : Transferable.t list option)
                            ->
                            fun () ->
                              let x5876 = Ojs.empty_obj () in
                              (match x5875 with
                               | Some x5877 ->
                                   Ojs.set_prop_ascii x5876 "transfer"
                                     (Ojs.list_to_js Transferable.t_to_js
                                        x5877)
                               | None -> ());
                              t_of_js x5876
                        let cast_from = Obj.magic
                      end and
                           Transferable:sig
                                          type t =
                                            (ArrayBuffer.t_0, ImageBitmap.t,
                                              MessagePort.t) union3
                                          type t_0 = t
                                          val t_to_js : t -> Ojs.t
                                          val t_of_js : Ojs.t -> t
                                          val t_0_to_js : t_0 -> Ojs.t
                                          val t_0_of_js : Ojs.t -> t_0
                                        end =
                           struct
                             type t =
                               (ArrayBuffer.t_0, ImageBitmap.t,
                                 MessagePort.t) union3
                             let rec t_of_js : Ojs.t -> t =
                               fun (x5883 : Ojs.t) ->
                                 union3_of_js ArrayBuffer.t_0_of_js
                                   ImageBitmap.t_of_js MessagePort.t_of_js
                                   x5883
                             and t_to_js : t -> Ojs.t =
                               fun
                                 (x5879 :
                                   (ArrayBuffer.t_0, ImageBitmap.t,
                                     MessagePort.t) union3)
                                 ->
                                 union3_to_js ArrayBuffer.t_0_to_js
                                   ImageBitmap.t_to_js MessagePort.t_to_js
                                   x5879
                             type t_0 = t
                             let rec t_0_of_js : Ojs.t -> t_0 =
                               fun (x5888 : Ojs.t) -> t_of_js x5888
                             and t_0_to_js : t_0 -> Ojs.t =
                               fun (x5887 : t) -> t_to_js x5887
                           end
module AbstractWorkerEventMap =
  struct
    type t = [ `AbstractWorkerEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5890 : Ojs.t) -> t_of_js x5890
    and t_0_to_js : t_0 -> Ojs.t = fun (x5889 : t) -> t_to_js x5889
    type tags = [ `AbstractWorkerEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `AbstractWorkerEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x5893 : Ojs.t) -> intf_of_js __tags_of_js x5893
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x5891 : __tags intf) -> intf_to_js __tags_to_js x5891
    let (get_error : 'tags this -> ErrorEvent.t) =
      fun (x5895 : 'tags this) ->
        ErrorEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5895) "error")
    let (set_error : 'tags this -> ErrorEvent.t -> unit) =
      fun (x5897 : 'tags this) ->
        fun (x5898 : ErrorEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5897) "error"
            (ErrorEvent.t_to_js x5898)
    let (create : error:ErrorEvent.t -> unit -> t) =
      fun ~error:(x5900 : ErrorEvent.t) ->
        fun () ->
          let x5901 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x5901 "error" (ErrorEvent.t_to_js x5900);
          t_of_js x5901
    let cast_from = Obj.magic
  end
module WorkerEventMap =
  struct
    type t = [ `AbstractWorkerEventMap  | `WorkerEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5903 : Ojs.t) -> t_of_js x5903
    and t_0_to_js : t_0 -> Ojs.t = fun (x5902 : t) -> t_to_js x5902
    type tags = [ `AbstractWorkerEventMap  | `WorkerEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x5906 : Ojs.t) -> intf_of_js __tags_of_js x5906
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x5904 : __tags intf) -> intf_to_js __tags_to_js x5904
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x5908 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5908) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x5910 : 'tags this) ->
        fun (x5911 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5910) "message"
            (MessageEvent.t_0_to_js x5911)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x5913 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5913) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x5915 : 'tags this) ->
        fun (x5916 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5915) "messageerror"
            (MessageEvent.t_0_to_js x5916)
    let (create :
      message:MessageEvent.t_0 -> messageerror:MessageEvent.t_0 -> unit -> t)
      =
      fun ~message:(x5918 : MessageEvent.t_0) ->
        fun ~messageerror:(x5919 : MessageEvent.t_0) ->
          fun () ->
            let x5920 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x5920 "message" (MessageEvent.t_0_to_js x5918);
            Ojs.set_prop_ascii x5920 "messageerror"
              (MessageEvent.t_0_to_js x5919);
            t_of_js x5920
    let cast_from = Obj.magic
  end
module WorkerType =
  struct
    type t = [ `L_s119_module  | `L_s49_classic ]
    let rec t_of_js : Ojs.t -> t =
      fun (x5922 : Ojs.t) ->
        let x5923 = x5922 in
        match Ojs.string_of_js x5923 with
        | "module" -> `L_s119_module
        | "classic" -> `L_s49_classic
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x5921 : [ `L_s119_module  | `L_s49_classic ]) ->
        match x5921 with
        | `L_s119_module -> Ojs.string_to_js "module"
        | `L_s49_classic -> Ojs.string_to_js "classic"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5925 : Ojs.t) -> t_of_js x5925
    and t_0_to_js : t_0 -> Ojs.t = fun (x5924 : t) -> t_to_js x5924
  end
module WorkerOptions =
  struct
    type t = [ `WorkerOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5927 : Ojs.t) -> t_of_js x5927
    and t_0_to_js : t_0 -> Ojs.t = fun (x5926 : t) -> t_to_js x5926
    type tags = [ `WorkerOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x5930 : Ojs.t) -> intf_of_js __tags_of_js x5930
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x5928 : __tags intf) -> intf_to_js __tags_to_js x5928
    let (get_credentials : 'tags this -> RequestCredentials.t option) =
      fun (x5932 : 'tags this) ->
        Ojs.option_of_js RequestCredentials.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5932) "credentials")
    let (set_credentials : 'tags this -> RequestCredentials.t -> unit) =
      fun (x5935 : 'tags this) ->
        fun (x5936 : RequestCredentials.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5935) "credentials"
            (RequestCredentials.t_to_js x5936)
    let (get_name : 'tags this -> string option) =
      fun (x5938 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5938) "name")
    let (set_name : 'tags this -> string -> unit) =
      fun (x5941 : 'tags this) ->
        fun (x5942 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5941) "name"
            (Ojs.string_to_js x5942)
    let (get_type : 'tags this -> WorkerType.t option) =
      fun (x5944 : 'tags this) ->
        Ojs.option_of_js WorkerType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5944) "type")
    let (set_type : 'tags this -> WorkerType.t -> unit) =
      fun (x5947 : 'tags this) ->
        fun (x5948 : WorkerType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5947) "type"
            (WorkerType.t_to_js x5948)
    let (create :
      ?credentials:RequestCredentials.t ->
        ?name:string -> ?type_:WorkerType.t -> unit -> t)
      =
      fun ?credentials:(x5950 : RequestCredentials.t option) ->
        fun ?name:(x5951 : string option) ->
          fun ?type_:(x5952 : WorkerType.t option) ->
            fun () ->
              let x5953 = Ojs.empty_obj () in
              (match x5950 with
               | Some x5956 ->
                   Ojs.set_prop_ascii x5953 "credentials"
                     (RequestCredentials.t_to_js x5956)
               | None -> ());
              (match x5951 with
               | Some x5955 ->
                   Ojs.set_prop_ascii x5953 "name" (Ojs.string_to_js x5955)
               | None -> ());
              (match x5952 with
               | Some x5954 ->
                   Ojs.set_prop_ascii x5953 "type" (WorkerType.t_to_js x5954)
               | None -> ());
              t_of_js x5953
    let cast_from = Obj.magic
  end
module Worker =
  struct
    type t = [ `AbstractWorker  | `EventTarget  | `Worker ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5958 : Ojs.t) -> t_of_js x5958
    and t_0_to_js : t_0 -> Ojs.t = fun (x5957 : t) -> t_to_js x5957
    type tags = [ `AbstractWorker  | `EventTarget  | `Worker ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Worker ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x5961 : Ojs.t) -> intf_of_js __tags_of_js x5961
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x5959 : __tags intf) -> intf_to_js __tags_to_js x5959
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x5963 : 'tags this) ->
        Ojs.option_of_js
          (fun (x5965 : Ojs.t) ->
             fun ~this:(x5966 : t) ->
               fun ~ev:(x5967 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x5965
                      [|(t_to_js x5966);(MessageEvent.t_0_to_js x5967)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5963) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x5968 : 'tags this) ->
        fun (x5969 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5968) "onmessage"
            (Ojs.option_to_js
               (fun (x5970 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x5971 : Ojs.t) ->
                       fun (x5972 : Ojs.t) ->
                         any_to_js
                           (x5970 ~this:(t_of_js x5971)
                              ~ev:(MessageEvent.t_0_of_js x5972)))) x5969)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x5974 : 'tags this) ->
        Ojs.option_of_js
          (fun (x5976 : Ojs.t) ->
             fun ~this:(x5977 : t) ->
               fun ~ev:(x5978 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x5976
                      [|(t_to_js x5977);(MessageEvent.t_0_to_js x5978)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5974) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x5979 : 'tags this) ->
        fun (x5980 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5979) "onmessageerror"
            (Ojs.option_to_js
               (fun (x5981 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x5982 : Ojs.t) ->
                       fun (x5983 : Ojs.t) ->
                         any_to_js
                           (x5981 ~this:(t_of_js x5982)
                              ~ev:(MessageEvent.t_0_of_js x5983)))) x5980)
    let (postMessage :
      'tags this -> message:any -> transfer:Transferable.t list -> unit) =
      fun (x5988 : 'tags this) ->
        fun ~message:(x5985 : any) ->
          fun ~transfer:(x5986 : Transferable.t list) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x5988) "postMessage"
                 [|(any_to_js x5985);(Ojs.list_to_js Transferable.t_to_js
                                        x5986)|])
    let (postMessage' :
      'tags this ->
        message:any -> ?options:StructuredSerializeOptions.t -> unit -> unit)
      =
      fun (x5994 : 'tags this) ->
        fun ~message:(x5990 : any) ->
          fun ?options:(x5991 : StructuredSerializeOptions.t option) ->
            fun () ->
              ignore
                (let x5996 = this_to_js Obj.magic x5994 in
                 Ojs.call (Ojs.get_prop_ascii x5996 "postMessage") "apply"
                   [|x5996;((let x5992 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5992 "push" [|(any_to_js x5990)|]);
                             (match x5991 with
                              | Some x5993 ->
                                  ignore
                                    (Ojs.call x5992 "push"
                                       [|(StructuredSerializeOptions.t_to_js
                                            x5993)|])
                              | None -> ());
                             x5992))|])
    let (terminate : 'tags this -> unit) =
      fun (x5997 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x5997) "terminate" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x6008 : 'tags this) ->
        fun ~type_:(x5999 : 'K) ->
          fun ~listener:(x6000 : this:t -> ev:any -> any) ->
            fun
              ?options:(x6001 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x6010 = this_to_js Obj.magic x6008 in
                   Ojs.call (Ojs.get_prop_ascii x6010 "addEventListener")
                     "apply"
                     [|x6010;((let x6002 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6002 "push" [|(Obj.magic x5999)|]);
                               ignore
                                 (Ojs.call x6002 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x6006 : Ojs.t) ->
                                            fun (x6007 : Ojs.t) ->
                                              any_to_js
                                                (x6000 ~this:(t_of_js x6006)
                                                   ~ev:(any_of_js x6007))))|]);
                               (match x6001 with
                                | Some x6003 ->
                                    ignore
                                      (Ojs.call x6002 "push"
                                         [|((match x6003 with
                                             | `U1 x6004 ->
                                                 Ojs.bool_to_js x6004
                                             | `U2 x6005 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x6005))|])
                                | None -> ());
                               x6002))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x6018 : 'tags this) ->
        fun ~type_:(x6011 : string) ->
          fun ~listener:(x6012 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x6013 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x6020 = this_to_js Obj.magic x6018 in
                   Ojs.call (Ojs.get_prop_ascii x6020 "addEventListener")
                     "apply"
                     [|x6020;((let x6014 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6014 "push"
                                    [|(Ojs.string_to_js x6011)|]);
                               ignore
                                 (Ojs.call x6014 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x6012)|]);
                               (match x6013 with
                                | Some x6015 ->
                                    ignore
                                      (Ojs.call x6014 "push"
                                         [|((match x6015 with
                                             | `U1 x6016 ->
                                                 Ojs.bool_to_js x6016
                                             | `U2 x6017 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x6017))|])
                                | None -> ());
                               x6014))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x6030 : 'tags this) ->
        fun ~type_:(x6021 : 'K) ->
          fun ~listener:(x6022 : this:t -> ev:any -> any) ->
            fun
              ?options:(x6023 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x6032 = this_to_js Obj.magic x6030 in
                   Ojs.call (Ojs.get_prop_ascii x6032 "removeEventListener")
                     "apply"
                     [|x6032;((let x6024 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6024 "push" [|(Obj.magic x6021)|]);
                               ignore
                                 (Ojs.call x6024 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x6028 : Ojs.t) ->
                                            fun (x6029 : Ojs.t) ->
                                              any_to_js
                                                (x6022 ~this:(t_of_js x6028)
                                                   ~ev:(any_of_js x6029))))|]);
                               (match x6023 with
                                | Some x6025 ->
                                    ignore
                                      (Ojs.call x6024 "push"
                                         [|((match x6025 with
                                             | `U1 x6026 ->
                                                 Ojs.bool_to_js x6026
                                             | `U2 x6027 ->
                                                 EventListenerOptions.t_to_js
                                                   x6027))|])
                                | None -> ());
                               x6024))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x6040 : 'tags this) ->
        fun ~type_:(x6033 : string) ->
          fun ~listener:(x6034 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x6035 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x6042 = this_to_js Obj.magic x6040 in
                   Ojs.call (Ojs.get_prop_ascii x6042 "removeEventListener")
                     "apply"
                     [|x6042;((let x6036 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6036 "push"
                                    [|(Ojs.string_to_js x6033)|]);
                               ignore
                                 (Ojs.call x6036 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x6034)|]);
                               (match x6035 with
                                | Some x6037 ->
                                    ignore
                                      (Ojs.call x6036 "push"
                                         [|((match x6037 with
                                             | `U1 x6038 ->
                                                 Ojs.bool_to_js x6038
                                             | `U2 x6039 ->
                                                 EventListenerOptions.t_to_js
                                                   x6039))|])
                                | None -> ());
                               x6036))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Worker")
             "prototype")
    let (create :
      scriptURL:[ `U1 of string  | `U2 of URL.t ] ->
        ?options:WorkerOptions.t -> unit -> t)
      =
      fun ~scriptURL:(x6043 : [ `U1 of string  | `U2 of URL.t ]) ->
        fun ?options:(x6044 : WorkerOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Worker")
                 (let x6045 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x6045 "push"
                       [|((match x6043 with
                           | `U1 x6047 -> Ojs.string_to_js x6047
                           | `U2 x6048 -> URL.t_to_js x6048))|]);
                  (match x6044 with
                   | Some x6046 ->
                       ignore
                         (Ojs.call x6045 "push"
                            [|(WorkerOptions.t_to_js x6046)|])
                   | None -> ());
                  x6045))
  end
module CloseEventInit =
  struct
    type t = [ `CloseEventInit  | `EventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6050 : Ojs.t) -> t_of_js x6050
    and t_0_to_js : t_0 -> Ojs.t = fun (x6049 : t) -> t_to_js x6049
    type tags = [ `CloseEventInit  | `EventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CloseEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6053 : Ojs.t) -> intf_of_js __tags_of_js x6053
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6051 : __tags intf) -> intf_to_js __tags_to_js x6051
    let (get_code : 'tags this -> float option) =
      fun (x6055 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6055) "code")
    let (set_code : 'tags this -> float -> unit) =
      fun (x6058 : 'tags this) ->
        fun (x6059 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6058) "code"
            (Ojs.float_to_js x6059)
    let (get_reason : 'tags this -> string option) =
      fun (x6061 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6061) "reason")
    let (set_reason : 'tags this -> string -> unit) =
      fun (x6064 : 'tags this) ->
        fun (x6065 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6064) "reason"
            (Ojs.string_to_js x6065)
    let (get_wasClean : 'tags this -> bool option) =
      fun (x6067 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6067) "wasClean")
    let (set_wasClean : 'tags this -> bool -> unit) =
      fun (x6070 : 'tags this) ->
        fun (x6071 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6070) "wasClean"
            (Ojs.bool_to_js x6071)
    let (create :
      ?code:float -> ?reason:string -> ?wasClean:bool -> unit -> t) =
      fun ?code:(x6073 : float option) ->
        fun ?reason:(x6074 : string option) ->
          fun ?wasClean:(x6075 : bool option) ->
            fun () ->
              let x6076 = Ojs.empty_obj () in
              (match x6073 with
               | Some x6079 ->
                   Ojs.set_prop_ascii x6076 "code" (Ojs.float_to_js x6079)
               | None -> ());
              (match x6074 with
               | Some x6078 ->
                   Ojs.set_prop_ascii x6076 "reason" (Ojs.string_to_js x6078)
               | None -> ());
              (match x6075 with
               | Some x6077 ->
                   Ojs.set_prop_ascii x6076 "wasClean" (Ojs.bool_to_js x6077)
               | None -> ());
              t_of_js x6076
    let cast_from = Obj.magic
  end
module CloseEvent =
  struct
    type t = [ `CloseEvent  | `Event ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6081 : Ojs.t) -> t_of_js x6081
    and t_0_to_js : t_0 -> Ojs.t = fun (x6080 : t) -> t_to_js x6080
    type tags = [ `CloseEvent  | `Event ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CloseEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6084 : Ojs.t) -> intf_of_js __tags_of_js x6084
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6082 : __tags intf) -> intf_to_js __tags_to_js x6082
    let (get_code : 'tags this -> float) =
      fun (x6086 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6086) "code")
    let (get_reason : 'tags this -> string) =
      fun (x6088 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6088) "reason")
    let (get_wasClean : 'tags this -> bool) =
      fun (x6090 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6090) "wasClean")
    let (create : code:float -> reason:string -> wasClean:bool -> unit -> t)
      =
      fun ~code:(x6092 : float) ->
        fun ~reason:(x6093 : string) ->
          fun ~wasClean:(x6094 : bool) ->
            fun () ->
              let x6095 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x6095 "code" (Ojs.float_to_js x6092);
              Ojs.set_prop_ascii x6095 "reason" (Ojs.string_to_js x6093);
              Ojs.set_prop_ascii x6095 "wasClean" (Ojs.bool_to_js x6094);
              t_of_js x6095
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CloseEvent")
             "prototype")
    let (create' :
      type_:string -> ?eventInitDict:CloseEventInit.t -> unit -> t) =
      fun ~type_:(x6096 : string) ->
        fun ?eventInitDict:(x6097 : CloseEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "CloseEvent")
                 (let x6098 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x6098 "push" [|(Ojs.string_to_js x6096)|]);
                  (match x6097 with
                   | Some x6099 ->
                       ignore
                         (Ojs.call x6098 "push"
                            [|(CloseEventInit.t_to_js x6099)|])
                   | None -> ());
                  x6098))
  end
module WebSocketEventMap =
  struct
    type t = [ `WebSocketEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6101 : Ojs.t) -> t_of_js x6101
    and t_0_to_js : t_0 -> Ojs.t = fun (x6100 : t) -> t_to_js x6100
    type tags = [ `WebSocketEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebSocketEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6104 : Ojs.t) -> intf_of_js __tags_of_js x6104
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6102 : __tags intf) -> intf_to_js __tags_to_js x6102
    let (get_close : 'tags this -> CloseEvent.t) =
      fun (x6106 : 'tags this) ->
        CloseEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6106) "close")
    let (set_close : 'tags this -> CloseEvent.t -> unit) =
      fun (x6108 : 'tags this) ->
        fun (x6109 : CloseEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6108) "close"
            (CloseEvent.t_to_js x6109)
    let (get_error : 'tags this -> Event.t) =
      fun (x6111 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6111) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x6113 : 'tags this) ->
        fun (x6114 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6113) "error"
            (Event.t_to_js x6114)
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x6116 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6116) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x6118 : 'tags this) ->
        fun (x6119 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6118) "message"
            (MessageEvent.t_0_to_js x6119)
    let (get_open : 'tags this -> Event.t) =
      fun (x6121 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6121) "open")
    let (set_open : 'tags this -> Event.t -> unit) =
      fun (x6123 : 'tags this) ->
        fun (x6124 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6123) "open"
            (Event.t_to_js x6124)
    let (create :
      close:CloseEvent.t ->
        error:Event.t ->
          message:MessageEvent.t_0 -> open_:Event.t -> unit -> t)
      =
      fun ~close:(x6126 : CloseEvent.t) ->
        fun ~error:(x6127 : Event.t) ->
          fun ~message:(x6128 : MessageEvent.t_0) ->
            fun ~open_:(x6129 : Event.t) ->
              fun () ->
                let x6130 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x6130 "close" (CloseEvent.t_to_js x6126);
                Ojs.set_prop_ascii x6130 "error" (Event.t_to_js x6127);
                Ojs.set_prop_ascii x6130 "message"
                  (MessageEvent.t_0_to_js x6128);
                Ojs.set_prop_ascii x6130 "open" (Event.t_to_js x6129);
                t_of_js x6130
    let cast_from = Obj.magic
  end
module BinaryType =
  struct
    type t = [ `L_s37_arraybuffer  | `L_s44_blob ]
    let rec t_of_js : Ojs.t -> t =
      fun (x6132 : Ojs.t) ->
        let x6133 = x6132 in
        match Ojs.string_of_js x6133 with
        | "arraybuffer" -> `L_s37_arraybuffer
        | "blob" -> `L_s44_blob
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x6131 : [ `L_s37_arraybuffer  | `L_s44_blob ]) ->
        match x6131 with
        | `L_s37_arraybuffer -> Ojs.string_to_js "arraybuffer"
        | `L_s44_blob -> Ojs.string_to_js "blob"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6135 : Ojs.t) -> t_of_js x6135
    and t_0_to_js : t_0 -> Ojs.t = fun (x6134 : t) -> t_to_js x6134
  end
module WebSocket =
  struct
    type t = [ `EventTarget  | `WebSocket ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6137 : Ojs.t) -> t_of_js x6137
    and t_0_to_js : t_0 -> Ojs.t = fun (x6136 : t) -> t_to_js x6136
    type tags = [ `EventTarget  | `WebSocket ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebSocket ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6140 : Ojs.t) -> intf_of_js __tags_of_js x6140
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6138 : __tags intf) -> intf_to_js __tags_to_js x6138
    let (get_binaryType : 'tags this -> BinaryType.t) =
      fun (x6142 : 'tags this) ->
        BinaryType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6142) "binaryType")
    let (set_binaryType : 'tags this -> BinaryType.t -> unit) =
      fun (x6144 : 'tags this) ->
        fun (x6145 : BinaryType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6144) "binaryType"
            (BinaryType.t_to_js x6145)
    let (get_bufferedAmount : 'tags this -> float) =
      fun (x6147 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6147) "bufferedAmount")
    let (get_extensions : 'tags this -> string) =
      fun (x6149 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6149) "extensions")
    let (get_onclose :
      'tags this -> (this:t -> ev:CloseEvent.t -> any) option) =
      fun (x6151 : 'tags this) ->
        Ojs.option_of_js
          (fun (x6153 : Ojs.t) ->
             fun ~this:(x6154 : t) ->
               fun ~ev:(x6155 : CloseEvent.t) ->
                 any_of_js
                   (Ojs.apply x6153
                      [|(t_to_js x6154);(CloseEvent.t_to_js x6155)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6151) "onclose")
    let (set_onclose :
      'tags this -> (this:t -> ev:CloseEvent.t -> any) option -> unit) =
      fun (x6156 : 'tags this) ->
        fun (x6157 : (this:t -> ev:CloseEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6156) "onclose"
            (Ojs.option_to_js
               (fun (x6158 : this:t -> ev:CloseEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x6159 : Ojs.t) ->
                       fun (x6160 : Ojs.t) ->
                         any_to_js
                           (x6158 ~this:(t_of_js x6159)
                              ~ev:(CloseEvent.t_of_js x6160)))) x6157)
    let (get_onerror : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x6162 : 'tags this) ->
        Ojs.option_of_js
          (fun (x6164 : Ojs.t) ->
             fun ~this:(x6165 : t) ->
               fun ~ev:(x6166 : Event.t) ->
                 any_of_js
                   (Ojs.apply x6164 [|(t_to_js x6165);(Event.t_to_js x6166)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6162) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x6167 : 'tags this) ->
        fun (x6168 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6167) "onerror"
            (Ojs.option_to_js
               (fun (x6169 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x6170 : Ojs.t) ->
                       fun (x6171 : Ojs.t) ->
                         any_to_js
                           (x6169 ~this:(t_of_js x6170)
                              ~ev:(Event.t_of_js x6171)))) x6168)
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x6173 : 'tags this) ->
        Ojs.option_of_js
          (fun (x6175 : Ojs.t) ->
             fun ~this:(x6176 : t) ->
               fun ~ev:(x6177 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x6175
                      [|(t_to_js x6176);(MessageEvent.t_0_to_js x6177)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6173) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x6178 : 'tags this) ->
        fun (x6179 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6178) "onmessage"
            (Ojs.option_to_js
               (fun (x6180 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x6181 : Ojs.t) ->
                       fun (x6182 : Ojs.t) ->
                         any_to_js
                           (x6180 ~this:(t_of_js x6181)
                              ~ev:(MessageEvent.t_0_of_js x6182)))) x6179)
    let (get_onopen : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x6184 : 'tags this) ->
        Ojs.option_of_js
          (fun (x6186 : Ojs.t) ->
             fun ~this:(x6187 : t) ->
               fun ~ev:(x6188 : Event.t) ->
                 any_of_js
                   (Ojs.apply x6186 [|(t_to_js x6187);(Event.t_to_js x6188)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6184) "onopen")
    let (set_onopen :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x6189 : 'tags this) ->
        fun (x6190 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6189) "onopen"
            (Ojs.option_to_js
               (fun (x6191 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x6192 : Ojs.t) ->
                       fun (x6193 : Ojs.t) ->
                         any_to_js
                           (x6191 ~this:(t_of_js x6192)
                              ~ev:(Event.t_of_js x6193)))) x6190)
    let (get_protocol : 'tags this -> string) =
      fun (x6195 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6195) "protocol")
    let (get_readyState : 'tags this -> float) =
      fun (x6197 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6197) "readyState")
    let (get_url : 'tags this -> string) =
      fun (x6199 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6199) "url")
    let (close : 'tags this -> ?code:float -> ?reason:string -> unit -> unit)
      =
      fun (x6206 : 'tags this) ->
        fun ?code:(x6201 : float option) ->
          fun ?reason:(x6202 : string option) ->
            fun () ->
              ignore
                (let x6208 = this_to_js Obj.magic x6206 in
                 Ojs.call (Ojs.get_prop_ascii x6208 "close") "apply"
                   [|x6208;((let x6203 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x6201 with
                              | Some x6205 ->
                                  ignore
                                    (Ojs.call x6203 "push"
                                       [|(Ojs.float_to_js x6205)|])
                              | None -> ());
                             (match x6202 with
                              | Some x6204 ->
                                  ignore
                                    (Ojs.call x6203 "push"
                                       [|(Ojs.string_to_js x6204)|])
                              | None -> ());
                             x6203))|])
    let (send :
      'tags this ->
        data:[ `U1 of string  | `U2 of ArrayBufferLike.t_0  | `U3 of Blob.t 
             | `U4 of ArrayBufferView.t_0 ]
          -> unit)
      =
      fun (x6214 : 'tags this) ->
        fun
          ~data:(x6209 :
                  [ `U1 of string  | `U2 of ArrayBufferLike.t_0 
                  | `U3 of Blob.t  | `U4 of ArrayBufferView.t_0 ])
          ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6214) "send"
               [|((match x6209 with
                   | `U1 x6210 -> Ojs.string_to_js x6210
                   | `U2 x6211 -> ArrayBufferLike.t_0_to_js x6211
                   | `U3 x6212 -> Blob.t_to_js x6212
                   | `U4 x6213 -> ArrayBufferView.t_0_to_js x6213))|])
    let (get_CLOSED : 'tags this -> float) =
      fun (x6216 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6216) "CLOSED")
    let (get_CLOSING : 'tags this -> float) =
      fun (x6218 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6218) "CLOSING")
    let (get_CONNECTING : 'tags this -> float) =
      fun (x6220 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6220) "CONNECTING")
    let (get_OPEN : 'tags this -> float) =
      fun (x6222 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6222) "OPEN")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x6233 : 'tags this) ->
        fun ~type_:(x6224 : 'K) ->
          fun ~listener:(x6225 : this:t -> ev:any -> any) ->
            fun
              ?options:(x6226 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x6235 = this_to_js Obj.magic x6233 in
                   Ojs.call (Ojs.get_prop_ascii x6235 "addEventListener")
                     "apply"
                     [|x6235;((let x6227 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6227 "push" [|(Obj.magic x6224)|]);
                               ignore
                                 (Ojs.call x6227 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x6231 : Ojs.t) ->
                                            fun (x6232 : Ojs.t) ->
                                              any_to_js
                                                (x6225 ~this:(t_of_js x6231)
                                                   ~ev:(any_of_js x6232))))|]);
                               (match x6226 with
                                | Some x6228 ->
                                    ignore
                                      (Ojs.call x6227 "push"
                                         [|((match x6228 with
                                             | `U1 x6229 ->
                                                 Ojs.bool_to_js x6229
                                             | `U2 x6230 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x6230))|])
                                | None -> ());
                               x6227))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x6243 : 'tags this) ->
        fun ~type_:(x6236 : string) ->
          fun ~listener:(x6237 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x6238 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x6245 = this_to_js Obj.magic x6243 in
                   Ojs.call (Ojs.get_prop_ascii x6245 "addEventListener")
                     "apply"
                     [|x6245;((let x6239 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6239 "push"
                                    [|(Ojs.string_to_js x6236)|]);
                               ignore
                                 (Ojs.call x6239 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x6237)|]);
                               (match x6238 with
                                | Some x6240 ->
                                    ignore
                                      (Ojs.call x6239 "push"
                                         [|((match x6240 with
                                             | `U1 x6241 ->
                                                 Ojs.bool_to_js x6241
                                             | `U2 x6242 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x6242))|])
                                | None -> ());
                               x6239))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x6255 : 'tags this) ->
        fun ~type_:(x6246 : 'K) ->
          fun ~listener:(x6247 : this:t -> ev:any -> any) ->
            fun
              ?options:(x6248 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x6257 = this_to_js Obj.magic x6255 in
                   Ojs.call (Ojs.get_prop_ascii x6257 "removeEventListener")
                     "apply"
                     [|x6257;((let x6249 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6249 "push" [|(Obj.magic x6246)|]);
                               ignore
                                 (Ojs.call x6249 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x6253 : Ojs.t) ->
                                            fun (x6254 : Ojs.t) ->
                                              any_to_js
                                                (x6247 ~this:(t_of_js x6253)
                                                   ~ev:(any_of_js x6254))))|]);
                               (match x6248 with
                                | Some x6250 ->
                                    ignore
                                      (Ojs.call x6249 "push"
                                         [|((match x6250 with
                                             | `U1 x6251 ->
                                                 Ojs.bool_to_js x6251
                                             | `U2 x6252 ->
                                                 EventListenerOptions.t_to_js
                                                   x6252))|])
                                | None -> ());
                               x6249))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x6265 : 'tags this) ->
        fun ~type_:(x6258 : string) ->
          fun ~listener:(x6259 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x6260 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x6267 = this_to_js Obj.magic x6265 in
                   Ojs.call (Ojs.get_prop_ascii x6267 "removeEventListener")
                     "apply"
                     [|x6267;((let x6261 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6261 "push"
                                    [|(Ojs.string_to_js x6258)|]);
                               ignore
                                 (Ojs.call x6261 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x6259)|]);
                               (match x6260 with
                                | Some x6262 ->
                                    ignore
                                      (Ojs.call x6261 "push"
                                         [|((match x6262 with
                                             | `U1 x6263 ->
                                                 Ojs.bool_to_js x6263
                                             | `U2 x6264 ->
                                                 EventListenerOptions.t_to_js
                                                   x6264))|])
                                | None -> ());
                               x6261))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "prototype")
    let (create :
      url:[ `U1 of string  | `U2 of URL.t ] ->
        ?protocols:[ `U1 of string  | `U2 of string list ] -> unit -> t)
      =
      fun ~url:(x6268 : [ `U1 of string  | `U2 of URL.t ]) ->
        fun
          ?protocols:(x6269 : [ `U1 of string  | `U2 of string list ] option)
          ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "WebSocket")
                 (let x6270 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x6270 "push"
                       [|((match x6268 with
                           | `U1 x6275 -> Ojs.string_to_js x6275
                           | `U2 x6276 -> URL.t_to_js x6276))|]);
                  (match x6269 with
                   | Some x6271 ->
                       ignore
                         (Ojs.call x6270 "push"
                            [|((match x6271 with
                                | `U1 x6272 -> Ojs.string_to_js x6272
                                | `U2 x6273 ->
                                    Ojs.list_to_js Ojs.string_to_js x6273))|])
                   | None -> ());
                  x6270))
    let (closed : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "CLOSED")
    let (closing : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "CLOSING")
    let (connecting : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "CONNECTING")
    let (open_ : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "OPEN")
  end
module WebGLUniformLocation =
  struct
    type t = [ `WebGLUniformLocation ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6278 : Ojs.t) -> t_of_js x6278
    and t_0_to_js : t_0 -> Ojs.t = fun (x6277 : t) -> t_to_js x6277
    type tags = [ `WebGLUniformLocation ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLUniformLocation ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6281 : Ojs.t) -> intf_of_js __tags_of_js x6281
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6279 : __tags intf) -> intf_to_js __tags_to_js x6279
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLUniformLocation")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLUniformLocation")
             [||])
  end
module PredefinedColorSpace =
  struct
    type t = [ `L_s187_srgb  | `L_s62_display_p3 ]
    let rec t_of_js : Ojs.t -> t =
      fun (x6284 : Ojs.t) ->
        let x6285 = x6284 in
        match Ojs.string_of_js x6285 with
        | "srgb" -> `L_s187_srgb
        | "display-p3" -> `L_s62_display_p3
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x6283 : [ `L_s187_srgb  | `L_s62_display_p3 ]) ->
        match x6283 with
        | `L_s187_srgb -> Ojs.string_to_js "srgb"
        | `L_s62_display_p3 -> Ojs.string_to_js "display-p3"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6287 : Ojs.t) -> t_of_js x6287
    and t_0_to_js : t_0 -> Ojs.t = fun (x6286 : t) -> t_to_js x6286
  end
module ImageDataSettings =
  struct
    type t = [ `ImageDataSettings ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6289 : Ojs.t) -> t_of_js x6289
    and t_0_to_js : t_0 -> Ojs.t = fun (x6288 : t) -> t_to_js x6288
    type tags = [ `ImageDataSettings ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImageDataSettings ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6292 : Ojs.t) -> intf_of_js __tags_of_js x6292
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6290 : __tags intf) -> intf_to_js __tags_to_js x6290
    let (get_colorSpace : 'tags this -> PredefinedColorSpace.t option) =
      fun (x6294 : 'tags this) ->
        Ojs.option_of_js PredefinedColorSpace.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6294) "colorSpace")
    let (set_colorSpace : 'tags this -> PredefinedColorSpace.t -> unit) =
      fun (x6297 : 'tags this) ->
        fun (x6298 : PredefinedColorSpace.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6297) "colorSpace"
            (PredefinedColorSpace.t_to_js x6298)
    let (create : ?colorSpace:PredefinedColorSpace.t -> unit -> t) =
      fun ?colorSpace:(x6300 : PredefinedColorSpace.t option) ->
        fun () ->
          let x6301 = Ojs.empty_obj () in
          (match x6300 with
           | Some x6302 ->
               Ojs.set_prop_ascii x6301 "colorSpace"
                 (PredefinedColorSpace.t_to_js x6302)
           | None -> ());
          t_of_js x6301
    let cast_from = Obj.magic
  end
module ImageData =
  struct
    type t = [ `ImageData ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6304 : Ojs.t) -> t_of_js x6304
    and t_0_to_js : t_0 -> Ojs.t = fun (x6303 : t) -> t_to_js x6303
    type tags = [ `ImageData ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImageData ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6307 : Ojs.t) -> intf_of_js __tags_of_js x6307
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6305 : __tags intf) -> intf_to_js __tags_to_js x6305
    let (get_data : 'tags this -> Uint8ClampedArray.t_0) =
      fun (x6309 : 'tags this) ->
        Uint8ClampedArray.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6309) "data")
    let (get_height : 'tags this -> float) =
      fun (x6311 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6311) "height")
    let (get_width : 'tags this -> float) =
      fun (x6313 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6313) "width")
    let (create :
      data:Uint8ClampedArray.t_0 -> height:float -> width:float -> unit -> t)
      =
      fun ~data:(x6315 : Uint8ClampedArray.t_0) ->
        fun ~height:(x6316 : float) ->
          fun ~width:(x6317 : float) ->
            fun () ->
              let x6318 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x6318 "data"
                (Uint8ClampedArray.t_0_to_js x6315);
              Ojs.set_prop_ascii x6318 "height" (Ojs.float_to_js x6316);
              Ojs.set_prop_ascii x6318 "width" (Ojs.float_to_js x6317);
              t_of_js x6318
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ImageData")
             "prototype")
    let (create' :
      sw:float -> sh:float -> ?settings:ImageDataSettings.t -> unit -> t) =
      fun ~sw:(x6319 : float) ->
        fun ~sh:(x6320 : float) ->
          fun ?settings:(x6321 : ImageDataSettings.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "ImageData")
                   (let x6322 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x6322 "push" [|(Ojs.float_to_js x6319)|]);
                    ignore
                      (Ojs.call x6322 "push" [|(Ojs.float_to_js x6320)|]);
                    (match x6321 with
                     | Some x6323 ->
                         ignore
                           (Ojs.call x6322 "push"
                              [|(ImageDataSettings.t_to_js x6323)|])
                     | None -> ());
                    x6322))
    let (create'' :
      data:Uint8ClampedArray.t_0 ->
        sw:float -> ?sh:float -> ?settings:ImageDataSettings.t -> unit -> t)
      =
      fun ~data:(x6324 : Uint8ClampedArray.t_0) ->
        fun ~sw:(x6325 : float) ->
          fun ?sh:(x6326 : float option) ->
            fun ?settings:(x6327 : ImageDataSettings.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Ojs.global "ImageData")
                     (let x6328 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x6328 "push"
                           [|(Uint8ClampedArray.t_0_to_js x6324)|]);
                      ignore
                        (Ojs.call x6328 "push" [|(Ojs.float_to_js x6325)|]);
                      (match x6326 with
                       | Some x6330 ->
                           ignore
                             (Ojs.call x6328 "push"
                                [|(Ojs.float_to_js x6330)|])
                       | None -> ());
                      (match x6327 with
                       | Some x6329 ->
                           ignore
                             (Ojs.call x6328 "push"
                                [|(ImageDataSettings.t_to_js x6329)|])
                       | None -> ());
                      x6328))
  end
module OffscreenCanvas =
  struct
    type t = [ `EventTarget  | `OffscreenCanvas ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6332 : Ojs.t) -> t_of_js x6332
    and t_0_to_js : t_0 -> Ojs.t = fun (x6331 : t) -> t_to_js x6331
    type tags = [ `EventTarget  | `OffscreenCanvas ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `OffscreenCanvas ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6335 : Ojs.t) -> intf_of_js __tags_of_js x6335
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6333 : __tags intf) -> intf_to_js __tags_to_js x6333
    let cast_from = Obj.magic
  end
module TexImageSource =
  struct
    type t = (ImageBitmap.t, ImageData.t, OffscreenCanvas.t) union3
    let rec t_of_js : Ojs.t -> t =
      fun (x6341 : Ojs.t) ->
        union3_of_js ImageBitmap.t_of_js ImageData.t_of_js
          OffscreenCanvas.t_of_js x6341
    and t_to_js : t -> Ojs.t =
      fun (x6337 : (ImageBitmap.t, ImageData.t, OffscreenCanvas.t) union3) ->
        union3_to_js ImageBitmap.t_to_js ImageData.t_to_js
          OffscreenCanvas.t_to_js x6337
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6346 : Ojs.t) -> t_of_js x6346
    and t_0_to_js : t_0 -> Ojs.t = fun (x6345 : t) -> t_to_js x6345
  end
module GLint =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x6348 : Ojs.t) -> Ojs.float_of_js x6348
    and t_to_js : t -> Ojs.t = fun (x6347 : float) -> Ojs.float_to_js x6347
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6350 : Ojs.t) -> t_of_js x6350
    and t_0_to_js : t_0 -> Ojs.t = fun (x6349 : t) -> t_to_js x6349
  end
module Int32List =
  struct
    type t = (GLint.t list, Int32Array.t_0) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x6355 : Ojs.t) ->
        union2_of_js
          (fun (x6356 : Ojs.t) -> Ojs.list_of_js GLint.t_of_js x6356)
          Int32Array.t_0_of_js x6355
    and t_to_js : t -> Ojs.t =
      fun (x6351 : (GLint.t list, Int32Array.t_0) union2) ->
        union2_to_js
          (fun (x6352 : GLint.t list) -> Ojs.list_to_js GLint.t_to_js x6352)
          Int32Array.t_0_to_js x6351
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6360 : Ojs.t) -> t_of_js x6360
    and t_0_to_js : t_0 -> Ojs.t = fun (x6359 : t) -> t_to_js x6359
  end
module GLsizeiptr =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x6362 : Ojs.t) -> Ojs.float_of_js x6362
    and t_to_js : t -> Ojs.t = fun (x6361 : float) -> Ojs.float_to_js x6361
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6364 : Ojs.t) -> t_of_js x6364
    and t_0_to_js : t_0 -> Ojs.t = fun (x6363 : t) -> t_to_js x6363
  end
module GLboolean =
  struct
    type t = bool
    let rec t_of_js : Ojs.t -> t =
      fun (x6366 : Ojs.t) -> Ojs.bool_of_js x6366
    and t_to_js : t -> Ojs.t = fun (x6365 : bool) -> Ojs.bool_to_js x6365
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6368 : Ojs.t) -> t_of_js x6368
    and t_0_to_js : t_0 -> Ojs.t = fun (x6367 : t) -> t_to_js x6367
  end
module GLfloat =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x6370 : Ojs.t) -> Ojs.float_of_js x6370
    and t_to_js : t -> Ojs.t = fun (x6369 : float) -> Ojs.float_to_js x6369
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6372 : Ojs.t) -> t_of_js x6372
    and t_0_to_js : t_0 -> Ojs.t = fun (x6371 : t) -> t_to_js x6371
  end
module Float32List =
  struct
    type t = (GLfloat.t list, Float32Array.t_0) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x6377 : Ojs.t) ->
        union2_of_js
          (fun (x6378 : Ojs.t) -> Ojs.list_of_js GLfloat.t_of_js x6378)
          Float32Array.t_0_of_js x6377
    and t_to_js : t -> Ojs.t =
      fun (x6373 : (GLfloat.t list, Float32Array.t_0) union2) ->
        union2_to_js
          (fun (x6374 : GLfloat.t list) ->
             Ojs.list_to_js GLfloat.t_to_js x6374) Float32Array.t_0_to_js
          x6373
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6382 : Ojs.t) -> t_of_js x6382
    and t_0_to_js : t_0 -> Ojs.t = fun (x6381 : t) -> t_to_js x6381
  end
module GLsizei =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x6384 : Ojs.t) -> Ojs.float_of_js x6384
    and t_to_js : t -> Ojs.t = fun (x6383 : float) -> Ojs.float_to_js x6383
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6386 : Ojs.t) -> t_of_js x6386
    and t_0_to_js : t_0 -> Ojs.t = fun (x6385 : t) -> t_to_js x6385
  end
module GLintptr =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x6388 : Ojs.t) -> Ojs.float_of_js x6388
    and t_to_js : t -> Ojs.t = fun (x6387 : float) -> Ojs.float_to_js x6387
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6390 : Ojs.t) -> t_of_js x6390
    and t_0_to_js : t_0 -> Ojs.t = fun (x6389 : t) -> t_to_js x6389
  end
module GLenum =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x6392 : Ojs.t) -> Ojs.float_of_js x6392
    and t_to_js : t -> Ojs.t = fun (x6391 : float) -> Ojs.float_to_js x6391
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6394 : Ojs.t) -> t_of_js x6394
    and t_0_to_js : t_0 -> Ojs.t = fun (x6393 : t) -> t_to_js x6393
  end
module WebGLRenderingContextOverloads =
  struct
    type t = [ `WebGLRenderingContextOverloads ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6396 : Ojs.t) -> t_of_js x6396
    and t_0_to_js : t_0 -> Ojs.t = fun (x6395 : t) -> t_to_js x6395
    type tags = [ `WebGLRenderingContextOverloads ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLRenderingContextOverloads ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6399 : Ojs.t) -> intf_of_js __tags_of_js x6399
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6397 : __tags intf) -> intf_to_js __tags_to_js x6397
    let (bufferData :
      'tags this ->
        target:GLenum.t -> size:GLsizeiptr.t -> usage:GLenum.t -> unit)
      =
      fun (x6404 : 'tags this) ->
        fun ~target:(x6401 : GLenum.t) ->
          fun ~size:(x6402 : GLsizeiptr.t) ->
            fun ~usage:(x6403 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6404) "bufferData"
                   [|(GLenum.t_to_js x6401);(GLsizeiptr.t_to_js x6402);(
                     GLenum.t_to_js x6403)|])
    let (bufferData' :
      'tags this ->
        target:GLenum.t ->
          data:BufferSource.t option -> usage:GLenum.t -> unit)
      =
      fun (x6410 : 'tags this) ->
        fun ~target:(x6406 : GLenum.t) ->
          fun ~data:(x6407 : BufferSource.t option) ->
            fun ~usage:(x6409 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6410) "bufferData"
                   [|(GLenum.t_to_js x6406);(Ojs.option_to_js
                                               BufferSource.t_to_js x6407);(
                     GLenum.t_to_js x6409)|])
    let (bufferSubData :
      'tags this ->
        target:GLenum.t -> offset:GLintptr.t -> data:BufferSource.t -> unit)
      =
      fun (x6415 : 'tags this) ->
        fun ~target:(x6412 : GLenum.t) ->
          fun ~offset:(x6413 : GLintptr.t) ->
            fun ~data:(x6414 : BufferSource.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6415) "bufferSubData"
                   [|(GLenum.t_to_js x6412);(GLintptr.t_to_js x6413);(
                     BufferSource.t_to_js x6414)|])
    let (compressedTexImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t -> data:ArrayBufferView.t_0 -> unit)
      =
      fun (x6424 : 'tags this) ->
        fun ~target:(x6417 : GLenum.t) ->
          fun ~level:(x6418 : GLint.t) ->
            fun ~internalformat:(x6419 : GLenum.t) ->
              fun ~width:(x6420 : GLsizei.t) ->
                fun ~height:(x6421 : GLsizei.t) ->
                  fun ~border:(x6422 : GLint.t) ->
                    fun ~data:(x6423 : ArrayBufferView.t_0) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x6424)
                           "compressedTexImage2D"
                           [|(GLenum.t_to_js x6417);(GLint.t_to_js x6418);(
                             GLenum.t_to_js x6419);(GLsizei.t_to_js x6420);(
                             GLsizei.t_to_js x6421);(GLint.t_to_js x6422);(
                             ArrayBufferView.t_0_to_js x6423)|])
    let (compressedTexSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t -> data:ArrayBufferView.t_0 -> unit)
      =
      fun (x6434 : 'tags this) ->
        fun ~target:(x6426 : GLenum.t) ->
          fun ~level:(x6427 : GLint.t) ->
            fun ~xoffset:(x6428 : GLint.t) ->
              fun ~yoffset:(x6429 : GLint.t) ->
                fun ~width:(x6430 : GLsizei.t) ->
                  fun ~height:(x6431 : GLsizei.t) ->
                    fun ~format:(x6432 : GLenum.t) ->
                      fun ~data:(x6433 : ArrayBufferView.t_0) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x6434)
                             "compressedTexSubImage2D"
                             [|(GLenum.t_to_js x6426);(GLint.t_to_js x6427);(
                               GLint.t_to_js x6428);(GLint.t_to_js x6429);(
                               GLsizei.t_to_js x6430);(GLsizei.t_to_js x6431);(
                               GLenum.t_to_js x6432);(ArrayBufferView.t_0_to_js
                                                        x6433)|])
    let (readPixels :
      'tags this ->
        x:GLint.t ->
          y:GLint.t ->
            width:GLsizei.t ->
              height:GLsizei.t ->
                format:GLenum.t ->
                  type_:GLenum.t -> pixels:ArrayBufferView.t_0 option -> unit)
      =
      fun (x6444 : 'tags this) ->
        fun ~x:(x6436 : GLint.t) ->
          fun ~y:(x6437 : GLint.t) ->
            fun ~width:(x6438 : GLsizei.t) ->
              fun ~height:(x6439 : GLsizei.t) ->
                fun ~format:(x6440 : GLenum.t) ->
                  fun ~type_:(x6441 : GLenum.t) ->
                    fun ~pixels:(x6442 : ArrayBufferView.t_0 option) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x6444) "readPixels"
                           [|(GLint.t_to_js x6436);(GLint.t_to_js x6437);(
                             GLsizei.t_to_js x6438);(GLsizei.t_to_js x6439);(
                             GLenum.t_to_js x6440);(GLenum.t_to_js x6441);(
                             Ojs.option_to_js ArrayBufferView.t_0_to_js x6442)|])
    let (texImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        pixels:ArrayBufferView.t_0 option -> unit)
      =
      fun (x6456 : 'tags this) ->
        fun ~target:(x6446 : GLenum.t) ->
          fun ~level:(x6447 : GLint.t) ->
            fun ~internalformat:(x6448 : GLint.t) ->
              fun ~width:(x6449 : GLsizei.t) ->
                fun ~height:(x6450 : GLsizei.t) ->
                  fun ~border:(x6451 : GLint.t) ->
                    fun ~format:(x6452 : GLenum.t) ->
                      fun ~type_:(x6453 : GLenum.t) ->
                        fun ~pixels:(x6454 : ArrayBufferView.t_0 option) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x6456)
                               "texImage2D"
                               [|(GLenum.t_to_js x6446);(GLint.t_to_js x6447);(
                                 GLint.t_to_js x6448);(GLsizei.t_to_js x6449);(
                                 GLsizei.t_to_js x6450);(GLint.t_to_js x6451);(
                                 GLenum.t_to_js x6452);(GLenum.t_to_js x6453);(
                                 Ojs.option_to_js ArrayBufferView.t_0_to_js
                                   x6454)|])
    let (texImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              format:GLenum.t ->
                type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x6464 : 'tags this) ->
        fun ~target:(x6458 : GLenum.t) ->
          fun ~level:(x6459 : GLint.t) ->
            fun ~internalformat:(x6460 : GLint.t) ->
              fun ~format:(x6461 : GLenum.t) ->
                fun ~type_:(x6462 : GLenum.t) ->
                  fun ~source:(x6463 : TexImageSource.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x6464) "texImage2D"
                         [|(GLenum.t_to_js x6458);(GLint.t_to_js x6459);(
                           GLint.t_to_js x6460);(GLenum.t_to_js x6461);(
                           GLenum.t_to_js x6462);(TexImageSource.t_to_js
                                                    x6463)|])
    let (texSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        pixels:ArrayBufferView.t_0 option -> unit)
      =
      fun (x6476 : 'tags this) ->
        fun ~target:(x6466 : GLenum.t) ->
          fun ~level:(x6467 : GLint.t) ->
            fun ~xoffset:(x6468 : GLint.t) ->
              fun ~yoffset:(x6469 : GLint.t) ->
                fun ~width:(x6470 : GLsizei.t) ->
                  fun ~height:(x6471 : GLsizei.t) ->
                    fun ~format:(x6472 : GLenum.t) ->
                      fun ~type_:(x6473 : GLenum.t) ->
                        fun ~pixels:(x6474 : ArrayBufferView.t_0 option) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x6476)
                               "texSubImage2D"
                               [|(GLenum.t_to_js x6466);(GLint.t_to_js x6467);(
                                 GLint.t_to_js x6468);(GLint.t_to_js x6469);(
                                 GLsizei.t_to_js x6470);(GLsizei.t_to_js
                                                           x6471);(GLenum.t_to_js
                                                                    x6472);(
                                 GLenum.t_to_js x6473);(Ojs.option_to_js
                                                          ArrayBufferView.t_0_to_js
                                                          x6474)|])
    let (texSubImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                format:GLenum.t ->
                  type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x6485 : 'tags this) ->
        fun ~target:(x6478 : GLenum.t) ->
          fun ~level:(x6479 : GLint.t) ->
            fun ~xoffset:(x6480 : GLint.t) ->
              fun ~yoffset:(x6481 : GLint.t) ->
                fun ~format:(x6482 : GLenum.t) ->
                  fun ~type_:(x6483 : GLenum.t) ->
                    fun ~source:(x6484 : TexImageSource.t) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x6485)
                           "texSubImage2D"
                           [|(GLenum.t_to_js x6478);(GLint.t_to_js x6479);(
                             GLint.t_to_js x6480);(GLint.t_to_js x6481);(
                             GLenum.t_to_js x6482);(GLenum.t_to_js x6483);(
                             TexImageSource.t_to_js x6484)|])
    let (uniform1fv :
      'tags this ->
        location:WebGLUniformLocation.t option -> v:Float32List.t -> unit)
      =
      fun (x6490 : 'tags this) ->
        fun ~location:(x6487 : WebGLUniformLocation.t option) ->
          fun ~v:(x6489 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6490) "uniform1fv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6487);(
                   Float32List.t_to_js x6489)|])
    let (uniform1iv :
      'tags this ->
        location:WebGLUniformLocation.t option -> v:Int32List.t -> unit)
      =
      fun (x6495 : 'tags this) ->
        fun ~location:(x6492 : WebGLUniformLocation.t option) ->
          fun ~v:(x6494 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6495) "uniform1iv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6492);(
                   Int32List.t_to_js x6494)|])
    let (uniform2fv :
      'tags this ->
        location:WebGLUniformLocation.t option -> v:Float32List.t -> unit)
      =
      fun (x6500 : 'tags this) ->
        fun ~location:(x6497 : WebGLUniformLocation.t option) ->
          fun ~v:(x6499 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6500) "uniform2fv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6497);(
                   Float32List.t_to_js x6499)|])
    let (uniform2iv :
      'tags this ->
        location:WebGLUniformLocation.t option -> v:Int32List.t -> unit)
      =
      fun (x6505 : 'tags this) ->
        fun ~location:(x6502 : WebGLUniformLocation.t option) ->
          fun ~v:(x6504 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6505) "uniform2iv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6502);(
                   Int32List.t_to_js x6504)|])
    let (uniform3fv :
      'tags this ->
        location:WebGLUniformLocation.t option -> v:Float32List.t -> unit)
      =
      fun (x6510 : 'tags this) ->
        fun ~location:(x6507 : WebGLUniformLocation.t option) ->
          fun ~v:(x6509 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6510) "uniform3fv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6507);(
                   Float32List.t_to_js x6509)|])
    let (uniform3iv :
      'tags this ->
        location:WebGLUniformLocation.t option -> v:Int32List.t -> unit)
      =
      fun (x6515 : 'tags this) ->
        fun ~location:(x6512 : WebGLUniformLocation.t option) ->
          fun ~v:(x6514 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6515) "uniform3iv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6512);(
                   Int32List.t_to_js x6514)|])
    let (uniform4fv :
      'tags this ->
        location:WebGLUniformLocation.t option -> v:Float32List.t -> unit)
      =
      fun (x6520 : 'tags this) ->
        fun ~location:(x6517 : WebGLUniformLocation.t option) ->
          fun ~v:(x6519 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6520) "uniform4fv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6517);(
                   Float32List.t_to_js x6519)|])
    let (uniform4iv :
      'tags this ->
        location:WebGLUniformLocation.t option -> v:Int32List.t -> unit)
      =
      fun (x6525 : 'tags this) ->
        fun ~location:(x6522 : WebGLUniformLocation.t option) ->
          fun ~v:(x6524 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6525) "uniform4iv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6522);(
                   Int32List.t_to_js x6524)|])
    let (uniformMatrix2fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t -> value:Float32List.t -> unit)
      =
      fun (x6531 : 'tags this) ->
        fun ~location:(x6527 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x6529 : GLboolean.t) ->
            fun ~value:(x6530 : Float32List.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6531) "uniformMatrix2fv"
                   [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6527);(
                     GLboolean.t_to_js x6529);(Float32List.t_to_js x6530)|])
    let (uniformMatrix3fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t -> value:Float32List.t -> unit)
      =
      fun (x6537 : 'tags this) ->
        fun ~location:(x6533 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x6535 : GLboolean.t) ->
            fun ~value:(x6536 : Float32List.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6537) "uniformMatrix3fv"
                   [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6533);(
                     GLboolean.t_to_js x6535);(Float32List.t_to_js x6536)|])
    let (uniformMatrix4fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t -> value:Float32List.t -> unit)
      =
      fun (x6543 : 'tags this) ->
        fun ~location:(x6539 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x6541 : GLboolean.t) ->
            fun ~value:(x6542 : Float32List.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6543) "uniformMatrix4fv"
                   [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6539);(
                     GLboolean.t_to_js x6541);(Float32List.t_to_js x6542)|])
    let (uniform1fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6549 : 'tags this) ->
        fun ~location:(x6545 : WebGLUniformLocation.t option) ->
          fun ~v:(x6547 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6549) "uniform1fv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6545);(
                   Iterable.t_1_to_js GLfloat.t_to_js x6547)|])
    let (uniform1iv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v:GLint.t Iterable.t_1 -> unit)
      =
      fun (x6555 : 'tags this) ->
        fun ~location:(x6551 : WebGLUniformLocation.t option) ->
          fun ~v:(x6553 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6555) "uniform1iv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6551);(
                   Iterable.t_1_to_js GLint.t_to_js x6553)|])
    let (uniform2fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6561 : 'tags this) ->
        fun ~location:(x6557 : WebGLUniformLocation.t option) ->
          fun ~v:(x6559 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6561) "uniform2fv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6557);(
                   Iterable.t_1_to_js GLfloat.t_to_js x6559)|])
    let (uniform2iv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v:GLint.t Iterable.t_1 -> unit)
      =
      fun (x6567 : 'tags this) ->
        fun ~location:(x6563 : WebGLUniformLocation.t option) ->
          fun ~v:(x6565 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6567) "uniform2iv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6563);(
                   Iterable.t_1_to_js GLint.t_to_js x6565)|])
    let (uniform3fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6573 : 'tags this) ->
        fun ~location:(x6569 : WebGLUniformLocation.t option) ->
          fun ~v:(x6571 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6573) "uniform3fv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6569);(
                   Iterable.t_1_to_js GLfloat.t_to_js x6571)|])
    let (uniform3iv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v:GLint.t Iterable.t_1 -> unit)
      =
      fun (x6579 : 'tags this) ->
        fun ~location:(x6575 : WebGLUniformLocation.t option) ->
          fun ~v:(x6577 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6579) "uniform3iv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6575);(
                   Iterable.t_1_to_js GLint.t_to_js x6577)|])
    let (uniform4fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6585 : 'tags this) ->
        fun ~location:(x6581 : WebGLUniformLocation.t option) ->
          fun ~v:(x6583 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6585) "uniform4fv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6581);(
                   Iterable.t_1_to_js GLfloat.t_to_js x6583)|])
    let (uniform4iv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v:GLint.t Iterable.t_1 -> unit)
      =
      fun (x6591 : 'tags this) ->
        fun ~location:(x6587 : WebGLUniformLocation.t option) ->
          fun ~v:(x6589 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6591) "uniform4iv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6587);(
                   Iterable.t_1_to_js GLint.t_to_js x6589)|])
    let (uniformMatrix2fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t -> value:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6598 : 'tags this) ->
        fun ~location:(x6593 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x6595 : GLboolean.t) ->
            fun ~value:(x6596 : GLfloat.t Iterable.t_1) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6598) "uniformMatrix2fv"
                   [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6593);(
                     GLboolean.t_to_js x6595);(Iterable.t_1_to_js
                                                 GLfloat.t_to_js x6596)|])
    let (uniformMatrix3fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t -> value:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6605 : 'tags this) ->
        fun ~location:(x6600 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x6602 : GLboolean.t) ->
            fun ~value:(x6603 : GLfloat.t Iterable.t_1) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6605) "uniformMatrix3fv"
                   [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6600);(
                     GLboolean.t_to_js x6602);(Iterable.t_1_to_js
                                                 GLfloat.t_to_js x6603)|])
    let (uniformMatrix4fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t -> value:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6612 : 'tags this) ->
        fun ~location:(x6607 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x6609 : GLboolean.t) ->
            fun ~value:(x6610 : GLfloat.t Iterable.t_1) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6612) "uniformMatrix4fv"
                   [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6607);(
                     GLboolean.t_to_js x6609);(Iterable.t_1_to_js
                                                 GLfloat.t_to_js x6610)|])
    let cast_from = Obj.magic
  end
module WebGLShaderPrecisionFormat =
  struct
    type t = [ `WebGLShaderPrecisionFormat ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6615 : Ojs.t) -> t_of_js x6615
    and t_0_to_js : t_0 -> Ojs.t = fun (x6614 : t) -> t_to_js x6614
    type tags = [ `WebGLShaderPrecisionFormat ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLShaderPrecisionFormat ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6618 : Ojs.t) -> intf_of_js __tags_of_js x6618
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6616 : __tags intf) -> intf_to_js __tags_to_js x6616
    let (get_precision : 'tags this -> GLint.t) =
      fun (x6620 : 'tags this) ->
        GLint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6620) "precision")
    let (get_rangeMax : 'tags this -> GLint.t) =
      fun (x6622 : 'tags this) ->
        GLint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6622) "rangeMax")
    let (get_rangeMin : 'tags this -> GLint.t) =
      fun (x6624 : 'tags this) ->
        GLint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6624) "rangeMin")
    let (create :
      precision:GLint.t -> rangeMax:GLint.t -> rangeMin:GLint.t -> unit -> t)
      =
      fun ~precision:(x6626 : GLint.t) ->
        fun ~rangeMax:(x6627 : GLint.t) ->
          fun ~rangeMin:(x6628 : GLint.t) ->
            fun () ->
              let x6629 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x6629 "precision" (GLint.t_to_js x6626);
              Ojs.set_prop_ascii x6629 "rangeMax" (GLint.t_to_js x6627);
              Ojs.set_prop_ascii x6629 "rangeMin" (GLint.t_to_js x6628);
              t_of_js x6629
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLShaderPrecisionFormat")
             "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGLShaderPrecisionFormat")
             [||])
  end
module WebGLRenderbuffer =
  struct
    type t = [ `WebGLRenderbuffer ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6631 : Ojs.t) -> t_of_js x6631
    and t_0_to_js : t_0 -> Ojs.t = fun (x6630 : t) -> t_to_js x6630
    type tags = [ `WebGLRenderbuffer ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLRenderbuffer ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6634 : Ojs.t) -> intf_of_js __tags_of_js x6634
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6632 : __tags intf) -> intf_to_js __tags_to_js x6632
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderbuffer") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLRenderbuffer")
             [||])
  end
module WebGLFramebuffer =
  struct
    type t = [ `WebGLFramebuffer ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6637 : Ojs.t) -> t_of_js x6637
    and t_0_to_js : t_0 -> Ojs.t = fun (x6636 : t) -> t_to_js x6636
    type tags = [ `WebGLFramebuffer ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLFramebuffer ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6640 : Ojs.t) -> intf_of_js __tags_of_js x6640
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6638 : __tags intf) -> intf_to_js __tags_to_js x6638
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLFramebuffer") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLFramebuffer")
             [||])
  end
module WebGLPowerPreference =
  struct
    type t =
      [ `L_s109_low_power  | `L_s57_default  | `L_s87_high_performance ]
    let rec t_of_js : Ojs.t -> t =
      fun (x6643 : Ojs.t) ->
        let x6644 = x6643 in
        match Ojs.string_of_js x6644 with
        | "low-power" -> `L_s109_low_power
        | "default" -> `L_s57_default
        | "high-performance" -> `L_s87_high_performance
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x6642 :
          [ `L_s109_low_power  | `L_s57_default  | `L_s87_high_performance ])
        ->
        match x6642 with
        | `L_s109_low_power -> Ojs.string_to_js "low-power"
        | `L_s57_default -> Ojs.string_to_js "default"
        | `L_s87_high_performance -> Ojs.string_to_js "high-performance"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6646 : Ojs.t) -> t_of_js x6646
    and t_0_to_js : t_0 -> Ojs.t = fun (x6645 : t) -> t_to_js x6645
  end
module WebGLContextAttributes =
  struct
    type t = [ `WebGLContextAttributes ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6648 : Ojs.t) -> t_of_js x6648
    and t_0_to_js : t_0 -> Ojs.t = fun (x6647 : t) -> t_to_js x6647
    type tags = [ `WebGLContextAttributes ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLContextAttributes ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6651 : Ojs.t) -> intf_of_js __tags_of_js x6651
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6649 : __tags intf) -> intf_to_js __tags_to_js x6649
    let (get_alpha : 'tags this -> bool option) =
      fun (x6653 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6653) "alpha")
    let (set_alpha : 'tags this -> bool -> unit) =
      fun (x6656 : 'tags this) ->
        fun (x6657 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6656) "alpha"
            (Ojs.bool_to_js x6657)
    let (get_antialias : 'tags this -> bool option) =
      fun (x6659 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6659) "antialias")
    let (set_antialias : 'tags this -> bool -> unit) =
      fun (x6662 : 'tags this) ->
        fun (x6663 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6662) "antialias"
            (Ojs.bool_to_js x6663)
    let (get_depth : 'tags this -> bool option) =
      fun (x6665 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6665) "depth")
    let (set_depth : 'tags this -> bool -> unit) =
      fun (x6668 : 'tags this) ->
        fun (x6669 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6668) "depth"
            (Ojs.bool_to_js x6669)
    let (get_desynchronized : 'tags this -> bool option) =
      fun (x6671 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6671) "desynchronized")
    let (set_desynchronized : 'tags this -> bool -> unit) =
      fun (x6674 : 'tags this) ->
        fun (x6675 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6674) "desynchronized"
            (Ojs.bool_to_js x6675)
    let (get_failIfMajorPerformanceCaveat : 'tags this -> bool option) =
      fun (x6677 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6677)
             "failIfMajorPerformanceCaveat")
    let (set_failIfMajorPerformanceCaveat : 'tags this -> bool -> unit) =
      fun (x6680 : 'tags this) ->
        fun (x6681 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6680)
            "failIfMajorPerformanceCaveat" (Ojs.bool_to_js x6681)
    let (get_powerPreference : 'tags this -> WebGLPowerPreference.t option) =
      fun (x6683 : 'tags this) ->
        Ojs.option_of_js WebGLPowerPreference.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6683) "powerPreference")
    let (set_powerPreference : 'tags this -> WebGLPowerPreference.t -> unit)
      =
      fun (x6686 : 'tags this) ->
        fun (x6687 : WebGLPowerPreference.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6686) "powerPreference"
            (WebGLPowerPreference.t_to_js x6687)
    let (get_premultipliedAlpha : 'tags this -> bool option) =
      fun (x6689 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6689)
             "premultipliedAlpha")
    let (set_premultipliedAlpha : 'tags this -> bool -> unit) =
      fun (x6692 : 'tags this) ->
        fun (x6693 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6692)
            "premultipliedAlpha" (Ojs.bool_to_js x6693)
    let (get_preserveDrawingBuffer : 'tags this -> bool option) =
      fun (x6695 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6695)
             "preserveDrawingBuffer")
    let (set_preserveDrawingBuffer : 'tags this -> bool -> unit) =
      fun (x6698 : 'tags this) ->
        fun (x6699 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6698)
            "preserveDrawingBuffer" (Ojs.bool_to_js x6699)
    let (get_stencil : 'tags this -> bool option) =
      fun (x6701 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6701) "stencil")
    let (set_stencil : 'tags this -> bool -> unit) =
      fun (x6704 : 'tags this) ->
        fun (x6705 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6704) "stencil"
            (Ojs.bool_to_js x6705)
    let (create :
      ?alpha:bool ->
        ?antialias:bool ->
          ?depth:bool ->
            ?desynchronized:bool ->
              ?failIfMajorPerformanceCaveat:bool ->
                ?powerPreference:WebGLPowerPreference.t ->
                  ?premultipliedAlpha:bool ->
                    ?preserveDrawingBuffer:bool -> ?stencil:bool -> unit -> t)
      =
      fun ?alpha:(x6707 : bool option) ->
        fun ?antialias:(x6708 : bool option) ->
          fun ?depth:(x6709 : bool option) ->
            fun ?desynchronized:(x6710 : bool option) ->
              fun ?failIfMajorPerformanceCaveat:(x6711 : bool option) ->
                fun ?powerPreference:(x6712 : WebGLPowerPreference.t option)
                  ->
                  fun ?premultipliedAlpha:(x6713 : bool option) ->
                    fun ?preserveDrawingBuffer:(x6714 : bool option) ->
                      fun ?stencil:(x6715 : bool option) ->
                        fun () ->
                          let x6716 = Ojs.empty_obj () in
                          (match x6707 with
                           | Some x6725 ->
                               Ojs.set_prop_ascii x6716 "alpha"
                                 (Ojs.bool_to_js x6725)
                           | None -> ());
                          (match x6708 with
                           | Some x6724 ->
                               Ojs.set_prop_ascii x6716 "antialias"
                                 (Ojs.bool_to_js x6724)
                           | None -> ());
                          (match x6709 with
                           | Some x6723 ->
                               Ojs.set_prop_ascii x6716 "depth"
                                 (Ojs.bool_to_js x6723)
                           | None -> ());
                          (match x6710 with
                           | Some x6722 ->
                               Ojs.set_prop_ascii x6716 "desynchronized"
                                 (Ojs.bool_to_js x6722)
                           | None -> ());
                          (match x6711 with
                           | Some x6721 ->
                               Ojs.set_prop_ascii x6716
                                 "failIfMajorPerformanceCaveat"
                                 (Ojs.bool_to_js x6721)
                           | None -> ());
                          (match x6712 with
                           | Some x6720 ->
                               Ojs.set_prop_ascii x6716 "powerPreference"
                                 (WebGLPowerPreference.t_to_js x6720)
                           | None -> ());
                          (match x6713 with
                           | Some x6719 ->
                               Ojs.set_prop_ascii x6716 "premultipliedAlpha"
                                 (Ojs.bool_to_js x6719)
                           | None -> ());
                          (match x6714 with
                           | Some x6718 ->
                               Ojs.set_prop_ascii x6716
                                 "preserveDrawingBuffer"
                                 (Ojs.bool_to_js x6718)
                           | None -> ());
                          (match x6715 with
                           | Some x6717 ->
                               Ojs.set_prop_ascii x6716 "stencil"
                                 (Ojs.bool_to_js x6717)
                           | None -> ());
                          t_of_js x6716
    let cast_from = Obj.magic
  end
module WebGLProgram =
  struct
    type t = [ `WebGLProgram ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6727 : Ojs.t) -> t_of_js x6727
    and t_0_to_js : t_0 -> Ojs.t = fun (x6726 : t) -> t_to_js x6726
    type tags = [ `WebGLProgram ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLProgram ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6730 : Ojs.t) -> intf_of_js __tags_of_js x6730
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6728 : __tags intf) -> intf_to_js __tags_to_js x6728
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLProgram")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLProgram") [||])
  end
module WebGLBuffer =
  struct
    type t = [ `WebGLBuffer ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6733 : Ojs.t) -> t_of_js x6733
    and t_0_to_js : t_0 -> Ojs.t = fun (x6732 : t) -> t_to_js x6732
    type tags = [ `WebGLBuffer ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLBuffer ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6736 : Ojs.t) -> intf_of_js __tags_of_js x6736
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6734 : __tags intf) -> intf_to_js __tags_to_js x6734
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLBuffer")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLBuffer") [||])
  end
module WebGLActiveInfo =
  struct
    type t = [ `WebGLActiveInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6739 : Ojs.t) -> t_of_js x6739
    and t_0_to_js : t_0 -> Ojs.t = fun (x6738 : t) -> t_to_js x6738
    type tags = [ `WebGLActiveInfo ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLActiveInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6742 : Ojs.t) -> intf_of_js __tags_of_js x6742
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6740 : __tags intf) -> intf_to_js __tags_to_js x6740
    let (get_name : 'tags this -> string) =
      fun (x6744 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6744) "name")
    let (get_size : 'tags this -> GLint.t) =
      fun (x6746 : 'tags this) ->
        GLint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6746) "size")
    let (get_type : 'tags this -> GLenum.t) =
      fun (x6748 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6748) "type")
    let (create : name:string -> size:GLint.t -> type_:GLenum.t -> unit -> t)
      =
      fun ~name:(x6750 : string) ->
        fun ~size:(x6751 : GLint.t) ->
          fun ~type_:(x6752 : GLenum.t) ->
            fun () ->
              let x6753 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x6753 "name" (Ojs.string_to_js x6750);
              Ojs.set_prop_ascii x6753 "size" (GLint.t_to_js x6751);
              Ojs.set_prop_ascii x6753 "type" (GLenum.t_to_js x6752);
              t_of_js x6753
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLActiveInfo") "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLActiveInfo") [||])
  end
module WEBGL_lose_context =
  struct
    type t = [ `WEBGL_lose_context ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6755 : Ojs.t) -> t_of_js x6755
    and t_0_to_js : t_0 -> Ojs.t = fun (x6754 : t) -> t_to_js x6754
    type tags = [ `WEBGL_lose_context ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_lose_context ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6758 : Ojs.t) -> intf_of_js __tags_of_js x6758
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6756 : __tags intf) -> intf_to_js __tags_to_js x6756
    let (loseContext : 'tags this -> unit) =
      fun (x6760 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x6760) "loseContext" [||])
    let (restoreContext : 'tags this -> unit) =
      fun (x6762 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x6762) "restoreContext" [||])
    let cast_from = Obj.magic
  end
module WEBGL_draw_buffers =
  struct
    type t = [ `WEBGL_draw_buffers ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6765 : Ojs.t) -> t_of_js x6765
    and t_0_to_js : t_0 -> Ojs.t = fun (x6764 : t) -> t_to_js x6764
    type tags = [ `WEBGL_draw_buffers ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_draw_buffers ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6768 : Ojs.t) -> intf_of_js __tags_of_js x6768
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6766 : __tags intf) -> intf_to_js __tags_to_js x6766
    let (drawBuffersWEBGL : 'tags this -> buffers:GLenum.t list -> unit) =
      fun (x6772 : 'tags this) ->
        fun ~buffers:(x6770 : GLenum.t list) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6772) "drawBuffersWEBGL"
               [|(Ojs.list_to_js GLenum.t_to_js x6770)|])
    let (get_COLOR_ATTACHMENT0_WEBGL : 'tags this -> GLenum.t) =
      fun (x6774 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6774)
             "COLOR_ATTACHMENT0_WEBGL")
    let (get_COLOR_ATTACHMENT10_WEBGL : 'tags this -> GLenum.t) =
      fun (x6776 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6776)
             "COLOR_ATTACHMENT10_WEBGL")
    let (get_COLOR_ATTACHMENT11_WEBGL : 'tags this -> GLenum.t) =
      fun (x6778 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6778)
             "COLOR_ATTACHMENT11_WEBGL")
    let (get_COLOR_ATTACHMENT12_WEBGL : 'tags this -> GLenum.t) =
      fun (x6780 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6780)
             "COLOR_ATTACHMENT12_WEBGL")
    let (get_COLOR_ATTACHMENT13_WEBGL : 'tags this -> GLenum.t) =
      fun (x6782 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6782)
             "COLOR_ATTACHMENT13_WEBGL")
    let (get_COLOR_ATTACHMENT14_WEBGL : 'tags this -> GLenum.t) =
      fun (x6784 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6784)
             "COLOR_ATTACHMENT14_WEBGL")
    let (get_COLOR_ATTACHMENT15_WEBGL : 'tags this -> GLenum.t) =
      fun (x6786 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6786)
             "COLOR_ATTACHMENT15_WEBGL")
    let (get_COLOR_ATTACHMENT1_WEBGL : 'tags this -> GLenum.t) =
      fun (x6788 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6788)
             "COLOR_ATTACHMENT1_WEBGL")
    let (get_COLOR_ATTACHMENT2_WEBGL : 'tags this -> GLenum.t) =
      fun (x6790 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6790)
             "COLOR_ATTACHMENT2_WEBGL")
    let (get_COLOR_ATTACHMENT3_WEBGL : 'tags this -> GLenum.t) =
      fun (x6792 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6792)
             "COLOR_ATTACHMENT3_WEBGL")
    let (get_COLOR_ATTACHMENT4_WEBGL : 'tags this -> GLenum.t) =
      fun (x6794 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6794)
             "COLOR_ATTACHMENT4_WEBGL")
    let (get_COLOR_ATTACHMENT5_WEBGL : 'tags this -> GLenum.t) =
      fun (x6796 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6796)
             "COLOR_ATTACHMENT5_WEBGL")
    let (get_COLOR_ATTACHMENT6_WEBGL : 'tags this -> GLenum.t) =
      fun (x6798 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6798)
             "COLOR_ATTACHMENT6_WEBGL")
    let (get_COLOR_ATTACHMENT7_WEBGL : 'tags this -> GLenum.t) =
      fun (x6800 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6800)
             "COLOR_ATTACHMENT7_WEBGL")
    let (get_COLOR_ATTACHMENT8_WEBGL : 'tags this -> GLenum.t) =
      fun (x6802 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6802)
             "COLOR_ATTACHMENT8_WEBGL")
    let (get_COLOR_ATTACHMENT9_WEBGL : 'tags this -> GLenum.t) =
      fun (x6804 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6804)
             "COLOR_ATTACHMENT9_WEBGL")
    let (get_DRAW_BUFFER0_WEBGL : 'tags this -> GLenum.t) =
      fun (x6806 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6806)
             "DRAW_BUFFER0_WEBGL")
    let (get_DRAW_BUFFER10_WEBGL : 'tags this -> GLenum.t) =
      fun (x6808 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6808)
             "DRAW_BUFFER10_WEBGL")
    let (get_DRAW_BUFFER11_WEBGL : 'tags this -> GLenum.t) =
      fun (x6810 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6810)
             "DRAW_BUFFER11_WEBGL")
    let (get_DRAW_BUFFER12_WEBGL : 'tags this -> GLenum.t) =
      fun (x6812 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6812)
             "DRAW_BUFFER12_WEBGL")
    let (get_DRAW_BUFFER13_WEBGL : 'tags this -> GLenum.t) =
      fun (x6814 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6814)
             "DRAW_BUFFER13_WEBGL")
    let (get_DRAW_BUFFER14_WEBGL : 'tags this -> GLenum.t) =
      fun (x6816 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6816)
             "DRAW_BUFFER14_WEBGL")
    let (get_DRAW_BUFFER15_WEBGL : 'tags this -> GLenum.t) =
      fun (x6818 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6818)
             "DRAW_BUFFER15_WEBGL")
    let (get_DRAW_BUFFER1_WEBGL : 'tags this -> GLenum.t) =
      fun (x6820 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6820)
             "DRAW_BUFFER1_WEBGL")
    let (get_DRAW_BUFFER2_WEBGL : 'tags this -> GLenum.t) =
      fun (x6822 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6822)
             "DRAW_BUFFER2_WEBGL")
    let (get_DRAW_BUFFER3_WEBGL : 'tags this -> GLenum.t) =
      fun (x6824 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6824)
             "DRAW_BUFFER3_WEBGL")
    let (get_DRAW_BUFFER4_WEBGL : 'tags this -> GLenum.t) =
      fun (x6826 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6826)
             "DRAW_BUFFER4_WEBGL")
    let (get_DRAW_BUFFER5_WEBGL : 'tags this -> GLenum.t) =
      fun (x6828 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6828)
             "DRAW_BUFFER5_WEBGL")
    let (get_DRAW_BUFFER6_WEBGL : 'tags this -> GLenum.t) =
      fun (x6830 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6830)
             "DRAW_BUFFER6_WEBGL")
    let (get_DRAW_BUFFER7_WEBGL : 'tags this -> GLenum.t) =
      fun (x6832 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6832)
             "DRAW_BUFFER7_WEBGL")
    let (get_DRAW_BUFFER8_WEBGL : 'tags this -> GLenum.t) =
      fun (x6834 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6834)
             "DRAW_BUFFER8_WEBGL")
    let (get_DRAW_BUFFER9_WEBGL : 'tags this -> GLenum.t) =
      fun (x6836 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6836)
             "DRAW_BUFFER9_WEBGL")
    let (get_MAX_COLOR_ATTACHMENTS_WEBGL : 'tags this -> GLenum.t) =
      fun (x6838 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6838)
             "MAX_COLOR_ATTACHMENTS_WEBGL")
    let (get_MAX_DRAW_BUFFERS_WEBGL : 'tags this -> GLenum.t) =
      fun (x6840 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6840)
             "MAX_DRAW_BUFFERS_WEBGL")
    let (drawBuffersWEBGL' :
      'tags this -> buffers:GLenum.t Iterable.t_1 -> unit) =
      fun (x6844 : 'tags this) ->
        fun ~buffers:(x6842 : GLenum.t Iterable.t_1) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6844) "drawBuffersWEBGL"
               [|(Iterable.t_1_to_js GLenum.t_to_js x6842)|])
    let cast_from = Obj.magic
  end
module WEBGL_depth_texture =
  struct
    type t = [ `WEBGL_depth_texture ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6847 : Ojs.t) -> t_of_js x6847
    and t_0_to_js : t_0 -> Ojs.t = fun (x6846 : t) -> t_to_js x6846
    type tags = [ `WEBGL_depth_texture ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_depth_texture ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6850 : Ojs.t) -> intf_of_js __tags_of_js x6850
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6848 : __tags intf) -> intf_to_js __tags_to_js x6848
    let (get_UNSIGNED_INT_24_8_WEBGL : 'tags this -> GLenum.t) =
      fun (x6852 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6852)
             "UNSIGNED_INT_24_8_WEBGL")
    let (create : unsigned_int_24_8_webgl:GLenum.t -> unit -> t) =
      fun ~unsigned_int_24_8_webgl:(x6854 : GLenum.t) ->
        fun () ->
          let x6855 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x6855 "UNSIGNED_INT_24_8_WEBGL"
            (GLenum.t_to_js x6854);
          t_of_js x6855
    let cast_from = Obj.magic
  end
module WebGLShader =
  struct
    type t = [ `WebGLShader ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6857 : Ojs.t) -> t_of_js x6857
    and t_0_to_js : t_0 -> Ojs.t = fun (x6856 : t) -> t_to_js x6856
    type tags = [ `WebGLShader ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLShader ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6860 : Ojs.t) -> intf_of_js __tags_of_js x6860
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6858 : __tags intf) -> intf_to_js __tags_to_js x6858
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLShader")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLShader") [||])
  end
module WEBGL_debug_shaders =
  struct
    type t = [ `WEBGL_debug_shaders ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6863 : Ojs.t) -> t_of_js x6863
    and t_0_to_js : t_0 -> Ojs.t = fun (x6862 : t) -> t_to_js x6862
    type tags = [ `WEBGL_debug_shaders ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_debug_shaders ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6866 : Ojs.t) -> intf_of_js __tags_of_js x6866
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6864 : __tags intf) -> intf_to_js __tags_to_js x6864
    let (getTranslatedShaderSource :
      'tags this -> shader:WebGLShader.t -> string) =
      fun (x6869 : 'tags this) ->
        fun ~shader:(x6868 : WebGLShader.t) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x6869)
               "getTranslatedShaderSource" [|(WebGLShader.t_to_js x6868)|])
    let cast_from = Obj.magic
  end
module WEBGL_debug_renderer_info =
  struct
    type t = [ `WEBGL_debug_renderer_info ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6872 : Ojs.t) -> t_of_js x6872
    and t_0_to_js : t_0 -> Ojs.t = fun (x6871 : t) -> t_to_js x6871
    type tags = [ `WEBGL_debug_renderer_info ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_debug_renderer_info ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6875 : Ojs.t) -> intf_of_js __tags_of_js x6875
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6873 : __tags intf) -> intf_to_js __tags_to_js x6873
    let (get_UNMASKED_RENDERER_WEBGL : 'tags this -> GLenum.t) =
      fun (x6877 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6877)
             "UNMASKED_RENDERER_WEBGL")
    let (get_UNMASKED_VENDOR_WEBGL : 'tags this -> GLenum.t) =
      fun (x6879 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6879)
             "UNMASKED_VENDOR_WEBGL")
    let (create :
      unmasked_renderer_webgl:GLenum.t ->
        unmasked_vendor_webgl:GLenum.t -> unit -> t)
      =
      fun ~unmasked_renderer_webgl:(x6881 : GLenum.t) ->
        fun ~unmasked_vendor_webgl:(x6882 : GLenum.t) ->
          fun () ->
            let x6883 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x6883 "UNMASKED_RENDERER_WEBGL"
              (GLenum.t_to_js x6881);
            Ojs.set_prop_ascii x6883 "UNMASKED_VENDOR_WEBGL"
              (GLenum.t_to_js x6882);
            t_of_js x6883
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_s3tc_srgb =
  struct
    type t = [ `WEBGL_compressed_texture_s3tc_srgb ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6885 : Ojs.t) -> t_of_js x6885
    and t_0_to_js : t_0 -> Ojs.t = fun (x6884 : t) -> t_to_js x6884
    type tags = [ `WEBGL_compressed_texture_s3tc_srgb ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_s3tc_srgb ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6888 : Ojs.t) -> intf_of_js __tags_of_js x6888
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6886 : __tags intf) -> intf_to_js __tags_to_js x6886
    let (get_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT : 'tags this -> GLenum.t) =
      fun (x6890 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6890)
             "COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT")
    let (get_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT : 'tags this -> GLenum.t) =
      fun (x6892 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6892)
             "COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT")
    let (get_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT : 'tags this -> GLenum.t) =
      fun (x6894 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6894)
             "COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT")
    let (get_COMPRESSED_SRGB_S3TC_DXT1_EXT : 'tags this -> GLenum.t) =
      fun (x6896 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6896)
             "COMPRESSED_SRGB_S3TC_DXT1_EXT")
    let (create :
      compressed_srgb_alpha_s3tc_dxt1_ext:GLenum.t ->
        compressed_srgb_alpha_s3tc_dxt3_ext:GLenum.t ->
          compressed_srgb_alpha_s3tc_dxt5_ext:GLenum.t ->
            compressed_srgb_s3tc_dxt1_ext:GLenum.t -> unit -> t)
      =
      fun ~compressed_srgb_alpha_s3tc_dxt1_ext:(x6898 : GLenum.t) ->
        fun ~compressed_srgb_alpha_s3tc_dxt3_ext:(x6899 : GLenum.t) ->
          fun ~compressed_srgb_alpha_s3tc_dxt5_ext:(x6900 : GLenum.t) ->
            fun ~compressed_srgb_s3tc_dxt1_ext:(x6901 : GLenum.t) ->
              fun () ->
                let x6902 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x6902
                  "COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT"
                  (GLenum.t_to_js x6898);
                Ojs.set_prop_ascii x6902
                  "COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT"
                  (GLenum.t_to_js x6899);
                Ojs.set_prop_ascii x6902
                  "COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT"
                  (GLenum.t_to_js x6900);
                Ojs.set_prop_ascii x6902 "COMPRESSED_SRGB_S3TC_DXT1_EXT"
                  (GLenum.t_to_js x6901);
                t_of_js x6902
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_s3tc =
  struct
    type t = [ `WEBGL_compressed_texture_s3tc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6904 : Ojs.t) -> t_of_js x6904
    and t_0_to_js : t_0 -> Ojs.t = fun (x6903 : t) -> t_to_js x6903
    type tags = [ `WEBGL_compressed_texture_s3tc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_s3tc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6907 : Ojs.t) -> intf_of_js __tags_of_js x6907
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6905 : __tags intf) -> intf_to_js __tags_to_js x6905
    let (get_COMPRESSED_RGBA_S3TC_DXT1_EXT : 'tags this -> GLenum.t) =
      fun (x6909 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6909)
             "COMPRESSED_RGBA_S3TC_DXT1_EXT")
    let (get_COMPRESSED_RGBA_S3TC_DXT3_EXT : 'tags this -> GLenum.t) =
      fun (x6911 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6911)
             "COMPRESSED_RGBA_S3TC_DXT3_EXT")
    let (get_COMPRESSED_RGBA_S3TC_DXT5_EXT : 'tags this -> GLenum.t) =
      fun (x6913 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6913)
             "COMPRESSED_RGBA_S3TC_DXT5_EXT")
    let (get_COMPRESSED_RGB_S3TC_DXT1_EXT : 'tags this -> GLenum.t) =
      fun (x6915 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6915)
             "COMPRESSED_RGB_S3TC_DXT1_EXT")
    let (create :
      compressed_rgba_s3tc_dxt1_ext:GLenum.t ->
        compressed_rgba_s3tc_dxt3_ext:GLenum.t ->
          compressed_rgba_s3tc_dxt5_ext:GLenum.t ->
            compressed_rgb_s3tc_dxt1_ext:GLenum.t -> unit -> t)
      =
      fun ~compressed_rgba_s3tc_dxt1_ext:(x6917 : GLenum.t) ->
        fun ~compressed_rgba_s3tc_dxt3_ext:(x6918 : GLenum.t) ->
          fun ~compressed_rgba_s3tc_dxt5_ext:(x6919 : GLenum.t) ->
            fun ~compressed_rgb_s3tc_dxt1_ext:(x6920 : GLenum.t) ->
              fun () ->
                let x6921 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x6921 "COMPRESSED_RGBA_S3TC_DXT1_EXT"
                  (GLenum.t_to_js x6917);
                Ojs.set_prop_ascii x6921 "COMPRESSED_RGBA_S3TC_DXT3_EXT"
                  (GLenum.t_to_js x6918);
                Ojs.set_prop_ascii x6921 "COMPRESSED_RGBA_S3TC_DXT5_EXT"
                  (GLenum.t_to_js x6919);
                Ojs.set_prop_ascii x6921 "COMPRESSED_RGB_S3TC_DXT1_EXT"
                  (GLenum.t_to_js x6920);
                t_of_js x6921
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_pvrtc =
  struct
    type t = [ `WEBGL_compressed_texture_pvrtc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6923 : Ojs.t) -> t_of_js x6923
    and t_0_to_js : t_0 -> Ojs.t = fun (x6922 : t) -> t_to_js x6922
    type tags = [ `WEBGL_compressed_texture_pvrtc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_pvrtc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6926 : Ojs.t) -> intf_of_js __tags_of_js x6926
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6924 : __tags intf) -> intf_to_js __tags_to_js x6924
    let (get_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG : 'tags this -> GLenum.t) =
      fun (x6928 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6928)
             "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG")
    let (get_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG : 'tags this -> GLenum.t) =
      fun (x6930 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6930)
             "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG")
    let (get_COMPRESSED_RGB_PVRTC_2BPPV1_IMG : 'tags this -> GLenum.t) =
      fun (x6932 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6932)
             "COMPRESSED_RGB_PVRTC_2BPPV1_IMG")
    let (get_COMPRESSED_RGB_PVRTC_4BPPV1_IMG : 'tags this -> GLenum.t) =
      fun (x6934 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6934)
             "COMPRESSED_RGB_PVRTC_4BPPV1_IMG")
    let (create :
      compressed_rgba_pvrtc_2bppv1_img:GLenum.t ->
        compressed_rgba_pvrtc_4bppv1_img:GLenum.t ->
          compressed_rgb_pvrtc_2bppv1_img:GLenum.t ->
            compressed_rgb_pvrtc_4bppv1_img:GLenum.t -> unit -> t)
      =
      fun ~compressed_rgba_pvrtc_2bppv1_img:(x6936 : GLenum.t) ->
        fun ~compressed_rgba_pvrtc_4bppv1_img:(x6937 : GLenum.t) ->
          fun ~compressed_rgb_pvrtc_2bppv1_img:(x6938 : GLenum.t) ->
            fun ~compressed_rgb_pvrtc_4bppv1_img:(x6939 : GLenum.t) ->
              fun () ->
                let x6940 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x6940 "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG"
                  (GLenum.t_to_js x6936);
                Ojs.set_prop_ascii x6940 "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG"
                  (GLenum.t_to_js x6937);
                Ojs.set_prop_ascii x6940 "COMPRESSED_RGB_PVRTC_2BPPV1_IMG"
                  (GLenum.t_to_js x6938);
                Ojs.set_prop_ascii x6940 "COMPRESSED_RGB_PVRTC_4BPPV1_IMG"
                  (GLenum.t_to_js x6939);
                t_of_js x6940
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_etc1 =
  struct
    type t = [ `WEBGL_compressed_texture_etc1 ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6942 : Ojs.t) -> t_of_js x6942
    and t_0_to_js : t_0 -> Ojs.t = fun (x6941 : t) -> t_to_js x6941
    type tags = [ `WEBGL_compressed_texture_etc1 ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_etc1 ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6945 : Ojs.t) -> intf_of_js __tags_of_js x6945
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6943 : __tags intf) -> intf_to_js __tags_to_js x6943
    let (get_COMPRESSED_RGB_ETC1_WEBGL : 'tags this -> GLenum.t) =
      fun (x6947 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6947)
             "COMPRESSED_RGB_ETC1_WEBGL")
    let (create : compressed_rgb_etc1_webgl:GLenum.t -> unit -> t) =
      fun ~compressed_rgb_etc1_webgl:(x6949 : GLenum.t) ->
        fun () ->
          let x6950 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x6950 "COMPRESSED_RGB_ETC1_WEBGL"
            (GLenum.t_to_js x6949);
          t_of_js x6950
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_etc =
  struct
    type t = [ `WEBGL_compressed_texture_etc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6952 : Ojs.t) -> t_of_js x6952
    and t_0_to_js : t_0 -> Ojs.t = fun (x6951 : t) -> t_to_js x6951
    type tags = [ `WEBGL_compressed_texture_etc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_etc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6955 : Ojs.t) -> intf_of_js __tags_of_js x6955
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6953 : __tags intf) -> intf_to_js __tags_to_js x6953
    let (get_COMPRESSED_R11_EAC : 'tags this -> GLenum.t) =
      fun (x6957 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6957)
             "COMPRESSED_R11_EAC")
    let (get_COMPRESSED_RG11_EAC : 'tags this -> GLenum.t) =
      fun (x6959 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6959)
             "COMPRESSED_RG11_EAC")
    let (get_COMPRESSED_RGB8_ETC2 : 'tags this -> GLenum.t) =
      fun (x6961 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6961)
             "COMPRESSED_RGB8_ETC2")
    let (get_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 :
      'tags this -> GLenum.t) =
      fun (x6963 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6963)
             "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2")
    let (get_COMPRESSED_RGBA8_ETC2_EAC : 'tags this -> GLenum.t) =
      fun (x6965 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6965)
             "COMPRESSED_RGBA8_ETC2_EAC")
    let (get_COMPRESSED_SIGNED_R11_EAC : 'tags this -> GLenum.t) =
      fun (x6967 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6967)
             "COMPRESSED_SIGNED_R11_EAC")
    let (get_COMPRESSED_SIGNED_RG11_EAC : 'tags this -> GLenum.t) =
      fun (x6969 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6969)
             "COMPRESSED_SIGNED_RG11_EAC")
    let (get_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : 'tags this -> GLenum.t) =
      fun (x6971 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6971)
             "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC")
    let (get_COMPRESSED_SRGB8_ETC2 : 'tags this -> GLenum.t) =
      fun (x6973 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6973)
             "COMPRESSED_SRGB8_ETC2")
    let (get_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 :
      'tags this -> GLenum.t) =
      fun (x6975 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6975)
             "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2")
    let (create :
      compressed_r11_eac:GLenum.t ->
        compressed_rg11_eac:GLenum.t ->
          compressed_rgb8_etc2:GLenum.t ->
            compressed_rgb8_punchthrough_alpha1_etc2:GLenum.t ->
              compressed_rgba8_etc2_eac:GLenum.t ->
                compressed_signed_r11_eac:GLenum.t ->
                  compressed_signed_rg11_eac:GLenum.t ->
                    compressed_srgb8_alpha8_etc2_eac:GLenum.t ->
                      compressed_srgb8_etc2:GLenum.t ->
                        compressed_srgb8_punchthrough_alpha1_etc2:GLenum.t ->
                          unit -> t)
      =
      fun ~compressed_r11_eac:(x6977 : GLenum.t) ->
        fun ~compressed_rg11_eac:(x6978 : GLenum.t) ->
          fun ~compressed_rgb8_etc2:(x6979 : GLenum.t) ->
            fun ~compressed_rgb8_punchthrough_alpha1_etc2:(x6980 : GLenum.t)
              ->
              fun ~compressed_rgba8_etc2_eac:(x6981 : GLenum.t) ->
                fun ~compressed_signed_r11_eac:(x6982 : GLenum.t) ->
                  fun ~compressed_signed_rg11_eac:(x6983 : GLenum.t) ->
                    fun ~compressed_srgb8_alpha8_etc2_eac:(x6984 : GLenum.t)
                      ->
                      fun ~compressed_srgb8_etc2:(x6985 : GLenum.t) ->
                        fun
                          ~compressed_srgb8_punchthrough_alpha1_etc2:
                          (x6986 : GLenum.t) ->
                          fun () ->
                            let x6987 = Ojs.empty_obj () in
                            Ojs.set_prop_ascii x6987 "COMPRESSED_R11_EAC"
                              (GLenum.t_to_js x6977);
                            Ojs.set_prop_ascii x6987 "COMPRESSED_RG11_EAC"
                              (GLenum.t_to_js x6978);
                            Ojs.set_prop_ascii x6987 "COMPRESSED_RGB8_ETC2"
                              (GLenum.t_to_js x6979);
                            Ojs.set_prop_ascii x6987
                              "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2"
                              (GLenum.t_to_js x6980);
                            Ojs.set_prop_ascii x6987
                              "COMPRESSED_RGBA8_ETC2_EAC"
                              (GLenum.t_to_js x6981);
                            Ojs.set_prop_ascii x6987
                              "COMPRESSED_SIGNED_R11_EAC"
                              (GLenum.t_to_js x6982);
                            Ojs.set_prop_ascii x6987
                              "COMPRESSED_SIGNED_RG11_EAC"
                              (GLenum.t_to_js x6983);
                            Ojs.set_prop_ascii x6987
                              "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC"
                              (GLenum.t_to_js x6984);
                            Ojs.set_prop_ascii x6987 "COMPRESSED_SRGB8_ETC2"
                              (GLenum.t_to_js x6985);
                            Ojs.set_prop_ascii x6987
                              "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2"
                              (GLenum.t_to_js x6986);
                            t_of_js x6987
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_astc =
  struct
    type t = [ `WEBGL_compressed_texture_astc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6989 : Ojs.t) -> t_of_js x6989
    and t_0_to_js : t_0 -> Ojs.t = fun (x6988 : t) -> t_to_js x6988
    type tags = [ `WEBGL_compressed_texture_astc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_astc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6992 : Ojs.t) -> intf_of_js __tags_of_js x6992
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6990 : __tags intf) -> intf_to_js __tags_to_js x6990
    let (getSupportedProfiles : 'tags this -> string list) =
      fun (x6994 : 'tags this) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x6994) "getSupportedProfiles" [||])
    let (get_COMPRESSED_RGBA_ASTC_10x10_KHR : 'tags this -> GLenum.t) =
      fun (x6997 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6997)
             "COMPRESSED_RGBA_ASTC_10x10_KHR")
    let (get_COMPRESSED_RGBA_ASTC_10x5_KHR : 'tags this -> GLenum.t) =
      fun (x6999 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6999)
             "COMPRESSED_RGBA_ASTC_10x5_KHR")
    let (get_COMPRESSED_RGBA_ASTC_10x6_KHR : 'tags this -> GLenum.t) =
      fun (x7001 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7001)
             "COMPRESSED_RGBA_ASTC_10x6_KHR")
    let (get_COMPRESSED_RGBA_ASTC_10x8_KHR : 'tags this -> GLenum.t) =
      fun (x7003 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7003)
             "COMPRESSED_RGBA_ASTC_10x8_KHR")
    let (get_COMPRESSED_RGBA_ASTC_12x10_KHR : 'tags this -> GLenum.t) =
      fun (x7005 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7005)
             "COMPRESSED_RGBA_ASTC_12x10_KHR")
    let (get_COMPRESSED_RGBA_ASTC_12x12_KHR : 'tags this -> GLenum.t) =
      fun (x7007 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7007)
             "COMPRESSED_RGBA_ASTC_12x12_KHR")
    let (get_COMPRESSED_RGBA_ASTC_4x4_KHR : 'tags this -> GLenum.t) =
      fun (x7009 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7009)
             "COMPRESSED_RGBA_ASTC_4x4_KHR")
    let (get_COMPRESSED_RGBA_ASTC_5x4_KHR : 'tags this -> GLenum.t) =
      fun (x7011 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7011)
             "COMPRESSED_RGBA_ASTC_5x4_KHR")
    let (get_COMPRESSED_RGBA_ASTC_5x5_KHR : 'tags this -> GLenum.t) =
      fun (x7013 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7013)
             "COMPRESSED_RGBA_ASTC_5x5_KHR")
    let (get_COMPRESSED_RGBA_ASTC_6x5_KHR : 'tags this -> GLenum.t) =
      fun (x7015 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7015)
             "COMPRESSED_RGBA_ASTC_6x5_KHR")
    let (get_COMPRESSED_RGBA_ASTC_6x6_KHR : 'tags this -> GLenum.t) =
      fun (x7017 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7017)
             "COMPRESSED_RGBA_ASTC_6x6_KHR")
    let (get_COMPRESSED_RGBA_ASTC_8x5_KHR : 'tags this -> GLenum.t) =
      fun (x7019 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7019)
             "COMPRESSED_RGBA_ASTC_8x5_KHR")
    let (get_COMPRESSED_RGBA_ASTC_8x6_KHR : 'tags this -> GLenum.t) =
      fun (x7021 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7021)
             "COMPRESSED_RGBA_ASTC_8x6_KHR")
    let (get_COMPRESSED_RGBA_ASTC_8x8_KHR : 'tags this -> GLenum.t) =
      fun (x7023 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7023)
             "COMPRESSED_RGBA_ASTC_8x8_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : 'tags this -> GLenum.t)
      =
      fun (x7025 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7025)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : 'tags this -> GLenum.t)
      =
      fun (x7027 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7027)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : 'tags this -> GLenum.t)
      =
      fun (x7029 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7029)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : 'tags this -> GLenum.t)
      =
      fun (x7031 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7031)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : 'tags this -> GLenum.t)
      =
      fun (x7033 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7033)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : 'tags this -> GLenum.t)
      =
      fun (x7035 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7035)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : 'tags this -> GLenum.t) =
      fun (x7037 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7037)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : 'tags this -> GLenum.t) =
      fun (x7039 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7039)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : 'tags this -> GLenum.t) =
      fun (x7041 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7041)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : 'tags this -> GLenum.t) =
      fun (x7043 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7043)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : 'tags this -> GLenum.t) =
      fun (x7045 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7045)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : 'tags this -> GLenum.t) =
      fun (x7047 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7047)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : 'tags this -> GLenum.t) =
      fun (x7049 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7049)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : 'tags this -> GLenum.t) =
      fun (x7051 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7051)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR")
    let cast_from = Obj.magic
  end
module WEBGL_color_buffer_float =
  struct
    type t = [ `WEBGL_color_buffer_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7054 : Ojs.t) -> t_of_js x7054
    and t_0_to_js : t_0 -> Ojs.t = fun (x7053 : t) -> t_to_js x7053
    type tags = [ `WEBGL_color_buffer_float ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_color_buffer_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7057 : Ojs.t) -> intf_of_js __tags_of_js x7057
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7055 : __tags intf) -> intf_to_js __tags_to_js x7055
    let (get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT :
      'tags this -> GLenum.t) =
      fun (x7059 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7059)
             "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT")
    let (get_RGBA32F_EXT : 'tags this -> GLenum.t) =
      fun (x7061 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7061) "RGBA32F_EXT")
    let (get_UNSIGNED_NORMALIZED_EXT : 'tags this -> GLenum.t) =
      fun (x7063 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7063)
             "UNSIGNED_NORMALIZED_EXT")
    let (create :
      framebuffer_attachment_component_type_ext:GLenum.t ->
        rgba32f_ext:GLenum.t -> unsigned_normalized_ext:GLenum.t -> unit -> t)
      =
      fun ~framebuffer_attachment_component_type_ext:(x7065 : GLenum.t) ->
        fun ~rgba32f_ext:(x7066 : GLenum.t) ->
          fun ~unsigned_normalized_ext:(x7067 : GLenum.t) ->
            fun () ->
              let x7068 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x7068
                "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT"
                (GLenum.t_to_js x7065);
              Ojs.set_prop_ascii x7068 "RGBA32F_EXT" (GLenum.t_to_js x7066);
              Ojs.set_prop_ascii x7068 "UNSIGNED_NORMALIZED_EXT"
                (GLenum.t_to_js x7067);
              t_of_js x7068
    let cast_from = Obj.magic
  end
module WebGLTexture =
  struct
    type t = [ `WebGLTexture ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7070 : Ojs.t) -> t_of_js x7070
    and t_0_to_js : t_0 -> Ojs.t = fun (x7069 : t) -> t_to_js x7069
    type tags = [ `WebGLTexture ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLTexture ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7073 : Ojs.t) -> intf_of_js __tags_of_js x7073
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7071 : __tags intf) -> intf_to_js __tags_to_js x7071
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLTexture")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLTexture") [||])
  end
module OVR_multiview2 =
  struct
    type t = [ `OVR_multiview2 ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7076 : Ojs.t) -> t_of_js x7076
    and t_0_to_js : t_0 -> Ojs.t = fun (x7075 : t) -> t_to_js x7075
    type tags = [ `OVR_multiview2 ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `OVR_multiview2 ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7079 : Ojs.t) -> intf_of_js __tags_of_js x7079
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7077 : __tags intf) -> intf_to_js __tags_to_js x7077
    let (framebufferTextureMultiviewOVR :
      'tags this ->
        target:GLenum.t ->
          attachment:GLenum.t ->
            texture:WebGLTexture.t option ->
              level:GLint.t ->
                baseViewIndex:GLint.t -> numViews:GLsizei.t -> unit)
      =
      fun (x7088 : 'tags this) ->
        fun ~target:(x7081 : GLenum.t) ->
          fun ~attachment:(x7082 : GLenum.t) ->
            fun ~texture:(x7083 : WebGLTexture.t option) ->
              fun ~level:(x7085 : GLint.t) ->
                fun ~baseViewIndex:(x7086 : GLint.t) ->
                  fun ~numViews:(x7087 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x7088)
                         "framebufferTextureMultiviewOVR"
                         [|(GLenum.t_to_js x7081);(GLenum.t_to_js x7082);(
                           Ojs.option_to_js WebGLTexture.t_to_js x7083);(
                           GLint.t_to_js x7085);(GLint.t_to_js x7086);(
                           GLsizei.t_to_js x7087)|])
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR :
      'tags this -> GLenum.t) =
      fun (x7090 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7090)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR :
      'tags this -> GLenum.t) =
      fun (x7092 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7092)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR")
    let (get_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR :
      'tags this -> GLenum.t) =
      fun (x7094 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7094)
             "FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR")
    let (get_MAX_VIEWS_OVR : 'tags this -> GLenum.t) =
      fun (x7096 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7096) "MAX_VIEWS_OVR")
    let cast_from = Obj.magic
  end
module WebGLVertexArrayObjectOES =
  struct
    type t = [ `WebGLVertexArrayObjectOES ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7099 : Ojs.t) -> t_of_js x7099
    and t_0_to_js : t_0 -> Ojs.t = fun (x7098 : t) -> t_to_js x7098
    type tags = [ `WebGLVertexArrayObjectOES ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLVertexArrayObjectOES ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7102 : Ojs.t) -> intf_of_js __tags_of_js x7102
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7100 : __tags intf) -> intf_to_js __tags_to_js x7100
    let cast_from = Obj.magic
  end
module OES_vertex_array_object =
  struct
    type t = [ `OES_vertex_array_object ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7105 : Ojs.t) -> t_of_js x7105
    and t_0_to_js : t_0 -> Ojs.t = fun (x7104 : t) -> t_to_js x7104
    type tags = [ `OES_vertex_array_object ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_vertex_array_object ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7108 : Ojs.t) -> intf_of_js __tags_of_js x7108
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7106 : __tags intf) -> intf_to_js __tags_to_js x7106
    let (bindVertexArrayOES :
      'tags this -> arrayObject:WebGLVertexArrayObjectOES.t option -> unit) =
      fun (x7112 : 'tags this) ->
        fun ~arrayObject:(x7110 : WebGLVertexArrayObjectOES.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7112) "bindVertexArrayOES"
               [|(Ojs.option_to_js WebGLVertexArrayObjectOES.t_to_js x7110)|])
    let (createVertexArrayOES :
      'tags this -> WebGLVertexArrayObjectOES.t option) =
      fun (x7114 : 'tags this) ->
        Ojs.option_of_js WebGLVertexArrayObjectOES.t_of_js
          (Ojs.call (this_to_js Obj.magic x7114) "createVertexArrayOES" [||])
    let (deleteVertexArrayOES :
      'tags this -> arrayObject:WebGLVertexArrayObjectOES.t option -> unit) =
      fun (x7119 : 'tags this) ->
        fun ~arrayObject:(x7117 : WebGLVertexArrayObjectOES.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7119) "deleteVertexArrayOES"
               [|(Ojs.option_to_js WebGLVertexArrayObjectOES.t_to_js x7117)|])
    let (isVertexArrayOES :
      'tags this ->
        arrayObject:WebGLVertexArrayObjectOES.t option -> GLboolean.t)
      =
      fun (x7123 : 'tags this) ->
        fun ~arrayObject:(x7121 : WebGLVertexArrayObjectOES.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x7123) "isVertexArrayOES"
               [|(Ojs.option_to_js WebGLVertexArrayObjectOES.t_to_js x7121)|])
    let (get_VERTEX_ARRAY_BINDING_OES : 'tags this -> GLenum.t) =
      fun (x7125 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7125)
             "VERTEX_ARRAY_BINDING_OES")
    let cast_from = Obj.magic
  end
module OES_texture_half_float_linear =
  struct
    type t = [ `OES_texture_half_float_linear ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7128 : Ojs.t) -> t_of_js x7128
    and t_0_to_js : t_0 -> Ojs.t = fun (x7127 : t) -> t_to_js x7127
    type tags = [ `OES_texture_half_float_linear ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_texture_half_float_linear ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7131 : Ojs.t) -> intf_of_js __tags_of_js x7131
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7129 : __tags intf) -> intf_to_js __tags_to_js x7129
    let cast_from = Obj.magic
  end
module OES_texture_half_float =
  struct
    type t = [ `OES_texture_half_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7134 : Ojs.t) -> t_of_js x7134
    and t_0_to_js : t_0 -> Ojs.t = fun (x7133 : t) -> t_to_js x7133
    type tags = [ `OES_texture_half_float ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_texture_half_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7137 : Ojs.t) -> intf_of_js __tags_of_js x7137
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7135 : __tags intf) -> intf_to_js __tags_to_js x7135
    let (get_HALF_FLOAT_OES : 'tags this -> GLenum.t) =
      fun (x7139 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7139) "HALF_FLOAT_OES")
    let (create : half_float_oes:GLenum.t -> unit -> t) =
      fun ~half_float_oes:(x7141 : GLenum.t) ->
        fun () ->
          let x7142 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x7142 "HALF_FLOAT_OES" (GLenum.t_to_js x7141);
          t_of_js x7142
    let cast_from = Obj.magic
  end
module OES_texture_float_linear =
  struct
    type t = [ `OES_texture_float_linear ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7144 : Ojs.t) -> t_of_js x7144
    and t_0_to_js : t_0 -> Ojs.t = fun (x7143 : t) -> t_to_js x7143
    type tags = [ `OES_texture_float_linear ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_texture_float_linear ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7147 : Ojs.t) -> intf_of_js __tags_of_js x7147
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7145 : __tags intf) -> intf_to_js __tags_to_js x7145
    let cast_from = Obj.magic
  end
module OES_texture_float =
  struct
    type t = [ `OES_texture_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7150 : Ojs.t) -> t_of_js x7150
    and t_0_to_js : t_0 -> Ojs.t = fun (x7149 : t) -> t_to_js x7149
    type tags = [ `OES_texture_float ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `OES_texture_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7153 : Ojs.t) -> intf_of_js __tags_of_js x7153
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7151 : __tags intf) -> intf_to_js __tags_to_js x7151
    let cast_from = Obj.magic
  end
module OES_standard_derivatives =
  struct
    type t = [ `OES_standard_derivatives ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7156 : Ojs.t) -> t_of_js x7156
    and t_0_to_js : t_0 -> Ojs.t = fun (x7155 : t) -> t_to_js x7155
    type tags = [ `OES_standard_derivatives ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_standard_derivatives ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7159 : Ojs.t) -> intf_of_js __tags_of_js x7159
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7157 : __tags intf) -> intf_to_js __tags_to_js x7157
    let (get_FRAGMENT_SHADER_DERIVATIVE_HINT_OES : 'tags this -> GLenum.t) =
      fun (x7161 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7161)
             "FRAGMENT_SHADER_DERIVATIVE_HINT_OES")
    let (create : fragment_shader_derivative_hint_oes:GLenum.t -> unit -> t)
      =
      fun ~fragment_shader_derivative_hint_oes:(x7163 : GLenum.t) ->
        fun () ->
          let x7164 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x7164 "FRAGMENT_SHADER_DERIVATIVE_HINT_OES"
            (GLenum.t_to_js x7163);
          t_of_js x7164
    let cast_from = Obj.magic
  end
module OES_element_index_uint =
  struct
    type t = [ `OES_element_index_uint ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7166 : Ojs.t) -> t_of_js x7166
    and t_0_to_js : t_0 -> Ojs.t = fun (x7165 : t) -> t_to_js x7165
    type tags = [ `OES_element_index_uint ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_element_index_uint ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7169 : Ojs.t) -> intf_of_js __tags_of_js x7169
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7167 : __tags intf) -> intf_to_js __tags_to_js x7167
    let cast_from = Obj.magic
  end
module KHR_parallel_shader_compile =
  struct
    type t = [ `KHR_parallel_shader_compile ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7172 : Ojs.t) -> t_of_js x7172
    and t_0_to_js : t_0 -> Ojs.t = fun (x7171 : t) -> t_to_js x7171
    type tags = [ `KHR_parallel_shader_compile ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `KHR_parallel_shader_compile ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7175 : Ojs.t) -> intf_of_js __tags_of_js x7175
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7173 : __tags intf) -> intf_to_js __tags_to_js x7173
    let (get_COMPLETION_STATUS_KHR : 'tags this -> GLenum.t) =
      fun (x7177 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7177)
             "COMPLETION_STATUS_KHR")
    let (create : completion_status_khr:GLenum.t -> unit -> t) =
      fun ~completion_status_khr:(x7179 : GLenum.t) ->
        fun () ->
          let x7180 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x7180 "COMPLETION_STATUS_KHR"
            (GLenum.t_to_js x7179);
          t_of_js x7180
    let cast_from = Obj.magic
  end
module GLclampf =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x7182 : Ojs.t) -> Ojs.float_of_js x7182
    and t_to_js : t -> Ojs.t = fun (x7181 : float) -> Ojs.float_to_js x7181
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7184 : Ojs.t) -> t_of_js x7184
    and t_0_to_js : t_0 -> Ojs.t = fun (x7183 : t) -> t_to_js x7183
  end
module GLbitfield =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x7186 : Ojs.t) -> Ojs.float_of_js x7186
    and t_to_js : t -> Ojs.t = fun (x7185 : float) -> Ojs.float_to_js x7185
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7188 : Ojs.t) -> t_of_js x7188
    and t_0_to_js : t_0 -> Ojs.t = fun (x7187 : t) -> t_to_js x7187
  end
module EXT_texture_filter_anisotropic =
  struct
    type t = [ `EXT_texture_filter_anisotropic ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7190 : Ojs.t) -> t_of_js x7190
    and t_0_to_js : t_0 -> Ojs.t = fun (x7189 : t) -> t_to_js x7189
    type tags = [ `EXT_texture_filter_anisotropic ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_texture_filter_anisotropic ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7193 : Ojs.t) -> intf_of_js __tags_of_js x7193
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7191 : __tags intf) -> intf_to_js __tags_to_js x7191
    let (get_MAX_TEXTURE_MAX_ANISOTROPY_EXT : 'tags this -> GLenum.t) =
      fun (x7195 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7195)
             "MAX_TEXTURE_MAX_ANISOTROPY_EXT")
    let (get_TEXTURE_MAX_ANISOTROPY_EXT : 'tags this -> GLenum.t) =
      fun (x7197 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7197)
             "TEXTURE_MAX_ANISOTROPY_EXT")
    let (create :
      max_texture_max_anisotropy_ext:GLenum.t ->
        texture_max_anisotropy_ext:GLenum.t -> unit -> t)
      =
      fun ~max_texture_max_anisotropy_ext:(x7199 : GLenum.t) ->
        fun ~texture_max_anisotropy_ext:(x7200 : GLenum.t) ->
          fun () ->
            let x7201 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x7201 "MAX_TEXTURE_MAX_ANISOTROPY_EXT"
              (GLenum.t_to_js x7199);
            Ojs.set_prop_ascii x7201 "TEXTURE_MAX_ANISOTROPY_EXT"
              (GLenum.t_to_js x7200);
            t_of_js x7201
    let cast_from = Obj.magic
  end
module EXT_shader_texture_lod =
  struct
    type t = [ `EXT_shader_texture_lod ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7203 : Ojs.t) -> t_of_js x7203
    and t_0_to_js : t_0 -> Ojs.t = fun (x7202 : t) -> t_to_js x7202
    type tags = [ `EXT_shader_texture_lod ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_shader_texture_lod ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7206 : Ojs.t) -> intf_of_js __tags_of_js x7206
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7204 : __tags intf) -> intf_to_js __tags_to_js x7204
    let cast_from = Obj.magic
  end
module EXT_sRGB =
  struct
    type t = [ `EXT_sRGB ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7209 : Ojs.t) -> t_of_js x7209
    and t_0_to_js : t_0 -> Ojs.t = fun (x7208 : t) -> t_to_js x7208
    type tags = [ `EXT_sRGB ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EXT_sRGB ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7212 : Ojs.t) -> intf_of_js __tags_of_js x7212
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7210 : __tags intf) -> intf_to_js __tags_to_js x7210
    let (get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT :
      'tags this -> GLenum.t) =
      fun (x7214 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7214)
             "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT")
    let (get_SRGB8_ALPHA8_EXT : 'tags this -> GLenum.t) =
      fun (x7216 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7216) "SRGB8_ALPHA8_EXT")
    let (get_SRGB_ALPHA_EXT : 'tags this -> GLenum.t) =
      fun (x7218 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7218) "SRGB_ALPHA_EXT")
    let (get_SRGB_EXT : 'tags this -> GLenum.t) =
      fun (x7220 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7220) "SRGB_EXT")
    let (create :
      framebuffer_attachment_color_encoding_ext:GLenum.t ->
        srgb8_alpha8_ext:GLenum.t ->
          srgb_alpha_ext:GLenum.t -> srgb_ext:GLenum.t -> unit -> t)
      =
      fun ~framebuffer_attachment_color_encoding_ext:(x7222 : GLenum.t) ->
        fun ~srgb8_alpha8_ext:(x7223 : GLenum.t) ->
          fun ~srgb_alpha_ext:(x7224 : GLenum.t) ->
            fun ~srgb_ext:(x7225 : GLenum.t) ->
              fun () ->
                let x7226 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x7226
                  "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT"
                  (GLenum.t_to_js x7222);
                Ojs.set_prop_ascii x7226 "SRGB8_ALPHA8_EXT"
                  (GLenum.t_to_js x7223);
                Ojs.set_prop_ascii x7226 "SRGB_ALPHA_EXT"
                  (GLenum.t_to_js x7224);
                Ojs.set_prop_ascii x7226 "SRGB_EXT" (GLenum.t_to_js x7225);
                t_of_js x7226
    let cast_from = Obj.magic
  end
module EXT_frag_depth =
  struct
    type t = [ `EXT_frag_depth ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7228 : Ojs.t) -> t_of_js x7228
    and t_0_to_js : t_0 -> Ojs.t = fun (x7227 : t) -> t_to_js x7227
    type tags = [ `EXT_frag_depth ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EXT_frag_depth ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7231 : Ojs.t) -> intf_of_js __tags_of_js x7231
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7229 : __tags intf) -> intf_to_js __tags_to_js x7229
    let cast_from = Obj.magic
  end
module EXT_float_blend =
  struct
    type t = [ `EXT_float_blend ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7234 : Ojs.t) -> t_of_js x7234
    and t_0_to_js : t_0 -> Ojs.t = fun (x7233 : t) -> t_to_js x7233
    type tags = [ `EXT_float_blend ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EXT_float_blend ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7237 : Ojs.t) -> intf_of_js __tags_of_js x7237
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7235 : __tags intf) -> intf_to_js __tags_to_js x7235
    let cast_from = Obj.magic
  end
module EXT_color_buffer_half_float =
  struct
    type t = [ `EXT_color_buffer_half_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7240 : Ojs.t) -> t_of_js x7240
    and t_0_to_js : t_0 -> Ojs.t = fun (x7239 : t) -> t_to_js x7239
    type tags = [ `EXT_color_buffer_half_float ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_color_buffer_half_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7243 : Ojs.t) -> intf_of_js __tags_of_js x7243
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7241 : __tags intf) -> intf_to_js __tags_to_js x7241
    let (get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT :
      'tags this -> GLenum.t) =
      fun (x7245 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7245)
             "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT")
    let (get_RGB16F_EXT : 'tags this -> GLenum.t) =
      fun (x7247 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7247) "RGB16F_EXT")
    let (get_RGBA16F_EXT : 'tags this -> GLenum.t) =
      fun (x7249 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7249) "RGBA16F_EXT")
    let (get_UNSIGNED_NORMALIZED_EXT : 'tags this -> GLenum.t) =
      fun (x7251 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7251)
             "UNSIGNED_NORMALIZED_EXT")
    let (create :
      framebuffer_attachment_component_type_ext:GLenum.t ->
        rgb16f_ext:GLenum.t ->
          rgba16f_ext:GLenum.t ->
            unsigned_normalized_ext:GLenum.t -> unit -> t)
      =
      fun ~framebuffer_attachment_component_type_ext:(x7253 : GLenum.t) ->
        fun ~rgb16f_ext:(x7254 : GLenum.t) ->
          fun ~rgba16f_ext:(x7255 : GLenum.t) ->
            fun ~unsigned_normalized_ext:(x7256 : GLenum.t) ->
              fun () ->
                let x7257 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x7257
                  "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT"
                  (GLenum.t_to_js x7253);
                Ojs.set_prop_ascii x7257 "RGB16F_EXT" (GLenum.t_to_js x7254);
                Ojs.set_prop_ascii x7257 "RGBA16F_EXT" (GLenum.t_to_js x7255);
                Ojs.set_prop_ascii x7257 "UNSIGNED_NORMALIZED_EXT"
                  (GLenum.t_to_js x7256);
                t_of_js x7257
    let cast_from = Obj.magic
  end
module EXT_color_buffer_float =
  struct
    type t = [ `EXT_color_buffer_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7259 : Ojs.t) -> t_of_js x7259
    and t_0_to_js : t_0 -> Ojs.t = fun (x7258 : t) -> t_to_js x7258
    type tags = [ `EXT_color_buffer_float ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_color_buffer_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7262 : Ojs.t) -> intf_of_js __tags_of_js x7262
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7260 : __tags intf) -> intf_to_js __tags_to_js x7260
    let cast_from = Obj.magic
  end
module EXT_blend_minmax =
  struct
    type t = [ `EXT_blend_minmax ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7265 : Ojs.t) -> t_of_js x7265
    and t_0_to_js : t_0 -> Ojs.t = fun (x7264 : t) -> t_to_js x7264
    type tags = [ `EXT_blend_minmax ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EXT_blend_minmax ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7268 : Ojs.t) -> intf_of_js __tags_of_js x7268
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7266 : __tags intf) -> intf_to_js __tags_to_js x7266
    let (get_MAX_EXT : 'tags this -> GLenum.t) =
      fun (x7270 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7270) "MAX_EXT")
    let (get_MIN_EXT : 'tags this -> GLenum.t) =
      fun (x7272 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7272) "MIN_EXT")
    let (create : max_ext:GLenum.t -> min_ext:GLenum.t -> unit -> t) =
      fun ~max_ext:(x7274 : GLenum.t) ->
        fun ~min_ext:(x7275 : GLenum.t) ->
          fun () ->
            let x7276 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x7276 "MAX_EXT" (GLenum.t_to_js x7274);
            Ojs.set_prop_ascii x7276 "MIN_EXT" (GLenum.t_to_js x7275);
            t_of_js x7276
    let cast_from = Obj.magic
  end
module GLuint =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x7278 : Ojs.t) -> Ojs.float_of_js x7278
    and t_to_js : t -> Ojs.t = fun (x7277 : float) -> Ojs.float_to_js x7277
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7280 : Ojs.t) -> t_of_js x7280
    and t_0_to_js : t_0 -> Ojs.t = fun (x7279 : t) -> t_to_js x7279
  end
module ANGLE_instanced_arrays =
  struct
    type t = [ `ANGLE_instanced_arrays ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7282 : Ojs.t) -> t_of_js x7282
    and t_0_to_js : t_0 -> Ojs.t = fun (x7281 : t) -> t_to_js x7281
    type tags = [ `ANGLE_instanced_arrays ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ANGLE_instanced_arrays ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7285 : Ojs.t) -> intf_of_js __tags_of_js x7285
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7283 : __tags intf) -> intf_to_js __tags_to_js x7283
    let (drawArraysInstancedANGLE :
      'tags this ->
        mode:GLenum.t ->
          first:GLint.t -> count:GLsizei.t -> primcount:GLsizei.t -> unit)
      =
      fun (x7291 : 'tags this) ->
        fun ~mode:(x7287 : GLenum.t) ->
          fun ~first:(x7288 : GLint.t) ->
            fun ~count:(x7289 : GLsizei.t) ->
              fun ~primcount:(x7290 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7291)
                     "drawArraysInstancedANGLE"
                     [|(GLenum.t_to_js x7287);(GLint.t_to_js x7288);(
                       GLsizei.t_to_js x7289);(GLsizei.t_to_js x7290)|])
    let (drawElementsInstancedANGLE :
      'tags this ->
        mode:GLenum.t ->
          count:GLsizei.t ->
            type_:GLenum.t ->
              offset:GLintptr.t -> primcount:GLsizei.t -> unit)
      =
      fun (x7298 : 'tags this) ->
        fun ~mode:(x7293 : GLenum.t) ->
          fun ~count:(x7294 : GLsizei.t) ->
            fun ~type_:(x7295 : GLenum.t) ->
              fun ~offset:(x7296 : GLintptr.t) ->
                fun ~primcount:(x7297 : GLsizei.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x7298)
                       "drawElementsInstancedANGLE"
                       [|(GLenum.t_to_js x7293);(GLsizei.t_to_js x7294);(
                         GLenum.t_to_js x7295);(GLintptr.t_to_js x7296);(
                         GLsizei.t_to_js x7297)|])
    let (vertexAttribDivisorANGLE :
      'tags this -> index:GLuint.t -> divisor:GLuint.t -> unit) =
      fun (x7302 : 'tags this) ->
        fun ~index:(x7300 : GLuint.t) ->
          fun ~divisor:(x7301 : GLuint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7302)
                 "vertexAttribDivisorANGLE"
                 [|(GLuint.t_to_js x7300);(GLuint.t_to_js x7301)|])
    let (get_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE : 'tags this -> GLenum.t) =
      fun (x7304 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7304)
             "VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE")
    let cast_from = Obj.magic
  end
module WebGLRenderingContextBase =
  struct
    type t = [ `WebGLRenderingContextBase ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7307 : Ojs.t) -> t_of_js x7307
    and t_0_to_js : t_0 -> Ojs.t = fun (x7306 : t) -> t_to_js x7306
    type tags = [ `WebGLRenderingContextBase ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLRenderingContextBase ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7310 : Ojs.t) -> intf_of_js __tags_of_js x7310
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7308 : __tags intf) -> intf_to_js __tags_to_js x7308
    let (get_drawingBufferHeight : 'tags this -> GLsizei.t) =
      fun (x7312 : 'tags this) ->
        GLsizei.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7312)
             "drawingBufferHeight")
    let (get_drawingBufferWidth : 'tags this -> GLsizei.t) =
      fun (x7314 : 'tags this) ->
        GLsizei.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7314)
             "drawingBufferWidth")
    let (activeTexture : 'tags this -> texture:GLenum.t -> unit) =
      fun (x7317 : 'tags this) ->
        fun ~texture:(x7316 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7317) "activeTexture"
               [|(GLenum.t_to_js x7316)|])
    let (attachShader :
      'tags this -> program:WebGLProgram.t -> shader:WebGLShader.t -> unit) =
      fun (x7321 : 'tags this) ->
        fun ~program:(x7319 : WebGLProgram.t) ->
          fun ~shader:(x7320 : WebGLShader.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7321) "attachShader"
                 [|(WebGLProgram.t_to_js x7319);(WebGLShader.t_to_js x7320)|])
    let (bindAttribLocation :
      'tags this ->
        program:WebGLProgram.t -> index:GLuint.t -> name:string -> unit)
      =
      fun (x7326 : 'tags this) ->
        fun ~program:(x7323 : WebGLProgram.t) ->
          fun ~index:(x7324 : GLuint.t) ->
            fun ~name:(x7325 : string) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7326) "bindAttribLocation"
                   [|(WebGLProgram.t_to_js x7323);(GLuint.t_to_js x7324);(
                     Ojs.string_to_js x7325)|])
    let (bindBuffer :
      'tags this -> target:GLenum.t -> buffer:WebGLBuffer.t option -> unit) =
      fun (x7331 : 'tags this) ->
        fun ~target:(x7328 : GLenum.t) ->
          fun ~buffer:(x7329 : WebGLBuffer.t option) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7331) "bindBuffer"
                 [|(GLenum.t_to_js x7328);(Ojs.option_to_js
                                             WebGLBuffer.t_to_js x7329)|])
    let (bindFramebuffer :
      'tags this ->
        target:GLenum.t -> framebuffer:WebGLFramebuffer.t option -> unit)
      =
      fun (x7336 : 'tags this) ->
        fun ~target:(x7333 : GLenum.t) ->
          fun ~framebuffer:(x7334 : WebGLFramebuffer.t option) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7336) "bindFramebuffer"
                 [|(GLenum.t_to_js x7333);(Ojs.option_to_js
                                             WebGLFramebuffer.t_to_js x7334)|])
    let (bindRenderbuffer :
      'tags this ->
        target:GLenum.t -> renderbuffer:WebGLRenderbuffer.t option -> unit)
      =
      fun (x7341 : 'tags this) ->
        fun ~target:(x7338 : GLenum.t) ->
          fun ~renderbuffer:(x7339 : WebGLRenderbuffer.t option) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7341) "bindRenderbuffer"
                 [|(GLenum.t_to_js x7338);(Ojs.option_to_js
                                             WebGLRenderbuffer.t_to_js x7339)|])
    let (bindTexture :
      'tags this -> target:GLenum.t -> texture:WebGLTexture.t option -> unit)
      =
      fun (x7346 : 'tags this) ->
        fun ~target:(x7343 : GLenum.t) ->
          fun ~texture:(x7344 : WebGLTexture.t option) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7346) "bindTexture"
                 [|(GLenum.t_to_js x7343);(Ojs.option_to_js
                                             WebGLTexture.t_to_js x7344)|])
    let (blendColor :
      'tags this ->
        red:GLclampf.t ->
          green:GLclampf.t -> blue:GLclampf.t -> alpha:GLclampf.t -> unit)
      =
      fun (x7352 : 'tags this) ->
        fun ~red:(x7348 : GLclampf.t) ->
          fun ~green:(x7349 : GLclampf.t) ->
            fun ~blue:(x7350 : GLclampf.t) ->
              fun ~alpha:(x7351 : GLclampf.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7352) "blendColor"
                     [|(GLclampf.t_to_js x7348);(GLclampf.t_to_js x7349);(
                       GLclampf.t_to_js x7350);(GLclampf.t_to_js x7351)|])
    let (blendEquation : 'tags this -> mode:GLenum.t -> unit) =
      fun (x7355 : 'tags this) ->
        fun ~mode:(x7354 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7355) "blendEquation"
               [|(GLenum.t_to_js x7354)|])
    let (blendEquationSeparate :
      'tags this -> modeRGB:GLenum.t -> modeAlpha:GLenum.t -> unit) =
      fun (x7359 : 'tags this) ->
        fun ~modeRGB:(x7357 : GLenum.t) ->
          fun ~modeAlpha:(x7358 : GLenum.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7359) "blendEquationSeparate"
                 [|(GLenum.t_to_js x7357);(GLenum.t_to_js x7358)|])
    let (blendFunc :
      'tags this -> sfactor:GLenum.t -> dfactor:GLenum.t -> unit) =
      fun (x7363 : 'tags this) ->
        fun ~sfactor:(x7361 : GLenum.t) ->
          fun ~dfactor:(x7362 : GLenum.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7363) "blendFunc"
                 [|(GLenum.t_to_js x7361);(GLenum.t_to_js x7362)|])
    let (blendFuncSeparate :
      'tags this ->
        srcRGB:GLenum.t ->
          dstRGB:GLenum.t -> srcAlpha:GLenum.t -> dstAlpha:GLenum.t -> unit)
      =
      fun (x7369 : 'tags this) ->
        fun ~srcRGB:(x7365 : GLenum.t) ->
          fun ~dstRGB:(x7366 : GLenum.t) ->
            fun ~srcAlpha:(x7367 : GLenum.t) ->
              fun ~dstAlpha:(x7368 : GLenum.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7369) "blendFuncSeparate"
                     [|(GLenum.t_to_js x7365);(GLenum.t_to_js x7366);(
                       GLenum.t_to_js x7367);(GLenum.t_to_js x7368)|])
    let (checkFramebufferStatus : 'tags this -> target:GLenum.t -> GLenum.t)
      =
      fun (x7372 : 'tags this) ->
        fun ~target:(x7371 : GLenum.t) ->
          GLenum.t_of_js
            (Ojs.call (this_to_js Obj.magic x7372) "checkFramebufferStatus"
               [|(GLenum.t_to_js x7371)|])
    let (clear : 'tags this -> mask:GLbitfield.t -> unit) =
      fun (x7375 : 'tags this) ->
        fun ~mask:(x7374 : GLbitfield.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7375) "clear"
               [|(GLbitfield.t_to_js x7374)|])
    let (clearColor :
      'tags this ->
        red:GLclampf.t ->
          green:GLclampf.t -> blue:GLclampf.t -> alpha:GLclampf.t -> unit)
      =
      fun (x7381 : 'tags this) ->
        fun ~red:(x7377 : GLclampf.t) ->
          fun ~green:(x7378 : GLclampf.t) ->
            fun ~blue:(x7379 : GLclampf.t) ->
              fun ~alpha:(x7380 : GLclampf.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7381) "clearColor"
                     [|(GLclampf.t_to_js x7377);(GLclampf.t_to_js x7378);(
                       GLclampf.t_to_js x7379);(GLclampf.t_to_js x7380)|])
    let (clearDepth : 'tags this -> depth:GLclampf.t -> unit) =
      fun (x7384 : 'tags this) ->
        fun ~depth:(x7383 : GLclampf.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7384) "clearDepth"
               [|(GLclampf.t_to_js x7383)|])
    let (clearStencil : 'tags this -> s:GLint.t -> unit) =
      fun (x7387 : 'tags this) ->
        fun ~s:(x7386 : GLint.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7387) "clearStencil"
               [|(GLint.t_to_js x7386)|])
    let (colorMask :
      'tags this ->
        red:GLboolean.t ->
          green:GLboolean.t -> blue:GLboolean.t -> alpha:GLboolean.t -> unit)
      =
      fun (x7393 : 'tags this) ->
        fun ~red:(x7389 : GLboolean.t) ->
          fun ~green:(x7390 : GLboolean.t) ->
            fun ~blue:(x7391 : GLboolean.t) ->
              fun ~alpha:(x7392 : GLboolean.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7393) "colorMask"
                     [|(GLboolean.t_to_js x7389);(GLboolean.t_to_js x7390);(
                       GLboolean.t_to_js x7391);(GLboolean.t_to_js x7392)|])
    let (compileShader : 'tags this -> shader:WebGLShader.t -> unit) =
      fun (x7396 : 'tags this) ->
        fun ~shader:(x7395 : WebGLShader.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7396) "compileShader"
               [|(WebGLShader.t_to_js x7395)|])
    let (copyTexImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              x:GLint.t ->
                y:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t -> border:GLint.t -> unit)
      =
      fun (x7406 : 'tags this) ->
        fun ~target:(x7398 : GLenum.t) ->
          fun ~level:(x7399 : GLint.t) ->
            fun ~internalformat:(x7400 : GLenum.t) ->
              fun ~x:(x7401 : GLint.t) ->
                fun ~y:(x7402 : GLint.t) ->
                  fun ~width:(x7403 : GLsizei.t) ->
                    fun ~height:(x7404 : GLsizei.t) ->
                      fun ~border:(x7405 : GLint.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x7406)
                             "copyTexImage2D"
                             [|(GLenum.t_to_js x7398);(GLint.t_to_js x7399);(
                               GLenum.t_to_js x7400);(GLint.t_to_js x7401);(
                               GLint.t_to_js x7402);(GLsizei.t_to_js x7403);(
                               GLsizei.t_to_js x7404);(GLint.t_to_js x7405)|])
    let (copyTexSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                x:GLint.t ->
                  y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x7416 : 'tags this) ->
        fun ~target:(x7408 : GLenum.t) ->
          fun ~level:(x7409 : GLint.t) ->
            fun ~xoffset:(x7410 : GLint.t) ->
              fun ~yoffset:(x7411 : GLint.t) ->
                fun ~x:(x7412 : GLint.t) ->
                  fun ~y:(x7413 : GLint.t) ->
                    fun ~width:(x7414 : GLsizei.t) ->
                      fun ~height:(x7415 : GLsizei.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x7416)
                             "copyTexSubImage2D"
                             [|(GLenum.t_to_js x7408);(GLint.t_to_js x7409);(
                               GLint.t_to_js x7410);(GLint.t_to_js x7411);(
                               GLint.t_to_js x7412);(GLint.t_to_js x7413);(
                               GLsizei.t_to_js x7414);(GLsizei.t_to_js x7415)|])
    let (createBuffer : 'tags this -> WebGLBuffer.t option) =
      fun (x7418 : 'tags this) ->
        Ojs.option_of_js WebGLBuffer.t_of_js
          (Ojs.call (this_to_js Obj.magic x7418) "createBuffer" [||])
    let (createFramebuffer : 'tags this -> WebGLFramebuffer.t option) =
      fun (x7421 : 'tags this) ->
        Ojs.option_of_js WebGLFramebuffer.t_of_js
          (Ojs.call (this_to_js Obj.magic x7421) "createFramebuffer" [||])
    let (createProgram : 'tags this -> WebGLProgram.t option) =
      fun (x7424 : 'tags this) ->
        Ojs.option_of_js WebGLProgram.t_of_js
          (Ojs.call (this_to_js Obj.magic x7424) "createProgram" [||])
    let (createRenderbuffer : 'tags this -> WebGLRenderbuffer.t option) =
      fun (x7427 : 'tags this) ->
        Ojs.option_of_js WebGLRenderbuffer.t_of_js
          (Ojs.call (this_to_js Obj.magic x7427) "createRenderbuffer" [||])
    let (createShader : 'tags this -> type_:GLenum.t -> WebGLShader.t option)
      =
      fun (x7431 : 'tags this) ->
        fun ~type_:(x7430 : GLenum.t) ->
          Ojs.option_of_js WebGLShader.t_of_js
            (Ojs.call (this_to_js Obj.magic x7431) "createShader"
               [|(GLenum.t_to_js x7430)|])
    let (createTexture : 'tags this -> WebGLTexture.t option) =
      fun (x7434 : 'tags this) ->
        Ojs.option_of_js WebGLTexture.t_of_js
          (Ojs.call (this_to_js Obj.magic x7434) "createTexture" [||])
    let (cullFace : 'tags this -> mode:GLenum.t -> unit) =
      fun (x7438 : 'tags this) ->
        fun ~mode:(x7437 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7438) "cullFace"
               [|(GLenum.t_to_js x7437)|])
    let (deleteBuffer : 'tags this -> buffer:WebGLBuffer.t option -> unit) =
      fun (x7442 : 'tags this) ->
        fun ~buffer:(x7440 : WebGLBuffer.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7442) "deleteBuffer"
               [|(Ojs.option_to_js WebGLBuffer.t_to_js x7440)|])
    let (deleteFramebuffer :
      'tags this -> framebuffer:WebGLFramebuffer.t option -> unit) =
      fun (x7446 : 'tags this) ->
        fun ~framebuffer:(x7444 : WebGLFramebuffer.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7446) "deleteFramebuffer"
               [|(Ojs.option_to_js WebGLFramebuffer.t_to_js x7444)|])
    let (deleteProgram : 'tags this -> program:WebGLProgram.t option -> unit)
      =
      fun (x7450 : 'tags this) ->
        fun ~program:(x7448 : WebGLProgram.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7450) "deleteProgram"
               [|(Ojs.option_to_js WebGLProgram.t_to_js x7448)|])
    let (deleteRenderbuffer :
      'tags this -> renderbuffer:WebGLRenderbuffer.t option -> unit) =
      fun (x7454 : 'tags this) ->
        fun ~renderbuffer:(x7452 : WebGLRenderbuffer.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7454) "deleteRenderbuffer"
               [|(Ojs.option_to_js WebGLRenderbuffer.t_to_js x7452)|])
    let (deleteShader : 'tags this -> shader:WebGLShader.t option -> unit) =
      fun (x7458 : 'tags this) ->
        fun ~shader:(x7456 : WebGLShader.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7458) "deleteShader"
               [|(Ojs.option_to_js WebGLShader.t_to_js x7456)|])
    let (deleteTexture : 'tags this -> texture:WebGLTexture.t option -> unit)
      =
      fun (x7462 : 'tags this) ->
        fun ~texture:(x7460 : WebGLTexture.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7462) "deleteTexture"
               [|(Ojs.option_to_js WebGLTexture.t_to_js x7460)|])
    let (depthFunc : 'tags this -> func:GLenum.t -> unit) =
      fun (x7465 : 'tags this) ->
        fun ~func:(x7464 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7465) "depthFunc"
               [|(GLenum.t_to_js x7464)|])
    let (depthMask : 'tags this -> flag:GLboolean.t -> unit) =
      fun (x7468 : 'tags this) ->
        fun ~flag:(x7467 : GLboolean.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7468) "depthMask"
               [|(GLboolean.t_to_js x7467)|])
    let (depthRange :
      'tags this -> zNear:GLclampf.t -> zFar:GLclampf.t -> unit) =
      fun (x7472 : 'tags this) ->
        fun ~zNear:(x7470 : GLclampf.t) ->
          fun ~zFar:(x7471 : GLclampf.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7472) "depthRange"
                 [|(GLclampf.t_to_js x7470);(GLclampf.t_to_js x7471)|])
    let (detachShader :
      'tags this -> program:WebGLProgram.t -> shader:WebGLShader.t -> unit) =
      fun (x7476 : 'tags this) ->
        fun ~program:(x7474 : WebGLProgram.t) ->
          fun ~shader:(x7475 : WebGLShader.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7476) "detachShader"
                 [|(WebGLProgram.t_to_js x7474);(WebGLShader.t_to_js x7475)|])
    let (disable : 'tags this -> cap:GLenum.t -> unit) =
      fun (x7479 : 'tags this) ->
        fun ~cap:(x7478 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7479) "disable"
               [|(GLenum.t_to_js x7478)|])
    let (disableVertexAttribArray : 'tags this -> index:GLuint.t -> unit) =
      fun (x7482 : 'tags this) ->
        fun ~index:(x7481 : GLuint.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7482) "disableVertexAttribArray"
               [|(GLuint.t_to_js x7481)|])
    let (drawArrays :
      'tags this -> mode:GLenum.t -> first:GLint.t -> count:GLsizei.t -> unit)
      =
      fun (x7487 : 'tags this) ->
        fun ~mode:(x7484 : GLenum.t) ->
          fun ~first:(x7485 : GLint.t) ->
            fun ~count:(x7486 : GLsizei.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7487) "drawArrays"
                   [|(GLenum.t_to_js x7484);(GLint.t_to_js x7485);(GLsizei.t_to_js
                                                                    x7486)|])
    let (drawElements :
      'tags this ->
        mode:GLenum.t ->
          count:GLsizei.t -> type_:GLenum.t -> offset:GLintptr.t -> unit)
      =
      fun (x7493 : 'tags this) ->
        fun ~mode:(x7489 : GLenum.t) ->
          fun ~count:(x7490 : GLsizei.t) ->
            fun ~type_:(x7491 : GLenum.t) ->
              fun ~offset:(x7492 : GLintptr.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7493) "drawElements"
                     [|(GLenum.t_to_js x7489);(GLsizei.t_to_js x7490);(
                       GLenum.t_to_js x7491);(GLintptr.t_to_js x7492)|])
    let (enable : 'tags this -> cap:GLenum.t -> unit) =
      fun (x7496 : 'tags this) ->
        fun ~cap:(x7495 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7496) "enable"
               [|(GLenum.t_to_js x7495)|])
    let (enableVertexAttribArray : 'tags this -> index:GLuint.t -> unit) =
      fun (x7499 : 'tags this) ->
        fun ~index:(x7498 : GLuint.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7499) "enableVertexAttribArray"
               [|(GLuint.t_to_js x7498)|])
    let (finish : 'tags this -> unit) =
      fun (x7501 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x7501) "finish" [||])
    let (flush : 'tags this -> unit) =
      fun (x7503 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x7503) "flush" [||])
    let (framebufferRenderbuffer :
      'tags this ->
        target:GLenum.t ->
          attachment:GLenum.t ->
            renderbuffertarget:GLenum.t ->
              renderbuffer:WebGLRenderbuffer.t option -> unit)
      =
      fun (x7510 : 'tags this) ->
        fun ~target:(x7505 : GLenum.t) ->
          fun ~attachment:(x7506 : GLenum.t) ->
            fun ~renderbuffertarget:(x7507 : GLenum.t) ->
              fun ~renderbuffer:(x7508 : WebGLRenderbuffer.t option) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7510)
                     "framebufferRenderbuffer"
                     [|(GLenum.t_to_js x7505);(GLenum.t_to_js x7506);(
                       GLenum.t_to_js x7507);(Ojs.option_to_js
                                                WebGLRenderbuffer.t_to_js
                                                x7508)|])
    let (framebufferTexture2D :
      'tags this ->
        target:GLenum.t ->
          attachment:GLenum.t ->
            textarget:GLenum.t ->
              texture:WebGLTexture.t option -> level:GLint.t -> unit)
      =
      fun (x7518 : 'tags this) ->
        fun ~target:(x7512 : GLenum.t) ->
          fun ~attachment:(x7513 : GLenum.t) ->
            fun ~textarget:(x7514 : GLenum.t) ->
              fun ~texture:(x7515 : WebGLTexture.t option) ->
                fun ~level:(x7517 : GLint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x7518)
                       "framebufferTexture2D"
                       [|(GLenum.t_to_js x7512);(GLenum.t_to_js x7513);(
                         GLenum.t_to_js x7514);(Ojs.option_to_js
                                                  WebGLTexture.t_to_js x7515);(
                         GLint.t_to_js x7517)|])
    let (frontFace : 'tags this -> mode:GLenum.t -> unit) =
      fun (x7521 : 'tags this) ->
        fun ~mode:(x7520 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7521) "frontFace"
               [|(GLenum.t_to_js x7520)|])
    let (generateMipmap : 'tags this -> target:GLenum.t -> unit) =
      fun (x7524 : 'tags this) ->
        fun ~target:(x7523 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7524) "generateMipmap"
               [|(GLenum.t_to_js x7523)|])
    let (getActiveAttrib :
      'tags this ->
        program:WebGLProgram.t -> index:GLuint.t -> WebGLActiveInfo.t option)
      =
      fun (x7528 : 'tags this) ->
        fun ~program:(x7526 : WebGLProgram.t) ->
          fun ~index:(x7527 : GLuint.t) ->
            Ojs.option_of_js WebGLActiveInfo.t_of_js
              (Ojs.call (this_to_js Obj.magic x7528) "getActiveAttrib"
                 [|(WebGLProgram.t_to_js x7526);(GLuint.t_to_js x7527)|])
    let (getActiveUniform :
      'tags this ->
        program:WebGLProgram.t -> index:GLuint.t -> WebGLActiveInfo.t option)
      =
      fun (x7533 : 'tags this) ->
        fun ~program:(x7531 : WebGLProgram.t) ->
          fun ~index:(x7532 : GLuint.t) ->
            Ojs.option_of_js WebGLActiveInfo.t_of_js
              (Ojs.call (this_to_js Obj.magic x7533) "getActiveUniform"
                 [|(WebGLProgram.t_to_js x7531);(GLuint.t_to_js x7532)|])
    let (getAttachedShaders :
      'tags this -> program:WebGLProgram.t -> WebGLShader.t list option) =
      fun (x7537 : 'tags this) ->
        fun ~program:(x7536 : WebGLProgram.t) ->
          Ojs.option_of_js
            (fun (x7539 : Ojs.t) -> Ojs.list_of_js WebGLShader.t_of_js x7539)
            (Ojs.call (this_to_js Obj.magic x7537) "getAttachedShaders"
               [|(WebGLProgram.t_to_js x7536)|])
    let (getAttribLocation :
      'tags this -> program:WebGLProgram.t -> name:string -> GLint.t) =
      fun (x7543 : 'tags this) ->
        fun ~program:(x7541 : WebGLProgram.t) ->
          fun ~name:(x7542 : string) ->
            GLint.t_of_js
              (Ojs.call (this_to_js Obj.magic x7543) "getAttribLocation"
                 [|(WebGLProgram.t_to_js x7541);(Ojs.string_to_js x7542)|])
    let (getBufferParameter :
      'tags this -> target:GLenum.t -> pname:GLenum.t -> any) =
      fun (x7547 : 'tags this) ->
        fun ~target:(x7545 : GLenum.t) ->
          fun ~pname:(x7546 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x7547) "getBufferParameter"
                 [|(GLenum.t_to_js x7545);(GLenum.t_to_js x7546)|])
    let (getContextAttributes :
      'tags this -> WebGLContextAttributes.t option) =
      fun (x7549 : 'tags this) ->
        Ojs.option_of_js WebGLContextAttributes.t_of_js
          (Ojs.call (this_to_js Obj.magic x7549) "getContextAttributes" [||])
    let (getError : 'tags this -> GLenum.t) =
      fun (x7552 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.call (this_to_js Obj.magic x7552) "getError" [||])
    let (getExtension :
      'tags this ->
        extensionName:[ `L_s2_EXT_blend_minmax ] -> EXT_blend_minmax.t option)
      =
      fun (x7555 : 'tags this) ->
        fun ~extensionName:(x7554 : [ `L_s2_EXT_blend_minmax ]) ->
          Ojs.option_of_js EXT_blend_minmax.t_of_js
            (Ojs.call (this_to_js Obj.magic x7555) "getExtension"
               [|((match x7554 with
                   | `L_s2_EXT_blend_minmax ->
                       Ojs.string_to_js "EXT_blend_minmax"))|])
    let (getExtension' :
      'tags this ->
        extensionName:[ `L_s3_EXT_color_buffer_float ] ->
          EXT_color_buffer_float.t option)
      =
      fun (x7559 : 'tags this) ->
        fun ~extensionName:(x7558 : [ `L_s3_EXT_color_buffer_float ]) ->
          Ojs.option_of_js EXT_color_buffer_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x7559) "getExtension"
               [|((match x7558 with
                   | `L_s3_EXT_color_buffer_float ->
                       Ojs.string_to_js "EXT_color_buffer_float"))|])
    let (getExtension'' :
      'tags this ->
        extensionName:[ `L_s4_EXT_color_buffer_half_float ] ->
          EXT_color_buffer_half_float.t option)
      =
      fun (x7563 : 'tags this) ->
        fun ~extensionName:(x7562 : [ `L_s4_EXT_color_buffer_half_float ]) ->
          Ojs.option_of_js EXT_color_buffer_half_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x7563) "getExtension"
               [|((match x7562 with
                   | `L_s4_EXT_color_buffer_half_float ->
                       Ojs.string_to_js "EXT_color_buffer_half_float"))|])
    let (getExtension''' :
      'tags this ->
        extensionName:[ `L_s5_EXT_float_blend ] -> EXT_float_blend.t option)
      =
      fun (x7567 : 'tags this) ->
        fun ~extensionName:(x7566 : [ `L_s5_EXT_float_blend ]) ->
          Ojs.option_of_js EXT_float_blend.t_of_js
            (Ojs.call (this_to_js Obj.magic x7567) "getExtension"
               [|((match x7566 with
                   | `L_s5_EXT_float_blend ->
                       Ojs.string_to_js "EXT_float_blend"))|])
    let (getExtension'''' :
      'tags this ->
        extensionName:[ `L_s9_EXT_texture_filter_anisotropic ] ->
          EXT_texture_filter_anisotropic.t option)
      =
      fun (x7571 : 'tags this) ->
        fun ~extensionName:(x7570 : [ `L_s9_EXT_texture_filter_anisotropic ])
          ->
          Ojs.option_of_js EXT_texture_filter_anisotropic.t_of_js
            (Ojs.call (this_to_js Obj.magic x7571) "getExtension"
               [|((match x7570 with
                   | `L_s9_EXT_texture_filter_anisotropic ->
                       Ojs.string_to_js "EXT_texture_filter_anisotropic"))|])
    let (getExtension''''' :
      'tags this ->
        extensionName:[ `L_s6_EXT_frag_depth ] -> EXT_frag_depth.t option)
      =
      fun (x7575 : 'tags this) ->
        fun ~extensionName:(x7574 : [ `L_s6_EXT_frag_depth ]) ->
          Ojs.option_of_js EXT_frag_depth.t_of_js
            (Ojs.call (this_to_js Obj.magic x7575) "getExtension"
               [|((match x7574 with
                   | `L_s6_EXT_frag_depth ->
                       Ojs.string_to_js "EXT_frag_depth"))|])
    let (getExtension'''''' :
      'tags this ->
        extensionName:[ `L_s8_EXT_shader_texture_lod ] ->
          EXT_shader_texture_lod.t option)
      =
      fun (x7579 : 'tags this) ->
        fun ~extensionName:(x7578 : [ `L_s8_EXT_shader_texture_lod ]) ->
          Ojs.option_of_js EXT_shader_texture_lod.t_of_js
            (Ojs.call (this_to_js Obj.magic x7579) "getExtension"
               [|((match x7578 with
                   | `L_s8_EXT_shader_texture_lod ->
                       Ojs.string_to_js "EXT_shader_texture_lod"))|])
    let (getExtension''''''' :
      'tags this -> extensionName:[ `L_s7_EXT_sRGB ] -> EXT_sRGB.t option) =
      fun (x7583 : 'tags this) ->
        fun ~extensionName:(x7582 : [ `L_s7_EXT_sRGB ]) ->
          Ojs.option_of_js EXT_sRGB.t_of_js
            (Ojs.call (this_to_js Obj.magic x7583) "getExtension"
               [|((match x7582 with
                   | `L_s7_EXT_sRGB -> Ojs.string_to_js "EXT_sRGB"))|])
    let (getExtension'''''''' :
      'tags this ->
        extensionName:[ `L_s10_KHR_parallel_shader_compile ] ->
          KHR_parallel_shader_compile.t option)
      =
      fun (x7587 : 'tags this) ->
        fun ~extensionName:(x7586 : [ `L_s10_KHR_parallel_shader_compile ])
          ->
          Ojs.option_of_js KHR_parallel_shader_compile.t_of_js
            (Ojs.call (this_to_js Obj.magic x7587) "getExtension"
               [|((match x7586 with
                   | `L_s10_KHR_parallel_shader_compile ->
                       Ojs.string_to_js "KHR_parallel_shader_compile"))|])
    let (getExtension''''''''' :
      'tags this ->
        extensionName:[ `L_s17_OES_vertex_array_object ] ->
          OES_vertex_array_object.t option)
      =
      fun (x7591 : 'tags this) ->
        fun ~extensionName:(x7590 : [ `L_s17_OES_vertex_array_object ]) ->
          Ojs.option_of_js OES_vertex_array_object.t_of_js
            (Ojs.call (this_to_js Obj.magic x7591) "getExtension"
               [|((match x7590 with
                   | `L_s17_OES_vertex_array_object ->
                       Ojs.string_to_js "OES_vertex_array_object"))|])
    let (getExtension'''''''''' :
      'tags this ->
        extensionName:[ `L_s18_OVR_multiview2 ] -> OVR_multiview2.t option)
      =
      fun (x7595 : 'tags this) ->
        fun ~extensionName:(x7594 : [ `L_s18_OVR_multiview2 ]) ->
          Ojs.option_of_js OVR_multiview2.t_of_js
            (Ojs.call (this_to_js Obj.magic x7595) "getExtension"
               [|((match x7594 with
                   | `L_s18_OVR_multiview2 ->
                       Ojs.string_to_js "OVR_multiview2"))|])
    let (getExtension''''''''''' :
      'tags this ->
        extensionName:[ `L_s19_WEBGL_color_buffer_float ] ->
          WEBGL_color_buffer_float.t option)
      =
      fun (x7599 : 'tags this) ->
        fun ~extensionName:(x7598 : [ `L_s19_WEBGL_color_buffer_float ]) ->
          Ojs.option_of_js WEBGL_color_buffer_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x7599) "getExtension"
               [|((match x7598 with
                   | `L_s19_WEBGL_color_buffer_float ->
                       Ojs.string_to_js "WEBGL_color_buffer_float"))|])
    let (getExtension'''''''''''' :
      'tags this ->
        extensionName:[ `L_s20_WEBGL_compressed_texture_astc ] ->
          WEBGL_compressed_texture_astc.t option)
      =
      fun (x7603 : 'tags this) ->
        fun ~extensionName:(x7602 : [ `L_s20_WEBGL_compressed_texture_astc ])
          ->
          Ojs.option_of_js WEBGL_compressed_texture_astc.t_of_js
            (Ojs.call (this_to_js Obj.magic x7603) "getExtension"
               [|((match x7602 with
                   | `L_s20_WEBGL_compressed_texture_astc ->
                       Ojs.string_to_js "WEBGL_compressed_texture_astc"))|])
    let (getExtension''''''''''''' :
      'tags this ->
        extensionName:[ `L_s21_WEBGL_compressed_texture_etc ] ->
          WEBGL_compressed_texture_etc.t option)
      =
      fun (x7607 : 'tags this) ->
        fun ~extensionName:(x7606 : [ `L_s21_WEBGL_compressed_texture_etc ])
          ->
          Ojs.option_of_js WEBGL_compressed_texture_etc.t_of_js
            (Ojs.call (this_to_js Obj.magic x7607) "getExtension"
               [|((match x7606 with
                   | `L_s21_WEBGL_compressed_texture_etc ->
                       Ojs.string_to_js "WEBGL_compressed_texture_etc"))|])
    let (getExtension'''''''''''''' :
      'tags this ->
        extensionName:[ `L_s22_WEBGL_compressed_texture_etc1 ] ->
          WEBGL_compressed_texture_etc1.t option)
      =
      fun (x7611 : 'tags this) ->
        fun ~extensionName:(x7610 : [ `L_s22_WEBGL_compressed_texture_etc1 ])
          ->
          Ojs.option_of_js WEBGL_compressed_texture_etc1.t_of_js
            (Ojs.call (this_to_js Obj.magic x7611) "getExtension"
               [|((match x7610 with
                   | `L_s22_WEBGL_compressed_texture_etc1 ->
                       Ojs.string_to_js "WEBGL_compressed_texture_etc1"))|])
    let (getExtension''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s23_WEBGL_compressed_texture_pvrtc ] ->
          WEBGL_compressed_texture_pvrtc.t option)
      =
      fun (x7615 : 'tags this) ->
        fun
          ~extensionName:(x7614 : [ `L_s23_WEBGL_compressed_texture_pvrtc ])
          ->
          Ojs.option_of_js WEBGL_compressed_texture_pvrtc.t_of_js
            (Ojs.call (this_to_js Obj.magic x7615) "getExtension"
               [|((match x7614 with
                   | `L_s23_WEBGL_compressed_texture_pvrtc ->
                       Ojs.string_to_js "WEBGL_compressed_texture_pvrtc"))|])
    let (getExtension'''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s25_WEBGL_compressed_texture_s3tc_srgb ] ->
          WEBGL_compressed_texture_s3tc_srgb.t option)
      =
      fun (x7619 : 'tags this) ->
        fun
          ~extensionName:(x7618 :
                           [ `L_s25_WEBGL_compressed_texture_s3tc_srgb ])
          ->
          Ojs.option_of_js WEBGL_compressed_texture_s3tc_srgb.t_of_js
            (Ojs.call (this_to_js Obj.magic x7619) "getExtension"
               [|((match x7618 with
                   | `L_s25_WEBGL_compressed_texture_s3tc_srgb ->
                       Ojs.string_to_js "WEBGL_compressed_texture_s3tc_srgb"))|])
    let (getExtension''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s27_WEBGL_debug_shaders ] ->
          WEBGL_debug_shaders.t option)
      =
      fun (x7623 : 'tags this) ->
        fun ~extensionName:(x7622 : [ `L_s27_WEBGL_debug_shaders ]) ->
          Ojs.option_of_js WEBGL_debug_shaders.t_of_js
            (Ojs.call (this_to_js Obj.magic x7623) "getExtension"
               [|((match x7622 with
                   | `L_s27_WEBGL_debug_shaders ->
                       Ojs.string_to_js "WEBGL_debug_shaders"))|])
    let (getExtension'''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s29_WEBGL_draw_buffers ] ->
          WEBGL_draw_buffers.t option)
      =
      fun (x7627 : 'tags this) ->
        fun ~extensionName:(x7626 : [ `L_s29_WEBGL_draw_buffers ]) ->
          Ojs.option_of_js WEBGL_draw_buffers.t_of_js
            (Ojs.call (this_to_js Obj.magic x7627) "getExtension"
               [|((match x7626 with
                   | `L_s29_WEBGL_draw_buffers ->
                       Ojs.string_to_js "WEBGL_draw_buffers"))|])
    let (getExtension''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s30_WEBGL_lose_context ] ->
          WEBGL_lose_context.t option)
      =
      fun (x7631 : 'tags this) ->
        fun ~extensionName:(x7630 : [ `L_s30_WEBGL_lose_context ]) ->
          Ojs.option_of_js WEBGL_lose_context.t_of_js
            (Ojs.call (this_to_js Obj.magic x7631) "getExtension"
               [|((match x7630 with
                   | `L_s30_WEBGL_lose_context ->
                       Ojs.string_to_js "WEBGL_lose_context"))|])
    let (getExtension'''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s28_WEBGL_depth_texture ] ->
          WEBGL_depth_texture.t option)
      =
      fun (x7635 : 'tags this) ->
        fun ~extensionName:(x7634 : [ `L_s28_WEBGL_depth_texture ]) ->
          Ojs.option_of_js WEBGL_depth_texture.t_of_js
            (Ojs.call (this_to_js Obj.magic x7635) "getExtension"
               [|((match x7634 with
                   | `L_s28_WEBGL_depth_texture ->
                       Ojs.string_to_js "WEBGL_depth_texture"))|])
    let (getExtension''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s26_WEBGL_debug_renderer_info ] ->
          WEBGL_debug_renderer_info.t option)
      =
      fun (x7639 : 'tags this) ->
        fun ~extensionName:(x7638 : [ `L_s26_WEBGL_debug_renderer_info ]) ->
          Ojs.option_of_js WEBGL_debug_renderer_info.t_of_js
            (Ojs.call (this_to_js Obj.magic x7639) "getExtension"
               [|((match x7638 with
                   | `L_s26_WEBGL_debug_renderer_info ->
                       Ojs.string_to_js "WEBGL_debug_renderer_info"))|])
    let (getExtension'''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s24_WEBGL_compressed_texture_s3tc ] ->
          WEBGL_compressed_texture_s3tc.t option)
      =
      fun (x7643 : 'tags this) ->
        fun ~extensionName:(x7642 : [ `L_s24_WEBGL_compressed_texture_s3tc ])
          ->
          Ojs.option_of_js WEBGL_compressed_texture_s3tc.t_of_js
            (Ojs.call (this_to_js Obj.magic x7643) "getExtension"
               [|((match x7642 with
                   | `L_s24_WEBGL_compressed_texture_s3tc ->
                       Ojs.string_to_js "WEBGL_compressed_texture_s3tc"))|])
    let (getExtension''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s16_OES_texture_half_float_linear ] ->
          OES_texture_half_float_linear.t option)
      =
      fun (x7647 : 'tags this) ->
        fun ~extensionName:(x7646 : [ `L_s16_OES_texture_half_float_linear ])
          ->
          Ojs.option_of_js OES_texture_half_float_linear.t_of_js
            (Ojs.call (this_to_js Obj.magic x7647) "getExtension"
               [|((match x7646 with
                   | `L_s16_OES_texture_half_float_linear ->
                       Ojs.string_to_js "OES_texture_half_float_linear"))|])
    let (getExtension'''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s15_OES_texture_half_float ] ->
          OES_texture_half_float.t option)
      =
      fun (x7651 : 'tags this) ->
        fun ~extensionName:(x7650 : [ `L_s15_OES_texture_half_float ]) ->
          Ojs.option_of_js OES_texture_half_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x7651) "getExtension"
               [|((match x7650 with
                   | `L_s15_OES_texture_half_float ->
                       Ojs.string_to_js "OES_texture_half_float"))|])
    let (getExtension''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s14_OES_texture_float_linear ] ->
          OES_texture_float_linear.t option)
      =
      fun (x7655 : 'tags this) ->
        fun ~extensionName:(x7654 : [ `L_s14_OES_texture_float_linear ]) ->
          Ojs.option_of_js OES_texture_float_linear.t_of_js
            (Ojs.call (this_to_js Obj.magic x7655) "getExtension"
               [|((match x7654 with
                   | `L_s14_OES_texture_float_linear ->
                       Ojs.string_to_js "OES_texture_float_linear"))|])
    let (getExtension'''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s13_OES_texture_float ] ->
          OES_texture_float.t option)
      =
      fun (x7659 : 'tags this) ->
        fun ~extensionName:(x7658 : [ `L_s13_OES_texture_float ]) ->
          Ojs.option_of_js OES_texture_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x7659) "getExtension"
               [|((match x7658 with
                   | `L_s13_OES_texture_float ->
                       Ojs.string_to_js "OES_texture_float"))|])
    let (getExtension''''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s12_OES_standard_derivatives ] ->
          OES_standard_derivatives.t option)
      =
      fun (x7663 : 'tags this) ->
        fun ~extensionName:(x7662 : [ `L_s12_OES_standard_derivatives ]) ->
          Ojs.option_of_js OES_standard_derivatives.t_of_js
            (Ojs.call (this_to_js Obj.magic x7663) "getExtension"
               [|((match x7662 with
                   | `L_s12_OES_standard_derivatives ->
                       Ojs.string_to_js "OES_standard_derivatives"))|])
    let (getExtension'''''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s11_OES_element_index_uint ] ->
          OES_element_index_uint.t option)
      =
      fun (x7667 : 'tags this) ->
        fun ~extensionName:(x7666 : [ `L_s11_OES_element_index_uint ]) ->
          Ojs.option_of_js OES_element_index_uint.t_of_js
            (Ojs.call (this_to_js Obj.magic x7667) "getExtension"
               [|((match x7666 with
                   | `L_s11_OES_element_index_uint ->
                       Ojs.string_to_js "OES_element_index_uint"))|])
    let (getExtension''''''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s1_ANGLE_instanced_arrays ] ->
          ANGLE_instanced_arrays.t option)
      =
      fun (x7671 : 'tags this) ->
        fun ~extensionName:(x7670 : [ `L_s1_ANGLE_instanced_arrays ]) ->
          Ojs.option_of_js ANGLE_instanced_arrays.t_of_js
            (Ojs.call (this_to_js Obj.magic x7671) "getExtension"
               [|((match x7670 with
                   | `L_s1_ANGLE_instanced_arrays ->
                       Ojs.string_to_js "ANGLE_instanced_arrays"))|])
    let (getExtension'''''''''''''''''''''''''''''' :
      'tags this -> name:string -> any) =
      fun (x7675 : 'tags this) ->
        fun ~name:(x7674 : string) ->
          any_of_js
            (Ojs.call (this_to_js Obj.magic x7675) "getExtension"
               [|(Ojs.string_to_js x7674)|])
    let (getFramebufferAttachmentParameter :
      'tags this ->
        target:GLenum.t -> attachment:GLenum.t -> pname:GLenum.t -> any)
      =
      fun (x7680 : 'tags this) ->
        fun ~target:(x7677 : GLenum.t) ->
          fun ~attachment:(x7678 : GLenum.t) ->
            fun ~pname:(x7679 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x7680)
                   "getFramebufferAttachmentParameter"
                   [|(GLenum.t_to_js x7677);(GLenum.t_to_js x7678);(GLenum.t_to_js
                                                                    x7679)|])
    let (getParameter : 'tags this -> pname:GLenum.t -> any) =
      fun (x7683 : 'tags this) ->
        fun ~pname:(x7682 : GLenum.t) ->
          any_of_js
            (Ojs.call (this_to_js Obj.magic x7683) "getParameter"
               [|(GLenum.t_to_js x7682)|])
    let (getProgramInfoLog :
      'tags this -> program:WebGLProgram.t -> string option) =
      fun (x7686 : 'tags this) ->
        fun ~program:(x7685 : WebGLProgram.t) ->
          Ojs.option_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x7686) "getProgramInfoLog"
               [|(WebGLProgram.t_to_js x7685)|])
    let (getProgramParameter :
      'tags this -> program:WebGLProgram.t -> pname:GLenum.t -> any) =
      fun (x7691 : 'tags this) ->
        fun ~program:(x7689 : WebGLProgram.t) ->
          fun ~pname:(x7690 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x7691) "getProgramParameter"
                 [|(WebGLProgram.t_to_js x7689);(GLenum.t_to_js x7690)|])
    let (getRenderbufferParameter :
      'tags this -> target:GLenum.t -> pname:GLenum.t -> any) =
      fun (x7695 : 'tags this) ->
        fun ~target:(x7693 : GLenum.t) ->
          fun ~pname:(x7694 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x7695)
                 "getRenderbufferParameter"
                 [|(GLenum.t_to_js x7693);(GLenum.t_to_js x7694)|])
    let (getShaderInfoLog :
      'tags this -> shader:WebGLShader.t -> string option) =
      fun (x7698 : 'tags this) ->
        fun ~shader:(x7697 : WebGLShader.t) ->
          Ojs.option_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x7698) "getShaderInfoLog"
               [|(WebGLShader.t_to_js x7697)|])
    let (getShaderParameter :
      'tags this -> shader:WebGLShader.t -> pname:GLenum.t -> any) =
      fun (x7703 : 'tags this) ->
        fun ~shader:(x7701 : WebGLShader.t) ->
          fun ~pname:(x7702 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x7703) "getShaderParameter"
                 [|(WebGLShader.t_to_js x7701);(GLenum.t_to_js x7702)|])
    let (getShaderPrecisionFormat :
      'tags this ->
        shadertype:GLenum.t ->
          precisiontype:GLenum.t -> WebGLShaderPrecisionFormat.t option)
      =
      fun (x7707 : 'tags this) ->
        fun ~shadertype:(x7705 : GLenum.t) ->
          fun ~precisiontype:(x7706 : GLenum.t) ->
            Ojs.option_of_js WebGLShaderPrecisionFormat.t_of_js
              (Ojs.call (this_to_js Obj.magic x7707)
                 "getShaderPrecisionFormat"
                 [|(GLenum.t_to_js x7705);(GLenum.t_to_js x7706)|])
    let (getShaderSource :
      'tags this -> shader:WebGLShader.t -> string option) =
      fun (x7711 : 'tags this) ->
        fun ~shader:(x7710 : WebGLShader.t) ->
          Ojs.option_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x7711) "getShaderSource"
               [|(WebGLShader.t_to_js x7710)|])
    let (getSupportedExtensions : 'tags this -> string list option) =
      fun (x7714 : 'tags this) ->
        Ojs.option_of_js
          (fun (x7716 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x7716)
          (Ojs.call (this_to_js Obj.magic x7714) "getSupportedExtensions"
             [||])
    let (getTexParameter :
      'tags this -> target:GLenum.t -> pname:GLenum.t -> any) =
      fun (x7720 : 'tags this) ->
        fun ~target:(x7718 : GLenum.t) ->
          fun ~pname:(x7719 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x7720) "getTexParameter"
                 [|(GLenum.t_to_js x7718);(GLenum.t_to_js x7719)|])
    let (getUniform :
      'tags this ->
        program:WebGLProgram.t -> location:WebGLUniformLocation.t -> any)
      =
      fun (x7724 : 'tags this) ->
        fun ~program:(x7722 : WebGLProgram.t) ->
          fun ~location:(x7723 : WebGLUniformLocation.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x7724) "getUniform"
                 [|(WebGLProgram.t_to_js x7722);(WebGLUniformLocation.t_to_js
                                                   x7723)|])
    let (getUniformLocation :
      'tags this ->
        program:WebGLProgram.t ->
          name:string -> WebGLUniformLocation.t option)
      =
      fun (x7728 : 'tags this) ->
        fun ~program:(x7726 : WebGLProgram.t) ->
          fun ~name:(x7727 : string) ->
            Ojs.option_of_js WebGLUniformLocation.t_of_js
              (Ojs.call (this_to_js Obj.magic x7728) "getUniformLocation"
                 [|(WebGLProgram.t_to_js x7726);(Ojs.string_to_js x7727)|])
    let (getVertexAttrib :
      'tags this -> index:GLuint.t -> pname:GLenum.t -> any) =
      fun (x7733 : 'tags this) ->
        fun ~index:(x7731 : GLuint.t) ->
          fun ~pname:(x7732 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x7733) "getVertexAttrib"
                 [|(GLuint.t_to_js x7731);(GLenum.t_to_js x7732)|])
    let (getVertexAttribOffset :
      'tags this -> index:GLuint.t -> pname:GLenum.t -> GLintptr.t) =
      fun (x7737 : 'tags this) ->
        fun ~index:(x7735 : GLuint.t) ->
          fun ~pname:(x7736 : GLenum.t) ->
            GLintptr.t_of_js
              (Ojs.call (this_to_js Obj.magic x7737) "getVertexAttribOffset"
                 [|(GLuint.t_to_js x7735);(GLenum.t_to_js x7736)|])
    let (hint : 'tags this -> target:GLenum.t -> mode:GLenum.t -> unit) =
      fun (x7741 : 'tags this) ->
        fun ~target:(x7739 : GLenum.t) ->
          fun ~mode:(x7740 : GLenum.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7741) "hint"
                 [|(GLenum.t_to_js x7739);(GLenum.t_to_js x7740)|])
    let (isBuffer : 'tags this -> buffer:WebGLBuffer.t option -> GLboolean.t)
      =
      fun (x7745 : 'tags this) ->
        fun ~buffer:(x7743 : WebGLBuffer.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x7745) "isBuffer"
               [|(Ojs.option_to_js WebGLBuffer.t_to_js x7743)|])
    let (isContextLost : 'tags this -> bool) =
      fun (x7747 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.call (this_to_js Obj.magic x7747) "isContextLost" [||])
    let (isEnabled : 'tags this -> cap:GLenum.t -> GLboolean.t) =
      fun (x7750 : 'tags this) ->
        fun ~cap:(x7749 : GLenum.t) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x7750) "isEnabled"
               [|(GLenum.t_to_js x7749)|])
    let (isFramebuffer :
      'tags this -> framebuffer:WebGLFramebuffer.t option -> GLboolean.t) =
      fun (x7754 : 'tags this) ->
        fun ~framebuffer:(x7752 : WebGLFramebuffer.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x7754) "isFramebuffer"
               [|(Ojs.option_to_js WebGLFramebuffer.t_to_js x7752)|])
    let (isProgram :
      'tags this -> program:WebGLProgram.t option -> GLboolean.t) =
      fun (x7758 : 'tags this) ->
        fun ~program:(x7756 : WebGLProgram.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x7758) "isProgram"
               [|(Ojs.option_to_js WebGLProgram.t_to_js x7756)|])
    let (isRenderbuffer :
      'tags this -> renderbuffer:WebGLRenderbuffer.t option -> GLboolean.t) =
      fun (x7762 : 'tags this) ->
        fun ~renderbuffer:(x7760 : WebGLRenderbuffer.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x7762) "isRenderbuffer"
               [|(Ojs.option_to_js WebGLRenderbuffer.t_to_js x7760)|])
    let (isShader : 'tags this -> shader:WebGLShader.t option -> GLboolean.t)
      =
      fun (x7766 : 'tags this) ->
        fun ~shader:(x7764 : WebGLShader.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x7766) "isShader"
               [|(Ojs.option_to_js WebGLShader.t_to_js x7764)|])
    let (isTexture :
      'tags this -> texture:WebGLTexture.t option -> GLboolean.t) =
      fun (x7770 : 'tags this) ->
        fun ~texture:(x7768 : WebGLTexture.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x7770) "isTexture"
               [|(Ojs.option_to_js WebGLTexture.t_to_js x7768)|])
    let (lineWidth : 'tags this -> width:GLfloat.t -> unit) =
      fun (x7773 : 'tags this) ->
        fun ~width:(x7772 : GLfloat.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7773) "lineWidth"
               [|(GLfloat.t_to_js x7772)|])
    let (linkProgram : 'tags this -> program:WebGLProgram.t -> unit) =
      fun (x7776 : 'tags this) ->
        fun ~program:(x7775 : WebGLProgram.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7776) "linkProgram"
               [|(WebGLProgram.t_to_js x7775)|])
    let (pixelStorei :
      'tags this ->
        pname:GLenum.t ->
          param:[ `U1 of GLint.t  | `U2 of GLboolean.t ] -> unit)
      =
      fun (x7782 : 'tags this) ->
        fun ~pname:(x7778 : GLenum.t) ->
          fun ~param:(x7779 : [ `U1 of GLint.t  | `U2 of GLboolean.t ]) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7782) "pixelStorei"
                 [|(GLenum.t_to_js x7778);((match x7779 with
                                            | `U1 x7780 ->
                                                GLint.t_to_js x7780
                                            | `U2 x7781 ->
                                                GLboolean.t_to_js x7781))|])
    let (polygonOffset :
      'tags this -> factor:GLfloat.t -> units:GLfloat.t -> unit) =
      fun (x7786 : 'tags this) ->
        fun ~factor:(x7784 : GLfloat.t) ->
          fun ~units:(x7785 : GLfloat.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7786) "polygonOffset"
                 [|(GLfloat.t_to_js x7784);(GLfloat.t_to_js x7785)|])
    let (renderbufferStorage :
      'tags this ->
        target:GLenum.t ->
          internalformat:GLenum.t ->
            width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x7792 : 'tags this) ->
        fun ~target:(x7788 : GLenum.t) ->
          fun ~internalformat:(x7789 : GLenum.t) ->
            fun ~width:(x7790 : GLsizei.t) ->
              fun ~height:(x7791 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7792)
                     "renderbufferStorage"
                     [|(GLenum.t_to_js x7788);(GLenum.t_to_js x7789);(
                       GLsizei.t_to_js x7790);(GLsizei.t_to_js x7791)|])
    let (sampleCoverage :
      'tags this -> value:GLclampf.t -> invert:GLboolean.t -> unit) =
      fun (x7796 : 'tags this) ->
        fun ~value:(x7794 : GLclampf.t) ->
          fun ~invert:(x7795 : GLboolean.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7796) "sampleCoverage"
                 [|(GLclampf.t_to_js x7794);(GLboolean.t_to_js x7795)|])
    let (scissor :
      'tags this ->
        x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x7802 : 'tags this) ->
        fun ~x:(x7798 : GLint.t) ->
          fun ~y:(x7799 : GLint.t) ->
            fun ~width:(x7800 : GLsizei.t) ->
              fun ~height:(x7801 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7802) "scissor"
                     [|(GLint.t_to_js x7798);(GLint.t_to_js x7799);(GLsizei.t_to_js
                                                                    x7800);(
                       GLsizei.t_to_js x7801)|])
    let (shaderSource :
      'tags this -> shader:WebGLShader.t -> source:string -> unit) =
      fun (x7806 : 'tags this) ->
        fun ~shader:(x7804 : WebGLShader.t) ->
          fun ~source:(x7805 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7806) "shaderSource"
                 [|(WebGLShader.t_to_js x7804);(Ojs.string_to_js x7805)|])
    let (stencilFunc :
      'tags this -> func:GLenum.t -> ref:GLint.t -> mask:GLuint.t -> unit) =
      fun (x7811 : 'tags this) ->
        fun ~func:(x7808 : GLenum.t) ->
          fun ~ref:(x7809 : GLint.t) ->
            fun ~mask:(x7810 : GLuint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7811) "stencilFunc"
                   [|(GLenum.t_to_js x7808);(GLint.t_to_js x7809);(GLuint.t_to_js
                                                                    x7810)|])
    let (stencilFuncSeparate :
      'tags this ->
        face:GLenum.t ->
          func:GLenum.t -> ref:GLint.t -> mask:GLuint.t -> unit)
      =
      fun (x7817 : 'tags this) ->
        fun ~face:(x7813 : GLenum.t) ->
          fun ~func:(x7814 : GLenum.t) ->
            fun ~ref:(x7815 : GLint.t) ->
              fun ~mask:(x7816 : GLuint.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7817)
                     "stencilFuncSeparate"
                     [|(GLenum.t_to_js x7813);(GLenum.t_to_js x7814);(
                       GLint.t_to_js x7815);(GLuint.t_to_js x7816)|])
    let (stencilMask : 'tags this -> mask:GLuint.t -> unit) =
      fun (x7820 : 'tags this) ->
        fun ~mask:(x7819 : GLuint.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7820) "stencilMask"
               [|(GLuint.t_to_js x7819)|])
    let (stencilMaskSeparate :
      'tags this -> face:GLenum.t -> mask:GLuint.t -> unit) =
      fun (x7824 : 'tags this) ->
        fun ~face:(x7822 : GLenum.t) ->
          fun ~mask:(x7823 : GLuint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7824) "stencilMaskSeparate"
                 [|(GLenum.t_to_js x7822);(GLuint.t_to_js x7823)|])
    let (stencilOp :
      'tags this -> fail:GLenum.t -> zfail:GLenum.t -> zpass:GLenum.t -> unit)
      =
      fun (x7829 : 'tags this) ->
        fun ~fail:(x7826 : GLenum.t) ->
          fun ~zfail:(x7827 : GLenum.t) ->
            fun ~zpass:(x7828 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7829) "stencilOp"
                   [|(GLenum.t_to_js x7826);(GLenum.t_to_js x7827);(GLenum.t_to_js
                                                                    x7828)|])
    let (stencilOpSeparate :
      'tags this ->
        face:GLenum.t ->
          fail:GLenum.t -> zfail:GLenum.t -> zpass:GLenum.t -> unit)
      =
      fun (x7835 : 'tags this) ->
        fun ~face:(x7831 : GLenum.t) ->
          fun ~fail:(x7832 : GLenum.t) ->
            fun ~zfail:(x7833 : GLenum.t) ->
              fun ~zpass:(x7834 : GLenum.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7835) "stencilOpSeparate"
                     [|(GLenum.t_to_js x7831);(GLenum.t_to_js x7832);(
                       GLenum.t_to_js x7833);(GLenum.t_to_js x7834)|])
    let (texParameterf :
      'tags this ->
        target:GLenum.t -> pname:GLenum.t -> param:GLfloat.t -> unit)
      =
      fun (x7840 : 'tags this) ->
        fun ~target:(x7837 : GLenum.t) ->
          fun ~pname:(x7838 : GLenum.t) ->
            fun ~param:(x7839 : GLfloat.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7840) "texParameterf"
                   [|(GLenum.t_to_js x7837);(GLenum.t_to_js x7838);(GLfloat.t_to_js
                                                                    x7839)|])
    let (texParameteri :
      'tags this ->
        target:GLenum.t -> pname:GLenum.t -> param:GLint.t -> unit)
      =
      fun (x7845 : 'tags this) ->
        fun ~target:(x7842 : GLenum.t) ->
          fun ~pname:(x7843 : GLenum.t) ->
            fun ~param:(x7844 : GLint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7845) "texParameteri"
                   [|(GLenum.t_to_js x7842);(GLenum.t_to_js x7843);(GLint.t_to_js
                                                                    x7844)|])
    let (uniform1f :
      'tags this ->
        location:WebGLUniformLocation.t option -> x:GLfloat.t -> unit)
      =
      fun (x7850 : 'tags this) ->
        fun ~location:(x7847 : WebGLUniformLocation.t option) ->
          fun ~x:(x7849 : GLfloat.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7850) "uniform1f"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x7847);(
                   GLfloat.t_to_js x7849)|])
    let (uniform1i :
      'tags this ->
        location:WebGLUniformLocation.t option -> x:GLint.t -> unit)
      =
      fun (x7855 : 'tags this) ->
        fun ~location:(x7852 : WebGLUniformLocation.t option) ->
          fun ~x:(x7854 : GLint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7855) "uniform1i"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x7852);(
                   GLint.t_to_js x7854)|])
    let (uniform2f :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          x:GLfloat.t -> y:GLfloat.t -> unit)
      =
      fun (x7861 : 'tags this) ->
        fun ~location:(x7857 : WebGLUniformLocation.t option) ->
          fun ~x:(x7859 : GLfloat.t) ->
            fun ~y:(x7860 : GLfloat.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7861) "uniform2f"
                   [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x7857);(
                     GLfloat.t_to_js x7859);(GLfloat.t_to_js x7860)|])
    let (uniform2i :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          x:GLint.t -> y:GLint.t -> unit)
      =
      fun (x7867 : 'tags this) ->
        fun ~location:(x7863 : WebGLUniformLocation.t option) ->
          fun ~x:(x7865 : GLint.t) ->
            fun ~y:(x7866 : GLint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7867) "uniform2i"
                   [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x7863);(
                     GLint.t_to_js x7865);(GLint.t_to_js x7866)|])
    let (uniform3f :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> unit)
      =
      fun (x7874 : 'tags this) ->
        fun ~location:(x7869 : WebGLUniformLocation.t option) ->
          fun ~x:(x7871 : GLfloat.t) ->
            fun ~y:(x7872 : GLfloat.t) ->
              fun ~z:(x7873 : GLfloat.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7874) "uniform3f"
                     [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x7869);(
                       GLfloat.t_to_js x7871);(GLfloat.t_to_js x7872);(
                       GLfloat.t_to_js x7873)|])
    let (uniform3i :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          x:GLint.t -> y:GLint.t -> z:GLint.t -> unit)
      =
      fun (x7881 : 'tags this) ->
        fun ~location:(x7876 : WebGLUniformLocation.t option) ->
          fun ~x:(x7878 : GLint.t) ->
            fun ~y:(x7879 : GLint.t) ->
              fun ~z:(x7880 : GLint.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7881) "uniform3i"
                     [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x7876);(
                       GLint.t_to_js x7878);(GLint.t_to_js x7879);(GLint.t_to_js
                                                                    x7880)|])
    let (uniform4f :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> w:GLfloat.t -> unit)
      =
      fun (x7889 : 'tags this) ->
        fun ~location:(x7883 : WebGLUniformLocation.t option) ->
          fun ~x:(x7885 : GLfloat.t) ->
            fun ~y:(x7886 : GLfloat.t) ->
              fun ~z:(x7887 : GLfloat.t) ->
                fun ~w:(x7888 : GLfloat.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x7889) "uniform4f"
                       [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x7883);(
                         GLfloat.t_to_js x7885);(GLfloat.t_to_js x7886);(
                         GLfloat.t_to_js x7887);(GLfloat.t_to_js x7888)|])
    let (uniform4i :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          x:GLint.t -> y:GLint.t -> z:GLint.t -> w:GLint.t -> unit)
      =
      fun (x7897 : 'tags this) ->
        fun ~location:(x7891 : WebGLUniformLocation.t option) ->
          fun ~x:(x7893 : GLint.t) ->
            fun ~y:(x7894 : GLint.t) ->
              fun ~z:(x7895 : GLint.t) ->
                fun ~w:(x7896 : GLint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x7897) "uniform4i"
                       [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x7891);(
                         GLint.t_to_js x7893);(GLint.t_to_js x7894);(
                         GLint.t_to_js x7895);(GLint.t_to_js x7896)|])
    let (useProgram : 'tags this -> program:WebGLProgram.t option -> unit) =
      fun (x7901 : 'tags this) ->
        fun ~program:(x7899 : WebGLProgram.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7901) "useProgram"
               [|(Ojs.option_to_js WebGLProgram.t_to_js x7899)|])
    let (validateProgram : 'tags this -> program:WebGLProgram.t -> unit) =
      fun (x7904 : 'tags this) ->
        fun ~program:(x7903 : WebGLProgram.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7904) "validateProgram"
               [|(WebGLProgram.t_to_js x7903)|])
    let (vertexAttrib1f :
      'tags this -> index:GLuint.t -> x:GLfloat.t -> unit) =
      fun (x7908 : 'tags this) ->
        fun ~index:(x7906 : GLuint.t) ->
          fun ~x:(x7907 : GLfloat.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7908) "vertexAttrib1f"
                 [|(GLuint.t_to_js x7906);(GLfloat.t_to_js x7907)|])
    let (vertexAttrib1fv :
      'tags this -> index:GLuint.t -> values:Float32List.t -> unit) =
      fun (x7912 : 'tags this) ->
        fun ~index:(x7910 : GLuint.t) ->
          fun ~values:(x7911 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7912) "vertexAttrib1fv"
                 [|(GLuint.t_to_js x7910);(Float32List.t_to_js x7911)|])
    let (vertexAttrib2f :
      'tags this -> index:GLuint.t -> x:GLfloat.t -> y:GLfloat.t -> unit) =
      fun (x7917 : 'tags this) ->
        fun ~index:(x7914 : GLuint.t) ->
          fun ~x:(x7915 : GLfloat.t) ->
            fun ~y:(x7916 : GLfloat.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7917) "vertexAttrib2f"
                   [|(GLuint.t_to_js x7914);(GLfloat.t_to_js x7915);(
                     GLfloat.t_to_js x7916)|])
    let (vertexAttrib2fv :
      'tags this -> index:GLuint.t -> values:Float32List.t -> unit) =
      fun (x7921 : 'tags this) ->
        fun ~index:(x7919 : GLuint.t) ->
          fun ~values:(x7920 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7921) "vertexAttrib2fv"
                 [|(GLuint.t_to_js x7919);(Float32List.t_to_js x7920)|])
    let (vertexAttrib3f :
      'tags this ->
        index:GLuint.t -> x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> unit)
      =
      fun (x7927 : 'tags this) ->
        fun ~index:(x7923 : GLuint.t) ->
          fun ~x:(x7924 : GLfloat.t) ->
            fun ~y:(x7925 : GLfloat.t) ->
              fun ~z:(x7926 : GLfloat.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7927) "vertexAttrib3f"
                     [|(GLuint.t_to_js x7923);(GLfloat.t_to_js x7924);(
                       GLfloat.t_to_js x7925);(GLfloat.t_to_js x7926)|])
    let (vertexAttrib3fv :
      'tags this -> index:GLuint.t -> values:Float32List.t -> unit) =
      fun (x7931 : 'tags this) ->
        fun ~index:(x7929 : GLuint.t) ->
          fun ~values:(x7930 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7931) "vertexAttrib3fv"
                 [|(GLuint.t_to_js x7929);(Float32List.t_to_js x7930)|])
    let (vertexAttrib4f :
      'tags this ->
        index:GLuint.t ->
          x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> w:GLfloat.t -> unit)
      =
      fun (x7938 : 'tags this) ->
        fun ~index:(x7933 : GLuint.t) ->
          fun ~x:(x7934 : GLfloat.t) ->
            fun ~y:(x7935 : GLfloat.t) ->
              fun ~z:(x7936 : GLfloat.t) ->
                fun ~w:(x7937 : GLfloat.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x7938) "vertexAttrib4f"
                       [|(GLuint.t_to_js x7933);(GLfloat.t_to_js x7934);(
                         GLfloat.t_to_js x7935);(GLfloat.t_to_js x7936);(
                         GLfloat.t_to_js x7937)|])
    let (vertexAttrib4fv :
      'tags this -> index:GLuint.t -> values:Float32List.t -> unit) =
      fun (x7942 : 'tags this) ->
        fun ~index:(x7940 : GLuint.t) ->
          fun ~values:(x7941 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7942) "vertexAttrib4fv"
                 [|(GLuint.t_to_js x7940);(Float32List.t_to_js x7941)|])
    let (vertexAttribPointer :
      'tags this ->
        index:GLuint.t ->
          size:GLint.t ->
            type_:GLenum.t ->
              normalized:GLboolean.t ->
                stride:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x7950 : 'tags this) ->
        fun ~index:(x7944 : GLuint.t) ->
          fun ~size:(x7945 : GLint.t) ->
            fun ~type_:(x7946 : GLenum.t) ->
              fun ~normalized:(x7947 : GLboolean.t) ->
                fun ~stride:(x7948 : GLsizei.t) ->
                  fun ~offset:(x7949 : GLintptr.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x7950)
                         "vertexAttribPointer"
                         [|(GLuint.t_to_js x7944);(GLint.t_to_js x7945);(
                           GLenum.t_to_js x7946);(GLboolean.t_to_js x7947);(
                           GLsizei.t_to_js x7948);(GLintptr.t_to_js x7949)|])
    let (viewport :
      'tags this ->
        x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x7956 : 'tags this) ->
        fun ~x:(x7952 : GLint.t) ->
          fun ~y:(x7953 : GLint.t) ->
            fun ~width:(x7954 : GLsizei.t) ->
              fun ~height:(x7955 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7956) "viewport"
                     [|(GLint.t_to_js x7952);(GLint.t_to_js x7953);(GLsizei.t_to_js
                                                                    x7954);(
                       GLsizei.t_to_js x7955)|])
    let (get_ACTIVE_ATTRIBUTES : 'tags this -> GLenum.t) =
      fun (x7958 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7958)
             "ACTIVE_ATTRIBUTES")
    let (get_ACTIVE_TEXTURE : 'tags this -> GLenum.t) =
      fun (x7960 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7960) "ACTIVE_TEXTURE")
    let (get_ACTIVE_UNIFORMS : 'tags this -> GLenum.t) =
      fun (x7962 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7962) "ACTIVE_UNIFORMS")
    let (get_ALIASED_LINE_WIDTH_RANGE : 'tags this -> GLenum.t) =
      fun (x7964 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7964)
             "ALIASED_LINE_WIDTH_RANGE")
    let (get_ALIASED_POINT_SIZE_RANGE : 'tags this -> GLenum.t) =
      fun (x7966 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7966)
             "ALIASED_POINT_SIZE_RANGE")
    let (get_ALPHA : 'tags this -> GLenum.t) =
      fun (x7968 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7968) "ALPHA")
    let (get_ALPHA_BITS : 'tags this -> GLenum.t) =
      fun (x7970 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7970) "ALPHA_BITS")
    let (get_ALWAYS : 'tags this -> GLenum.t) =
      fun (x7972 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7972) "ALWAYS")
    let (get_ARRAY_BUFFER : 'tags this -> GLenum.t) =
      fun (x7974 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7974) "ARRAY_BUFFER")
    let (get_ARRAY_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x7976 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7976)
             "ARRAY_BUFFER_BINDING")
    let (get_ATTACHED_SHADERS : 'tags this -> GLenum.t) =
      fun (x7978 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7978) "ATTACHED_SHADERS")
    let (get_BACK : 'tags this -> GLenum.t) =
      fun (x7980 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7980) "BACK")
    let (get_BLEND : 'tags this -> GLenum.t) =
      fun (x7982 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7982) "BLEND")
    let (get_BLEND_COLOR : 'tags this -> GLenum.t) =
      fun (x7984 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7984) "BLEND_COLOR")
    let (get_BLEND_DST_ALPHA : 'tags this -> GLenum.t) =
      fun (x7986 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7986) "BLEND_DST_ALPHA")
    let (get_BLEND_DST_RGB : 'tags this -> GLenum.t) =
      fun (x7988 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7988) "BLEND_DST_RGB")
    let (get_BLEND_EQUATION : 'tags this -> GLenum.t) =
      fun (x7990 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7990) "BLEND_EQUATION")
    let (get_BLEND_EQUATION_ALPHA : 'tags this -> GLenum.t) =
      fun (x7992 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7992)
             "BLEND_EQUATION_ALPHA")
    let (get_BLEND_EQUATION_RGB : 'tags this -> GLenum.t) =
      fun (x7994 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7994)
             "BLEND_EQUATION_RGB")
    let (get_BLEND_SRC_ALPHA : 'tags this -> GLenum.t) =
      fun (x7996 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7996) "BLEND_SRC_ALPHA")
    let (get_BLEND_SRC_RGB : 'tags this -> GLenum.t) =
      fun (x7998 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7998) "BLEND_SRC_RGB")
    let (get_BLUE_BITS : 'tags this -> GLenum.t) =
      fun (x8000 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8000) "BLUE_BITS")
    let (get_BOOL : 'tags this -> GLenum.t) =
      fun (x8002 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8002) "BOOL")
    let (get_BOOL_VEC2 : 'tags this -> GLenum.t) =
      fun (x8004 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8004) "BOOL_VEC2")
    let (get_BOOL_VEC3 : 'tags this -> GLenum.t) =
      fun (x8006 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8006) "BOOL_VEC3")
    let (get_BOOL_VEC4 : 'tags this -> GLenum.t) =
      fun (x8008 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8008) "BOOL_VEC4")
    let (get_BROWSER_DEFAULT_WEBGL : 'tags this -> GLenum.t) =
      fun (x8010 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8010)
             "BROWSER_DEFAULT_WEBGL")
    let (get_BUFFER_SIZE : 'tags this -> GLenum.t) =
      fun (x8012 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8012) "BUFFER_SIZE")
    let (get_BUFFER_USAGE : 'tags this -> GLenum.t) =
      fun (x8014 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8014) "BUFFER_USAGE")
    let (get_BYTE : 'tags this -> GLenum.t) =
      fun (x8016 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8016) "BYTE")
    let (get_CCW : 'tags this -> GLenum.t) =
      fun (x8018 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8018) "CCW")
    let (get_CLAMP_TO_EDGE : 'tags this -> GLenum.t) =
      fun (x8020 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8020) "CLAMP_TO_EDGE")
    let (get_COLOR_ATTACHMENT0 : 'tags this -> GLenum.t) =
      fun (x8022 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8022)
             "COLOR_ATTACHMENT0")
    let (get_COLOR_BUFFER_BIT : 'tags this -> GLenum.t) =
      fun (x8024 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8024) "COLOR_BUFFER_BIT")
    let (get_COLOR_CLEAR_VALUE : 'tags this -> GLenum.t) =
      fun (x8026 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8026)
             "COLOR_CLEAR_VALUE")
    let (get_COLOR_WRITEMASK : 'tags this -> GLenum.t) =
      fun (x8028 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8028) "COLOR_WRITEMASK")
    let (get_COMPILE_STATUS : 'tags this -> GLenum.t) =
      fun (x8030 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8030) "COMPILE_STATUS")
    let (get_COMPRESSED_TEXTURE_FORMATS : 'tags this -> GLenum.t) =
      fun (x8032 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8032)
             "COMPRESSED_TEXTURE_FORMATS")
    let (get_CONSTANT_ALPHA : 'tags this -> GLenum.t) =
      fun (x8034 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8034) "CONSTANT_ALPHA")
    let (get_CONSTANT_COLOR : 'tags this -> GLenum.t) =
      fun (x8036 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8036) "CONSTANT_COLOR")
    let (get_CONTEXT_LOST_WEBGL : 'tags this -> GLenum.t) =
      fun (x8038 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8038)
             "CONTEXT_LOST_WEBGL")
    let (get_CULL_FACE : 'tags this -> GLenum.t) =
      fun (x8040 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8040) "CULL_FACE")
    let (get_CULL_FACE_MODE : 'tags this -> GLenum.t) =
      fun (x8042 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8042) "CULL_FACE_MODE")
    let (get_CURRENT_PROGRAM : 'tags this -> GLenum.t) =
      fun (x8044 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8044) "CURRENT_PROGRAM")
    let (get_CURRENT_VERTEX_ATTRIB : 'tags this -> GLenum.t) =
      fun (x8046 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8046)
             "CURRENT_VERTEX_ATTRIB")
    let (get_CW : 'tags this -> GLenum.t) =
      fun (x8048 : 'tags this) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x8048) "CW")
    let (get_DECR : 'tags this -> GLenum.t) =
      fun (x8050 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8050) "DECR")
    let (get_DECR_WRAP : 'tags this -> GLenum.t) =
      fun (x8052 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8052) "DECR_WRAP")
    let (get_DELETE_STATUS : 'tags this -> GLenum.t) =
      fun (x8054 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8054) "DELETE_STATUS")
    let (get_DEPTH_ATTACHMENT : 'tags this -> GLenum.t) =
      fun (x8056 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8056) "DEPTH_ATTACHMENT")
    let (get_DEPTH_BITS : 'tags this -> GLenum.t) =
      fun (x8058 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8058) "DEPTH_BITS")
    let (get_DEPTH_BUFFER_BIT : 'tags this -> GLenum.t) =
      fun (x8060 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8060) "DEPTH_BUFFER_BIT")
    let (get_DEPTH_CLEAR_VALUE : 'tags this -> GLenum.t) =
      fun (x8062 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8062)
             "DEPTH_CLEAR_VALUE")
    let (get_DEPTH_COMPONENT : 'tags this -> GLenum.t) =
      fun (x8064 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8064) "DEPTH_COMPONENT")
    let (get_DEPTH_COMPONENT16 : 'tags this -> GLenum.t) =
      fun (x8066 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8066)
             "DEPTH_COMPONENT16")
    let (get_DEPTH_FUNC : 'tags this -> GLenum.t) =
      fun (x8068 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8068) "DEPTH_FUNC")
    let (get_DEPTH_RANGE : 'tags this -> GLenum.t) =
      fun (x8070 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8070) "DEPTH_RANGE")
    let (get_DEPTH_STENCIL : 'tags this -> GLenum.t) =
      fun (x8072 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8072) "DEPTH_STENCIL")
    let (get_DEPTH_STENCIL_ATTACHMENT : 'tags this -> GLenum.t) =
      fun (x8074 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8074)
             "DEPTH_STENCIL_ATTACHMENT")
    let (get_DEPTH_TEST : 'tags this -> GLenum.t) =
      fun (x8076 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8076) "DEPTH_TEST")
    let (get_DEPTH_WRITEMASK : 'tags this -> GLenum.t) =
      fun (x8078 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8078) "DEPTH_WRITEMASK")
    let (get_DITHER : 'tags this -> GLenum.t) =
      fun (x8080 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8080) "DITHER")
    let (get_DONT_CARE : 'tags this -> GLenum.t) =
      fun (x8082 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8082) "DONT_CARE")
    let (get_DST_ALPHA : 'tags this -> GLenum.t) =
      fun (x8084 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8084) "DST_ALPHA")
    let (get_DST_COLOR : 'tags this -> GLenum.t) =
      fun (x8086 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8086) "DST_COLOR")
    let (get_DYNAMIC_DRAW : 'tags this -> GLenum.t) =
      fun (x8088 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8088) "DYNAMIC_DRAW")
    let (get_ELEMENT_ARRAY_BUFFER : 'tags this -> GLenum.t) =
      fun (x8090 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8090)
             "ELEMENT_ARRAY_BUFFER")
    let (get_ELEMENT_ARRAY_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x8092 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8092)
             "ELEMENT_ARRAY_BUFFER_BINDING")
    let (get_EQUAL : 'tags this -> GLenum.t) =
      fun (x8094 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8094) "EQUAL")
    let (get_FASTEST : 'tags this -> GLenum.t) =
      fun (x8096 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8096) "FASTEST")
    let (get_FLOAT : 'tags this -> GLenum.t) =
      fun (x8098 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8098) "FLOAT")
    let (get_FLOAT_MAT2 : 'tags this -> GLenum.t) =
      fun (x8100 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8100) "FLOAT_MAT2")
    let (get_FLOAT_MAT3 : 'tags this -> GLenum.t) =
      fun (x8102 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8102) "FLOAT_MAT3")
    let (get_FLOAT_MAT4 : 'tags this -> GLenum.t) =
      fun (x8104 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8104) "FLOAT_MAT4")
    let (get_FLOAT_VEC2 : 'tags this -> GLenum.t) =
      fun (x8106 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8106) "FLOAT_VEC2")
    let (get_FLOAT_VEC3 : 'tags this -> GLenum.t) =
      fun (x8108 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8108) "FLOAT_VEC3")
    let (get_FLOAT_VEC4 : 'tags this -> GLenum.t) =
      fun (x8110 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8110) "FLOAT_VEC4")
    let (get_FRAGMENT_SHADER : 'tags this -> GLenum.t) =
      fun (x8112 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8112) "FRAGMENT_SHADER")
    let (get_FRAMEBUFFER : 'tags this -> GLenum.t) =
      fun (x8114 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8114) "FRAMEBUFFER")
    let (get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME : 'tags this -> GLenum.t) =
      fun (x8116 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8116)
             "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME")
    let (get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE : 'tags this -> GLenum.t) =
      fun (x8118 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8118)
             "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE :
      'tags this -> GLenum.t) =
      fun (x8120 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8120)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL : 'tags this -> GLenum.t) =
      fun (x8122 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8122)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL")
    let (get_FRAMEBUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x8124 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8124)
             "FRAMEBUFFER_BINDING")
    let (get_FRAMEBUFFER_COMPLETE : 'tags this -> GLenum.t) =
      fun (x8126 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8126)
             "FRAMEBUFFER_COMPLETE")
    let (get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT : 'tags this -> GLenum.t) =
      fun (x8128 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8128)
             "FRAMEBUFFER_INCOMPLETE_ATTACHMENT")
    let (get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS : 'tags this -> GLenum.t) =
      fun (x8130 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8130)
             "FRAMEBUFFER_INCOMPLETE_DIMENSIONS")
    let (get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT :
      'tags this -> GLenum.t) =
      fun (x8132 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8132)
             "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT")
    let (get_FRAMEBUFFER_UNSUPPORTED : 'tags this -> GLenum.t) =
      fun (x8134 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8134)
             "FRAMEBUFFER_UNSUPPORTED")
    let (get_FRONT : 'tags this -> GLenum.t) =
      fun (x8136 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8136) "FRONT")
    let (get_FRONT_AND_BACK : 'tags this -> GLenum.t) =
      fun (x8138 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8138) "FRONT_AND_BACK")
    let (get_FRONT_FACE : 'tags this -> GLenum.t) =
      fun (x8140 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8140) "FRONT_FACE")
    let (get_FUNC_ADD : 'tags this -> GLenum.t) =
      fun (x8142 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8142) "FUNC_ADD")
    let (get_FUNC_REVERSE_SUBTRACT : 'tags this -> GLenum.t) =
      fun (x8144 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8144)
             "FUNC_REVERSE_SUBTRACT")
    let (get_FUNC_SUBTRACT : 'tags this -> GLenum.t) =
      fun (x8146 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8146) "FUNC_SUBTRACT")
    let (get_GENERATE_MIPMAP_HINT : 'tags this -> GLenum.t) =
      fun (x8148 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8148)
             "GENERATE_MIPMAP_HINT")
    let (get_GEQUAL : 'tags this -> GLenum.t) =
      fun (x8150 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8150) "GEQUAL")
    let (get_GREATER : 'tags this -> GLenum.t) =
      fun (x8152 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8152) "GREATER")
    let (get_GREEN_BITS : 'tags this -> GLenum.t) =
      fun (x8154 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8154) "GREEN_BITS")
    let (get_HIGH_FLOAT : 'tags this -> GLenum.t) =
      fun (x8156 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8156) "HIGH_FLOAT")
    let (get_HIGH_INT : 'tags this -> GLenum.t) =
      fun (x8158 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8158) "HIGH_INT")
    let (get_IMPLEMENTATION_COLOR_READ_FORMAT : 'tags this -> GLenum.t) =
      fun (x8160 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8160)
             "IMPLEMENTATION_COLOR_READ_FORMAT")
    let (get_IMPLEMENTATION_COLOR_READ_TYPE : 'tags this -> GLenum.t) =
      fun (x8162 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8162)
             "IMPLEMENTATION_COLOR_READ_TYPE")
    let (get_INCR : 'tags this -> GLenum.t) =
      fun (x8164 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8164) "INCR")
    let (get_INCR_WRAP : 'tags this -> GLenum.t) =
      fun (x8166 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8166) "INCR_WRAP")
    let (get_INT : 'tags this -> GLenum.t) =
      fun (x8168 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8168) "INT")
    let (get_INT_VEC2 : 'tags this -> GLenum.t) =
      fun (x8170 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8170) "INT_VEC2")
    let (get_INT_VEC3 : 'tags this -> GLenum.t) =
      fun (x8172 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8172) "INT_VEC3")
    let (get_INT_VEC4 : 'tags this -> GLenum.t) =
      fun (x8174 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8174) "INT_VEC4")
    let (get_INVALID_ENUM : 'tags this -> GLenum.t) =
      fun (x8176 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8176) "INVALID_ENUM")
    let (get_INVALID_FRAMEBUFFER_OPERATION : 'tags this -> GLenum.t) =
      fun (x8178 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8178)
             "INVALID_FRAMEBUFFER_OPERATION")
    let (get_INVALID_OPERATION : 'tags this -> GLenum.t) =
      fun (x8180 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8180)
             "INVALID_OPERATION")
    let (get_INVALID_VALUE : 'tags this -> GLenum.t) =
      fun (x8182 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8182) "INVALID_VALUE")
    let (get_INVERT : 'tags this -> GLenum.t) =
      fun (x8184 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8184) "INVERT")
    let (get_KEEP : 'tags this -> GLenum.t) =
      fun (x8186 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8186) "KEEP")
    let (get_LEQUAL : 'tags this -> GLenum.t) =
      fun (x8188 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8188) "LEQUAL")
    let (get_LESS : 'tags this -> GLenum.t) =
      fun (x8190 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8190) "LESS")
    let (get_LINEAR : 'tags this -> GLenum.t) =
      fun (x8192 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8192) "LINEAR")
    let (get_LINEAR_MIPMAP_LINEAR : 'tags this -> GLenum.t) =
      fun (x8194 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8194)
             "LINEAR_MIPMAP_LINEAR")
    let (get_LINEAR_MIPMAP_NEAREST : 'tags this -> GLenum.t) =
      fun (x8196 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8196)
             "LINEAR_MIPMAP_NEAREST")
    let (get_LINES : 'tags this -> GLenum.t) =
      fun (x8198 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8198) "LINES")
    let (get_LINE_LOOP : 'tags this -> GLenum.t) =
      fun (x8200 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8200) "LINE_LOOP")
    let (get_LINE_STRIP : 'tags this -> GLenum.t) =
      fun (x8202 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8202) "LINE_STRIP")
    let (get_LINE_WIDTH : 'tags this -> GLenum.t) =
      fun (x8204 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8204) "LINE_WIDTH")
    let (get_LINK_STATUS : 'tags this -> GLenum.t) =
      fun (x8206 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8206) "LINK_STATUS")
    let (get_LOW_FLOAT : 'tags this -> GLenum.t) =
      fun (x8208 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8208) "LOW_FLOAT")
    let (get_LOW_INT : 'tags this -> GLenum.t) =
      fun (x8210 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8210) "LOW_INT")
    let (get_LUMINANCE : 'tags this -> GLenum.t) =
      fun (x8212 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8212) "LUMINANCE")
    let (get_LUMINANCE_ALPHA : 'tags this -> GLenum.t) =
      fun (x8214 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8214) "LUMINANCE_ALPHA")
    let (get_MAX_COMBINED_TEXTURE_IMAGE_UNITS : 'tags this -> GLenum.t) =
      fun (x8216 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8216)
             "MAX_COMBINED_TEXTURE_IMAGE_UNITS")
    let (get_MAX_CUBE_MAP_TEXTURE_SIZE : 'tags this -> GLenum.t) =
      fun (x8218 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8218)
             "MAX_CUBE_MAP_TEXTURE_SIZE")
    let (get_MAX_FRAGMENT_UNIFORM_VECTORS : 'tags this -> GLenum.t) =
      fun (x8220 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8220)
             "MAX_FRAGMENT_UNIFORM_VECTORS")
    let (get_MAX_RENDERBUFFER_SIZE : 'tags this -> GLenum.t) =
      fun (x8222 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8222)
             "MAX_RENDERBUFFER_SIZE")
    let (get_MAX_TEXTURE_IMAGE_UNITS : 'tags this -> GLenum.t) =
      fun (x8224 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8224)
             "MAX_TEXTURE_IMAGE_UNITS")
    let (get_MAX_TEXTURE_SIZE : 'tags this -> GLenum.t) =
      fun (x8226 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8226) "MAX_TEXTURE_SIZE")
    let (get_MAX_VARYING_VECTORS : 'tags this -> GLenum.t) =
      fun (x8228 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8228)
             "MAX_VARYING_VECTORS")
    let (get_MAX_VERTEX_ATTRIBS : 'tags this -> GLenum.t) =
      fun (x8230 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8230)
             "MAX_VERTEX_ATTRIBS")
    let (get_MAX_VERTEX_TEXTURE_IMAGE_UNITS : 'tags this -> GLenum.t) =
      fun (x8232 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8232)
             "MAX_VERTEX_TEXTURE_IMAGE_UNITS")
    let (get_MAX_VERTEX_UNIFORM_VECTORS : 'tags this -> GLenum.t) =
      fun (x8234 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8234)
             "MAX_VERTEX_UNIFORM_VECTORS")
    let (get_MAX_VIEWPORT_DIMS : 'tags this -> GLenum.t) =
      fun (x8236 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8236)
             "MAX_VIEWPORT_DIMS")
    let (get_MEDIUM_FLOAT : 'tags this -> GLenum.t) =
      fun (x8238 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8238) "MEDIUM_FLOAT")
    let (get_MEDIUM_INT : 'tags this -> GLenum.t) =
      fun (x8240 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8240) "MEDIUM_INT")
    let (get_MIRRORED_REPEAT : 'tags this -> GLenum.t) =
      fun (x8242 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8242) "MIRRORED_REPEAT")
    let (get_NEAREST : 'tags this -> GLenum.t) =
      fun (x8244 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8244) "NEAREST")
    let (get_NEAREST_MIPMAP_LINEAR : 'tags this -> GLenum.t) =
      fun (x8246 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8246)
             "NEAREST_MIPMAP_LINEAR")
    let (get_NEAREST_MIPMAP_NEAREST : 'tags this -> GLenum.t) =
      fun (x8248 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8248)
             "NEAREST_MIPMAP_NEAREST")
    let (get_NEVER : 'tags this -> GLenum.t) =
      fun (x8250 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8250) "NEVER")
    let (get_NICEST : 'tags this -> GLenum.t) =
      fun (x8252 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8252) "NICEST")
    let (get_NONE : 'tags this -> GLenum.t) =
      fun (x8254 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8254) "NONE")
    let (get_NOTEQUAL : 'tags this -> GLenum.t) =
      fun (x8256 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8256) "NOTEQUAL")
    let (get_NO_ERROR : 'tags this -> GLenum.t) =
      fun (x8258 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8258) "NO_ERROR")
    let (get_ONE : 'tags this -> GLenum.t) =
      fun (x8260 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8260) "ONE")
    let (get_ONE_MINUS_CONSTANT_ALPHA : 'tags this -> GLenum.t) =
      fun (x8262 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8262)
             "ONE_MINUS_CONSTANT_ALPHA")
    let (get_ONE_MINUS_CONSTANT_COLOR : 'tags this -> GLenum.t) =
      fun (x8264 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8264)
             "ONE_MINUS_CONSTANT_COLOR")
    let (get_ONE_MINUS_DST_ALPHA : 'tags this -> GLenum.t) =
      fun (x8266 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8266)
             "ONE_MINUS_DST_ALPHA")
    let (get_ONE_MINUS_DST_COLOR : 'tags this -> GLenum.t) =
      fun (x8268 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8268)
             "ONE_MINUS_DST_COLOR")
    let (get_ONE_MINUS_SRC_ALPHA : 'tags this -> GLenum.t) =
      fun (x8270 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8270)
             "ONE_MINUS_SRC_ALPHA")
    let (get_ONE_MINUS_SRC_COLOR : 'tags this -> GLenum.t) =
      fun (x8272 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8272)
             "ONE_MINUS_SRC_COLOR")
    let (get_OUT_OF_MEMORY : 'tags this -> GLenum.t) =
      fun (x8274 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8274) "OUT_OF_MEMORY")
    let (get_PACK_ALIGNMENT : 'tags this -> GLenum.t) =
      fun (x8276 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8276) "PACK_ALIGNMENT")
    let (get_POINTS : 'tags this -> GLenum.t) =
      fun (x8278 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8278) "POINTS")
    let (get_POLYGON_OFFSET_FACTOR : 'tags this -> GLenum.t) =
      fun (x8280 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8280)
             "POLYGON_OFFSET_FACTOR")
    let (get_POLYGON_OFFSET_FILL : 'tags this -> GLenum.t) =
      fun (x8282 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8282)
             "POLYGON_OFFSET_FILL")
    let (get_POLYGON_OFFSET_UNITS : 'tags this -> GLenum.t) =
      fun (x8284 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8284)
             "POLYGON_OFFSET_UNITS")
    let (get_RED_BITS : 'tags this -> GLenum.t) =
      fun (x8286 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8286) "RED_BITS")
    let (get_RENDERBUFFER : 'tags this -> GLenum.t) =
      fun (x8288 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8288) "RENDERBUFFER")
    let (get_RENDERBUFFER_ALPHA_SIZE : 'tags this -> GLenum.t) =
      fun (x8290 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8290)
             "RENDERBUFFER_ALPHA_SIZE")
    let (get_RENDERBUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x8292 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8292)
             "RENDERBUFFER_BINDING")
    let (get_RENDERBUFFER_BLUE_SIZE : 'tags this -> GLenum.t) =
      fun (x8294 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8294)
             "RENDERBUFFER_BLUE_SIZE")
    let (get_RENDERBUFFER_DEPTH_SIZE : 'tags this -> GLenum.t) =
      fun (x8296 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8296)
             "RENDERBUFFER_DEPTH_SIZE")
    let (get_RENDERBUFFER_GREEN_SIZE : 'tags this -> GLenum.t) =
      fun (x8298 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8298)
             "RENDERBUFFER_GREEN_SIZE")
    let (get_RENDERBUFFER_HEIGHT : 'tags this -> GLenum.t) =
      fun (x8300 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8300)
             "RENDERBUFFER_HEIGHT")
    let (get_RENDERBUFFER_INTERNAL_FORMAT : 'tags this -> GLenum.t) =
      fun (x8302 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8302)
             "RENDERBUFFER_INTERNAL_FORMAT")
    let (get_RENDERBUFFER_RED_SIZE : 'tags this -> GLenum.t) =
      fun (x8304 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8304)
             "RENDERBUFFER_RED_SIZE")
    let (get_RENDERBUFFER_STENCIL_SIZE : 'tags this -> GLenum.t) =
      fun (x8306 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8306)
             "RENDERBUFFER_STENCIL_SIZE")
    let (get_RENDERBUFFER_WIDTH : 'tags this -> GLenum.t) =
      fun (x8308 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8308)
             "RENDERBUFFER_WIDTH")
    let (get_RENDERER : 'tags this -> GLenum.t) =
      fun (x8310 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8310) "RENDERER")
    let (get_REPEAT : 'tags this -> GLenum.t) =
      fun (x8312 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8312) "REPEAT")
    let (get_REPLACE : 'tags this -> GLenum.t) =
      fun (x8314 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8314) "REPLACE")
    let (get_RGB : 'tags this -> GLenum.t) =
      fun (x8316 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8316) "RGB")
    let (get_RGB565 : 'tags this -> GLenum.t) =
      fun (x8318 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8318) "RGB565")
    let (get_RGB5_A1 : 'tags this -> GLenum.t) =
      fun (x8320 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8320) "RGB5_A1")
    let (get_RGBA : 'tags this -> GLenum.t) =
      fun (x8322 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8322) "RGBA")
    let (get_RGBA4 : 'tags this -> GLenum.t) =
      fun (x8324 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8324) "RGBA4")
    let (get_SAMPLER_2D : 'tags this -> GLenum.t) =
      fun (x8326 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8326) "SAMPLER_2D")
    let (get_SAMPLER_CUBE : 'tags this -> GLenum.t) =
      fun (x8328 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8328) "SAMPLER_CUBE")
    let (get_SAMPLES : 'tags this -> GLenum.t) =
      fun (x8330 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8330) "SAMPLES")
    let (get_SAMPLE_ALPHA_TO_COVERAGE : 'tags this -> GLenum.t) =
      fun (x8332 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8332)
             "SAMPLE_ALPHA_TO_COVERAGE")
    let (get_SAMPLE_BUFFERS : 'tags this -> GLenum.t) =
      fun (x8334 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8334) "SAMPLE_BUFFERS")
    let (get_SAMPLE_COVERAGE : 'tags this -> GLenum.t) =
      fun (x8336 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8336) "SAMPLE_COVERAGE")
    let (get_SAMPLE_COVERAGE_INVERT : 'tags this -> GLenum.t) =
      fun (x8338 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8338)
             "SAMPLE_COVERAGE_INVERT")
    let (get_SAMPLE_COVERAGE_VALUE : 'tags this -> GLenum.t) =
      fun (x8340 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8340)
             "SAMPLE_COVERAGE_VALUE")
    let (get_SCISSOR_BOX : 'tags this -> GLenum.t) =
      fun (x8342 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8342) "SCISSOR_BOX")
    let (get_SCISSOR_TEST : 'tags this -> GLenum.t) =
      fun (x8344 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8344) "SCISSOR_TEST")
    let (get_SHADER_TYPE : 'tags this -> GLenum.t) =
      fun (x8346 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8346) "SHADER_TYPE")
    let (get_SHADING_LANGUAGE_VERSION : 'tags this -> GLenum.t) =
      fun (x8348 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8348)
             "SHADING_LANGUAGE_VERSION")
    let (get_SHORT : 'tags this -> GLenum.t) =
      fun (x8350 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8350) "SHORT")
    let (get_SRC_ALPHA : 'tags this -> GLenum.t) =
      fun (x8352 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8352) "SRC_ALPHA")
    let (get_SRC_ALPHA_SATURATE : 'tags this -> GLenum.t) =
      fun (x8354 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8354)
             "SRC_ALPHA_SATURATE")
    let (get_SRC_COLOR : 'tags this -> GLenum.t) =
      fun (x8356 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8356) "SRC_COLOR")
    let (get_STATIC_DRAW : 'tags this -> GLenum.t) =
      fun (x8358 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8358) "STATIC_DRAW")
    let (get_STENCIL_ATTACHMENT : 'tags this -> GLenum.t) =
      fun (x8360 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8360)
             "STENCIL_ATTACHMENT")
    let (get_STENCIL_BACK_FAIL : 'tags this -> GLenum.t) =
      fun (x8362 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8362)
             "STENCIL_BACK_FAIL")
    let (get_STENCIL_BACK_FUNC : 'tags this -> GLenum.t) =
      fun (x8364 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8364)
             "STENCIL_BACK_FUNC")
    let (get_STENCIL_BACK_PASS_DEPTH_FAIL : 'tags this -> GLenum.t) =
      fun (x8366 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8366)
             "STENCIL_BACK_PASS_DEPTH_FAIL")
    let (get_STENCIL_BACK_PASS_DEPTH_PASS : 'tags this -> GLenum.t) =
      fun (x8368 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8368)
             "STENCIL_BACK_PASS_DEPTH_PASS")
    let (get_STENCIL_BACK_REF : 'tags this -> GLenum.t) =
      fun (x8370 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8370) "STENCIL_BACK_REF")
    let (get_STENCIL_BACK_VALUE_MASK : 'tags this -> GLenum.t) =
      fun (x8372 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8372)
             "STENCIL_BACK_VALUE_MASK")
    let (get_STENCIL_BACK_WRITEMASK : 'tags this -> GLenum.t) =
      fun (x8374 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8374)
             "STENCIL_BACK_WRITEMASK")
    let (get_STENCIL_BITS : 'tags this -> GLenum.t) =
      fun (x8376 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8376) "STENCIL_BITS")
    let (get_STENCIL_BUFFER_BIT : 'tags this -> GLenum.t) =
      fun (x8378 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8378)
             "STENCIL_BUFFER_BIT")
    let (get_STENCIL_CLEAR_VALUE : 'tags this -> GLenum.t) =
      fun (x8380 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8380)
             "STENCIL_CLEAR_VALUE")
    let (get_STENCIL_FAIL : 'tags this -> GLenum.t) =
      fun (x8382 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8382) "STENCIL_FAIL")
    let (get_STENCIL_FUNC : 'tags this -> GLenum.t) =
      fun (x8384 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8384) "STENCIL_FUNC")
    let (get_STENCIL_INDEX8 : 'tags this -> GLenum.t) =
      fun (x8386 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8386) "STENCIL_INDEX8")
    let (get_STENCIL_PASS_DEPTH_FAIL : 'tags this -> GLenum.t) =
      fun (x8388 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8388)
             "STENCIL_PASS_DEPTH_FAIL")
    let (get_STENCIL_PASS_DEPTH_PASS : 'tags this -> GLenum.t) =
      fun (x8390 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8390)
             "STENCIL_PASS_DEPTH_PASS")
    let (get_STENCIL_REF : 'tags this -> GLenum.t) =
      fun (x8392 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8392) "STENCIL_REF")
    let (get_STENCIL_TEST : 'tags this -> GLenum.t) =
      fun (x8394 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8394) "STENCIL_TEST")
    let (get_STENCIL_VALUE_MASK : 'tags this -> GLenum.t) =
      fun (x8396 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8396)
             "STENCIL_VALUE_MASK")
    let (get_STENCIL_WRITEMASK : 'tags this -> GLenum.t) =
      fun (x8398 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8398)
             "STENCIL_WRITEMASK")
    let (get_STREAM_DRAW : 'tags this -> GLenum.t) =
      fun (x8400 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8400) "STREAM_DRAW")
    let (get_SUBPIXEL_BITS : 'tags this -> GLenum.t) =
      fun (x8402 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8402) "SUBPIXEL_BITS")
    let (get_TEXTURE : 'tags this -> GLenum.t) =
      fun (x8404 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8404) "TEXTURE")
    let (get_TEXTURE0 : 'tags this -> GLenum.t) =
      fun (x8406 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8406) "TEXTURE0")
    let (get_TEXTURE1 : 'tags this -> GLenum.t) =
      fun (x8408 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8408) "TEXTURE1")
    let (get_TEXTURE10 : 'tags this -> GLenum.t) =
      fun (x8410 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8410) "TEXTURE10")
    let (get_TEXTURE11 : 'tags this -> GLenum.t) =
      fun (x8412 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8412) "TEXTURE11")
    let (get_TEXTURE12 : 'tags this -> GLenum.t) =
      fun (x8414 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8414) "TEXTURE12")
    let (get_TEXTURE13 : 'tags this -> GLenum.t) =
      fun (x8416 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8416) "TEXTURE13")
    let (get_TEXTURE14 : 'tags this -> GLenum.t) =
      fun (x8418 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8418) "TEXTURE14")
    let (get_TEXTURE15 : 'tags this -> GLenum.t) =
      fun (x8420 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8420) "TEXTURE15")
    let (get_TEXTURE16 : 'tags this -> GLenum.t) =
      fun (x8422 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8422) "TEXTURE16")
    let (get_TEXTURE17 : 'tags this -> GLenum.t) =
      fun (x8424 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8424) "TEXTURE17")
    let (get_TEXTURE18 : 'tags this -> GLenum.t) =
      fun (x8426 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8426) "TEXTURE18")
    let (get_TEXTURE19 : 'tags this -> GLenum.t) =
      fun (x8428 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8428) "TEXTURE19")
    let (get_TEXTURE2 : 'tags this -> GLenum.t) =
      fun (x8430 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8430) "TEXTURE2")
    let (get_TEXTURE20 : 'tags this -> GLenum.t) =
      fun (x8432 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8432) "TEXTURE20")
    let (get_TEXTURE21 : 'tags this -> GLenum.t) =
      fun (x8434 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8434) "TEXTURE21")
    let (get_TEXTURE22 : 'tags this -> GLenum.t) =
      fun (x8436 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8436) "TEXTURE22")
    let (get_TEXTURE23 : 'tags this -> GLenum.t) =
      fun (x8438 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8438) "TEXTURE23")
    let (get_TEXTURE24 : 'tags this -> GLenum.t) =
      fun (x8440 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8440) "TEXTURE24")
    let (get_TEXTURE25 : 'tags this -> GLenum.t) =
      fun (x8442 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8442) "TEXTURE25")
    let (get_TEXTURE26 : 'tags this -> GLenum.t) =
      fun (x8444 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8444) "TEXTURE26")
    let (get_TEXTURE27 : 'tags this -> GLenum.t) =
      fun (x8446 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8446) "TEXTURE27")
    let (get_TEXTURE28 : 'tags this -> GLenum.t) =
      fun (x8448 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8448) "TEXTURE28")
    let (get_TEXTURE29 : 'tags this -> GLenum.t) =
      fun (x8450 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8450) "TEXTURE29")
    let (get_TEXTURE3 : 'tags this -> GLenum.t) =
      fun (x8452 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8452) "TEXTURE3")
    let (get_TEXTURE30 : 'tags this -> GLenum.t) =
      fun (x8454 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8454) "TEXTURE30")
    let (get_TEXTURE31 : 'tags this -> GLenum.t) =
      fun (x8456 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8456) "TEXTURE31")
    let (get_TEXTURE4 : 'tags this -> GLenum.t) =
      fun (x8458 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8458) "TEXTURE4")
    let (get_TEXTURE5 : 'tags this -> GLenum.t) =
      fun (x8460 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8460) "TEXTURE5")
    let (get_TEXTURE6 : 'tags this -> GLenum.t) =
      fun (x8462 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8462) "TEXTURE6")
    let (get_TEXTURE7 : 'tags this -> GLenum.t) =
      fun (x8464 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8464) "TEXTURE7")
    let (get_TEXTURE8 : 'tags this -> GLenum.t) =
      fun (x8466 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8466) "TEXTURE8")
    let (get_TEXTURE9 : 'tags this -> GLenum.t) =
      fun (x8468 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8468) "TEXTURE9")
    let (get_TEXTURE_2D : 'tags this -> GLenum.t) =
      fun (x8470 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8470) "TEXTURE_2D")
    let (get_TEXTURE_BINDING_2D : 'tags this -> GLenum.t) =
      fun (x8472 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8472)
             "TEXTURE_BINDING_2D")
    let (get_TEXTURE_BINDING_CUBE_MAP : 'tags this -> GLenum.t) =
      fun (x8474 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8474)
             "TEXTURE_BINDING_CUBE_MAP")
    let (get_TEXTURE_CUBE_MAP : 'tags this -> GLenum.t) =
      fun (x8476 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8476) "TEXTURE_CUBE_MAP")
    let (get_TEXTURE_CUBE_MAP_NEGATIVE_X : 'tags this -> GLenum.t) =
      fun (x8478 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8478)
             "TEXTURE_CUBE_MAP_NEGATIVE_X")
    let (get_TEXTURE_CUBE_MAP_NEGATIVE_Y : 'tags this -> GLenum.t) =
      fun (x8480 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8480)
             "TEXTURE_CUBE_MAP_NEGATIVE_Y")
    let (get_TEXTURE_CUBE_MAP_NEGATIVE_Z : 'tags this -> GLenum.t) =
      fun (x8482 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8482)
             "TEXTURE_CUBE_MAP_NEGATIVE_Z")
    let (get_TEXTURE_CUBE_MAP_POSITIVE_X : 'tags this -> GLenum.t) =
      fun (x8484 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8484)
             "TEXTURE_CUBE_MAP_POSITIVE_X")
    let (get_TEXTURE_CUBE_MAP_POSITIVE_Y : 'tags this -> GLenum.t) =
      fun (x8486 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8486)
             "TEXTURE_CUBE_MAP_POSITIVE_Y")
    let (get_TEXTURE_CUBE_MAP_POSITIVE_Z : 'tags this -> GLenum.t) =
      fun (x8488 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8488)
             "TEXTURE_CUBE_MAP_POSITIVE_Z")
    let (get_TEXTURE_MAG_FILTER : 'tags this -> GLenum.t) =
      fun (x8490 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8490)
             "TEXTURE_MAG_FILTER")
    let (get_TEXTURE_MIN_FILTER : 'tags this -> GLenum.t) =
      fun (x8492 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8492)
             "TEXTURE_MIN_FILTER")
    let (get_TEXTURE_WRAP_S : 'tags this -> GLenum.t) =
      fun (x8494 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8494) "TEXTURE_WRAP_S")
    let (get_TEXTURE_WRAP_T : 'tags this -> GLenum.t) =
      fun (x8496 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8496) "TEXTURE_WRAP_T")
    let (get_TRIANGLES : 'tags this -> GLenum.t) =
      fun (x8498 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8498) "TRIANGLES")
    let (get_TRIANGLE_FAN : 'tags this -> GLenum.t) =
      fun (x8500 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8500) "TRIANGLE_FAN")
    let (get_TRIANGLE_STRIP : 'tags this -> GLenum.t) =
      fun (x8502 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8502) "TRIANGLE_STRIP")
    let (get_UNPACK_ALIGNMENT : 'tags this -> GLenum.t) =
      fun (x8504 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8504) "UNPACK_ALIGNMENT")
    let (get_UNPACK_COLORSPACE_CONVERSION_WEBGL : 'tags this -> GLenum.t) =
      fun (x8506 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8506)
             "UNPACK_COLORSPACE_CONVERSION_WEBGL")
    let (get_UNPACK_FLIP_Y_WEBGL : 'tags this -> GLenum.t) =
      fun (x8508 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8508)
             "UNPACK_FLIP_Y_WEBGL")
    let (get_UNPACK_PREMULTIPLY_ALPHA_WEBGL : 'tags this -> GLenum.t) =
      fun (x8510 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8510)
             "UNPACK_PREMULTIPLY_ALPHA_WEBGL")
    let (get_UNSIGNED_BYTE : 'tags this -> GLenum.t) =
      fun (x8512 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8512) "UNSIGNED_BYTE")
    let (get_UNSIGNED_INT : 'tags this -> GLenum.t) =
      fun (x8514 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8514) "UNSIGNED_INT")
    let (get_UNSIGNED_SHORT : 'tags this -> GLenum.t) =
      fun (x8516 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8516) "UNSIGNED_SHORT")
    let (get_UNSIGNED_SHORT_4_4_4_4 : 'tags this -> GLenum.t) =
      fun (x8518 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8518)
             "UNSIGNED_SHORT_4_4_4_4")
    let (get_UNSIGNED_SHORT_5_5_5_1 : 'tags this -> GLenum.t) =
      fun (x8520 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8520)
             "UNSIGNED_SHORT_5_5_5_1")
    let (get_UNSIGNED_SHORT_5_6_5 : 'tags this -> GLenum.t) =
      fun (x8522 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8522)
             "UNSIGNED_SHORT_5_6_5")
    let (get_VALIDATE_STATUS : 'tags this -> GLenum.t) =
      fun (x8524 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8524) "VALIDATE_STATUS")
    let (get_VENDOR : 'tags this -> GLenum.t) =
      fun (x8526 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8526) "VENDOR")
    let (get_VERSION : 'tags this -> GLenum.t) =
      fun (x8528 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8528) "VERSION")
    let (get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x8530 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8530)
             "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING")
    let (get_VERTEX_ATTRIB_ARRAY_ENABLED : 'tags this -> GLenum.t) =
      fun (x8532 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8532)
             "VERTEX_ATTRIB_ARRAY_ENABLED")
    let (get_VERTEX_ATTRIB_ARRAY_NORMALIZED : 'tags this -> GLenum.t) =
      fun (x8534 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8534)
             "VERTEX_ATTRIB_ARRAY_NORMALIZED")
    let (get_VERTEX_ATTRIB_ARRAY_POINTER : 'tags this -> GLenum.t) =
      fun (x8536 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8536)
             "VERTEX_ATTRIB_ARRAY_POINTER")
    let (get_VERTEX_ATTRIB_ARRAY_SIZE : 'tags this -> GLenum.t) =
      fun (x8538 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8538)
             "VERTEX_ATTRIB_ARRAY_SIZE")
    let (get_VERTEX_ATTRIB_ARRAY_STRIDE : 'tags this -> GLenum.t) =
      fun (x8540 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8540)
             "VERTEX_ATTRIB_ARRAY_STRIDE")
    let (get_VERTEX_ATTRIB_ARRAY_TYPE : 'tags this -> GLenum.t) =
      fun (x8542 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8542)
             "VERTEX_ATTRIB_ARRAY_TYPE")
    let (get_VERTEX_SHADER : 'tags this -> GLenum.t) =
      fun (x8544 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8544) "VERTEX_SHADER")
    let (get_VIEWPORT : 'tags this -> GLenum.t) =
      fun (x8546 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8546) "VIEWPORT")
    let (get_ZERO : 'tags this -> GLenum.t) =
      fun (x8548 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8548) "ZERO")
    let (vertexAttrib1fv' :
      'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x8553 : 'tags this) ->
        fun ~index:(x8550 : GLuint.t) ->
          fun ~values:(x8551 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x8553) "vertexAttrib1fv"
                 [|(GLuint.t_to_js x8550);(Iterable.t_1_to_js GLfloat.t_to_js
                                             x8551)|])
    let (vertexAttrib2fv' :
      'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x8558 : 'tags this) ->
        fun ~index:(x8555 : GLuint.t) ->
          fun ~values:(x8556 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x8558) "vertexAttrib2fv"
                 [|(GLuint.t_to_js x8555);(Iterable.t_1_to_js GLfloat.t_to_js
                                             x8556)|])
    let (vertexAttrib3fv' :
      'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x8563 : 'tags this) ->
        fun ~index:(x8560 : GLuint.t) ->
          fun ~values:(x8561 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x8563) "vertexAttrib3fv"
                 [|(GLuint.t_to_js x8560);(Iterable.t_1_to_js GLfloat.t_to_js
                                             x8561)|])
    let (vertexAttrib4fv' :
      'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x8568 : 'tags this) ->
        fun ~index:(x8565 : GLuint.t) ->
          fun ~values:(x8566 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x8568) "vertexAttrib4fv"
                 [|(GLuint.t_to_js x8565);(Iterable.t_1_to_js GLfloat.t_to_js
                                             x8566)|])
    let cast_from = Obj.magic
  end
module WebGLRenderingContext =
  struct
    type t =
      [ `WebGLRenderingContext  | `WebGLRenderingContextBase 
      | `WebGLRenderingContextOverloads ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8571 : Ojs.t) -> t_of_js x8571
    and t_0_to_js : t_0 -> Ojs.t = fun (x8570 : t) -> t_to_js x8570
    type tags =
      [ `WebGLRenderingContext  | `WebGLRenderingContextBase 
      | `WebGLRenderingContextOverloads ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLRenderingContext ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x8574 : Ojs.t) -> intf_of_js __tags_of_js x8574
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x8572 : __tags intf) -> intf_to_js __tags_to_js x8572
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") 
             [||])
    let (active_attributes : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ACTIVE_ATTRIBUTES")
    let (active_texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ACTIVE_TEXTURE")
    let (active_uniforms : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ACTIVE_UNIFORMS")
    let (aliased_line_width_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ALIASED_LINE_WIDTH_RANGE")
    let (aliased_point_size_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ALIASED_POINT_SIZE_RANGE")
    let (alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "ALPHA")
    let (alpha_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ALPHA_BITS")
    let (always : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "ALWAYS")
    let (array_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ARRAY_BUFFER")
    let (array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ARRAY_BUFFER_BINDING")
    let (attached_shaders : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ATTACHED_SHADERS")
    let (back : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "BACK")
    let (blend : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "BLEND")
    let (blend_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_COLOR")
    let (blend_dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_DST_ALPHA")
    let (blend_dst_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_DST_RGB")
    let (blend_equation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_EQUATION")
    let (blend_equation_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_EQUATION_ALPHA")
    let (blend_equation_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_EQUATION_RGB")
    let (blend_src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_SRC_ALPHA")
    let (blend_src_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_SRC_RGB")
    let (blue_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLUE_BITS")
    let (bool : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "BOOL")
    let (bool_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BOOL_VEC2")
    let (bool_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BOOL_VEC3")
    let (bool_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BOOL_VEC4")
    let (browser_default_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BROWSER_DEFAULT_WEBGL")
    let (buffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BUFFER_SIZE")
    let (buffer_usage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BUFFER_USAGE")
    let (byte : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "BYTE")
    let (ccw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "CCW")
    let (clamp_to_edge : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CLAMP_TO_EDGE")
    let (color_attachment0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COLOR_ATTACHMENT0")
    let (color_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COLOR_BUFFER_BIT")
    let (color_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COLOR_CLEAR_VALUE")
    let (color_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COLOR_WRITEMASK")
    let (compile_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COMPILE_STATUS")
    let (compressed_texture_formats : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COMPRESSED_TEXTURE_FORMATS")
    let (constant_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CONSTANT_ALPHA")
    let (constant_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CONSTANT_COLOR")
    let (context_lost_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CONTEXT_LOST_WEBGL")
    let (cull_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CULL_FACE")
    let (cull_face_mode : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CULL_FACE_MODE")
    let (current_program : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CURRENT_PROGRAM")
    let (current_vertex_attrib : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CURRENT_VERTEX_ATTRIB")
    let (cw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "CW")
    let (decr : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "DECR")
    let (decr_wrap : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DECR_WRAP")
    let (delete_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DELETE_STATUS")
    let (depth_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_ATTACHMENT")
    let (depth_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_BITS")
    let (depth_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_BUFFER_BIT")
    let (depth_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_CLEAR_VALUE")
    let (depth_component : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_COMPONENT")
    let (depth_component16 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_COMPONENT16")
    let (depth_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_FUNC")
    let (depth_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_RANGE")
    let (depth_stencil : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_STENCIL")
    let (depth_stencil_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_STENCIL_ATTACHMENT")
    let (depth_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_TEST")
    let (depth_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_WRITEMASK")
    let (dither : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "DITHER")
    let (dont_care : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DONT_CARE")
    let (dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DST_ALPHA")
    let (dst_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DST_COLOR")
    let (dynamic_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DYNAMIC_DRAW")
    let (element_array_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ELEMENT_ARRAY_BUFFER")
    let (element_array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ELEMENT_ARRAY_BUFFER_BINDING")
    let (equal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "EQUAL")
    let (fastest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FASTEST")
    let (float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "FLOAT")
    let (float_mat2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_MAT2")
    let (float_mat3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_MAT3")
    let (float_mat4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_MAT4")
    let (float_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_VEC2")
    let (float_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_VEC3")
    let (float_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_VEC4")
    let (fragment_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAGMENT_SHADER")
    let (framebuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER")
    let (framebuffer_attachment_object_name : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME")
    let (framebuffer_attachment_object_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE")
    let (framebuffer_attachment_texture_cube_map_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE")
    let (framebuffer_attachment_texture_level : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL")
    let (framebuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_BINDING")
    let (framebuffer_complete : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_COMPLETE")
    let (framebuffer_incomplete_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_INCOMPLETE_ATTACHMENT")
    let (framebuffer_incomplete_dimensions : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_INCOMPLETE_DIMENSIONS")
    let (framebuffer_incomplete_missing_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT")
    let (framebuffer_unsupported : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_UNSUPPORTED")
    let (front : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "FRONT")
    let (front_and_back : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRONT_AND_BACK")
    let (front_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRONT_FACE")
    let (func_add : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FUNC_ADD")
    let (func_reverse_subtract : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FUNC_REVERSE_SUBTRACT")
    let (func_subtract : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FUNC_SUBTRACT")
    let (generate_mipmap_hint : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "GENERATE_MIPMAP_HINT")
    let (gequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "GEQUAL")
    let (greater : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "GREATER")
    let (green_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "GREEN_BITS")
    let (high_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "HIGH_FLOAT")
    let (high_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "HIGH_INT")
    let (implementation_color_read_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "IMPLEMENTATION_COLOR_READ_FORMAT")
    let (implementation_color_read_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "IMPLEMENTATION_COLOR_READ_TYPE")
    let (incr : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "INCR")
    let (incr_wrap : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INCR_WRAP")
    let (int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "INT")
    let (int_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INT_VEC2")
    let (int_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INT_VEC3")
    let (int_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INT_VEC4")
    let (invalid_enum : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INVALID_ENUM")
    let (invalid_framebuffer_operation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INVALID_FRAMEBUFFER_OPERATION")
    let (invalid_operation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INVALID_OPERATION")
    let (invalid_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INVALID_VALUE")
    let (invert : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "INVERT")
    let (keep : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "KEEP")
    let (lequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "LEQUAL")
    let (less : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "LESS")
    let (linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "LINEAR")
    let (linear_mipmap_linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINEAR_MIPMAP_LINEAR")
    let (linear_mipmap_nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINEAR_MIPMAP_NEAREST")
    let (lines : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "LINES")
    let (line_loop : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINE_LOOP")
    let (line_strip : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINE_STRIP")
    let (line_width : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINE_WIDTH")
    let (link_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINK_STATUS")
    let (low_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LOW_FLOAT")
    let (low_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LOW_INT")
    let (luminance : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LUMINANCE")
    let (luminance_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LUMINANCE_ALPHA")
    let (max_combined_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_COMBINED_TEXTURE_IMAGE_UNITS")
    let (max_cube_map_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_CUBE_MAP_TEXTURE_SIZE")
    let (max_fragment_uniform_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_FRAGMENT_UNIFORM_VECTORS")
    let (max_renderbuffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_RENDERBUFFER_SIZE")
    let (max_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_TEXTURE_IMAGE_UNITS")
    let (max_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_TEXTURE_SIZE")
    let (max_varying_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VARYING_VECTORS")
    let (max_vertex_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VERTEX_ATTRIBS")
    let (max_vertex_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VERTEX_TEXTURE_IMAGE_UNITS")
    let (max_vertex_uniform_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VERTEX_UNIFORM_VECTORS")
    let (max_viewport_dims : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VIEWPORT_DIMS")
    let (medium_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MEDIUM_FLOAT")
    let (medium_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MEDIUM_INT")
    let (mirrored_repeat : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MIRRORED_REPEAT")
    let (nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NEAREST")
    let (nearest_mipmap_linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NEAREST_MIPMAP_LINEAR")
    let (nearest_mipmap_nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NEAREST_MIPMAP_NEAREST")
    let (never : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "NEVER")
    let (nicest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "NICEST")
    let (none : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "NONE")
    let (notequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NOTEQUAL")
    let (no_error : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NO_ERROR")
    let (one : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "ONE")
    let (one_minus_constant_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_CONSTANT_ALPHA")
    let (one_minus_constant_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_CONSTANT_COLOR")
    let (one_minus_dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_DST_ALPHA")
    let (one_minus_dst_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_DST_COLOR")
    let (one_minus_src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_SRC_ALPHA")
    let (one_minus_src_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_SRC_COLOR")
    let (out_of_memory : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "OUT_OF_MEMORY")
    let (pack_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "PACK_ALIGNMENT")
    let (points : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "POINTS")
    let (polygon_offset_factor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "POLYGON_OFFSET_FACTOR")
    let (polygon_offset_fill : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "POLYGON_OFFSET_FILL")
    let (polygon_offset_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "POLYGON_OFFSET_UNITS")
    let (red_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RED_BITS")
    let (renderbuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER")
    let (renderbuffer_alpha_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_ALPHA_SIZE")
    let (renderbuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_BINDING")
    let (renderbuffer_blue_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_BLUE_SIZE")
    let (renderbuffer_depth_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_DEPTH_SIZE")
    let (renderbuffer_green_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_GREEN_SIZE")
    let (renderbuffer_height : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_HEIGHT")
    let (renderbuffer_internal_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_INTERNAL_FORMAT")
    let (renderbuffer_red_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_RED_SIZE")
    let (renderbuffer_stencil_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_STENCIL_SIZE")
    let (renderbuffer_width : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_WIDTH")
    let (renderer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERER")
    let (repeat : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "REPEAT")
    let (replace : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "REPLACE")
    let (rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "RGB")
    let (rgb565 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "RGB565")
    let (rgb5_a1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RGB5_A1")
    let (rgba : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "RGBA")
    let (rgba4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "RGBA4")
    let (sampler_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLER_2D")
    let (sampler_cube : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLER_CUBE")
    let (samples : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLES")
    let (sample_alpha_to_coverage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_ALPHA_TO_COVERAGE")
    let (sample_buffers : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_BUFFERS")
    let (sample_coverage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_COVERAGE")
    let (sample_coverage_invert : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_COVERAGE_INVERT")
    let (sample_coverage_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_COVERAGE_VALUE")
    let (scissor_box : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SCISSOR_BOX")
    let (scissor_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SCISSOR_TEST")
    let (shader_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SHADER_TYPE")
    let (shading_language_version : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SHADING_LANGUAGE_VERSION")
    let (short : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "SHORT")
    let (src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SRC_ALPHA")
    let (src_alpha_saturate : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SRC_ALPHA_SATURATE")
    let (src_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SRC_COLOR")
    let (static_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STATIC_DRAW")
    let (stencil_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_ATTACHMENT")
    let (stencil_back_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_FAIL")
    let (stencil_back_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_FUNC")
    let (stencil_back_pass_depth_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_PASS_DEPTH_FAIL")
    let (stencil_back_pass_depth_pass : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_PASS_DEPTH_PASS")
    let (stencil_back_ref : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_REF")
    let (stencil_back_value_mask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_VALUE_MASK")
    let (stencil_back_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_WRITEMASK")
    let (stencil_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BITS")
    let (stencil_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BUFFER_BIT")
    let (stencil_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_CLEAR_VALUE")
    let (stencil_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_FAIL")
    let (stencil_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_FUNC")
    let (stencil_index8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_INDEX8")
    let (stencil_pass_depth_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_PASS_DEPTH_FAIL")
    let (stencil_pass_depth_pass : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_PASS_DEPTH_PASS")
    let (stencil_ref : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_REF")
    let (stencil_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_TEST")
    let (stencil_value_mask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_VALUE_MASK")
    let (stencil_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_WRITEMASK")
    let (stream_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STREAM_DRAW")
    let (subpixel_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SUBPIXEL_BITS")
    let (texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE")
    let (texture0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE0")
    let (texture1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE1")
    let (texture10 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE10")
    let (texture11 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE11")
    let (texture12 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE12")
    let (texture13 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE13")
    let (texture14 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE14")
    let (texture15 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE15")
    let (texture16 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE16")
    let (texture17 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE17")
    let (texture18 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE18")
    let (texture19 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE19")
    let (texture2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE2")
    let (texture20 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE20")
    let (texture21 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE21")
    let (texture22 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE22")
    let (texture23 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE23")
    let (texture24 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE24")
    let (texture25 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE25")
    let (texture26 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE26")
    let (texture27 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE27")
    let (texture28 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE28")
    let (texture29 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE29")
    let (texture3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE3")
    let (texture30 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE30")
    let (texture31 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE31")
    let (texture4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE4")
    let (texture5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE5")
    let (texture6 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE6")
    let (texture7 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE7")
    let (texture8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE8")
    let (texture9 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE9")
    let (texture_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_2D")
    let (texture_binding_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_BINDING_2D")
    let (texture_binding_cube_map : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_BINDING_CUBE_MAP")
    let (texture_cube_map : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP")
    let (texture_cube_map_negative_x : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_X")
    let (texture_cube_map_negative_y : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_Y")
    let (texture_cube_map_negative_z : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_Z")
    let (texture_cube_map_positive_x : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_X")
    let (texture_cube_map_positive_y : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_Y")
    let (texture_cube_map_positive_z : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_Z")
    let (texture_mag_filter : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_MAG_FILTER")
    let (texture_min_filter : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_MIN_FILTER")
    let (texture_wrap_s : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_WRAP_S")
    let (texture_wrap_t : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_WRAP_T")
    let (triangles : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TRIANGLES")
    let (triangle_fan : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TRIANGLE_FAN")
    let (triangle_strip : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TRIANGLE_STRIP")
    let (unpack_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNPACK_ALIGNMENT")
    let (unpack_colorspace_conversion_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNPACK_COLORSPACE_CONVERSION_WEBGL")
    let (unpack_flip_y_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNPACK_FLIP_Y_WEBGL")
    let (unpack_premultiply_alpha_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNPACK_PREMULTIPLY_ALPHA_WEBGL")
    let (unsigned_byte : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_BYTE")
    let (unsigned_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_INT")
    let (unsigned_short : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_SHORT")
    let (unsigned_short_4_4_4_4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_SHORT_4_4_4_4")
    let (unsigned_short_5_5_5_1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_SHORT_5_5_5_1")
    let (unsigned_short_5_6_5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_SHORT_5_6_5")
    let (validate_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VALIDATE_STATUS")
    let (vendor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "VENDOR")
    let (version : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERSION")
    let (vertex_attrib_array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING")
    let (vertex_attrib_array_enabled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_ENABLED")
    let (vertex_attrib_array_normalized : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_NORMALIZED")
    let (vertex_attrib_array_pointer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_POINTER")
    let (vertex_attrib_array_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_SIZE")
    let (vertex_attrib_array_stride : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_STRIDE")
    let (vertex_attrib_array_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_TYPE")
    let (vertex_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_SHADER")
    let (viewport : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VIEWPORT")
    let (zero : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "ZERO")
  end
module WebGLContextEventInit =
  struct
    type t = [ `EventInit  | `WebGLContextEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8577 : Ojs.t) -> t_of_js x8577
    and t_0_to_js : t_0 -> Ojs.t = fun (x8576 : t) -> t_to_js x8576
    type tags = [ `EventInit  | `WebGLContextEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLContextEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x8580 : Ojs.t) -> intf_of_js __tags_of_js x8580
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x8578 : __tags intf) -> intf_to_js __tags_to_js x8578
    let (get_statusMessage : 'tags this -> string option) =
      fun (x8582 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8582) "statusMessage")
    let (set_statusMessage : 'tags this -> string -> unit) =
      fun (x8585 : 'tags this) ->
        fun (x8586 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8585) "statusMessage"
            (Ojs.string_to_js x8586)
    let (create : ?statusMessage:string -> unit -> t) =
      fun ?statusMessage:(x8588 : string option) ->
        fun () ->
          let x8589 = Ojs.empty_obj () in
          (match x8588 with
           | Some x8590 ->
               Ojs.set_prop_ascii x8589 "statusMessage"
                 (Ojs.string_to_js x8590)
           | None -> ());
          t_of_js x8589
    let cast_from = Obj.magic
  end
module WebGLContextEvent =
  struct
    type t = [ `Event  | `WebGLContextEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8592 : Ojs.t) -> t_of_js x8592
    and t_0_to_js : t_0 -> Ojs.t = fun (x8591 : t) -> t_to_js x8591
    type tags = [ `Event  | `WebGLContextEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLContextEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x8595 : Ojs.t) -> intf_of_js __tags_of_js x8595
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x8593 : __tags intf) -> intf_to_js __tags_to_js x8593
    let (get_statusMessage : 'tags this -> string) =
      fun (x8597 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8597) "statusMessage")
    let (create : statusMessage:string -> unit -> t) =
      fun ~statusMessage:(x8599 : string) ->
        fun () ->
          let x8600 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x8600 "statusMessage" (Ojs.string_to_js x8599);
          t_of_js x8600
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLContextEvent") "prototype")
    let (create' :
      type_:string -> ?eventInit:WebGLContextEventInit.t -> unit -> t) =
      fun ~type_:(x8601 : string) ->
        fun ?eventInit:(x8602 : WebGLContextEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "WebGLContextEvent")
                 (let x8603 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x8603 "push" [|(Ojs.string_to_js x8601)|]);
                  (match x8602 with
                   | Some x8604 ->
                       ignore
                         (Ojs.call x8603 "push"
                            [|(WebGLContextEventInit.t_to_js x8604)|])
                   | None -> ());
                  x8603))
  end
module WebGL2RenderingContextOverloads =
  struct
    type t = [ `WebGL2RenderingContextOverloads ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8606 : Ojs.t) -> t_of_js x8606
    and t_0_to_js : t_0 -> Ojs.t = fun (x8605 : t) -> t_to_js x8605
    type tags = [ `WebGL2RenderingContextOverloads ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGL2RenderingContextOverloads ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x8609 : Ojs.t) -> intf_of_js __tags_of_js x8609
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x8607 : __tags intf) -> intf_to_js __tags_to_js x8607
    let (bufferData :
      'tags this ->
        target:GLenum.t -> size:GLsizeiptr.t -> usage:GLenum.t -> unit)
      =
      fun (x8614 : 'tags this) ->
        fun ~target:(x8611 : GLenum.t) ->
          fun ~size:(x8612 : GLsizeiptr.t) ->
            fun ~usage:(x8613 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x8614) "bufferData"
                   [|(GLenum.t_to_js x8611);(GLsizeiptr.t_to_js x8612);(
                     GLenum.t_to_js x8613)|])
    let (bufferData' :
      'tags this ->
        target:GLenum.t ->
          srcData:BufferSource.t option -> usage:GLenum.t -> unit)
      =
      fun (x8620 : 'tags this) ->
        fun ~target:(x8616 : GLenum.t) ->
          fun ~srcData:(x8617 : BufferSource.t option) ->
            fun ~usage:(x8619 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x8620) "bufferData"
                   [|(GLenum.t_to_js x8616);(Ojs.option_to_js
                                               BufferSource.t_to_js x8617);(
                     GLenum.t_to_js x8619)|])
    let (bufferData'' :
      'tags this ->
        target:GLenum.t ->
          srcData:ArrayBufferView.t_0 ->
            usage:GLenum.t ->
              srcOffset:GLuint.t -> ?length:GLuint.t -> unit -> unit)
      =
      fun (x8629 : 'tags this) ->
        fun ~target:(x8622 : GLenum.t) ->
          fun ~srcData:(x8623 : ArrayBufferView.t_0) ->
            fun ~usage:(x8624 : GLenum.t) ->
              fun ~srcOffset:(x8625 : GLuint.t) ->
                fun ?length:(x8626 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8631 = this_to_js Obj.magic x8629 in
                       Ojs.call (Ojs.get_prop_ascii x8631 "bufferData")
                         "apply"
                         [|x8631;((let x8627 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8627 "push"
                                        [|(GLenum.t_to_js x8622)|]);
                                   ignore
                                     (Ojs.call x8627 "push"
                                        [|(ArrayBufferView.t_0_to_js x8623)|]);
                                   ignore
                                     (Ojs.call x8627 "push"
                                        [|(GLenum.t_to_js x8624)|]);
                                   ignore
                                     (Ojs.call x8627 "push"
                                        [|(GLuint.t_to_js x8625)|]);
                                   (match x8626 with
                                    | Some x8628 ->
                                        ignore
                                          (Ojs.call x8627 "push"
                                             [|(GLuint.t_to_js x8628)|])
                                    | None -> ());
                                   x8627))|])
    let (bufferSubData :
      'tags this ->
        target:GLenum.t ->
          dstByteOffset:GLintptr.t -> srcData:BufferSource.t -> unit)
      =
      fun (x8635 : 'tags this) ->
        fun ~target:(x8632 : GLenum.t) ->
          fun ~dstByteOffset:(x8633 : GLintptr.t) ->
            fun ~srcData:(x8634 : BufferSource.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x8635) "bufferSubData"
                   [|(GLenum.t_to_js x8632);(GLintptr.t_to_js x8633);(
                     BufferSource.t_to_js x8634)|])
    let (bufferSubData' :
      'tags this ->
        target:GLenum.t ->
          dstByteOffset:GLintptr.t ->
            srcData:ArrayBufferView.t_0 ->
              srcOffset:GLuint.t -> ?length:GLuint.t -> unit -> unit)
      =
      fun (x8644 : 'tags this) ->
        fun ~target:(x8637 : GLenum.t) ->
          fun ~dstByteOffset:(x8638 : GLintptr.t) ->
            fun ~srcData:(x8639 : ArrayBufferView.t_0) ->
              fun ~srcOffset:(x8640 : GLuint.t) ->
                fun ?length:(x8641 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8646 = this_to_js Obj.magic x8644 in
                       Ojs.call (Ojs.get_prop_ascii x8646 "bufferSubData")
                         "apply"
                         [|x8646;((let x8642 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8642 "push"
                                        [|(GLenum.t_to_js x8637)|]);
                                   ignore
                                     (Ojs.call x8642 "push"
                                        [|(GLintptr.t_to_js x8638)|]);
                                   ignore
                                     (Ojs.call x8642 "push"
                                        [|(ArrayBufferView.t_0_to_js x8639)|]);
                                   ignore
                                     (Ojs.call x8642 "push"
                                        [|(GLuint.t_to_js x8640)|]);
                                   (match x8641 with
                                    | Some x8643 ->
                                        ignore
                                          (Ojs.call x8642 "push"
                                             [|(GLuint.t_to_js x8643)|])
                                    | None -> ());
                                   x8642))|])
    let (compressedTexImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    imageSize:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x8655 : 'tags this) ->
        fun ~target:(x8647 : GLenum.t) ->
          fun ~level:(x8648 : GLint.t) ->
            fun ~internalformat:(x8649 : GLenum.t) ->
              fun ~width:(x8650 : GLsizei.t) ->
                fun ~height:(x8651 : GLsizei.t) ->
                  fun ~border:(x8652 : GLint.t) ->
                    fun ~imageSize:(x8653 : GLsizei.t) ->
                      fun ~offset:(x8654 : GLintptr.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x8655)
                             "compressedTexImage2D"
                             [|(GLenum.t_to_js x8647);(GLint.t_to_js x8648);(
                               GLenum.t_to_js x8649);(GLsizei.t_to_js x8650);(
                               GLsizei.t_to_js x8651);(GLint.t_to_js x8652);(
                               GLsizei.t_to_js x8653);(GLintptr.t_to_js x8654)|])
    let (compressedTexImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    srcData:ArrayBufferView.t_0 ->
                      ?srcOffset:GLuint.t ->
                        ?srcLengthOverride:GLuint.t -> unit -> unit)
      =
      fun (x8669 : 'tags this) ->
        fun ~target:(x8657 : GLenum.t) ->
          fun ~level:(x8658 : GLint.t) ->
            fun ~internalformat:(x8659 : GLenum.t) ->
              fun ~width:(x8660 : GLsizei.t) ->
                fun ~height:(x8661 : GLsizei.t) ->
                  fun ~border:(x8662 : GLint.t) ->
                    fun ~srcData:(x8663 : ArrayBufferView.t_0) ->
                      fun ?srcOffset:(x8664 : GLuint.t option) ->
                        fun ?srcLengthOverride:(x8665 : GLuint.t option) ->
                          fun () ->
                            ignore
                              (let x8671 = this_to_js Obj.magic x8669 in
                               Ojs.call
                                 (Ojs.get_prop_ascii x8671
                                    "compressedTexImage2D") "apply"
                                 [|x8671;((let x8666 =
                                             Ojs.new_obj
                                               (Ojs.get_prop_ascii Ojs.global
                                                  "Array") [||] in
                                           ignore
                                             (Ojs.call x8666 "push"
                                                [|(GLenum.t_to_js x8657)|]);
                                           ignore
                                             (Ojs.call x8666 "push"
                                                [|(GLint.t_to_js x8658)|]);
                                           ignore
                                             (Ojs.call x8666 "push"
                                                [|(GLenum.t_to_js x8659)|]);
                                           ignore
                                             (Ojs.call x8666 "push"
                                                [|(GLsizei.t_to_js x8660)|]);
                                           ignore
                                             (Ojs.call x8666 "push"
                                                [|(GLsizei.t_to_js x8661)|]);
                                           ignore
                                             (Ojs.call x8666 "push"
                                                [|(GLint.t_to_js x8662)|]);
                                           ignore
                                             (Ojs.call x8666 "push"
                                                [|(ArrayBufferView.t_0_to_js
                                                     x8663)|]);
                                           (match x8664 with
                                            | Some x8668 ->
                                                ignore
                                                  (Ojs.call x8666 "push"
                                                     [|(GLuint.t_to_js x8668)|])
                                            | None -> ());
                                           (match x8665 with
                                            | Some x8667 ->
                                                ignore
                                                  (Ojs.call x8666 "push"
                                                     [|(GLuint.t_to_js x8667)|])
                                            | None -> ());
                                           x8666))|])
    let (compressedTexSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      imageSize:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x8681 : 'tags this) ->
        fun ~target:(x8672 : GLenum.t) ->
          fun ~level:(x8673 : GLint.t) ->
            fun ~xoffset:(x8674 : GLint.t) ->
              fun ~yoffset:(x8675 : GLint.t) ->
                fun ~width:(x8676 : GLsizei.t) ->
                  fun ~height:(x8677 : GLsizei.t) ->
                    fun ~format:(x8678 : GLenum.t) ->
                      fun ~imageSize:(x8679 : GLsizei.t) ->
                        fun ~offset:(x8680 : GLintptr.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8681)
                               "compressedTexSubImage2D"
                               [|(GLenum.t_to_js x8672);(GLint.t_to_js x8673);(
                                 GLint.t_to_js x8674);(GLint.t_to_js x8675);(
                                 GLsizei.t_to_js x8676);(GLsizei.t_to_js
                                                           x8677);(GLenum.t_to_js
                                                                    x8678);(
                                 GLsizei.t_to_js x8679);(GLintptr.t_to_js
                                                           x8680)|])
    let (compressedTexSubImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      srcData:ArrayBufferView.t_0 ->
                        ?srcOffset:GLuint.t ->
                          ?srcLengthOverride:GLuint.t -> unit -> unit)
      =
      fun (x8696 : 'tags this) ->
        fun ~target:(x8683 : GLenum.t) ->
          fun ~level:(x8684 : GLint.t) ->
            fun ~xoffset:(x8685 : GLint.t) ->
              fun ~yoffset:(x8686 : GLint.t) ->
                fun ~width:(x8687 : GLsizei.t) ->
                  fun ~height:(x8688 : GLsizei.t) ->
                    fun ~format:(x8689 : GLenum.t) ->
                      fun ~srcData:(x8690 : ArrayBufferView.t_0) ->
                        fun ?srcOffset:(x8691 : GLuint.t option) ->
                          fun ?srcLengthOverride:(x8692 : GLuint.t option) ->
                            fun () ->
                              ignore
                                (let x8698 = this_to_js Obj.magic x8696 in
                                 Ojs.call
                                   (Ojs.get_prop_ascii x8698
                                      "compressedTexSubImage2D") "apply"
                                   [|x8698;((let x8693 =
                                               Ojs.new_obj
                                                 (Ojs.get_prop_ascii
                                                    Ojs.global "Array") 
                                                 [||] in
                                             ignore
                                               (Ojs.call x8693 "push"
                                                  [|(GLenum.t_to_js x8683)|]);
                                             ignore
                                               (Ojs.call x8693 "push"
                                                  [|(GLint.t_to_js x8684)|]);
                                             ignore
                                               (Ojs.call x8693 "push"
                                                  [|(GLint.t_to_js x8685)|]);
                                             ignore
                                               (Ojs.call x8693 "push"
                                                  [|(GLint.t_to_js x8686)|]);
                                             ignore
                                               (Ojs.call x8693 "push"
                                                  [|(GLsizei.t_to_js x8687)|]);
                                             ignore
                                               (Ojs.call x8693 "push"
                                                  [|(GLsizei.t_to_js x8688)|]);
                                             ignore
                                               (Ojs.call x8693 "push"
                                                  [|(GLenum.t_to_js x8689)|]);
                                             ignore
                                               (Ojs.call x8693 "push"
                                                  [|(ArrayBufferView.t_0_to_js
                                                       x8690)|]);
                                             (match x8691 with
                                              | Some x8695 ->
                                                  ignore
                                                    (Ojs.call x8693 "push"
                                                       [|(GLuint.t_to_js
                                                            x8695)|])
                                              | None -> ());
                                             (match x8692 with
                                              | Some x8694 ->
                                                  ignore
                                                    (Ojs.call x8693 "push"
                                                       [|(GLuint.t_to_js
                                                            x8694)|])
                                              | None -> ());
                                             x8693))|])
    let (readPixels :
      'tags this ->
        x:GLint.t ->
          y:GLint.t ->
            width:GLsizei.t ->
              height:GLsizei.t ->
                format:GLenum.t ->
                  type_:GLenum.t ->
                    dstData:ArrayBufferView.t_0 option -> unit)
      =
      fun (x8707 : 'tags this) ->
        fun ~x:(x8699 : GLint.t) ->
          fun ~y:(x8700 : GLint.t) ->
            fun ~width:(x8701 : GLsizei.t) ->
              fun ~height:(x8702 : GLsizei.t) ->
                fun ~format:(x8703 : GLenum.t) ->
                  fun ~type_:(x8704 : GLenum.t) ->
                    fun ~dstData:(x8705 : ArrayBufferView.t_0 option) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x8707) "readPixels"
                           [|(GLint.t_to_js x8699);(GLint.t_to_js x8700);(
                             GLsizei.t_to_js x8701);(GLsizei.t_to_js x8702);(
                             GLenum.t_to_js x8703);(GLenum.t_to_js x8704);(
                             Ojs.option_to_js ArrayBufferView.t_0_to_js x8705)|])
    let (readPixels' :
      'tags this ->
        x:GLint.t ->
          y:GLint.t ->
            width:GLsizei.t ->
              height:GLsizei.t ->
                format:GLenum.t ->
                  type_:GLenum.t -> offset:GLintptr.t -> unit)
      =
      fun (x8716 : 'tags this) ->
        fun ~x:(x8709 : GLint.t) ->
          fun ~y:(x8710 : GLint.t) ->
            fun ~width:(x8711 : GLsizei.t) ->
              fun ~height:(x8712 : GLsizei.t) ->
                fun ~format:(x8713 : GLenum.t) ->
                  fun ~type_:(x8714 : GLenum.t) ->
                    fun ~offset:(x8715 : GLintptr.t) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x8716) "readPixels"
                           [|(GLint.t_to_js x8709);(GLint.t_to_js x8710);(
                             GLsizei.t_to_js x8711);(GLsizei.t_to_js x8712);(
                             GLenum.t_to_js x8713);(GLenum.t_to_js x8714);(
                             GLintptr.t_to_js x8715)|])
    let (readPixels'' :
      'tags this ->
        x:GLint.t ->
          y:GLint.t ->
            width:GLsizei.t ->
              height:GLsizei.t ->
                format:GLenum.t ->
                  type_:GLenum.t ->
                    dstData:ArrayBufferView.t_0 -> dstOffset:GLuint.t -> unit)
      =
      fun (x8726 : 'tags this) ->
        fun ~x:(x8718 : GLint.t) ->
          fun ~y:(x8719 : GLint.t) ->
            fun ~width:(x8720 : GLsizei.t) ->
              fun ~height:(x8721 : GLsizei.t) ->
                fun ~format:(x8722 : GLenum.t) ->
                  fun ~type_:(x8723 : GLenum.t) ->
                    fun ~dstData:(x8724 : ArrayBufferView.t_0) ->
                      fun ~dstOffset:(x8725 : GLuint.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x8726) "readPixels"
                             [|(GLint.t_to_js x8718);(GLint.t_to_js x8719);(
                               GLsizei.t_to_js x8720);(GLsizei.t_to_js x8721);(
                               GLenum.t_to_js x8722);(GLenum.t_to_js x8723);(
                               ArrayBufferView.t_0_to_js x8724);(GLuint.t_to_js
                                                                   x8725)|])
    let (texImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        pixels:ArrayBufferView.t_0 option -> unit)
      =
      fun (x8738 : 'tags this) ->
        fun ~target:(x8728 : GLenum.t) ->
          fun ~level:(x8729 : GLint.t) ->
            fun ~internalformat:(x8730 : GLint.t) ->
              fun ~width:(x8731 : GLsizei.t) ->
                fun ~height:(x8732 : GLsizei.t) ->
                  fun ~border:(x8733 : GLint.t) ->
                    fun ~format:(x8734 : GLenum.t) ->
                      fun ~type_:(x8735 : GLenum.t) ->
                        fun ~pixels:(x8736 : ArrayBufferView.t_0 option) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8738)
                               "texImage2D"
                               [|(GLenum.t_to_js x8728);(GLint.t_to_js x8729);(
                                 GLint.t_to_js x8730);(GLsizei.t_to_js x8731);(
                                 GLsizei.t_to_js x8732);(GLint.t_to_js x8733);(
                                 GLenum.t_to_js x8734);(GLenum.t_to_js x8735);(
                                 Ojs.option_to_js ArrayBufferView.t_0_to_js
                                   x8736)|])
    let (texImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              format:GLenum.t ->
                type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x8746 : 'tags this) ->
        fun ~target:(x8740 : GLenum.t) ->
          fun ~level:(x8741 : GLint.t) ->
            fun ~internalformat:(x8742 : GLint.t) ->
              fun ~format:(x8743 : GLenum.t) ->
                fun ~type_:(x8744 : GLenum.t) ->
                  fun ~source:(x8745 : TexImageSource.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x8746) "texImage2D"
                         [|(GLenum.t_to_js x8740);(GLint.t_to_js x8741);(
                           GLint.t_to_js x8742);(GLenum.t_to_js x8743);(
                           GLenum.t_to_js x8744);(TexImageSource.t_to_js
                                                    x8745)|])
    let (texImage2D'' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t -> pboOffset:GLintptr.t -> unit)
      =
      fun (x8757 : 'tags this) ->
        fun ~target:(x8748 : GLenum.t) ->
          fun ~level:(x8749 : GLint.t) ->
            fun ~internalformat:(x8750 : GLint.t) ->
              fun ~width:(x8751 : GLsizei.t) ->
                fun ~height:(x8752 : GLsizei.t) ->
                  fun ~border:(x8753 : GLint.t) ->
                    fun ~format:(x8754 : GLenum.t) ->
                      fun ~type_:(x8755 : GLenum.t) ->
                        fun ~pboOffset:(x8756 : GLintptr.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8757)
                               "texImage2D"
                               [|(GLenum.t_to_js x8748);(GLint.t_to_js x8749);(
                                 GLint.t_to_js x8750);(GLsizei.t_to_js x8751);(
                                 GLsizei.t_to_js x8752);(GLint.t_to_js x8753);(
                                 GLenum.t_to_js x8754);(GLenum.t_to_js x8755);(
                                 GLintptr.t_to_js x8756)|])
    let (texImage2D''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x8768 : 'tags this) ->
        fun ~target:(x8759 : GLenum.t) ->
          fun ~level:(x8760 : GLint.t) ->
            fun ~internalformat:(x8761 : GLint.t) ->
              fun ~width:(x8762 : GLsizei.t) ->
                fun ~height:(x8763 : GLsizei.t) ->
                  fun ~border:(x8764 : GLint.t) ->
                    fun ~format:(x8765 : GLenum.t) ->
                      fun ~type_:(x8766 : GLenum.t) ->
                        fun ~source:(x8767 : TexImageSource.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8768)
                               "texImage2D"
                               [|(GLenum.t_to_js x8759);(GLint.t_to_js x8760);(
                                 GLint.t_to_js x8761);(GLsizei.t_to_js x8762);(
                                 GLsizei.t_to_js x8763);(GLint.t_to_js x8764);(
                                 GLenum.t_to_js x8765);(GLenum.t_to_js x8766);(
                                 TexImageSource.t_to_js x8767)|])
    let (texImage2D'''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        srcData:ArrayBufferView.t_0 ->
                          srcOffset:GLuint.t -> unit)
      =
      fun (x8780 : 'tags this) ->
        fun ~target:(x8770 : GLenum.t) ->
          fun ~level:(x8771 : GLint.t) ->
            fun ~internalformat:(x8772 : GLint.t) ->
              fun ~width:(x8773 : GLsizei.t) ->
                fun ~height:(x8774 : GLsizei.t) ->
                  fun ~border:(x8775 : GLint.t) ->
                    fun ~format:(x8776 : GLenum.t) ->
                      fun ~type_:(x8777 : GLenum.t) ->
                        fun ~srcData:(x8778 : ArrayBufferView.t_0) ->
                          fun ~srcOffset:(x8779 : GLuint.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x8780)
                                 "texImage2D"
                                 [|(GLenum.t_to_js x8770);(GLint.t_to_js
                                                             x8771);(
                                   GLint.t_to_js x8772);(GLsizei.t_to_js
                                                           x8773);(GLsizei.t_to_js
                                                                    x8774);(
                                   GLint.t_to_js x8775);(GLenum.t_to_js x8776);(
                                   GLenum.t_to_js x8777);(ArrayBufferView.t_0_to_js
                                                            x8778);(GLuint.t_to_js
                                                                    x8779)|])
    let (texSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        pixels:ArrayBufferView.t_0 option -> unit)
      =
      fun (x8792 : 'tags this) ->
        fun ~target:(x8782 : GLenum.t) ->
          fun ~level:(x8783 : GLint.t) ->
            fun ~xoffset:(x8784 : GLint.t) ->
              fun ~yoffset:(x8785 : GLint.t) ->
                fun ~width:(x8786 : GLsizei.t) ->
                  fun ~height:(x8787 : GLsizei.t) ->
                    fun ~format:(x8788 : GLenum.t) ->
                      fun ~type_:(x8789 : GLenum.t) ->
                        fun ~pixels:(x8790 : ArrayBufferView.t_0 option) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8792)
                               "texSubImage2D"
                               [|(GLenum.t_to_js x8782);(GLint.t_to_js x8783);(
                                 GLint.t_to_js x8784);(GLint.t_to_js x8785);(
                                 GLsizei.t_to_js x8786);(GLsizei.t_to_js
                                                           x8787);(GLenum.t_to_js
                                                                    x8788);(
                                 GLenum.t_to_js x8789);(Ojs.option_to_js
                                                          ArrayBufferView.t_0_to_js
                                                          x8790)|])
    let (texSubImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                format:GLenum.t ->
                  type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x8801 : 'tags this) ->
        fun ~target:(x8794 : GLenum.t) ->
          fun ~level:(x8795 : GLint.t) ->
            fun ~xoffset:(x8796 : GLint.t) ->
              fun ~yoffset:(x8797 : GLint.t) ->
                fun ~format:(x8798 : GLenum.t) ->
                  fun ~type_:(x8799 : GLenum.t) ->
                    fun ~source:(x8800 : TexImageSource.t) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x8801)
                           "texSubImage2D"
                           [|(GLenum.t_to_js x8794);(GLint.t_to_js x8795);(
                             GLint.t_to_js x8796);(GLint.t_to_js x8797);(
                             GLenum.t_to_js x8798);(GLenum.t_to_js x8799);(
                             TexImageSource.t_to_js x8800)|])
    let (texSubImage2D'' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t -> pboOffset:GLintptr.t -> unit)
      =
      fun (x8812 : 'tags this) ->
        fun ~target:(x8803 : GLenum.t) ->
          fun ~level:(x8804 : GLint.t) ->
            fun ~xoffset:(x8805 : GLint.t) ->
              fun ~yoffset:(x8806 : GLint.t) ->
                fun ~width:(x8807 : GLsizei.t) ->
                  fun ~height:(x8808 : GLsizei.t) ->
                    fun ~format:(x8809 : GLenum.t) ->
                      fun ~type_:(x8810 : GLenum.t) ->
                        fun ~pboOffset:(x8811 : GLintptr.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8812)
                               "texSubImage2D"
                               [|(GLenum.t_to_js x8803);(GLint.t_to_js x8804);(
                                 GLint.t_to_js x8805);(GLint.t_to_js x8806);(
                                 GLsizei.t_to_js x8807);(GLsizei.t_to_js
                                                           x8808);(GLenum.t_to_js
                                                                    x8809);(
                                 GLenum.t_to_js x8810);(GLintptr.t_to_js
                                                          x8811)|])
    let (texSubImage2D''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x8823 : 'tags this) ->
        fun ~target:(x8814 : GLenum.t) ->
          fun ~level:(x8815 : GLint.t) ->
            fun ~xoffset:(x8816 : GLint.t) ->
              fun ~yoffset:(x8817 : GLint.t) ->
                fun ~width:(x8818 : GLsizei.t) ->
                  fun ~height:(x8819 : GLsizei.t) ->
                    fun ~format:(x8820 : GLenum.t) ->
                      fun ~type_:(x8821 : GLenum.t) ->
                        fun ~source:(x8822 : TexImageSource.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8823)
                               "texSubImage2D"
                               [|(GLenum.t_to_js x8814);(GLint.t_to_js x8815);(
                                 GLint.t_to_js x8816);(GLint.t_to_js x8817);(
                                 GLsizei.t_to_js x8818);(GLsizei.t_to_js
                                                           x8819);(GLenum.t_to_js
                                                                    x8820);(
                                 GLenum.t_to_js x8821);(TexImageSource.t_to_js
                                                          x8822)|])
    let (texSubImage2D'''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        srcData:ArrayBufferView.t_0 ->
                          srcOffset:GLuint.t -> unit)
      =
      fun (x8835 : 'tags this) ->
        fun ~target:(x8825 : GLenum.t) ->
          fun ~level:(x8826 : GLint.t) ->
            fun ~xoffset:(x8827 : GLint.t) ->
              fun ~yoffset:(x8828 : GLint.t) ->
                fun ~width:(x8829 : GLsizei.t) ->
                  fun ~height:(x8830 : GLsizei.t) ->
                    fun ~format:(x8831 : GLenum.t) ->
                      fun ~type_:(x8832 : GLenum.t) ->
                        fun ~srcData:(x8833 : ArrayBufferView.t_0) ->
                          fun ~srcOffset:(x8834 : GLuint.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x8835)
                                 "texSubImage2D"
                                 [|(GLenum.t_to_js x8825);(GLint.t_to_js
                                                             x8826);(
                                   GLint.t_to_js x8827);(GLint.t_to_js x8828);(
                                   GLsizei.t_to_js x8829);(GLsizei.t_to_js
                                                             x8830);(
                                   GLenum.t_to_js x8831);(GLenum.t_to_js
                                                            x8832);(ArrayBufferView.t_0_to_js
                                                                    x8833);(
                                   GLuint.t_to_js x8834)|])
    let (uniform1fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Float32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8845 : 'tags this) ->
        fun ~location:(x8837 : WebGLUniformLocation.t option) ->
          fun ~data:(x8838 : Float32List.t) ->
            fun ?srcOffset:(x8839 : GLuint.t option) ->
              fun ?srcLength:(x8840 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8847 = this_to_js Obj.magic x8845 in
                     Ojs.call (Ojs.get_prop_ascii x8847 "uniform1fv") "apply"
                       [|x8847;((let x8841 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8841 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8837)|]);
                                 ignore
                                   (Ojs.call x8841 "push"
                                      [|(Float32List.t_to_js x8838)|]);
                                 (match x8839 with
                                  | Some x8843 ->
                                      ignore
                                        (Ojs.call x8841 "push"
                                           [|(GLuint.t_to_js x8843)|])
                                  | None -> ());
                                 (match x8840 with
                                  | Some x8842 ->
                                      ignore
                                        (Ojs.call x8841 "push"
                                           [|(GLuint.t_to_js x8842)|])
                                  | None -> ());
                                 x8841))|])
    let (uniform1iv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Int32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8856 : 'tags this) ->
        fun ~location:(x8848 : WebGLUniformLocation.t option) ->
          fun ~data:(x8849 : Int32List.t) ->
            fun ?srcOffset:(x8850 : GLuint.t option) ->
              fun ?srcLength:(x8851 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8858 = this_to_js Obj.magic x8856 in
                     Ojs.call (Ojs.get_prop_ascii x8858 "uniform1iv") "apply"
                       [|x8858;((let x8852 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8852 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8848)|]);
                                 ignore
                                   (Ojs.call x8852 "push"
                                      [|(Int32List.t_to_js x8849)|]);
                                 (match x8850 with
                                  | Some x8854 ->
                                      ignore
                                        (Ojs.call x8852 "push"
                                           [|(GLuint.t_to_js x8854)|])
                                  | None -> ());
                                 (match x8851 with
                                  | Some x8853 ->
                                      ignore
                                        (Ojs.call x8852 "push"
                                           [|(GLuint.t_to_js x8853)|])
                                  | None -> ());
                                 x8852))|])
    let (uniform2fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Float32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8867 : 'tags this) ->
        fun ~location:(x8859 : WebGLUniformLocation.t option) ->
          fun ~data:(x8860 : Float32List.t) ->
            fun ?srcOffset:(x8861 : GLuint.t option) ->
              fun ?srcLength:(x8862 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8869 = this_to_js Obj.magic x8867 in
                     Ojs.call (Ojs.get_prop_ascii x8869 "uniform2fv") "apply"
                       [|x8869;((let x8863 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8863 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8859)|]);
                                 ignore
                                   (Ojs.call x8863 "push"
                                      [|(Float32List.t_to_js x8860)|]);
                                 (match x8861 with
                                  | Some x8865 ->
                                      ignore
                                        (Ojs.call x8863 "push"
                                           [|(GLuint.t_to_js x8865)|])
                                  | None -> ());
                                 (match x8862 with
                                  | Some x8864 ->
                                      ignore
                                        (Ojs.call x8863 "push"
                                           [|(GLuint.t_to_js x8864)|])
                                  | None -> ());
                                 x8863))|])
    let (uniform2iv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Int32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8878 : 'tags this) ->
        fun ~location:(x8870 : WebGLUniformLocation.t option) ->
          fun ~data:(x8871 : Int32List.t) ->
            fun ?srcOffset:(x8872 : GLuint.t option) ->
              fun ?srcLength:(x8873 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8880 = this_to_js Obj.magic x8878 in
                     Ojs.call (Ojs.get_prop_ascii x8880 "uniform2iv") "apply"
                       [|x8880;((let x8874 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8874 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8870)|]);
                                 ignore
                                   (Ojs.call x8874 "push"
                                      [|(Int32List.t_to_js x8871)|]);
                                 (match x8872 with
                                  | Some x8876 ->
                                      ignore
                                        (Ojs.call x8874 "push"
                                           [|(GLuint.t_to_js x8876)|])
                                  | None -> ());
                                 (match x8873 with
                                  | Some x8875 ->
                                      ignore
                                        (Ojs.call x8874 "push"
                                           [|(GLuint.t_to_js x8875)|])
                                  | None -> ());
                                 x8874))|])
    let (uniform3fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Float32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8889 : 'tags this) ->
        fun ~location:(x8881 : WebGLUniformLocation.t option) ->
          fun ~data:(x8882 : Float32List.t) ->
            fun ?srcOffset:(x8883 : GLuint.t option) ->
              fun ?srcLength:(x8884 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8891 = this_to_js Obj.magic x8889 in
                     Ojs.call (Ojs.get_prop_ascii x8891 "uniform3fv") "apply"
                       [|x8891;((let x8885 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8885 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8881)|]);
                                 ignore
                                   (Ojs.call x8885 "push"
                                      [|(Float32List.t_to_js x8882)|]);
                                 (match x8883 with
                                  | Some x8887 ->
                                      ignore
                                        (Ojs.call x8885 "push"
                                           [|(GLuint.t_to_js x8887)|])
                                  | None -> ());
                                 (match x8884 with
                                  | Some x8886 ->
                                      ignore
                                        (Ojs.call x8885 "push"
                                           [|(GLuint.t_to_js x8886)|])
                                  | None -> ());
                                 x8885))|])
    let (uniform3iv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Int32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8900 : 'tags this) ->
        fun ~location:(x8892 : WebGLUniformLocation.t option) ->
          fun ~data:(x8893 : Int32List.t) ->
            fun ?srcOffset:(x8894 : GLuint.t option) ->
              fun ?srcLength:(x8895 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8902 = this_to_js Obj.magic x8900 in
                     Ojs.call (Ojs.get_prop_ascii x8902 "uniform3iv") "apply"
                       [|x8902;((let x8896 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8896 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8892)|]);
                                 ignore
                                   (Ojs.call x8896 "push"
                                      [|(Int32List.t_to_js x8893)|]);
                                 (match x8894 with
                                  | Some x8898 ->
                                      ignore
                                        (Ojs.call x8896 "push"
                                           [|(GLuint.t_to_js x8898)|])
                                  | None -> ());
                                 (match x8895 with
                                  | Some x8897 ->
                                      ignore
                                        (Ojs.call x8896 "push"
                                           [|(GLuint.t_to_js x8897)|])
                                  | None -> ());
                                 x8896))|])
    let (uniform4fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Float32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8911 : 'tags this) ->
        fun ~location:(x8903 : WebGLUniformLocation.t option) ->
          fun ~data:(x8904 : Float32List.t) ->
            fun ?srcOffset:(x8905 : GLuint.t option) ->
              fun ?srcLength:(x8906 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8913 = this_to_js Obj.magic x8911 in
                     Ojs.call (Ojs.get_prop_ascii x8913 "uniform4fv") "apply"
                       [|x8913;((let x8907 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8907 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8903)|]);
                                 ignore
                                   (Ojs.call x8907 "push"
                                      [|(Float32List.t_to_js x8904)|]);
                                 (match x8905 with
                                  | Some x8909 ->
                                      ignore
                                        (Ojs.call x8907 "push"
                                           [|(GLuint.t_to_js x8909)|])
                                  | None -> ());
                                 (match x8906 with
                                  | Some x8908 ->
                                      ignore
                                        (Ojs.call x8907 "push"
                                           [|(GLuint.t_to_js x8908)|])
                                  | None -> ());
                                 x8907))|])
    let (uniform4iv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Int32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8922 : 'tags this) ->
        fun ~location:(x8914 : WebGLUniformLocation.t option) ->
          fun ~data:(x8915 : Int32List.t) ->
            fun ?srcOffset:(x8916 : GLuint.t option) ->
              fun ?srcLength:(x8917 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8924 = this_to_js Obj.magic x8922 in
                     Ojs.call (Ojs.get_prop_ascii x8924 "uniform4iv") "apply"
                       [|x8924;((let x8918 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8918 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8914)|]);
                                 ignore
                                   (Ojs.call x8918 "push"
                                      [|(Int32List.t_to_js x8915)|]);
                                 (match x8916 with
                                  | Some x8920 ->
                                      ignore
                                        (Ojs.call x8918 "push"
                                           [|(GLuint.t_to_js x8920)|])
                                  | None -> ());
                                 (match x8917 with
                                  | Some x8919 ->
                                      ignore
                                        (Ojs.call x8918 "push"
                                           [|(GLuint.t_to_js x8919)|])
                                  | None -> ());
                                 x8918))|])
    let (uniformMatrix2fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8934 : 'tags this) ->
        fun ~location:(x8925 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x8926 : GLboolean.t) ->
            fun ~data:(x8927 : Float32List.t) ->
              fun ?srcOffset:(x8928 : GLuint.t option) ->
                fun ?srcLength:(x8929 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8936 = this_to_js Obj.magic x8934 in
                       Ojs.call (Ojs.get_prop_ascii x8936 "uniformMatrix2fv")
                         "apply"
                         [|x8936;((let x8930 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8930 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8925)|]);
                                   ignore
                                     (Ojs.call x8930 "push"
                                        [|(GLboolean.t_to_js x8926)|]);
                                   ignore
                                     (Ojs.call x8930 "push"
                                        [|(Float32List.t_to_js x8927)|]);
                                   (match x8928 with
                                    | Some x8932 ->
                                        ignore
                                          (Ojs.call x8930 "push"
                                             [|(GLuint.t_to_js x8932)|])
                                    | None -> ());
                                   (match x8929 with
                                    | Some x8931 ->
                                        ignore
                                          (Ojs.call x8930 "push"
                                             [|(GLuint.t_to_js x8931)|])
                                    | None -> ());
                                   x8930))|])
    let (uniformMatrix3fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8946 : 'tags this) ->
        fun ~location:(x8937 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x8938 : GLboolean.t) ->
            fun ~data:(x8939 : Float32List.t) ->
              fun ?srcOffset:(x8940 : GLuint.t option) ->
                fun ?srcLength:(x8941 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8948 = this_to_js Obj.magic x8946 in
                       Ojs.call (Ojs.get_prop_ascii x8948 "uniformMatrix3fv")
                         "apply"
                         [|x8948;((let x8942 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8942 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8937)|]);
                                   ignore
                                     (Ojs.call x8942 "push"
                                        [|(GLboolean.t_to_js x8938)|]);
                                   ignore
                                     (Ojs.call x8942 "push"
                                        [|(Float32List.t_to_js x8939)|]);
                                   (match x8940 with
                                    | Some x8944 ->
                                        ignore
                                          (Ojs.call x8942 "push"
                                             [|(GLuint.t_to_js x8944)|])
                                    | None -> ());
                                   (match x8941 with
                                    | Some x8943 ->
                                        ignore
                                          (Ojs.call x8942 "push"
                                             [|(GLuint.t_to_js x8943)|])
                                    | None -> ());
                                   x8942))|])
    let (uniformMatrix4fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8958 : 'tags this) ->
        fun ~location:(x8949 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x8950 : GLboolean.t) ->
            fun ~data:(x8951 : Float32List.t) ->
              fun ?srcOffset:(x8952 : GLuint.t option) ->
                fun ?srcLength:(x8953 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8960 = this_to_js Obj.magic x8958 in
                       Ojs.call (Ojs.get_prop_ascii x8960 "uniformMatrix4fv")
                         "apply"
                         [|x8960;((let x8954 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8954 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8949)|]);
                                   ignore
                                     (Ojs.call x8954 "push"
                                        [|(GLboolean.t_to_js x8950)|]);
                                   ignore
                                     (Ojs.call x8954 "push"
                                        [|(Float32List.t_to_js x8951)|]);
                                   (match x8952 with
                                    | Some x8956 ->
                                        ignore
                                          (Ojs.call x8954 "push"
                                             [|(GLuint.t_to_js x8956)|])
                                    | None -> ());
                                   (match x8953 with
                                    | Some x8955 ->
                                        ignore
                                          (Ojs.call x8954 "push"
                                             [|(GLuint.t_to_js x8955)|])
                                    | None -> ());
                                   x8954))|])
    let (uniform1fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLfloat.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8970 : 'tags this) ->
        fun ~location:(x8961 : WebGLUniformLocation.t option) ->
          fun ~data:(x8962 : GLfloat.t Iterable.t_1) ->
            fun ?srcOffset:(x8963 : GLuint.t option) ->
              fun ?srcLength:(x8964 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8972 = this_to_js Obj.magic x8970 in
                     Ojs.call (Ojs.get_prop_ascii x8972 "uniform1fv") "apply"
                       [|x8972;((let x8965 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8965 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8961)|]);
                                 ignore
                                   (Ojs.call x8965 "push"
                                      [|(Iterable.t_1_to_js GLfloat.t_to_js
                                           x8962)|]);
                                 (match x8963 with
                                  | Some x8967 ->
                                      ignore
                                        (Ojs.call x8965 "push"
                                           [|(GLuint.t_to_js x8967)|])
                                  | None -> ());
                                 (match x8964 with
                                  | Some x8966 ->
                                      ignore
                                        (Ojs.call x8965 "push"
                                           [|(GLuint.t_to_js x8966)|])
                                  | None -> ());
                                 x8965))|])
    let (uniform1iv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8982 : 'tags this) ->
        fun ~location:(x8973 : WebGLUniformLocation.t option) ->
          fun ~data:(x8974 : GLint.t Iterable.t_1) ->
            fun ?srcOffset:(x8975 : GLuint.t option) ->
              fun ?srcLength:(x8976 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8984 = this_to_js Obj.magic x8982 in
                     Ojs.call (Ojs.get_prop_ascii x8984 "uniform1iv") "apply"
                       [|x8984;((let x8977 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8977 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8973)|]);
                                 ignore
                                   (Ojs.call x8977 "push"
                                      [|(Iterable.t_1_to_js GLint.t_to_js
                                           x8974)|]);
                                 (match x8975 with
                                  | Some x8979 ->
                                      ignore
                                        (Ojs.call x8977 "push"
                                           [|(GLuint.t_to_js x8979)|])
                                  | None -> ());
                                 (match x8976 with
                                  | Some x8978 ->
                                      ignore
                                        (Ojs.call x8977 "push"
                                           [|(GLuint.t_to_js x8978)|])
                                  | None -> ());
                                 x8977))|])
    let (uniform2fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLfloat.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8994 : 'tags this) ->
        fun ~location:(x8985 : WebGLUniformLocation.t option) ->
          fun ~data:(x8986 : GLfloat.t Iterable.t_1) ->
            fun ?srcOffset:(x8987 : GLuint.t option) ->
              fun ?srcLength:(x8988 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8996 = this_to_js Obj.magic x8994 in
                     Ojs.call (Ojs.get_prop_ascii x8996 "uniform2fv") "apply"
                       [|x8996;((let x8989 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8989 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8985)|]);
                                 ignore
                                   (Ojs.call x8989 "push"
                                      [|(Iterable.t_1_to_js GLfloat.t_to_js
                                           x8986)|]);
                                 (match x8987 with
                                  | Some x8991 ->
                                      ignore
                                        (Ojs.call x8989 "push"
                                           [|(GLuint.t_to_js x8991)|])
                                  | None -> ());
                                 (match x8988 with
                                  | Some x8990 ->
                                      ignore
                                        (Ojs.call x8989 "push"
                                           [|(GLuint.t_to_js x8990)|])
                                  | None -> ());
                                 x8989))|])
    let (uniform2iv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9006 : 'tags this) ->
        fun ~location:(x8997 : WebGLUniformLocation.t option) ->
          fun ~data:(x8998 : GLint.t Iterable.t_1) ->
            fun ?srcOffset:(x8999 : GLuint.t option) ->
              fun ?srcLength:(x9000 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9008 = this_to_js Obj.magic x9006 in
                     Ojs.call (Ojs.get_prop_ascii x9008 "uniform2iv") "apply"
                       [|x9008;((let x9001 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9001 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8997)|]);
                                 ignore
                                   (Ojs.call x9001 "push"
                                      [|(Iterable.t_1_to_js GLint.t_to_js
                                           x8998)|]);
                                 (match x8999 with
                                  | Some x9003 ->
                                      ignore
                                        (Ojs.call x9001 "push"
                                           [|(GLuint.t_to_js x9003)|])
                                  | None -> ());
                                 (match x9000 with
                                  | Some x9002 ->
                                      ignore
                                        (Ojs.call x9001 "push"
                                           [|(GLuint.t_to_js x9002)|])
                                  | None -> ());
                                 x9001))|])
    let (uniform3fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLfloat.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9018 : 'tags this) ->
        fun ~location:(x9009 : WebGLUniformLocation.t option) ->
          fun ~data:(x9010 : GLfloat.t Iterable.t_1) ->
            fun ?srcOffset:(x9011 : GLuint.t option) ->
              fun ?srcLength:(x9012 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9020 = this_to_js Obj.magic x9018 in
                     Ojs.call (Ojs.get_prop_ascii x9020 "uniform3fv") "apply"
                       [|x9020;((let x9013 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9013 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x9009)|]);
                                 ignore
                                   (Ojs.call x9013 "push"
                                      [|(Iterable.t_1_to_js GLfloat.t_to_js
                                           x9010)|]);
                                 (match x9011 with
                                  | Some x9015 ->
                                      ignore
                                        (Ojs.call x9013 "push"
                                           [|(GLuint.t_to_js x9015)|])
                                  | None -> ());
                                 (match x9012 with
                                  | Some x9014 ->
                                      ignore
                                        (Ojs.call x9013 "push"
                                           [|(GLuint.t_to_js x9014)|])
                                  | None -> ());
                                 x9013))|])
    let (uniform3iv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9030 : 'tags this) ->
        fun ~location:(x9021 : WebGLUniformLocation.t option) ->
          fun ~data:(x9022 : GLint.t Iterable.t_1) ->
            fun ?srcOffset:(x9023 : GLuint.t option) ->
              fun ?srcLength:(x9024 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9032 = this_to_js Obj.magic x9030 in
                     Ojs.call (Ojs.get_prop_ascii x9032 "uniform3iv") "apply"
                       [|x9032;((let x9025 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9025 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x9021)|]);
                                 ignore
                                   (Ojs.call x9025 "push"
                                      [|(Iterable.t_1_to_js GLint.t_to_js
                                           x9022)|]);
                                 (match x9023 with
                                  | Some x9027 ->
                                      ignore
                                        (Ojs.call x9025 "push"
                                           [|(GLuint.t_to_js x9027)|])
                                  | None -> ());
                                 (match x9024 with
                                  | Some x9026 ->
                                      ignore
                                        (Ojs.call x9025 "push"
                                           [|(GLuint.t_to_js x9026)|])
                                  | None -> ());
                                 x9025))|])
    let (uniform4fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLfloat.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9042 : 'tags this) ->
        fun ~location:(x9033 : WebGLUniformLocation.t option) ->
          fun ~data:(x9034 : GLfloat.t Iterable.t_1) ->
            fun ?srcOffset:(x9035 : GLuint.t option) ->
              fun ?srcLength:(x9036 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9044 = this_to_js Obj.magic x9042 in
                     Ojs.call (Ojs.get_prop_ascii x9044 "uniform4fv") "apply"
                       [|x9044;((let x9037 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9037 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x9033)|]);
                                 ignore
                                   (Ojs.call x9037 "push"
                                      [|(Iterable.t_1_to_js GLfloat.t_to_js
                                           x9034)|]);
                                 (match x9035 with
                                  | Some x9039 ->
                                      ignore
                                        (Ojs.call x9037 "push"
                                           [|(GLuint.t_to_js x9039)|])
                                  | None -> ());
                                 (match x9036 with
                                  | Some x9038 ->
                                      ignore
                                        (Ojs.call x9037 "push"
                                           [|(GLuint.t_to_js x9038)|])
                                  | None -> ());
                                 x9037))|])
    let (uniform4iv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9054 : 'tags this) ->
        fun ~location:(x9045 : WebGLUniformLocation.t option) ->
          fun ~data:(x9046 : GLint.t Iterable.t_1) ->
            fun ?srcOffset:(x9047 : GLuint.t option) ->
              fun ?srcLength:(x9048 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9056 = this_to_js Obj.magic x9054 in
                     Ojs.call (Ojs.get_prop_ascii x9056 "uniform4iv") "apply"
                       [|x9056;((let x9049 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9049 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x9045)|]);
                                 ignore
                                   (Ojs.call x9049 "push"
                                      [|(Iterable.t_1_to_js GLint.t_to_js
                                           x9046)|]);
                                 (match x9047 with
                                  | Some x9051 ->
                                      ignore
                                        (Ojs.call x9049 "push"
                                           [|(GLuint.t_to_js x9051)|])
                                  | None -> ());
                                 (match x9048 with
                                  | Some x9050 ->
                                      ignore
                                        (Ojs.call x9049 "push"
                                           [|(GLuint.t_to_js x9050)|])
                                  | None -> ());
                                 x9049))|])
    let (uniformMatrix2fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9067 : 'tags this) ->
        fun ~location:(x9057 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x9058 : GLboolean.t) ->
            fun ~data:(x9059 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x9060 : GLuint.t option) ->
                fun ?srcLength:(x9061 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9069 = this_to_js Obj.magic x9067 in
                       Ojs.call (Ojs.get_prop_ascii x9069 "uniformMatrix2fv")
                         "apply"
                         [|x9069;((let x9062 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9062 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9057)|]);
                                   ignore
                                     (Ojs.call x9062 "push"
                                        [|(GLboolean.t_to_js x9058)|]);
                                   ignore
                                     (Ojs.call x9062 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x9059)|]);
                                   (match x9060 with
                                    | Some x9064 ->
                                        ignore
                                          (Ojs.call x9062 "push"
                                             [|(GLuint.t_to_js x9064)|])
                                    | None -> ());
                                   (match x9061 with
                                    | Some x9063 ->
                                        ignore
                                          (Ojs.call x9062 "push"
                                             [|(GLuint.t_to_js x9063)|])
                                    | None -> ());
                                   x9062))|])
    let (uniformMatrix3fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9080 : 'tags this) ->
        fun ~location:(x9070 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x9071 : GLboolean.t) ->
            fun ~data:(x9072 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x9073 : GLuint.t option) ->
                fun ?srcLength:(x9074 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9082 = this_to_js Obj.magic x9080 in
                       Ojs.call (Ojs.get_prop_ascii x9082 "uniformMatrix3fv")
                         "apply"
                         [|x9082;((let x9075 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9075 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9070)|]);
                                   ignore
                                     (Ojs.call x9075 "push"
                                        [|(GLboolean.t_to_js x9071)|]);
                                   ignore
                                     (Ojs.call x9075 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x9072)|]);
                                   (match x9073 with
                                    | Some x9077 ->
                                        ignore
                                          (Ojs.call x9075 "push"
                                             [|(GLuint.t_to_js x9077)|])
                                    | None -> ());
                                   (match x9074 with
                                    | Some x9076 ->
                                        ignore
                                          (Ojs.call x9075 "push"
                                             [|(GLuint.t_to_js x9076)|])
                                    | None -> ());
                                   x9075))|])
    let (uniformMatrix4fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9093 : 'tags this) ->
        fun ~location:(x9083 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x9084 : GLboolean.t) ->
            fun ~data:(x9085 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x9086 : GLuint.t option) ->
                fun ?srcLength:(x9087 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9095 = this_to_js Obj.magic x9093 in
                       Ojs.call (Ojs.get_prop_ascii x9095 "uniformMatrix4fv")
                         "apply"
                         [|x9095;((let x9088 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9088 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9083)|]);
                                   ignore
                                     (Ojs.call x9088 "push"
                                        [|(GLboolean.t_to_js x9084)|]);
                                   ignore
                                     (Ojs.call x9088 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x9085)|]);
                                   (match x9086 with
                                    | Some x9090 ->
                                        ignore
                                          (Ojs.call x9088 "push"
                                             [|(GLuint.t_to_js x9090)|])
                                    | None -> ());
                                   (match x9087 with
                                    | Some x9089 ->
                                        ignore
                                          (Ojs.call x9088 "push"
                                             [|(GLuint.t_to_js x9089)|])
                                    | None -> ());
                                   x9088))|])
    let cast_from = Obj.magic
  end
module WebGLVertexArrayObject =
  struct
    type t = [ `WebGLVertexArrayObject ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9097 : Ojs.t) -> t_of_js x9097
    and t_0_to_js : t_0 -> Ojs.t = fun (x9096 : t) -> t_to_js x9096
    type tags = [ `WebGLVertexArrayObject ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLVertexArrayObject ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x9100 : Ojs.t) -> intf_of_js __tags_of_js x9100
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x9098 : __tags intf) -> intf_to_js __tags_to_js x9098
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLVertexArrayObject")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGLVertexArrayObject") 
             [||])
  end
module WebGLTransformFeedback =
  struct
    type t = [ `WebGLTransformFeedback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9103 : Ojs.t) -> t_of_js x9103
    and t_0_to_js : t_0 -> Ojs.t = fun (x9102 : t) -> t_to_js x9102
    type tags = [ `WebGLTransformFeedback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLTransformFeedback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x9106 : Ojs.t) -> intf_of_js __tags_of_js x9106
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x9104 : __tags intf) -> intf_to_js __tags_to_js x9104
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLTransformFeedback")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGLTransformFeedback") 
             [||])
  end
module WebGLSync =
  struct
    type t = [ `WebGLSync ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9109 : Ojs.t) -> t_of_js x9109
    and t_0_to_js : t_0 -> Ojs.t = fun (x9108 : t) -> t_to_js x9108
    type tags = [ `WebGLSync ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLSync ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x9112 : Ojs.t) -> intf_of_js __tags_of_js x9112
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x9110 : __tags intf) -> intf_to_js __tags_to_js x9110
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLSync")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLSync") [||])
  end
module WebGLSampler =
  struct
    type t = [ `WebGLSampler ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9115 : Ojs.t) -> t_of_js x9115
    and t_0_to_js : t_0 -> Ojs.t = fun (x9114 : t) -> t_to_js x9114
    type tags = [ `WebGLSampler ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLSampler ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x9118 : Ojs.t) -> intf_of_js __tags_of_js x9118
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x9116 : __tags intf) -> intf_to_js __tags_to_js x9116
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLSampler")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLSampler") [||])
  end
module WebGLQuery =
  struct
    type t = [ `WebGLQuery ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9121 : Ojs.t) -> t_of_js x9121
    and t_0_to_js : t_0 -> Ojs.t = fun (x9120 : t) -> t_to_js x9120
    type tags = [ `WebGLQuery ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLQuery ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x9124 : Ojs.t) -> intf_of_js __tags_of_js x9124
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x9122 : __tags intf) -> intf_to_js __tags_to_js x9122
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLQuery")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLQuery") [||])
  end
module Uint32List =
  struct
    type t = (GLuint.t list, Uint32Array.t_0) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x9130 : Ojs.t) ->
        union2_of_js
          (fun (x9131 : Ojs.t) -> Ojs.list_of_js GLuint.t_of_js x9131)
          Uint32Array.t_0_of_js x9130
    and t_to_js : t -> Ojs.t =
      fun (x9126 : (GLuint.t list, Uint32Array.t_0) union2) ->
        union2_to_js
          (fun (x9127 : GLuint.t list) -> Ojs.list_to_js GLuint.t_to_js x9127)
          Uint32Array.t_0_to_js x9126
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9135 : Ojs.t) -> t_of_js x9135
    and t_0_to_js : t_0 -> Ojs.t = fun (x9134 : t) -> t_to_js x9134
  end
module GLuint64 =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x9137 : Ojs.t) -> Ojs.float_of_js x9137
    and t_to_js : t -> Ojs.t = fun (x9136 : float) -> Ojs.float_to_js x9136
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9139 : Ojs.t) -> t_of_js x9139
    and t_0_to_js : t_0 -> Ojs.t = fun (x9138 : t) -> t_to_js x9138
  end
module GLint64 =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x9141 : Ojs.t) -> Ojs.float_of_js x9141
    and t_to_js : t -> Ojs.t = fun (x9140 : float) -> Ojs.float_to_js x9140
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9143 : Ojs.t) -> t_of_js x9143
    and t_0_to_js : t_0 -> Ojs.t = fun (x9142 : t) -> t_to_js x9142
  end
module WebGL2RenderingContextBase =
  struct
    type t = [ `WebGL2RenderingContextBase ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9145 : Ojs.t) -> t_of_js x9145
    and t_0_to_js : t_0 -> Ojs.t = fun (x9144 : t) -> t_to_js x9144
    type tags = [ `WebGL2RenderingContextBase ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGL2RenderingContextBase ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x9148 : Ojs.t) -> intf_of_js __tags_of_js x9148
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x9146 : __tags intf) -> intf_to_js __tags_to_js x9146
    let (beginQuery :
      'tags this -> target:GLenum.t -> query:WebGLQuery.t -> unit) =
      fun (x9152 : 'tags this) ->
        fun ~target:(x9150 : GLenum.t) ->
          fun ~query:(x9151 : WebGLQuery.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9152) "beginQuery"
                 [|(GLenum.t_to_js x9150);(WebGLQuery.t_to_js x9151)|])
    let (beginTransformFeedback :
      'tags this -> primitiveMode:GLenum.t -> unit) =
      fun (x9155 : 'tags this) ->
        fun ~primitiveMode:(x9154 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9155) "beginTransformFeedback"
               [|(GLenum.t_to_js x9154)|])
    let (bindBufferBase :
      'tags this ->
        target:GLenum.t ->
          index:GLuint.t -> buffer:WebGLBuffer.t option -> unit)
      =
      fun (x9161 : 'tags this) ->
        fun ~target:(x9157 : GLenum.t) ->
          fun ~index:(x9158 : GLuint.t) ->
            fun ~buffer:(x9159 : WebGLBuffer.t option) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x9161) "bindBufferBase"
                   [|(GLenum.t_to_js x9157);(GLuint.t_to_js x9158);(Ojs.option_to_js
                                                                    WebGLBuffer.t_to_js
                                                                    x9159)|])
    let (bindBufferRange :
      'tags this ->
        target:GLenum.t ->
          index:GLuint.t ->
            buffer:WebGLBuffer.t option ->
              offset:GLintptr.t -> size:GLsizeiptr.t -> unit)
      =
      fun (x9169 : 'tags this) ->
        fun ~target:(x9163 : GLenum.t) ->
          fun ~index:(x9164 : GLuint.t) ->
            fun ~buffer:(x9165 : WebGLBuffer.t option) ->
              fun ~offset:(x9167 : GLintptr.t) ->
                fun ~size:(x9168 : GLsizeiptr.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9169) "bindBufferRange"
                       [|(GLenum.t_to_js x9163);(GLuint.t_to_js x9164);(
                         Ojs.option_to_js WebGLBuffer.t_to_js x9165);(
                         GLintptr.t_to_js x9167);(GLsizeiptr.t_to_js x9168)|])
    let (bindSampler :
      'tags this -> unit:GLuint.t -> sampler:WebGLSampler.t option -> unit) =
      fun (x9174 : 'tags this) ->
        fun ~unit:(x9171 : GLuint.t) ->
          fun ~sampler:(x9172 : WebGLSampler.t option) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9174) "bindSampler"
                 [|(GLuint.t_to_js x9171);(Ojs.option_to_js
                                             WebGLSampler.t_to_js x9172)|])
    let (bindTransformFeedback :
      'tags this ->
        target:GLenum.t -> tf:WebGLTransformFeedback.t option -> unit)
      =
      fun (x9179 : 'tags this) ->
        fun ~target:(x9176 : GLenum.t) ->
          fun ~tf:(x9177 : WebGLTransformFeedback.t option) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9179) "bindTransformFeedback"
                 [|(GLenum.t_to_js x9176);(Ojs.option_to_js
                                             WebGLTransformFeedback.t_to_js
                                             x9177)|])
    let (bindVertexArray :
      'tags this -> array:WebGLVertexArrayObject.t option -> unit) =
      fun (x9183 : 'tags this) ->
        fun ~array:(x9181 : WebGLVertexArrayObject.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9183) "bindVertexArray"
               [|(Ojs.option_to_js WebGLVertexArrayObject.t_to_js x9181)|])
    let (blitFramebuffer :
      'tags this ->
        srcX0:GLint.t ->
          srcY0:GLint.t ->
            srcX1:GLint.t ->
              srcY1:GLint.t ->
                dstX0:GLint.t ->
                  dstY0:GLint.t ->
                    dstX1:GLint.t ->
                      dstY1:GLint.t ->
                        mask:GLbitfield.t -> filter:GLenum.t -> unit)
      =
      fun (x9195 : 'tags this) ->
        fun ~srcX0:(x9185 : GLint.t) ->
          fun ~srcY0:(x9186 : GLint.t) ->
            fun ~srcX1:(x9187 : GLint.t) ->
              fun ~srcY1:(x9188 : GLint.t) ->
                fun ~dstX0:(x9189 : GLint.t) ->
                  fun ~dstY0:(x9190 : GLint.t) ->
                    fun ~dstX1:(x9191 : GLint.t) ->
                      fun ~dstY1:(x9192 : GLint.t) ->
                        fun ~mask:(x9193 : GLbitfield.t) ->
                          fun ~filter:(x9194 : GLenum.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x9195)
                                 "blitFramebuffer"
                                 [|(GLint.t_to_js x9185);(GLint.t_to_js x9186);(
                                   GLint.t_to_js x9187);(GLint.t_to_js x9188);(
                                   GLint.t_to_js x9189);(GLint.t_to_js x9190);(
                                   GLint.t_to_js x9191);(GLint.t_to_js x9192);(
                                   GLbitfield.t_to_js x9193);(GLenum.t_to_js
                                                                x9194)|])
    let (clearBufferfi :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t -> depth:GLfloat.t -> stencil:GLint.t -> unit)
      =
      fun (x9201 : 'tags this) ->
        fun ~buffer:(x9197 : GLenum.t) ->
          fun ~drawbuffer:(x9198 : GLint.t) ->
            fun ~depth:(x9199 : GLfloat.t) ->
              fun ~stencil:(x9200 : GLint.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x9201) "clearBufferfi"
                     [|(GLenum.t_to_js x9197);(GLint.t_to_js x9198);(
                       GLfloat.t_to_js x9199);(GLint.t_to_js x9200)|])
    let (clearBufferfv :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:Float32List.t -> ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x9209 : 'tags this) ->
        fun ~buffer:(x9203 : GLenum.t) ->
          fun ~drawbuffer:(x9204 : GLint.t) ->
            fun ~values:(x9205 : Float32List.t) ->
              fun ?srcOffset:(x9206 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9211 = this_to_js Obj.magic x9209 in
                     Ojs.call (Ojs.get_prop_ascii x9211 "clearBufferfv")
                       "apply"
                       [|x9211;((let x9207 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9207 "push"
                                      [|(GLenum.t_to_js x9203)|]);
                                 ignore
                                   (Ojs.call x9207 "push"
                                      [|(GLint.t_to_js x9204)|]);
                                 ignore
                                   (Ojs.call x9207 "push"
                                      [|(Float32List.t_to_js x9205)|]);
                                 (match x9206 with
                                  | Some x9208 ->
                                      ignore
                                        (Ojs.call x9207 "push"
                                           [|(GLuint.t_to_js x9208)|])
                                  | None -> ());
                                 x9207))|])
    let (clearBufferiv :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:Int32List.t -> ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x9218 : 'tags this) ->
        fun ~buffer:(x9212 : GLenum.t) ->
          fun ~drawbuffer:(x9213 : GLint.t) ->
            fun ~values:(x9214 : Int32List.t) ->
              fun ?srcOffset:(x9215 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9220 = this_to_js Obj.magic x9218 in
                     Ojs.call (Ojs.get_prop_ascii x9220 "clearBufferiv")
                       "apply"
                       [|x9220;((let x9216 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9216 "push"
                                      [|(GLenum.t_to_js x9212)|]);
                                 ignore
                                   (Ojs.call x9216 "push"
                                      [|(GLint.t_to_js x9213)|]);
                                 ignore
                                   (Ojs.call x9216 "push"
                                      [|(Int32List.t_to_js x9214)|]);
                                 (match x9215 with
                                  | Some x9217 ->
                                      ignore
                                        (Ojs.call x9216 "push"
                                           [|(GLuint.t_to_js x9217)|])
                                  | None -> ());
                                 x9216))|])
    let (clearBufferuiv :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:Uint32List.t -> ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x9227 : 'tags this) ->
        fun ~buffer:(x9221 : GLenum.t) ->
          fun ~drawbuffer:(x9222 : GLint.t) ->
            fun ~values:(x9223 : Uint32List.t) ->
              fun ?srcOffset:(x9224 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9229 = this_to_js Obj.magic x9227 in
                     Ojs.call (Ojs.get_prop_ascii x9229 "clearBufferuiv")
                       "apply"
                       [|x9229;((let x9225 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9225 "push"
                                      [|(GLenum.t_to_js x9221)|]);
                                 ignore
                                   (Ojs.call x9225 "push"
                                      [|(GLint.t_to_js x9222)|]);
                                 ignore
                                   (Ojs.call x9225 "push"
                                      [|(Uint32List.t_to_js x9223)|]);
                                 (match x9224 with
                                  | Some x9226 ->
                                      ignore
                                        (Ojs.call x9225 "push"
                                           [|(GLuint.t_to_js x9226)|])
                                  | None -> ());
                                 x9225))|])
    let (clientWaitSync :
      'tags this ->
        sync:WebGLSync.t ->
          flags:GLbitfield.t -> timeout:GLuint64.t -> GLenum.t)
      =
      fun (x9233 : 'tags this) ->
        fun ~sync:(x9230 : WebGLSync.t) ->
          fun ~flags:(x9231 : GLbitfield.t) ->
            fun ~timeout:(x9232 : GLuint64.t) ->
              GLenum.t_of_js
                (Ojs.call (this_to_js Obj.magic x9233) "clientWaitSync"
                   [|(WebGLSync.t_to_js x9230);(GLbitfield.t_to_js x9231);(
                     GLuint64.t_to_js x9232)|])
    let (compressedTexImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      imageSize:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x9244 : 'tags this) ->
        fun ~target:(x9235 : GLenum.t) ->
          fun ~level:(x9236 : GLint.t) ->
            fun ~internalformat:(x9237 : GLenum.t) ->
              fun ~width:(x9238 : GLsizei.t) ->
                fun ~height:(x9239 : GLsizei.t) ->
                  fun ~depth:(x9240 : GLsizei.t) ->
                    fun ~border:(x9241 : GLint.t) ->
                      fun ~imageSize:(x9242 : GLsizei.t) ->
                        fun ~offset:(x9243 : GLintptr.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x9244)
                               "compressedTexImage3D"
                               [|(GLenum.t_to_js x9235);(GLint.t_to_js x9236);(
                                 GLenum.t_to_js x9237);(GLsizei.t_to_js x9238);(
                                 GLsizei.t_to_js x9239);(GLsizei.t_to_js
                                                           x9240);(GLint.t_to_js
                                                                    x9241);(
                                 GLsizei.t_to_js x9242);(GLintptr.t_to_js
                                                           x9243)|])
    let (compressedTexImage3D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      srcData:ArrayBufferView.t_0 ->
                        ?srcOffset:GLuint.t ->
                          ?srcLengthOverride:GLuint.t -> unit -> unit)
      =
      fun (x9259 : 'tags this) ->
        fun ~target:(x9246 : GLenum.t) ->
          fun ~level:(x9247 : GLint.t) ->
            fun ~internalformat:(x9248 : GLenum.t) ->
              fun ~width:(x9249 : GLsizei.t) ->
                fun ~height:(x9250 : GLsizei.t) ->
                  fun ~depth:(x9251 : GLsizei.t) ->
                    fun ~border:(x9252 : GLint.t) ->
                      fun ~srcData:(x9253 : ArrayBufferView.t_0) ->
                        fun ?srcOffset:(x9254 : GLuint.t option) ->
                          fun ?srcLengthOverride:(x9255 : GLuint.t option) ->
                            fun () ->
                              ignore
                                (let x9261 = this_to_js Obj.magic x9259 in
                                 Ojs.call
                                   (Ojs.get_prop_ascii x9261
                                      "compressedTexImage3D") "apply"
                                   [|x9261;((let x9256 =
                                               Ojs.new_obj
                                                 (Ojs.get_prop_ascii
                                                    Ojs.global "Array") 
                                                 [||] in
                                             ignore
                                               (Ojs.call x9256 "push"
                                                  [|(GLenum.t_to_js x9246)|]);
                                             ignore
                                               (Ojs.call x9256 "push"
                                                  [|(GLint.t_to_js x9247)|]);
                                             ignore
                                               (Ojs.call x9256 "push"
                                                  [|(GLenum.t_to_js x9248)|]);
                                             ignore
                                               (Ojs.call x9256 "push"
                                                  [|(GLsizei.t_to_js x9249)|]);
                                             ignore
                                               (Ojs.call x9256 "push"
                                                  [|(GLsizei.t_to_js x9250)|]);
                                             ignore
                                               (Ojs.call x9256 "push"
                                                  [|(GLsizei.t_to_js x9251)|]);
                                             ignore
                                               (Ojs.call x9256 "push"
                                                  [|(GLint.t_to_js x9252)|]);
                                             ignore
                                               (Ojs.call x9256 "push"
                                                  [|(ArrayBufferView.t_0_to_js
                                                       x9253)|]);
                                             (match x9254 with
                                              | Some x9258 ->
                                                  ignore
                                                    (Ojs.call x9256 "push"
                                                       [|(GLuint.t_to_js
                                                            x9258)|])
                                              | None -> ());
                                             (match x9255 with
                                              | Some x9257 ->
                                                  ignore
                                                    (Ojs.call x9256 "push"
                                                       [|(GLuint.t_to_js
                                                            x9257)|])
                                              | None -> ());
                                             x9256))|])
    let (compressedTexSubImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          imageSize:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x9273 : 'tags this) ->
        fun ~target:(x9262 : GLenum.t) ->
          fun ~level:(x9263 : GLint.t) ->
            fun ~xoffset:(x9264 : GLint.t) ->
              fun ~yoffset:(x9265 : GLint.t) ->
                fun ~zoffset:(x9266 : GLint.t) ->
                  fun ~width:(x9267 : GLsizei.t) ->
                    fun ~height:(x9268 : GLsizei.t) ->
                      fun ~depth:(x9269 : GLsizei.t) ->
                        fun ~format:(x9270 : GLenum.t) ->
                          fun ~imageSize:(x9271 : GLsizei.t) ->
                            fun ~offset:(x9272 : GLintptr.t) ->
                              ignore
                                (Ojs.call (this_to_js Obj.magic x9273)
                                   "compressedTexSubImage3D"
                                   [|(GLenum.t_to_js x9262);(GLint.t_to_js
                                                               x9263);(
                                     GLint.t_to_js x9264);(GLint.t_to_js
                                                             x9265);(
                                     GLint.t_to_js x9266);(GLsizei.t_to_js
                                                             x9267);(
                                     GLsizei.t_to_js x9268);(GLsizei.t_to_js
                                                               x9269);(
                                     GLenum.t_to_js x9270);(GLsizei.t_to_js
                                                              x9271);(
                                     GLintptr.t_to_js x9272)|])
    let (compressedTexSubImage3D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          srcData:ArrayBufferView.t_0 ->
                            ?srcOffset:GLuint.t ->
                              ?srcLengthOverride:GLuint.t -> unit -> unit)
      =
      fun (x9290 : 'tags this) ->
        fun ~target:(x9275 : GLenum.t) ->
          fun ~level:(x9276 : GLint.t) ->
            fun ~xoffset:(x9277 : GLint.t) ->
              fun ~yoffset:(x9278 : GLint.t) ->
                fun ~zoffset:(x9279 : GLint.t) ->
                  fun ~width:(x9280 : GLsizei.t) ->
                    fun ~height:(x9281 : GLsizei.t) ->
                      fun ~depth:(x9282 : GLsizei.t) ->
                        fun ~format:(x9283 : GLenum.t) ->
                          fun ~srcData:(x9284 : ArrayBufferView.t_0) ->
                            fun ?srcOffset:(x9285 : GLuint.t option) ->
                              fun
                                ?srcLengthOverride:(x9286 : GLuint.t option)
                                ->
                                fun () ->
                                  ignore
                                    (let x9292 = this_to_js Obj.magic x9290 in
                                     Ojs.call
                                       (Ojs.get_prop_ascii x9292
                                          "compressedTexSubImage3D") "apply"
                                       [|x9292;((let x9287 =
                                                   Ojs.new_obj
                                                     (Ojs.get_prop_ascii
                                                        Ojs.global "Array")
                                                     [||] in
                                                 ignore
                                                   (Ojs.call x9287 "push"
                                                      [|(GLenum.t_to_js x9275)|]);
                                                 ignore
                                                   (Ojs.call x9287 "push"
                                                      [|(GLint.t_to_js x9276)|]);
                                                 ignore
                                                   (Ojs.call x9287 "push"
                                                      [|(GLint.t_to_js x9277)|]);
                                                 ignore
                                                   (Ojs.call x9287 "push"
                                                      [|(GLint.t_to_js x9278)|]);
                                                 ignore
                                                   (Ojs.call x9287 "push"
                                                      [|(GLint.t_to_js x9279)|]);
                                                 ignore
                                                   (Ojs.call x9287 "push"
                                                      [|(GLsizei.t_to_js
                                                           x9280)|]);
                                                 ignore
                                                   (Ojs.call x9287 "push"
                                                      [|(GLsizei.t_to_js
                                                           x9281)|]);
                                                 ignore
                                                   (Ojs.call x9287 "push"
                                                      [|(GLsizei.t_to_js
                                                           x9282)|]);
                                                 ignore
                                                   (Ojs.call x9287 "push"
                                                      [|(GLenum.t_to_js x9283)|]);
                                                 ignore
                                                   (Ojs.call x9287 "push"
                                                      [|(ArrayBufferView.t_0_to_js
                                                           x9284)|]);
                                                 (match x9285 with
                                                  | Some x9289 ->
                                                      ignore
                                                        (Ojs.call x9287
                                                           "push"
                                                           [|(GLuint.t_to_js
                                                                x9289)|])
                                                  | None -> ());
                                                 (match x9286 with
                                                  | Some x9288 ->
                                                      ignore
                                                        (Ojs.call x9287
                                                           "push"
                                                           [|(GLuint.t_to_js
                                                                x9288)|])
                                                  | None -> ());
                                                 x9287))|])
    let (copyBufferSubData :
      'tags this ->
        readTarget:GLenum.t ->
          writeTarget:GLenum.t ->
            readOffset:GLintptr.t ->
              writeOffset:GLintptr.t -> size:GLsizeiptr.t -> unit)
      =
      fun (x9298 : 'tags this) ->
        fun ~readTarget:(x9293 : GLenum.t) ->
          fun ~writeTarget:(x9294 : GLenum.t) ->
            fun ~readOffset:(x9295 : GLintptr.t) ->
              fun ~writeOffset:(x9296 : GLintptr.t) ->
                fun ~size:(x9297 : GLsizeiptr.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9298)
                       "copyBufferSubData"
                       [|(GLenum.t_to_js x9293);(GLenum.t_to_js x9294);(
                         GLintptr.t_to_js x9295);(GLintptr.t_to_js x9296);(
                         GLsizeiptr.t_to_js x9297)|])
    let (copyTexSubImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  x:GLint.t ->
                    y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x9309 : 'tags this) ->
        fun ~target:(x9300 : GLenum.t) ->
          fun ~level:(x9301 : GLint.t) ->
            fun ~xoffset:(x9302 : GLint.t) ->
              fun ~yoffset:(x9303 : GLint.t) ->
                fun ~zoffset:(x9304 : GLint.t) ->
                  fun ~x:(x9305 : GLint.t) ->
                    fun ~y:(x9306 : GLint.t) ->
                      fun ~width:(x9307 : GLsizei.t) ->
                        fun ~height:(x9308 : GLsizei.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x9309)
                               "copyTexSubImage3D"
                               [|(GLenum.t_to_js x9300);(GLint.t_to_js x9301);(
                                 GLint.t_to_js x9302);(GLint.t_to_js x9303);(
                                 GLint.t_to_js x9304);(GLint.t_to_js x9305);(
                                 GLint.t_to_js x9306);(GLsizei.t_to_js x9307);(
                                 GLsizei.t_to_js x9308)|])
    let (createQuery : 'tags this -> WebGLQuery.t option) =
      fun (x9311 : 'tags this) ->
        Ojs.option_of_js WebGLQuery.t_of_js
          (Ojs.call (this_to_js Obj.magic x9311) "createQuery" [||])
    let (createSampler : 'tags this -> WebGLSampler.t option) =
      fun (x9314 : 'tags this) ->
        Ojs.option_of_js WebGLSampler.t_of_js
          (Ojs.call (this_to_js Obj.magic x9314) "createSampler" [||])
    let (createTransformFeedback :
      'tags this -> WebGLTransformFeedback.t option) =
      fun (x9317 : 'tags this) ->
        Ojs.option_of_js WebGLTransformFeedback.t_of_js
          (Ojs.call (this_to_js Obj.magic x9317) "createTransformFeedback"
             [||])
    let (createVertexArray : 'tags this -> WebGLVertexArrayObject.t option) =
      fun (x9320 : 'tags this) ->
        Ojs.option_of_js WebGLVertexArrayObject.t_of_js
          (Ojs.call (this_to_js Obj.magic x9320) "createVertexArray" [||])
    let (deleteQuery : 'tags this -> query:WebGLQuery.t option -> unit) =
      fun (x9325 : 'tags this) ->
        fun ~query:(x9323 : WebGLQuery.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9325) "deleteQuery"
               [|(Ojs.option_to_js WebGLQuery.t_to_js x9323)|])
    let (deleteSampler : 'tags this -> sampler:WebGLSampler.t option -> unit)
      =
      fun (x9329 : 'tags this) ->
        fun ~sampler:(x9327 : WebGLSampler.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9329) "deleteSampler"
               [|(Ojs.option_to_js WebGLSampler.t_to_js x9327)|])
    let (deleteSync : 'tags this -> sync:WebGLSync.t option -> unit) =
      fun (x9333 : 'tags this) ->
        fun ~sync:(x9331 : WebGLSync.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9333) "deleteSync"
               [|(Ojs.option_to_js WebGLSync.t_to_js x9331)|])
    let (deleteTransformFeedback :
      'tags this -> tf:WebGLTransformFeedback.t option -> unit) =
      fun (x9337 : 'tags this) ->
        fun ~tf:(x9335 : WebGLTransformFeedback.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9337) "deleteTransformFeedback"
               [|(Ojs.option_to_js WebGLTransformFeedback.t_to_js x9335)|])
    let (deleteVertexArray :
      'tags this -> vertexArray:WebGLVertexArrayObject.t option -> unit) =
      fun (x9341 : 'tags this) ->
        fun ~vertexArray:(x9339 : WebGLVertexArrayObject.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9341) "deleteVertexArray"
               [|(Ojs.option_to_js WebGLVertexArrayObject.t_to_js x9339)|])
    let (drawArraysInstanced :
      'tags this ->
        mode:GLenum.t ->
          first:GLint.t -> count:GLsizei.t -> instanceCount:GLsizei.t -> unit)
      =
      fun (x9347 : 'tags this) ->
        fun ~mode:(x9343 : GLenum.t) ->
          fun ~first:(x9344 : GLint.t) ->
            fun ~count:(x9345 : GLsizei.t) ->
              fun ~instanceCount:(x9346 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x9347)
                     "drawArraysInstanced"
                     [|(GLenum.t_to_js x9343);(GLint.t_to_js x9344);(
                       GLsizei.t_to_js x9345);(GLsizei.t_to_js x9346)|])
    let (drawBuffers : 'tags this -> buffers:GLenum.t list -> unit) =
      fun (x9351 : 'tags this) ->
        fun ~buffers:(x9349 : GLenum.t list) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9351) "drawBuffers"
               [|(Ojs.list_to_js GLenum.t_to_js x9349)|])
    let (drawElementsInstanced :
      'tags this ->
        mode:GLenum.t ->
          count:GLsizei.t ->
            type_:GLenum.t ->
              offset:GLintptr.t -> instanceCount:GLsizei.t -> unit)
      =
      fun (x9358 : 'tags this) ->
        fun ~mode:(x9353 : GLenum.t) ->
          fun ~count:(x9354 : GLsizei.t) ->
            fun ~type_:(x9355 : GLenum.t) ->
              fun ~offset:(x9356 : GLintptr.t) ->
                fun ~instanceCount:(x9357 : GLsizei.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9358)
                       "drawElementsInstanced"
                       [|(GLenum.t_to_js x9353);(GLsizei.t_to_js x9354);(
                         GLenum.t_to_js x9355);(GLintptr.t_to_js x9356);(
                         GLsizei.t_to_js x9357)|])
    let (drawRangeElements :
      'tags this ->
        mode:GLenum.t ->
          start:GLuint.t ->
            end_:GLuint.t ->
              count:GLsizei.t -> type_:GLenum.t -> offset:GLintptr.t -> unit)
      =
      fun (x9366 : 'tags this) ->
        fun ~mode:(x9360 : GLenum.t) ->
          fun ~start:(x9361 : GLuint.t) ->
            fun ~end_:(x9362 : GLuint.t) ->
              fun ~count:(x9363 : GLsizei.t) ->
                fun ~type_:(x9364 : GLenum.t) ->
                  fun ~offset:(x9365 : GLintptr.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x9366)
                         "drawRangeElements"
                         [|(GLenum.t_to_js x9360);(GLuint.t_to_js x9361);(
                           GLuint.t_to_js x9362);(GLsizei.t_to_js x9363);(
                           GLenum.t_to_js x9364);(GLintptr.t_to_js x9365)|])
    let (endQuery : 'tags this -> target:GLenum.t -> unit) =
      fun (x9369 : 'tags this) ->
        fun ~target:(x9368 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9369) "endQuery"
               [|(GLenum.t_to_js x9368)|])
    let (endTransformFeedback : 'tags this -> unit) =
      fun (x9371 : 'tags this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic x9371) "endTransformFeedback" [||])
    let (fenceSync :
      'tags this ->
        condition:GLenum.t -> flags:GLbitfield.t -> WebGLSync.t option)
      =
      fun (x9375 : 'tags this) ->
        fun ~condition:(x9373 : GLenum.t) ->
          fun ~flags:(x9374 : GLbitfield.t) ->
            Ojs.option_of_js WebGLSync.t_of_js
              (Ojs.call (this_to_js Obj.magic x9375) "fenceSync"
                 [|(GLenum.t_to_js x9373);(GLbitfield.t_to_js x9374)|])
    let (framebufferTextureLayer :
      'tags this ->
        target:GLenum.t ->
          attachment:GLenum.t ->
            texture:WebGLTexture.t option ->
              level:GLint.t -> layer:GLint.t -> unit)
      =
      fun (x9384 : 'tags this) ->
        fun ~target:(x9378 : GLenum.t) ->
          fun ~attachment:(x9379 : GLenum.t) ->
            fun ~texture:(x9380 : WebGLTexture.t option) ->
              fun ~level:(x9382 : GLint.t) ->
                fun ~layer:(x9383 : GLint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9384)
                       "framebufferTextureLayer"
                       [|(GLenum.t_to_js x9378);(GLenum.t_to_js x9379);(
                         Ojs.option_to_js WebGLTexture.t_to_js x9380);(
                         GLint.t_to_js x9382);(GLint.t_to_js x9383)|])
    let (getActiveUniformBlockName :
      'tags this ->
        program:WebGLProgram.t -> uniformBlockIndex:GLuint.t -> string option)
      =
      fun (x9388 : 'tags this) ->
        fun ~program:(x9386 : WebGLProgram.t) ->
          fun ~uniformBlockIndex:(x9387 : GLuint.t) ->
            Ojs.option_of_js Ojs.string_of_js
              (Ojs.call (this_to_js Obj.magic x9388)
                 "getActiveUniformBlockName"
                 [|(WebGLProgram.t_to_js x9386);(GLuint.t_to_js x9387)|])
    let (getActiveUniformBlockParameter :
      'tags this ->
        program:WebGLProgram.t ->
          uniformBlockIndex:GLuint.t -> pname:GLenum.t -> any)
      =
      fun (x9394 : 'tags this) ->
        fun ~program:(x9391 : WebGLProgram.t) ->
          fun ~uniformBlockIndex:(x9392 : GLuint.t) ->
            fun ~pname:(x9393 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x9394)
                   "getActiveUniformBlockParameter"
                   [|(WebGLProgram.t_to_js x9391);(GLuint.t_to_js x9392);(
                     GLenum.t_to_js x9393)|])
    let (getActiveUniforms :
      'tags this ->
        program:WebGLProgram.t ->
          uniformIndices:GLuint.t list -> pname:GLenum.t -> any)
      =
      fun (x9400 : 'tags this) ->
        fun ~program:(x9396 : WebGLProgram.t) ->
          fun ~uniformIndices:(x9397 : GLuint.t list) ->
            fun ~pname:(x9399 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x9400) "getActiveUniforms"
                   [|(WebGLProgram.t_to_js x9396);(Ojs.list_to_js
                                                     GLuint.t_to_js x9397);(
                     GLenum.t_to_js x9399)|])
    let (getBufferSubData :
      'tags this ->
        target:GLenum.t ->
          srcByteOffset:GLintptr.t ->
            dstBuffer:ArrayBufferView.t_0 ->
              ?dstOffset:GLuint.t -> ?length:GLuint.t -> unit -> unit)
      =
      fun (x9410 : 'tags this) ->
        fun ~target:(x9402 : GLenum.t) ->
          fun ~srcByteOffset:(x9403 : GLintptr.t) ->
            fun ~dstBuffer:(x9404 : ArrayBufferView.t_0) ->
              fun ?dstOffset:(x9405 : GLuint.t option) ->
                fun ?length:(x9406 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9412 = this_to_js Obj.magic x9410 in
                       Ojs.call (Ojs.get_prop_ascii x9412 "getBufferSubData")
                         "apply"
                         [|x9412;((let x9407 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9407 "push"
                                        [|(GLenum.t_to_js x9402)|]);
                                   ignore
                                     (Ojs.call x9407 "push"
                                        [|(GLintptr.t_to_js x9403)|]);
                                   ignore
                                     (Ojs.call x9407 "push"
                                        [|(ArrayBufferView.t_0_to_js x9404)|]);
                                   (match x9405 with
                                    | Some x9409 ->
                                        ignore
                                          (Ojs.call x9407 "push"
                                             [|(GLuint.t_to_js x9409)|])
                                    | None -> ());
                                   (match x9406 with
                                    | Some x9408 ->
                                        ignore
                                          (Ojs.call x9407 "push"
                                             [|(GLuint.t_to_js x9408)|])
                                    | None -> ());
                                   x9407))|])
    let (getFragDataLocation :
      'tags this -> program:WebGLProgram.t -> name:string -> GLint.t) =
      fun (x9415 : 'tags this) ->
        fun ~program:(x9413 : WebGLProgram.t) ->
          fun ~name:(x9414 : string) ->
            GLint.t_of_js
              (Ojs.call (this_to_js Obj.magic x9415) "getFragDataLocation"
                 [|(WebGLProgram.t_to_js x9413);(Ojs.string_to_js x9414)|])
    let (getIndexedParameter :
      'tags this -> target:GLenum.t -> index:GLuint.t -> any) =
      fun (x9419 : 'tags this) ->
        fun ~target:(x9417 : GLenum.t) ->
          fun ~index:(x9418 : GLuint.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x9419) "getIndexedParameter"
                 [|(GLenum.t_to_js x9417);(GLuint.t_to_js x9418)|])
    let (getInternalformatParameter :
      'tags this ->
        target:GLenum.t -> internalformat:GLenum.t -> pname:GLenum.t -> any)
      =
      fun (x9424 : 'tags this) ->
        fun ~target:(x9421 : GLenum.t) ->
          fun ~internalformat:(x9422 : GLenum.t) ->
            fun ~pname:(x9423 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x9424)
                   "getInternalformatParameter"
                   [|(GLenum.t_to_js x9421);(GLenum.t_to_js x9422);(GLenum.t_to_js
                                                                    x9423)|])
    let (getQuery :
      'tags this -> target:GLenum.t -> pname:GLenum.t -> WebGLQuery.t option)
      =
      fun (x9428 : 'tags this) ->
        fun ~target:(x9426 : GLenum.t) ->
          fun ~pname:(x9427 : GLenum.t) ->
            Ojs.option_of_js WebGLQuery.t_of_js
              (Ojs.call (this_to_js Obj.magic x9428) "getQuery"
                 [|(GLenum.t_to_js x9426);(GLenum.t_to_js x9427)|])
    let (getQueryParameter :
      'tags this -> query:WebGLQuery.t -> pname:GLenum.t -> any) =
      fun (x9433 : 'tags this) ->
        fun ~query:(x9431 : WebGLQuery.t) ->
          fun ~pname:(x9432 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x9433) "getQueryParameter"
                 [|(WebGLQuery.t_to_js x9431);(GLenum.t_to_js x9432)|])
    let (getSamplerParameter :
      'tags this -> sampler:WebGLSampler.t -> pname:GLenum.t -> any) =
      fun (x9437 : 'tags this) ->
        fun ~sampler:(x9435 : WebGLSampler.t) ->
          fun ~pname:(x9436 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x9437) "getSamplerParameter"
                 [|(WebGLSampler.t_to_js x9435);(GLenum.t_to_js x9436)|])
    let (getSyncParameter :
      'tags this -> sync:WebGLSync.t -> pname:GLenum.t -> any) =
      fun (x9441 : 'tags this) ->
        fun ~sync:(x9439 : WebGLSync.t) ->
          fun ~pname:(x9440 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x9441) "getSyncParameter"
                 [|(WebGLSync.t_to_js x9439);(GLenum.t_to_js x9440)|])
    let (getTransformFeedbackVarying :
      'tags this ->
        program:WebGLProgram.t -> index:GLuint.t -> WebGLActiveInfo.t option)
      =
      fun (x9445 : 'tags this) ->
        fun ~program:(x9443 : WebGLProgram.t) ->
          fun ~index:(x9444 : GLuint.t) ->
            Ojs.option_of_js WebGLActiveInfo.t_of_js
              (Ojs.call (this_to_js Obj.magic x9445)
                 "getTransformFeedbackVarying"
                 [|(WebGLProgram.t_to_js x9443);(GLuint.t_to_js x9444)|])
    let (getUniformBlockIndex :
      'tags this ->
        program:WebGLProgram.t -> uniformBlockName:string -> GLuint.t)
      =
      fun (x9450 : 'tags this) ->
        fun ~program:(x9448 : WebGLProgram.t) ->
          fun ~uniformBlockName:(x9449 : string) ->
            GLuint.t_of_js
              (Ojs.call (this_to_js Obj.magic x9450) "getUniformBlockIndex"
                 [|(WebGLProgram.t_to_js x9448);(Ojs.string_to_js x9449)|])
    let (getUniformIndices :
      'tags this ->
        program:WebGLProgram.t ->
          uniformNames:string list -> GLuint.t list option)
      =
      fun (x9455 : 'tags this) ->
        fun ~program:(x9452 : WebGLProgram.t) ->
          fun ~uniformNames:(x9453 : string list) ->
            Ojs.option_of_js
              (fun (x9457 : Ojs.t) -> Ojs.list_of_js GLuint.t_of_js x9457)
              (Ojs.call (this_to_js Obj.magic x9455) "getUniformIndices"
                 [|(WebGLProgram.t_to_js x9452);(Ojs.list_to_js
                                                   Ojs.string_to_js x9453)|])
    let (invalidateFramebuffer :
      'tags this -> target:GLenum.t -> attachments:GLenum.t list -> unit) =
      fun (x9462 : 'tags this) ->
        fun ~target:(x9459 : GLenum.t) ->
          fun ~attachments:(x9460 : GLenum.t list) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9462) "invalidateFramebuffer"
                 [|(GLenum.t_to_js x9459);(Ojs.list_to_js GLenum.t_to_js
                                             x9460)|])
    let (invalidateSubFramebuffer :
      'tags this ->
        target:GLenum.t ->
          attachments:GLenum.t list ->
            x:GLint.t ->
              y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x9471 : 'tags this) ->
        fun ~target:(x9464 : GLenum.t) ->
          fun ~attachments:(x9465 : GLenum.t list) ->
            fun ~x:(x9467 : GLint.t) ->
              fun ~y:(x9468 : GLint.t) ->
                fun ~width:(x9469 : GLsizei.t) ->
                  fun ~height:(x9470 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x9471)
                         "invalidateSubFramebuffer"
                         [|(GLenum.t_to_js x9464);(Ojs.list_to_js
                                                     GLenum.t_to_js x9465);(
                           GLint.t_to_js x9467);(GLint.t_to_js x9468);(
                           GLsizei.t_to_js x9469);(GLsizei.t_to_js x9470)|])
    let (isQuery : 'tags this -> query:WebGLQuery.t option -> GLboolean.t) =
      fun (x9475 : 'tags this) ->
        fun ~query:(x9473 : WebGLQuery.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x9475) "isQuery"
               [|(Ojs.option_to_js WebGLQuery.t_to_js x9473)|])
    let (isSampler :
      'tags this -> sampler:WebGLSampler.t option -> GLboolean.t) =
      fun (x9479 : 'tags this) ->
        fun ~sampler:(x9477 : WebGLSampler.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x9479) "isSampler"
               [|(Ojs.option_to_js WebGLSampler.t_to_js x9477)|])
    let (isSync : 'tags this -> sync:WebGLSync.t option -> GLboolean.t) =
      fun (x9483 : 'tags this) ->
        fun ~sync:(x9481 : WebGLSync.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x9483) "isSync"
               [|(Ojs.option_to_js WebGLSync.t_to_js x9481)|])
    let (isTransformFeedback :
      'tags this -> tf:WebGLTransformFeedback.t option -> GLboolean.t) =
      fun (x9487 : 'tags this) ->
        fun ~tf:(x9485 : WebGLTransformFeedback.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x9487) "isTransformFeedback"
               [|(Ojs.option_to_js WebGLTransformFeedback.t_to_js x9485)|])
    let (isVertexArray :
      'tags this ->
        vertexArray:WebGLVertexArrayObject.t option -> GLboolean.t)
      =
      fun (x9491 : 'tags this) ->
        fun ~vertexArray:(x9489 : WebGLVertexArrayObject.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x9491) "isVertexArray"
               [|(Ojs.option_to_js WebGLVertexArrayObject.t_to_js x9489)|])
    let (pauseTransformFeedback : 'tags this -> unit) =
      fun (x9493 : 'tags this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic x9493) "pauseTransformFeedback"
             [||])
    let (readBuffer : 'tags this -> src:GLenum.t -> unit) =
      fun (x9496 : 'tags this) ->
        fun ~src:(x9495 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9496) "readBuffer"
               [|(GLenum.t_to_js x9495)|])
    let (renderbufferStorageMultisample :
      'tags this ->
        target:GLenum.t ->
          samples:GLsizei.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x9503 : 'tags this) ->
        fun ~target:(x9498 : GLenum.t) ->
          fun ~samples:(x9499 : GLsizei.t) ->
            fun ~internalformat:(x9500 : GLenum.t) ->
              fun ~width:(x9501 : GLsizei.t) ->
                fun ~height:(x9502 : GLsizei.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9503)
                       "renderbufferStorageMultisample"
                       [|(GLenum.t_to_js x9498);(GLsizei.t_to_js x9499);(
                         GLenum.t_to_js x9500);(GLsizei.t_to_js x9501);(
                         GLsizei.t_to_js x9502)|])
    let (resumeTransformFeedback : 'tags this -> unit) =
      fun (x9505 : 'tags this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic x9505) "resumeTransformFeedback"
             [||])
    let (samplerParameterf :
      'tags this ->
        sampler:WebGLSampler.t -> pname:GLenum.t -> param:GLfloat.t -> unit)
      =
      fun (x9510 : 'tags this) ->
        fun ~sampler:(x9507 : WebGLSampler.t) ->
          fun ~pname:(x9508 : GLenum.t) ->
            fun ~param:(x9509 : GLfloat.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x9510) "samplerParameterf"
                   [|(WebGLSampler.t_to_js x9507);(GLenum.t_to_js x9508);(
                     GLfloat.t_to_js x9509)|])
    let (samplerParameteri :
      'tags this ->
        sampler:WebGLSampler.t -> pname:GLenum.t -> param:GLint.t -> unit)
      =
      fun (x9515 : 'tags this) ->
        fun ~sampler:(x9512 : WebGLSampler.t) ->
          fun ~pname:(x9513 : GLenum.t) ->
            fun ~param:(x9514 : GLint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x9515) "samplerParameteri"
                   [|(WebGLSampler.t_to_js x9512);(GLenum.t_to_js x9513);(
                     GLint.t_to_js x9514)|])
    let (texImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      format:GLenum.t ->
                        type_:GLenum.t -> pboOffset:GLintptr.t -> unit)
      =
      fun (x9527 : 'tags this) ->
        fun ~target:(x9517 : GLenum.t) ->
          fun ~level:(x9518 : GLint.t) ->
            fun ~internalformat:(x9519 : GLint.t) ->
              fun ~width:(x9520 : GLsizei.t) ->
                fun ~height:(x9521 : GLsizei.t) ->
                  fun ~depth:(x9522 : GLsizei.t) ->
                    fun ~border:(x9523 : GLint.t) ->
                      fun ~format:(x9524 : GLenum.t) ->
                        fun ~type_:(x9525 : GLenum.t) ->
                          fun ~pboOffset:(x9526 : GLintptr.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x9527)
                                 "texImage3D"
                                 [|(GLenum.t_to_js x9517);(GLint.t_to_js
                                                             x9518);(
                                   GLint.t_to_js x9519);(GLsizei.t_to_js
                                                           x9520);(GLsizei.t_to_js
                                                                    x9521);(
                                   GLsizei.t_to_js x9522);(GLint.t_to_js
                                                             x9523);(
                                   GLenum.t_to_js x9524);(GLenum.t_to_js
                                                            x9525);(GLintptr.t_to_js
                                                                    x9526)|])
    let (texImage3D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      format:GLenum.t ->
                        type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x9539 : 'tags this) ->
        fun ~target:(x9529 : GLenum.t) ->
          fun ~level:(x9530 : GLint.t) ->
            fun ~internalformat:(x9531 : GLint.t) ->
              fun ~width:(x9532 : GLsizei.t) ->
                fun ~height:(x9533 : GLsizei.t) ->
                  fun ~depth:(x9534 : GLsizei.t) ->
                    fun ~border:(x9535 : GLint.t) ->
                      fun ~format:(x9536 : GLenum.t) ->
                        fun ~type_:(x9537 : GLenum.t) ->
                          fun ~source:(x9538 : TexImageSource.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x9539)
                                 "texImage3D"
                                 [|(GLenum.t_to_js x9529);(GLint.t_to_js
                                                             x9530);(
                                   GLint.t_to_js x9531);(GLsizei.t_to_js
                                                           x9532);(GLsizei.t_to_js
                                                                    x9533);(
                                   GLsizei.t_to_js x9534);(GLint.t_to_js
                                                             x9535);(
                                   GLenum.t_to_js x9536);(GLenum.t_to_js
                                                            x9537);(TexImageSource.t_to_js
                                                                    x9538)|])
    let (texImage3D'' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      format:GLenum.t ->
                        type_:GLenum.t ->
                          srcData:ArrayBufferView.t_0 option -> unit)
      =
      fun (x9552 : 'tags this) ->
        fun ~target:(x9541 : GLenum.t) ->
          fun ~level:(x9542 : GLint.t) ->
            fun ~internalformat:(x9543 : GLint.t) ->
              fun ~width:(x9544 : GLsizei.t) ->
                fun ~height:(x9545 : GLsizei.t) ->
                  fun ~depth:(x9546 : GLsizei.t) ->
                    fun ~border:(x9547 : GLint.t) ->
                      fun ~format:(x9548 : GLenum.t) ->
                        fun ~type_:(x9549 : GLenum.t) ->
                          fun ~srcData:(x9550 : ArrayBufferView.t_0 option)
                            ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x9552)
                                 "texImage3D"
                                 [|(GLenum.t_to_js x9541);(GLint.t_to_js
                                                             x9542);(
                                   GLint.t_to_js x9543);(GLsizei.t_to_js
                                                           x9544);(GLsizei.t_to_js
                                                                    x9545);(
                                   GLsizei.t_to_js x9546);(GLint.t_to_js
                                                             x9547);(
                                   GLenum.t_to_js x9548);(GLenum.t_to_js
                                                            x9549);(Ojs.option_to_js
                                                                    ArrayBufferView.t_0_to_js
                                                                    x9550)|])
    let (texImage3D''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      format:GLenum.t ->
                        type_:GLenum.t ->
                          srcData:ArrayBufferView.t_0 ->
                            srcOffset:GLuint.t -> unit)
      =
      fun (x9565 : 'tags this) ->
        fun ~target:(x9554 : GLenum.t) ->
          fun ~level:(x9555 : GLint.t) ->
            fun ~internalformat:(x9556 : GLint.t) ->
              fun ~width:(x9557 : GLsizei.t) ->
                fun ~height:(x9558 : GLsizei.t) ->
                  fun ~depth:(x9559 : GLsizei.t) ->
                    fun ~border:(x9560 : GLint.t) ->
                      fun ~format:(x9561 : GLenum.t) ->
                        fun ~type_:(x9562 : GLenum.t) ->
                          fun ~srcData:(x9563 : ArrayBufferView.t_0) ->
                            fun ~srcOffset:(x9564 : GLuint.t) ->
                              ignore
                                (Ojs.call (this_to_js Obj.magic x9565)
                                   "texImage3D"
                                   [|(GLenum.t_to_js x9554);(GLint.t_to_js
                                                               x9555);(
                                     GLint.t_to_js x9556);(GLsizei.t_to_js
                                                             x9557);(
                                     GLsizei.t_to_js x9558);(GLsizei.t_to_js
                                                               x9559);(
                                     GLint.t_to_js x9560);(GLenum.t_to_js
                                                             x9561);(
                                     GLenum.t_to_js x9562);(ArrayBufferView.t_0_to_js
                                                              x9563);(
                                     GLuint.t_to_js x9564)|])
    let (texStorage2D :
      'tags this ->
        target:GLenum.t ->
          levels:GLsizei.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x9572 : 'tags this) ->
        fun ~target:(x9567 : GLenum.t) ->
          fun ~levels:(x9568 : GLsizei.t) ->
            fun ~internalformat:(x9569 : GLenum.t) ->
              fun ~width:(x9570 : GLsizei.t) ->
                fun ~height:(x9571 : GLsizei.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9572) "texStorage2D"
                       [|(GLenum.t_to_js x9567);(GLsizei.t_to_js x9568);(
                         GLenum.t_to_js x9569);(GLsizei.t_to_js x9570);(
                         GLsizei.t_to_js x9571)|])
    let (texStorage3D :
      'tags this ->
        target:GLenum.t ->
          levels:GLsizei.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t -> height:GLsizei.t -> depth:GLsizei.t -> unit)
      =
      fun (x9580 : 'tags this) ->
        fun ~target:(x9574 : GLenum.t) ->
          fun ~levels:(x9575 : GLsizei.t) ->
            fun ~internalformat:(x9576 : GLenum.t) ->
              fun ~width:(x9577 : GLsizei.t) ->
                fun ~height:(x9578 : GLsizei.t) ->
                  fun ~depth:(x9579 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x9580) "texStorage3D"
                         [|(GLenum.t_to_js x9574);(GLsizei.t_to_js x9575);(
                           GLenum.t_to_js x9576);(GLsizei.t_to_js x9577);(
                           GLsizei.t_to_js x9578);(GLsizei.t_to_js x9579)|])
    let (texSubImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          type_:GLenum.t -> pboOffset:GLintptr.t -> unit)
      =
      fun (x9593 : 'tags this) ->
        fun ~target:(x9582 : GLenum.t) ->
          fun ~level:(x9583 : GLint.t) ->
            fun ~xoffset:(x9584 : GLint.t) ->
              fun ~yoffset:(x9585 : GLint.t) ->
                fun ~zoffset:(x9586 : GLint.t) ->
                  fun ~width:(x9587 : GLsizei.t) ->
                    fun ~height:(x9588 : GLsizei.t) ->
                      fun ~depth:(x9589 : GLsizei.t) ->
                        fun ~format:(x9590 : GLenum.t) ->
                          fun ~type_:(x9591 : GLenum.t) ->
                            fun ~pboOffset:(x9592 : GLintptr.t) ->
                              ignore
                                (Ojs.call (this_to_js Obj.magic x9593)
                                   "texSubImage3D"
                                   [|(GLenum.t_to_js x9582);(GLint.t_to_js
                                                               x9583);(
                                     GLint.t_to_js x9584);(GLint.t_to_js
                                                             x9585);(
                                     GLint.t_to_js x9586);(GLsizei.t_to_js
                                                             x9587);(
                                     GLsizei.t_to_js x9588);(GLsizei.t_to_js
                                                               x9589);(
                                     GLenum.t_to_js x9590);(GLenum.t_to_js
                                                              x9591);(
                                     GLintptr.t_to_js x9592)|])
    let (texSubImage3D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x9606 : 'tags this) ->
        fun ~target:(x9595 : GLenum.t) ->
          fun ~level:(x9596 : GLint.t) ->
            fun ~xoffset:(x9597 : GLint.t) ->
              fun ~yoffset:(x9598 : GLint.t) ->
                fun ~zoffset:(x9599 : GLint.t) ->
                  fun ~width:(x9600 : GLsizei.t) ->
                    fun ~height:(x9601 : GLsizei.t) ->
                      fun ~depth:(x9602 : GLsizei.t) ->
                        fun ~format:(x9603 : GLenum.t) ->
                          fun ~type_:(x9604 : GLenum.t) ->
                            fun ~source:(x9605 : TexImageSource.t) ->
                              ignore
                                (Ojs.call (this_to_js Obj.magic x9606)
                                   "texSubImage3D"
                                   [|(GLenum.t_to_js x9595);(GLint.t_to_js
                                                               x9596);(
                                     GLint.t_to_js x9597);(GLint.t_to_js
                                                             x9598);(
                                     GLint.t_to_js x9599);(GLsizei.t_to_js
                                                             x9600);(
                                     GLsizei.t_to_js x9601);(GLsizei.t_to_js
                                                               x9602);(
                                     GLenum.t_to_js x9603);(GLenum.t_to_js
                                                              x9604);(
                                     TexImageSource.t_to_js x9605)|])
    let (texSubImage3D'' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          type_:GLenum.t ->
                            srcData:ArrayBufferView.t_0 option ->
                              ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x9623 : 'tags this) ->
        fun ~target:(x9608 : GLenum.t) ->
          fun ~level:(x9609 : GLint.t) ->
            fun ~xoffset:(x9610 : GLint.t) ->
              fun ~yoffset:(x9611 : GLint.t) ->
                fun ~zoffset:(x9612 : GLint.t) ->
                  fun ~width:(x9613 : GLsizei.t) ->
                    fun ~height:(x9614 : GLsizei.t) ->
                      fun ~depth:(x9615 : GLsizei.t) ->
                        fun ~format:(x9616 : GLenum.t) ->
                          fun ~type_:(x9617 : GLenum.t) ->
                            fun ~srcData:(x9618 : ArrayBufferView.t_0 option)
                              ->
                              fun ?srcOffset:(x9619 : GLuint.t option) ->
                                fun () ->
                                  ignore
                                    (let x9625 = this_to_js Obj.magic x9623 in
                                     Ojs.call
                                       (Ojs.get_prop_ascii x9625
                                          "texSubImage3D") "apply"
                                       [|x9625;((let x9620 =
                                                   Ojs.new_obj
                                                     (Ojs.get_prop_ascii
                                                        Ojs.global "Array")
                                                     [||] in
                                                 ignore
                                                   (Ojs.call x9620 "push"
                                                      [|(GLenum.t_to_js x9608)|]);
                                                 ignore
                                                   (Ojs.call x9620 "push"
                                                      [|(GLint.t_to_js x9609)|]);
                                                 ignore
                                                   (Ojs.call x9620 "push"
                                                      [|(GLint.t_to_js x9610)|]);
                                                 ignore
                                                   (Ojs.call x9620 "push"
                                                      [|(GLint.t_to_js x9611)|]);
                                                 ignore
                                                   (Ojs.call x9620 "push"
                                                      [|(GLint.t_to_js x9612)|]);
                                                 ignore
                                                   (Ojs.call x9620 "push"
                                                      [|(GLsizei.t_to_js
                                                           x9613)|]);
                                                 ignore
                                                   (Ojs.call x9620 "push"
                                                      [|(GLsizei.t_to_js
                                                           x9614)|]);
                                                 ignore
                                                   (Ojs.call x9620 "push"
                                                      [|(GLsizei.t_to_js
                                                           x9615)|]);
                                                 ignore
                                                   (Ojs.call x9620 "push"
                                                      [|(GLenum.t_to_js x9616)|]);
                                                 ignore
                                                   (Ojs.call x9620 "push"
                                                      [|(GLenum.t_to_js x9617)|]);
                                                 ignore
                                                   (Ojs.call x9620 "push"
                                                      [|(Ojs.option_to_js
                                                           ArrayBufferView.t_0_to_js
                                                           x9618)|]);
                                                 (match x9619 with
                                                  | Some x9621 ->
                                                      ignore
                                                        (Ojs.call x9620
                                                           "push"
                                                           [|(GLuint.t_to_js
                                                                x9621)|])
                                                  | None -> ());
                                                 x9620))|])
    let (transformFeedbackVaryings :
      'tags this ->
        program:WebGLProgram.t ->
          varyings:string list -> bufferMode:GLenum.t -> unit)
      =
      fun (x9630 : 'tags this) ->
        fun ~program:(x9626 : WebGLProgram.t) ->
          fun ~varyings:(x9627 : string list) ->
            fun ~bufferMode:(x9629 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x9630)
                   "transformFeedbackVaryings"
                   [|(WebGLProgram.t_to_js x9626);(Ojs.list_to_js
                                                     Ojs.string_to_js x9627);(
                     GLenum.t_to_js x9629)|])
    let (uniform1ui :
      'tags this ->
        location:WebGLUniformLocation.t option -> v0:GLuint.t -> unit)
      =
      fun (x9635 : 'tags this) ->
        fun ~location:(x9632 : WebGLUniformLocation.t option) ->
          fun ~v0:(x9634 : GLuint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9635) "uniform1ui"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x9632);(
                   GLuint.t_to_js x9634)|])
    let (uniform1uiv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Uint32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9645 : 'tags this) ->
        fun ~location:(x9637 : WebGLUniformLocation.t option) ->
          fun ~data:(x9638 : Uint32List.t) ->
            fun ?srcOffset:(x9639 : GLuint.t option) ->
              fun ?srcLength:(x9640 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9647 = this_to_js Obj.magic x9645 in
                     Ojs.call (Ojs.get_prop_ascii x9647 "uniform1uiv")
                       "apply"
                       [|x9647;((let x9641 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9641 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x9637)|]);
                                 ignore
                                   (Ojs.call x9641 "push"
                                      [|(Uint32List.t_to_js x9638)|]);
                                 (match x9639 with
                                  | Some x9643 ->
                                      ignore
                                        (Ojs.call x9641 "push"
                                           [|(GLuint.t_to_js x9643)|])
                                  | None -> ());
                                 (match x9640 with
                                  | Some x9642 ->
                                      ignore
                                        (Ojs.call x9641 "push"
                                           [|(GLuint.t_to_js x9642)|])
                                  | None -> ());
                                 x9641))|])
    let (uniform2ui :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v0:GLuint.t -> v1:GLuint.t -> unit)
      =
      fun (x9652 : 'tags this) ->
        fun ~location:(x9648 : WebGLUniformLocation.t option) ->
          fun ~v0:(x9650 : GLuint.t) ->
            fun ~v1:(x9651 : GLuint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x9652) "uniform2ui"
                   [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x9648);(
                     GLuint.t_to_js x9650);(GLuint.t_to_js x9651)|])
    let (uniform2uiv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Uint32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9662 : 'tags this) ->
        fun ~location:(x9654 : WebGLUniformLocation.t option) ->
          fun ~data:(x9655 : Uint32List.t) ->
            fun ?srcOffset:(x9656 : GLuint.t option) ->
              fun ?srcLength:(x9657 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9664 = this_to_js Obj.magic x9662 in
                     Ojs.call (Ojs.get_prop_ascii x9664 "uniform2uiv")
                       "apply"
                       [|x9664;((let x9658 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9658 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x9654)|]);
                                 ignore
                                   (Ojs.call x9658 "push"
                                      [|(Uint32List.t_to_js x9655)|]);
                                 (match x9656 with
                                  | Some x9660 ->
                                      ignore
                                        (Ojs.call x9658 "push"
                                           [|(GLuint.t_to_js x9660)|])
                                  | None -> ());
                                 (match x9657 with
                                  | Some x9659 ->
                                      ignore
                                        (Ojs.call x9658 "push"
                                           [|(GLuint.t_to_js x9659)|])
                                  | None -> ());
                                 x9658))|])
    let (uniform3ui :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v0:GLuint.t -> v1:GLuint.t -> v2:GLuint.t -> unit)
      =
      fun (x9670 : 'tags this) ->
        fun ~location:(x9665 : WebGLUniformLocation.t option) ->
          fun ~v0:(x9667 : GLuint.t) ->
            fun ~v1:(x9668 : GLuint.t) ->
              fun ~v2:(x9669 : GLuint.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x9670) "uniform3ui"
                     [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x9665);(
                       GLuint.t_to_js x9667);(GLuint.t_to_js x9668);(
                       GLuint.t_to_js x9669)|])
    let (uniform3uiv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Uint32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9680 : 'tags this) ->
        fun ~location:(x9672 : WebGLUniformLocation.t option) ->
          fun ~data:(x9673 : Uint32List.t) ->
            fun ?srcOffset:(x9674 : GLuint.t option) ->
              fun ?srcLength:(x9675 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9682 = this_to_js Obj.magic x9680 in
                     Ojs.call (Ojs.get_prop_ascii x9682 "uniform3uiv")
                       "apply"
                       [|x9682;((let x9676 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9676 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x9672)|]);
                                 ignore
                                   (Ojs.call x9676 "push"
                                      [|(Uint32List.t_to_js x9673)|]);
                                 (match x9674 with
                                  | Some x9678 ->
                                      ignore
                                        (Ojs.call x9676 "push"
                                           [|(GLuint.t_to_js x9678)|])
                                  | None -> ());
                                 (match x9675 with
                                  | Some x9677 ->
                                      ignore
                                        (Ojs.call x9676 "push"
                                           [|(GLuint.t_to_js x9677)|])
                                  | None -> ());
                                 x9676))|])
    let (uniform4ui :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v0:GLuint.t -> v1:GLuint.t -> v2:GLuint.t -> v3:GLuint.t -> unit)
      =
      fun (x9689 : 'tags this) ->
        fun ~location:(x9683 : WebGLUniformLocation.t option) ->
          fun ~v0:(x9685 : GLuint.t) ->
            fun ~v1:(x9686 : GLuint.t) ->
              fun ~v2:(x9687 : GLuint.t) ->
                fun ~v3:(x9688 : GLuint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9689) "uniform4ui"
                       [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x9683);(
                         GLuint.t_to_js x9685);(GLuint.t_to_js x9686);(
                         GLuint.t_to_js x9687);(GLuint.t_to_js x9688)|])
    let (uniform4uiv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Uint32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9699 : 'tags this) ->
        fun ~location:(x9691 : WebGLUniformLocation.t option) ->
          fun ~data:(x9692 : Uint32List.t) ->
            fun ?srcOffset:(x9693 : GLuint.t option) ->
              fun ?srcLength:(x9694 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9701 = this_to_js Obj.magic x9699 in
                     Ojs.call (Ojs.get_prop_ascii x9701 "uniform4uiv")
                       "apply"
                       [|x9701;((let x9695 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9695 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x9691)|]);
                                 ignore
                                   (Ojs.call x9695 "push"
                                      [|(Uint32List.t_to_js x9692)|]);
                                 (match x9693 with
                                  | Some x9697 ->
                                      ignore
                                        (Ojs.call x9695 "push"
                                           [|(GLuint.t_to_js x9697)|])
                                  | None -> ());
                                 (match x9694 with
                                  | Some x9696 ->
                                      ignore
                                        (Ojs.call x9695 "push"
                                           [|(GLuint.t_to_js x9696)|])
                                  | None -> ());
                                 x9695))|])
    let (uniformBlockBinding :
      'tags this ->
        program:WebGLProgram.t ->
          uniformBlockIndex:GLuint.t -> uniformBlockBinding:GLuint.t -> unit)
      =
      fun (x9705 : 'tags this) ->
        fun ~program:(x9702 : WebGLProgram.t) ->
          fun ~uniformBlockIndex:(x9703 : GLuint.t) ->
            fun ~uniformBlockBinding:(x9704 : GLuint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x9705) "uniformBlockBinding"
                   [|(WebGLProgram.t_to_js x9702);(GLuint.t_to_js x9703);(
                     GLuint.t_to_js x9704)|])
    let (uniformMatrix2x3fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9716 : 'tags this) ->
        fun ~location:(x9707 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x9708 : GLboolean.t) ->
            fun ~data:(x9709 : Float32List.t) ->
              fun ?srcOffset:(x9710 : GLuint.t option) ->
                fun ?srcLength:(x9711 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9718 = this_to_js Obj.magic x9716 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9718 "uniformMatrix2x3fv")
                         "apply"
                         [|x9718;((let x9712 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9712 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9707)|]);
                                   ignore
                                     (Ojs.call x9712 "push"
                                        [|(GLboolean.t_to_js x9708)|]);
                                   ignore
                                     (Ojs.call x9712 "push"
                                        [|(Float32List.t_to_js x9709)|]);
                                   (match x9710 with
                                    | Some x9714 ->
                                        ignore
                                          (Ojs.call x9712 "push"
                                             [|(GLuint.t_to_js x9714)|])
                                    | None -> ());
                                   (match x9711 with
                                    | Some x9713 ->
                                        ignore
                                          (Ojs.call x9712 "push"
                                             [|(GLuint.t_to_js x9713)|])
                                    | None -> ());
                                   x9712))|])
    let (uniformMatrix2x4fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9728 : 'tags this) ->
        fun ~location:(x9719 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x9720 : GLboolean.t) ->
            fun ~data:(x9721 : Float32List.t) ->
              fun ?srcOffset:(x9722 : GLuint.t option) ->
                fun ?srcLength:(x9723 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9730 = this_to_js Obj.magic x9728 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9730 "uniformMatrix2x4fv")
                         "apply"
                         [|x9730;((let x9724 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9724 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9719)|]);
                                   ignore
                                     (Ojs.call x9724 "push"
                                        [|(GLboolean.t_to_js x9720)|]);
                                   ignore
                                     (Ojs.call x9724 "push"
                                        [|(Float32List.t_to_js x9721)|]);
                                   (match x9722 with
                                    | Some x9726 ->
                                        ignore
                                          (Ojs.call x9724 "push"
                                             [|(GLuint.t_to_js x9726)|])
                                    | None -> ());
                                   (match x9723 with
                                    | Some x9725 ->
                                        ignore
                                          (Ojs.call x9724 "push"
                                             [|(GLuint.t_to_js x9725)|])
                                    | None -> ());
                                   x9724))|])
    let (uniformMatrix3x2fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9740 : 'tags this) ->
        fun ~location:(x9731 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x9732 : GLboolean.t) ->
            fun ~data:(x9733 : Float32List.t) ->
              fun ?srcOffset:(x9734 : GLuint.t option) ->
                fun ?srcLength:(x9735 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9742 = this_to_js Obj.magic x9740 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9742 "uniformMatrix3x2fv")
                         "apply"
                         [|x9742;((let x9736 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9736 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9731)|]);
                                   ignore
                                     (Ojs.call x9736 "push"
                                        [|(GLboolean.t_to_js x9732)|]);
                                   ignore
                                     (Ojs.call x9736 "push"
                                        [|(Float32List.t_to_js x9733)|]);
                                   (match x9734 with
                                    | Some x9738 ->
                                        ignore
                                          (Ojs.call x9736 "push"
                                             [|(GLuint.t_to_js x9738)|])
                                    | None -> ());
                                   (match x9735 with
                                    | Some x9737 ->
                                        ignore
                                          (Ojs.call x9736 "push"
                                             [|(GLuint.t_to_js x9737)|])
                                    | None -> ());
                                   x9736))|])
    let (uniformMatrix3x4fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9752 : 'tags this) ->
        fun ~location:(x9743 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x9744 : GLboolean.t) ->
            fun ~data:(x9745 : Float32List.t) ->
              fun ?srcOffset:(x9746 : GLuint.t option) ->
                fun ?srcLength:(x9747 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9754 = this_to_js Obj.magic x9752 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9754 "uniformMatrix3x4fv")
                         "apply"
                         [|x9754;((let x9748 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9748 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9743)|]);
                                   ignore
                                     (Ojs.call x9748 "push"
                                        [|(GLboolean.t_to_js x9744)|]);
                                   ignore
                                     (Ojs.call x9748 "push"
                                        [|(Float32List.t_to_js x9745)|]);
                                   (match x9746 with
                                    | Some x9750 ->
                                        ignore
                                          (Ojs.call x9748 "push"
                                             [|(GLuint.t_to_js x9750)|])
                                    | None -> ());
                                   (match x9747 with
                                    | Some x9749 ->
                                        ignore
                                          (Ojs.call x9748 "push"
                                             [|(GLuint.t_to_js x9749)|])
                                    | None -> ());
                                   x9748))|])
    let (uniformMatrix4x2fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9764 : 'tags this) ->
        fun ~location:(x9755 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x9756 : GLboolean.t) ->
            fun ~data:(x9757 : Float32List.t) ->
              fun ?srcOffset:(x9758 : GLuint.t option) ->
                fun ?srcLength:(x9759 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9766 = this_to_js Obj.magic x9764 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9766 "uniformMatrix4x2fv")
                         "apply"
                         [|x9766;((let x9760 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9760 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9755)|]);
                                   ignore
                                     (Ojs.call x9760 "push"
                                        [|(GLboolean.t_to_js x9756)|]);
                                   ignore
                                     (Ojs.call x9760 "push"
                                        [|(Float32List.t_to_js x9757)|]);
                                   (match x9758 with
                                    | Some x9762 ->
                                        ignore
                                          (Ojs.call x9760 "push"
                                             [|(GLuint.t_to_js x9762)|])
                                    | None -> ());
                                   (match x9759 with
                                    | Some x9761 ->
                                        ignore
                                          (Ojs.call x9760 "push"
                                             [|(GLuint.t_to_js x9761)|])
                                    | None -> ());
                                   x9760))|])
    let (uniformMatrix4x3fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9776 : 'tags this) ->
        fun ~location:(x9767 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x9768 : GLboolean.t) ->
            fun ~data:(x9769 : Float32List.t) ->
              fun ?srcOffset:(x9770 : GLuint.t option) ->
                fun ?srcLength:(x9771 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9778 = this_to_js Obj.magic x9776 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9778 "uniformMatrix4x3fv")
                         "apply"
                         [|x9778;((let x9772 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9772 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9767)|]);
                                   ignore
                                     (Ojs.call x9772 "push"
                                        [|(GLboolean.t_to_js x9768)|]);
                                   ignore
                                     (Ojs.call x9772 "push"
                                        [|(Float32List.t_to_js x9769)|]);
                                   (match x9770 with
                                    | Some x9774 ->
                                        ignore
                                          (Ojs.call x9772 "push"
                                             [|(GLuint.t_to_js x9774)|])
                                    | None -> ());
                                   (match x9771 with
                                    | Some x9773 ->
                                        ignore
                                          (Ojs.call x9772 "push"
                                             [|(GLuint.t_to_js x9773)|])
                                    | None -> ());
                                   x9772))|])
    let (vertexAttribDivisor :
      'tags this -> index:GLuint.t -> divisor:GLuint.t -> unit) =
      fun (x9781 : 'tags this) ->
        fun ~index:(x9779 : GLuint.t) ->
          fun ~divisor:(x9780 : GLuint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9781) "vertexAttribDivisor"
                 [|(GLuint.t_to_js x9779);(GLuint.t_to_js x9780)|])
    let (vertexAttribI4i :
      'tags this ->
        index:GLuint.t ->
          x:GLint.t -> y:GLint.t -> z:GLint.t -> w:GLint.t -> unit)
      =
      fun (x9788 : 'tags this) ->
        fun ~index:(x9783 : GLuint.t) ->
          fun ~x:(x9784 : GLint.t) ->
            fun ~y:(x9785 : GLint.t) ->
              fun ~z:(x9786 : GLint.t) ->
                fun ~w:(x9787 : GLint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9788) "vertexAttribI4i"
                       [|(GLuint.t_to_js x9783);(GLint.t_to_js x9784);(
                         GLint.t_to_js x9785);(GLint.t_to_js x9786);(
                         GLint.t_to_js x9787)|])
    let (vertexAttribI4iv :
      'tags this -> index:GLuint.t -> values:Int32List.t -> unit) =
      fun (x9792 : 'tags this) ->
        fun ~index:(x9790 : GLuint.t) ->
          fun ~values:(x9791 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9792) "vertexAttribI4iv"
                 [|(GLuint.t_to_js x9790);(Int32List.t_to_js x9791)|])
    let (vertexAttribI4ui :
      'tags this ->
        index:GLuint.t ->
          x:GLuint.t -> y:GLuint.t -> z:GLuint.t -> w:GLuint.t -> unit)
      =
      fun (x9799 : 'tags this) ->
        fun ~index:(x9794 : GLuint.t) ->
          fun ~x:(x9795 : GLuint.t) ->
            fun ~y:(x9796 : GLuint.t) ->
              fun ~z:(x9797 : GLuint.t) ->
                fun ~w:(x9798 : GLuint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9799) "vertexAttribI4ui"
                       [|(GLuint.t_to_js x9794);(GLuint.t_to_js x9795);(
                         GLuint.t_to_js x9796);(GLuint.t_to_js x9797);(
                         GLuint.t_to_js x9798)|])
    let (vertexAttribI4uiv :
      'tags this -> index:GLuint.t -> values:Uint32List.t -> unit) =
      fun (x9803 : 'tags this) ->
        fun ~index:(x9801 : GLuint.t) ->
          fun ~values:(x9802 : Uint32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9803) "vertexAttribI4uiv"
                 [|(GLuint.t_to_js x9801);(Uint32List.t_to_js x9802)|])
    let (vertexAttribIPointer :
      'tags this ->
        index:GLuint.t ->
          size:GLint.t ->
            type_:GLenum.t -> stride:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x9810 : 'tags this) ->
        fun ~index:(x9805 : GLuint.t) ->
          fun ~size:(x9806 : GLint.t) ->
            fun ~type_:(x9807 : GLenum.t) ->
              fun ~stride:(x9808 : GLsizei.t) ->
                fun ~offset:(x9809 : GLintptr.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9810)
                       "vertexAttribIPointer"
                       [|(GLuint.t_to_js x9805);(GLint.t_to_js x9806);(
                         GLenum.t_to_js x9807);(GLsizei.t_to_js x9808);(
                         GLintptr.t_to_js x9809)|])
    let (waitSync :
      'tags this ->
        sync:WebGLSync.t -> flags:GLbitfield.t -> timeout:GLint64.t -> unit)
      =
      fun (x9815 : 'tags this) ->
        fun ~sync:(x9812 : WebGLSync.t) ->
          fun ~flags:(x9813 : GLbitfield.t) ->
            fun ~timeout:(x9814 : GLint64.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x9815) "waitSync"
                   [|(WebGLSync.t_to_js x9812);(GLbitfield.t_to_js x9813);(
                     GLint64.t_to_js x9814)|])
    let (get_ACTIVE_UNIFORM_BLOCKS : 'tags this -> GLenum.t) =
      fun (x9817 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9817)
             "ACTIVE_UNIFORM_BLOCKS")
    let (get_ALREADY_SIGNALED : 'tags this -> GLenum.t) =
      fun (x9819 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9819) "ALREADY_SIGNALED")
    let (get_ANY_SAMPLES_PASSED : 'tags this -> GLenum.t) =
      fun (x9821 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9821)
             "ANY_SAMPLES_PASSED")
    let (get_ANY_SAMPLES_PASSED_CONSERVATIVE : 'tags this -> GLenum.t) =
      fun (x9823 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9823)
             "ANY_SAMPLES_PASSED_CONSERVATIVE")
    let (get_COLOR : 'tags this -> GLenum.t) =
      fun (x9825 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9825) "COLOR")
    let (get_COLOR_ATTACHMENT1 : 'tags this -> GLenum.t) =
      fun (x9827 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9827)
             "COLOR_ATTACHMENT1")
    let (get_COLOR_ATTACHMENT10 : 'tags this -> GLenum.t) =
      fun (x9829 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9829)
             "COLOR_ATTACHMENT10")
    let (get_COLOR_ATTACHMENT11 : 'tags this -> GLenum.t) =
      fun (x9831 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9831)
             "COLOR_ATTACHMENT11")
    let (get_COLOR_ATTACHMENT12 : 'tags this -> GLenum.t) =
      fun (x9833 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9833)
             "COLOR_ATTACHMENT12")
    let (get_COLOR_ATTACHMENT13 : 'tags this -> GLenum.t) =
      fun (x9835 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9835)
             "COLOR_ATTACHMENT13")
    let (get_COLOR_ATTACHMENT14 : 'tags this -> GLenum.t) =
      fun (x9837 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9837)
             "COLOR_ATTACHMENT14")
    let (get_COLOR_ATTACHMENT15 : 'tags this -> GLenum.t) =
      fun (x9839 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9839)
             "COLOR_ATTACHMENT15")
    let (get_COLOR_ATTACHMENT2 : 'tags this -> GLenum.t) =
      fun (x9841 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9841)
             "COLOR_ATTACHMENT2")
    let (get_COLOR_ATTACHMENT3 : 'tags this -> GLenum.t) =
      fun (x9843 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9843)
             "COLOR_ATTACHMENT3")
    let (get_COLOR_ATTACHMENT4 : 'tags this -> GLenum.t) =
      fun (x9845 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9845)
             "COLOR_ATTACHMENT4")
    let (get_COLOR_ATTACHMENT5 : 'tags this -> GLenum.t) =
      fun (x9847 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9847)
             "COLOR_ATTACHMENT5")
    let (get_COLOR_ATTACHMENT6 : 'tags this -> GLenum.t) =
      fun (x9849 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9849)
             "COLOR_ATTACHMENT6")
    let (get_COLOR_ATTACHMENT7 : 'tags this -> GLenum.t) =
      fun (x9851 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9851)
             "COLOR_ATTACHMENT7")
    let (get_COLOR_ATTACHMENT8 : 'tags this -> GLenum.t) =
      fun (x9853 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9853)
             "COLOR_ATTACHMENT8")
    let (get_COLOR_ATTACHMENT9 : 'tags this -> GLenum.t) =
      fun (x9855 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9855)
             "COLOR_ATTACHMENT9")
    let (get_COMPARE_REF_TO_TEXTURE : 'tags this -> GLenum.t) =
      fun (x9857 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9857)
             "COMPARE_REF_TO_TEXTURE")
    let (get_CONDITION_SATISFIED : 'tags this -> GLenum.t) =
      fun (x9859 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9859)
             "CONDITION_SATISFIED")
    let (get_COPY_READ_BUFFER : 'tags this -> GLenum.t) =
      fun (x9861 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9861) "COPY_READ_BUFFER")
    let (get_COPY_READ_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x9863 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9863)
             "COPY_READ_BUFFER_BINDING")
    let (get_COPY_WRITE_BUFFER : 'tags this -> GLenum.t) =
      fun (x9865 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9865)
             "COPY_WRITE_BUFFER")
    let (get_COPY_WRITE_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x9867 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9867)
             "COPY_WRITE_BUFFER_BINDING")
    let (get_CURRENT_QUERY : 'tags this -> GLenum.t) =
      fun (x9869 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9869) "CURRENT_QUERY")
    let (get_DEPTH : 'tags this -> GLenum.t) =
      fun (x9871 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9871) "DEPTH")
    let (get_DEPTH24_STENCIL8 : 'tags this -> GLenum.t) =
      fun (x9873 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9873) "DEPTH24_STENCIL8")
    let (get_DEPTH32F_STENCIL8 : 'tags this -> GLenum.t) =
      fun (x9875 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9875)
             "DEPTH32F_STENCIL8")
    let (get_DEPTH_COMPONENT24 : 'tags this -> GLenum.t) =
      fun (x9877 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9877)
             "DEPTH_COMPONENT24")
    let (get_DEPTH_COMPONENT32F : 'tags this -> GLenum.t) =
      fun (x9879 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9879)
             "DEPTH_COMPONENT32F")
    let (get_DRAW_BUFFER0 : 'tags this -> GLenum.t) =
      fun (x9881 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9881) "DRAW_BUFFER0")
    let (get_DRAW_BUFFER1 : 'tags this -> GLenum.t) =
      fun (x9883 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9883) "DRAW_BUFFER1")
    let (get_DRAW_BUFFER10 : 'tags this -> GLenum.t) =
      fun (x9885 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9885) "DRAW_BUFFER10")
    let (get_DRAW_BUFFER11 : 'tags this -> GLenum.t) =
      fun (x9887 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9887) "DRAW_BUFFER11")
    let (get_DRAW_BUFFER12 : 'tags this -> GLenum.t) =
      fun (x9889 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9889) "DRAW_BUFFER12")
    let (get_DRAW_BUFFER13 : 'tags this -> GLenum.t) =
      fun (x9891 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9891) "DRAW_BUFFER13")
    let (get_DRAW_BUFFER14 : 'tags this -> GLenum.t) =
      fun (x9893 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9893) "DRAW_BUFFER14")
    let (get_DRAW_BUFFER15 : 'tags this -> GLenum.t) =
      fun (x9895 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9895) "DRAW_BUFFER15")
    let (get_DRAW_BUFFER2 : 'tags this -> GLenum.t) =
      fun (x9897 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9897) "DRAW_BUFFER2")
    let (get_DRAW_BUFFER3 : 'tags this -> GLenum.t) =
      fun (x9899 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9899) "DRAW_BUFFER3")
    let (get_DRAW_BUFFER4 : 'tags this -> GLenum.t) =
      fun (x9901 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9901) "DRAW_BUFFER4")
    let (get_DRAW_BUFFER5 : 'tags this -> GLenum.t) =
      fun (x9903 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9903) "DRAW_BUFFER5")
    let (get_DRAW_BUFFER6 : 'tags this -> GLenum.t) =
      fun (x9905 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9905) "DRAW_BUFFER6")
    let (get_DRAW_BUFFER7 : 'tags this -> GLenum.t) =
      fun (x9907 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9907) "DRAW_BUFFER7")
    let (get_DRAW_BUFFER8 : 'tags this -> GLenum.t) =
      fun (x9909 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9909) "DRAW_BUFFER8")
    let (get_DRAW_BUFFER9 : 'tags this -> GLenum.t) =
      fun (x9911 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9911) "DRAW_BUFFER9")
    let (get_DRAW_FRAMEBUFFER : 'tags this -> GLenum.t) =
      fun (x9913 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9913) "DRAW_FRAMEBUFFER")
    let (get_DRAW_FRAMEBUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x9915 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9915)
             "DRAW_FRAMEBUFFER_BINDING")
    let (get_DYNAMIC_COPY : 'tags this -> GLenum.t) =
      fun (x9917 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9917) "DYNAMIC_COPY")
    let (get_DYNAMIC_READ : 'tags this -> GLenum.t) =
      fun (x9919 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9919) "DYNAMIC_READ")
    let (get_FLOAT_32_UNSIGNED_INT_24_8_REV : 'tags this -> GLenum.t) =
      fun (x9921 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9921)
             "FLOAT_32_UNSIGNED_INT_24_8_REV")
    let (get_FLOAT_MAT2x3 : 'tags this -> GLenum.t) =
      fun (x9923 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9923) "FLOAT_MAT2x3")
    let (get_FLOAT_MAT2x4 : 'tags this -> GLenum.t) =
      fun (x9925 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9925) "FLOAT_MAT2x4")
    let (get_FLOAT_MAT3x2 : 'tags this -> GLenum.t) =
      fun (x9927 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9927) "FLOAT_MAT3x2")
    let (get_FLOAT_MAT3x4 : 'tags this -> GLenum.t) =
      fun (x9929 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9929) "FLOAT_MAT3x4")
    let (get_FLOAT_MAT4x2 : 'tags this -> GLenum.t) =
      fun (x9931 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9931) "FLOAT_MAT4x2")
    let (get_FLOAT_MAT4x3 : 'tags this -> GLenum.t) =
      fun (x9933 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9933) "FLOAT_MAT4x3")
    let (get_FRAGMENT_SHADER_DERIVATIVE_HINT : 'tags this -> GLenum.t) =
      fun (x9935 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9935)
             "FRAGMENT_SHADER_DERIVATIVE_HINT")
    let (get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE : 'tags this -> GLenum.t) =
      fun (x9937 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9937)
             "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE : 'tags this -> GLenum.t) =
      fun (x9939 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9939)
             "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING : 'tags this -> GLenum.t)
      =
      fun (x9941 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9941)
             "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING")
    let (get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE : 'tags this -> GLenum.t)
      =
      fun (x9943 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9943)
             "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE")
    let (get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE : 'tags this -> GLenum.t) =
      fun (x9945 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9945)
             "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE : 'tags this -> GLenum.t) =
      fun (x9947 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9947)
             "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_RED_SIZE : 'tags this -> GLenum.t) =
      fun (x9949 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9949)
             "FRAMEBUFFER_ATTACHMENT_RED_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE : 'tags this -> GLenum.t) =
      fun (x9951 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9951)
             "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER : 'tags this -> GLenum.t) =
      fun (x9953 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9953)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER")
    let (get_FRAMEBUFFER_DEFAULT : 'tags this -> GLenum.t) =
      fun (x9955 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9955)
             "FRAMEBUFFER_DEFAULT")
    let (get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE : 'tags this -> GLenum.t) =
      fun (x9957 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9957)
             "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE")
    let (get_HALF_FLOAT : 'tags this -> GLenum.t) =
      fun (x9959 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9959) "HALF_FLOAT")
    let (get_INTERLEAVED_ATTRIBS : 'tags this -> GLenum.t) =
      fun (x9961 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9961)
             "INTERLEAVED_ATTRIBS")
    let (get_INT_2_10_10_10_REV : 'tags this -> GLenum.t) =
      fun (x9963 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9963)
             "INT_2_10_10_10_REV")
    let (get_INT_SAMPLER_2D : 'tags this -> GLenum.t) =
      fun (x9965 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9965) "INT_SAMPLER_2D")
    let (get_INT_SAMPLER_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x9967 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9967)
             "INT_SAMPLER_2D_ARRAY")
    let (get_INT_SAMPLER_3D : 'tags this -> GLenum.t) =
      fun (x9969 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9969) "INT_SAMPLER_3D")
    let (get_INT_SAMPLER_CUBE : 'tags this -> GLenum.t) =
      fun (x9971 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9971) "INT_SAMPLER_CUBE")
    let (get_INVALID_INDEX : 'tags this -> GLenum.t) =
      fun (x9973 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9973) "INVALID_INDEX")
    let (get_MAX : 'tags this -> GLenum.t) =
      fun (x9975 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9975) "MAX")
    let (get_MAX_3D_TEXTURE_SIZE : 'tags this -> GLenum.t) =
      fun (x9977 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9977)
             "MAX_3D_TEXTURE_SIZE")
    let (get_MAX_ARRAY_TEXTURE_LAYERS : 'tags this -> GLenum.t) =
      fun (x9979 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9979)
             "MAX_ARRAY_TEXTURE_LAYERS")
    let (get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL : 'tags this -> GLenum.t) =
      fun (x9981 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9981)
             "MAX_CLIENT_WAIT_TIMEOUT_WEBGL")
    let (get_MAX_COLOR_ATTACHMENTS : 'tags this -> GLenum.t) =
      fun (x9983 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9983)
             "MAX_COLOR_ATTACHMENTS")
    let (get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS :
      'tags this -> GLenum.t) =
      fun (x9985 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9985)
             "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS")
    let (get_MAX_COMBINED_UNIFORM_BLOCKS : 'tags this -> GLenum.t) =
      fun (x9987 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9987)
             "MAX_COMBINED_UNIFORM_BLOCKS")
    let (get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS : 'tags this -> GLenum.t)
      =
      fun (x9989 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9989)
             "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS")
    let (get_MAX_DRAW_BUFFERS : 'tags this -> GLenum.t) =
      fun (x9991 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9991) "MAX_DRAW_BUFFERS")
    let (get_MAX_ELEMENTS_INDICES : 'tags this -> GLenum.t) =
      fun (x9993 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9993)
             "MAX_ELEMENTS_INDICES")
    let (get_MAX_ELEMENTS_VERTICES : 'tags this -> GLenum.t) =
      fun (x9995 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9995)
             "MAX_ELEMENTS_VERTICES")
    let (get_MAX_ELEMENT_INDEX : 'tags this -> GLenum.t) =
      fun (x9997 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9997)
             "MAX_ELEMENT_INDEX")
    let (get_MAX_FRAGMENT_INPUT_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x9999 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9999)
             "MAX_FRAGMENT_INPUT_COMPONENTS")
    let (get_MAX_FRAGMENT_UNIFORM_BLOCKS : 'tags this -> GLenum.t) =
      fun (x10001 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10001)
             "MAX_FRAGMENT_UNIFORM_BLOCKS")
    let (get_MAX_FRAGMENT_UNIFORM_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x10003 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10003)
             "MAX_FRAGMENT_UNIFORM_COMPONENTS")
    let (get_MAX_PROGRAM_TEXEL_OFFSET : 'tags this -> GLenum.t) =
      fun (x10005 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10005)
             "MAX_PROGRAM_TEXEL_OFFSET")
    let (get_MAX_SAMPLES : 'tags this -> GLenum.t) =
      fun (x10007 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10007) "MAX_SAMPLES")
    let (get_MAX_SERVER_WAIT_TIMEOUT : 'tags this -> GLenum.t) =
      fun (x10009 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10009)
             "MAX_SERVER_WAIT_TIMEOUT")
    let (get_MAX_TEXTURE_LOD_BIAS : 'tags this -> GLenum.t) =
      fun (x10011 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10011)
             "MAX_TEXTURE_LOD_BIAS")
    let (get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS :
      'tags this -> GLenum.t) =
      fun (x10013 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10013)
             "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS")
    let (get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS :
      'tags this -> GLenum.t) =
      fun (x10015 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10015)
             "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS")
    let (get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS :
      'tags this -> GLenum.t) =
      fun (x10017 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10017)
             "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS")
    let (get_MAX_UNIFORM_BLOCK_SIZE : 'tags this -> GLenum.t) =
      fun (x10019 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10019)
             "MAX_UNIFORM_BLOCK_SIZE")
    let (get_MAX_UNIFORM_BUFFER_BINDINGS : 'tags this -> GLenum.t) =
      fun (x10021 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10021)
             "MAX_UNIFORM_BUFFER_BINDINGS")
    let (get_MAX_VARYING_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x10023 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10023)
             "MAX_VARYING_COMPONENTS")
    let (get_MAX_VERTEX_OUTPUT_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x10025 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10025)
             "MAX_VERTEX_OUTPUT_COMPONENTS")
    let (get_MAX_VERTEX_UNIFORM_BLOCKS : 'tags this -> GLenum.t) =
      fun (x10027 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10027)
             "MAX_VERTEX_UNIFORM_BLOCKS")
    let (get_MAX_VERTEX_UNIFORM_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x10029 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10029)
             "MAX_VERTEX_UNIFORM_COMPONENTS")
    let (get_MIN : 'tags this -> GLenum.t) =
      fun (x10031 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10031) "MIN")
    let (get_MIN_PROGRAM_TEXEL_OFFSET : 'tags this -> GLenum.t) =
      fun (x10033 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10033)
             "MIN_PROGRAM_TEXEL_OFFSET")
    let (get_OBJECT_TYPE : 'tags this -> GLenum.t) =
      fun (x10035 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10035) "OBJECT_TYPE")
    let (get_PACK_ROW_LENGTH : 'tags this -> GLenum.t) =
      fun (x10037 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10037) "PACK_ROW_LENGTH")
    let (get_PACK_SKIP_PIXELS : 'tags this -> GLenum.t) =
      fun (x10039 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10039)
             "PACK_SKIP_PIXELS")
    let (get_PACK_SKIP_ROWS : 'tags this -> GLenum.t) =
      fun (x10041 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10041) "PACK_SKIP_ROWS")
    let (get_PIXEL_PACK_BUFFER : 'tags this -> GLenum.t) =
      fun (x10043 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10043)
             "PIXEL_PACK_BUFFER")
    let (get_PIXEL_PACK_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x10045 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10045)
             "PIXEL_PACK_BUFFER_BINDING")
    let (get_PIXEL_UNPACK_BUFFER : 'tags this -> GLenum.t) =
      fun (x10047 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10047)
             "PIXEL_UNPACK_BUFFER")
    let (get_PIXEL_UNPACK_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x10049 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10049)
             "PIXEL_UNPACK_BUFFER_BINDING")
    let (get_QUERY_RESULT : 'tags this -> GLenum.t) =
      fun (x10051 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10051) "QUERY_RESULT")
    let (get_QUERY_RESULT_AVAILABLE : 'tags this -> GLenum.t) =
      fun (x10053 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10053)
             "QUERY_RESULT_AVAILABLE")
    let (get_R11F_G11F_B10F : 'tags this -> GLenum.t) =
      fun (x10055 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10055) "R11F_G11F_B10F")
    let (get_R16F : 'tags this -> GLenum.t) =
      fun (x10057 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10057) "R16F")
    let (get_R16I : 'tags this -> GLenum.t) =
      fun (x10059 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10059) "R16I")
    let (get_R16UI : 'tags this -> GLenum.t) =
      fun (x10061 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10061) "R16UI")
    let (get_R32F : 'tags this -> GLenum.t) =
      fun (x10063 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10063) "R32F")
    let (get_R32I : 'tags this -> GLenum.t) =
      fun (x10065 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10065) "R32I")
    let (get_R32UI : 'tags this -> GLenum.t) =
      fun (x10067 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10067) "R32UI")
    let (get_R8 : 'tags this -> GLenum.t) =
      fun (x10069 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10069) "R8")
    let (get_R8I : 'tags this -> GLenum.t) =
      fun (x10071 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10071) "R8I")
    let (get_R8UI : 'tags this -> GLenum.t) =
      fun (x10073 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10073) "R8UI")
    let (get_R8_SNORM : 'tags this -> GLenum.t) =
      fun (x10075 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10075) "R8_SNORM")
    let (get_RASTERIZER_DISCARD : 'tags this -> GLenum.t) =
      fun (x10077 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10077)
             "RASTERIZER_DISCARD")
    let (get_READ_BUFFER : 'tags this -> GLenum.t) =
      fun (x10079 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10079) "READ_BUFFER")
    let (get_READ_FRAMEBUFFER : 'tags this -> GLenum.t) =
      fun (x10081 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10081)
             "READ_FRAMEBUFFER")
    let (get_READ_FRAMEBUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x10083 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10083)
             "READ_FRAMEBUFFER_BINDING")
    let (get_RED : 'tags this -> GLenum.t) =
      fun (x10085 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10085) "RED")
    let (get_RED_INTEGER : 'tags this -> GLenum.t) =
      fun (x10087 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10087) "RED_INTEGER")
    let (get_RENDERBUFFER_SAMPLES : 'tags this -> GLenum.t) =
      fun (x10089 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10089)
             "RENDERBUFFER_SAMPLES")
    let (get_RG : 'tags this -> GLenum.t) =
      fun (x10091 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10091) "RG")
    let (get_RG16F : 'tags this -> GLenum.t) =
      fun (x10093 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10093) "RG16F")
    let (get_RG16I : 'tags this -> GLenum.t) =
      fun (x10095 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10095) "RG16I")
    let (get_RG16UI : 'tags this -> GLenum.t) =
      fun (x10097 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10097) "RG16UI")
    let (get_RG32F : 'tags this -> GLenum.t) =
      fun (x10099 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10099) "RG32F")
    let (get_RG32I : 'tags this -> GLenum.t) =
      fun (x10101 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10101) "RG32I")
    let (get_RG32UI : 'tags this -> GLenum.t) =
      fun (x10103 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10103) "RG32UI")
    let (get_RG8 : 'tags this -> GLenum.t) =
      fun (x10105 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10105) "RG8")
    let (get_RG8I : 'tags this -> GLenum.t) =
      fun (x10107 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10107) "RG8I")
    let (get_RG8UI : 'tags this -> GLenum.t) =
      fun (x10109 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10109) "RG8UI")
    let (get_RG8_SNORM : 'tags this -> GLenum.t) =
      fun (x10111 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10111) "RG8_SNORM")
    let (get_RGB10_A2 : 'tags this -> GLenum.t) =
      fun (x10113 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10113) "RGB10_A2")
    let (get_RGB10_A2UI : 'tags this -> GLenum.t) =
      fun (x10115 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10115) "RGB10_A2UI")
    let (get_RGB16F : 'tags this -> GLenum.t) =
      fun (x10117 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10117) "RGB16F")
    let (get_RGB16I : 'tags this -> GLenum.t) =
      fun (x10119 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10119) "RGB16I")
    let (get_RGB16UI : 'tags this -> GLenum.t) =
      fun (x10121 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10121) "RGB16UI")
    let (get_RGB32F : 'tags this -> GLenum.t) =
      fun (x10123 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10123) "RGB32F")
    let (get_RGB32I : 'tags this -> GLenum.t) =
      fun (x10125 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10125) "RGB32I")
    let (get_RGB32UI : 'tags this -> GLenum.t) =
      fun (x10127 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10127) "RGB32UI")
    let (get_RGB8 : 'tags this -> GLenum.t) =
      fun (x10129 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10129) "RGB8")
    let (get_RGB8I : 'tags this -> GLenum.t) =
      fun (x10131 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10131) "RGB8I")
    let (get_RGB8UI : 'tags this -> GLenum.t) =
      fun (x10133 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10133) "RGB8UI")
    let (get_RGB8_SNORM : 'tags this -> GLenum.t) =
      fun (x10135 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10135) "RGB8_SNORM")
    let (get_RGB9_E5 : 'tags this -> GLenum.t) =
      fun (x10137 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10137) "RGB9_E5")
    let (get_RGBA16F : 'tags this -> GLenum.t) =
      fun (x10139 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10139) "RGBA16F")
    let (get_RGBA16I : 'tags this -> GLenum.t) =
      fun (x10141 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10141) "RGBA16I")
    let (get_RGBA16UI : 'tags this -> GLenum.t) =
      fun (x10143 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10143) "RGBA16UI")
    let (get_RGBA32F : 'tags this -> GLenum.t) =
      fun (x10145 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10145) "RGBA32F")
    let (get_RGBA32I : 'tags this -> GLenum.t) =
      fun (x10147 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10147) "RGBA32I")
    let (get_RGBA32UI : 'tags this -> GLenum.t) =
      fun (x10149 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10149) "RGBA32UI")
    let (get_RGBA8 : 'tags this -> GLenum.t) =
      fun (x10151 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10151) "RGBA8")
    let (get_RGBA8I : 'tags this -> GLenum.t) =
      fun (x10153 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10153) "RGBA8I")
    let (get_RGBA8UI : 'tags this -> GLenum.t) =
      fun (x10155 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10155) "RGBA8UI")
    let (get_RGBA8_SNORM : 'tags this -> GLenum.t) =
      fun (x10157 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10157) "RGBA8_SNORM")
    let (get_RGBA_INTEGER : 'tags this -> GLenum.t) =
      fun (x10159 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10159) "RGBA_INTEGER")
    let (get_RGB_INTEGER : 'tags this -> GLenum.t) =
      fun (x10161 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10161) "RGB_INTEGER")
    let (get_RG_INTEGER : 'tags this -> GLenum.t) =
      fun (x10163 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10163) "RG_INTEGER")
    let (get_SAMPLER_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x10165 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10165)
             "SAMPLER_2D_ARRAY")
    let (get_SAMPLER_2D_ARRAY_SHADOW : 'tags this -> GLenum.t) =
      fun (x10167 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10167)
             "SAMPLER_2D_ARRAY_SHADOW")
    let (get_SAMPLER_2D_SHADOW : 'tags this -> GLenum.t) =
      fun (x10169 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10169)
             "SAMPLER_2D_SHADOW")
    let (get_SAMPLER_3D : 'tags this -> GLenum.t) =
      fun (x10171 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10171) "SAMPLER_3D")
    let (get_SAMPLER_BINDING : 'tags this -> GLenum.t) =
      fun (x10173 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10173) "SAMPLER_BINDING")
    let (get_SAMPLER_CUBE_SHADOW : 'tags this -> GLenum.t) =
      fun (x10175 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10175)
             "SAMPLER_CUBE_SHADOW")
    let (get_SEPARATE_ATTRIBS : 'tags this -> GLenum.t) =
      fun (x10177 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10177)
             "SEPARATE_ATTRIBS")
    let (get_SIGNALED : 'tags this -> GLenum.t) =
      fun (x10179 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10179) "SIGNALED")
    let (get_SIGNED_NORMALIZED : 'tags this -> GLenum.t) =
      fun (x10181 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10181)
             "SIGNED_NORMALIZED")
    let (get_SRGB : 'tags this -> GLenum.t) =
      fun (x10183 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10183) "SRGB")
    let (get_SRGB8 : 'tags this -> GLenum.t) =
      fun (x10185 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10185) "SRGB8")
    let (get_SRGB8_ALPHA8 : 'tags this -> GLenum.t) =
      fun (x10187 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10187) "SRGB8_ALPHA8")
    let (get_STATIC_COPY : 'tags this -> GLenum.t) =
      fun (x10189 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10189) "STATIC_COPY")
    let (get_STATIC_READ : 'tags this -> GLenum.t) =
      fun (x10191 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10191) "STATIC_READ")
    let (get_STENCIL : 'tags this -> GLenum.t) =
      fun (x10193 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10193) "STENCIL")
    let (get_STREAM_COPY : 'tags this -> GLenum.t) =
      fun (x10195 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10195) "STREAM_COPY")
    let (get_STREAM_READ : 'tags this -> GLenum.t) =
      fun (x10197 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10197) "STREAM_READ")
    let (get_SYNC_CONDITION : 'tags this -> GLenum.t) =
      fun (x10199 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10199) "SYNC_CONDITION")
    let (get_SYNC_FENCE : 'tags this -> GLenum.t) =
      fun (x10201 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10201) "SYNC_FENCE")
    let (get_SYNC_FLAGS : 'tags this -> GLenum.t) =
      fun (x10203 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10203) "SYNC_FLAGS")
    let (get_SYNC_FLUSH_COMMANDS_BIT : 'tags this -> GLenum.t) =
      fun (x10205 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10205)
             "SYNC_FLUSH_COMMANDS_BIT")
    let (get_SYNC_GPU_COMMANDS_COMPLETE : 'tags this -> GLenum.t) =
      fun (x10207 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10207)
             "SYNC_GPU_COMMANDS_COMPLETE")
    let (get_SYNC_STATUS : 'tags this -> GLenum.t) =
      fun (x10209 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10209) "SYNC_STATUS")
    let (get_TEXTURE_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x10211 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10211)
             "TEXTURE_2D_ARRAY")
    let (get_TEXTURE_3D : 'tags this -> GLenum.t) =
      fun (x10213 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10213) "TEXTURE_3D")
    let (get_TEXTURE_BASE_LEVEL : 'tags this -> GLenum.t) =
      fun (x10215 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10215)
             "TEXTURE_BASE_LEVEL")
    let (get_TEXTURE_BINDING_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x10217 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10217)
             "TEXTURE_BINDING_2D_ARRAY")
    let (get_TEXTURE_BINDING_3D : 'tags this -> GLenum.t) =
      fun (x10219 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10219)
             "TEXTURE_BINDING_3D")
    let (get_TEXTURE_COMPARE_FUNC : 'tags this -> GLenum.t) =
      fun (x10221 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10221)
             "TEXTURE_COMPARE_FUNC")
    let (get_TEXTURE_COMPARE_MODE : 'tags this -> GLenum.t) =
      fun (x10223 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10223)
             "TEXTURE_COMPARE_MODE")
    let (get_TEXTURE_IMMUTABLE_FORMAT : 'tags this -> GLenum.t) =
      fun (x10225 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10225)
             "TEXTURE_IMMUTABLE_FORMAT")
    let (get_TEXTURE_IMMUTABLE_LEVELS : 'tags this -> GLenum.t) =
      fun (x10227 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10227)
             "TEXTURE_IMMUTABLE_LEVELS")
    let (get_TEXTURE_MAX_LEVEL : 'tags this -> GLenum.t) =
      fun (x10229 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10229)
             "TEXTURE_MAX_LEVEL")
    let (get_TEXTURE_MAX_LOD : 'tags this -> GLenum.t) =
      fun (x10231 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10231) "TEXTURE_MAX_LOD")
    let (get_TEXTURE_MIN_LOD : 'tags this -> GLenum.t) =
      fun (x10233 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10233) "TEXTURE_MIN_LOD")
    let (get_TEXTURE_WRAP_R : 'tags this -> GLenum.t) =
      fun (x10235 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10235) "TEXTURE_WRAP_R")
    let (get_TIMEOUT_EXPIRED : 'tags this -> GLenum.t) =
      fun (x10237 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10237) "TIMEOUT_EXPIRED")
    let (get_TIMEOUT_IGNORED : 'tags this -> GLint64.t) =
      fun (x10239 : 'tags this) ->
        GLint64.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10239) "TIMEOUT_IGNORED")
    let (get_TRANSFORM_FEEDBACK : 'tags this -> GLenum.t) =
      fun (x10241 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10241)
             "TRANSFORM_FEEDBACK")
    let (get_TRANSFORM_FEEDBACK_ACTIVE : 'tags this -> GLenum.t) =
      fun (x10243 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10243)
             "TRANSFORM_FEEDBACK_ACTIVE")
    let (get_TRANSFORM_FEEDBACK_BINDING : 'tags this -> GLenum.t) =
      fun (x10245 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10245)
             "TRANSFORM_FEEDBACK_BINDING")
    let (get_TRANSFORM_FEEDBACK_BUFFER : 'tags this -> GLenum.t) =
      fun (x10247 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10247)
             "TRANSFORM_FEEDBACK_BUFFER")
    let (get_TRANSFORM_FEEDBACK_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x10249 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10249)
             "TRANSFORM_FEEDBACK_BUFFER_BINDING")
    let (get_TRANSFORM_FEEDBACK_BUFFER_MODE : 'tags this -> GLenum.t) =
      fun (x10251 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10251)
             "TRANSFORM_FEEDBACK_BUFFER_MODE")
    let (get_TRANSFORM_FEEDBACK_BUFFER_SIZE : 'tags this -> GLenum.t) =
      fun (x10253 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10253)
             "TRANSFORM_FEEDBACK_BUFFER_SIZE")
    let (get_TRANSFORM_FEEDBACK_BUFFER_START : 'tags this -> GLenum.t) =
      fun (x10255 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10255)
             "TRANSFORM_FEEDBACK_BUFFER_START")
    let (get_TRANSFORM_FEEDBACK_PAUSED : 'tags this -> GLenum.t) =
      fun (x10257 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10257)
             "TRANSFORM_FEEDBACK_PAUSED")
    let (get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN : 'tags this -> GLenum.t)
      =
      fun (x10259 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10259)
             "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN")
    let (get_TRANSFORM_FEEDBACK_VARYINGS : 'tags this -> GLenum.t) =
      fun (x10261 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10261)
             "TRANSFORM_FEEDBACK_VARYINGS")
    let (get_UNIFORM_ARRAY_STRIDE : 'tags this -> GLenum.t) =
      fun (x10263 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10263)
             "UNIFORM_ARRAY_STRIDE")
    let (get_UNIFORM_BLOCK_ACTIVE_UNIFORMS : 'tags this -> GLenum.t) =
      fun (x10265 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10265)
             "UNIFORM_BLOCK_ACTIVE_UNIFORMS")
    let (get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES : 'tags this -> GLenum.t) =
      fun (x10267 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10267)
             "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES")
    let (get_UNIFORM_BLOCK_BINDING : 'tags this -> GLenum.t) =
      fun (x10269 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10269)
             "UNIFORM_BLOCK_BINDING")
    let (get_UNIFORM_BLOCK_DATA_SIZE : 'tags this -> GLenum.t) =
      fun (x10271 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10271)
             "UNIFORM_BLOCK_DATA_SIZE")
    let (get_UNIFORM_BLOCK_INDEX : 'tags this -> GLenum.t) =
      fun (x10273 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10273)
             "UNIFORM_BLOCK_INDEX")
    let (get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER :
      'tags this -> GLenum.t) =
      fun (x10275 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10275)
             "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER")
    let (get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER :
      'tags this -> GLenum.t) =
      fun (x10277 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10277)
             "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER")
    let (get_UNIFORM_BUFFER : 'tags this -> GLenum.t) =
      fun (x10279 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10279) "UNIFORM_BUFFER")
    let (get_UNIFORM_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x10281 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10281)
             "UNIFORM_BUFFER_BINDING")
    let (get_UNIFORM_BUFFER_OFFSET_ALIGNMENT : 'tags this -> GLenum.t) =
      fun (x10283 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10283)
             "UNIFORM_BUFFER_OFFSET_ALIGNMENT")
    let (get_UNIFORM_BUFFER_SIZE : 'tags this -> GLenum.t) =
      fun (x10285 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10285)
             "UNIFORM_BUFFER_SIZE")
    let (get_UNIFORM_BUFFER_START : 'tags this -> GLenum.t) =
      fun (x10287 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10287)
             "UNIFORM_BUFFER_START")
    let (get_UNIFORM_IS_ROW_MAJOR : 'tags this -> GLenum.t) =
      fun (x10289 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10289)
             "UNIFORM_IS_ROW_MAJOR")
    let (get_UNIFORM_MATRIX_STRIDE : 'tags this -> GLenum.t) =
      fun (x10291 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10291)
             "UNIFORM_MATRIX_STRIDE")
    let (get_UNIFORM_OFFSET : 'tags this -> GLenum.t) =
      fun (x10293 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10293) "UNIFORM_OFFSET")
    let (get_UNIFORM_SIZE : 'tags this -> GLenum.t) =
      fun (x10295 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10295) "UNIFORM_SIZE")
    let (get_UNIFORM_TYPE : 'tags this -> GLenum.t) =
      fun (x10297 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10297) "UNIFORM_TYPE")
    let (get_UNPACK_IMAGE_HEIGHT : 'tags this -> GLenum.t) =
      fun (x10299 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10299)
             "UNPACK_IMAGE_HEIGHT")
    let (get_UNPACK_ROW_LENGTH : 'tags this -> GLenum.t) =
      fun (x10301 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10301)
             "UNPACK_ROW_LENGTH")
    let (get_UNPACK_SKIP_IMAGES : 'tags this -> GLenum.t) =
      fun (x10303 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10303)
             "UNPACK_SKIP_IMAGES")
    let (get_UNPACK_SKIP_PIXELS : 'tags this -> GLenum.t) =
      fun (x10305 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10305)
             "UNPACK_SKIP_PIXELS")
    let (get_UNPACK_SKIP_ROWS : 'tags this -> GLenum.t) =
      fun (x10307 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10307)
             "UNPACK_SKIP_ROWS")
    let (get_UNSIGNALED : 'tags this -> GLenum.t) =
      fun (x10309 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10309) "UNSIGNALED")
    let (get_UNSIGNED_INT_10F_11F_11F_REV : 'tags this -> GLenum.t) =
      fun (x10311 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10311)
             "UNSIGNED_INT_10F_11F_11F_REV")
    let (get_UNSIGNED_INT_24_8 : 'tags this -> GLenum.t) =
      fun (x10313 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10313)
             "UNSIGNED_INT_24_8")
    let (get_UNSIGNED_INT_2_10_10_10_REV : 'tags this -> GLenum.t) =
      fun (x10315 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10315)
             "UNSIGNED_INT_2_10_10_10_REV")
    let (get_UNSIGNED_INT_5_9_9_9_REV : 'tags this -> GLenum.t) =
      fun (x10317 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10317)
             "UNSIGNED_INT_5_9_9_9_REV")
    let (get_UNSIGNED_INT_SAMPLER_2D : 'tags this -> GLenum.t) =
      fun (x10319 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10319)
             "UNSIGNED_INT_SAMPLER_2D")
    let (get_UNSIGNED_INT_SAMPLER_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x10321 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10321)
             "UNSIGNED_INT_SAMPLER_2D_ARRAY")
    let (get_UNSIGNED_INT_SAMPLER_3D : 'tags this -> GLenum.t) =
      fun (x10323 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10323)
             "UNSIGNED_INT_SAMPLER_3D")
    let (get_UNSIGNED_INT_SAMPLER_CUBE : 'tags this -> GLenum.t) =
      fun (x10325 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10325)
             "UNSIGNED_INT_SAMPLER_CUBE")
    let (get_UNSIGNED_INT_VEC2 : 'tags this -> GLenum.t) =
      fun (x10327 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10327)
             "UNSIGNED_INT_VEC2")
    let (get_UNSIGNED_INT_VEC3 : 'tags this -> GLenum.t) =
      fun (x10329 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10329)
             "UNSIGNED_INT_VEC3")
    let (get_UNSIGNED_INT_VEC4 : 'tags this -> GLenum.t) =
      fun (x10331 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10331)
             "UNSIGNED_INT_VEC4")
    let (get_UNSIGNED_NORMALIZED : 'tags this -> GLenum.t) =
      fun (x10333 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10333)
             "UNSIGNED_NORMALIZED")
    let (get_VERTEX_ARRAY_BINDING : 'tags this -> GLenum.t) =
      fun (x10335 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10335)
             "VERTEX_ARRAY_BINDING")
    let (get_VERTEX_ATTRIB_ARRAY_DIVISOR : 'tags this -> GLenum.t) =
      fun (x10337 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10337)
             "VERTEX_ATTRIB_ARRAY_DIVISOR")
    let (get_VERTEX_ATTRIB_ARRAY_INTEGER : 'tags this -> GLenum.t) =
      fun (x10339 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10339)
             "VERTEX_ATTRIB_ARRAY_INTEGER")
    let (get_WAIT_FAILED : 'tags this -> GLenum.t) =
      fun (x10341 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10341) "WAIT_FAILED")
    let (clearBufferfv' :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x10350 : 'tags this) ->
        fun ~buffer:(x10343 : GLenum.t) ->
          fun ~drawbuffer:(x10344 : GLint.t) ->
            fun ~values:(x10345 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x10346 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x10352 = this_to_js Obj.magic x10350 in
                     Ojs.call (Ojs.get_prop_ascii x10352 "clearBufferfv")
                       "apply"
                       [|x10352;((let x10347 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x10347 "push"
                                       [|(GLenum.t_to_js x10343)|]);
                                  ignore
                                    (Ojs.call x10347 "push"
                                       [|(GLint.t_to_js x10344)|]);
                                  ignore
                                    (Ojs.call x10347 "push"
                                       [|(Iterable.t_1_to_js GLfloat.t_to_js
                                            x10345)|]);
                                  (match x10346 with
                                   | Some x10348 ->
                                       ignore
                                         (Ojs.call x10347 "push"
                                            [|(GLuint.t_to_js x10348)|])
                                   | None -> ());
                                  x10347))|])
    let (clearBufferiv' :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:GLint.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x10360 : 'tags this) ->
        fun ~buffer:(x10353 : GLenum.t) ->
          fun ~drawbuffer:(x10354 : GLint.t) ->
            fun ~values:(x10355 : GLint.t Iterable.t_1) ->
              fun ?srcOffset:(x10356 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x10362 = this_to_js Obj.magic x10360 in
                     Ojs.call (Ojs.get_prop_ascii x10362 "clearBufferiv")
                       "apply"
                       [|x10362;((let x10357 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x10357 "push"
                                       [|(GLenum.t_to_js x10353)|]);
                                  ignore
                                    (Ojs.call x10357 "push"
                                       [|(GLint.t_to_js x10354)|]);
                                  ignore
                                    (Ojs.call x10357 "push"
                                       [|(Iterable.t_1_to_js GLint.t_to_js
                                            x10355)|]);
                                  (match x10356 with
                                   | Some x10358 ->
                                       ignore
                                         (Ojs.call x10357 "push"
                                            [|(GLuint.t_to_js x10358)|])
                                   | None -> ());
                                  x10357))|])
    let (clearBufferuiv' :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:GLuint.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x10370 : 'tags this) ->
        fun ~buffer:(x10363 : GLenum.t) ->
          fun ~drawbuffer:(x10364 : GLint.t) ->
            fun ~values:(x10365 : GLuint.t Iterable.t_1) ->
              fun ?srcOffset:(x10366 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x10372 = this_to_js Obj.magic x10370 in
                     Ojs.call (Ojs.get_prop_ascii x10372 "clearBufferuiv")
                       "apply"
                       [|x10372;((let x10367 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x10367 "push"
                                       [|(GLenum.t_to_js x10363)|]);
                                  ignore
                                    (Ojs.call x10367 "push"
                                       [|(GLint.t_to_js x10364)|]);
                                  ignore
                                    (Ojs.call x10367 "push"
                                       [|(Iterable.t_1_to_js GLuint.t_to_js
                                            x10365)|]);
                                  (match x10366 with
                                   | Some x10368 ->
                                       ignore
                                         (Ojs.call x10367 "push"
                                            [|(GLuint.t_to_js x10368)|])
                                   | None -> ());
                                  x10367))|])
    let (drawBuffers' : 'tags this -> buffers:GLenum.t Iterable.t_1 -> unit)
      =
      fun (x10375 : 'tags this) ->
        fun ~buffers:(x10373 : GLenum.t Iterable.t_1) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x10375) "drawBuffers"
               [|(Iterable.t_1_to_js GLenum.t_to_js x10373)|])
    let (getActiveUniforms' :
      'tags this ->
        program:WebGLProgram.t ->
          uniformIndices:GLuint.t Iterable.t_1 -> pname:GLenum.t -> any)
      =
      fun (x10381 : 'tags this) ->
        fun ~program:(x10377 : WebGLProgram.t) ->
          fun ~uniformIndices:(x10378 : GLuint.t Iterable.t_1) ->
            fun ~pname:(x10380 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x10381) "getActiveUniforms"
                   [|(WebGLProgram.t_to_js x10377);(Iterable.t_1_to_js
                                                      GLuint.t_to_js x10378);(
                     GLenum.t_to_js x10380)|])
    let (getUniformIndices' :
      'tags this ->
        program:WebGLProgram.t ->
          uniformNames:string Iterable.t_1 -> GLuint.t Iterable.t_1 option)
      =
      fun (x10386 : 'tags this) ->
        fun ~program:(x10383 : WebGLProgram.t) ->
          fun ~uniformNames:(x10384 : string Iterable.t_1) ->
            Ojs.option_of_js
              (fun (x10388 : Ojs.t) ->
                 Iterable.t_1_of_js GLuint.t_of_js x10388)
              (Ojs.call (this_to_js Obj.magic x10386) "getUniformIndices"
                 [|(WebGLProgram.t_to_js x10383);(Iterable.t_1_to_js
                                                    Ojs.string_to_js x10384)|])
    let (invalidateFramebuffer' :
      'tags this ->
        target:GLenum.t -> attachments:GLenum.t Iterable.t_1 -> unit)
      =
      fun (x10393 : 'tags this) ->
        fun ~target:(x10390 : GLenum.t) ->
          fun ~attachments:(x10391 : GLenum.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10393) "invalidateFramebuffer"
                 [|(GLenum.t_to_js x10390);(Iterable.t_1_to_js GLenum.t_to_js
                                              x10391)|])
    let (invalidateSubFramebuffer' :
      'tags this ->
        target:GLenum.t ->
          attachments:GLenum.t Iterable.t_1 ->
            x:GLint.t ->
              y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x10402 : 'tags this) ->
        fun ~target:(x10395 : GLenum.t) ->
          fun ~attachments:(x10396 : GLenum.t Iterable.t_1) ->
            fun ~x:(x10398 : GLint.t) ->
              fun ~y:(x10399 : GLint.t) ->
                fun ~width:(x10400 : GLsizei.t) ->
                  fun ~height:(x10401 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x10402)
                         "invalidateSubFramebuffer"
                         [|(GLenum.t_to_js x10395);(Iterable.t_1_to_js
                                                      GLenum.t_to_js x10396);(
                           GLint.t_to_js x10398);(GLint.t_to_js x10399);(
                           GLsizei.t_to_js x10400);(GLsizei.t_to_js x10401)|])
    let (transformFeedbackVaryings' :
      'tags this ->
        program:WebGLProgram.t ->
          varyings:string Iterable.t_1 -> bufferMode:GLenum.t -> unit)
      =
      fun (x10408 : 'tags this) ->
        fun ~program:(x10404 : WebGLProgram.t) ->
          fun ~varyings:(x10405 : string Iterable.t_1) ->
            fun ~bufferMode:(x10407 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x10408)
                   "transformFeedbackVaryings"
                   [|(WebGLProgram.t_to_js x10404);(Iterable.t_1_to_js
                                                      Ojs.string_to_js x10405);(
                     GLenum.t_to_js x10407)|])
    let (uniform1uiv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLuint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x10419 : 'tags this) ->
        fun ~location:(x10410 : WebGLUniformLocation.t option) ->
          fun ~data:(x10411 : GLuint.t Iterable.t_1) ->
            fun ?srcOffset:(x10412 : GLuint.t option) ->
              fun ?srcLength:(x10413 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x10421 = this_to_js Obj.magic x10419 in
                     Ojs.call (Ojs.get_prop_ascii x10421 "uniform1uiv")
                       "apply"
                       [|x10421;((let x10414 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x10414 "push"
                                       [|(Ojs.option_to_js
                                            WebGLUniformLocation.t_to_js
                                            x10410)|]);
                                  ignore
                                    (Ojs.call x10414 "push"
                                       [|(Iterable.t_1_to_js GLuint.t_to_js
                                            x10411)|]);
                                  (match x10412 with
                                   | Some x10416 ->
                                       ignore
                                         (Ojs.call x10414 "push"
                                            [|(GLuint.t_to_js x10416)|])
                                   | None -> ());
                                  (match x10413 with
                                   | Some x10415 ->
                                       ignore
                                         (Ojs.call x10414 "push"
                                            [|(GLuint.t_to_js x10415)|])
                                   | None -> ());
                                  x10414))|])
    let (uniform2uiv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLuint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x10431 : 'tags this) ->
        fun ~location:(x10422 : WebGLUniformLocation.t option) ->
          fun ~data:(x10423 : GLuint.t Iterable.t_1) ->
            fun ?srcOffset:(x10424 : GLuint.t option) ->
              fun ?srcLength:(x10425 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x10433 = this_to_js Obj.magic x10431 in
                     Ojs.call (Ojs.get_prop_ascii x10433 "uniform2uiv")
                       "apply"
                       [|x10433;((let x10426 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x10426 "push"
                                       [|(Ojs.option_to_js
                                            WebGLUniformLocation.t_to_js
                                            x10422)|]);
                                  ignore
                                    (Ojs.call x10426 "push"
                                       [|(Iterable.t_1_to_js GLuint.t_to_js
                                            x10423)|]);
                                  (match x10424 with
                                   | Some x10428 ->
                                       ignore
                                         (Ojs.call x10426 "push"
                                            [|(GLuint.t_to_js x10428)|])
                                   | None -> ());
                                  (match x10425 with
                                   | Some x10427 ->
                                       ignore
                                         (Ojs.call x10426 "push"
                                            [|(GLuint.t_to_js x10427)|])
                                   | None -> ());
                                  x10426))|])
    let (uniform3uiv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLuint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x10443 : 'tags this) ->
        fun ~location:(x10434 : WebGLUniformLocation.t option) ->
          fun ~data:(x10435 : GLuint.t Iterable.t_1) ->
            fun ?srcOffset:(x10436 : GLuint.t option) ->
              fun ?srcLength:(x10437 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x10445 = this_to_js Obj.magic x10443 in
                     Ojs.call (Ojs.get_prop_ascii x10445 "uniform3uiv")
                       "apply"
                       [|x10445;((let x10438 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x10438 "push"
                                       [|(Ojs.option_to_js
                                            WebGLUniformLocation.t_to_js
                                            x10434)|]);
                                  ignore
                                    (Ojs.call x10438 "push"
                                       [|(Iterable.t_1_to_js GLuint.t_to_js
                                            x10435)|]);
                                  (match x10436 with
                                   | Some x10440 ->
                                       ignore
                                         (Ojs.call x10438 "push"
                                            [|(GLuint.t_to_js x10440)|])
                                   | None -> ());
                                  (match x10437 with
                                   | Some x10439 ->
                                       ignore
                                         (Ojs.call x10438 "push"
                                            [|(GLuint.t_to_js x10439)|])
                                   | None -> ());
                                  x10438))|])
    let (uniform4uiv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLuint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x10455 : 'tags this) ->
        fun ~location:(x10446 : WebGLUniformLocation.t option) ->
          fun ~data:(x10447 : GLuint.t Iterable.t_1) ->
            fun ?srcOffset:(x10448 : GLuint.t option) ->
              fun ?srcLength:(x10449 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x10457 = this_to_js Obj.magic x10455 in
                     Ojs.call (Ojs.get_prop_ascii x10457 "uniform4uiv")
                       "apply"
                       [|x10457;((let x10450 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x10450 "push"
                                       [|(Ojs.option_to_js
                                            WebGLUniformLocation.t_to_js
                                            x10446)|]);
                                  ignore
                                    (Ojs.call x10450 "push"
                                       [|(Iterable.t_1_to_js GLuint.t_to_js
                                            x10447)|]);
                                  (match x10448 with
                                   | Some x10452 ->
                                       ignore
                                         (Ojs.call x10450 "push"
                                            [|(GLuint.t_to_js x10452)|])
                                   | None -> ());
                                  (match x10449 with
                                   | Some x10451 ->
                                       ignore
                                         (Ojs.call x10450 "push"
                                            [|(GLuint.t_to_js x10451)|])
                                   | None -> ());
                                  x10450))|])
    let (uniformMatrix2x3fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x10468 : 'tags this) ->
        fun ~location:(x10458 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x10459 : GLboolean.t) ->
            fun ~data:(x10460 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x10461 : GLuint.t option) ->
                fun ?srcLength:(x10462 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x10470 = this_to_js Obj.magic x10468 in
                       Ojs.call
                         (Ojs.get_prop_ascii x10470 "uniformMatrix2x3fv")
                         "apply"
                         [|x10470;((let x10463 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x10463 "push"
                                         [|(Ojs.option_to_js
                                              WebGLUniformLocation.t_to_js
                                              x10458)|]);
                                    ignore
                                      (Ojs.call x10463 "push"
                                         [|(GLboolean.t_to_js x10459)|]);
                                    ignore
                                      (Ojs.call x10463 "push"
                                         [|(Iterable.t_1_to_js
                                              GLfloat.t_to_js x10460)|]);
                                    (match x10461 with
                                     | Some x10465 ->
                                         ignore
                                           (Ojs.call x10463 "push"
                                              [|(GLuint.t_to_js x10465)|])
                                     | None -> ());
                                    (match x10462 with
                                     | Some x10464 ->
                                         ignore
                                           (Ojs.call x10463 "push"
                                              [|(GLuint.t_to_js x10464)|])
                                     | None -> ());
                                    x10463))|])
    let (uniformMatrix2x4fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x10481 : 'tags this) ->
        fun ~location:(x10471 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x10472 : GLboolean.t) ->
            fun ~data:(x10473 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x10474 : GLuint.t option) ->
                fun ?srcLength:(x10475 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x10483 = this_to_js Obj.magic x10481 in
                       Ojs.call
                         (Ojs.get_prop_ascii x10483 "uniformMatrix2x4fv")
                         "apply"
                         [|x10483;((let x10476 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x10476 "push"
                                         [|(Ojs.option_to_js
                                              WebGLUniformLocation.t_to_js
                                              x10471)|]);
                                    ignore
                                      (Ojs.call x10476 "push"
                                         [|(GLboolean.t_to_js x10472)|]);
                                    ignore
                                      (Ojs.call x10476 "push"
                                         [|(Iterable.t_1_to_js
                                              GLfloat.t_to_js x10473)|]);
                                    (match x10474 with
                                     | Some x10478 ->
                                         ignore
                                           (Ojs.call x10476 "push"
                                              [|(GLuint.t_to_js x10478)|])
                                     | None -> ());
                                    (match x10475 with
                                     | Some x10477 ->
                                         ignore
                                           (Ojs.call x10476 "push"
                                              [|(GLuint.t_to_js x10477)|])
                                     | None -> ());
                                    x10476))|])
    let (uniformMatrix3x2fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x10494 : 'tags this) ->
        fun ~location:(x10484 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x10485 : GLboolean.t) ->
            fun ~data:(x10486 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x10487 : GLuint.t option) ->
                fun ?srcLength:(x10488 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x10496 = this_to_js Obj.magic x10494 in
                       Ojs.call
                         (Ojs.get_prop_ascii x10496 "uniformMatrix3x2fv")
                         "apply"
                         [|x10496;((let x10489 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x10489 "push"
                                         [|(Ojs.option_to_js
                                              WebGLUniformLocation.t_to_js
                                              x10484)|]);
                                    ignore
                                      (Ojs.call x10489 "push"
                                         [|(GLboolean.t_to_js x10485)|]);
                                    ignore
                                      (Ojs.call x10489 "push"
                                         [|(Iterable.t_1_to_js
                                              GLfloat.t_to_js x10486)|]);
                                    (match x10487 with
                                     | Some x10491 ->
                                         ignore
                                           (Ojs.call x10489 "push"
                                              [|(GLuint.t_to_js x10491)|])
                                     | None -> ());
                                    (match x10488 with
                                     | Some x10490 ->
                                         ignore
                                           (Ojs.call x10489 "push"
                                              [|(GLuint.t_to_js x10490)|])
                                     | None -> ());
                                    x10489))|])
    let (uniformMatrix3x4fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x10507 : 'tags this) ->
        fun ~location:(x10497 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x10498 : GLboolean.t) ->
            fun ~data:(x10499 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x10500 : GLuint.t option) ->
                fun ?srcLength:(x10501 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x10509 = this_to_js Obj.magic x10507 in
                       Ojs.call
                         (Ojs.get_prop_ascii x10509 "uniformMatrix3x4fv")
                         "apply"
                         [|x10509;((let x10502 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x10502 "push"
                                         [|(Ojs.option_to_js
                                              WebGLUniformLocation.t_to_js
                                              x10497)|]);
                                    ignore
                                      (Ojs.call x10502 "push"
                                         [|(GLboolean.t_to_js x10498)|]);
                                    ignore
                                      (Ojs.call x10502 "push"
                                         [|(Iterable.t_1_to_js
                                              GLfloat.t_to_js x10499)|]);
                                    (match x10500 with
                                     | Some x10504 ->
                                         ignore
                                           (Ojs.call x10502 "push"
                                              [|(GLuint.t_to_js x10504)|])
                                     | None -> ());
                                    (match x10501 with
                                     | Some x10503 ->
                                         ignore
                                           (Ojs.call x10502 "push"
                                              [|(GLuint.t_to_js x10503)|])
                                     | None -> ());
                                    x10502))|])
    let (uniformMatrix4x2fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x10520 : 'tags this) ->
        fun ~location:(x10510 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x10511 : GLboolean.t) ->
            fun ~data:(x10512 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x10513 : GLuint.t option) ->
                fun ?srcLength:(x10514 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x10522 = this_to_js Obj.magic x10520 in
                       Ojs.call
                         (Ojs.get_prop_ascii x10522 "uniformMatrix4x2fv")
                         "apply"
                         [|x10522;((let x10515 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x10515 "push"
                                         [|(Ojs.option_to_js
                                              WebGLUniformLocation.t_to_js
                                              x10510)|]);
                                    ignore
                                      (Ojs.call x10515 "push"
                                         [|(GLboolean.t_to_js x10511)|]);
                                    ignore
                                      (Ojs.call x10515 "push"
                                         [|(Iterable.t_1_to_js
                                              GLfloat.t_to_js x10512)|]);
                                    (match x10513 with
                                     | Some x10517 ->
                                         ignore
                                           (Ojs.call x10515 "push"
                                              [|(GLuint.t_to_js x10517)|])
                                     | None -> ());
                                    (match x10514 with
                                     | Some x10516 ->
                                         ignore
                                           (Ojs.call x10515 "push"
                                              [|(GLuint.t_to_js x10516)|])
                                     | None -> ());
                                    x10515))|])
    let (uniformMatrix4x3fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x10533 : 'tags this) ->
        fun ~location:(x10523 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x10524 : GLboolean.t) ->
            fun ~data:(x10525 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x10526 : GLuint.t option) ->
                fun ?srcLength:(x10527 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x10535 = this_to_js Obj.magic x10533 in
                       Ojs.call
                         (Ojs.get_prop_ascii x10535 "uniformMatrix4x3fv")
                         "apply"
                         [|x10535;((let x10528 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x10528 "push"
                                         [|(Ojs.option_to_js
                                              WebGLUniformLocation.t_to_js
                                              x10523)|]);
                                    ignore
                                      (Ojs.call x10528 "push"
                                         [|(GLboolean.t_to_js x10524)|]);
                                    ignore
                                      (Ojs.call x10528 "push"
                                         [|(Iterable.t_1_to_js
                                              GLfloat.t_to_js x10525)|]);
                                    (match x10526 with
                                     | Some x10530 ->
                                         ignore
                                           (Ojs.call x10528 "push"
                                              [|(GLuint.t_to_js x10530)|])
                                     | None -> ());
                                    (match x10527 with
                                     | Some x10529 ->
                                         ignore
                                           (Ojs.call x10528 "push"
                                              [|(GLuint.t_to_js x10529)|])
                                     | None -> ());
                                    x10528))|])
    let (vertexAttribI4iv' :
      'tags this -> index:GLuint.t -> values:GLint.t Iterable.t_1 -> unit) =
      fun (x10539 : 'tags this) ->
        fun ~index:(x10536 : GLuint.t) ->
          fun ~values:(x10537 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10539) "vertexAttribI4iv"
                 [|(GLuint.t_to_js x10536);(Iterable.t_1_to_js GLint.t_to_js
                                              x10537)|])
    let (vertexAttribI4uiv' :
      'tags this -> index:GLuint.t -> values:GLuint.t Iterable.t_1 -> unit) =
      fun (x10544 : 'tags this) ->
        fun ~index:(x10541 : GLuint.t) ->
          fun ~values:(x10542 : GLuint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10544) "vertexAttribI4uiv"
                 [|(GLuint.t_to_js x10541);(Iterable.t_1_to_js GLuint.t_to_js
                                              x10542)|])
    let cast_from = Obj.magic
  end
module WebGL2RenderingContext =
  struct
    type t =
      [ `WebGL2RenderingContext  | `WebGL2RenderingContextBase 
      | `WebGL2RenderingContextOverloads  | `WebGLRenderingContextBase ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10547 : Ojs.t) -> t_of_js x10547
    and t_0_to_js : t_0 -> Ojs.t = fun (x10546 : t) -> t_to_js x10546
    type tags =
      [ `WebGL2RenderingContext  | `WebGL2RenderingContextBase 
      | `WebGL2RenderingContextOverloads  | `WebGLRenderingContextBase ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGL2RenderingContext ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x10550 : Ojs.t) -> intf_of_js __tags_of_js x10550
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x10548 : __tags intf) -> intf_to_js __tags_to_js x10548
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") 
             [||])
    let (active_uniform_blocks : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ACTIVE_UNIFORM_BLOCKS")
    let (already_signaled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALREADY_SIGNALED")
    let (any_samples_passed : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ANY_SAMPLES_PASSED")
    let (any_samples_passed_conservative : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ANY_SAMPLES_PASSED_CONSERVATIVE")
    let (color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "COLOR")
    let (color_attachment1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT1")
    let (color_attachment10 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT10")
    let (color_attachment11 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT11")
    let (color_attachment12 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT12")
    let (color_attachment13 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT13")
    let (color_attachment14 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT14")
    let (color_attachment15 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT15")
    let (color_attachment2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT2")
    let (color_attachment3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT3")
    let (color_attachment4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT4")
    let (color_attachment5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT5")
    let (color_attachment6 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT6")
    let (color_attachment7 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT7")
    let (color_attachment8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT8")
    let (color_attachment9 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT9")
    let (compare_ref_to_texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COMPARE_REF_TO_TEXTURE")
    let (condition_satisfied : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CONDITION_SATISFIED")
    let (copy_read_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COPY_READ_BUFFER")
    let (copy_read_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COPY_READ_BUFFER_BINDING")
    let (copy_write_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COPY_WRITE_BUFFER")
    let (copy_write_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COPY_WRITE_BUFFER_BINDING")
    let (current_query : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CURRENT_QUERY")
    let (depth : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "DEPTH")
    let (depth24_stencil8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH24_STENCIL8")
    let (depth32f_stencil8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH32F_STENCIL8")
    let (depth_component24 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_COMPONENT24")
    let (depth_component32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_COMPONENT32F")
    let (draw_buffer0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER0")
    let (draw_buffer1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER1")
    let (draw_buffer10 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER10")
    let (draw_buffer11 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER11")
    let (draw_buffer12 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER12")
    let (draw_buffer13 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER13")
    let (draw_buffer14 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER14")
    let (draw_buffer15 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER15")
    let (draw_buffer2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER2")
    let (draw_buffer3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER3")
    let (draw_buffer4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER4")
    let (draw_buffer5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER5")
    let (draw_buffer6 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER6")
    let (draw_buffer7 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER7")
    let (draw_buffer8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER8")
    let (draw_buffer9 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER9")
    let (draw_framebuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_FRAMEBUFFER")
    let (draw_framebuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_FRAMEBUFFER_BINDING")
    let (dynamic_copy : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DYNAMIC_COPY")
    let (dynamic_read : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DYNAMIC_READ")
    let (float_32_unsigned_int_24_8_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_32_UNSIGNED_INT_24_8_REV")
    let (fLOAT_MAT2x3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT2x3")
    let (fLOAT_MAT2x4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT2x4")
    let (fLOAT_MAT3x2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT3x2")
    let (fLOAT_MAT3x4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT3x4")
    let (fLOAT_MAT4x2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT4x2")
    let (fLOAT_MAT4x3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT4x3")
    let (fragment_shader_derivative_hint : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAGMENT_SHADER_DERIVATIVE_HINT")
    let (framebuffer_attachment_alpha_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE")
    let (framebuffer_attachment_blue_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE")
    let (framebuffer_attachment_color_encoding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING")
    let (framebuffer_attachment_component_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE")
    let (framebuffer_attachment_depth_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE")
    let (framebuffer_attachment_green_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE")
    let (framebuffer_attachment_red_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_RED_SIZE")
    let (framebuffer_attachment_stencil_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE")
    let (framebuffer_attachment_texture_layer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER")
    let (framebuffer_default : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_DEFAULT")
    let (framebuffer_incomplete_multisample : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE")
    let (half_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "HALF_FLOAT")
    let (interleaved_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INTERLEAVED_ATTRIBS")
    let (int_2_10_10_10_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_2_10_10_10_REV")
    let (int_sampler_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_SAMPLER_2D")
    let (int_sampler_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_SAMPLER_2D_ARRAY")
    let (int_sampler_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_SAMPLER_3D")
    let (int_sampler_cube : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_SAMPLER_CUBE")
    let (invalid_index : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_INDEX")
    let (max : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "MAX")
    let (max_3d_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_3D_TEXTURE_SIZE")
    let (max_array_texture_layers : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_ARRAY_TEXTURE_LAYERS")
    let (max_client_wait_timeout_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_CLIENT_WAIT_TIMEOUT_WEBGL")
    let (max_color_attachments : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COLOR_ATTACHMENTS")
    let (max_combined_fragment_uniform_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS")
    let (max_combined_uniform_blocks : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COMBINED_UNIFORM_BLOCKS")
    let (max_combined_vertex_uniform_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS")
    let (max_draw_buffers : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_DRAW_BUFFERS")
    let (max_elements_indices : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_ELEMENTS_INDICES")
    let (max_elements_vertices : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_ELEMENTS_VERTICES")
    let (max_element_index : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_ELEMENT_INDEX")
    let (max_fragment_input_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_FRAGMENT_INPUT_COMPONENTS")
    let (max_fragment_uniform_blocks : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_FRAGMENT_UNIFORM_BLOCKS")
    let (max_fragment_uniform_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_FRAGMENT_UNIFORM_COMPONENTS")
    let (max_program_texel_offset : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_PROGRAM_TEXEL_OFFSET")
    let (max_samples : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_SAMPLES")
    let (max_server_wait_timeout : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_SERVER_WAIT_TIMEOUT")
    let (max_texture_lod_bias : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TEXTURE_LOD_BIAS")
    let (max_transform_feedback_interleaved_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS")
    let (max_transform_feedback_separate_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS")
    let (max_transform_feedback_separate_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS")
    let (max_uniform_block_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_UNIFORM_BLOCK_SIZE")
    let (max_uniform_buffer_bindings : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_UNIFORM_BUFFER_BINDINGS")
    let (max_varying_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VARYING_COMPONENTS")
    let (max_vertex_output_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_OUTPUT_COMPONENTS")
    let (max_vertex_uniform_blocks : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_UNIFORM_BLOCKS")
    let (max_vertex_uniform_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_UNIFORM_COMPONENTS")
    let (min : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "MIN")
    let (min_program_texel_offset : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MIN_PROGRAM_TEXEL_OFFSET")
    let (object_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "OBJECT_TYPE")
    let (pack_row_length : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PACK_ROW_LENGTH")
    let (pack_skip_pixels : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PACK_SKIP_PIXELS")
    let (pack_skip_rows : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PACK_SKIP_ROWS")
    let (pixel_pack_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PIXEL_PACK_BUFFER")
    let (pixel_pack_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PIXEL_PACK_BUFFER_BINDING")
    let (pixel_unpack_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PIXEL_UNPACK_BUFFER")
    let (pixel_unpack_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PIXEL_UNPACK_BUFFER_BINDING")
    let (query_result : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "QUERY_RESULT")
    let (query_result_available : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "QUERY_RESULT_AVAILABLE")
    let (r11f_g11f_b10f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "R11F_G11F_B10F")
    let (r16f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R16F")
    let (r16i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R16I")
    let (r16ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R16UI")
    let (r32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R32F")
    let (r32i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R32I")
    let (r32ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R32UI")
    let (r8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R8")
    let (r8i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R8I")
    let (r8ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R8UI")
    let (r8_snorm : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "R8_SNORM")
    let (rasterizer_discard : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RASTERIZER_DISCARD")
    let (read_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "READ_BUFFER")
    let (read_framebuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "READ_FRAMEBUFFER")
    let (read_framebuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "READ_FRAMEBUFFER_BINDING")
    let (red : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RED")
    let (red_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RED_INTEGER")
    let (renderbuffer_samples : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_SAMPLES")
    let (rg : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG")
    let (rg16f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG16F")
    let (rg16i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG16I")
    let (rg16ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RG16UI")
    let (rg32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG32F")
    let (rg32i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG32I")
    let (rg32ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RG32UI")
    let (rg8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG8")
    let (rg8i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG8I")
    let (rg8ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG8UI")
    let (rg8_snorm : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RG8_SNORM")
    let (rgb10_a2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB10_A2")
    let (rgb10_a2ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB10_A2UI")
    let (rgb16f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB16F")
    let (rgb16i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB16I")
    let (rgb16ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB16UI")
    let (rgb32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB32F")
    let (rgb32i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB32I")
    let (rgb32ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB32UI")
    let (rgb8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGB8")
    let (rgb8i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGB8I")
    let (rgb8ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB8UI")
    let (rgb8_snorm : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB8_SNORM")
    let (rgb9_e5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB9_E5")
    let (rgba16f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA16F")
    let (rgba16i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA16I")
    let (rgba16ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA16UI")
    let (rgba32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA32F")
    let (rgba32i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA32I")
    let (rgba32ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA32UI")
    let (rgba8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGBA8")
    let (rgba8i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA8I")
    let (rgba8ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA8UI")
    let (rgba8_snorm : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA8_SNORM")
    let (rgba_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA_INTEGER")
    let (rgb_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB_INTEGER")
    let (rg_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RG_INTEGER")
    let (sampler_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_2D_ARRAY")
    let (sampler_2d_array_shadow : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_2D_ARRAY_SHADOW")
    let (sampler_2d_shadow : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_2D_SHADOW")
    let (sampler_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_3D")
    let (sampler_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_BINDING")
    let (sampler_cube_shadow : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_CUBE_SHADOW")
    let (separate_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SEPARATE_ATTRIBS")
    let (signaled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SIGNALED")
    let (signed_normalized : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SIGNED_NORMALIZED")
    let (srgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "SRGB")
    let (srgb8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "SRGB8")
    let (srgb8_alpha8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SRGB8_ALPHA8")
    let (static_copy : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STATIC_COPY")
    let (static_read : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STATIC_READ")
    let (stencil : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL")
    let (stream_copy : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STREAM_COPY")
    let (stream_read : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STREAM_READ")
    let (sync_condition : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_CONDITION")
    let (sync_fence : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_FENCE")
    let (sync_flags : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_FLAGS")
    let (sync_flush_commands_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_FLUSH_COMMANDS_BIT")
    let (sync_gpu_commands_complete : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_GPU_COMMANDS_COMPLETE")
    let (sync_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_STATUS")
    let (texture_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_2D_ARRAY")
    let (texture_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_3D")
    let (texture_base_level : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BASE_LEVEL")
    let (texture_binding_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BINDING_2D_ARRAY")
    let (texture_binding_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BINDING_3D")
    let (texture_compare_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_COMPARE_FUNC")
    let (texture_compare_mode : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_COMPARE_MODE")
    let (texture_immutable_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_IMMUTABLE_FORMAT")
    let (texture_immutable_levels : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_IMMUTABLE_LEVELS")
    let (texture_max_level : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MAX_LEVEL")
    let (texture_max_lod : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MAX_LOD")
    let (texture_min_lod : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MIN_LOD")
    let (texture_wrap_r : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_WRAP_R")
    let (timeout_expired : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TIMEOUT_EXPIRED")
    let (timeout_ignored : unit -> GLint64.t) =
      fun () ->
        GLint64.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TIMEOUT_IGNORED")
    let (transform_feedback : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK")
    let (transform_feedback_active : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_ACTIVE")
    let (transform_feedback_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BINDING")
    let (transform_feedback_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER")
    let (transform_feedback_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER_BINDING")
    let (transform_feedback_buffer_mode : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER_MODE")
    let (transform_feedback_buffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER_SIZE")
    let (transform_feedback_buffer_start : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER_START")
    let (transform_feedback_paused : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_PAUSED")
    let (transform_feedback_primitives_written : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN")
    let (transform_feedback_varyings : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_VARYINGS")
    let (uniform_array_stride : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_ARRAY_STRIDE")
    let (uniform_block_active_uniforms : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_ACTIVE_UNIFORMS")
    let (uniform_block_active_uniform_indices : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES")
    let (uniform_block_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_BINDING")
    let (uniform_block_data_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_DATA_SIZE")
    let (uniform_block_index : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_INDEX")
    let (uniform_block_referenced_by_fragment_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER")
    let (uniform_block_referenced_by_vertex_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER")
    let (uniform_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER")
    let (uniform_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER_BINDING")
    let (uniform_buffer_offset_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER_OFFSET_ALIGNMENT")
    let (uniform_buffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER_SIZE")
    let (uniform_buffer_start : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER_START")
    let (uniform_is_row_major : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_IS_ROW_MAJOR")
    let (uniform_matrix_stride : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_MATRIX_STRIDE")
    let (uniform_offset : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_OFFSET")
    let (uniform_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_SIZE")
    let (uniform_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_TYPE")
    let (unpack_image_height : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_IMAGE_HEIGHT")
    let (unpack_row_length : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_ROW_LENGTH")
    let (unpack_skip_images : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_SKIP_IMAGES")
    let (unpack_skip_pixels : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_SKIP_PIXELS")
    let (unpack_skip_rows : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_SKIP_ROWS")
    let (unsignaled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNALED")
    let (unsigned_int_10f_11f_11f_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_10F_11F_11F_REV")
    let (unsigned_int_24_8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_24_8")
    let (unsigned_int_2_10_10_10_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_2_10_10_10_REV")
    let (unsigned_int_5_9_9_9_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_5_9_9_9_REV")
    let (unsigned_int_sampler_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_SAMPLER_2D")
    let (unsigned_int_sampler_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_SAMPLER_2D_ARRAY")
    let (unsigned_int_sampler_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_SAMPLER_3D")
    let (unsigned_int_sampler_cube : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_SAMPLER_CUBE")
    let (unsigned_int_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_VEC2")
    let (unsigned_int_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_VEC3")
    let (unsigned_int_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_VEC4")
    let (unsigned_normalized : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_NORMALIZED")
    let (vertex_array_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ARRAY_BINDING")
    let (vertex_attrib_array_divisor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_DIVISOR")
    let (vertex_attrib_array_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_INTEGER")
    let (wait_failed : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "WAIT_FAILED")
    let (active_attributes : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ACTIVE_ATTRIBUTES")
    let (active_texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ACTIVE_TEXTURE")
    let (active_uniforms : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ACTIVE_UNIFORMS")
    let (aliased_line_width_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALIASED_LINE_WIDTH_RANGE")
    let (aliased_point_size_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALIASED_POINT_SIZE_RANGE")
    let (alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "ALPHA")
    let (alpha_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALPHA_BITS")
    let (always : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALWAYS")
    let (array_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ARRAY_BUFFER")
    let (array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ARRAY_BUFFER_BINDING")
    let (attached_shaders : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ATTACHED_SHADERS")
    let (back : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "BACK")
    let (blend : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "BLEND")
    let (blend_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_COLOR")
    let (blend_dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_DST_ALPHA")
    let (blend_dst_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_DST_RGB")
    let (blend_equation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_EQUATION")
    let (blend_equation_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_EQUATION_ALPHA")
    let (blend_equation_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_EQUATION_RGB")
    let (blend_src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_SRC_ALPHA")
    let (blend_src_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_SRC_RGB")
    let (blue_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLUE_BITS")
    let (bool : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "BOOL")
    let (bool_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BOOL_VEC2")
    let (bool_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BOOL_VEC3")
    let (bool_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BOOL_VEC4")
    let (browser_default_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BROWSER_DEFAULT_WEBGL")
    let (buffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BUFFER_SIZE")
    let (buffer_usage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BUFFER_USAGE")
    let (byte : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "BYTE")
    let (ccw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "CCW")
    let (clamp_to_edge : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CLAMP_TO_EDGE")
    let (color_attachment0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT0")
    let (color_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_BUFFER_BIT")
    let (color_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_CLEAR_VALUE")
    let (color_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_WRITEMASK")
    let (compile_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COMPILE_STATUS")
    let (compressed_texture_formats : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COMPRESSED_TEXTURE_FORMATS")
    let (constant_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CONSTANT_ALPHA")
    let (constant_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CONSTANT_COLOR")
    let (context_lost_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CONTEXT_LOST_WEBGL")
    let (cull_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CULL_FACE")
    let (cull_face_mode : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CULL_FACE_MODE")
    let (current_program : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CURRENT_PROGRAM")
    let (current_vertex_attrib : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CURRENT_VERTEX_ATTRIB")
    let (cw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "CW")
    let (decr : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "DECR")
    let (decr_wrap : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DECR_WRAP")
    let (delete_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DELETE_STATUS")
    let (depth_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_ATTACHMENT")
    let (depth_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_BITS")
    let (depth_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_BUFFER_BIT")
    let (depth_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_CLEAR_VALUE")
    let (depth_component : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_COMPONENT")
    let (depth_component16 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_COMPONENT16")
    let (depth_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_FUNC")
    let (depth_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_RANGE")
    let (depth_stencil : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_STENCIL")
    let (depth_stencil_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_STENCIL_ATTACHMENT")
    let (depth_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_TEST")
    let (depth_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_WRITEMASK")
    let (dither : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DITHER")
    let (dont_care : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DONT_CARE")
    let (dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DST_ALPHA")
    let (dst_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DST_COLOR")
    let (dynamic_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DYNAMIC_DRAW")
    let (element_array_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ELEMENT_ARRAY_BUFFER")
    let (element_array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ELEMENT_ARRAY_BUFFER_BINDING")
    let (equal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "EQUAL")
    let (fastest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FASTEST")
    let (float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "FLOAT")
    let (float_mat2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT2")
    let (float_mat3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT3")
    let (float_mat4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT4")
    let (float_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_VEC2")
    let (float_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_VEC3")
    let (float_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_VEC4")
    let (fragment_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAGMENT_SHADER")
    let (framebuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER")
    let (framebuffer_attachment_object_name : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME")
    let (framebuffer_attachment_object_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE")
    let (framebuffer_attachment_texture_cube_map_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE")
    let (framebuffer_attachment_texture_level : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL")
    let (framebuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_BINDING")
    let (framebuffer_complete : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_COMPLETE")
    let (framebuffer_incomplete_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_INCOMPLETE_ATTACHMENT")
    let (framebuffer_incomplete_dimensions : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_INCOMPLETE_DIMENSIONS")
    let (framebuffer_incomplete_missing_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT")
    let (framebuffer_unsupported : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_UNSUPPORTED")
    let (front : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "FRONT")
    let (front_and_back : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRONT_AND_BACK")
    let (front_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRONT_FACE")
    let (func_add : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FUNC_ADD")
    let (func_reverse_subtract : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FUNC_REVERSE_SUBTRACT")
    let (func_subtract : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FUNC_SUBTRACT")
    let (generate_mipmap_hint : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "GENERATE_MIPMAP_HINT")
    let (gequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "GEQUAL")
    let (greater : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "GREATER")
    let (green_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "GREEN_BITS")
    let (high_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "HIGH_FLOAT")
    let (high_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "HIGH_INT")
    let (implementation_color_read_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "IMPLEMENTATION_COLOR_READ_FORMAT")
    let (implementation_color_read_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "IMPLEMENTATION_COLOR_READ_TYPE")
    let (incr : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "INCR")
    let (incr_wrap : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INCR_WRAP")
    let (int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "INT")
    let (int_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_VEC2")
    let (int_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_VEC3")
    let (int_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_VEC4")
    let (invalid_enum : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_ENUM")
    let (invalid_framebuffer_operation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_FRAMEBUFFER_OPERATION")
    let (invalid_operation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_OPERATION")
    let (invalid_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_VALUE")
    let (invert : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVERT")
    let (keep : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "KEEP")
    let (lequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LEQUAL")
    let (less : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "LESS")
    let (linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINEAR")
    let (linear_mipmap_linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINEAR_MIPMAP_LINEAR")
    let (linear_mipmap_nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINEAR_MIPMAP_NEAREST")
    let (lines : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "LINES")
    let (line_loop : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINE_LOOP")
    let (line_strip : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINE_STRIP")
    let (line_width : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINE_WIDTH")
    let (link_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINK_STATUS")
    let (low_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LOW_FLOAT")
    let (low_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LOW_INT")
    let (luminance : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LUMINANCE")
    let (luminance_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LUMINANCE_ALPHA")
    let (max_combined_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COMBINED_TEXTURE_IMAGE_UNITS")
    let (max_cube_map_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_CUBE_MAP_TEXTURE_SIZE")
    let (max_fragment_uniform_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_FRAGMENT_UNIFORM_VECTORS")
    let (max_renderbuffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_RENDERBUFFER_SIZE")
    let (max_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TEXTURE_IMAGE_UNITS")
    let (max_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TEXTURE_SIZE")
    let (max_varying_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VARYING_VECTORS")
    let (max_vertex_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_ATTRIBS")
    let (max_vertex_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_TEXTURE_IMAGE_UNITS")
    let (max_vertex_uniform_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_UNIFORM_VECTORS")
    let (max_viewport_dims : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VIEWPORT_DIMS")
    let (medium_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MEDIUM_FLOAT")
    let (medium_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MEDIUM_INT")
    let (mirrored_repeat : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MIRRORED_REPEAT")
    let (nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NEAREST")
    let (nearest_mipmap_linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NEAREST_MIPMAP_LINEAR")
    let (nearest_mipmap_nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NEAREST_MIPMAP_NEAREST")
    let (never : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "NEVER")
    let (nicest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NICEST")
    let (none : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "NONE")
    let (notequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NOTEQUAL")
    let (no_error : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NO_ERROR")
    let (one : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "ONE")
    let (one_minus_constant_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_CONSTANT_ALPHA")
    let (one_minus_constant_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_CONSTANT_COLOR")
    let (one_minus_dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_DST_ALPHA")
    let (one_minus_dst_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_DST_COLOR")
    let (one_minus_src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_SRC_ALPHA")
    let (one_minus_src_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_SRC_COLOR")
    let (out_of_memory : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "OUT_OF_MEMORY")
    let (pack_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PACK_ALIGNMENT")
    let (points : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "POINTS")
    let (polygon_offset_factor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "POLYGON_OFFSET_FACTOR")
    let (polygon_offset_fill : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "POLYGON_OFFSET_FILL")
    let (polygon_offset_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "POLYGON_OFFSET_UNITS")
    let (red_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RED_BITS")
    let (renderbuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER")
    let (renderbuffer_alpha_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_ALPHA_SIZE")
    let (renderbuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_BINDING")
    let (renderbuffer_blue_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_BLUE_SIZE")
    let (renderbuffer_depth_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_DEPTH_SIZE")
    let (renderbuffer_green_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_GREEN_SIZE")
    let (renderbuffer_height : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_HEIGHT")
    let (renderbuffer_internal_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_INTERNAL_FORMAT")
    let (renderbuffer_red_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_RED_SIZE")
    let (renderbuffer_stencil_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_STENCIL_SIZE")
    let (renderbuffer_width : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_WIDTH")
    let (renderer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERER")
    let (repeat : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "REPEAT")
    let (replace : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "REPLACE")
    let (rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGB")
    let (rgb565 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB565")
    let (rgb5_a1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB5_A1")
    let (rgba : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGBA")
    let (rgba4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGBA4")
    let (sampler_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_2D")
    let (sampler_cube : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_CUBE")
    let (samples : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLES")
    let (sample_alpha_to_coverage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_ALPHA_TO_COVERAGE")
    let (sample_buffers : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_BUFFERS")
    let (sample_coverage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_COVERAGE")
    let (sample_coverage_invert : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_COVERAGE_INVERT")
    let (sample_coverage_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_COVERAGE_VALUE")
    let (scissor_box : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SCISSOR_BOX")
    let (scissor_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SCISSOR_TEST")
    let (shader_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SHADER_TYPE")
    let (shading_language_version : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SHADING_LANGUAGE_VERSION")
    let (short : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "SHORT")
    let (src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SRC_ALPHA")
    let (src_alpha_saturate : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SRC_ALPHA_SATURATE")
    let (src_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SRC_COLOR")
    let (static_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STATIC_DRAW")
    let (stencil_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_ATTACHMENT")
    let (stencil_back_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_FAIL")
    let (stencil_back_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_FUNC")
    let (stencil_back_pass_depth_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_PASS_DEPTH_FAIL")
    let (stencil_back_pass_depth_pass : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_PASS_DEPTH_PASS")
    let (stencil_back_ref : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_REF")
    let (stencil_back_value_mask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_VALUE_MASK")
    let (stencil_back_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_WRITEMASK")
    let (stencil_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BITS")
    let (stencil_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BUFFER_BIT")
    let (stencil_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_CLEAR_VALUE")
    let (stencil_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_FAIL")
    let (stencil_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_FUNC")
    let (stencil_index8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_INDEX8")
    let (stencil_pass_depth_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_PASS_DEPTH_FAIL")
    let (stencil_pass_depth_pass : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_PASS_DEPTH_PASS")
    let (stencil_ref : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_REF")
    let (stencil_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_TEST")
    let (stencil_value_mask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_VALUE_MASK")
    let (stencil_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_WRITEMASK")
    let (stream_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STREAM_DRAW")
    let (subpixel_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SUBPIXEL_BITS")
    let (texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE")
    let (texture0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE0")
    let (texture1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE1")
    let (texture10 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE10")
    let (texture11 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE11")
    let (texture12 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE12")
    let (texture13 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE13")
    let (texture14 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE14")
    let (texture15 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE15")
    let (texture16 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE16")
    let (texture17 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE17")
    let (texture18 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE18")
    let (texture19 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE19")
    let (texture2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE2")
    let (texture20 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE20")
    let (texture21 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE21")
    let (texture22 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE22")
    let (texture23 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE23")
    let (texture24 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE24")
    let (texture25 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE25")
    let (texture26 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE26")
    let (texture27 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE27")
    let (texture28 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE28")
    let (texture29 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE29")
    let (texture3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE3")
    let (texture30 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE30")
    let (texture31 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE31")
    let (texture4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE4")
    let (texture5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE5")
    let (texture6 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE6")
    let (texture7 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE7")
    let (texture8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE8")
    let (texture9 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE9")
    let (texture_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_2D")
    let (texture_binding_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BINDING_2D")
    let (texture_binding_cube_map : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BINDING_CUBE_MAP")
    let (texture_cube_map : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP")
    let (texture_cube_map_negative_x : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_X")
    let (texture_cube_map_negative_y : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_Y")
    let (texture_cube_map_negative_z : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_Z")
    let (texture_cube_map_positive_x : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_X")
    let (texture_cube_map_positive_y : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_Y")
    let (texture_cube_map_positive_z : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_Z")
    let (texture_mag_filter : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MAG_FILTER")
    let (texture_min_filter : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MIN_FILTER")
    let (texture_wrap_s : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_WRAP_S")
    let (texture_wrap_t : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_WRAP_T")
    let (triangles : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRIANGLES")
    let (triangle_fan : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRIANGLE_FAN")
    let (triangle_strip : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRIANGLE_STRIP")
    let (unpack_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_ALIGNMENT")
    let (unpack_colorspace_conversion_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_COLORSPACE_CONVERSION_WEBGL")
    let (unpack_flip_y_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_FLIP_Y_WEBGL")
    let (unpack_premultiply_alpha_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_PREMULTIPLY_ALPHA_WEBGL")
    let (unsigned_byte : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_BYTE")
    let (unsigned_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT")
    let (unsigned_short : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_SHORT")
    let (unsigned_short_4_4_4_4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_SHORT_4_4_4_4")
    let (unsigned_short_5_5_5_1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_SHORT_5_5_5_1")
    let (unsigned_short_5_6_5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_SHORT_5_6_5")
    let (validate_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VALIDATE_STATUS")
    let (vendor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VENDOR")
    let (version : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERSION")
    let (vertex_attrib_array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING")
    let (vertex_attrib_array_enabled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_ENABLED")
    let (vertex_attrib_array_normalized : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_NORMALIZED")
    let (vertex_attrib_array_pointer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_POINTER")
    let (vertex_attrib_array_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_SIZE")
    let (vertex_attrib_array_stride : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_STRIDE")
    let (vertex_attrib_array_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_TYPE")
    let (vertex_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_SHADER")
    let (viewport : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VIEWPORT")
    let (zero : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "ZERO")
  end
module WebAssembly =
  struct
    module ImportExportKind =
      struct
        type t =
          [ `L_s115_memory  | `L_s194_table  | `L_s81_function 
          | `L_s83_global ]
        let rec t_of_js : Ojs.t -> t =
          fun (x10553 : Ojs.t) ->
            let x10554 = x10553 in
            match Ojs.string_of_js x10554 with
            | "memory" -> `L_s115_memory
            | "table" -> `L_s194_table
            | "function" -> `L_s81_function
            | "global" -> `L_s83_global
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x10552 :
              [ `L_s115_memory  | `L_s194_table  | `L_s81_function 
              | `L_s83_global ])
            ->
            match x10552 with
            | `L_s115_memory -> Ojs.string_to_js "memory"
            | `L_s194_table -> Ojs.string_to_js "table"
            | `L_s81_function -> Ojs.string_to_js "function"
            | `L_s83_global -> Ojs.string_to_js "global"
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10556 : Ojs.t) -> t_of_js x10556
        and t_0_to_js : t_0 -> Ojs.t = fun (x10555 : t) -> t_to_js x10555
      end
    module ModuleImportDescriptor =
      struct
        type t = [ `WebAssembly_ModuleImportDescriptor ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10558 : Ojs.t) -> t_of_js x10558
        and t_0_to_js : t_0 -> Ojs.t = fun (x10557 : t) -> t_to_js x10557
        type tags = [ `WebAssembly_ModuleImportDescriptor ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags =
                      [> `WebAssembly_ModuleImportDescriptor ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10561 : Ojs.t) -> intf_of_js __tags_of_js x10561
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10559 : __tags intf) -> intf_to_js __tags_to_js x10559
        let (get_kind : 'tags this -> ImportExportKind.t) =
          fun (x10563 : 'tags this) ->
            ImportExportKind.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10563) "kind")
        let (set_kind : 'tags this -> ImportExportKind.t -> unit) =
          fun (x10565 : 'tags this) ->
            fun (x10566 : ImportExportKind.t) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10565) "kind"
                (ImportExportKind.t_to_js x10566)
        let (get_module : 'tags this -> string) =
          fun (x10568 : 'tags this) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10568) "module")
        let (set_module : 'tags this -> string -> unit) =
          fun (x10570 : 'tags this) ->
            fun (x10571 : string) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10570) "module"
                (Ojs.string_to_js x10571)
        let (get_name : 'tags this -> string) =
          fun (x10573 : 'tags this) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10573) "name")
        let (set_name : 'tags this -> string -> unit) =
          fun (x10575 : 'tags this) ->
            fun (x10576 : string) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10575) "name"
                (Ojs.string_to_js x10576)
        let (create :
          kind:ImportExportKind.t ->
            module_:string -> name:string -> unit -> t)
          =
          fun ~kind:(x10578 : ImportExportKind.t) ->
            fun ~module_:(x10579 : string) ->
              fun ~name:(x10580 : string) ->
                fun () ->
                  let x10581 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x10581 "kind"
                    (ImportExportKind.t_to_js x10578);
                  Ojs.set_prop_ascii x10581 "module"
                    (Ojs.string_to_js x10579);
                  Ojs.set_prop_ascii x10581 "name" (Ojs.string_to_js x10580);
                  t_of_js x10581
        let cast_from = Obj.magic
      end
    module ModuleExportDescriptor =
      struct
        type t = [ `WebAssembly_ModuleExportDescriptor ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10583 : Ojs.t) -> t_of_js x10583
        and t_0_to_js : t_0 -> Ojs.t = fun (x10582 : t) -> t_to_js x10582
        type tags = [ `WebAssembly_ModuleExportDescriptor ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags =
                      [> `WebAssembly_ModuleExportDescriptor ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10586 : Ojs.t) -> intf_of_js __tags_of_js x10586
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10584 : __tags intf) -> intf_to_js __tags_to_js x10584
        let (get_kind : 'tags this -> ImportExportKind.t) =
          fun (x10588 : 'tags this) ->
            ImportExportKind.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10588) "kind")
        let (set_kind : 'tags this -> ImportExportKind.t -> unit) =
          fun (x10590 : 'tags this) ->
            fun (x10591 : ImportExportKind.t) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10590) "kind"
                (ImportExportKind.t_to_js x10591)
        let (get_name : 'tags this -> string) =
          fun (x10593 : 'tags this) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10593) "name")
        let (set_name : 'tags this -> string -> unit) =
          fun (x10595 : 'tags this) ->
            fun (x10596 : string) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10595) "name"
                (Ojs.string_to_js x10596)
        let (create : kind:ImportExportKind.t -> name:string -> unit -> t) =
          fun ~kind:(x10598 : ImportExportKind.t) ->
            fun ~name:(x10599 : string) ->
              fun () ->
                let x10600 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x10600 "kind"
                  (ImportExportKind.t_to_js x10598);
                Ojs.set_prop_ascii x10600 "name" (Ojs.string_to_js x10599);
                t_of_js x10600
        let cast_from = Obj.magic
      end
    module Module =
      struct
        type t = [ `WebAssembly_Module ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10602 : Ojs.t) -> t_of_js x10602
        and t_0_to_js : t_0 -> Ojs.t = fun (x10601 : t) -> t_to_js x10601
        type tags = [ `WebAssembly_Module ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_Module ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10605 : Ojs.t) -> intf_of_js __tags_of_js x10605
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10603 : __tags intf) -> intf_to_js __tags_to_js x10603
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Module")
                 "prototype")
        let (create : BufferSource.t -> t) =
          fun (x10607 : BufferSource.t) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Module")
                 [|(BufferSource.t_to_js x10607)|])
        let (customSections :
          moduleObject:t -> sectionName:string -> ArrayBuffer.t_0 list) =
          fun ~moduleObject:(x10608 : t) ->
            fun ~sectionName:(x10609 : string) ->
              Ojs.list_of_js ArrayBuffer.t_0_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Module")
                   "customSections"
                   [|(t_to_js x10608);(Ojs.string_to_js x10609)|])
        let (exports : t -> ModuleExportDescriptor.t list) =
          fun (x10611 : t) ->
            Ojs.list_of_js ModuleExportDescriptor.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Module")
                 "exports" [|(t_to_js x10611)|])
        let (imports : t -> ModuleImportDescriptor.t list) =
          fun (x10613 : t) ->
            Ojs.list_of_js ModuleImportDescriptor.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Module")
                 "imports" [|(t_to_js x10613)|])
      end
    module TableKind =
      struct
        type t = [ `L_s36_anyfunc  | `L_s71_externref ]
        let rec t_of_js : Ojs.t -> t =
          fun (x10616 : Ojs.t) ->
            let x10617 = x10616 in
            match Ojs.string_of_js x10617 with
            | "anyfunc" -> `L_s36_anyfunc
            | "externref" -> `L_s71_externref
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x10615 : [ `L_s36_anyfunc  | `L_s71_externref ]) ->
            match x10615 with
            | `L_s36_anyfunc -> Ojs.string_to_js "anyfunc"
            | `L_s71_externref -> Ojs.string_to_js "externref"
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10619 : Ojs.t) -> t_of_js x10619
        and t_0_to_js : t_0 -> Ojs.t = fun (x10618 : t) -> t_to_js x10618
      end
    module TableDescriptor =
      struct
        type t = [ `WebAssembly_TableDescriptor ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10621 : Ojs.t) -> t_of_js x10621
        and t_0_to_js : t_0 -> Ojs.t = fun (x10620 : t) -> t_to_js x10620
        type tags = [ `WebAssembly_TableDescriptor ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_TableDescriptor ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10624 : Ojs.t) -> intf_of_js __tags_of_js x10624
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10622 : __tags intf) -> intf_to_js __tags_to_js x10622
        let (get_element : 'tags this -> TableKind.t) =
          fun (x10626 : 'tags this) ->
            TableKind.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10626) "element")
        let (set_element : 'tags this -> TableKind.t -> unit) =
          fun (x10628 : 'tags this) ->
            fun (x10629 : TableKind.t) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10628) "element"
                (TableKind.t_to_js x10629)
        let (get_initial : 'tags this -> float) =
          fun (x10631 : 'tags this) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10631) "initial")
        let (set_initial : 'tags this -> float -> unit) =
          fun (x10633 : 'tags this) ->
            fun (x10634 : float) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10633) "initial"
                (Ojs.float_to_js x10634)
        let (get_maximum : 'tags this -> float option) =
          fun (x10636 : 'tags this) ->
            Ojs.option_of_js Ojs.float_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10636) "maximum")
        let (set_maximum : 'tags this -> float -> unit) =
          fun (x10639 : 'tags this) ->
            fun (x10640 : float) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10639) "maximum"
                (Ojs.float_to_js x10640)
        let (create :
          element:TableKind.t -> initial:float -> ?maximum:float -> unit -> t)
          =
          fun ~element:(x10642 : TableKind.t) ->
            fun ~initial:(x10643 : float) ->
              fun ?maximum:(x10644 : float option) ->
                fun () ->
                  let x10645 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x10645 "element"
                    (TableKind.t_to_js x10642);
                  Ojs.set_prop_ascii x10645 "initial"
                    (Ojs.float_to_js x10643);
                  (match x10644 with
                   | Some x10646 ->
                       Ojs.set_prop_ascii x10645 "maximum"
                         (Ojs.float_to_js x10646)
                   | None -> ());
                  t_of_js x10645
        let cast_from = Obj.magic
      end
    module Table =
      struct
        type t = [ `WebAssembly_Table ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10648 : Ojs.t) -> t_of_js x10648
        and t_0_to_js : t_0 -> Ojs.t = fun (x10647 : t) -> t_to_js x10647
        type tags = [ `WebAssembly_Table ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_Table ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10651 : Ojs.t) -> intf_of_js __tags_of_js x10651
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10649 : __tags intf) -> intf_to_js __tags_to_js x10649
        let (get_length : 'tags this -> float) =
          fun (x10653 : 'tags this) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10653) "length")
        let (get_ : 'tags this -> index:float -> any) =
          fun (x10656 : 'tags this) ->
            fun ~index:(x10655 : float) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x10656) "get"
                   [|(Ojs.float_to_js x10655)|])
        let (grow : 'tags this -> delta:float -> ?value:any -> unit -> float)
          =
          fun (x10662 : 'tags this) ->
            fun ~delta:(x10658 : float) ->
              fun ?value:(x10659 : any option) ->
                fun () ->
                  Ojs.float_of_js
                    (let x10664 = this_to_js Obj.magic x10662 in
                     Ojs.call (Ojs.get_prop_ascii x10664 "grow") "apply"
                       [|x10664;((let x10660 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x10660 "push"
                                       [|(Ojs.float_to_js x10658)|]);
                                  (match x10659 with
                                   | Some x10661 ->
                                       ignore
                                         (Ojs.call x10660 "push"
                                            [|(any_to_js x10661)|])
                                   | None -> ());
                                  x10660))|])
        let (set_ : 'tags this -> index:float -> ?value:any -> unit -> unit)
          =
          fun (x10669 : 'tags this) ->
            fun ~index:(x10665 : float) ->
              fun ?value:(x10666 : any option) ->
                fun () ->
                  ignore
                    (let x10671 = this_to_js Obj.magic x10669 in
                     Ojs.call (Ojs.get_prop_ascii x10671 "set") "apply"
                       [|x10671;((let x10667 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x10667 "push"
                                       [|(Ojs.float_to_js x10665)|]);
                                  (match x10666 with
                                   | Some x10668 ->
                                       ignore
                                         (Ojs.call x10667 "push"
                                            [|(any_to_js x10668)|])
                                   | None -> ());
                                  x10667))|])
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Table")
                 "prototype")
        let (create :
          descriptor:TableDescriptor.t -> ?value:any -> unit -> t) =
          fun ~descriptor:(x10672 : TableDescriptor.t) ->
            fun ?value:(x10673 : any option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Table")
                     (let x10674 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x10674 "push"
                           [|(TableDescriptor.t_to_js x10672)|]);
                      (match x10673 with
                       | Some x10675 ->
                           ignore
                             (Ojs.call x10674 "push" [|(any_to_js x10675)|])
                       | None -> ());
                      x10674))
      end
    module MemoryDescriptor =
      struct
        type t = [ `WebAssembly_MemoryDescriptor ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10677 : Ojs.t) -> t_of_js x10677
        and t_0_to_js : t_0 -> Ojs.t = fun (x10676 : t) -> t_to_js x10676
        type tags = [ `WebAssembly_MemoryDescriptor ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_MemoryDescriptor ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10680 : Ojs.t) -> intf_of_js __tags_of_js x10680
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10678 : __tags intf) -> intf_to_js __tags_to_js x10678
        let (get_initial : 'tags this -> float) =
          fun (x10682 : 'tags this) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10682) "initial")
        let (set_initial : 'tags this -> float -> unit) =
          fun (x10684 : 'tags this) ->
            fun (x10685 : float) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10684) "initial"
                (Ojs.float_to_js x10685)
        let (get_maximum : 'tags this -> float option) =
          fun (x10687 : 'tags this) ->
            Ojs.option_of_js Ojs.float_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10687) "maximum")
        let (set_maximum : 'tags this -> float -> unit) =
          fun (x10690 : 'tags this) ->
            fun (x10691 : float) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10690) "maximum"
                (Ojs.float_to_js x10691)
        let (get_shared : 'tags this -> bool option) =
          fun (x10693 : 'tags this) ->
            Ojs.option_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10693) "shared")
        let (set_shared : 'tags this -> bool -> unit) =
          fun (x10696 : 'tags this) ->
            fun (x10697 : bool) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10696) "shared"
                (Ojs.bool_to_js x10697)
        let (create :
          initial:float -> ?maximum:float -> ?shared:bool -> unit -> t) =
          fun ~initial:(x10699 : float) ->
            fun ?maximum:(x10700 : float option) ->
              fun ?shared:(x10701 : bool option) ->
                fun () ->
                  let x10702 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x10702 "initial"
                    (Ojs.float_to_js x10699);
                  (match x10700 with
                   | Some x10704 ->
                       Ojs.set_prop_ascii x10702 "maximum"
                         (Ojs.float_to_js x10704)
                   | None -> ());
                  (match x10701 with
                   | Some x10703 ->
                       Ojs.set_prop_ascii x10702 "shared"
                         (Ojs.bool_to_js x10703)
                   | None -> ());
                  t_of_js x10702
        let cast_from = Obj.magic
      end
    module Memory =
      struct
        type t = [ `WebAssembly_Memory ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10706 : Ojs.t) -> t_of_js x10706
        and t_0_to_js : t_0 -> Ojs.t = fun (x10705 : t) -> t_to_js x10705
        type tags = [ `WebAssembly_Memory ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_Memory ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10709 : Ojs.t) -> intf_of_js __tags_of_js x10709
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10707 : __tags intf) -> intf_to_js __tags_to_js x10707
        let (get_buffer : 'tags this -> ArrayBuffer.t_0) =
          fun (x10711 : 'tags this) ->
            ArrayBuffer.t_0_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10711) "buffer")
        let (grow : 'tags this -> delta:float -> float) =
          fun (x10714 : 'tags this) ->
            fun ~delta:(x10713 : float) ->
              Ojs.float_of_js
                (Ojs.call (this_to_js Obj.magic x10714) "grow"
                   [|(Ojs.float_to_js x10713)|])
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Memory")
                 "prototype")
        let (create : MemoryDescriptor.t -> t) =
          fun (x10716 : MemoryDescriptor.t) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Memory")
                 [|(MemoryDescriptor.t_to_js x10716)|])
      end
    module ValueType =
      struct
        type t =
          [ `L_s207_v128  | `L_s36_anyfunc  | `L_s71_externref  | `L_s72_f32 
          | `L_s73_f64  | `L_s89_i32  | `L_s90_i64 ]
        let rec t_of_js : Ojs.t -> t =
          fun (x10718 : Ojs.t) ->
            let x10719 = x10718 in
            match Ojs.string_of_js x10719 with
            | "v128" -> `L_s207_v128
            | "anyfunc" -> `L_s36_anyfunc
            | "externref" -> `L_s71_externref
            | "f32" -> `L_s72_f32
            | "f64" -> `L_s73_f64
            | "i32" -> `L_s89_i32
            | "i64" -> `L_s90_i64
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x10717 :
              [ `L_s207_v128  | `L_s36_anyfunc  | `L_s71_externref 
              | `L_s72_f32  | `L_s73_f64  | `L_s89_i32  | `L_s90_i64 ])
            ->
            match x10717 with
            | `L_s207_v128 -> Ojs.string_to_js "v128"
            | `L_s36_anyfunc -> Ojs.string_to_js "anyfunc"
            | `L_s71_externref -> Ojs.string_to_js "externref"
            | `L_s72_f32 -> Ojs.string_to_js "f32"
            | `L_s73_f64 -> Ojs.string_to_js "f64"
            | `L_s89_i32 -> Ojs.string_to_js "i32"
            | `L_s90_i64 -> Ojs.string_to_js "i64"
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10721 : Ojs.t) -> t_of_js x10721
        and t_0_to_js : t_0 -> Ojs.t = fun (x10720 : t) -> t_to_js x10720
      end
    module GlobalDescriptor =
      struct
        type t = [ `WebAssembly_GlobalDescriptor ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10723 : Ojs.t) -> t_of_js x10723
        and t_0_to_js : t_0 -> Ojs.t = fun (x10722 : t) -> t_to_js x10722
        type tags = [ `WebAssembly_GlobalDescriptor ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_GlobalDescriptor ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10726 : Ojs.t) -> intf_of_js __tags_of_js x10726
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10724 : __tags intf) -> intf_to_js __tags_to_js x10724
        let (get_mutable : 'tags this -> bool option) =
          fun (x10728 : 'tags this) ->
            Ojs.option_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10728) "mutable")
        let (set_mutable : 'tags this -> bool -> unit) =
          fun (x10731 : 'tags this) ->
            fun (x10732 : bool) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10731) "mutable"
                (Ojs.bool_to_js x10732)
        let (get_value : 'tags this -> ValueType.t) =
          fun (x10734 : 'tags this) ->
            ValueType.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10734) "value")
        let (set_value : 'tags this -> ValueType.t -> unit) =
          fun (x10736 : 'tags this) ->
            fun (x10737 : ValueType.t) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10736) "value"
                (ValueType.t_to_js x10737)
        let (create : ?mutable_:bool -> value:ValueType.t -> unit -> t) =
          fun ?mutable_:(x10739 : bool option) ->
            fun ~value:(x10740 : ValueType.t) ->
              fun () ->
                let x10741 = Ojs.empty_obj () in
                (match x10739 with
                 | Some x10742 ->
                     Ojs.set_prop_ascii x10741 "mutable"
                       (Ojs.bool_to_js x10742)
                 | None -> ());
                Ojs.set_prop_ascii x10741 "value" (ValueType.t_to_js x10740);
                t_of_js x10741
        let cast_from = Obj.magic
      end
    module Global =
      struct
        type t = [ `WebAssembly_Global ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10744 : Ojs.t) -> t_of_js x10744
        and t_0_to_js : t_0 -> Ojs.t = fun (x10743 : t) -> t_to_js x10743
        type tags = [ `WebAssembly_Global ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_Global ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10747 : Ojs.t) -> intf_of_js __tags_of_js x10747
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10745 : __tags intf) -> intf_to_js __tags_to_js x10745
        let (get_value : 'tags this -> any) =
          fun (x10749 : 'tags this) ->
            any_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10749) "value")
        let (set_value : 'tags this -> any -> unit) =
          fun (x10751 : 'tags this) ->
            fun (x10752 : any) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10751) "value"
                (any_to_js x10752)
        let (valueOf : 'tags this -> any) =
          fun (x10754 : 'tags this) ->
            any_of_js (Ojs.call (this_to_js Obj.magic x10754) "valueOf" [||])
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Global")
                 "prototype")
        let (create : descriptor:GlobalDescriptor.t -> ?v:any -> unit -> t) =
          fun ~descriptor:(x10756 : GlobalDescriptor.t) ->
            fun ?v:(x10757 : any option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                        "Global")
                     (let x10758 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x10758 "push"
                           [|(GlobalDescriptor.t_to_js x10756)|]);
                      (match x10757 with
                       | Some x10759 ->
                           ignore
                             (Ojs.call x10758 "push" [|(any_to_js x10759)|])
                       | None -> ());
                      x10758))
      end
    module ExportValue =
      struct
        type t = (untyped_function, Global.t, Memory.t, Table.t) union4
        let rec t_of_js : Ojs.t -> t =
          fun (x10765 : Ojs.t) ->
            union4_of_js untyped_function_of_js Global.t_of_js Memory.t_of_js
              Table.t_of_js x10765
        and t_to_js : t -> Ojs.t =
          fun
            (x10760 : (untyped_function, Global.t, Memory.t, Table.t) union4)
            ->
            union4_to_js untyped_function_to_js Global.t_to_js Memory.t_to_js
              Table.t_to_js x10760
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10771 : Ojs.t) -> t_of_js x10771
        and t_0_to_js : t_0 -> Ojs.t = fun (x10770 : t) -> t_to_js x10770
      end
    module ImportValue =
      struct
        type t = [ `Number of float  | `Other of ExportValue.t ] Primitive.t
        let rec t_of_js : Ojs.t -> t =
          fun (x10776 : Ojs.t) ->
            Primitive.t_of_js
              (fun (x10777 : Ojs.t) ->
                 let x10778 = x10777 in
                 match Ojs.string_of_js (Ojs.get_prop_ascii x10778 "dummy")
                 with
                 | "Number" -> `Number (Ojs.float_of_js x10778)
                 | "Other" -> `Other (ExportValue.t_of_js x10778)
                 | _ -> assert false) x10776
        and t_to_js : t -> Ojs.t =
          fun
            (x10772 :
              [ `Number of float  | `Other of ExportValue.t ] Primitive.t)
            ->
            Primitive.t_to_js
              (fun (x10773 : [ `Number of float  | `Other of ExportValue.t ])
                 ->
                 match x10773 with
                 | `Number x10774 -> Ojs.float_to_js x10774
                 | `Other x10775 -> ExportValue.t_to_js x10775) x10772
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10780 : Ojs.t) -> t_of_js x10780
        and t_0_to_js : t_0 -> Ojs.t = fun (x10779 : t) -> t_to_js x10779
      end
    module ModuleImports =
      struct
        type t = (string, ImportValue.t) Record.t_2
        let rec t_of_js : Ojs.t -> t =
          fun (x10784 : Ojs.t) ->
            Record.t_2_of_js Ojs.string_of_js ImportValue.t_of_js x10784
        and t_to_js : t -> Ojs.t =
          fun (x10781 : (string, ImportValue.t) Record.t_2) ->
            Record.t_2_to_js Ojs.string_to_js ImportValue.t_to_js x10781
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10788 : Ojs.t) -> t_of_js x10788
        and t_0_to_js : t_0 -> Ojs.t = fun (x10787 : t) -> t_to_js x10787
      end
    module Imports =
      struct
        type t = (string, ModuleImports.t) Record.t_2
        let rec t_of_js : Ojs.t -> t =
          fun (x10792 : Ojs.t) ->
            Record.t_2_of_js Ojs.string_of_js ModuleImports.t_of_js x10792
        and t_to_js : t -> Ojs.t =
          fun (x10789 : (string, ModuleImports.t) Record.t_2) ->
            Record.t_2_to_js Ojs.string_to_js ModuleImports.t_to_js x10789
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10796 : Ojs.t) -> t_of_js x10796
        and t_0_to_js : t_0 -> Ojs.t = fun (x10795 : t) -> t_to_js x10795
      end
    module Exports =
      struct
        type t = (string, ExportValue.t) Record.t_2
        let rec t_of_js : Ojs.t -> t =
          fun (x10800 : Ojs.t) ->
            Record.t_2_of_js Ojs.string_of_js ExportValue.t_of_js x10800
        and t_to_js : t -> Ojs.t =
          fun (x10797 : (string, ExportValue.t) Record.t_2) ->
            Record.t_2_to_js Ojs.string_to_js ExportValue.t_to_js x10797
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10804 : Ojs.t) -> t_of_js x10804
        and t_0_to_js : t_0 -> Ojs.t = fun (x10803 : t) -> t_to_js x10803
      end
    module Instance =
      struct
        type t = [ `WebAssembly_Instance ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10806 : Ojs.t) -> t_of_js x10806
        and t_0_to_js : t_0 -> Ojs.t = fun (x10805 : t) -> t_to_js x10805
        type tags = [ `WebAssembly_Instance ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_Instance ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10809 : Ojs.t) -> intf_of_js __tags_of_js x10809
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10807 : __tags intf) -> intf_to_js __tags_to_js x10807
        let (get_exports : 'tags this -> Exports.t) =
          fun (x10811 : 'tags this) ->
            Exports.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10811) "exports")
        let (create : exports:Exports.t -> unit -> t) =
          fun ~exports:(x10813 : Exports.t) ->
            fun () ->
              let x10814 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x10814 "exports" (Exports.t_to_js x10813);
              t_of_js x10814
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Instance")
                 "prototype")
        let (create' :
          module_:Module.t -> ?importObject:Imports.t -> unit -> t) =
          fun ~module_:(x10815 : Module.t) ->
            fun ?importObject:(x10816 : Imports.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                        "Instance")
                     (let x10817 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x10817 "push" [|(Module.t_to_js x10815)|]);
                      (match x10816 with
                       | Some x10818 ->
                           ignore
                             (Ojs.call x10817 "push"
                                [|(Imports.t_to_js x10818)|])
                       | None -> ());
                      x10817))
      end
    module WebAssemblyInstantiatedSource =
      struct
        type t = [ `WebAssembly_WebAssemblyInstantiatedSource ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10820 : Ojs.t) -> t_of_js x10820
        and t_0_to_js : t_0 -> Ojs.t = fun (x10819 : t) -> t_to_js x10819
        type tags = [ `WebAssembly_WebAssemblyInstantiatedSource ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags =
                      [> `WebAssembly_WebAssemblyInstantiatedSource ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10823 : Ojs.t) -> intf_of_js __tags_of_js x10823
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10821 : __tags intf) -> intf_to_js __tags_to_js x10821
        let (get_instance : 'tags this -> Instance.t) =
          fun (x10825 : 'tags this) ->
            Instance.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10825) "instance")
        let (set_instance : 'tags this -> Instance.t -> unit) =
          fun (x10827 : 'tags this) ->
            fun (x10828 : Instance.t) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10827) "instance"
                (Instance.t_to_js x10828)
        let (get_module : 'tags this -> Module.t) =
          fun (x10830 : 'tags this) ->
            Module.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10830) "module")
        let (set_module : 'tags this -> Module.t -> unit) =
          fun (x10832 : 'tags this) ->
            fun (x10833 : Module.t) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10832) "module"
                (Module.t_to_js x10833)
        let (create : instance:Instance.t -> module_:Module.t -> unit -> t) =
          fun ~instance:(x10835 : Instance.t) ->
            fun ~module_:(x10836 : Module.t) ->
              fun () ->
                let x10837 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x10837 "instance"
                  (Instance.t_to_js x10835);
                Ojs.set_prop_ascii x10837 "module" (Module.t_to_js x10836);
                t_of_js x10837
        let cast_from = Obj.magic
      end
    module RuntimeError =
      struct
        type t = [ `WebAssembly_RuntimeError ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10839 : Ojs.t) -> t_of_js x10839
        and t_0_to_js : t_0 -> Ojs.t = fun (x10838 : t) -> t_to_js x10838
        type tags = [ `WebAssembly_RuntimeError ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_RuntimeError ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10842 : Ojs.t) -> intf_of_js __tags_of_js x10842
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10840 : __tags intf) -> intf_to_js __tags_to_js x10840
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                    "RuntimeError") "prototype")
        let (create : ?message:string -> unit -> t) =
          fun ?message:(x10844 : string option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                      "RuntimeError")
                   (let x10845 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x10844 with
                     | Some x10846 ->
                         ignore
                           (Ojs.call x10845 "push"
                              [|(Ojs.string_to_js x10846)|])
                     | None -> ());
                    x10845))
        let (invoke : ?message:string -> unit -> t) =
          fun ?message:(x10847 : string option) ->
            fun () ->
              t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                      "RuntimeError") "apply"
                   [|Ojs.null;((let x10848 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x10847 with
                                 | Some x10849 ->
                                     ignore
                                       (Ojs.call x10848 "push"
                                          [|(Ojs.string_to_js x10849)|])
                                 | None -> ());
                                x10848))|])
      end
    module LinkError =
      struct
        type t = [ `WebAssembly_LinkError ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10851 : Ojs.t) -> t_of_js x10851
        and t_0_to_js : t_0 -> Ojs.t = fun (x10850 : t) -> t_to_js x10850
        type tags = [ `WebAssembly_LinkError ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_LinkError ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10854 : Ojs.t) -> intf_of_js __tags_of_js x10854
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10852 : __tags intf) -> intf_to_js __tags_to_js x10852
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "LinkError")
                 "prototype")
        let (create : ?message:string -> unit -> t) =
          fun ?message:(x10856 : string option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                      "LinkError")
                   (let x10857 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x10856 with
                     | Some x10858 ->
                         ignore
                           (Ojs.call x10857 "push"
                              [|(Ojs.string_to_js x10858)|])
                     | None -> ());
                    x10857))
        let (invoke : ?message:string -> unit -> t) =
          fun ?message:(x10859 : string option) ->
            fun () ->
              t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                      "LinkError") "apply"
                   [|Ojs.null;((let x10860 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x10859 with
                                 | Some x10861 ->
                                     ignore
                                       (Ojs.call x10860 "push"
                                          [|(Ojs.string_to_js x10861)|])
                                 | None -> ());
                                x10860))|])
      end
    module CompileError =
      struct
        type t = [ `WebAssembly_CompileError ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10863 : Ojs.t) -> t_of_js x10863
        and t_0_to_js : t_0 -> Ojs.t = fun (x10862 : t) -> t_to_js x10862
        type tags = [ `WebAssembly_CompileError ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_CompileError ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10866 : Ojs.t) -> intf_of_js __tags_of_js x10866
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10864 : __tags intf) -> intf_to_js __tags_to_js x10864
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                    "CompileError") "prototype")
        let (create : ?message:string -> unit -> t) =
          fun ?message:(x10868 : string option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                      "CompileError")
                   (let x10869 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x10868 with
                     | Some x10870 ->
                         ignore
                           (Ojs.call x10869 "push"
                              [|(Ojs.string_to_js x10870)|])
                     | None -> ());
                    x10869))
        let (invoke : ?message:string -> unit -> t) =
          fun ?message:(x10871 : string option) ->
            fun () ->
              t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                      "CompileError") "apply"
                   [|Ojs.null;((let x10872 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x10871 with
                                 | Some x10873 ->
                                     ignore
                                       (Ojs.call x10872 "push"
                                          [|(Ojs.string_to_js x10873)|])
                                 | None -> ());
                                x10872))|])
      end
    let (compile : BufferSource.t -> Module.t Promise.t_1) =
      fun (x10874 : BufferSource.t) ->
        Promise.t_1_of_js Module.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "WebAssembly") "compile"
             [|(BufferSource.t_to_js x10874)|])
    let (compileStreaming :
      (Response.t, Response.t PromiseLike.t_1) union2 -> Module.t Promise.t_1)
      =
      fun (x10876 : (Response.t, Response.t PromiseLike.t_1) union2) ->
        Promise.t_1_of_js Module.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "WebAssembly")
             "compileStreaming"
             [|(union2_to_js Response.t_to_js
                  (fun (x10878 : Response.t PromiseLike.t_1) ->
                     PromiseLike.t_1_to_js Response.t_to_js x10878) x10876)|])
    let (instantiate :
      bytes:BufferSource.t ->
        ?importObject:Imports.t ->
          unit -> WebAssemblyInstantiatedSource.t Promise.t_1)
      =
      fun ~bytes:(x10881 : BufferSource.t) ->
        fun ?importObject:(x10882 : Imports.t option) ->
          fun () ->
            Promise.t_1_of_js WebAssemblyInstantiatedSource.t_of_js
              (let x10885 = Ojs.get_prop_ascii Ojs.global "WebAssembly" in
               Ojs.call (Ojs.get_prop_ascii x10885 "instantiate") "apply"
                 [|x10885;((let x10883 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x10883 "push"
                                 [|(BufferSource.t_to_js x10881)|]);
                            (match x10882 with
                             | Some x10884 ->
                                 ignore
                                   (Ojs.call x10883 "push"
                                      [|(Imports.t_to_js x10884)|])
                             | None -> ());
                            x10883))|])
    let (instantiate' :
      moduleObject:Module.t ->
        ?importObject:Imports.t -> unit -> Instance.t Promise.t_1)
      =
      fun ~moduleObject:(x10887 : Module.t) ->
        fun ?importObject:(x10888 : Imports.t option) ->
          fun () ->
            Promise.t_1_of_js Instance.t_of_js
              (let x10891 = Ojs.get_prop_ascii Ojs.global "WebAssembly" in
               Ojs.call (Ojs.get_prop_ascii x10891 "instantiate") "apply"
                 [|x10891;((let x10889 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x10889 "push"
                                 [|(Module.t_to_js x10887)|]);
                            (match x10888 with
                             | Some x10890 ->
                                 ignore
                                   (Ojs.call x10889 "push"
                                      [|(Imports.t_to_js x10890)|])
                             | None -> ());
                            x10889))|])
    let (instantiateStreaming :
      source:(Response.t, Response.t PromiseLike.t_1) union2 ->
        ?importObject:Imports.t ->
          unit -> WebAssemblyInstantiatedSource.t Promise.t_1)
      =
      fun ~source:(x10893 : (Response.t, Response.t PromiseLike.t_1) union2)
        ->
        fun ?importObject:(x10894 : Imports.t option) ->
          fun () ->
            Promise.t_1_of_js WebAssemblyInstantiatedSource.t_of_js
              (let x10900 = Ojs.get_prop_ascii Ojs.global "WebAssembly" in
               Ojs.call (Ojs.get_prop_ascii x10900 "instantiateStreaming")
                 "apply"
                 [|x10900;((let x10895 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x10895 "push"
                                 [|(union2_to_js Response.t_to_js
                                      (fun
                                         (x10898 :
                                           Response.t PromiseLike.t_1)
                                         ->
                                         PromiseLike.t_1_to_js
                                           Response.t_to_js x10898) x10893)|]);
                            (match x10894 with
                             | Some x10896 ->
                                 ignore
                                   (Ojs.call x10895 "push"
                                      [|(Imports.t_to_js x10896)|])
                             | None -> ());
                            x10895))|])
    let (validate : BufferSource.t -> bool) =
      fun (x10902 : BufferSource.t) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "WebAssembly") "validate"
             [|(BufferSource.t_to_js x10902)|])
  end
module WEBGL_multi_draw =
  struct
    type t = [ `WEBGL_multi_draw ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10904 : Ojs.t) -> t_of_js x10904
    and t_0_to_js : t_0 -> Ojs.t = fun (x10903 : t) -> t_to_js x10903
    type tags = [ `WEBGL_multi_draw ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_multi_draw ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x10907 : Ojs.t) -> intf_of_js __tags_of_js x10907
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x10905 : __tags intf) -> intf_to_js __tags_to_js x10905
    let (multiDrawArraysInstancedWEBGL :
      'tags this ->
        mode:GLenum.t ->
          firstsList:[ `U1 of Int32Array.t_0  | `U2 of GLint.t list ] ->
            firstsOffset:GLuint.t ->
              countsList:[ `U1 of Int32Array.t_0  | `U2 of GLsizei.t list ]
                ->
                countsOffset:GLuint.t ->
                  instanceCountsList:[ `U1 of Int32Array.t_0 
                                     | `U2 of GLsizei.t list ]
                    ->
                    instanceCountsOffset:GLuint.t ->
                      drawcount:GLsizei.t -> unit)
      =
      fun (x10926 : 'tags this) ->
        fun ~mode:(x10909 : GLenum.t) ->
          fun
            ~firstsList:(x10910 :
                          [ `U1 of Int32Array.t_0  | `U2 of GLint.t list ])
            ->
            fun ~firstsOffset:(x10914 : GLuint.t) ->
              fun
                ~countsList:(x10915 :
                              [ `U1 of Int32Array.t_0 
                              | `U2 of GLsizei.t list ])
                ->
                fun ~countsOffset:(x10919 : GLuint.t) ->
                  fun
                    ~instanceCountsList:(x10920 :
                                          [ `U1 of Int32Array.t_0 
                                          | `U2 of GLsizei.t list ])
                    ->
                    fun ~instanceCountsOffset:(x10924 : GLuint.t) ->
                      fun ~drawcount:(x10925 : GLsizei.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x10926)
                             "multiDrawArraysInstancedWEBGL"
                             [|(GLenum.t_to_js x10909);((match x10910 with
                                                         | `U1 x10911 ->
                                                             Int32Array.t_0_to_js
                                                               x10911
                                                         | `U2 x10912 ->
                                                             Ojs.list_to_js
                                                               GLint.t_to_js
                                                               x10912));(
                               GLuint.t_to_js x10914);((match x10915 with
                                                        | `U1 x10916 ->
                                                            Int32Array.t_0_to_js
                                                              x10916
                                                        | `U2 x10917 ->
                                                            Ojs.list_to_js
                                                              GLsizei.t_to_js
                                                              x10917));(
                               GLuint.t_to_js x10919);((match x10920 with
                                                        | `U1 x10921 ->
                                                            Int32Array.t_0_to_js
                                                              x10921
                                                        | `U2 x10922 ->
                                                            Ojs.list_to_js
                                                              GLsizei.t_to_js
                                                              x10922));(
                               GLuint.t_to_js x10924);(GLsizei.t_to_js x10925)|])
    let (multiDrawArraysWEBGL :
      'tags this ->
        mode:GLenum.t ->
          firstsList:[ `U1 of Int32Array.t_0  | `U2 of GLint.t list ] ->
            firstsOffset:GLuint.t ->
              countsList:[ `U1 of Int32Array.t_0  | `U2 of GLsizei.t list ]
                -> countsOffset:GLuint.t -> drawcount:GLsizei.t -> unit)
      =
      fun (x10940 : 'tags this) ->
        fun ~mode:(x10928 : GLenum.t) ->
          fun
            ~firstsList:(x10929 :
                          [ `U1 of Int32Array.t_0  | `U2 of GLint.t list ])
            ->
            fun ~firstsOffset:(x10933 : GLuint.t) ->
              fun
                ~countsList:(x10934 :
                              [ `U1 of Int32Array.t_0 
                              | `U2 of GLsizei.t list ])
                ->
                fun ~countsOffset:(x10938 : GLuint.t) ->
                  fun ~drawcount:(x10939 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x10940)
                         "multiDrawArraysWEBGL"
                         [|(GLenum.t_to_js x10928);((match x10929 with
                                                     | `U1 x10930 ->
                                                         Int32Array.t_0_to_js
                                                           x10930
                                                     | `U2 x10931 ->
                                                         Ojs.list_to_js
                                                           GLint.t_to_js
                                                           x10931));(
                           GLuint.t_to_js x10933);((match x10934 with
                                                    | `U1 x10935 ->
                                                        Int32Array.t_0_to_js
                                                          x10935
                                                    | `U2 x10936 ->
                                                        Ojs.list_to_js
                                                          GLsizei.t_to_js
                                                          x10936));(GLuint.t_to_js
                                                                    x10938);(
                           GLsizei.t_to_js x10939)|])
    let (multiDrawElementsInstancedWEBGL :
      'tags this ->
        mode:GLenum.t ->
          countsList:[ `U1 of Int32Array.t_0  | `U2 of GLint.t list ] ->
            countsOffset:GLuint.t ->
              type_:GLenum.t ->
                offsetsList:[ `U1 of Int32Array.t_0 
                            | `U2 of GLsizei.t list ]
                  ->
                  offsetsOffset:GLuint.t ->
                    instanceCountsList:[ `U1 of Int32Array.t_0 
                                       | `U2 of GLsizei.t list ]
                      ->
                      instanceCountsOffset:GLuint.t ->
                        drawcount:GLsizei.t -> unit)
      =
      fun (x10960 : 'tags this) ->
        fun ~mode:(x10942 : GLenum.t) ->
          fun
            ~countsList:(x10943 :
                          [ `U1 of Int32Array.t_0  | `U2 of GLint.t list ])
            ->
            fun ~countsOffset:(x10947 : GLuint.t) ->
              fun ~type_:(x10948 : GLenum.t) ->
                fun
                  ~offsetsList:(x10949 :
                                 [ `U1 of Int32Array.t_0 
                                 | `U2 of GLsizei.t list ])
                  ->
                  fun ~offsetsOffset:(x10953 : GLuint.t) ->
                    fun
                      ~instanceCountsList:(x10954 :
                                            [ `U1 of Int32Array.t_0 
                                            | `U2 of GLsizei.t list ])
                      ->
                      fun ~instanceCountsOffset:(x10958 : GLuint.t) ->
                        fun ~drawcount:(x10959 : GLsizei.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x10960)
                               "multiDrawElementsInstancedWEBGL"
                               [|(GLenum.t_to_js x10942);((match x10943 with
                                                           | `U1 x10944 ->
                                                               Int32Array.t_0_to_js
                                                                 x10944
                                                           | `U2 x10945 ->
                                                               Ojs.list_to_js
                                                                 GLint.t_to_js
                                                                 x10945));(
                                 GLuint.t_to_js x10947);(GLenum.t_to_js
                                                           x10948);((
                                 match x10949 with
                                 | `U1 x10950 -> Int32Array.t_0_to_js x10950
                                 | `U2 x10951 ->
                                     Ojs.list_to_js GLsizei.t_to_js x10951));(
                                 GLuint.t_to_js x10953);((match x10954 with
                                                          | `U1 x10955 ->
                                                              Int32Array.t_0_to_js
                                                                x10955
                                                          | `U2 x10956 ->
                                                              Ojs.list_to_js
                                                                GLsizei.t_to_js
                                                                x10956));(
                                 GLuint.t_to_js x10958);(GLsizei.t_to_js
                                                           x10959)|])
    let (multiDrawElementsWEBGL :
      'tags this ->
        mode:GLenum.t ->
          countsList:[ `U1 of Int32Array.t_0  | `U2 of GLint.t list ] ->
            countsOffset:GLuint.t ->
              type_:GLenum.t ->
                offsetsList:[ `U1 of Int32Array.t_0 
                            | `U2 of GLsizei.t list ]
                  -> offsetsOffset:GLuint.t -> drawcount:GLsizei.t -> unit)
      =
      fun (x10975 : 'tags this) ->
        fun ~mode:(x10962 : GLenum.t) ->
          fun
            ~countsList:(x10963 :
                          [ `U1 of Int32Array.t_0  | `U2 of GLint.t list ])
            ->
            fun ~countsOffset:(x10967 : GLuint.t) ->
              fun ~type_:(x10968 : GLenum.t) ->
                fun
                  ~offsetsList:(x10969 :
                                 [ `U1 of Int32Array.t_0 
                                 | `U2 of GLsizei.t list ])
                  ->
                  fun ~offsetsOffset:(x10973 : GLuint.t) ->
                    fun ~drawcount:(x10974 : GLsizei.t) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x10975)
                           "multiDrawElementsWEBGL"
                           [|(GLenum.t_to_js x10962);((match x10963 with
                                                       | `U1 x10964 ->
                                                           Int32Array.t_0_to_js
                                                             x10964
                                                       | `U2 x10965 ->
                                                           Ojs.list_to_js
                                                             GLint.t_to_js
                                                             x10965));(
                             GLuint.t_to_js x10967);(GLenum.t_to_js x10968);((
                             match x10969 with
                             | `U1 x10970 -> Int32Array.t_0_to_js x10970
                             | `U2 x10971 ->
                                 Ojs.list_to_js GLsizei.t_to_js x10971));(
                             GLuint.t_to_js x10973);(GLsizei.t_to_js x10974)|])
    let (multiDrawArraysInstancedWEBGL' :
      'tags this ->
        mode:GLenum.t ->
          firstsList:[ `U1 of Int32Array.t_0  | `U2 of GLint.t Iterable.t_1 ]
            ->
            firstsOffset:GLuint.t ->
              countsList:[ `U1 of Int32Array.t_0 
                         | `U2 of GLsizei.t Iterable.t_1 ]
                ->
                countsOffset:GLuint.t ->
                  instanceCountsList:[ `U1 of Int32Array.t_0 
                                     | `U2 of GLsizei.t Iterable.t_1 ]
                    ->
                    instanceCountsOffset:GLuint.t ->
                      drawcount:GLsizei.t -> unit)
      =
      fun (x10994 : 'tags this) ->
        fun ~mode:(x10977 : GLenum.t) ->
          fun
            ~firstsList:(x10978 :
                          [ `U1 of Int32Array.t_0 
                          | `U2 of GLint.t Iterable.t_1 ])
            ->
            fun ~firstsOffset:(x10982 : GLuint.t) ->
              fun
                ~countsList:(x10983 :
                              [ `U1 of Int32Array.t_0 
                              | `U2 of GLsizei.t Iterable.t_1 ])
                ->
                fun ~countsOffset:(x10987 : GLuint.t) ->
                  fun
                    ~instanceCountsList:(x10988 :
                                          [ `U1 of Int32Array.t_0 
                                          | `U2 of GLsizei.t Iterable.t_1 ])
                    ->
                    fun ~instanceCountsOffset:(x10992 : GLuint.t) ->
                      fun ~drawcount:(x10993 : GLsizei.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x10994)
                             "multiDrawArraysInstancedWEBGL"
                             [|(GLenum.t_to_js x10977);((match x10978 with
                                                         | `U1 x10979 ->
                                                             Int32Array.t_0_to_js
                                                               x10979
                                                         | `U2 x10980 ->
                                                             Iterable.t_1_to_js
                                                               GLint.t_to_js
                                                               x10980));(
                               GLuint.t_to_js x10982);((match x10983 with
                                                        | `U1 x10984 ->
                                                            Int32Array.t_0_to_js
                                                              x10984
                                                        | `U2 x10985 ->
                                                            Iterable.t_1_to_js
                                                              GLsizei.t_to_js
                                                              x10985));(
                               GLuint.t_to_js x10987);((match x10988 with
                                                        | `U1 x10989 ->
                                                            Int32Array.t_0_to_js
                                                              x10989
                                                        | `U2 x10990 ->
                                                            Iterable.t_1_to_js
                                                              GLsizei.t_to_js
                                                              x10990));(
                               GLuint.t_to_js x10992);(GLsizei.t_to_js x10993)|])
    let (multiDrawArraysWEBGL' :
      'tags this ->
        mode:GLenum.t ->
          firstsList:[ `U1 of Int32Array.t_0  | `U2 of GLint.t Iterable.t_1 ]
            ->
            firstsOffset:GLuint.t ->
              countsList:[ `U1 of Int32Array.t_0 
                         | `U2 of GLsizei.t Iterable.t_1 ]
                -> countsOffset:GLuint.t -> drawcount:GLsizei.t -> unit)
      =
      fun (x11008 : 'tags this) ->
        fun ~mode:(x10996 : GLenum.t) ->
          fun
            ~firstsList:(x10997 :
                          [ `U1 of Int32Array.t_0 
                          | `U2 of GLint.t Iterable.t_1 ])
            ->
            fun ~firstsOffset:(x11001 : GLuint.t) ->
              fun
                ~countsList:(x11002 :
                              [ `U1 of Int32Array.t_0 
                              | `U2 of GLsizei.t Iterable.t_1 ])
                ->
                fun ~countsOffset:(x11006 : GLuint.t) ->
                  fun ~drawcount:(x11007 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x11008)
                         "multiDrawArraysWEBGL"
                         [|(GLenum.t_to_js x10996);((match x10997 with
                                                     | `U1 x10998 ->
                                                         Int32Array.t_0_to_js
                                                           x10998
                                                     | `U2 x10999 ->
                                                         Iterable.t_1_to_js
                                                           GLint.t_to_js
                                                           x10999));(
                           GLuint.t_to_js x11001);((match x11002 with
                                                    | `U1 x11003 ->
                                                        Int32Array.t_0_to_js
                                                          x11003
                                                    | `U2 x11004 ->
                                                        Iterable.t_1_to_js
                                                          GLsizei.t_to_js
                                                          x11004));(GLuint.t_to_js
                                                                    x11006);(
                           GLsizei.t_to_js x11007)|])
    let (multiDrawElementsInstancedWEBGL' :
      'tags this ->
        mode:GLenum.t ->
          countsList:[ `U1 of Int32Array.t_0  | `U2 of GLint.t Iterable.t_1 ]
            ->
            countsOffset:GLuint.t ->
              type_:GLenum.t ->
                offsetsList:[ `U1 of Int32Array.t_0 
                            | `U2 of GLsizei.t Iterable.t_1 ]
                  ->
                  offsetsOffset:GLuint.t ->
                    instanceCountsList:[ `U1 of Int32Array.t_0 
                                       | `U2 of GLsizei.t Iterable.t_1 ]
                      ->
                      instanceCountsOffset:GLuint.t ->
                        drawcount:GLsizei.t -> unit)
      =
      fun (x11028 : 'tags this) ->
        fun ~mode:(x11010 : GLenum.t) ->
          fun
            ~countsList:(x11011 :
                          [ `U1 of Int32Array.t_0 
                          | `U2 of GLint.t Iterable.t_1 ])
            ->
            fun ~countsOffset:(x11015 : GLuint.t) ->
              fun ~type_:(x11016 : GLenum.t) ->
                fun
                  ~offsetsList:(x11017 :
                                 [ `U1 of Int32Array.t_0 
                                 | `U2 of GLsizei.t Iterable.t_1 ])
                  ->
                  fun ~offsetsOffset:(x11021 : GLuint.t) ->
                    fun
                      ~instanceCountsList:(x11022 :
                                            [ `U1 of Int32Array.t_0 
                                            | `U2 of GLsizei.t Iterable.t_1 ])
                      ->
                      fun ~instanceCountsOffset:(x11026 : GLuint.t) ->
                        fun ~drawcount:(x11027 : GLsizei.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x11028)
                               "multiDrawElementsInstancedWEBGL"
                               [|(GLenum.t_to_js x11010);((match x11011 with
                                                           | `U1 x11012 ->
                                                               Int32Array.t_0_to_js
                                                                 x11012
                                                           | `U2 x11013 ->
                                                               Iterable.t_1_to_js
                                                                 GLint.t_to_js
                                                                 x11013));(
                                 GLuint.t_to_js x11015);(GLenum.t_to_js
                                                           x11016);((
                                 match x11017 with
                                 | `U1 x11018 -> Int32Array.t_0_to_js x11018
                                 | `U2 x11019 ->
                                     Iterable.t_1_to_js GLsizei.t_to_js
                                       x11019));(GLuint.t_to_js x11021);((
                                 match x11022 with
                                 | `U1 x11023 -> Int32Array.t_0_to_js x11023
                                 | `U2 x11024 ->
                                     Iterable.t_1_to_js GLsizei.t_to_js
                                       x11024));(GLuint.t_to_js x11026);(
                                 GLsizei.t_to_js x11027)|])
    let (multiDrawElementsWEBGL' :
      'tags this ->
        mode:GLenum.t ->
          countsList:[ `U1 of Int32Array.t_0  | `U2 of GLint.t Iterable.t_1 ]
            ->
            countsOffset:GLuint.t ->
              type_:GLenum.t ->
                offsetsList:[ `U1 of Int32Array.t_0 
                            | `U2 of GLsizei.t Iterable.t_1 ]
                  -> offsetsOffset:GLuint.t -> drawcount:GLsizei.t -> unit)
      =
      fun (x11043 : 'tags this) ->
        fun ~mode:(x11030 : GLenum.t) ->
          fun
            ~countsList:(x11031 :
                          [ `U1 of Int32Array.t_0 
                          | `U2 of GLint.t Iterable.t_1 ])
            ->
            fun ~countsOffset:(x11035 : GLuint.t) ->
              fun ~type_:(x11036 : GLenum.t) ->
                fun
                  ~offsetsList:(x11037 :
                                 [ `U1 of Int32Array.t_0 
                                 | `U2 of GLsizei.t Iterable.t_1 ])
                  ->
                  fun ~offsetsOffset:(x11041 : GLuint.t) ->
                    fun ~drawcount:(x11042 : GLsizei.t) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x11043)
                           "multiDrawElementsWEBGL"
                           [|(GLenum.t_to_js x11030);((match x11031 with
                                                       | `U1 x11032 ->
                                                           Int32Array.t_0_to_js
                                                             x11032
                                                       | `U2 x11033 ->
                                                           Iterable.t_1_to_js
                                                             GLint.t_to_js
                                                             x11033));(
                             GLuint.t_to_js x11035);(GLenum.t_to_js x11036);((
                             match x11037 with
                             | `U1 x11038 -> Int32Array.t_0_to_js x11038
                             | `U2 x11039 ->
                                 Iterable.t_1_to_js GLsizei.t_to_js x11039));(
                             GLuint.t_to_js x11041);(GLsizei.t_to_js x11042)|])
    let cast_from = Obj.magic
  end
module TransformStreamDefaultController =
  struct
    type 'O t = [ `TransformStreamDefaultController of 'O ] intf
    let rec t_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t =
      fun _O -> Obj.magic
    and t_to_js : 'O . ('O -> Ojs.t) -> 'O t -> Ojs.t = fun _O -> Obj.magic
    type 'O t_1 = 'O t
    let rec t_1_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t_1 =
      fun (type __O) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x11047 : Ojs.t) -> t_of_js __O_of_js x11047
    and t_1_to_js : 'O . ('O -> Ojs.t) -> 'O t_1 -> Ojs.t =
      fun (type __O) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x11045 : __O t) -> t_to_js __O_to_js x11045
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x11051 : Ojs.t) -> t_of_js any_of_js x11051
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x11049 : any t) -> t_to_js any_to_js x11049
    type 'O tags = [ `TransformStreamDefaultController of 'O ]
    type 'O tags_1 = 'O tags
    type tags_0 = any tags
    type ('tags, 'O) this =
      'tags intf constraint 'tags =
                  [> `TransformStreamDefaultController of 'O ]
    let rec this_of_js :
      'tags 'O .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'O) this
      =
      fun (type __tags) ->
        fun (type __O) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__O_of_js : Ojs.t -> __O) ->
              fun (x11055 : Ojs.t) -> intf_of_js __tags_of_js x11055
    and this_to_js :
      'tags 'O .
        ('tags -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'O) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __O) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__O_to_js : __O -> Ojs.t) ->
              fun (x11053 : __tags intf) -> intf_to_js __tags_to_js x11053
    let (get_desiredSize : ('tags, 'O) this -> float option) =
      fun (x11057 : ('tags, 'O) this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x11057)
             "desiredSize")
    let (enqueue : ('tags, 'O) this -> ?chunk:'O -> unit -> unit) =
      fun (x11064 : ('tags, 'O) this) ->
        fun ?chunk:(x11061 : 'O option) ->
          fun () ->
            ignore
              (let x11067 = this_to_js Obj.magic Obj.magic x11064 in
               Ojs.call (Ojs.get_prop_ascii x11067 "enqueue") "apply"
                 [|x11067;((let x11062 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x11061 with
                             | Some x11063 ->
                                 ignore
                                   (Ojs.call x11062 "push"
                                      [|(Obj.magic x11063)|])
                             | None -> ());
                            x11062))|])
    let (error : ('tags, 'O) this -> ?reason:any -> unit -> unit) =
      fun (x11071 : ('tags, 'O) this) ->
        fun ?reason:(x11068 : any option) ->
          fun () ->
            ignore
              (let x11074 = this_to_js Obj.magic Obj.magic x11071 in
               Ojs.call (Ojs.get_prop_ascii x11074 "error") "apply"
                 [|x11074;((let x11069 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x11068 with
                             | Some x11070 ->
                                 ignore
                                   (Ojs.call x11069 "push"
                                      [|(any_to_js x11070)|])
                             | None -> ());
                            x11069))|])
    let (terminate : ('tags, 'O) this -> unit) =
      fun (x11075 : ('tags, 'O) this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic Obj.magic x11075) "terminate" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global
                "TransformStreamDefaultController") "prototype")
    let (create : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global
                "TransformStreamDefaultController") [||])
  end
module TransformerTransformCallback =
  struct
    type ('I, 'O) t = [ `TransformerTransformCallback of ('I * 'O) ] intf
    let rec t_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t =
      fun _I -> fun _O -> Obj.magic
    and t_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t -> Ojs.t =
      fun _I -> fun _O -> Obj.magic
    type ('I, 'O) t_2 = ('I, 'O) t
    let rec t_2_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t_2 =
      fun (type __I) ->
        fun (type __O) ->
          fun (__I_of_js : Ojs.t -> __I) ->
            fun (__O_of_js : Ojs.t -> __O) ->
              fun (x11081 : Ojs.t) -> t_of_js __I_of_js __O_of_js x11081
    and t_2_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t_2 -> Ojs.t =
      fun (type __I) ->
        fun (type __O) ->
          fun (__I_to_js : __I -> Ojs.t) ->
            fun (__O_to_js : __O -> Ojs.t) ->
              fun (x11078 : (__I, __O) t) ->
                t_to_js __I_to_js __O_to_js x11078
    type ('I, 'O) tags = [ `TransformerTransformCallback of ('I * 'O) ]
    type ('I, 'O) tags_2 = ('I, 'O) tags
    type ('tags, 'I, 'O) this =
      'tags intf constraint 'tags =
                  [> `TransformerTransformCallback of ('I * 'O) ]
    let rec this_of_js :
      'tags 'I 'O .
        (Ojs.t -> 'tags) ->
          (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'I, 'O) this
      =
      fun (type __tags) ->
        fun (type __I) ->
          fun (type __O) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (__I_of_js : Ojs.t -> __I) ->
                fun (__O_of_js : Ojs.t -> __O) ->
                  fun (x11086 : Ojs.t) -> intf_of_js __tags_of_js x11086
    and this_to_js :
      'tags 'I 'O .
        ('tags -> Ojs.t) ->
          ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'I, 'O) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __I) ->
          fun (type __O) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (__I_to_js : __I -> Ojs.t) ->
                fun (__O_to_js : __O -> Ojs.t) ->
                  fun (x11084 : __tags intf) ->
                    intf_to_js __tags_to_js x11084
    let (apply :
      ('tags, 'I, 'O) this ->
        chunk:'I ->
          controller:'O TransformStreamDefaultController.t ->
            (unit, unit PromiseLike.t_1) union2)
      =
      fun (x11091 : ('tags, 'I, 'O) this) ->
        fun ~chunk:(x11088 : 'I) ->
          fun ~controller:(x11089 : 'O TransformStreamDefaultController.t) ->
            union2_of_js Ojs.unit_of_js
              (fun (x11096 : Ojs.t) ->
                 PromiseLike.t_1_of_js Ojs.unit_of_js x11096)
              (Ojs.apply (this_to_js Obj.magic Obj.magic Obj.magic x11091)
                 [|(Obj.magic x11088);(TransformStreamDefaultController.t_to_js
                                         Obj.magic x11089)|])
    let cast_from = Obj.magic
  end
module TransformerStartCallback =
  struct
    type 'O t = [ `TransformerStartCallback of 'O ] intf
    let rec t_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t =
      fun _O -> Obj.magic
    and t_to_js : 'O . ('O -> Ojs.t) -> 'O t -> Ojs.t = fun _O -> Obj.magic
    type 'O t_1 = 'O t
    let rec t_1_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t_1 =
      fun (type __O) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x11100 : Ojs.t) -> t_of_js __O_of_js x11100
    and t_1_to_js : 'O . ('O -> Ojs.t) -> 'O t_1 -> Ojs.t =
      fun (type __O) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x11098 : __O t) -> t_to_js __O_to_js x11098
    type 'O tags = [ `TransformerStartCallback of 'O ]
    type 'O tags_1 = 'O tags
    type ('tags, 'O) this =
      'tags intf constraint 'tags = [> `TransformerStartCallback of 'O ]
    let rec this_of_js :
      'tags 'O .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'O) this
      =
      fun (type __tags) ->
        fun (type __O) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__O_of_js : Ojs.t -> __O) ->
              fun (x11104 : Ojs.t) -> intf_of_js __tags_of_js x11104
    and this_to_js :
      'tags 'O .
        ('tags -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'O) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __O) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__O_to_js : __O -> Ojs.t) ->
              fun (x11102 : __tags intf) -> intf_to_js __tags_to_js x11102
    let (apply :
      ('tags, 'O) this ->
        controller:'O TransformStreamDefaultController.t -> any)
      =
      fun (x11108 : ('tags, 'O) this) ->
        fun ~controller:(x11106 : 'O TransformStreamDefaultController.t) ->
          any_of_js
            (Ojs.apply (this_to_js Obj.magic Obj.magic x11108)
               [|(TransformStreamDefaultController.t_to_js Obj.magic x11106)|])
    let cast_from = Obj.magic
  end
module TransformerFlushCallback =
  struct
    type 'O t = [ `TransformerFlushCallback of 'O ] intf
    let rec t_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t =
      fun _O -> Obj.magic
    and t_to_js : 'O . ('O -> Ojs.t) -> 'O t -> Ojs.t = fun _O -> Obj.magic
    type 'O t_1 = 'O t
    let rec t_1_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t_1 =
      fun (type __O) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x11113 : Ojs.t) -> t_of_js __O_of_js x11113
    and t_1_to_js : 'O . ('O -> Ojs.t) -> 'O t_1 -> Ojs.t =
      fun (type __O) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x11111 : __O t) -> t_to_js __O_to_js x11111
    type 'O tags = [ `TransformerFlushCallback of 'O ]
    type 'O tags_1 = 'O tags
    type ('tags, 'O) this =
      'tags intf constraint 'tags = [> `TransformerFlushCallback of 'O ]
    let rec this_of_js :
      'tags 'O .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'O) this
      =
      fun (type __tags) ->
        fun (type __O) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__O_of_js : Ojs.t -> __O) ->
              fun (x11117 : Ojs.t) -> intf_of_js __tags_of_js x11117
    and this_to_js :
      'tags 'O .
        ('tags -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'O) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __O) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__O_to_js : __O -> Ojs.t) ->
              fun (x11115 : __tags intf) -> intf_to_js __tags_to_js x11115
    let (apply :
      ('tags, 'O) this ->
        controller:'O TransformStreamDefaultController.t ->
          (unit, unit PromiseLike.t_1) union2)
      =
      fun (x11121 : ('tags, 'O) this) ->
        fun ~controller:(x11119 : 'O TransformStreamDefaultController.t) ->
          union2_of_js Ojs.unit_of_js
            (fun (x11125 : Ojs.t) ->
               PromiseLike.t_1_of_js Ojs.unit_of_js x11125)
            (Ojs.apply (this_to_js Obj.magic Obj.magic x11121)
               [|(TransformStreamDefaultController.t_to_js Obj.magic x11119)|])
    let cast_from = Obj.magic
  end
module Transformer =
  struct
    type ('I, 'O) t = [ `Transformer of ('I * 'O) ] intf
    let rec t_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t =
      fun _I -> fun _O -> Obj.magic
    and t_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t -> Ojs.t =
      fun _I -> fun _O -> Obj.magic
    type ('I, 'O) t_2 = ('I, 'O) t
    let rec t_2_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t_2 =
      fun (type __I) ->
        fun (type __O) ->
          fun (__I_of_js : Ojs.t -> __I) ->
            fun (__O_of_js : Ojs.t -> __O) ->
              fun (x11130 : Ojs.t) -> t_of_js __I_of_js __O_of_js x11130
    and t_2_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t_2 -> Ojs.t =
      fun (type __I) ->
        fun (type __O) ->
          fun (__I_to_js : __I -> Ojs.t) ->
            fun (__O_to_js : __O -> Ojs.t) ->
              fun (x11127 : (__I, __O) t) ->
                t_to_js __I_to_js __O_to_js x11127
    type 'I t_1 = ('I, any) t
    let rec t_1_of_js : 'I . (Ojs.t -> 'I) -> Ojs.t -> 'I t_1 =
      fun (type __I) ->
        fun (__I_of_js : Ojs.t -> __I) ->
          fun (x11136 : Ojs.t) -> t_of_js __I_of_js any_of_js x11136
    and t_1_to_js : 'I . ('I -> Ojs.t) -> 'I t_1 -> Ojs.t =
      fun (type __I) ->
        fun (__I_to_js : __I -> Ojs.t) ->
          fun (x11133 : (__I, any) t) -> t_to_js __I_to_js any_to_js x11133
    type t_0 = (any, any) t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x11142 : Ojs.t) -> t_of_js any_of_js any_of_js x11142
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x11139 : (any, any) t) -> t_to_js any_to_js any_to_js x11139
    type ('I, 'O) tags = [ `Transformer of ('I * 'O) ]
    type ('I, 'O) tags_2 = ('I, 'O) tags
    type 'I tags_1 = ('I, any) tags
    type tags_0 = (any, any) tags
    type ('tags, 'I, 'O) this =
      'tags intf constraint 'tags = [> `Transformer of ('I * 'O) ]
    let rec this_of_js :
      'tags 'I 'O .
        (Ojs.t -> 'tags) ->
          (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'I, 'O) this
      =
      fun (type __tags) ->
        fun (type __I) ->
          fun (type __O) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (__I_of_js : Ojs.t -> __I) ->
                fun (__O_of_js : Ojs.t -> __O) ->
                  fun (x11147 : Ojs.t) -> intf_of_js __tags_of_js x11147
    and this_to_js :
      'tags 'I 'O .
        ('tags -> Ojs.t) ->
          ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'I, 'O) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __I) ->
          fun (type __O) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (__I_to_js : __I -> Ojs.t) ->
                fun (__O_to_js : __O -> Ojs.t) ->
                  fun (x11145 : __tags intf) ->
                    intf_to_js __tags_to_js x11145
    let (get_flush :
      ('tags, 'I, 'O) this -> 'O TransformerFlushCallback.t option) =
      fun (x11149 : ('tags, 'I, 'O) this) ->
        Ojs.option_of_js
          (fun (x11153 : Ojs.t) ->
             TransformerFlushCallback.t_of_js Obj.magic x11153)
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x11149) "flush")
    let (set_flush :
      ('tags, 'I, 'O) this -> 'O TransformerFlushCallback.t -> unit) =
      fun (x11155 : ('tags, 'I, 'O) this) ->
        fun (x11156 : 'O TransformerFlushCallback.t) ->
          Ojs.set_prop_ascii
            (this_to_js Obj.magic Obj.magic Obj.magic x11155) "flush"
            (TransformerFlushCallback.t_to_js Obj.magic x11156)
    let (get_readableType : ('tags, 'I, 'O) this -> undefined) =
      fun (x11161 : ('tags, 'I, 'O) this) ->
        undefined_of_js
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x11161) "readableType")
    let (set_readableType : ('tags, 'I, 'O) this -> undefined -> unit) =
      fun (x11165 : ('tags, 'I, 'O) this) ->
        fun (x11166 : undefined) ->
          Ojs.set_prop_ascii
            (this_to_js Obj.magic Obj.magic Obj.magic x11165) "readableType"
            (undefined_to_js x11166)
    let (get_start :
      ('tags, 'I, 'O) this -> 'O TransformerStartCallback.t option) =
      fun (x11170 : ('tags, 'I, 'O) this) ->
        Ojs.option_of_js
          (fun (x11174 : Ojs.t) ->
             TransformerStartCallback.t_of_js Obj.magic x11174)
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x11170) "start")
    let (set_start :
      ('tags, 'I, 'O) this -> 'O TransformerStartCallback.t -> unit) =
      fun (x11176 : ('tags, 'I, 'O) this) ->
        fun (x11177 : 'O TransformerStartCallback.t) ->
          Ojs.set_prop_ascii
            (this_to_js Obj.magic Obj.magic Obj.magic x11176) "start"
            (TransformerStartCallback.t_to_js Obj.magic x11177)
    let (get_transform :
      ('tags, 'I, 'O) this -> ('I, 'O) TransformerTransformCallback.t option)
      =
      fun (x11182 : ('tags, 'I, 'O) this) ->
        Ojs.option_of_js
          (fun (x11186 : Ojs.t) ->
             TransformerTransformCallback.t_of_js Obj.magic Obj.magic x11186)
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x11182) "transform")
    let (set_transform :
      ('tags, 'I, 'O) this -> ('I, 'O) TransformerTransformCallback.t -> unit)
      =
      fun (x11189 : ('tags, 'I, 'O) this) ->
        fun (x11190 : ('I, 'O) TransformerTransformCallback.t) ->
          Ojs.set_prop_ascii
            (this_to_js Obj.magic Obj.magic Obj.magic x11189) "transform"
            (TransformerTransformCallback.t_to_js Obj.magic Obj.magic x11190)
    let (get_writableType : ('tags, 'I, 'O) this -> undefined) =
      fun (x11196 : ('tags, 'I, 'O) this) ->
        undefined_of_js
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x11196) "writableType")
    let (set_writableType : ('tags, 'I, 'O) this -> undefined -> unit) =
      fun (x11200 : ('tags, 'I, 'O) this) ->
        fun (x11201 : undefined) ->
          Ojs.set_prop_ascii
            (this_to_js Obj.magic Obj.magic Obj.magic x11200) "writableType"
            (undefined_to_js x11201)
    let (create :
      ?flush:'O TransformerFlushCallback.t ->
        ?readableType:never ->
          ?start:'O TransformerStartCallback.t ->
            ?transform:('I, 'O) TransformerTransformCallback.t ->
              ?writableType:never -> unit -> ('I, 'O) t)
      =
      fun ?flush:(x11205 : 'O TransformerFlushCallback.t option) ->
        fun ?readableType:(x11206 : never option) ->
          fun ?start:(x11207 : 'O TransformerStartCallback.t option) ->
            fun
              ?transform:(x11208 :
                           ('I, 'O) TransformerTransformCallback.t option)
              ->
              fun ?writableType:(x11209 : never option) ->
                fun () ->
                  let x11210 = Ojs.empty_obj () in
                  (match x11205 with
                   | Some x11220 ->
                       Ojs.set_prop_ascii x11210 "flush"
                         (TransformerFlushCallback.t_to_js Obj.magic x11220)
                   | None -> ());
                  (match x11206 with
                   | Some x11219 ->
                       Ojs.set_prop_ascii x11210 "readableType"
                         (never_to_js x11219)
                   | None -> ());
                  (match x11207 with
                   | Some x11217 ->
                       Ojs.set_prop_ascii x11210 "start"
                         (TransformerStartCallback.t_to_js Obj.magic x11217)
                   | None -> ());
                  (match x11208 with
                   | Some x11214 ->
                       Ojs.set_prop_ascii x11210 "transform"
                         (TransformerTransformCallback.t_to_js Obj.magic
                            Obj.magic x11214)
                   | None -> ());
                  (match x11209 with
                   | Some x11213 ->
                       Ojs.set_prop_ascii x11210 "writableType"
                         (never_to_js x11213)
                   | None -> ());
                  t_of_js Obj.magic Obj.magic x11210
    let cast_from = Obj.magic
  end
module TransformStream =
  struct
    type ('I, 'O) t = [ `TransformStream of ('I * 'O) ] intf
    let rec t_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t =
      fun _I -> fun _O -> Obj.magic
    and t_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t -> Ojs.t =
      fun _I -> fun _O -> Obj.magic
    type ('I, 'O) t_2 = ('I, 'O) t
    let rec t_2_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t_2 =
      fun (type __I) ->
        fun (type __O) ->
          fun (__I_of_js : Ojs.t -> __I) ->
            fun (__O_of_js : Ojs.t -> __O) ->
              fun (x11225 : Ojs.t) -> t_of_js __I_of_js __O_of_js x11225
    and t_2_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t_2 -> Ojs.t =
      fun (type __I) ->
        fun (type __O) ->
          fun (__I_to_js : __I -> Ojs.t) ->
            fun (__O_to_js : __O -> Ojs.t) ->
              fun (x11222 : (__I, __O) t) ->
                t_to_js __I_to_js __O_to_js x11222
    type 'I t_1 = ('I, any) t
    let rec t_1_of_js : 'I . (Ojs.t -> 'I) -> Ojs.t -> 'I t_1 =
      fun (type __I) ->
        fun (__I_of_js : Ojs.t -> __I) ->
          fun (x11231 : Ojs.t) -> t_of_js __I_of_js any_of_js x11231
    and t_1_to_js : 'I . ('I -> Ojs.t) -> 'I t_1 -> Ojs.t =
      fun (type __I) ->
        fun (__I_to_js : __I -> Ojs.t) ->
          fun (x11228 : (__I, any) t) -> t_to_js __I_to_js any_to_js x11228
    type t_0 = (any, any) t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x11237 : Ojs.t) -> t_of_js any_of_js any_of_js x11237
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x11234 : (any, any) t) -> t_to_js any_to_js any_to_js x11234
    type ('I, 'O) tags = [ `TransformStream of ('I * 'O) ]
    type ('I, 'O) tags_2 = ('I, 'O) tags
    type 'I tags_1 = ('I, any) tags
    type tags_0 = (any, any) tags
    type ('tags, 'I, 'O) this =
      'tags intf constraint 'tags = [> `TransformStream of ('I * 'O) ]
    let rec this_of_js :
      'tags 'I 'O .
        (Ojs.t -> 'tags) ->
          (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'I, 'O) this
      =
      fun (type __tags) ->
        fun (type __I) ->
          fun (type __O) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (__I_of_js : Ojs.t -> __I) ->
                fun (__O_of_js : Ojs.t -> __O) ->
                  fun (x11242 : Ojs.t) -> intf_of_js __tags_of_js x11242
    and this_to_js :
      'tags 'I 'O .
        ('tags -> Ojs.t) ->
          ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'I, 'O) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __I) ->
          fun (type __O) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (__I_to_js : __I -> Ojs.t) ->
                fun (__O_to_js : __O -> Ojs.t) ->
                  fun (x11240 : __tags intf) ->
                    intf_to_js __tags_to_js x11240
    let (get_readable : ('tags, 'I, 'O) this -> 'O ReadableStream.t) =
      fun (x11244 : ('tags, 'I, 'O) this) ->
        ReadableStream.t_of_js Obj.magic
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x11244) "readable")
    let (get_writable : ('tags, 'I, 'O) this -> 'I WritableStream.t) =
      fun (x11249 : ('tags, 'I, 'O) this) ->
        WritableStream.t_of_js Obj.magic
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x11249) "writable")
    let (create :
      readable:'O ReadableStream.t ->
        writable:'I WritableStream.t -> unit -> ('I, 'O) t)
      =
      fun ~readable:(x11254 : 'O ReadableStream.t) ->
        fun ~writable:(x11255 : 'I WritableStream.t) ->
          fun () ->
            let x11256 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x11256 "readable"
              (ReadableStream.t_to_js Obj.magic x11254);
            Ojs.set_prop_ascii x11256 "writable"
              (WritableStream.t_to_js Obj.magic x11255);
            t_of_js Obj.magic Obj.magic x11256
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "TransformStream") "prototype")
    let (create' :
      ?transformer:('I, 'O) Transformer.t ->
        ?writableStrategy:'I QueuingStrategy.t ->
          ?readableStrategy:'O QueuingStrategy.t -> unit -> ('I, 'O) t)
      =
      fun ?transformer:(x11261 : ('I, 'O) Transformer.t option) ->
        fun ?writableStrategy:(x11262 : 'I QueuingStrategy.t option) ->
          fun ?readableStrategy:(x11263 : 'O QueuingStrategy.t option) ->
            fun () ->
              t_of_js Obj.magic Obj.magic
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii Ojs.global "TransformStream")
                   (let x11264 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x11261 with
                     | Some x11269 ->
                         ignore
                           (Ojs.call x11264 "push"
                              [|(Transformer.t_to_js Obj.magic Obj.magic
                                   x11269)|])
                     | None -> ());
                    (match x11262 with
                     | Some x11267 ->
                         ignore
                           (Ojs.call x11264 "push"
                              [|(QueuingStrategy.t_to_js Obj.magic x11267)|])
                     | None -> ());
                    (match x11263 with
                     | Some x11265 ->
                         ignore
                           (Ojs.call x11264 "push"
                              [|(QueuingStrategy.t_to_js Obj.magic x11265)|])
                     | None -> ());
                    x11264))
  end
module TextMetrics =
  struct
    type t = [ `TextMetrics ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11275 : Ojs.t) -> t_of_js x11275
    and t_0_to_js : t_0 -> Ojs.t = fun (x11274 : t) -> t_to_js x11274
    type tags = [ `TextMetrics ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextMetrics ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11278 : Ojs.t) -> intf_of_js __tags_of_js x11278
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11276 : __tags intf) -> intf_to_js __tags_to_js x11276
    let (get_actualBoundingBoxAscent : 'tags this -> float) =
      fun (x11280 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11280)
             "actualBoundingBoxAscent")
    let (get_actualBoundingBoxDescent : 'tags this -> float) =
      fun (x11282 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11282)
             "actualBoundingBoxDescent")
    let (get_actualBoundingBoxLeft : 'tags this -> float) =
      fun (x11284 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11284)
             "actualBoundingBoxLeft")
    let (get_actualBoundingBoxRight : 'tags this -> float) =
      fun (x11286 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11286)
             "actualBoundingBoxRight")
    let (get_fontBoundingBoxAscent : 'tags this -> float) =
      fun (x11288 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11288)
             "fontBoundingBoxAscent")
    let (get_fontBoundingBoxDescent : 'tags this -> float) =
      fun (x11290 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11290)
             "fontBoundingBoxDescent")
    let (get_width : 'tags this -> float) =
      fun (x11292 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11292) "width")
    let (create :
      actualBoundingBoxAscent:float ->
        actualBoundingBoxDescent:float ->
          actualBoundingBoxLeft:float ->
            actualBoundingBoxRight:float ->
              fontBoundingBoxAscent:float ->
                fontBoundingBoxDescent:float -> width:float -> unit -> t)
      =
      fun ~actualBoundingBoxAscent:(x11294 : float) ->
        fun ~actualBoundingBoxDescent:(x11295 : float) ->
          fun ~actualBoundingBoxLeft:(x11296 : float) ->
            fun ~actualBoundingBoxRight:(x11297 : float) ->
              fun ~fontBoundingBoxAscent:(x11298 : float) ->
                fun ~fontBoundingBoxDescent:(x11299 : float) ->
                  fun ~width:(x11300 : float) ->
                    fun () ->
                      let x11301 = Ojs.empty_obj () in
                      Ojs.set_prop_ascii x11301 "actualBoundingBoxAscent"
                        (Ojs.float_to_js x11294);
                      Ojs.set_prop_ascii x11301 "actualBoundingBoxDescent"
                        (Ojs.float_to_js x11295);
                      Ojs.set_prop_ascii x11301 "actualBoundingBoxLeft"
                        (Ojs.float_to_js x11296);
                      Ojs.set_prop_ascii x11301 "actualBoundingBoxRight"
                        (Ojs.float_to_js x11297);
                      Ojs.set_prop_ascii x11301 "fontBoundingBoxAscent"
                        (Ojs.float_to_js x11298);
                      Ojs.set_prop_ascii x11301 "fontBoundingBoxDescent"
                        (Ojs.float_to_js x11299);
                      Ojs.set_prop_ascii x11301 "width"
                        (Ojs.float_to_js x11300);
                      t_of_js x11301
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "TextMetrics")
             "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "TextMetrics") [||])
  end
module TextEncoderCommon =
  struct
    type t = [ `TextEncoderCommon ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11303 : Ojs.t) -> t_of_js x11303
    and t_0_to_js : t_0 -> Ojs.t = fun (x11302 : t) -> t_to_js x11302
    type tags = [ `TextEncoderCommon ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextEncoderCommon ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11306 : Ojs.t) -> intf_of_js __tags_of_js x11306
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11304 : __tags intf) -> intf_to_js __tags_to_js x11304
    let (get_encoding : 'tags this -> string) =
      fun (x11308 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11308) "encoding")
    let (create : encoding:string -> unit -> t) =
      fun ~encoding:(x11310 : string) ->
        fun () ->
          let x11311 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x11311 "encoding" (Ojs.string_to_js x11310);
          t_of_js x11311
    let cast_from = Obj.magic
  end
module GenericTransformStream =
  struct
    type t = [ `GenericTransformStream ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11313 : Ojs.t) -> t_of_js x11313
    and t_0_to_js : t_0 -> Ojs.t = fun (x11312 : t) -> t_to_js x11312
    type tags = [ `GenericTransformStream ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `GenericTransformStream ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11316 : Ojs.t) -> intf_of_js __tags_of_js x11316
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11314 : __tags intf) -> intf_to_js __tags_to_js x11314
    let (get_readable : 'tags this -> ReadableStream.t_0) =
      fun (x11318 : 'tags this) ->
        ReadableStream.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11318) "readable")
    let (get_writable : 'tags this -> WritableStream.t_0) =
      fun (x11320 : 'tags this) ->
        WritableStream.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11320) "writable")
    let (create :
      readable:ReadableStream.t_0 -> writable:WritableStream.t_0 -> unit -> t)
      =
      fun ~readable:(x11322 : ReadableStream.t_0) ->
        fun ~writable:(x11323 : WritableStream.t_0) ->
          fun () ->
            let x11324 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x11324 "readable"
              (ReadableStream.t_0_to_js x11322);
            Ojs.set_prop_ascii x11324 "writable"
              (WritableStream.t_0_to_js x11323);
            t_of_js x11324
    let cast_from = Obj.magic
  end
module TextEncoderStream =
  struct
    type t =
      [ `GenericTransformStream  | `TextEncoderCommon  | `TextEncoderStream ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11326 : Ojs.t) -> t_of_js x11326
    and t_0_to_js : t_0 -> Ojs.t = fun (x11325 : t) -> t_to_js x11325
    type tags =
      [ `GenericTransformStream  | `TextEncoderCommon  | `TextEncoderStream ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextEncoderStream ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11329 : Ojs.t) -> intf_of_js __tags_of_js x11329
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11327 : __tags intf) -> intf_to_js __tags_to_js x11327
    let (get_readable : 'tags this -> Uint8Array.t_0 ReadableStream.t) =
      fun (x11331 : 'tags this) ->
        ReadableStream.t_of_js Uint8Array.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11331) "readable")
    let (get_writable : 'tags this -> string WritableStream.t) =
      fun (x11334 : 'tags this) ->
        WritableStream.t_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11334) "writable")
    let (create :
      readable:Uint8Array.t_0 ReadableStream.t ->
        writable:string WritableStream.t -> unit -> t)
      =
      fun ~readable:(x11337 : Uint8Array.t_0 ReadableStream.t) ->
        fun ~writable:(x11338 : string WritableStream.t) ->
          fun () ->
            let x11339 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x11339 "readable"
              (ReadableStream.t_to_js Uint8Array.t_0_to_js x11337);
            Ojs.set_prop_ascii x11339 "writable"
              (WritableStream.t_to_js Ojs.string_to_js x11338);
            t_of_js x11339
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "TextEncoderStream") "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "TextEncoderStream")
             [||])
  end
module TextEncoderEncodeIntoResult =
  struct
    type t = [ `TextEncoderEncodeIntoResult ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11343 : Ojs.t) -> t_of_js x11343
    and t_0_to_js : t_0 -> Ojs.t = fun (x11342 : t) -> t_to_js x11342
    type tags = [ `TextEncoderEncodeIntoResult ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `TextEncoderEncodeIntoResult ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11346 : Ojs.t) -> intf_of_js __tags_of_js x11346
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11344 : __tags intf) -> intf_to_js __tags_to_js x11344
    let (get_read : 'tags this -> float option) =
      fun (x11348 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11348) "read")
    let (set_read : 'tags this -> float -> unit) =
      fun (x11351 : 'tags this) ->
        fun (x11352 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11351) "read"
            (Ojs.float_to_js x11352)
    let (get_written : 'tags this -> float option) =
      fun (x11354 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11354) "written")
    let (set_written : 'tags this -> float -> unit) =
      fun (x11357 : 'tags this) ->
        fun (x11358 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11357) "written"
            (Ojs.float_to_js x11358)
    let (create : ?read:float -> ?written:float -> unit -> t) =
      fun ?read:(x11360 : float option) ->
        fun ?written:(x11361 : float option) ->
          fun () ->
            let x11362 = Ojs.empty_obj () in
            (match x11360 with
             | Some x11364 ->
                 Ojs.set_prop_ascii x11362 "read" (Ojs.float_to_js x11364)
             | None -> ());
            (match x11361 with
             | Some x11363 ->
                 Ojs.set_prop_ascii x11362 "written" (Ojs.float_to_js x11363)
             | None -> ());
            t_of_js x11362
    let cast_from = Obj.magic
  end
module TextEncoder =
  struct
    type t = [ `TextEncoder  | `TextEncoderCommon ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11366 : Ojs.t) -> t_of_js x11366
    and t_0_to_js : t_0 -> Ojs.t = fun (x11365 : t) -> t_to_js x11365
    type tags = [ `TextEncoder  | `TextEncoderCommon ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextEncoder ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11369 : Ojs.t) -> intf_of_js __tags_of_js x11369
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11367 : __tags intf) -> intf_to_js __tags_to_js x11367
    let (encode : 'tags this -> ?input:string -> unit -> Uint8Array.t_0) =
      fun (x11374 : 'tags this) ->
        fun ?input:(x11371 : string option) ->
          fun () ->
            Uint8Array.t_0_of_js
              (let x11376 = this_to_js Obj.magic x11374 in
               Ojs.call (Ojs.get_prop_ascii x11376 "encode") "apply"
                 [|x11376;((let x11372 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x11371 with
                             | Some x11373 ->
                                 ignore
                                   (Ojs.call x11372 "push"
                                      [|(Ojs.string_to_js x11373)|])
                             | None -> ());
                            x11372))|])
    let (encodeInto :
      'tags this ->
        source:string ->
          destination:Uint8Array.t_0 -> TextEncoderEncodeIntoResult.t)
      =
      fun (x11379 : 'tags this) ->
        fun ~source:(x11377 : string) ->
          fun ~destination:(x11378 : Uint8Array.t_0) ->
            TextEncoderEncodeIntoResult.t_of_js
              (Ojs.call (this_to_js Obj.magic x11379) "encodeInto"
                 [|(Ojs.string_to_js x11377);(Uint8Array.t_0_to_js x11378)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "TextEncoder")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "TextEncoder") [||])
  end
module TextDecoderOptions =
  struct
    type t = [ `TextDecoderOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11382 : Ojs.t) -> t_of_js x11382
    and t_0_to_js : t_0 -> Ojs.t = fun (x11381 : t) -> t_to_js x11381
    type tags = [ `TextDecoderOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecoderOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11385 : Ojs.t) -> intf_of_js __tags_of_js x11385
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11383 : __tags intf) -> intf_to_js __tags_to_js x11383
    let (get_fatal : 'tags this -> bool option) =
      fun (x11387 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11387) "fatal")
    let (set_fatal : 'tags this -> bool -> unit) =
      fun (x11390 : 'tags this) ->
        fun (x11391 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11390) "fatal"
            (Ojs.bool_to_js x11391)
    let (get_ignoreBOM : 'tags this -> bool option) =
      fun (x11393 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11393) "ignoreBOM")
    let (set_ignoreBOM : 'tags this -> bool -> unit) =
      fun (x11396 : 'tags this) ->
        fun (x11397 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11396) "ignoreBOM"
            (Ojs.bool_to_js x11397)
    let (create : ?fatal:bool -> ?ignoreBOM:bool -> unit -> t) =
      fun ?fatal:(x11399 : bool option) ->
        fun ?ignoreBOM:(x11400 : bool option) ->
          fun () ->
            let x11401 = Ojs.empty_obj () in
            (match x11399 with
             | Some x11403 ->
                 Ojs.set_prop_ascii x11401 "fatal" (Ojs.bool_to_js x11403)
             | None -> ());
            (match x11400 with
             | Some x11402 ->
                 Ojs.set_prop_ascii x11401 "ignoreBOM"
                   (Ojs.bool_to_js x11402)
             | None -> ());
            t_of_js x11401
    let cast_from = Obj.magic
  end
module TextDecoderCommon =
  struct
    type t = [ `TextDecoderCommon ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11405 : Ojs.t) -> t_of_js x11405
    and t_0_to_js : t_0 -> Ojs.t = fun (x11404 : t) -> t_to_js x11404
    type tags = [ `TextDecoderCommon ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecoderCommon ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11408 : Ojs.t) -> intf_of_js __tags_of_js x11408
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11406 : __tags intf) -> intf_to_js __tags_to_js x11406
    let (get_encoding : 'tags this -> string) =
      fun (x11410 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11410) "encoding")
    let (get_fatal : 'tags this -> bool) =
      fun (x11412 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11412) "fatal")
    let (get_ignoreBOM : 'tags this -> bool) =
      fun (x11414 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11414) "ignoreBOM")
    let (create :
      encoding:string -> fatal:bool -> ignoreBOM:bool -> unit -> t) =
      fun ~encoding:(x11416 : string) ->
        fun ~fatal:(x11417 : bool) ->
          fun ~ignoreBOM:(x11418 : bool) ->
            fun () ->
              let x11419 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x11419 "encoding" (Ojs.string_to_js x11416);
              Ojs.set_prop_ascii x11419 "fatal" (Ojs.bool_to_js x11417);
              Ojs.set_prop_ascii x11419 "ignoreBOM" (Ojs.bool_to_js x11418);
              t_of_js x11419
    let cast_from = Obj.magic
  end
module TextDecoderStream =
  struct
    type t =
      [ `GenericTransformStream  | `TextDecoderCommon  | `TextDecoderStream ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11421 : Ojs.t) -> t_of_js x11421
    and t_0_to_js : t_0 -> Ojs.t = fun (x11420 : t) -> t_to_js x11420
    type tags =
      [ `GenericTransformStream  | `TextDecoderCommon  | `TextDecoderStream ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecoderStream ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11424 : Ojs.t) -> intf_of_js __tags_of_js x11424
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11422 : __tags intf) -> intf_to_js __tags_to_js x11422
    let (get_readable : 'tags this -> string ReadableStream.t) =
      fun (x11426 : 'tags this) ->
        ReadableStream.t_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11426) "readable")
    let (get_writable : 'tags this -> BufferSource.t WritableStream.t) =
      fun (x11429 : 'tags this) ->
        WritableStream.t_of_js BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11429) "writable")
    let (create :
      readable:string ReadableStream.t ->
        writable:BufferSource.t WritableStream.t -> unit -> t)
      =
      fun ~readable:(x11432 : string ReadableStream.t) ->
        fun ~writable:(x11433 : BufferSource.t WritableStream.t) ->
          fun () ->
            let x11434 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x11434 "readable"
              (ReadableStream.t_to_js Ojs.string_to_js x11432);
            Ojs.set_prop_ascii x11434 "writable"
              (WritableStream.t_to_js BufferSource.t_to_js x11433);
            t_of_js x11434
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "TextDecoderStream") "prototype")
    let (create' :
      ?label:string -> ?options:TextDecoderOptions.t -> unit -> t) =
      fun ?label:(x11437 : string option) ->
        fun ?options:(x11438 : TextDecoderOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "TextDecoderStream")
                 (let x11439 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x11437 with
                   | Some x11441 ->
                       ignore
                         (Ojs.call x11439 "push"
                            [|(Ojs.string_to_js x11441)|])
                   | None -> ());
                  (match x11438 with
                   | Some x11440 ->
                       ignore
                         (Ojs.call x11439 "push"
                            [|(TextDecoderOptions.t_to_js x11440)|])
                   | None -> ());
                  x11439))
  end
module TextDecodeOptions =
  struct
    type t = [ `TextDecodeOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11443 : Ojs.t) -> t_of_js x11443
    and t_0_to_js : t_0 -> Ojs.t = fun (x11442 : t) -> t_to_js x11442
    type tags = [ `TextDecodeOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecodeOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11446 : Ojs.t) -> intf_of_js __tags_of_js x11446
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11444 : __tags intf) -> intf_to_js __tags_to_js x11444
    let (get_stream : 'tags this -> bool option) =
      fun (x11448 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11448) "stream")
    let (set_stream : 'tags this -> bool -> unit) =
      fun (x11451 : 'tags this) ->
        fun (x11452 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11451) "stream"
            (Ojs.bool_to_js x11452)
    let (create : ?stream:bool -> unit -> t) =
      fun ?stream:(x11454 : bool option) ->
        fun () ->
          let x11455 = Ojs.empty_obj () in
          (match x11454 with
           | Some x11456 ->
               Ojs.set_prop_ascii x11455 "stream" (Ojs.bool_to_js x11456)
           | None -> ());
          t_of_js x11455
    let cast_from = Obj.magic
  end
module TextDecoder =
  struct
    type t = [ `TextDecoder  | `TextDecoderCommon ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11458 : Ojs.t) -> t_of_js x11458
    and t_0_to_js : t_0 -> Ojs.t = fun (x11457 : t) -> t_to_js x11457
    type tags = [ `TextDecoder  | `TextDecoderCommon ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecoder ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11461 : Ojs.t) -> intf_of_js __tags_of_js x11461
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11459 : __tags intf) -> intf_to_js __tags_to_js x11459
    let (decode :
      'tags this ->
        ?input:BufferSource.t ->
          ?options:TextDecodeOptions.t -> unit -> string)
      =
      fun (x11468 : 'tags this) ->
        fun ?input:(x11463 : BufferSource.t option) ->
          fun ?options:(x11464 : TextDecodeOptions.t option) ->
            fun () ->
              Ojs.string_of_js
                (let x11470 = this_to_js Obj.magic x11468 in
                 Ojs.call (Ojs.get_prop_ascii x11470 "decode") "apply"
                   [|x11470;((let x11465 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x11463 with
                               | Some x11467 ->
                                   ignore
                                     (Ojs.call x11465 "push"
                                        [|(BufferSource.t_to_js x11467)|])
                               | None -> ());
                              (match x11464 with
                               | Some x11466 ->
                                   ignore
                                     (Ojs.call x11465 "push"
                                        [|(TextDecodeOptions.t_to_js x11466)|])
                               | None -> ());
                              x11465))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "TextDecoder")
             "prototype")
    let (create :
      ?label:string -> ?options:TextDecoderOptions.t -> unit -> t) =
      fun ?label:(x11471 : string option) ->
        fun ?options:(x11472 : TextDecoderOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "TextDecoder")
                 (let x11473 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x11471 with
                   | Some x11475 ->
                       ignore
                         (Ojs.call x11473 "push"
                            [|(Ojs.string_to_js x11475)|])
                   | None -> ());
                  (match x11472 with
                   | Some x11474 ->
                       ignore
                         (Ojs.call x11473 "push"
                            [|(TextDecoderOptions.t_to_js x11474)|])
                   | None -> ());
                  x11473))
  end
module PromiseRejectionEventInit =
  struct
    type t = [ `EventInit  | `PromiseRejectionEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11477 : Ojs.t) -> t_of_js x11477
    and t_0_to_js : t_0 -> Ojs.t = fun (x11476 : t) -> t_to_js x11476
    type tags = [ `EventInit  | `PromiseRejectionEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PromiseRejectionEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11480 : Ojs.t) -> intf_of_js __tags_of_js x11480
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11478 : __tags intf) -> intf_to_js __tags_to_js x11478
    let (get_promise : 'tags this -> any Promise.t_1) =
      fun (x11482 : 'tags this) ->
        Promise.t_1_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11482) "promise")
    let (set_promise : 'tags this -> any Promise.t_1 -> unit) =
      fun (x11485 : 'tags this) ->
        fun (x11486 : any Promise.t_1) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11485) "promise"
            (Promise.t_1_to_js any_to_js x11486)
    let (get_reason : 'tags this -> any option) =
      fun (x11489 : 'tags this) ->
        Ojs.option_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11489) "reason")
    let (set_reason : 'tags this -> any -> unit) =
      fun (x11492 : 'tags this) ->
        fun (x11493 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11492) "reason"
            (any_to_js x11493)
    let (create : promise:any Promise.t_1 -> ?reason:any -> unit -> t) =
      fun ~promise:(x11495 : any Promise.t_1) ->
        fun ?reason:(x11496 : any option) ->
          fun () ->
            let x11497 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x11497 "promise"
              (Promise.t_1_to_js any_to_js x11495);
            (match x11496 with
             | Some x11498 ->
                 Ojs.set_prop_ascii x11497 "reason" (any_to_js x11498)
             | None -> ());
            t_of_js x11497
    let cast_from = Obj.magic
  end
module PromiseRejectionEvent =
  struct
    type t = [ `Event  | `PromiseRejectionEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11501 : Ojs.t) -> t_of_js x11501
    and t_0_to_js : t_0 -> Ojs.t = fun (x11500 : t) -> t_to_js x11500
    type tags = [ `Event  | `PromiseRejectionEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PromiseRejectionEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11504 : Ojs.t) -> intf_of_js __tags_of_js x11504
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11502 : __tags intf) -> intf_to_js __tags_to_js x11502
    let (get_promise : 'tags this -> any Promise.t_1) =
      fun (x11506 : 'tags this) ->
        Promise.t_1_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11506) "promise")
    let (get_reason : 'tags this -> any) =
      fun (x11509 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x11509) "reason")
    let (create : promise:any Promise.t_1 -> reason:any -> unit -> t) =
      fun ~promise:(x11511 : any Promise.t_1) ->
        fun ~reason:(x11512 : any) ->
          fun () ->
            let x11513 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x11513 "promise"
              (Promise.t_1_to_js any_to_js x11511);
            Ojs.set_prop_ascii x11513 "reason" (any_to_js x11512);
            t_of_js x11513
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PromiseRejectionEvent")
             "prototype")
    let (create' :
      type_:string -> eventInitDict:PromiseRejectionEventInit.t -> t) =
      fun ~type_:(x11515 : string) ->
        fun ~eventInitDict:(x11516 : PromiseRejectionEventInit.t) ->
          t_of_js
            (Ojs.new_obj
               (Ojs.get_prop_ascii Ojs.global "PromiseRejectionEvent")
               [|(Ojs.string_to_js x11515);(PromiseRejectionEventInit.t_to_js
                                              x11516)|])
  end
module WorkerGlobalScopeEventMap =
  struct
    type t = [ `WorkerGlobalScopeEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11518 : Ojs.t) -> t_of_js x11518
    and t_0_to_js : t_0 -> Ojs.t = fun (x11517 : t) -> t_to_js x11517
    type tags = [ `WorkerGlobalScopeEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WorkerGlobalScopeEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11521 : Ojs.t) -> intf_of_js __tags_of_js x11521
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11519 : __tags intf) -> intf_to_js __tags_to_js x11519
    let (get_error : 'tags this -> ErrorEvent.t) =
      fun (x11523 : 'tags this) ->
        ErrorEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11523) "error")
    let (set_error : 'tags this -> ErrorEvent.t -> unit) =
      fun (x11525 : 'tags this) ->
        fun (x11526 : ErrorEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11525) "error"
            (ErrorEvent.t_to_js x11526)
    let (get_languagechange : 'tags this -> Event.t) =
      fun (x11528 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11528) "languagechange")
    let (set_languagechange : 'tags this -> Event.t -> unit) =
      fun (x11530 : 'tags this) ->
        fun (x11531 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11530) "languagechange"
            (Event.t_to_js x11531)
    let (get_offline : 'tags this -> Event.t) =
      fun (x11533 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11533) "offline")
    let (set_offline : 'tags this -> Event.t -> unit) =
      fun (x11535 : 'tags this) ->
        fun (x11536 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11535) "offline"
            (Event.t_to_js x11536)
    let (get_online : 'tags this -> Event.t) =
      fun (x11538 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11538) "online")
    let (set_online : 'tags this -> Event.t -> unit) =
      fun (x11540 : 'tags this) ->
        fun (x11541 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11540) "online"
            (Event.t_to_js x11541)
    let (get_rejectionhandled : 'tags this -> PromiseRejectionEvent.t) =
      fun (x11543 : 'tags this) ->
        PromiseRejectionEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11543)
             "rejectionhandled")
    let (set_rejectionhandled :
      'tags this -> PromiseRejectionEvent.t -> unit) =
      fun (x11545 : 'tags this) ->
        fun (x11546 : PromiseRejectionEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11545) "rejectionhandled"
            (PromiseRejectionEvent.t_to_js x11546)
    let (get_unhandledrejection : 'tags this -> PromiseRejectionEvent.t) =
      fun (x11548 : 'tags this) ->
        PromiseRejectionEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11548)
             "unhandledrejection")
    let (set_unhandledrejection :
      'tags this -> PromiseRejectionEvent.t -> unit) =
      fun (x11550 : 'tags this) ->
        fun (x11551 : PromiseRejectionEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11550)
            "unhandledrejection" (PromiseRejectionEvent.t_to_js x11551)
    let (create :
      error:ErrorEvent.t ->
        languagechange:Event.t ->
          offline:Event.t ->
            online:Event.t ->
              rejectionhandled:PromiseRejectionEvent.t ->
                unhandledrejection:PromiseRejectionEvent.t -> unit -> t)
      =
      fun ~error:(x11553 : ErrorEvent.t) ->
        fun ~languagechange:(x11554 : Event.t) ->
          fun ~offline:(x11555 : Event.t) ->
            fun ~online:(x11556 : Event.t) ->
              fun ~rejectionhandled:(x11557 : PromiseRejectionEvent.t) ->
                fun ~unhandledrejection:(x11558 : PromiseRejectionEvent.t) ->
                  fun () ->
                    let x11559 = Ojs.empty_obj () in
                    Ojs.set_prop_ascii x11559 "error"
                      (ErrorEvent.t_to_js x11553);
                    Ojs.set_prop_ascii x11559 "languagechange"
                      (Event.t_to_js x11554);
                    Ojs.set_prop_ascii x11559 "offline"
                      (Event.t_to_js x11555);
                    Ojs.set_prop_ascii x11559 "online" (Event.t_to_js x11556);
                    Ojs.set_prop_ascii x11559 "rejectionhandled"
                      (PromiseRejectionEvent.t_to_js x11557);
                    Ojs.set_prop_ascii x11559 "unhandledrejection"
                      (PromiseRejectionEvent.t_to_js x11558);
                    t_of_js x11559
    let cast_from = Obj.magic
  end
module SharedWorkerGlobalScopeEventMap =
  struct
    type t =
      [ `SharedWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11561 : Ojs.t) -> t_of_js x11561
    and t_0_to_js : t_0 -> Ojs.t = fun (x11560 : t) -> t_to_js x11560
    type tags =
      [ `SharedWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `SharedWorkerGlobalScopeEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11564 : Ojs.t) -> intf_of_js __tags_of_js x11564
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11562 : __tags intf) -> intf_to_js __tags_to_js x11562
    let (get_connect : 'tags this -> MessageEvent.t_0) =
      fun (x11566 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11566) "connect")
    let (set_connect : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x11568 : 'tags this) ->
        fun (x11569 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11568) "connect"
            (MessageEvent.t_0_to_js x11569)
    let (create : connect:MessageEvent.t_0 -> unit -> t) =
      fun ~connect:(x11571 : MessageEvent.t_0) ->
        fun () ->
          let x11572 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x11572 "connect" (MessageEvent.t_0_to_js x11571);
          t_of_js x11572
    let cast_from = Obj.magic
  end
module WorkerNavigator =
  struct
    type t =
      [ `NavigatorConcurrentHardware  | `NavigatorID  | `NavigatorLanguage 
      | `NavigatorNetworkInformation  | `NavigatorOnLine 
      | `NavigatorStorage  | `WorkerNavigator ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11574 : Ojs.t) -> t_of_js x11574
    and t_0_to_js : t_0 -> Ojs.t = fun (x11573 : t) -> t_to_js x11573
    type tags =
      [ `NavigatorConcurrentHardware  | `NavigatorID  | `NavigatorLanguage 
      | `NavigatorNetworkInformation  | `NavigatorOnLine 
      | `NavigatorStorage  | `WorkerNavigator ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerNavigator ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11577 : Ojs.t) -> intf_of_js __tags_of_js x11577
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11575 : __tags intf) -> intf_to_js __tags_to_js x11575
    let (get_mediaCapabilities : 'tags this -> MediaCapabilities.t) =
      fun (x11579 : 'tags this) ->
        MediaCapabilities.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11579)
             "mediaCapabilities")
    let (create : mediaCapabilities:MediaCapabilities.t -> unit -> t) =
      fun ~mediaCapabilities:(x11581 : MediaCapabilities.t) ->
        fun () ->
          let x11582 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x11582 "mediaCapabilities"
            (MediaCapabilities.t_to_js x11581);
          t_of_js x11582
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WorkerNavigator") "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WorkerNavigator") [||])
  end
module WorkerLocation =
  struct
    type t = [ `WorkerLocation ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11584 : Ojs.t) -> t_of_js x11584
    and t_0_to_js : t_0 -> Ojs.t = fun (x11583 : t) -> t_to_js x11583
    type tags = [ `WorkerLocation ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerLocation ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11587 : Ojs.t) -> intf_of_js __tags_of_js x11587
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11585 : __tags intf) -> intf_to_js __tags_to_js x11585
    let (get_hash : 'tags this -> string) =
      fun (x11589 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11589) "hash")
    let (get_host : 'tags this -> string) =
      fun (x11591 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11591) "host")
    let (get_hostname : 'tags this -> string) =
      fun (x11593 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11593) "hostname")
    let (get_href : 'tags this -> string) =
      fun (x11595 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11595) "href")
    let (toString : 'tags this -> string) =
      fun (x11597 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x11597) "toString" [||])
    let (get_origin : 'tags this -> string) =
      fun (x11599 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11599) "origin")
    let (get_pathname : 'tags this -> string) =
      fun (x11601 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11601) "pathname")
    let (get_port : 'tags this -> string) =
      fun (x11603 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11603) "port")
    let (get_protocol : 'tags this -> string) =
      fun (x11605 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11605) "protocol")
    let (get_search : 'tags this -> string) =
      fun (x11607 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11607) "search")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WorkerLocation") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WorkerLocation") [||])
  end
module VoidFunction =
  struct
    type t = [ `VoidFunction ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11610 : Ojs.t) -> t_of_js x11610
    and t_0_to_js : t_0 -> Ojs.t = fun (x11609 : t) -> t_to_js x11609
    type tags = [ `VoidFunction ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `VoidFunction ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11613 : Ojs.t) -> intf_of_js __tags_of_js x11613
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11611 : __tags intf) -> intf_to_js __tags_to_js x11611
    let (apply : 'tags this -> unit) =
      fun (x11615 : 'tags this) ->
        ignore (Ojs.apply (this_to_js Obj.magic x11615) [||])
    let cast_from = Obj.magic
  end
module TimerHandler =
  struct
    type t = [ `String of string  | `Other of untyped_function ] Primitive.t
    let rec t_of_js : Ojs.t -> t =
      fun (x11621 : Ojs.t) ->
        Primitive.t_of_js
          (fun (x11622 : Ojs.t) ->
             let x11623 = x11622 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x11623 "dummy") with
             | "String" -> `String (Ojs.string_of_js x11623)
             | "Other" -> `Other (untyped_function_of_js x11623)
             | _ -> assert false) x11621
    and t_to_js : t -> Ojs.t =
      fun
        (x11617 :
          [ `String of string  | `Other of untyped_function ] Primitive.t)
        ->
        Primitive.t_to_js
          (fun (x11618 : [ `String of string  | `Other of untyped_function ])
             ->
             match x11618 with
             | `String x11619 -> Ojs.string_to_js x11619
             | `Other x11620 -> untyped_function_to_js x11620) x11617
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11625 : Ojs.t) -> t_of_js x11625
    and t_0_to_js : t_0 -> Ojs.t = fun (x11624 : t) -> t_to_js x11624
  end
module CanvasImageSource =
  struct
    type t = (ImageBitmap.t, OffscreenCanvas.t) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x11629 : Ojs.t) ->
        union2_of_js ImageBitmap.t_of_js OffscreenCanvas.t_of_js x11629
    and t_to_js : t -> Ojs.t =
      fun (x11626 : (ImageBitmap.t, OffscreenCanvas.t) union2) ->
        union2_to_js ImageBitmap.t_to_js OffscreenCanvas.t_to_js x11626
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11633 : Ojs.t) -> t_of_js x11633
    and t_0_to_js : t_0 -> Ojs.t = fun (x11632 : t) -> t_to_js x11632
  end
module ImageBitmapSource =
  struct
    type t = (Blob.t, CanvasImageSource.t, ImageData.t) union3
    let rec t_of_js : Ojs.t -> t =
      fun (x11638 : Ojs.t) ->
        union3_of_js Blob.t_of_js CanvasImageSource.t_of_js ImageData.t_of_js
          x11638
    and t_to_js : t -> Ojs.t =
      fun (x11634 : (Blob.t, CanvasImageSource.t, ImageData.t) union3) ->
        union3_to_js Blob.t_to_js CanvasImageSource.t_to_js ImageData.t_to_js
          x11634
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11643 : Ojs.t) -> t_of_js x11643
    and t_0_to_js : t_0 -> Ojs.t = fun (x11642 : t) -> t_to_js x11642
  end
module ResizeQuality =
  struct
    type t =
      [ `L_s108_low  | `L_s114_medium  | `L_s151_pixelated  | `L_s86_high ]
    let rec t_of_js : Ojs.t -> t =
      fun (x11645 : Ojs.t) ->
        let x11646 = x11645 in
        match Ojs.string_of_js x11646 with
        | "low" -> `L_s108_low
        | "medium" -> `L_s114_medium
        | "pixelated" -> `L_s151_pixelated
        | "high" -> `L_s86_high
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x11644 :
          [ `L_s108_low  | `L_s114_medium  | `L_s151_pixelated 
          | `L_s86_high ])
        ->
        match x11644 with
        | `L_s108_low -> Ojs.string_to_js "low"
        | `L_s114_medium -> Ojs.string_to_js "medium"
        | `L_s151_pixelated -> Ojs.string_to_js "pixelated"
        | `L_s86_high -> Ojs.string_to_js "high"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11648 : Ojs.t) -> t_of_js x11648
    and t_0_to_js : t_0 -> Ojs.t = fun (x11647 : t) -> t_to_js x11647
  end
module PremultiplyAlpha =
  struct
    type t = [ `L_s130_none  | `L_s154_premultiply  | `L_s57_default ]
    let rec t_of_js : Ojs.t -> t =
      fun (x11650 : Ojs.t) ->
        let x11651 = x11650 in
        match Ojs.string_of_js x11651 with
        | "none" -> `L_s130_none
        | "premultiply" -> `L_s154_premultiply
        | "default" -> `L_s57_default
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x11649 : [ `L_s130_none  | `L_s154_premultiply  | `L_s57_default ])
        ->
        match x11649 with
        | `L_s130_none -> Ojs.string_to_js "none"
        | `L_s154_premultiply -> Ojs.string_to_js "premultiply"
        | `L_s57_default -> Ojs.string_to_js "default"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11653 : Ojs.t) -> t_of_js x11653
    and t_0_to_js : t_0 -> Ojs.t = fun (x11652 : t) -> t_to_js x11652
  end
module ImageOrientation =
  struct
    type t = [ `L_s130_none  | `L_s76_flipY ]
    let rec t_of_js : Ojs.t -> t =
      fun (x11655 : Ojs.t) ->
        let x11656 = x11655 in
        match Ojs.string_of_js x11656 with
        | "none" -> `L_s130_none
        | "flipY" -> `L_s76_flipY
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x11654 : [ `L_s130_none  | `L_s76_flipY ]) ->
        match x11654 with
        | `L_s130_none -> Ojs.string_to_js "none"
        | `L_s76_flipY -> Ojs.string_to_js "flipY"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11658 : Ojs.t) -> t_of_js x11658
    and t_0_to_js : t_0 -> Ojs.t = fun (x11657 : t) -> t_to_js x11657
  end
module ColorSpaceConversion =
  struct
    type t = [ `L_s130_none  | `L_s57_default ]
    let rec t_of_js : Ojs.t -> t =
      fun (x11660 : Ojs.t) ->
        let x11661 = x11660 in
        match Ojs.string_of_js x11661 with
        | "none" -> `L_s130_none
        | "default" -> `L_s57_default
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x11659 : [ `L_s130_none  | `L_s57_default ]) ->
        match x11659 with
        | `L_s130_none -> Ojs.string_to_js "none"
        | `L_s57_default -> Ojs.string_to_js "default"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11663 : Ojs.t) -> t_of_js x11663
    and t_0_to_js : t_0 -> Ojs.t = fun (x11662 : t) -> t_to_js x11662
  end
module ImageBitmapOptions =
  struct
    type t = [ `ImageBitmapOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11665 : Ojs.t) -> t_of_js x11665
    and t_0_to_js : t_0 -> Ojs.t = fun (x11664 : t) -> t_to_js x11664
    type tags = [ `ImageBitmapOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImageBitmapOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11668 : Ojs.t) -> intf_of_js __tags_of_js x11668
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11666 : __tags intf) -> intf_to_js __tags_to_js x11666
    let (get_colorSpaceConversion :
      'tags this -> ColorSpaceConversion.t option) =
      fun (x11670 : 'tags this) ->
        Ojs.option_of_js ColorSpaceConversion.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11670)
             "colorSpaceConversion")
    let (set_colorSpaceConversion :
      'tags this -> ColorSpaceConversion.t -> unit) =
      fun (x11673 : 'tags this) ->
        fun (x11674 : ColorSpaceConversion.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11673)
            "colorSpaceConversion" (ColorSpaceConversion.t_to_js x11674)
    let (get_imageOrientation : 'tags this -> ImageOrientation.t option) =
      fun (x11676 : 'tags this) ->
        Ojs.option_of_js ImageOrientation.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11676)
             "imageOrientation")
    let (set_imageOrientation : 'tags this -> ImageOrientation.t -> unit) =
      fun (x11679 : 'tags this) ->
        fun (x11680 : ImageOrientation.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11679) "imageOrientation"
            (ImageOrientation.t_to_js x11680)
    let (get_premultiplyAlpha : 'tags this -> PremultiplyAlpha.t option) =
      fun (x11682 : 'tags this) ->
        Ojs.option_of_js PremultiplyAlpha.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11682)
             "premultiplyAlpha")
    let (set_premultiplyAlpha : 'tags this -> PremultiplyAlpha.t -> unit) =
      fun (x11685 : 'tags this) ->
        fun (x11686 : PremultiplyAlpha.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11685) "premultiplyAlpha"
            (PremultiplyAlpha.t_to_js x11686)
    let (get_resizeHeight : 'tags this -> float option) =
      fun (x11688 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11688) "resizeHeight")
    let (set_resizeHeight : 'tags this -> float -> unit) =
      fun (x11691 : 'tags this) ->
        fun (x11692 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11691) "resizeHeight"
            (Ojs.float_to_js x11692)
    let (get_resizeQuality : 'tags this -> ResizeQuality.t option) =
      fun (x11694 : 'tags this) ->
        Ojs.option_of_js ResizeQuality.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11694) "resizeQuality")
    let (set_resizeQuality : 'tags this -> ResizeQuality.t -> unit) =
      fun (x11697 : 'tags this) ->
        fun (x11698 : ResizeQuality.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11697) "resizeQuality"
            (ResizeQuality.t_to_js x11698)
    let (get_resizeWidth : 'tags this -> float option) =
      fun (x11700 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11700) "resizeWidth")
    let (set_resizeWidth : 'tags this -> float -> unit) =
      fun (x11703 : 'tags this) ->
        fun (x11704 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11703) "resizeWidth"
            (Ojs.float_to_js x11704)
    let (create :
      ?colorSpaceConversion:ColorSpaceConversion.t ->
        ?imageOrientation:ImageOrientation.t ->
          ?premultiplyAlpha:PremultiplyAlpha.t ->
            ?resizeHeight:float ->
              ?resizeQuality:ResizeQuality.t ->
                ?resizeWidth:float -> unit -> t)
      =
      fun ?colorSpaceConversion:(x11706 : ColorSpaceConversion.t option) ->
        fun ?imageOrientation:(x11707 : ImageOrientation.t option) ->
          fun ?premultiplyAlpha:(x11708 : PremultiplyAlpha.t option) ->
            fun ?resizeHeight:(x11709 : float option) ->
              fun ?resizeQuality:(x11710 : ResizeQuality.t option) ->
                fun ?resizeWidth:(x11711 : float option) ->
                  fun () ->
                    let x11712 = Ojs.empty_obj () in
                    (match x11706 with
                     | Some x11718 ->
                         Ojs.set_prop_ascii x11712 "colorSpaceConversion"
                           (ColorSpaceConversion.t_to_js x11718)
                     | None -> ());
                    (match x11707 with
                     | Some x11717 ->
                         Ojs.set_prop_ascii x11712 "imageOrientation"
                           (ImageOrientation.t_to_js x11717)
                     | None -> ());
                    (match x11708 with
                     | Some x11716 ->
                         Ojs.set_prop_ascii x11712 "premultiplyAlpha"
                           (PremultiplyAlpha.t_to_js x11716)
                     | None -> ());
                    (match x11709 with
                     | Some x11715 ->
                         Ojs.set_prop_ascii x11712 "resizeHeight"
                           (Ojs.float_to_js x11715)
                     | None -> ());
                    (match x11710 with
                     | Some x11714 ->
                         Ojs.set_prop_ascii x11712 "resizeQuality"
                           (ResizeQuality.t_to_js x11714)
                     | None -> ());
                    (match x11711 with
                     | Some x11713 ->
                         Ojs.set_prop_ascii x11712 "resizeWidth"
                           (Ojs.float_to_js x11713)
                     | None -> ());
                    t_of_js x11712
    let cast_from = Obj.magic
  end
module IDBFactory =
  struct
    type t = [ `IDBFactory ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11720 : Ojs.t) -> t_of_js x11720
    and t_0_to_js : t_0 -> Ojs.t = fun (x11719 : t) -> t_to_js x11719
    type tags = [ `IDBFactory ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBFactory ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11723 : Ojs.t) -> intf_of_js __tags_of_js x11723
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11721 : __tags intf) -> intf_to_js __tags_to_js x11721
    let (cmp : 'tags this -> first:any -> second:any -> float) =
      fun (x11727 : 'tags this) ->
        fun ~first:(x11725 : any) ->
          fun ~second:(x11726 : any) ->
            Ojs.float_of_js
              (Ojs.call (this_to_js Obj.magic x11727) "cmp"
                 [|(any_to_js x11725);(any_to_js x11726)|])
    let (databases : 'tags this -> IDBDatabaseInfo.t list Promise.t_1) =
      fun (x11729 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x11731 : Ojs.t) ->
             Ojs.list_of_js IDBDatabaseInfo.t_of_js x11731)
          (Ojs.call (this_to_js Obj.magic x11729) "databases" [||])
    let (deleteDatabase : 'tags this -> name:string -> IDBOpenDBRequest.t) =
      fun (x11734 : 'tags this) ->
        fun ~name:(x11733 : string) ->
          IDBOpenDBRequest.t_of_js
            (Ojs.call (this_to_js Obj.magic x11734) "deleteDatabase"
               [|(Ojs.string_to_js x11733)|])
    let (open_ :
      'tags this ->
        name:string -> ?version:float -> unit -> IDBOpenDBRequest.t)
      =
      fun (x11740 : 'tags this) ->
        fun ~name:(x11736 : string) ->
          fun ?version:(x11737 : float option) ->
            fun () ->
              IDBOpenDBRequest.t_of_js
                (let x11742 = this_to_js Obj.magic x11740 in
                 Ojs.call (Ojs.get_prop_ascii x11742 "open") "apply"
                   [|x11742;((let x11738 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x11738 "push"
                                   [|(Ojs.string_to_js x11736)|]);
                              (match x11737 with
                               | Some x11739 ->
                                   ignore
                                     (Ojs.call x11738 "push"
                                        [|(Ojs.float_to_js x11739)|])
                               | None -> ());
                              x11738))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "IDBFactory")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBFactory") [||])
  end
module Crypto =
  struct
    type t = [ `Crypto ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11744 : Ojs.t) -> t_of_js x11744
    and t_0_to_js : t_0 -> Ojs.t = fun (x11743 : t) -> t_to_js x11743
    type tags = [ `Crypto ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Crypto ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11747 : Ojs.t) -> intf_of_js __tags_of_js x11747
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11745 : __tags intf) -> intf_to_js __tags_to_js x11745
    let (get_subtle : 'tags this -> SubtleCrypto.t) =
      fun (x11749 : 'tags this) ->
        SubtleCrypto.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11749) "subtle")
    let (getRandomValues : 'tags this -> array:'T -> 'T) =
      fun (x11752 : 'tags this) ->
        fun ~array:(x11751 : 'T) ->
          Obj.magic
            (Ojs.call (this_to_js Obj.magic x11752) "getRandomValues"
               [|(Obj.magic x11751)|])
    let (randomUUID : 'tags this -> string) =
      fun (x11754 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x11754) "randomUUID" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Crypto")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Crypto") [||])
  end
module CacheStorage =
  struct
    type t = [ `CacheStorage ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11757 : Ojs.t) -> t_of_js x11757
    and t_0_to_js : t_0 -> Ojs.t = fun (x11756 : t) -> t_to_js x11756
    type tags = [ `CacheStorage ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CacheStorage ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11760 : Ojs.t) -> intf_of_js __tags_of_js x11760
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11758 : __tags intf) -> intf_to_js __tags_to_js x11758
    let (delete : 'tags this -> cacheName:string -> bool Promise.t_1) =
      fun (x11763 : 'tags this) ->
        fun ~cacheName:(x11762 : string) ->
          Promise.t_1_of_js Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x11763) "delete"
               [|(Ojs.string_to_js x11762)|])
    let (has : 'tags this -> cacheName:string -> bool Promise.t_1) =
      fun (x11767 : 'tags this) ->
        fun ~cacheName:(x11766 : string) ->
          Promise.t_1_of_js Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x11767) "has"
               [|(Ojs.string_to_js x11766)|])
    let (keys : 'tags this -> string list Promise.t_1) =
      fun (x11770 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x11772 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x11772)
          (Ojs.call (this_to_js Obj.magic x11770) "keys" [||])
    let (match_ :
      'tags this ->
        request:RequestInfo.t ->
          ?options:MultiCacheQueryOptions.t ->
            unit -> Response.t option Promise.t_1)
      =
      fun (x11778 : 'tags this) ->
        fun ~request:(x11774 : RequestInfo.t) ->
          fun ?options:(x11775 : MultiCacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x11781 : Ojs.t) ->
                   Ojs.option_of_js Response.t_of_js x11781)
                (let x11780 = this_to_js Obj.magic x11778 in
                 Ojs.call (Ojs.get_prop_ascii x11780 "match") "apply"
                   [|x11780;((let x11776 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x11776 "push"
                                   [|(RequestInfo.t_to_js x11774)|]);
                              (match x11775 with
                               | Some x11777 ->
                                   ignore
                                     (Ojs.call x11776 "push"
                                        [|(MultiCacheQueryOptions.t_to_js
                                             x11777)|])
                               | None -> ());
                              x11776))|])
    let (open_ : 'tags this -> cacheName:string -> Cache.t Promise.t_1) =
      fun (x11784 : 'tags this) ->
        fun ~cacheName:(x11783 : string) ->
          Promise.t_1_of_js Cache.t_of_js
            (Ojs.call (this_to_js Obj.magic x11784) "open"
               [|(Ojs.string_to_js x11783)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CacheStorage")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CacheStorage") [||])
  end
module WindowOrWorkerGlobalScope =
  struct
    type t = [ `WindowOrWorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11788 : Ojs.t) -> t_of_js x11788
    and t_0_to_js : t_0 -> Ojs.t = fun (x11787 : t) -> t_to_js x11787
    type tags = [ `WindowOrWorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WindowOrWorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11791 : Ojs.t) -> intf_of_js __tags_of_js x11791
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11789 : __tags intf) -> intf_to_js __tags_to_js x11789
    let (get_caches : 'tags this -> CacheStorage.t) =
      fun (x11793 : 'tags this) ->
        CacheStorage.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11793) "caches")
    let (get_crossOriginIsolated : 'tags this -> bool) =
      fun (x11795 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11795)
             "crossOriginIsolated")
    let (get_crypto : 'tags this -> Crypto.t) =
      fun (x11797 : 'tags this) ->
        Crypto.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11797) "crypto")
    let (get_indexedDB : 'tags this -> IDBFactory.t) =
      fun (x11799 : 'tags this) ->
        IDBFactory.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11799) "indexedDB")
    let (get_isSecureContext : 'tags this -> bool) =
      fun (x11801 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11801) "isSecureContext")
    let (get_origin : 'tags this -> string) =
      fun (x11803 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11803) "origin")
    let (get_performance : 'tags this -> Performance.t) =
      fun (x11805 : 'tags this) ->
        Performance.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11805) "performance")
    let (atob : 'tags this -> data:string -> string) =
      fun (x11808 : 'tags this) ->
        fun ~data:(x11807 : string) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x11808) "atob"
               [|(Ojs.string_to_js x11807)|])
    let (btoa : 'tags this -> data:string -> string) =
      fun (x11811 : 'tags this) ->
        fun ~data:(x11810 : string) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x11811) "btoa"
               [|(Ojs.string_to_js x11810)|])
    let (clearInterval : 'tags this -> ?id:float -> unit -> unit) =
      fun (x11816 : 'tags this) ->
        fun ?id:(x11813 : float option) ->
          fun () ->
            ignore
              (let x11818 = this_to_js Obj.magic x11816 in
               Ojs.call (Ojs.get_prop_ascii x11818 "clearInterval") "apply"
                 [|x11818;((let x11814 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x11813 with
                             | Some x11815 ->
                                 ignore
                                   (Ojs.call x11814 "push"
                                      [|(Ojs.float_to_js x11815)|])
                             | None -> ());
                            x11814))|])
    let (clearTimeout : 'tags this -> ?id:float -> unit -> unit) =
      fun (x11822 : 'tags this) ->
        fun ?id:(x11819 : float option) ->
          fun () ->
            ignore
              (let x11824 = this_to_js Obj.magic x11822 in
               Ojs.call (Ojs.get_prop_ascii x11824 "clearTimeout") "apply"
                 [|x11824;((let x11820 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x11819 with
                             | Some x11821 ->
                                 ignore
                                   (Ojs.call x11820 "push"
                                      [|(Ojs.float_to_js x11821)|])
                             | None -> ());
                            x11820))|])
    let (createImageBitmap :
      'tags this ->
        image:ImageBitmapSource.t ->
          ?options:ImageBitmapOptions.t -> unit -> ImageBitmap.t Promise.t_1)
      =
      fun (x11829 : 'tags this) ->
        fun ~image:(x11825 : ImageBitmapSource.t) ->
          fun ?options:(x11826 : ImageBitmapOptions.t option) ->
            fun () ->
              Promise.t_1_of_js ImageBitmap.t_of_js
                (let x11831 = this_to_js Obj.magic x11829 in
                 Ojs.call (Ojs.get_prop_ascii x11831 "createImageBitmap")
                   "apply"
                   [|x11831;((let x11827 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x11827 "push"
                                   [|(ImageBitmapSource.t_to_js x11825)|]);
                              (match x11826 with
                               | Some x11828 ->
                                   ignore
                                     (Ojs.call x11827 "push"
                                        [|(ImageBitmapOptions.t_to_js x11828)|])
                               | None -> ());
                              x11827))|])
    let (createImageBitmap' :
      'tags this ->
        image:ImageBitmapSource.t ->
          sx:float ->
            sy:float ->
              sw:float ->
                sh:float ->
                  ?options:ImageBitmapOptions.t ->
                    unit -> ImageBitmap.t Promise.t_1)
      =
      fun (x11841 : 'tags this) ->
        fun ~image:(x11833 : ImageBitmapSource.t) ->
          fun ~sx:(x11834 : float) ->
            fun ~sy:(x11835 : float) ->
              fun ~sw:(x11836 : float) ->
                fun ~sh:(x11837 : float) ->
                  fun ?options:(x11838 : ImageBitmapOptions.t option) ->
                    fun () ->
                      Promise.t_1_of_js ImageBitmap.t_of_js
                        (let x11843 = this_to_js Obj.magic x11841 in
                         Ojs.call
                           (Ojs.get_prop_ascii x11843 "createImageBitmap")
                           "apply"
                           [|x11843;((let x11839 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x11839 "push"
                                           [|(ImageBitmapSource.t_to_js
                                                x11833)|]);
                                      ignore
                                        (Ojs.call x11839 "push"
                                           [|(Ojs.float_to_js x11834)|]);
                                      ignore
                                        (Ojs.call x11839 "push"
                                           [|(Ojs.float_to_js x11835)|]);
                                      ignore
                                        (Ojs.call x11839 "push"
                                           [|(Ojs.float_to_js x11836)|]);
                                      ignore
                                        (Ojs.call x11839 "push"
                                           [|(Ojs.float_to_js x11837)|]);
                                      (match x11838 with
                                       | Some x11840 ->
                                           ignore
                                             (Ojs.call x11839 "push"
                                                [|(ImageBitmapOptions.t_to_js
                                                     x11840)|])
                                       | None -> ());
                                      x11839))|])
    let (fetch :
      'tags this ->
        input:RequestInfo.t ->
          ?init:RequestInit.t -> unit -> Response.t Promise.t_1)
      =
      fun (x11849 : 'tags this) ->
        fun ~input:(x11845 : RequestInfo.t) ->
          fun ?init:(x11846 : RequestInit.t option) ->
            fun () ->
              Promise.t_1_of_js Response.t_of_js
                (let x11851 = this_to_js Obj.magic x11849 in
                 Ojs.call (Ojs.get_prop_ascii x11851 "fetch") "apply"
                   [|x11851;((let x11847 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x11847 "push"
                                   [|(RequestInfo.t_to_js x11845)|]);
                              (match x11846 with
                               | Some x11848 ->
                                   ignore
                                     (Ojs.call x11847 "push"
                                        [|(RequestInit.t_to_js x11848)|])
                               | None -> ());
                              x11847))|])
    let (queueMicrotask : 'tags this -> callback:VoidFunction.t -> unit) =
      fun (x11854 : 'tags this) ->
        fun ~callback:(x11853 : VoidFunction.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11854) "queueMicrotask"
               [|(VoidFunction.t_to_js x11853)|])
    let (reportError : 'tags this -> e:any -> unit) =
      fun (x11857 : 'tags this) ->
        fun ~e:(x11856 : any) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11857) "reportError"
               [|(any_to_js x11856)|])
    let (setInterval :
      'tags this ->
        handler:TimerHandler.t ->
          ?timeout:float -> arguments:any list -> unit -> float)
      =
      fun (x11865 : 'tags this) ->
        fun ~handler:(x11859 : TimerHandler.t) ->
          fun ?timeout:(x11860 : float option) ->
            fun ~arguments:(x11861 : any list) ->
              fun () ->
                Ojs.float_of_js
                  (let x11867 = this_to_js Obj.magic x11865 in
                   Ojs.call (Ojs.get_prop_ascii x11867 "setInterval") "apply"
                     [|x11867;((let x11862 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11862 "push"
                                     [|(TimerHandler.t_to_js x11859)|]);
                                (match x11860 with
                                 | Some x11864 ->
                                     ignore
                                       (Ojs.call x11862 "push"
                                          [|(Ojs.float_to_js x11864)|])
                                 | None -> ());
                                List.iter
                                  (fun (x11863 : any) ->
                                     ignore
                                       (Ojs.call x11862 "push"
                                          [|(any_to_js x11863)|])) x11861;
                                x11862))|])
    let (setTimeout :
      'tags this ->
        handler:TimerHandler.t ->
          ?timeout:float -> arguments:any list -> unit -> float)
      =
      fun (x11874 : 'tags this) ->
        fun ~handler:(x11868 : TimerHandler.t) ->
          fun ?timeout:(x11869 : float option) ->
            fun ~arguments:(x11870 : any list) ->
              fun () ->
                Ojs.float_of_js
                  (let x11876 = this_to_js Obj.magic x11874 in
                   Ojs.call (Ojs.get_prop_ascii x11876 "setTimeout") "apply"
                     [|x11876;((let x11871 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11871 "push"
                                     [|(TimerHandler.t_to_js x11868)|]);
                                (match x11869 with
                                 | Some x11873 ->
                                     ignore
                                       (Ojs.call x11871 "push"
                                          [|(Ojs.float_to_js x11873)|])
                                 | None -> ());
                                List.iter
                                  (fun (x11872 : any) ->
                                     ignore
                                       (Ojs.call x11871 "push"
                                          [|(any_to_js x11872)|])) x11870;
                                x11871))|])
    let cast_from = Obj.magic
  end
module FontFaceSource =
  struct
    type t = [ `FontFaceSource ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11878 : Ojs.t) -> t_of_js x11878
    and t_0_to_js : t_0 -> Ojs.t = fun (x11877 : t) -> t_to_js x11877
    type tags = [ `FontFaceSource ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFaceSource ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11881 : Ojs.t) -> intf_of_js __tags_of_js x11881
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11879 : __tags intf) -> intf_to_js __tags_to_js x11879
    let (get_fonts : 'tags this -> FontFaceSet.t) =
      fun (x11883 : 'tags this) ->
        FontFaceSet.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11883) "fonts")
    let (create : fonts:FontFaceSet.t -> unit -> t) =
      fun ~fonts:(x11885 : FontFaceSet.t) ->
        fun () ->
          let x11886 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x11886 "fonts" (FontFaceSet.t_to_js x11885);
          t_of_js x11886
    let cast_from = Obj.magic
  end
module WorkerGlobalScope =
  struct
    type t =
      [ `EventTarget  | `FontFaceSource  | `WindowOrWorkerGlobalScope 
      | `WorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11888 : Ojs.t) -> t_of_js x11888
    and t_0_to_js : t_0 -> Ojs.t = fun (x11887 : t) -> t_to_js x11887
    type tags =
      [ `EventTarget  | `FontFaceSource  | `WindowOrWorkerGlobalScope 
      | `WorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11891 : Ojs.t) -> intf_of_js __tags_of_js x11891
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11889 : __tags intf) -> intf_to_js __tags_to_js x11889
    let (get_location : 'tags this -> WorkerLocation.t) =
      fun (x11893 : 'tags this) ->
        WorkerLocation.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11893) "location")
    let (get_navigator : 'tags this -> WorkerNavigator.t) =
      fun (x11895 : 'tags this) ->
        WorkerNavigator.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11895) "navigator")
    let (get_onerror :
      'tags this -> (this:t -> ev:ErrorEvent.t -> any) option) =
      fun (x11897 : 'tags this) ->
        Ojs.option_of_js
          (fun (x11899 : Ojs.t) ->
             fun ~this:(x11900 : t) ->
               fun ~ev:(x11901 : ErrorEvent.t) ->
                 any_of_js
                   (Ojs.apply x11899
                      [|(t_to_js x11900);(ErrorEvent.t_to_js x11901)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11897) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:ErrorEvent.t -> any) option -> unit) =
      fun (x11902 : 'tags this) ->
        fun (x11903 : (this:t -> ev:ErrorEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11902) "onerror"
            (Ojs.option_to_js
               (fun (x11904 : this:t -> ev:ErrorEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11905 : Ojs.t) ->
                       fun (x11906 : Ojs.t) ->
                         any_to_js
                           (x11904 ~this:(t_of_js x11905)
                              ~ev:(ErrorEvent.t_of_js x11906)))) x11903)
    let (get_onlanguagechange :
      'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x11908 : 'tags this) ->
        Ojs.option_of_js
          (fun (x11910 : Ojs.t) ->
             fun ~this:(x11911 : t) ->
               fun ~ev:(x11912 : Event.t) ->
                 any_of_js
                   (Ojs.apply x11910
                      [|(t_to_js x11911);(Event.t_to_js x11912)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11908)
             "onlanguagechange")
    let (set_onlanguagechange :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x11913 : 'tags this) ->
        fun (x11914 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11913) "onlanguagechange"
            (Ojs.option_to_js
               (fun (x11915 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11916 : Ojs.t) ->
                       fun (x11917 : Ojs.t) ->
                         any_to_js
                           (x11915 ~this:(t_of_js x11916)
                              ~ev:(Event.t_of_js x11917)))) x11914)
    let (get_onoffline : 'tags this -> (this:t -> ev:Event.t -> any) option)
      =
      fun (x11919 : 'tags this) ->
        Ojs.option_of_js
          (fun (x11921 : Ojs.t) ->
             fun ~this:(x11922 : t) ->
               fun ~ev:(x11923 : Event.t) ->
                 any_of_js
                   (Ojs.apply x11921
                      [|(t_to_js x11922);(Event.t_to_js x11923)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11919) "onoffline")
    let (set_onoffline :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x11924 : 'tags this) ->
        fun (x11925 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11924) "onoffline"
            (Ojs.option_to_js
               (fun (x11926 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11927 : Ojs.t) ->
                       fun (x11928 : Ojs.t) ->
                         any_to_js
                           (x11926 ~this:(t_of_js x11927)
                              ~ev:(Event.t_of_js x11928)))) x11925)
    let (get_ononline : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x11930 : 'tags this) ->
        Ojs.option_of_js
          (fun (x11932 : Ojs.t) ->
             fun ~this:(x11933 : t) ->
               fun ~ev:(x11934 : Event.t) ->
                 any_of_js
                   (Ojs.apply x11932
                      [|(t_to_js x11933);(Event.t_to_js x11934)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11930) "ononline")
    let (set_ononline :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x11935 : 'tags this) ->
        fun (x11936 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11935) "ononline"
            (Ojs.option_to_js
               (fun (x11937 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11938 : Ojs.t) ->
                       fun (x11939 : Ojs.t) ->
                         any_to_js
                           (x11937 ~this:(t_of_js x11938)
                              ~ev:(Event.t_of_js x11939)))) x11936)
    let (get_onrejectionhandled :
      'tags this -> (this:t -> ev:PromiseRejectionEvent.t -> any) option) =
      fun (x11941 : 'tags this) ->
        Ojs.option_of_js
          (fun (x11943 : Ojs.t) ->
             fun ~this:(x11944 : t) ->
               fun ~ev:(x11945 : PromiseRejectionEvent.t) ->
                 any_of_js
                   (Ojs.apply x11943
                      [|(t_to_js x11944);(PromiseRejectionEvent.t_to_js
                                            x11945)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11941)
             "onrejectionhandled")
    let (set_onrejectionhandled :
      'tags this ->
        (this:t -> ev:PromiseRejectionEvent.t -> any) option -> unit)
      =
      fun (x11946 : 'tags this) ->
        fun (x11947 : (this:t -> ev:PromiseRejectionEvent.t -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11946)
            "onrejectionhandled"
            (Ojs.option_to_js
               (fun (x11948 : this:t -> ev:PromiseRejectionEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11949 : Ojs.t) ->
                       fun (x11950 : Ojs.t) ->
                         any_to_js
                           (x11948 ~this:(t_of_js x11949)
                              ~ev:(PromiseRejectionEvent.t_of_js x11950))))
               x11947)
    let (get_onunhandledrejection :
      'tags this -> (this:t -> ev:PromiseRejectionEvent.t -> any) option) =
      fun (x11952 : 'tags this) ->
        Ojs.option_of_js
          (fun (x11954 : Ojs.t) ->
             fun ~this:(x11955 : t) ->
               fun ~ev:(x11956 : PromiseRejectionEvent.t) ->
                 any_of_js
                   (Ojs.apply x11954
                      [|(t_to_js x11955);(PromiseRejectionEvent.t_to_js
                                            x11956)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11952)
             "onunhandledrejection")
    let (set_onunhandledrejection :
      'tags this ->
        (this:t -> ev:PromiseRejectionEvent.t -> any) option -> unit)
      =
      fun (x11957 : 'tags this) ->
        fun (x11958 : (this:t -> ev:PromiseRejectionEvent.t -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11957)
            "onunhandledrejection"
            (Ojs.option_to_js
               (fun (x11959 : this:t -> ev:PromiseRejectionEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11960 : Ojs.t) ->
                       fun (x11961 : Ojs.t) ->
                         any_to_js
                           (x11959 ~this:(t_of_js x11960)
                              ~ev:(PromiseRejectionEvent.t_of_js x11961))))
               x11958)
    let (get_self : 'tags this -> (t, any) intersection2) =
      fun (x11963 : 'tags this) ->
        intersection2_of_js t_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11963) "self")
    let (importScripts :
      'tags this -> urls:[ `U1 of string  | `U2 of URL.t ] list -> unit) =
      fun (x11972 : 'tags this) ->
        fun ~urls:(x11967 : [ `U1 of string  | `U2 of URL.t ] list) ->
          ignore
            (let x11974 = this_to_js Obj.magic x11972 in
             Ojs.call (Ojs.get_prop_ascii x11974 "importScripts") "apply"
               [|x11974;((let x11968 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x11969 : [ `U1 of string  | `U2 of URL.t ])
                               ->
                               ignore
                                 (Ojs.call x11968 "push"
                                    [|((match x11969 with
                                        | `U1 x11970 ->
                                            Ojs.string_to_js x11970
                                        | `U2 x11971 -> URL.t_to_js x11971))|]))
                            x11967;
                          x11968))|])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x11984 : 'tags this) ->
        fun ~type_:(x11975 : 'K) ->
          fun ~listener:(x11976 : this:t -> ev:any -> any) ->
            fun
              ?options:(x11977 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x11986 = this_to_js Obj.magic x11984 in
                   Ojs.call (Ojs.get_prop_ascii x11986 "addEventListener")
                     "apply"
                     [|x11986;((let x11978 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11978 "push"
                                     [|(Obj.magic x11975)|]);
                                ignore
                                  (Ojs.call x11978 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x11982 : Ojs.t) ->
                                             fun (x11983 : Ojs.t) ->
                                               any_to_js
                                                 (x11976
                                                    ~this:(t_of_js x11982)
                                                    ~ev:(any_of_js x11983))))|]);
                                (match x11977 with
                                 | Some x11979 ->
                                     ignore
                                       (Ojs.call x11978 "push"
                                          [|((match x11979 with
                                              | `U1 x11980 ->
                                                  Ojs.bool_to_js x11980
                                              | `U2 x11981 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x11981))|])
                                 | None -> ());
                                x11978))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x11994 : 'tags this) ->
        fun ~type_:(x11987 : string) ->
          fun ~listener:(x11988 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x11989 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x11996 = this_to_js Obj.magic x11994 in
                   Ojs.call (Ojs.get_prop_ascii x11996 "addEventListener")
                     "apply"
                     [|x11996;((let x11990 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11990 "push"
                                     [|(Ojs.string_to_js x11987)|]);
                                ignore
                                  (Ojs.call x11990 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x11988)|]);
                                (match x11989 with
                                 | Some x11991 ->
                                     ignore
                                       (Ojs.call x11990 "push"
                                          [|((match x11991 with
                                              | `U1 x11992 ->
                                                  Ojs.bool_to_js x11992
                                              | `U2 x11993 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x11993))|])
                                 | None -> ());
                                x11990))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12006 : 'tags this) ->
        fun ~type_:(x11997 : 'K) ->
          fun ~listener:(x11998 : this:t -> ev:any -> any) ->
            fun
              ?options:(x11999 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12008 = this_to_js Obj.magic x12006 in
                   Ojs.call (Ojs.get_prop_ascii x12008 "removeEventListener")
                     "apply"
                     [|x12008;((let x12000 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12000 "push"
                                     [|(Obj.magic x11997)|]);
                                ignore
                                  (Ojs.call x12000 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12004 : Ojs.t) ->
                                             fun (x12005 : Ojs.t) ->
                                               any_to_js
                                                 (x11998
                                                    ~this:(t_of_js x12004)
                                                    ~ev:(any_of_js x12005))))|]);
                                (match x11999 with
                                 | Some x12001 ->
                                     ignore
                                       (Ojs.call x12000 "push"
                                          [|((match x12001 with
                                              | `U1 x12002 ->
                                                  Ojs.bool_to_js x12002
                                              | `U2 x12003 ->
                                                  EventListenerOptions.t_to_js
                                                    x12003))|])
                                 | None -> ());
                                x12000))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12016 : 'tags this) ->
        fun ~type_:(x12009 : string) ->
          fun ~listener:(x12010 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x12011 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12018 = this_to_js Obj.magic x12016 in
                   Ojs.call (Ojs.get_prop_ascii x12018 "removeEventListener")
                     "apply"
                     [|x12018;((let x12012 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12012 "push"
                                     [|(Ojs.string_to_js x12009)|]);
                                ignore
                                  (Ojs.call x12012 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12010)|]);
                                (match x12011 with
                                 | Some x12013 ->
                                     ignore
                                       (Ojs.call x12012 "push"
                                          [|((match x12013 with
                                              | `U1 x12014 ->
                                                  Ojs.bool_to_js x12014
                                              | `U2 x12015 ->
                                                  EventListenerOptions.t_to_js
                                                    x12015))|])
                                 | None -> ());
                                x12012))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WorkerGlobalScope") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WorkerGlobalScope")
             [||])
  end
module SharedWorkerGlobalScope =
  struct
    type t =
      [ `EventTarget  | `FontFaceSource  | `SharedWorkerGlobalScope 
      | `WindowOrWorkerGlobalScope  | `WorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12020 : Ojs.t) -> t_of_js x12020
    and t_0_to_js : t_0 -> Ojs.t = fun (x12019 : t) -> t_to_js x12019
    type tags =
      [ `EventTarget  | `FontFaceSource  | `SharedWorkerGlobalScope 
      | `WindowOrWorkerGlobalScope  | `WorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `SharedWorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12023 : Ojs.t) -> intf_of_js __tags_of_js x12023
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12021 : __tags intf) -> intf_to_js __tags_to_js x12021
    let (get_name : 'tags this -> string) =
      fun (x12025 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12025) "name")
    let (get_onconnect :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x12027 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12029 : Ojs.t) ->
             fun ~this:(x12030 : t) ->
               fun ~ev:(x12031 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x12029
                      [|(t_to_js x12030);(MessageEvent.t_0_to_js x12031)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12027) "onconnect")
    let (set_onconnect :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x12032 : 'tags this) ->
        fun (x12033 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12032) "onconnect"
            (Ojs.option_to_js
               (fun (x12034 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12035 : Ojs.t) ->
                       fun (x12036 : Ojs.t) ->
                         any_to_js
                           (x12034 ~this:(t_of_js x12035)
                              ~ev:(MessageEvent.t_0_of_js x12036)))) x12033)
    let (close : 'tags this -> unit) =
      fun (x12038 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x12038) "close" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12049 : 'tags this) ->
        fun ~type_:(x12040 : 'K) ->
          fun ~listener:(x12041 : this:t -> ev:any -> any) ->
            fun
              ?options:(x12042 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12051 = this_to_js Obj.magic x12049 in
                   Ojs.call (Ojs.get_prop_ascii x12051 "addEventListener")
                     "apply"
                     [|x12051;((let x12043 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12043 "push"
                                     [|(Obj.magic x12040)|]);
                                ignore
                                  (Ojs.call x12043 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12047 : Ojs.t) ->
                                             fun (x12048 : Ojs.t) ->
                                               any_to_js
                                                 (x12041
                                                    ~this:(t_of_js x12047)
                                                    ~ev:(any_of_js x12048))))|]);
                                (match x12042 with
                                 | Some x12044 ->
                                     ignore
                                       (Ojs.call x12043 "push"
                                          [|((match x12044 with
                                              | `U1 x12045 ->
                                                  Ojs.bool_to_js x12045
                                              | `U2 x12046 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x12046))|])
                                 | None -> ());
                                x12043))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12059 : 'tags this) ->
        fun ~type_:(x12052 : string) ->
          fun ~listener:(x12053 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x12054 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12061 = this_to_js Obj.magic x12059 in
                   Ojs.call (Ojs.get_prop_ascii x12061 "addEventListener")
                     "apply"
                     [|x12061;((let x12055 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12055 "push"
                                     [|(Ojs.string_to_js x12052)|]);
                                ignore
                                  (Ojs.call x12055 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12053)|]);
                                (match x12054 with
                                 | Some x12056 ->
                                     ignore
                                       (Ojs.call x12055 "push"
                                          [|((match x12056 with
                                              | `U1 x12057 ->
                                                  Ojs.bool_to_js x12057
                                              | `U2 x12058 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x12058))|])
                                 | None -> ());
                                x12055))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12071 : 'tags this) ->
        fun ~type_:(x12062 : 'K) ->
          fun ~listener:(x12063 : this:t -> ev:any -> any) ->
            fun
              ?options:(x12064 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12073 = this_to_js Obj.magic x12071 in
                   Ojs.call (Ojs.get_prop_ascii x12073 "removeEventListener")
                     "apply"
                     [|x12073;((let x12065 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12065 "push"
                                     [|(Obj.magic x12062)|]);
                                ignore
                                  (Ojs.call x12065 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12069 : Ojs.t) ->
                                             fun (x12070 : Ojs.t) ->
                                               any_to_js
                                                 (x12063
                                                    ~this:(t_of_js x12069)
                                                    ~ev:(any_of_js x12070))))|]);
                                (match x12064 with
                                 | Some x12066 ->
                                     ignore
                                       (Ojs.call x12065 "push"
                                          [|((match x12066 with
                                              | `U1 x12067 ->
                                                  Ojs.bool_to_js x12067
                                              | `U2 x12068 ->
                                                  EventListenerOptions.t_to_js
                                                    x12068))|])
                                 | None -> ());
                                x12065))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12081 : 'tags this) ->
        fun ~type_:(x12074 : string) ->
          fun ~listener:(x12075 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x12076 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12083 = this_to_js Obj.magic x12081 in
                   Ojs.call (Ojs.get_prop_ascii x12083 "removeEventListener")
                     "apply"
                     [|x12083;((let x12077 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12077 "push"
                                     [|(Ojs.string_to_js x12074)|]);
                                ignore
                                  (Ojs.call x12077 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12075)|]);
                                (match x12076 with
                                 | Some x12078 ->
                                     ignore
                                       (Ojs.call x12077 "push"
                                          [|((match x12078 with
                                              | `U1 x12079 ->
                                                  Ojs.bool_to_js x12079
                                              | `U2 x12080 ->
                                                  EventListenerOptions.t_to_js
                                                    x12080))|])
                                 | None -> ());
                                x12077))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "SharedWorkerGlobalScope")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "SharedWorkerGlobalScope") 
             [||])
  end
module ServiceWorkerRegistrationEventMap =
  struct
    type t = [ `ServiceWorkerRegistrationEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12085 : Ojs.t) -> t_of_js x12085
    and t_0_to_js : t_0 -> Ojs.t = fun (x12084 : t) -> t_to_js x12084
    type tags = [ `ServiceWorkerRegistrationEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerRegistrationEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12088 : Ojs.t) -> intf_of_js __tags_of_js x12088
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12086 : __tags intf) -> intf_to_js __tags_to_js x12086
    let (get_updatefound : 'tags this -> Event.t) =
      fun (x12090 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12090) "updatefound")
    let (set_updatefound : 'tags this -> Event.t -> unit) =
      fun (x12092 : 'tags this) ->
        fun (x12093 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12092) "updatefound"
            (Event.t_to_js x12093)
    let (create : updatefound:Event.t -> unit -> t) =
      fun ~updatefound:(x12095 : Event.t) ->
        fun () ->
          let x12096 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x12096 "updatefound" (Event.t_to_js x12095);
          t_of_js x12096
    let cast_from = Obj.magic
  end
module PushMessageData =
  struct
    type t = [ `PushMessageData ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12098 : Ojs.t) -> t_of_js x12098
    and t_0_to_js : t_0 -> Ojs.t = fun (x12097 : t) -> t_to_js x12097
    type tags = [ `PushMessageData ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushMessageData ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12101 : Ojs.t) -> intf_of_js __tags_of_js x12101
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12099 : __tags intf) -> intf_to_js __tags_to_js x12099
    let (arrayBuffer : 'tags this -> ArrayBuffer.t_0) =
      fun (x12103 : 'tags this) ->
        ArrayBuffer.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x12103) "arrayBuffer" [||])
    let (blob : 'tags this -> Blob.t) =
      fun (x12105 : 'tags this) ->
        Blob.t_of_js (Ojs.call (this_to_js Obj.magic x12105) "blob" [||])
    let (json : 'tags this -> any) =
      fun (x12107 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x12107) "json" [||])
    let (text : 'tags this -> string) =
      fun (x12109 : 'tags this) ->
        Ojs.string_of_js (Ojs.call (this_to_js Obj.magic x12109) "text" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PushMessageData") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PushMessageData") [||])
  end
module PushMessageDataInit =
  struct
    type t = [ `String of string  | `Other of BufferSource.t ] Primitive.t
    let rec t_of_js : Ojs.t -> t =
      fun (x12115 : Ojs.t) ->
        Primitive.t_of_js
          (fun (x12116 : Ojs.t) ->
             let x12117 = x12116 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x12117 "dummy") with
             | "String" -> `String (Ojs.string_of_js x12117)
             | "Other" -> `Other (BufferSource.t_of_js x12117)
             | _ -> assert false) x12115
    and t_to_js : t -> Ojs.t =
      fun
        (x12111 :
          [ `String of string  | `Other of BufferSource.t ] Primitive.t)
        ->
        Primitive.t_to_js
          (fun (x12112 : [ `String of string  | `Other of BufferSource.t ])
             ->
             match x12112 with
             | `String x12113 -> Ojs.string_to_js x12113
             | `Other x12114 -> BufferSource.t_to_js x12114) x12111
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12119 : Ojs.t) -> t_of_js x12119
    and t_0_to_js : t_0 -> Ojs.t = fun (x12118 : t) -> t_to_js x12118
  end
module ExtendableEventInit =
  struct
    type t = [ `EventInit  | `ExtendableEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12121 : Ojs.t) -> t_of_js x12121
    and t_0_to_js : t_0 -> Ojs.t = fun (x12120 : t) -> t_to_js x12120
    type tags = [ `EventInit  | `ExtendableEventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ExtendableEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12124 : Ojs.t) -> intf_of_js __tags_of_js x12124
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12122 : __tags intf) -> intf_to_js __tags_to_js x12122
    let cast_from = Obj.magic
  end
module PushEventInit =
  struct
    type t = [ `EventInit  | `ExtendableEventInit  | `PushEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12127 : Ojs.t) -> t_of_js x12127
    and t_0_to_js : t_0 -> Ojs.t = fun (x12126 : t) -> t_to_js x12126
    type tags = [ `EventInit  | `ExtendableEventInit  | `PushEventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12130 : Ojs.t) -> intf_of_js __tags_of_js x12130
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12128 : __tags intf) -> intf_to_js __tags_to_js x12128
    let (get_data : 'tags this -> PushMessageDataInit.t option) =
      fun (x12132 : 'tags this) ->
        Ojs.option_of_js PushMessageDataInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12132) "data")
    let (set_data : 'tags this -> PushMessageDataInit.t -> unit) =
      fun (x12135 : 'tags this) ->
        fun (x12136 : PushMessageDataInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12135) "data"
            (PushMessageDataInit.t_to_js x12136)
    let (create : ?data:PushMessageDataInit.t -> unit -> t) =
      fun ?data:(x12138 : PushMessageDataInit.t option) ->
        fun () ->
          let x12139 = Ojs.empty_obj () in
          (match x12138 with
           | Some x12140 ->
               Ojs.set_prop_ascii x12139 "data"
                 (PushMessageDataInit.t_to_js x12140)
           | None -> ());
          t_of_js x12139
    let cast_from = Obj.magic
  end
module ExtendableEvent =
  struct
    type t = [ `Event  | `ExtendableEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12142 : Ojs.t) -> t_of_js x12142
    and t_0_to_js : t_0 -> Ojs.t = fun (x12141 : t) -> t_to_js x12141
    type tags = [ `Event  | `ExtendableEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ExtendableEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12145 : Ojs.t) -> intf_of_js __tags_of_js x12145
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12143 : __tags intf) -> intf_to_js __tags_to_js x12143
    let (waitUntil : 'tags this -> f:any -> unit) =
      fun (x12148 : 'tags this) ->
        fun ~f:(x12147 : any) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x12148) "waitUntil"
               [|(any_to_js x12147)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ExtendableEvent") "prototype")
    let (create :
      type_:string -> ?eventInitDict:ExtendableEventInit.t -> unit -> t) =
      fun ~type_:(x12150 : string) ->
        fun ?eventInitDict:(x12151 : ExtendableEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "ExtendableEvent")
                 (let x12152 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x12152 "push" [|(Ojs.string_to_js x12150)|]);
                  (match x12151 with
                   | Some x12153 ->
                       ignore
                         (Ojs.call x12152 "push"
                            [|(ExtendableEventInit.t_to_js x12153)|])
                   | None -> ());
                  x12152))
  end
module PushEvent =
  struct
    type t = [ `Event  | `ExtendableEvent  | `PushEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12155 : Ojs.t) -> t_of_js x12155
    and t_0_to_js : t_0 -> Ojs.t = fun (x12154 : t) -> t_to_js x12154
    type tags = [ `Event  | `ExtendableEvent  | `PushEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12158 : Ojs.t) -> intf_of_js __tags_of_js x12158
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12156 : __tags intf) -> intf_to_js __tags_to_js x12156
    let (get_data : 'tags this -> PushMessageData.t option) =
      fun (x12160 : 'tags this) ->
        Ojs.option_of_js PushMessageData.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12160) "data")
    let (create : ?data:PushMessageData.t -> unit -> t) =
      fun ?data:(x12163 : PushMessageData.t option) ->
        fun () ->
          let x12164 = Ojs.empty_obj () in
          (match x12163 with
           | Some x12165 ->
               Ojs.set_prop_ascii x12164 "data"
                 (PushMessageData.t_to_js x12165)
           | None -> ());
          t_of_js x12164
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "PushEvent")
             "prototype")
    let (create' :
      type_:string -> ?eventInitDict:PushEventInit.t -> unit -> t) =
      fun ~type_:(x12166 : string) ->
        fun ?eventInitDict:(x12167 : PushEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "PushEvent")
                 (let x12168 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x12168 "push" [|(Ojs.string_to_js x12166)|]);
                  (match x12167 with
                   | Some x12169 ->
                       ignore
                         (Ojs.call x12168 "push"
                            [|(PushEventInit.t_to_js x12169)|])
                   | None -> ());
                  x12168))
  end
module NotificationPermission =
  struct
    type t = [ `L_s57_default  | `L_s58_denied  | `L_s84_granted ]
    let rec t_of_js : Ojs.t -> t =
      fun (x12171 : Ojs.t) ->
        let x12172 = x12171 in
        match Ojs.string_of_js x12172 with
        | "default" -> `L_s57_default
        | "denied" -> `L_s58_denied
        | "granted" -> `L_s84_granted
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x12170 : [ `L_s57_default  | `L_s58_denied  | `L_s84_granted ]) ->
        match x12170 with
        | `L_s57_default -> Ojs.string_to_js "default"
        | `L_s58_denied -> Ojs.string_to_js "denied"
        | `L_s84_granted -> Ojs.string_to_js "granted"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12174 : Ojs.t) -> t_of_js x12174
    and t_0_to_js : t_0 -> Ojs.t = fun (x12173 : t) -> t_to_js x12173
  end
module VibratePattern =
  struct
    type t = [ `Number of float  | `Other of float list ] Primitive.t
    let rec t_of_js : Ojs.t -> t =
      fun (x12180 : Ojs.t) ->
        Primitive.t_of_js
          (fun (x12181 : Ojs.t) ->
             let x12182 = x12181 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x12182 "dummy") with
             | "Number" -> `Number (Ojs.float_of_js x12182)
             | "Other" -> `Other (Ojs.list_of_js Ojs.float_of_js x12182)
             | _ -> assert false) x12180
    and t_to_js : t -> Ojs.t =
      fun (x12175 : [ `Number of float  | `Other of float list ] Primitive.t)
        ->
        Primitive.t_to_js
          (fun (x12176 : [ `Number of float  | `Other of float list ]) ->
             match x12176 with
             | `Number x12177 -> Ojs.float_to_js x12177
             | `Other x12178 -> Ojs.list_to_js Ojs.float_to_js x12178) x12175
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12185 : Ojs.t) -> t_of_js x12185
    and t_0_to_js : t_0 -> Ojs.t = fun (x12184 : t) -> t_to_js x12184
  end
module NotificationAction =
  struct
    type t = [ `NotificationAction ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12187 : Ojs.t) -> t_of_js x12187
    and t_0_to_js : t_0 -> Ojs.t = fun (x12186 : t) -> t_to_js x12186
    type tags = [ `NotificationAction ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NotificationAction ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12190 : Ojs.t) -> intf_of_js __tags_of_js x12190
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12188 : __tags intf) -> intf_to_js __tags_to_js x12188
    let (get_action : 'tags this -> string) =
      fun (x12192 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12192) "action")
    let (set_action : 'tags this -> string -> unit) =
      fun (x12194 : 'tags this) ->
        fun (x12195 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12194) "action"
            (Ojs.string_to_js x12195)
    let (get_icon : 'tags this -> string option) =
      fun (x12197 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12197) "icon")
    let (set_icon : 'tags this -> string -> unit) =
      fun (x12200 : 'tags this) ->
        fun (x12201 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12200) "icon"
            (Ojs.string_to_js x12201)
    let (get_title : 'tags this -> string) =
      fun (x12203 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12203) "title")
    let (set_title : 'tags this -> string -> unit) =
      fun (x12205 : 'tags this) ->
        fun (x12206 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12205) "title"
            (Ojs.string_to_js x12206)
    let (create : action:string -> ?icon:string -> title:string -> unit -> t)
      =
      fun ~action:(x12208 : string) ->
        fun ?icon:(x12209 : string option) ->
          fun ~title:(x12210 : string) ->
            fun () ->
              let x12211 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x12211 "action" (Ojs.string_to_js x12208);
              (match x12209 with
               | Some x12212 ->
                   Ojs.set_prop_ascii x12211 "icon" (Ojs.string_to_js x12212)
               | None -> ());
              Ojs.set_prop_ascii x12211 "title" (Ojs.string_to_js x12210);
              t_of_js x12211
    let cast_from = Obj.magic
  end
module NotificationDirection =
  struct
    type t = [ `L_s110_ltr  | `L_s174_rtl  | `L_s41_auto ]
    let rec t_of_js : Ojs.t -> t =
      fun (x12214 : Ojs.t) ->
        let x12215 = x12214 in
        match Ojs.string_of_js x12215 with
        | "ltr" -> `L_s110_ltr
        | "rtl" -> `L_s174_rtl
        | "auto" -> `L_s41_auto
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x12213 : [ `L_s110_ltr  | `L_s174_rtl  | `L_s41_auto ]) ->
        match x12213 with
        | `L_s110_ltr -> Ojs.string_to_js "ltr"
        | `L_s174_rtl -> Ojs.string_to_js "rtl"
        | `L_s41_auto -> Ojs.string_to_js "auto"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12217 : Ojs.t) -> t_of_js x12217
    and t_0_to_js : t_0 -> Ojs.t = fun (x12216 : t) -> t_to_js x12216
  end
module EpochTimeStamp =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x12219 : Ojs.t) -> Ojs.float_of_js x12219
    and t_to_js : t -> Ojs.t = fun (x12218 : float) -> Ojs.float_to_js x12218
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12221 : Ojs.t) -> t_of_js x12221
    and t_0_to_js : t_0 -> Ojs.t = fun (x12220 : t) -> t_to_js x12220
  end
module NotificationOptions =
  struct
    type t = [ `NotificationOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12223 : Ojs.t) -> t_of_js x12223
    and t_0_to_js : t_0 -> Ojs.t = fun (x12222 : t) -> t_to_js x12222
    type tags = [ `NotificationOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NotificationOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12226 : Ojs.t) -> intf_of_js __tags_of_js x12226
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12224 : __tags intf) -> intf_to_js __tags_to_js x12224
    let (get_actions : 'tags this -> NotificationAction.t list option) =
      fun (x12228 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12230 : Ojs.t) ->
             Ojs.list_of_js NotificationAction.t_of_js x12230)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12228) "actions")
    let (set_actions : 'tags this -> NotificationAction.t list -> unit) =
      fun (x12232 : 'tags this) ->
        fun (x12233 : NotificationAction.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12232) "actions"
            (Ojs.list_to_js NotificationAction.t_to_js x12233)
    let (get_badge : 'tags this -> string option) =
      fun (x12236 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12236) "badge")
    let (set_badge : 'tags this -> string -> unit) =
      fun (x12239 : 'tags this) ->
        fun (x12240 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12239) "badge"
            (Ojs.string_to_js x12240)
    let (get_body : 'tags this -> string option) =
      fun (x12242 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12242) "body")
    let (set_body : 'tags this -> string -> unit) =
      fun (x12245 : 'tags this) ->
        fun (x12246 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12245) "body"
            (Ojs.string_to_js x12246)
    let (get_data : 'tags this -> any option) =
      fun (x12248 : 'tags this) ->
        Ojs.option_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12248) "data")
    let (set_data : 'tags this -> any -> unit) =
      fun (x12251 : 'tags this) ->
        fun (x12252 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12251) "data"
            (any_to_js x12252)
    let (get_dir : 'tags this -> NotificationDirection.t option) =
      fun (x12254 : 'tags this) ->
        Ojs.option_of_js NotificationDirection.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12254) "dir")
    let (set_dir : 'tags this -> NotificationDirection.t -> unit) =
      fun (x12257 : 'tags this) ->
        fun (x12258 : NotificationDirection.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12257) "dir"
            (NotificationDirection.t_to_js x12258)
    let (get_icon : 'tags this -> string option) =
      fun (x12260 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12260) "icon")
    let (set_icon : 'tags this -> string -> unit) =
      fun (x12263 : 'tags this) ->
        fun (x12264 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12263) "icon"
            (Ojs.string_to_js x12264)
    let (get_image : 'tags this -> string option) =
      fun (x12266 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12266) "image")
    let (set_image : 'tags this -> string -> unit) =
      fun (x12269 : 'tags this) ->
        fun (x12270 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12269) "image"
            (Ojs.string_to_js x12270)
    let (get_lang : 'tags this -> string option) =
      fun (x12272 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12272) "lang")
    let (set_lang : 'tags this -> string -> unit) =
      fun (x12275 : 'tags this) ->
        fun (x12276 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12275) "lang"
            (Ojs.string_to_js x12276)
    let (get_renotify : 'tags this -> bool option) =
      fun (x12278 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12278) "renotify")
    let (set_renotify : 'tags this -> bool -> unit) =
      fun (x12281 : 'tags this) ->
        fun (x12282 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12281) "renotify"
            (Ojs.bool_to_js x12282)
    let (get_requireInteraction : 'tags this -> bool option) =
      fun (x12284 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12284)
             "requireInteraction")
    let (set_requireInteraction : 'tags this -> bool -> unit) =
      fun (x12287 : 'tags this) ->
        fun (x12288 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12287)
            "requireInteraction" (Ojs.bool_to_js x12288)
    let (get_silent : 'tags this -> bool option) =
      fun (x12290 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12290) "silent")
    let (set_silent : 'tags this -> bool -> unit) =
      fun (x12293 : 'tags this) ->
        fun (x12294 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12293) "silent"
            (Ojs.bool_to_js x12294)
    let (get_tag : 'tags this -> string option) =
      fun (x12296 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12296) "tag")
    let (set_tag : 'tags this -> string -> unit) =
      fun (x12299 : 'tags this) ->
        fun (x12300 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12299) "tag"
            (Ojs.string_to_js x12300)
    let (get_timestamp : 'tags this -> EpochTimeStamp.t option) =
      fun (x12302 : 'tags this) ->
        Ojs.option_of_js EpochTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12302) "timestamp")
    let (set_timestamp : 'tags this -> EpochTimeStamp.t -> unit) =
      fun (x12305 : 'tags this) ->
        fun (x12306 : EpochTimeStamp.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12305) "timestamp"
            (EpochTimeStamp.t_to_js x12306)
    let (get_vibrate : 'tags this -> VibratePattern.t option) =
      fun (x12308 : 'tags this) ->
        Ojs.option_of_js VibratePattern.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12308) "vibrate")
    let (set_vibrate : 'tags this -> VibratePattern.t -> unit) =
      fun (x12311 : 'tags this) ->
        fun (x12312 : VibratePattern.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12311) "vibrate"
            (VibratePattern.t_to_js x12312)
    let (create :
      ?actions:NotificationAction.t list ->
        ?badge:string ->
          ?body:string ->
            ?data:any ->
              ?dir:NotificationDirection.t ->
                ?icon:string ->
                  ?image:string ->
                    ?lang:string ->
                      ?renotify:bool ->
                        ?requireInteraction:bool ->
                          ?silent:bool ->
                            ?tag:string ->
                              ?timestamp:EpochTimeStamp.t ->
                                ?vibrate:VibratePattern.t -> unit -> t)
      =
      fun ?actions:(x12314 : NotificationAction.t list option) ->
        fun ?badge:(x12315 : string option) ->
          fun ?body:(x12316 : string option) ->
            fun ?data:(x12317 : any option) ->
              fun ?dir:(x12318 : NotificationDirection.t option) ->
                fun ?icon:(x12319 : string option) ->
                  fun ?image:(x12320 : string option) ->
                    fun ?lang:(x12321 : string option) ->
                      fun ?renotify:(x12322 : bool option) ->
                        fun ?requireInteraction:(x12323 : bool option) ->
                          fun ?silent:(x12324 : bool option) ->
                            fun ?tag:(x12325 : string option) ->
                              fun
                                ?timestamp:(x12326 : EpochTimeStamp.t option)
                                ->
                                fun
                                  ?vibrate:(x12327 : VibratePattern.t option)
                                  ->
                                  fun () ->
                                    let x12328 = Ojs.empty_obj () in
                                    (match x12314 with
                                     | Some x12342 ->
                                         Ojs.set_prop_ascii x12328 "actions"
                                           (Ojs.list_to_js
                                              NotificationAction.t_to_js
                                              x12342)
                                     | None -> ());
                                    (match x12315 with
                                     | Some x12341 ->
                                         Ojs.set_prop_ascii x12328 "badge"
                                           (Ojs.string_to_js x12341)
                                     | None -> ());
                                    (match x12316 with
                                     | Some x12340 ->
                                         Ojs.set_prop_ascii x12328 "body"
                                           (Ojs.string_to_js x12340)
                                     | None -> ());
                                    (match x12317 with
                                     | Some x12339 ->
                                         Ojs.set_prop_ascii x12328 "data"
                                           (any_to_js x12339)
                                     | None -> ());
                                    (match x12318 with
                                     | Some x12338 ->
                                         Ojs.set_prop_ascii x12328 "dir"
                                           (NotificationDirection.t_to_js
                                              x12338)
                                     | None -> ());
                                    (match x12319 with
                                     | Some x12337 ->
                                         Ojs.set_prop_ascii x12328 "icon"
                                           (Ojs.string_to_js x12337)
                                     | None -> ());
                                    (match x12320 with
                                     | Some x12336 ->
                                         Ojs.set_prop_ascii x12328 "image"
                                           (Ojs.string_to_js x12336)
                                     | None -> ());
                                    (match x12321 with
                                     | Some x12335 ->
                                         Ojs.set_prop_ascii x12328 "lang"
                                           (Ojs.string_to_js x12335)
                                     | None -> ());
                                    (match x12322 with
                                     | Some x12334 ->
                                         Ojs.set_prop_ascii x12328 "renotify"
                                           (Ojs.bool_to_js x12334)
                                     | None -> ());
                                    (match x12323 with
                                     | Some x12333 ->
                                         Ojs.set_prop_ascii x12328
                                           "requireInteraction"
                                           (Ojs.bool_to_js x12333)
                                     | None -> ());
                                    (match x12324 with
                                     | Some x12332 ->
                                         Ojs.set_prop_ascii x12328 "silent"
                                           (Ojs.bool_to_js x12332)
                                     | None -> ());
                                    (match x12325 with
                                     | Some x12331 ->
                                         Ojs.set_prop_ascii x12328 "tag"
                                           (Ojs.string_to_js x12331)
                                     | None -> ());
                                    (match x12326 with
                                     | Some x12330 ->
                                         Ojs.set_prop_ascii x12328
                                           "timestamp"
                                           (EpochTimeStamp.t_to_js x12330)
                                     | None -> ());
                                    (match x12327 with
                                     | Some x12329 ->
                                         Ojs.set_prop_ascii x12328 "vibrate"
                                           (VibratePattern.t_to_js x12329)
                                     | None -> ());
                                    t_of_js x12328
    let cast_from = Obj.magic
  end
module Notification =
  struct
    type t = [ `EventTarget  | `Notification ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12345 : Ojs.t) -> t_of_js x12345
    and t_0_to_js : t_0 -> Ojs.t = fun (x12344 : t) -> t_to_js x12344
    type tags = [ `EventTarget  | `Notification ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Notification ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12348 : Ojs.t) -> intf_of_js __tags_of_js x12348
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12346 : __tags intf) -> intf_to_js __tags_to_js x12346
    let (get_body : 'tags this -> string) =
      fun (x12350 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12350) "body")
    let (get_data : 'tags this -> any) =
      fun (x12352 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x12352) "data")
    let (get_dir : 'tags this -> NotificationDirection.t) =
      fun (x12354 : 'tags this) ->
        NotificationDirection.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12354) "dir")
    let (get_icon : 'tags this -> string) =
      fun (x12356 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12356) "icon")
    let (get_lang : 'tags this -> string) =
      fun (x12358 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12358) "lang")
    let (get_onclick : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x12360 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12362 : Ojs.t) ->
             fun ~this:(x12363 : t) ->
               fun ~ev:(x12364 : Event.t) ->
                 any_of_js
                   (Ojs.apply x12362
                      [|(t_to_js x12363);(Event.t_to_js x12364)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12360) "onclick")
    let (set_onclick :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x12365 : 'tags this) ->
        fun (x12366 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12365) "onclick"
            (Ojs.option_to_js
               (fun (x12367 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12368 : Ojs.t) ->
                       fun (x12369 : Ojs.t) ->
                         any_to_js
                           (x12367 ~this:(t_of_js x12368)
                              ~ev:(Event.t_of_js x12369)))) x12366)
    let (get_onclose : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x12371 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12373 : Ojs.t) ->
             fun ~this:(x12374 : t) ->
               fun ~ev:(x12375 : Event.t) ->
                 any_of_js
                   (Ojs.apply x12373
                      [|(t_to_js x12374);(Event.t_to_js x12375)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12371) "onclose")
    let (set_onclose :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x12376 : 'tags this) ->
        fun (x12377 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12376) "onclose"
            (Ojs.option_to_js
               (fun (x12378 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12379 : Ojs.t) ->
                       fun (x12380 : Ojs.t) ->
                         any_to_js
                           (x12378 ~this:(t_of_js x12379)
                              ~ev:(Event.t_of_js x12380)))) x12377)
    let (get_onerror : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x12382 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12384 : Ojs.t) ->
             fun ~this:(x12385 : t) ->
               fun ~ev:(x12386 : Event.t) ->
                 any_of_js
                   (Ojs.apply x12384
                      [|(t_to_js x12385);(Event.t_to_js x12386)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12382) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x12387 : 'tags this) ->
        fun (x12388 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12387) "onerror"
            (Ojs.option_to_js
               (fun (x12389 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12390 : Ojs.t) ->
                       fun (x12391 : Ojs.t) ->
                         any_to_js
                           (x12389 ~this:(t_of_js x12390)
                              ~ev:(Event.t_of_js x12391)))) x12388)
    let (get_onshow : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x12393 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12395 : Ojs.t) ->
             fun ~this:(x12396 : t) ->
               fun ~ev:(x12397 : Event.t) ->
                 any_of_js
                   (Ojs.apply x12395
                      [|(t_to_js x12396);(Event.t_to_js x12397)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12393) "onshow")
    let (set_onshow :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x12398 : 'tags this) ->
        fun (x12399 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12398) "onshow"
            (Ojs.option_to_js
               (fun (x12400 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12401 : Ojs.t) ->
                       fun (x12402 : Ojs.t) ->
                         any_to_js
                           (x12400 ~this:(t_of_js x12401)
                              ~ev:(Event.t_of_js x12402)))) x12399)
    let (get_tag : 'tags this -> string) =
      fun (x12404 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12404) "tag")
    let (get_title : 'tags this -> string) =
      fun (x12406 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12406) "title")
    let (close : 'tags this -> unit) =
      fun (x12408 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x12408) "close" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12419 : 'tags this) ->
        fun ~type_:(x12410 : 'K) ->
          fun ~listener:(x12411 : this:t -> ev:any -> any) ->
            fun
              ?options:(x12412 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12421 = this_to_js Obj.magic x12419 in
                   Ojs.call (Ojs.get_prop_ascii x12421 "addEventListener")
                     "apply"
                     [|x12421;((let x12413 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12413 "push"
                                     [|(Obj.magic x12410)|]);
                                ignore
                                  (Ojs.call x12413 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12417 : Ojs.t) ->
                                             fun (x12418 : Ojs.t) ->
                                               any_to_js
                                                 (x12411
                                                    ~this:(t_of_js x12417)
                                                    ~ev:(any_of_js x12418))))|]);
                                (match x12412 with
                                 | Some x12414 ->
                                     ignore
                                       (Ojs.call x12413 "push"
                                          [|((match x12414 with
                                              | `U1 x12415 ->
                                                  Ojs.bool_to_js x12415
                                              | `U2 x12416 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x12416))|])
                                 | None -> ());
                                x12413))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12429 : 'tags this) ->
        fun ~type_:(x12422 : string) ->
          fun ~listener:(x12423 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x12424 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12431 = this_to_js Obj.magic x12429 in
                   Ojs.call (Ojs.get_prop_ascii x12431 "addEventListener")
                     "apply"
                     [|x12431;((let x12425 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12425 "push"
                                     [|(Ojs.string_to_js x12422)|]);
                                ignore
                                  (Ojs.call x12425 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12423)|]);
                                (match x12424 with
                                 | Some x12426 ->
                                     ignore
                                       (Ojs.call x12425 "push"
                                          [|((match x12426 with
                                              | `U1 x12427 ->
                                                  Ojs.bool_to_js x12427
                                              | `U2 x12428 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x12428))|])
                                 | None -> ());
                                x12425))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12441 : 'tags this) ->
        fun ~type_:(x12432 : 'K) ->
          fun ~listener:(x12433 : this:t -> ev:any -> any) ->
            fun
              ?options:(x12434 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12443 = this_to_js Obj.magic x12441 in
                   Ojs.call (Ojs.get_prop_ascii x12443 "removeEventListener")
                     "apply"
                     [|x12443;((let x12435 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12435 "push"
                                     [|(Obj.magic x12432)|]);
                                ignore
                                  (Ojs.call x12435 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12439 : Ojs.t) ->
                                             fun (x12440 : Ojs.t) ->
                                               any_to_js
                                                 (x12433
                                                    ~this:(t_of_js x12439)
                                                    ~ev:(any_of_js x12440))))|]);
                                (match x12434 with
                                 | Some x12436 ->
                                     ignore
                                       (Ojs.call x12435 "push"
                                          [|((match x12436 with
                                              | `U1 x12437 ->
                                                  Ojs.bool_to_js x12437
                                              | `U2 x12438 ->
                                                  EventListenerOptions.t_to_js
                                                    x12438))|])
                                 | None -> ());
                                x12435))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12451 : 'tags this) ->
        fun ~type_:(x12444 : string) ->
          fun ~listener:(x12445 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x12446 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12453 = this_to_js Obj.magic x12451 in
                   Ojs.call (Ojs.get_prop_ascii x12453 "removeEventListener")
                     "apply"
                     [|x12453;((let x12447 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12447 "push"
                                     [|(Ojs.string_to_js x12444)|]);
                                ignore
                                  (Ojs.call x12447 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12445)|]);
                                (match x12446 with
                                 | Some x12448 ->
                                     ignore
                                       (Ojs.call x12447 "push"
                                          [|((match x12448 with
                                              | `U1 x12449 ->
                                                  Ojs.bool_to_js x12449
                                              | `U2 x12450 ->
                                                  EventListenerOptions.t_to_js
                                                    x12450))|])
                                 | None -> ());
                                x12447))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Notification")
             "prototype")
    let (create :
      title:string -> ?options:NotificationOptions.t -> unit -> t) =
      fun ~title:(x12454 : string) ->
        fun ?options:(x12455 : NotificationOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Notification")
                 (let x12456 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x12456 "push" [|(Ojs.string_to_js x12454)|]);
                  (match x12455 with
                   | Some x12457 ->
                       ignore
                         (Ojs.call x12456 "push"
                            [|(NotificationOptions.t_to_js x12457)|])
                   | None -> ());
                  x12456))
    let (permission : unit -> NotificationPermission.t) =
      fun () ->
        NotificationPermission.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Notification")
             "permission")
  end
module NotificationEventInit =
  struct
    type t =
      [ `EventInit  | `ExtendableEventInit  | `NotificationEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12459 : Ojs.t) -> t_of_js x12459
    and t_0_to_js : t_0 -> Ojs.t = fun (x12458 : t) -> t_to_js x12458
    type tags =
      [ `EventInit  | `ExtendableEventInit  | `NotificationEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `NotificationEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12462 : Ojs.t) -> intf_of_js __tags_of_js x12462
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12460 : __tags intf) -> intf_to_js __tags_to_js x12460
    let (get_action : 'tags this -> string option) =
      fun (x12464 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12464) "action")
    let (set_action : 'tags this -> string -> unit) =
      fun (x12467 : 'tags this) ->
        fun (x12468 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12467) "action"
            (Ojs.string_to_js x12468)
    let (get_notification : 'tags this -> Notification.t) =
      fun (x12470 : 'tags this) ->
        Notification.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12470) "notification")
    let (set_notification : 'tags this -> Notification.t -> unit) =
      fun (x12472 : 'tags this) ->
        fun (x12473 : Notification.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12472) "notification"
            (Notification.t_to_js x12473)
    let (create : ?action:string -> notification:Notification.t -> unit -> t)
      =
      fun ?action:(x12475 : string option) ->
        fun ~notification:(x12476 : Notification.t) ->
          fun () ->
            let x12477 = Ojs.empty_obj () in
            (match x12475 with
             | Some x12478 ->
                 Ojs.set_prop_ascii x12477 "action" (Ojs.string_to_js x12478)
             | None -> ());
            Ojs.set_prop_ascii x12477 "notification"
              (Notification.t_to_js x12476);
            t_of_js x12477
    let cast_from = Obj.magic
  end
module NotificationEvent =
  struct
    type t = [ `Event  | `ExtendableEvent  | `NotificationEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12480 : Ojs.t) -> t_of_js x12480
    and t_0_to_js : t_0 -> Ojs.t = fun (x12479 : t) -> t_to_js x12479
    type tags = [ `Event  | `ExtendableEvent  | `NotificationEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NotificationEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12483 : Ojs.t) -> intf_of_js __tags_of_js x12483
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12481 : __tags intf) -> intf_to_js __tags_to_js x12481
    let (get_action : 'tags this -> string) =
      fun (x12485 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12485) "action")
    let (get_notification : 'tags this -> Notification.t) =
      fun (x12487 : 'tags this) ->
        Notification.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12487) "notification")
    let (create : action:string -> notification:Notification.t -> unit -> t)
      =
      fun ~action:(x12489 : string) ->
        fun ~notification:(x12490 : Notification.t) ->
          fun () ->
            let x12491 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x12491 "action" (Ojs.string_to_js x12489);
            Ojs.set_prop_ascii x12491 "notification"
              (Notification.t_to_js x12490);
            t_of_js x12491
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "NotificationEvent") "prototype")
    let (create' :
      type_:string -> eventInitDict:NotificationEventInit.t -> t) =
      fun ~type_:(x12492 : string) ->
        fun ~eventInitDict:(x12493 : NotificationEventInit.t) ->
          t_of_js
            (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "NotificationEvent")
               [|(Ojs.string_to_js x12492);(NotificationEventInit.t_to_js
                                              x12493)|])
  end
module FetchEventInit =
  struct
    type t = [ `EventInit  | `ExtendableEventInit  | `FetchEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12495 : Ojs.t) -> t_of_js x12495
    and t_0_to_js : t_0 -> Ojs.t = fun (x12494 : t) -> t_to_js x12494
    type tags = [ `EventInit  | `ExtendableEventInit  | `FetchEventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FetchEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12498 : Ojs.t) -> intf_of_js __tags_of_js x12498
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12496 : __tags intf) -> intf_to_js __tags_to_js x12496
    let (get_clientId : 'tags this -> string option) =
      fun (x12500 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12500) "clientId")
    let (set_clientId : 'tags this -> string -> unit) =
      fun (x12503 : 'tags this) ->
        fun (x12504 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12503) "clientId"
            (Ojs.string_to_js x12504)
    let (get_handled : 'tags this -> undefined Promise.t_1 option) =
      fun (x12506 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12508 : Ojs.t) -> Promise.t_1_of_js undefined_of_js x12508)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12506) "handled")
    let (set_handled : 'tags this -> undefined Promise.t_1 -> unit) =
      fun (x12510 : 'tags this) ->
        fun (x12511 : undefined Promise.t_1) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12510) "handled"
            (Promise.t_1_to_js undefined_to_js x12511)
    let (get_preloadResponse : 'tags this -> any Promise.t_1 option) =
      fun (x12514 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12516 : Ojs.t) -> Promise.t_1_of_js any_of_js x12516)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12514) "preloadResponse")
    let (set_preloadResponse : 'tags this -> any Promise.t_1 -> unit) =
      fun (x12518 : 'tags this) ->
        fun (x12519 : any Promise.t_1) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12518) "preloadResponse"
            (Promise.t_1_to_js any_to_js x12519)
    let (get_replacesClientId : 'tags this -> string option) =
      fun (x12522 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12522)
             "replacesClientId")
    let (set_replacesClientId : 'tags this -> string -> unit) =
      fun (x12525 : 'tags this) ->
        fun (x12526 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12525) "replacesClientId"
            (Ojs.string_to_js x12526)
    let (get_request : 'tags this -> Request.t) =
      fun (x12528 : 'tags this) ->
        Request.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12528) "request")
    let (set_request : 'tags this -> Request.t -> unit) =
      fun (x12530 : 'tags this) ->
        fun (x12531 : Request.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12530) "request"
            (Request.t_to_js x12531)
    let (get_resultingClientId : 'tags this -> string option) =
      fun (x12533 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12533)
             "resultingClientId")
    let (set_resultingClientId : 'tags this -> string -> unit) =
      fun (x12536 : 'tags this) ->
        fun (x12537 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12536)
            "resultingClientId" (Ojs.string_to_js x12537)
    let (create :
      ?clientId:string ->
        ?handled:undefined Promise.t_1 ->
          ?preloadResponse:any Promise.t_1 ->
            ?replacesClientId:string ->
              request:Request.t -> ?resultingClientId:string -> unit -> t)
      =
      fun ?clientId:(x12539 : string option) ->
        fun ?handled:(x12540 : undefined Promise.t_1 option) ->
          fun ?preloadResponse:(x12541 : any Promise.t_1 option) ->
            fun ?replacesClientId:(x12542 : string option) ->
              fun ~request:(x12543 : Request.t) ->
                fun ?resultingClientId:(x12544 : string option) ->
                  fun () ->
                    let x12545 = Ojs.empty_obj () in
                    (match x12539 with
                     | Some x12552 ->
                         Ojs.set_prop_ascii x12545 "clientId"
                           (Ojs.string_to_js x12552)
                     | None -> ());
                    (match x12540 with
                     | Some x12550 ->
                         Ojs.set_prop_ascii x12545 "handled"
                           (Promise.t_1_to_js undefined_to_js x12550)
                     | None -> ());
                    (match x12541 with
                     | Some x12548 ->
                         Ojs.set_prop_ascii x12545 "preloadResponse"
                           (Promise.t_1_to_js any_to_js x12548)
                     | None -> ());
                    (match x12542 with
                     | Some x12547 ->
                         Ojs.set_prop_ascii x12545 "replacesClientId"
                           (Ojs.string_to_js x12547)
                     | None -> ());
                    Ojs.set_prop_ascii x12545 "request"
                      (Request.t_to_js x12543);
                    (match x12544 with
                     | Some x12546 ->
                         Ojs.set_prop_ascii x12545 "resultingClientId"
                           (Ojs.string_to_js x12546)
                     | None -> ());
                    t_of_js x12545
    let cast_from = Obj.magic
  end
module FetchEvent =
  struct
    type t = [ `Event  | `ExtendableEvent  | `FetchEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12554 : Ojs.t) -> t_of_js x12554
    and t_0_to_js : t_0 -> Ojs.t = fun (x12553 : t) -> t_to_js x12553
    type tags = [ `Event  | `ExtendableEvent  | `FetchEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FetchEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12557 : Ojs.t) -> intf_of_js __tags_of_js x12557
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12555 : __tags intf) -> intf_to_js __tags_to_js x12555
    let (get_clientId : 'tags this -> string) =
      fun (x12559 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12559) "clientId")
    let (get_handled : 'tags this -> undefined Promise.t_1) =
      fun (x12561 : 'tags this) ->
        Promise.t_1_of_js undefined_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12561) "handled")
    let (get_request : 'tags this -> Request.t) =
      fun (x12564 : 'tags this) ->
        Request.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12564) "request")
    let (get_resultingClientId : 'tags this -> string) =
      fun (x12566 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12566)
             "resultingClientId")
    let (respondWith :
      'tags this ->
        r:[ `U1 of Response.t  | `U2 of Response.t PromiseLike.t_1 ] -> unit)
      =
      fun (x12572 : 'tags this) ->
        fun
          ~r:(x12568 :
               [ `U1 of Response.t  | `U2 of Response.t PromiseLike.t_1 ])
          ->
          ignore
            (Ojs.call (this_to_js Obj.magic x12572) "respondWith"
               [|((match x12568 with
                   | `U1 x12569 -> Response.t_to_js x12569
                   | `U2 x12570 ->
                       PromiseLike.t_1_to_js Response.t_to_js x12570))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FetchEvent")
             "prototype")
    let (create : type_:string -> eventInitDict:FetchEventInit.t -> t) =
      fun ~type_:(x12574 : string) ->
        fun ~eventInitDict:(x12575 : FetchEventInit.t) ->
          t_of_js
            (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FetchEvent")
               [|(Ojs.string_to_js x12574);(FetchEventInit.t_to_js x12575)|])
  end
module FrameType =
  struct
    type t =
      [ `L_s122_nested  | `L_s130_none  | `L_s197_top_level 
      | `L_s42_auxiliary ]
    let rec t_of_js : Ojs.t -> t =
      fun (x12577 : Ojs.t) ->
        let x12578 = x12577 in
        match Ojs.string_of_js x12578 with
        | "nested" -> `L_s122_nested
        | "none" -> `L_s130_none
        | "top-level" -> `L_s197_top_level
        | "auxiliary" -> `L_s42_auxiliary
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x12576 :
          [ `L_s122_nested  | `L_s130_none  | `L_s197_top_level 
          | `L_s42_auxiliary ])
        ->
        match x12576 with
        | `L_s122_nested -> Ojs.string_to_js "nested"
        | `L_s130_none -> Ojs.string_to_js "none"
        | `L_s197_top_level -> Ojs.string_to_js "top-level"
        | `L_s42_auxiliary -> Ojs.string_to_js "auxiliary"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12580 : Ojs.t) -> t_of_js x12580
    and t_0_to_js : t_0 -> Ojs.t = fun (x12579 : t) -> t_to_js x12579
  end
module ClientTypes =
  struct
    type t =
      [ `L_s180_sharedworker  | `L_s214_window  | `L_s215_worker 
      | `L_s35_all ]
    let rec t_of_js : Ojs.t -> t =
      fun (x12582 : Ojs.t) ->
        let x12583 = x12582 in
        match Ojs.string_of_js x12583 with
        | "sharedworker" -> `L_s180_sharedworker
        | "window" -> `L_s214_window
        | "worker" -> `L_s215_worker
        | "all" -> `L_s35_all
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x12581 :
          [ `L_s180_sharedworker  | `L_s214_window  | `L_s215_worker 
          | `L_s35_all ])
        ->
        match x12581 with
        | `L_s180_sharedworker -> Ojs.string_to_js "sharedworker"
        | `L_s214_window -> Ojs.string_to_js "window"
        | `L_s215_worker -> Ojs.string_to_js "worker"
        | `L_s35_all -> Ojs.string_to_js "all"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12585 : Ojs.t) -> t_of_js x12585
    and t_0_to_js : t_0 -> Ojs.t = fun (x12584 : t) -> t_to_js x12584
  end
module Client =
  struct
    type t = [ `Client ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12587 : Ojs.t) -> t_of_js x12587
    and t_0_to_js : t_0 -> Ojs.t = fun (x12586 : t) -> t_to_js x12586
    type tags = [ `Client ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Client ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12590 : Ojs.t) -> intf_of_js __tags_of_js x12590
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12588 : __tags intf) -> intf_to_js __tags_to_js x12588
    let (get_frameType : 'tags this -> FrameType.t) =
      fun (x12592 : 'tags this) ->
        FrameType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12592) "frameType")
    let (get_id : 'tags this -> string) =
      fun (x12594 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12594) "id")
    let (get_type : 'tags this -> ClientTypes.t) =
      fun (x12596 : 'tags this) ->
        ClientTypes.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12596) "type")
    let (get_url : 'tags this -> string) =
      fun (x12598 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12598) "url")
    let (postMessage :
      'tags this -> message:any -> transfer:Transferable.t list -> unit) =
      fun (x12603 : 'tags this) ->
        fun ~message:(x12600 : any) ->
          fun ~transfer:(x12601 : Transferable.t list) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x12603) "postMessage"
                 [|(any_to_js x12600);(Ojs.list_to_js Transferable.t_to_js
                                         x12601)|])
    let (postMessage' :
      'tags this ->
        message:any -> ?options:StructuredSerializeOptions.t -> unit -> unit)
      =
      fun (x12609 : 'tags this) ->
        fun ~message:(x12605 : any) ->
          fun ?options:(x12606 : StructuredSerializeOptions.t option) ->
            fun () ->
              ignore
                (let x12611 = this_to_js Obj.magic x12609 in
                 Ojs.call (Ojs.get_prop_ascii x12611 "postMessage") "apply"
                   [|x12611;((let x12607 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x12607 "push"
                                   [|(any_to_js x12605)|]);
                              (match x12606 with
                               | Some x12608 ->
                                   ignore
                                     (Ojs.call x12607 "push"
                                        [|(StructuredSerializeOptions.t_to_js
                                             x12608)|])
                               | None -> ());
                              x12607))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Client")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Client") [||])
  end
module ExtendableMessageEventInit =
  struct
    type t =
      [ `EventInit  | `ExtendableEventInit  | `ExtendableMessageEventInit ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12613 : Ojs.t) -> t_of_js x12613
    and t_0_to_js : t_0 -> Ojs.t = fun (x12612 : t) -> t_to_js x12612
    type tags =
      [ `EventInit  | `ExtendableEventInit  | `ExtendableMessageEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ExtendableMessageEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12616 : Ojs.t) -> intf_of_js __tags_of_js x12616
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12614 : __tags intf) -> intf_to_js __tags_to_js x12614
    let (get_data : 'tags this -> any option) =
      fun (x12618 : 'tags this) ->
        Ojs.option_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12618) "data")
    let (set_data : 'tags this -> any -> unit) =
      fun (x12621 : 'tags this) ->
        fun (x12622 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12621) "data"
            (any_to_js x12622)
    let (get_lastEventId : 'tags this -> string option) =
      fun (x12624 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12624) "lastEventId")
    let (set_lastEventId : 'tags this -> string -> unit) =
      fun (x12627 : 'tags this) ->
        fun (x12628 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12627) "lastEventId"
            (Ojs.string_to_js x12628)
    let (get_origin : 'tags this -> string option) =
      fun (x12630 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12630) "origin")
    let (set_origin : 'tags this -> string -> unit) =
      fun (x12633 : 'tags this) ->
        fun (x12634 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12633) "origin"
            (Ojs.string_to_js x12634)
    let (get_ports : 'tags this -> MessagePort.t list option) =
      fun (x12636 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12638 : Ojs.t) -> Ojs.list_of_js MessagePort.t_of_js x12638)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12636) "ports")
    let (set_ports : 'tags this -> MessagePort.t list -> unit) =
      fun (x12640 : 'tags this) ->
        fun (x12641 : MessagePort.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12640) "ports"
            (Ojs.list_to_js MessagePort.t_to_js x12641)
    let (get_source :
      'tags this ->
        (Client.t, MessagePort.t, ServiceWorker.t) union3 option option)
      =
      fun (x12644 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12646 : Ojs.t) ->
             Ojs.option_of_js
               (fun (x12647 : Ojs.t) ->
                  union3_of_js Client.t_of_js MessagePort.t_of_js
                    ServiceWorker.t_of_js x12647) x12646)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12644) "source")
    let (set_source :
      'tags this ->
        [ `Null  | `U1 of Client.t  | `U2 of ServiceWorker.t 
        | `U3 of MessagePort.t ] -> unit)
      =
      fun (x12651 : 'tags this) ->
        fun
          (x12652 :
            [ `Null  | `U1 of Client.t  | `U2 of ServiceWorker.t 
            | `U3 of MessagePort.t ])
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12651) "source"
            (match x12652 with
             | `Null -> Ojs.null
             | `U1 x12653 -> Client.t_to_js x12653
             | `U2 x12654 -> ServiceWorker.t_to_js x12654
             | `U3 x12655 -> MessagePort.t_to_js x12655)
    let (create :
      ?data:any ->
        ?lastEventId:string ->
          ?origin:string ->
            ?ports:MessagePort.t list ->
              ?source:(Client.t, MessagePort.t, ServiceWorker.t) union3 ->
                unit -> t)
      =
      fun ?data:(x12657 : any option) ->
        fun ?lastEventId:(x12658 : string option) ->
          fun ?origin:(x12659 : string option) ->
            fun ?ports:(x12660 : MessagePort.t list option) ->
              fun
                ?source:(x12661 :
                          (Client.t, MessagePort.t, ServiceWorker.t) union3
                            option)
                ->
                fun () ->
                  let x12662 = Ojs.empty_obj () in
                  (match x12657 with
                   | Some x12671 ->
                       Ojs.set_prop_ascii x12662 "data" (any_to_js x12671)
                   | None -> ());
                  (match x12658 with
                   | Some x12670 ->
                       Ojs.set_prop_ascii x12662 "lastEventId"
                         (Ojs.string_to_js x12670)
                   | None -> ());
                  (match x12659 with
                   | Some x12669 ->
                       Ojs.set_prop_ascii x12662 "origin"
                         (Ojs.string_to_js x12669)
                   | None -> ());
                  (match x12660 with
                   | Some x12667 ->
                       Ojs.set_prop_ascii x12662 "ports"
                         (Ojs.list_to_js MessagePort.t_to_js x12667)
                   | None -> ());
                  (match x12661 with
                   | Some x12663 ->
                       Ojs.set_prop_ascii x12662 "source"
                         (union3_to_js Client.t_to_js MessagePort.t_to_js
                            ServiceWorker.t_to_js x12663)
                   | None -> ());
                  t_of_js x12662
    let cast_from = Obj.magic
  end
module ExtendableMessageEvent =
  struct
    type t = [ `Event  | `ExtendableEvent  | `ExtendableMessageEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12673 : Ojs.t) -> t_of_js x12673
    and t_0_to_js : t_0 -> Ojs.t = fun (x12672 : t) -> t_to_js x12672
    type tags = [ `Event  | `ExtendableEvent  | `ExtendableMessageEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ExtendableMessageEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12676 : Ojs.t) -> intf_of_js __tags_of_js x12676
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12674 : __tags intf) -> intf_to_js __tags_to_js x12674
    let (get_data : 'tags this -> any) =
      fun (x12678 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x12678) "data")
    let (get_lastEventId : 'tags this -> string) =
      fun (x12680 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12680) "lastEventId")
    let (get_origin : 'tags this -> string) =
      fun (x12682 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12682) "origin")
    let (get_ports : 'tags this -> MessagePort.t list) =
      fun (x12684 : 'tags this) ->
        Ojs.list_of_js MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12684) "ports")
    let (get_source :
      'tags this -> (Client.t, MessagePort.t, ServiceWorker.t) union3 option)
      =
      fun (x12687 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12689 : Ojs.t) ->
             union3_of_js Client.t_of_js MessagePort.t_of_js
               ServiceWorker.t_of_js x12689)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12687) "source")
    let (create :
      data:any ->
        lastEventId:string ->
          origin:string ->
            ports:MessagePort.t list ->
              ?source:(Client.t, MessagePort.t, ServiceWorker.t) union3 ->
                unit -> t)
      =
      fun ~data:(x12693 : any) ->
        fun ~lastEventId:(x12694 : string) ->
          fun ~origin:(x12695 : string) ->
            fun ~ports:(x12696 : MessagePort.t list) ->
              fun
                ?source:(x12697 :
                          (Client.t, MessagePort.t, ServiceWorker.t) union3
                            option)
                ->
                fun () ->
                  let x12698 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x12698 "data" (any_to_js x12693);
                  Ojs.set_prop_ascii x12698 "lastEventId"
                    (Ojs.string_to_js x12694);
                  Ojs.set_prop_ascii x12698 "origin"
                    (Ojs.string_to_js x12695);
                  Ojs.set_prop_ascii x12698 "ports"
                    (Ojs.list_to_js MessagePort.t_to_js x12696);
                  (match x12697 with
                   | Some x12699 ->
                       Ojs.set_prop_ascii x12698 "source"
                         (union3_to_js Client.t_to_js MessagePort.t_to_js
                            ServiceWorker.t_to_js x12699)
                   | None -> ());
                  t_of_js x12698
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ExtendableMessageEvent")
             "prototype")
    let (create' :
      type_:string ->
        ?eventInitDict:ExtendableMessageEventInit.t -> unit -> t)
      =
      fun ~type_:(x12704 : string) ->
        fun ?eventInitDict:(x12705 : ExtendableMessageEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "ExtendableMessageEvent")
                 (let x12706 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x12706 "push" [|(Ojs.string_to_js x12704)|]);
                  (match x12705 with
                   | Some x12707 ->
                       ignore
                         (Ojs.call x12706 "push"
                            [|(ExtendableMessageEventInit.t_to_js x12707)|])
                   | None -> ());
                  x12706))
  end
module ServiceWorkerGlobalScopeEventMap =
  struct
    type t =
      [ `ServiceWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12709 : Ojs.t) -> t_of_js x12709
    and t_0_to_js : t_0 -> Ojs.t = fun (x12708 : t) -> t_to_js x12708
    type tags =
      [ `ServiceWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerGlobalScopeEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12712 : Ojs.t) -> intf_of_js __tags_of_js x12712
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12710 : __tags intf) -> intf_to_js __tags_to_js x12710
    let (get_activate : 'tags this -> ExtendableEvent.t) =
      fun (x12714 : 'tags this) ->
        ExtendableEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12714) "activate")
    let (set_activate : 'tags this -> ExtendableEvent.t -> unit) =
      fun (x12716 : 'tags this) ->
        fun (x12717 : ExtendableEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12716) "activate"
            (ExtendableEvent.t_to_js x12717)
    let (get_fetch : 'tags this -> FetchEvent.t) =
      fun (x12719 : 'tags this) ->
        FetchEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12719) "fetch")
    let (set_fetch : 'tags this -> FetchEvent.t -> unit) =
      fun (x12721 : 'tags this) ->
        fun (x12722 : FetchEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12721) "fetch"
            (FetchEvent.t_to_js x12722)
    let (get_install : 'tags this -> ExtendableEvent.t) =
      fun (x12724 : 'tags this) ->
        ExtendableEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12724) "install")
    let (set_install : 'tags this -> ExtendableEvent.t -> unit) =
      fun (x12726 : 'tags this) ->
        fun (x12727 : ExtendableEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12726) "install"
            (ExtendableEvent.t_to_js x12727)
    let (get_message : 'tags this -> ExtendableMessageEvent.t) =
      fun (x12729 : 'tags this) ->
        ExtendableMessageEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12729) "message")
    let (set_message : 'tags this -> ExtendableMessageEvent.t -> unit) =
      fun (x12731 : 'tags this) ->
        fun (x12732 : ExtendableMessageEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12731) "message"
            (ExtendableMessageEvent.t_to_js x12732)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x12734 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12734) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x12736 : 'tags this) ->
        fun (x12737 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12736) "messageerror"
            (MessageEvent.t_0_to_js x12737)
    let (get_notificationclick : 'tags this -> NotificationEvent.t) =
      fun (x12739 : 'tags this) ->
        NotificationEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12739)
             "notificationclick")
    let (set_notificationclick : 'tags this -> NotificationEvent.t -> unit) =
      fun (x12741 : 'tags this) ->
        fun (x12742 : NotificationEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12741)
            "notificationclick" (NotificationEvent.t_to_js x12742)
    let (get_notificationclose : 'tags this -> NotificationEvent.t) =
      fun (x12744 : 'tags this) ->
        NotificationEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12744)
             "notificationclose")
    let (set_notificationclose : 'tags this -> NotificationEvent.t -> unit) =
      fun (x12746 : 'tags this) ->
        fun (x12747 : NotificationEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12746)
            "notificationclose" (NotificationEvent.t_to_js x12747)
    let (get_push : 'tags this -> PushEvent.t) =
      fun (x12749 : 'tags this) ->
        PushEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12749) "push")
    let (set_push : 'tags this -> PushEvent.t -> unit) =
      fun (x12751 : 'tags this) ->
        fun (x12752 : PushEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12751) "push"
            (PushEvent.t_to_js x12752)
    let (create :
      activate:ExtendableEvent.t ->
        fetch:FetchEvent.t ->
          install:ExtendableEvent.t ->
            message:ExtendableMessageEvent.t ->
              messageerror:MessageEvent.t_0 ->
                notificationclick:NotificationEvent.t ->
                  notificationclose:NotificationEvent.t ->
                    push:PushEvent.t -> unit -> t)
      =
      fun ~activate:(x12754 : ExtendableEvent.t) ->
        fun ~fetch:(x12755 : FetchEvent.t) ->
          fun ~install:(x12756 : ExtendableEvent.t) ->
            fun ~message:(x12757 : ExtendableMessageEvent.t) ->
              fun ~messageerror:(x12758 : MessageEvent.t_0) ->
                fun ~notificationclick:(x12759 : NotificationEvent.t) ->
                  fun ~notificationclose:(x12760 : NotificationEvent.t) ->
                    fun ~push:(x12761 : PushEvent.t) ->
                      fun () ->
                        let x12762 = Ojs.empty_obj () in
                        Ojs.set_prop_ascii x12762 "activate"
                          (ExtendableEvent.t_to_js x12754);
                        Ojs.set_prop_ascii x12762 "fetch"
                          (FetchEvent.t_to_js x12755);
                        Ojs.set_prop_ascii x12762 "install"
                          (ExtendableEvent.t_to_js x12756);
                        Ojs.set_prop_ascii x12762 "message"
                          (ExtendableMessageEvent.t_to_js x12757);
                        Ojs.set_prop_ascii x12762 "messageerror"
                          (MessageEvent.t_0_to_js x12758);
                        Ojs.set_prop_ascii x12762 "notificationclick"
                          (NotificationEvent.t_to_js x12759);
                        Ojs.set_prop_ascii x12762 "notificationclose"
                          (NotificationEvent.t_to_js x12760);
                        Ojs.set_prop_ascii x12762 "push"
                          (PushEvent.t_to_js x12761);
                        t_of_js x12762
    let cast_from = Obj.magic
  end
module ServiceWorkerUpdateViaCache =
  struct
    type t = [ `L_s130_none  | `L_s35_all  | `L_s93_imports ]
    let rec t_of_js : Ojs.t -> t =
      fun (x12764 : Ojs.t) ->
        let x12765 = x12764 in
        match Ojs.string_of_js x12765 with
        | "none" -> `L_s130_none
        | "all" -> `L_s35_all
        | "imports" -> `L_s93_imports
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x12763 : [ `L_s130_none  | `L_s35_all  | `L_s93_imports ]) ->
        match x12763 with
        | `L_s130_none -> Ojs.string_to_js "none"
        | `L_s35_all -> Ojs.string_to_js "all"
        | `L_s93_imports -> Ojs.string_to_js "imports"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12767 : Ojs.t) -> t_of_js x12767
    and t_0_to_js : t_0 -> Ojs.t = fun (x12766 : t) -> t_to_js x12766
  end
module PushSubscriptionOptionsInit =
  struct
    type t = [ `PushSubscriptionOptionsInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12769 : Ojs.t) -> t_of_js x12769
    and t_0_to_js : t_0 -> Ojs.t = fun (x12768 : t) -> t_to_js x12768
    type tags = [ `PushSubscriptionOptionsInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PushSubscriptionOptionsInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12772 : Ojs.t) -> intf_of_js __tags_of_js x12772
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12770 : __tags intf) -> intf_to_js __tags_to_js x12770
    let (get_applicationServerKey :
      'tags this ->
        [ `String of string  | `Null  | `Other of BufferSource.t ]
          Primitive.t option)
      =
      fun (x12774 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12776 : Ojs.t) ->
             Primitive.t_of_js
               (fun (x12777 : Ojs.t) ->
                  let x12778 = x12777 in
                  match Ojs.string_of_js (Ojs.get_prop_ascii x12778 "dummy")
                  with
                  | "String" -> `String (Ojs.string_of_js x12778)
                  | "Null" -> `Null
                  | "Other" -> `Other (BufferSource.t_of_js x12778)
                  | _ -> assert false) x12776)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12774)
             "applicationServerKey")
    let (set_applicationServerKey :
      'tags this ->
        [ `Null  | `U1 of BufferSource.t  | `U2 of string ] -> unit)
      =
      fun (x12779 : 'tags this) ->
        fun (x12780 : [ `Null  | `U1 of BufferSource.t  | `U2 of string ]) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12779)
            "applicationServerKey"
            (match x12780 with
             | `Null -> Ojs.null
             | `U1 x12781 -> BufferSource.t_to_js x12781
             | `U2 x12782 -> Ojs.string_to_js x12782)
    let (get_userVisibleOnly : 'tags this -> bool option) =
      fun (x12784 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12784) "userVisibleOnly")
    let (set_userVisibleOnly : 'tags this -> bool -> unit) =
      fun (x12787 : 'tags this) ->
        fun (x12788 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12787) "userVisibleOnly"
            (Ojs.bool_to_js x12788)
    let (create :
      ?applicationServerKey:[ `String of string  | `Other of BufferSource.t ]
        Primitive.t -> ?userVisibleOnly:bool -> unit -> t)
      =
      fun
        ?applicationServerKey:(x12790 :
                                [ `String of string 
                                | `Other of BufferSource.t ] Primitive.t
                                  option)
        ->
        fun ?userVisibleOnly:(x12791 : bool option) ->
          fun () ->
            let x12792 = Ojs.empty_obj () in
            (match x12790 with
             | Some x12794 ->
                 Ojs.set_prop_ascii x12792 "applicationServerKey"
                   (Primitive.t_to_js
                      (fun
                         (x12795 :
                           [ `String of string  | `Other of BufferSource.t ])
                         ->
                         match x12795 with
                         | `String x12796 -> Ojs.string_to_js x12796
                         | `Other x12797 -> BufferSource.t_to_js x12797)
                      x12794)
             | None -> ());
            (match x12791 with
             | Some x12793 ->
                 Ojs.set_prop_ascii x12792 "userVisibleOnly"
                   (Ojs.bool_to_js x12793)
             | None -> ());
            t_of_js x12792
    let cast_from = Obj.magic
  end
module PushSubscriptionOptions =
  struct
    type t = [ `PushSubscriptionOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12799 : Ojs.t) -> t_of_js x12799
    and t_0_to_js : t_0 -> Ojs.t = fun (x12798 : t) -> t_to_js x12798
    type tags = [ `PushSubscriptionOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PushSubscriptionOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12802 : Ojs.t) -> intf_of_js __tags_of_js x12802
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12800 : __tags intf) -> intf_to_js __tags_to_js x12800
    let (get_applicationServerKey : 'tags this -> ArrayBuffer.t_0 option) =
      fun (x12804 : 'tags this) ->
        Ojs.option_of_js ArrayBuffer.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12804)
             "applicationServerKey")
    let (create : ?applicationServerKey:ArrayBuffer.t_0 -> unit -> t) =
      fun ?applicationServerKey:(x12807 : ArrayBuffer.t_0 option) ->
        fun () ->
          let x12808 = Ojs.empty_obj () in
          (match x12807 with
           | Some x12809 ->
               Ojs.set_prop_ascii x12808 "applicationServerKey"
                 (ArrayBuffer.t_0_to_js x12809)
           | None -> ());
          t_of_js x12808
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PushSubscriptionOptions")
             "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "PushSubscriptionOptions") 
             [||])
  end
module PushSubscriptionJSON =
  struct
    type t = [ `PushSubscriptionJSON ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12811 : Ojs.t) -> t_of_js x12811
    and t_0_to_js : t_0 -> Ojs.t = fun (x12810 : t) -> t_to_js x12810
    type tags = [ `PushSubscriptionJSON ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PushSubscriptionJSON ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12814 : Ojs.t) -> intf_of_js __tags_of_js x12814
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12812 : __tags intf) -> intf_to_js __tags_to_js x12812
    let (get_endpoint : 'tags this -> string option) =
      fun (x12816 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12816) "endpoint")
    let (set_endpoint : 'tags this -> string -> unit) =
      fun (x12819 : 'tags this) ->
        fun (x12820 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12819) "endpoint"
            (Ojs.string_to_js x12820)
    let (get_expirationTime : 'tags this -> EpochTimeStamp.t option option) =
      fun (x12822 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12824 : Ojs.t) ->
             Ojs.option_of_js EpochTimeStamp.t_of_js x12824)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12822) "expirationTime")
    let (set_expirationTime : 'tags this -> EpochTimeStamp.t option -> unit)
      =
      fun (x12826 : 'tags this) ->
        fun (x12827 : EpochTimeStamp.t option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12826) "expirationTime"
            (Ojs.option_to_js EpochTimeStamp.t_to_js x12827)
    let (get_keys : 'tags this -> (string, string) Record.t_2 option) =
      fun (x12830 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12832 : Ojs.t) ->
             Record.t_2_of_js Ojs.string_of_js Ojs.string_of_js x12832)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12830) "keys")
    let (set_keys : 'tags this -> (string, string) Record.t_2 -> unit) =
      fun (x12835 : 'tags this) ->
        fun (x12836 : (string, string) Record.t_2) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12835) "keys"
            (Record.t_2_to_js Ojs.string_to_js Ojs.string_to_js x12836)
    let (create :
      ?endpoint:string ->
        ?expirationTime:EpochTimeStamp.t ->
          ?keys:(string, string) Record.t_2 -> unit -> t)
      =
      fun ?endpoint:(x12840 : string option) ->
        fun ?expirationTime:(x12841 : EpochTimeStamp.t option) ->
          fun ?keys:(x12842 : (string, string) Record.t_2 option) ->
            fun () ->
              let x12843 = Ojs.empty_obj () in
              (match x12840 with
               | Some x12848 ->
                   Ojs.set_prop_ascii x12843 "endpoint"
                     (Ojs.string_to_js x12848)
               | None -> ());
              (match x12841 with
               | Some x12847 ->
                   Ojs.set_prop_ascii x12843 "expirationTime"
                     (EpochTimeStamp.t_to_js x12847)
               | None -> ());
              (match x12842 with
               | Some x12844 ->
                   Ojs.set_prop_ascii x12843 "keys"
                     (Record.t_2_to_js Ojs.string_to_js Ojs.string_to_js
                        x12844)
               | None -> ());
              t_of_js x12843
    let cast_from = Obj.magic
  end
module PushEncryptionKeyName =
  struct
    type t = [ `L_s145_p256dh  | `L_s40_auth ]
    let rec t_of_js : Ojs.t -> t =
      fun (x12850 : Ojs.t) ->
        let x12851 = x12850 in
        match Ojs.string_of_js x12851 with
        | "p256dh" -> `L_s145_p256dh
        | "auth" -> `L_s40_auth
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x12849 : [ `L_s145_p256dh  | `L_s40_auth ]) ->
        match x12849 with
        | `L_s145_p256dh -> Ojs.string_to_js "p256dh"
        | `L_s40_auth -> Ojs.string_to_js "auth"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12853 : Ojs.t) -> t_of_js x12853
    and t_0_to_js : t_0 -> Ojs.t = fun (x12852 : t) -> t_to_js x12852
  end
module PushSubscription =
  struct
    type t = [ `PushSubscription ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12855 : Ojs.t) -> t_of_js x12855
    and t_0_to_js : t_0 -> Ojs.t = fun (x12854 : t) -> t_to_js x12854
    type tags = [ `PushSubscription ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushSubscription ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12858 : Ojs.t) -> intf_of_js __tags_of_js x12858
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12856 : __tags intf) -> intf_to_js __tags_to_js x12856
    let (get_endpoint : 'tags this -> string) =
      fun (x12860 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12860) "endpoint")
    let (get_options : 'tags this -> PushSubscriptionOptions.t) =
      fun (x12862 : 'tags this) ->
        PushSubscriptionOptions.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12862) "options")
    let (getKey :
      'tags this -> name:PushEncryptionKeyName.t -> ArrayBuffer.t_0 option) =
      fun (x12865 : 'tags this) ->
        fun ~name:(x12864 : PushEncryptionKeyName.t) ->
          Ojs.option_of_js ArrayBuffer.t_0_of_js
            (Ojs.call (this_to_js Obj.magic x12865) "getKey"
               [|(PushEncryptionKeyName.t_to_js x12864)|])
    let (toJSON : 'tags this -> PushSubscriptionJSON.t) =
      fun (x12868 : 'tags this) ->
        PushSubscriptionJSON.t_of_js
          (Ojs.call (this_to_js Obj.magic x12868) "toJSON" [||])
    let (unsubscribe : 'tags this -> bool Promise.t_1) =
      fun (x12870 : 'tags this) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (this_to_js Obj.magic x12870) "unsubscribe" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PushSubscription") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PushSubscription")
             [||])
  end
module PermissionState =
  struct
    type t = [ `L_s159_prompt  | `L_s58_denied  | `L_s84_granted ]
    let rec t_of_js : Ojs.t -> t =
      fun (x12874 : Ojs.t) ->
        let x12875 = x12874 in
        match Ojs.string_of_js x12875 with
        | "prompt" -> `L_s159_prompt
        | "denied" -> `L_s58_denied
        | "granted" -> `L_s84_granted
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x12873 : [ `L_s159_prompt  | `L_s58_denied  | `L_s84_granted ]) ->
        match x12873 with
        | `L_s159_prompt -> Ojs.string_to_js "prompt"
        | `L_s58_denied -> Ojs.string_to_js "denied"
        | `L_s84_granted -> Ojs.string_to_js "granted"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12877 : Ojs.t) -> t_of_js x12877
    and t_0_to_js : t_0 -> Ojs.t = fun (x12876 : t) -> t_to_js x12876
  end
module PushManager =
  struct
    type t = [ `PushManager ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12879 : Ojs.t) -> t_of_js x12879
    and t_0_to_js : t_0 -> Ojs.t = fun (x12878 : t) -> t_to_js x12878
    type tags = [ `PushManager ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushManager ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12882 : Ojs.t) -> intf_of_js __tags_of_js x12882
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12880 : __tags intf) -> intf_to_js __tags_to_js x12880
    let (getSubscription :
      'tags this -> PushSubscription.t option Promise.t_1) =
      fun (x12884 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x12886 : Ojs.t) ->
             Ojs.option_of_js PushSubscription.t_of_js x12886)
          (Ojs.call (this_to_js Obj.magic x12884) "getSubscription" [||])
    let (permissionState :
      'tags this ->
        ?options:PushSubscriptionOptionsInit.t ->
          unit -> PermissionState.t Promise.t_1)
      =
      fun (x12891 : 'tags this) ->
        fun ?options:(x12888 : PushSubscriptionOptionsInit.t option) ->
          fun () ->
            Promise.t_1_of_js PermissionState.t_of_js
              (let x12893 = this_to_js Obj.magic x12891 in
               Ojs.call (Ojs.get_prop_ascii x12893 "permissionState") "apply"
                 [|x12893;((let x12889 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x12888 with
                             | Some x12890 ->
                                 ignore
                                   (Ojs.call x12889 "push"
                                      [|(PushSubscriptionOptionsInit.t_to_js
                                           x12890)|])
                             | None -> ());
                            x12889))|])
    let (subscribe :
      'tags this ->
        ?options:PushSubscriptionOptionsInit.t ->
          unit -> PushSubscription.t Promise.t_1)
      =
      fun (x12898 : 'tags this) ->
        fun ?options:(x12895 : PushSubscriptionOptionsInit.t option) ->
          fun () ->
            Promise.t_1_of_js PushSubscription.t_of_js
              (let x12900 = this_to_js Obj.magic x12898 in
               Ojs.call (Ojs.get_prop_ascii x12900 "subscribe") "apply"
                 [|x12900;((let x12896 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x12895 with
                             | Some x12897 ->
                                 ignore
                                   (Ojs.call x12896 "push"
                                      [|(PushSubscriptionOptionsInit.t_to_js
                                           x12897)|])
                             | None -> ());
                            x12896))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "PushManager")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PushManager") [||])
    let (supportedContentEncodings : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "PushManager")
             "supportedContentEncodings")
  end
module GetNotificationOptions =
  struct
    type t = [ `GetNotificationOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12904 : Ojs.t) -> t_of_js x12904
    and t_0_to_js : t_0 -> Ojs.t = fun (x12903 : t) -> t_to_js x12903
    type tags = [ `GetNotificationOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `GetNotificationOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12907 : Ojs.t) -> intf_of_js __tags_of_js x12907
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12905 : __tags intf) -> intf_to_js __tags_to_js x12905
    let (get_tag : 'tags this -> string option) =
      fun (x12909 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12909) "tag")
    let (set_tag : 'tags this -> string -> unit) =
      fun (x12912 : 'tags this) ->
        fun (x12913 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12912) "tag"
            (Ojs.string_to_js x12913)
    let (create : ?tag:string -> unit -> t) =
      fun ?tag:(x12915 : string option) ->
        fun () ->
          let x12916 = Ojs.empty_obj () in
          (match x12915 with
           | Some x12917 ->
               Ojs.set_prop_ascii x12916 "tag" (Ojs.string_to_js x12917)
           | None -> ());
          t_of_js x12916
    let cast_from = Obj.magic
  end
module ServiceWorkerRegistration =
  struct
    type t = [ `EventTarget  | `ServiceWorkerRegistration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12919 : Ojs.t) -> t_of_js x12919
    and t_0_to_js : t_0 -> Ojs.t = fun (x12918 : t) -> t_to_js x12918
    type tags = [ `EventTarget  | `ServiceWorkerRegistration ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerRegistration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12922 : Ojs.t) -> intf_of_js __tags_of_js x12922
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12920 : __tags intf) -> intf_to_js __tags_to_js x12920
    let (get_active : 'tags this -> ServiceWorker.t option) =
      fun (x12924 : 'tags this) ->
        Ojs.option_of_js ServiceWorker.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12924) "active")
    let (get_installing : 'tags this -> ServiceWorker.t option) =
      fun (x12927 : 'tags this) ->
        Ojs.option_of_js ServiceWorker.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12927) "installing")
    let (get_onupdatefound :
      'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x12930 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12932 : Ojs.t) ->
             fun ~this:(x12933 : t) ->
               fun ~ev:(x12934 : Event.t) ->
                 any_of_js
                   (Ojs.apply x12932
                      [|(t_to_js x12933);(Event.t_to_js x12934)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12930) "onupdatefound")
    let (set_onupdatefound :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x12935 : 'tags this) ->
        fun (x12936 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12935) "onupdatefound"
            (Ojs.option_to_js
               (fun (x12937 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12938 : Ojs.t) ->
                       fun (x12939 : Ojs.t) ->
                         any_to_js
                           (x12937 ~this:(t_of_js x12938)
                              ~ev:(Event.t_of_js x12939)))) x12936)
    let (get_pushManager : 'tags this -> PushManager.t) =
      fun (x12941 : 'tags this) ->
        PushManager.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12941) "pushManager")
    let (get_scope : 'tags this -> string) =
      fun (x12943 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12943) "scope")
    let (get_updateViaCache : 'tags this -> ServiceWorkerUpdateViaCache.t) =
      fun (x12945 : 'tags this) ->
        ServiceWorkerUpdateViaCache.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12945) "updateViaCache")
    let (get_waiting : 'tags this -> ServiceWorker.t option) =
      fun (x12947 : 'tags this) ->
        Ojs.option_of_js ServiceWorker.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12947) "waiting")
    let (getNotifications :
      'tags this ->
        ?filter:GetNotificationOptions.t ->
          unit -> Notification.t list Promise.t_1)
      =
      fun (x12953 : 'tags this) ->
        fun ?filter:(x12950 : GetNotificationOptions.t option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x12956 : Ojs.t) ->
                 Ojs.list_of_js Notification.t_of_js x12956)
              (let x12955 = this_to_js Obj.magic x12953 in
               Ojs.call (Ojs.get_prop_ascii x12955 "getNotifications")
                 "apply"
                 [|x12955;((let x12951 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x12950 with
                             | Some x12952 ->
                                 ignore
                                   (Ojs.call x12951 "push"
                                      [|(GetNotificationOptions.t_to_js
                                           x12952)|])
                             | None -> ());
                            x12951))|])
    let (showNotification :
      'tags this ->
        title:string ->
          ?options:NotificationOptions.t -> unit -> unit Promise.t_1)
      =
      fun (x12962 : 'tags this) ->
        fun ~title:(x12958 : string) ->
          fun ?options:(x12959 : NotificationOptions.t option) ->
            fun () ->
              Promise.t_1_of_js Ojs.unit_of_js
                (let x12964 = this_to_js Obj.magic x12962 in
                 Ojs.call (Ojs.get_prop_ascii x12964 "showNotification")
                   "apply"
                   [|x12964;((let x12960 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x12960 "push"
                                   [|(Ojs.string_to_js x12958)|]);
                              (match x12959 with
                               | Some x12961 ->
                                   ignore
                                     (Ojs.call x12960 "push"
                                        [|(NotificationOptions.t_to_js x12961)|])
                               | None -> ());
                              x12960))|])
    let (unregister : 'tags this -> bool Promise.t_1) =
      fun (x12966 : 'tags this) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (this_to_js Obj.magic x12966) "unregister" [||])
    let (update : 'tags this -> unit Promise.t_1) =
      fun (x12969 : 'tags this) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (this_to_js Obj.magic x12969) "update" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12981 : 'tags this) ->
        fun ~type_:(x12972 : 'K) ->
          fun ~listener:(x12973 : this:t -> ev:any -> any) ->
            fun
              ?options:(x12974 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12983 = this_to_js Obj.magic x12981 in
                   Ojs.call (Ojs.get_prop_ascii x12983 "addEventListener")
                     "apply"
                     [|x12983;((let x12975 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12975 "push"
                                     [|(Obj.magic x12972)|]);
                                ignore
                                  (Ojs.call x12975 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12979 : Ojs.t) ->
                                             fun (x12980 : Ojs.t) ->
                                               any_to_js
                                                 (x12973
                                                    ~this:(t_of_js x12979)
                                                    ~ev:(any_of_js x12980))))|]);
                                (match x12974 with
                                 | Some x12976 ->
                                     ignore
                                       (Ojs.call x12975 "push"
                                          [|((match x12976 with
                                              | `U1 x12977 ->
                                                  Ojs.bool_to_js x12977
                                              | `U2 x12978 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x12978))|])
                                 | None -> ());
                                x12975))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12991 : 'tags this) ->
        fun ~type_:(x12984 : string) ->
          fun ~listener:(x12985 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x12986 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12993 = this_to_js Obj.magic x12991 in
                   Ojs.call (Ojs.get_prop_ascii x12993 "addEventListener")
                     "apply"
                     [|x12993;((let x12987 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12987 "push"
                                     [|(Ojs.string_to_js x12984)|]);
                                ignore
                                  (Ojs.call x12987 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12985)|]);
                                (match x12986 with
                                 | Some x12988 ->
                                     ignore
                                       (Ojs.call x12987 "push"
                                          [|((match x12988 with
                                              | `U1 x12989 ->
                                                  Ojs.bool_to_js x12989
                                              | `U2 x12990 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x12990))|])
                                 | None -> ());
                                x12987))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13003 : 'tags this) ->
        fun ~type_:(x12994 : 'K) ->
          fun ~listener:(x12995 : this:t -> ev:any -> any) ->
            fun
              ?options:(x12996 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13005 = this_to_js Obj.magic x13003 in
                   Ojs.call (Ojs.get_prop_ascii x13005 "removeEventListener")
                     "apply"
                     [|x13005;((let x12997 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12997 "push"
                                     [|(Obj.magic x12994)|]);
                                ignore
                                  (Ojs.call x12997 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x13001 : Ojs.t) ->
                                             fun (x13002 : Ojs.t) ->
                                               any_to_js
                                                 (x12995
                                                    ~this:(t_of_js x13001)
                                                    ~ev:(any_of_js x13002))))|]);
                                (match x12996 with
                                 | Some x12998 ->
                                     ignore
                                       (Ojs.call x12997 "push"
                                          [|((match x12998 with
                                              | `U1 x12999 ->
                                                  Ojs.bool_to_js x12999
                                              | `U2 x13000 ->
                                                  EventListenerOptions.t_to_js
                                                    x13000))|])
                                 | None -> ());
                                x12997))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13013 : 'tags this) ->
        fun ~type_:(x13006 : string) ->
          fun ~listener:(x13007 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x13008 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13015 = this_to_js Obj.magic x13013 in
                   Ojs.call (Ojs.get_prop_ascii x13015 "removeEventListener")
                     "apply"
                     [|x13015;((let x13009 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13009 "push"
                                     [|(Ojs.string_to_js x13006)|]);
                                ignore
                                  (Ojs.call x13009 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x13007)|]);
                                (match x13008 with
                                 | Some x13010 ->
                                     ignore
                                       (Ojs.call x13009 "push"
                                          [|((match x13010 with
                                              | `U1 x13011 ->
                                                  Ojs.bool_to_js x13011
                                              | `U2 x13012 ->
                                                  EventListenerOptions.t_to_js
                                                    x13012))|])
                                 | None -> ());
                                x13009))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerRegistration")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerRegistration") 
             [||])
  end
module DocumentVisibilityState =
  struct
    type t = [ `L_s211_visible  | `L_s85_hidden ]
    let rec t_of_js : Ojs.t -> t =
      fun (x13017 : Ojs.t) ->
        let x13018 = x13017 in
        match Ojs.string_of_js x13018 with
        | "visible" -> `L_s211_visible
        | "hidden" -> `L_s85_hidden
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x13016 : [ `L_s211_visible  | `L_s85_hidden ]) ->
        match x13016 with
        | `L_s211_visible -> Ojs.string_to_js "visible"
        | `L_s85_hidden -> Ojs.string_to_js "hidden"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13020 : Ojs.t) -> t_of_js x13020
    and t_0_to_js : t_0 -> Ojs.t = fun (x13019 : t) -> t_to_js x13019
  end
module WindowClient =
  struct
    type t = [ `Client  | `WindowClient ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13022 : Ojs.t) -> t_of_js x13022
    and t_0_to_js : t_0 -> Ojs.t = fun (x13021 : t) -> t_to_js x13021
    type tags = [ `Client  | `WindowClient ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WindowClient ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13025 : Ojs.t) -> intf_of_js __tags_of_js x13025
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13023 : __tags intf) -> intf_to_js __tags_to_js x13023
    let (get_focused : 'tags this -> bool) =
      fun (x13027 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13027) "focused")
    let (get_visibilityState : 'tags this -> DocumentVisibilityState.t) =
      fun (x13029 : 'tags this) ->
        DocumentVisibilityState.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13029) "visibilityState")
    let (focus : 'tags this -> t Promise.t_1) =
      fun (x13031 : 'tags this) ->
        Promise.t_1_of_js t_of_js
          (Ojs.call (this_to_js Obj.magic x13031) "focus" [||])
    let (navigate :
      'tags this ->
        url:[ `U1 of string  | `U2 of URL.t ] -> t option Promise.t_1)
      =
      fun (x13037 : 'tags this) ->
        fun ~url:(x13034 : [ `U1 of string  | `U2 of URL.t ]) ->
          Promise.t_1_of_js
            (fun (x13039 : Ojs.t) -> Ojs.option_of_js t_of_js x13039)
            (Ojs.call (this_to_js Obj.magic x13037) "navigate"
               [|((match x13034 with
                   | `U1 x13035 -> Ojs.string_to_js x13035
                   | `U2 x13036 -> URL.t_to_js x13036))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WindowClient")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WindowClient") [||])
  end
module ClientQueryOptions =
  struct
    type t = [ `ClientQueryOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13042 : Ojs.t) -> t_of_js x13042
    and t_0_to_js : t_0 -> Ojs.t = fun (x13041 : t) -> t_to_js x13041
    type tags = [ `ClientQueryOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ClientQueryOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13045 : Ojs.t) -> intf_of_js __tags_of_js x13045
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13043 : __tags intf) -> intf_to_js __tags_to_js x13043
    let (get_includeUncontrolled : 'tags this -> bool option) =
      fun (x13047 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13047)
             "includeUncontrolled")
    let (set_includeUncontrolled : 'tags this -> bool -> unit) =
      fun (x13050 : 'tags this) ->
        fun (x13051 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13050)
            "includeUncontrolled" (Ojs.bool_to_js x13051)
    let (get_type : 'tags this -> ClientTypes.t option) =
      fun (x13053 : 'tags this) ->
        Ojs.option_of_js ClientTypes.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13053) "type")
    let (set_type : 'tags this -> ClientTypes.t -> unit) =
      fun (x13056 : 'tags this) ->
        fun (x13057 : ClientTypes.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13056) "type"
            (ClientTypes.t_to_js x13057)
    let (create :
      ?includeUncontrolled:bool -> ?type_:ClientTypes.t -> unit -> t) =
      fun ?includeUncontrolled:(x13059 : bool option) ->
        fun ?type_:(x13060 : ClientTypes.t option) ->
          fun () ->
            let x13061 = Ojs.empty_obj () in
            (match x13059 with
             | Some x13063 ->
                 Ojs.set_prop_ascii x13061 "includeUncontrolled"
                   (Ojs.bool_to_js x13063)
             | None -> ());
            (match x13060 with
             | Some x13062 ->
                 Ojs.set_prop_ascii x13061 "type"
                   (ClientTypes.t_to_js x13062)
             | None -> ());
            t_of_js x13061
    let cast_from = Obj.magic
  end
module Clients =
  struct
    type t = [ `Clients ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13065 : Ojs.t) -> t_of_js x13065
    and t_0_to_js : t_0 -> Ojs.t = fun (x13064 : t) -> t_to_js x13064
    type tags = [ `Clients ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Clients ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13068 : Ojs.t) -> intf_of_js __tags_of_js x13068
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13066 : __tags intf) -> intf_to_js __tags_to_js x13066
    let (claim : 'tags this -> unit Promise.t_1) =
      fun (x13070 : 'tags this) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (this_to_js Obj.magic x13070) "claim" [||])
    let (get_ : 'tags this -> id:string -> Client.t option Promise.t_1) =
      fun (x13074 : 'tags this) ->
        fun ~id:(x13073 : string) ->
          Promise.t_1_of_js
            (fun (x13076 : Ojs.t) -> Ojs.option_of_js Client.t_of_js x13076)
            (Ojs.call (this_to_js Obj.magic x13074) "get"
               [|(Ojs.string_to_js x13073)|])
    let (matchAll :
      'tags this -> ?options:'T -> unit -> any list Promise.t_1) =
      fun (x13081 : 'tags this) ->
        fun ?options:(x13078 : 'T option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x13084 : Ojs.t) -> Ojs.list_of_js any_of_js x13084)
              (let x13083 = this_to_js Obj.magic x13081 in
               Ojs.call (Ojs.get_prop_ascii x13083 "matchAll") "apply"
                 [|x13083;((let x13079 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x13078 with
                             | Some x13080 ->
                                 ignore
                                   (Ojs.call x13079 "push"
                                      [|(Obj.magic x13080)|])
                             | None -> ());
                            x13079))|])
    let (openWindow :
      'tags this ->
        url:[ `U1 of string  | `U2 of URL.t ] ->
          WindowClient.t option Promise.t_1)
      =
      fun (x13089 : 'tags this) ->
        fun ~url:(x13086 : [ `U1 of string  | `U2 of URL.t ]) ->
          Promise.t_1_of_js
            (fun (x13091 : Ojs.t) ->
               Ojs.option_of_js WindowClient.t_of_js x13091)
            (Ojs.call (this_to_js Obj.magic x13089) "openWindow"
               [|((match x13086 with
                   | `U1 x13087 -> Ojs.string_to_js x13087
                   | `U2 x13088 -> URL.t_to_js x13088))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Clients")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Clients") [||])
  end
module ServiceWorkerGlobalScope =
  struct
    type t =
      [ `EventTarget  | `FontFaceSource  | `ServiceWorkerGlobalScope 
      | `WindowOrWorkerGlobalScope  | `WorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13094 : Ojs.t) -> t_of_js x13094
    and t_0_to_js : t_0 -> Ojs.t = fun (x13093 : t) -> t_to_js x13093
    type tags =
      [ `EventTarget  | `FontFaceSource  | `ServiceWorkerGlobalScope 
      | `WindowOrWorkerGlobalScope  | `WorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13097 : Ojs.t) -> intf_of_js __tags_of_js x13097
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13095 : __tags intf) -> intf_to_js __tags_to_js x13095
    let (get_clients : 'tags this -> Clients.t) =
      fun (x13099 : 'tags this) ->
        Clients.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13099) "clients")
    let (get_onactivate :
      'tags this -> (this:t -> ev:ExtendableEvent.t -> any) option) =
      fun (x13101 : 'tags this) ->
        Ojs.option_of_js
          (fun (x13103 : Ojs.t) ->
             fun ~this:(x13104 : t) ->
               fun ~ev:(x13105 : ExtendableEvent.t) ->
                 any_of_js
                   (Ojs.apply x13103
                      [|(t_to_js x13104);(ExtendableEvent.t_to_js x13105)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13101) "onactivate")
    let (set_onactivate :
      'tags this -> (this:t -> ev:ExtendableEvent.t -> any) option -> unit) =
      fun (x13106 : 'tags this) ->
        fun (x13107 : (this:t -> ev:ExtendableEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13106) "onactivate"
            (Ojs.option_to_js
               (fun (x13108 : this:t -> ev:ExtendableEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13109 : Ojs.t) ->
                       fun (x13110 : Ojs.t) ->
                         any_to_js
                           (x13108 ~this:(t_of_js x13109)
                              ~ev:(ExtendableEvent.t_of_js x13110)))) x13107)
    let (get_onfetch :
      'tags this -> (this:t -> ev:FetchEvent.t -> any) option) =
      fun (x13112 : 'tags this) ->
        Ojs.option_of_js
          (fun (x13114 : Ojs.t) ->
             fun ~this:(x13115 : t) ->
               fun ~ev:(x13116 : FetchEvent.t) ->
                 any_of_js
                   (Ojs.apply x13114
                      [|(t_to_js x13115);(FetchEvent.t_to_js x13116)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13112) "onfetch")
    let (set_onfetch :
      'tags this -> (this:t -> ev:FetchEvent.t -> any) option -> unit) =
      fun (x13117 : 'tags this) ->
        fun (x13118 : (this:t -> ev:FetchEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13117) "onfetch"
            (Ojs.option_to_js
               (fun (x13119 : this:t -> ev:FetchEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13120 : Ojs.t) ->
                       fun (x13121 : Ojs.t) ->
                         any_to_js
                           (x13119 ~this:(t_of_js x13120)
                              ~ev:(FetchEvent.t_of_js x13121)))) x13118)
    let (get_oninstall :
      'tags this -> (this:t -> ev:ExtendableEvent.t -> any) option) =
      fun (x13123 : 'tags this) ->
        Ojs.option_of_js
          (fun (x13125 : Ojs.t) ->
             fun ~this:(x13126 : t) ->
               fun ~ev:(x13127 : ExtendableEvent.t) ->
                 any_of_js
                   (Ojs.apply x13125
                      [|(t_to_js x13126);(ExtendableEvent.t_to_js x13127)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13123) "oninstall")
    let (set_oninstall :
      'tags this -> (this:t -> ev:ExtendableEvent.t -> any) option -> unit) =
      fun (x13128 : 'tags this) ->
        fun (x13129 : (this:t -> ev:ExtendableEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13128) "oninstall"
            (Ojs.option_to_js
               (fun (x13130 : this:t -> ev:ExtendableEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13131 : Ojs.t) ->
                       fun (x13132 : Ojs.t) ->
                         any_to_js
                           (x13130 ~this:(t_of_js x13131)
                              ~ev:(ExtendableEvent.t_of_js x13132)))) x13129)
    let (get_onmessage :
      'tags this -> (this:t -> ev:ExtendableMessageEvent.t -> any) option) =
      fun (x13134 : 'tags this) ->
        Ojs.option_of_js
          (fun (x13136 : Ojs.t) ->
             fun ~this:(x13137 : t) ->
               fun ~ev:(x13138 : ExtendableMessageEvent.t) ->
                 any_of_js
                   (Ojs.apply x13136
                      [|(t_to_js x13137);(ExtendableMessageEvent.t_to_js
                                            x13138)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13134) "onmessage")
    let (set_onmessage :
      'tags this ->
        (this:t -> ev:ExtendableMessageEvent.t -> any) option -> unit)
      =
      fun (x13139 : 'tags this) ->
        fun (x13140 : (this:t -> ev:ExtendableMessageEvent.t -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13139) "onmessage"
            (Ojs.option_to_js
               (fun (x13141 : this:t -> ev:ExtendableMessageEvent.t -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x13142 : Ojs.t) ->
                       fun (x13143 : Ojs.t) ->
                         any_to_js
                           (x13141 ~this:(t_of_js x13142)
                              ~ev:(ExtendableMessageEvent.t_of_js x13143))))
               x13140)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x13145 : 'tags this) ->
        Ojs.option_of_js
          (fun (x13147 : Ojs.t) ->
             fun ~this:(x13148 : t) ->
               fun ~ev:(x13149 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x13147
                      [|(t_to_js x13148);(MessageEvent.t_0_to_js x13149)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13145) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x13150 : 'tags this) ->
        fun (x13151 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13150) "onmessageerror"
            (Ojs.option_to_js
               (fun (x13152 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13153 : Ojs.t) ->
                       fun (x13154 : Ojs.t) ->
                         any_to_js
                           (x13152 ~this:(t_of_js x13153)
                              ~ev:(MessageEvent.t_0_of_js x13154)))) x13151)
    let (get_onnotificationclick :
      'tags this -> (this:t -> ev:NotificationEvent.t -> any) option) =
      fun (x13156 : 'tags this) ->
        Ojs.option_of_js
          (fun (x13158 : Ojs.t) ->
             fun ~this:(x13159 : t) ->
               fun ~ev:(x13160 : NotificationEvent.t) ->
                 any_of_js
                   (Ojs.apply x13158
                      [|(t_to_js x13159);(NotificationEvent.t_to_js x13160)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13156)
             "onnotificationclick")
    let (set_onnotificationclick :
      'tags this -> (this:t -> ev:NotificationEvent.t -> any) option -> unit)
      =
      fun (x13161 : 'tags this) ->
        fun (x13162 : (this:t -> ev:NotificationEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13161)
            "onnotificationclick"
            (Ojs.option_to_js
               (fun (x13163 : this:t -> ev:NotificationEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13164 : Ojs.t) ->
                       fun (x13165 : Ojs.t) ->
                         any_to_js
                           (x13163 ~this:(t_of_js x13164)
                              ~ev:(NotificationEvent.t_of_js x13165))))
               x13162)
    let (get_onnotificationclose :
      'tags this -> (this:t -> ev:NotificationEvent.t -> any) option) =
      fun (x13167 : 'tags this) ->
        Ojs.option_of_js
          (fun (x13169 : Ojs.t) ->
             fun ~this:(x13170 : t) ->
               fun ~ev:(x13171 : NotificationEvent.t) ->
                 any_of_js
                   (Ojs.apply x13169
                      [|(t_to_js x13170);(NotificationEvent.t_to_js x13171)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13167)
             "onnotificationclose")
    let (set_onnotificationclose :
      'tags this -> (this:t -> ev:NotificationEvent.t -> any) option -> unit)
      =
      fun (x13172 : 'tags this) ->
        fun (x13173 : (this:t -> ev:NotificationEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13172)
            "onnotificationclose"
            (Ojs.option_to_js
               (fun (x13174 : this:t -> ev:NotificationEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13175 : Ojs.t) ->
                       fun (x13176 : Ojs.t) ->
                         any_to_js
                           (x13174 ~this:(t_of_js x13175)
                              ~ev:(NotificationEvent.t_of_js x13176))))
               x13173)
    let (get_onpush : 'tags this -> (this:t -> ev:PushEvent.t -> any) option)
      =
      fun (x13178 : 'tags this) ->
        Ojs.option_of_js
          (fun (x13180 : Ojs.t) ->
             fun ~this:(x13181 : t) ->
               fun ~ev:(x13182 : PushEvent.t) ->
                 any_of_js
                   (Ojs.apply x13180
                      [|(t_to_js x13181);(PushEvent.t_to_js x13182)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13178) "onpush")
    let (set_onpush :
      'tags this -> (this:t -> ev:PushEvent.t -> any) option -> unit) =
      fun (x13183 : 'tags this) ->
        fun (x13184 : (this:t -> ev:PushEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13183) "onpush"
            (Ojs.option_to_js
               (fun (x13185 : this:t -> ev:PushEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13186 : Ojs.t) ->
                       fun (x13187 : Ojs.t) ->
                         any_to_js
                           (x13185 ~this:(t_of_js x13186)
                              ~ev:(PushEvent.t_of_js x13187)))) x13184)
    let (get_registration : 'tags this -> ServiceWorkerRegistration.t) =
      fun (x13189 : 'tags this) ->
        ServiceWorkerRegistration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13189) "registration")
    let (skipWaiting : 'tags this -> unit Promise.t_1) =
      fun (x13191 : 'tags this) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (this_to_js Obj.magic x13191) "skipWaiting" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13203 : 'tags this) ->
        fun ~type_:(x13194 : 'K) ->
          fun ~listener:(x13195 : this:t -> ev:any -> any) ->
            fun
              ?options:(x13196 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13205 = this_to_js Obj.magic x13203 in
                   Ojs.call (Ojs.get_prop_ascii x13205 "addEventListener")
                     "apply"
                     [|x13205;((let x13197 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13197 "push"
                                     [|(Obj.magic x13194)|]);
                                ignore
                                  (Ojs.call x13197 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x13201 : Ojs.t) ->
                                             fun (x13202 : Ojs.t) ->
                                               any_to_js
                                                 (x13195
                                                    ~this:(t_of_js x13201)
                                                    ~ev:(any_of_js x13202))))|]);
                                (match x13196 with
                                 | Some x13198 ->
                                     ignore
                                       (Ojs.call x13197 "push"
                                          [|((match x13198 with
                                              | `U1 x13199 ->
                                                  Ojs.bool_to_js x13199
                                              | `U2 x13200 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x13200))|])
                                 | None -> ());
                                x13197))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13213 : 'tags this) ->
        fun ~type_:(x13206 : string) ->
          fun ~listener:(x13207 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x13208 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13215 = this_to_js Obj.magic x13213 in
                   Ojs.call (Ojs.get_prop_ascii x13215 "addEventListener")
                     "apply"
                     [|x13215;((let x13209 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13209 "push"
                                     [|(Ojs.string_to_js x13206)|]);
                                ignore
                                  (Ojs.call x13209 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x13207)|]);
                                (match x13208 with
                                 | Some x13210 ->
                                     ignore
                                       (Ojs.call x13209 "push"
                                          [|((match x13210 with
                                              | `U1 x13211 ->
                                                  Ojs.bool_to_js x13211
                                              | `U2 x13212 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x13212))|])
                                 | None -> ());
                                x13209))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13225 : 'tags this) ->
        fun ~type_:(x13216 : 'K) ->
          fun ~listener:(x13217 : this:t -> ev:any -> any) ->
            fun
              ?options:(x13218 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13227 = this_to_js Obj.magic x13225 in
                   Ojs.call (Ojs.get_prop_ascii x13227 "removeEventListener")
                     "apply"
                     [|x13227;((let x13219 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13219 "push"
                                     [|(Obj.magic x13216)|]);
                                ignore
                                  (Ojs.call x13219 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x13223 : Ojs.t) ->
                                             fun (x13224 : Ojs.t) ->
                                               any_to_js
                                                 (x13217
                                                    ~this:(t_of_js x13223)
                                                    ~ev:(any_of_js x13224))))|]);
                                (match x13218 with
                                 | Some x13220 ->
                                     ignore
                                       (Ojs.call x13219 "push"
                                          [|((match x13220 with
                                              | `U1 x13221 ->
                                                  Ojs.bool_to_js x13221
                                              | `U2 x13222 ->
                                                  EventListenerOptions.t_to_js
                                                    x13222))|])
                                 | None -> ());
                                x13219))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13235 : 'tags this) ->
        fun ~type_:(x13228 : string) ->
          fun ~listener:(x13229 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x13230 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13237 = this_to_js Obj.magic x13235 in
                   Ojs.call (Ojs.get_prop_ascii x13237 "removeEventListener")
                     "apply"
                     [|x13237;((let x13231 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13231 "push"
                                     [|(Ojs.string_to_js x13228)|]);
                                ignore
                                  (Ojs.call x13231 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x13229)|]);
                                (match x13230 with
                                 | Some x13232 ->
                                     ignore
                                       (Ojs.call x13231 "push"
                                          [|((match x13232 with
                                              | `U1 x13233 ->
                                                  Ojs.bool_to_js x13233
                                              | `U2 x13234 ->
                                                  EventListenerOptions.t_to_js
                                                    x13234))|])
                                 | None -> ());
                                x13231))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerGlobalScope")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerGlobalScope") 
             [||])
  end
module ServiceWorkerEventMap =
  struct
    type t = [ `AbstractWorkerEventMap  | `ServiceWorkerEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13239 : Ojs.t) -> t_of_js x13239
    and t_0_to_js : t_0 -> Ojs.t = fun (x13238 : t) -> t_to_js x13238
    type tags = [ `AbstractWorkerEventMap  | `ServiceWorkerEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13242 : Ojs.t) -> intf_of_js __tags_of_js x13242
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13240 : __tags intf) -> intf_to_js __tags_to_js x13240
    let (get_statechange : 'tags this -> Event.t) =
      fun (x13244 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13244) "statechange")
    let (set_statechange : 'tags this -> Event.t -> unit) =
      fun (x13246 : 'tags this) ->
        fun (x13247 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13246) "statechange"
            (Event.t_to_js x13247)
    let (create : statechange:Event.t -> unit -> t) =
      fun ~statechange:(x13249 : Event.t) ->
        fun () ->
          let x13250 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x13250 "statechange" (Event.t_to_js x13249);
          t_of_js x13250
    let cast_from = Obj.magic
  end
module ServiceWorkerContainerEventMap =
  struct
    type t = [ `ServiceWorkerContainerEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13252 : Ojs.t) -> t_of_js x13252
    and t_0_to_js : t_0 -> Ojs.t = fun (x13251 : t) -> t_to_js x13251
    type tags = [ `ServiceWorkerContainerEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerContainerEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13255 : Ojs.t) -> intf_of_js __tags_of_js x13255
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13253 : __tags intf) -> intf_to_js __tags_to_js x13253
    let (get_controllerchange : 'tags this -> Event.t) =
      fun (x13257 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13257)
             "controllerchange")
    let (set_controllerchange : 'tags this -> Event.t -> unit) =
      fun (x13259 : 'tags this) ->
        fun (x13260 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13259) "controllerchange"
            (Event.t_to_js x13260)
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x13262 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13262) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x13264 : 'tags this) ->
        fun (x13265 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13264) "message"
            (MessageEvent.t_0_to_js x13265)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x13267 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13267) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x13269 : 'tags this) ->
        fun (x13270 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13269) "messageerror"
            (MessageEvent.t_0_to_js x13270)
    let (create :
      controllerchange:Event.t ->
        message:MessageEvent.t_0 ->
          messageerror:MessageEvent.t_0 -> unit -> t)
      =
      fun ~controllerchange:(x13272 : Event.t) ->
        fun ~message:(x13273 : MessageEvent.t_0) ->
          fun ~messageerror:(x13274 : MessageEvent.t_0) ->
            fun () ->
              let x13275 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x13275 "controllerchange"
                (Event.t_to_js x13272);
              Ojs.set_prop_ascii x13275 "message"
                (MessageEvent.t_0_to_js x13273);
              Ojs.set_prop_ascii x13275 "messageerror"
                (MessageEvent.t_0_to_js x13274);
              t_of_js x13275
    let cast_from = Obj.magic
  end
module RegistrationOptions =
  struct
    type t = [ `RegistrationOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13277 : Ojs.t) -> t_of_js x13277
    and t_0_to_js : t_0 -> Ojs.t = fun (x13276 : t) -> t_to_js x13276
    type tags = [ `RegistrationOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RegistrationOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13280 : Ojs.t) -> intf_of_js __tags_of_js x13280
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13278 : __tags intf) -> intf_to_js __tags_to_js x13278
    let (get_scope : 'tags this -> string option) =
      fun (x13282 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13282) "scope")
    let (set_scope : 'tags this -> string -> unit) =
      fun (x13285 : 'tags this) ->
        fun (x13286 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13285) "scope"
            (Ojs.string_to_js x13286)
    let (get_type : 'tags this -> WorkerType.t option) =
      fun (x13288 : 'tags this) ->
        Ojs.option_of_js WorkerType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13288) "type")
    let (set_type : 'tags this -> WorkerType.t -> unit) =
      fun (x13291 : 'tags this) ->
        fun (x13292 : WorkerType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13291) "type"
            (WorkerType.t_to_js x13292)
    let (get_updateViaCache :
      'tags this -> ServiceWorkerUpdateViaCache.t option) =
      fun (x13294 : 'tags this) ->
        Ojs.option_of_js ServiceWorkerUpdateViaCache.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13294) "updateViaCache")
    let (set_updateViaCache :
      'tags this -> ServiceWorkerUpdateViaCache.t -> unit) =
      fun (x13297 : 'tags this) ->
        fun (x13298 : ServiceWorkerUpdateViaCache.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13297) "updateViaCache"
            (ServiceWorkerUpdateViaCache.t_to_js x13298)
    let (create :
      ?scope:string ->
        ?type_:WorkerType.t ->
          ?updateViaCache:ServiceWorkerUpdateViaCache.t -> unit -> t)
      =
      fun ?scope:(x13300 : string option) ->
        fun ?type_:(x13301 : WorkerType.t option) ->
          fun ?updateViaCache:(x13302 : ServiceWorkerUpdateViaCache.t option)
            ->
            fun () ->
              let x13303 = Ojs.empty_obj () in
              (match x13300 with
               | Some x13306 ->
                   Ojs.set_prop_ascii x13303 "scope"
                     (Ojs.string_to_js x13306)
               | None -> ());
              (match x13301 with
               | Some x13305 ->
                   Ojs.set_prop_ascii x13303 "type"
                     (WorkerType.t_to_js x13305)
               | None -> ());
              (match x13302 with
               | Some x13304 ->
                   Ojs.set_prop_ascii x13303 "updateViaCache"
                     (ServiceWorkerUpdateViaCache.t_to_js x13304)
               | None -> ());
              t_of_js x13303
    let cast_from = Obj.magic
  end
module ServiceWorkerContainer =
  struct
    type t = [ `EventTarget  | `ServiceWorkerContainer ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13308 : Ojs.t) -> t_of_js x13308
    and t_0_to_js : t_0 -> Ojs.t = fun (x13307 : t) -> t_to_js x13307
    type tags = [ `EventTarget  | `ServiceWorkerContainer ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerContainer ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13311 : Ojs.t) -> intf_of_js __tags_of_js x13311
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13309 : __tags intf) -> intf_to_js __tags_to_js x13309
    let (get_controller : 'tags this -> ServiceWorker.t option) =
      fun (x13313 : 'tags this) ->
        Ojs.option_of_js ServiceWorker.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13313) "controller")
    let (get_oncontrollerchange :
      'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x13316 : 'tags this) ->
        Ojs.option_of_js
          (fun (x13318 : Ojs.t) ->
             fun ~this:(x13319 : t) ->
               fun ~ev:(x13320 : Event.t) ->
                 any_of_js
                   (Ojs.apply x13318
                      [|(t_to_js x13319);(Event.t_to_js x13320)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13316)
             "oncontrollerchange")
    let (set_oncontrollerchange :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x13321 : 'tags this) ->
        fun (x13322 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13321)
            "oncontrollerchange"
            (Ojs.option_to_js
               (fun (x13323 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13324 : Ojs.t) ->
                       fun (x13325 : Ojs.t) ->
                         any_to_js
                           (x13323 ~this:(t_of_js x13324)
                              ~ev:(Event.t_of_js x13325)))) x13322)
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x13327 : 'tags this) ->
        Ojs.option_of_js
          (fun (x13329 : Ojs.t) ->
             fun ~this:(x13330 : t) ->
               fun ~ev:(x13331 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x13329
                      [|(t_to_js x13330);(MessageEvent.t_0_to_js x13331)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13327) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x13332 : 'tags this) ->
        fun (x13333 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13332) "onmessage"
            (Ojs.option_to_js
               (fun (x13334 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13335 : Ojs.t) ->
                       fun (x13336 : Ojs.t) ->
                         any_to_js
                           (x13334 ~this:(t_of_js x13335)
                              ~ev:(MessageEvent.t_0_of_js x13336)))) x13333)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x13338 : 'tags this) ->
        Ojs.option_of_js
          (fun (x13340 : Ojs.t) ->
             fun ~this:(x13341 : t) ->
               fun ~ev:(x13342 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x13340
                      [|(t_to_js x13341);(MessageEvent.t_0_to_js x13342)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13338) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x13343 : 'tags this) ->
        fun (x13344 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13343) "onmessageerror"
            (Ojs.option_to_js
               (fun (x13345 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13346 : Ojs.t) ->
                       fun (x13347 : Ojs.t) ->
                         any_to_js
                           (x13345 ~this:(t_of_js x13346)
                              ~ev:(MessageEvent.t_0_of_js x13347)))) x13344)
    let (get_ready : 'tags this -> ServiceWorkerRegistration.t Promise.t_1) =
      fun (x13349 : 'tags this) ->
        Promise.t_1_of_js ServiceWorkerRegistration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13349) "ready")
    let (getRegistration :
      'tags this ->
        ?clientURL:[ `U1 of string  | `U2 of URL.t ] ->
          unit -> ServiceWorkerRegistration.t option Promise.t_1)
      =
      fun (x13357 : 'tags this) ->
        fun ?clientURL:(x13352 : [ `U1 of string  | `U2 of URL.t ] option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x13360 : Ojs.t) ->
                 Ojs.option_of_js ServiceWorkerRegistration.t_of_js x13360)
              (let x13359 = this_to_js Obj.magic x13357 in
               Ojs.call (Ojs.get_prop_ascii x13359 "getRegistration") "apply"
                 [|x13359;((let x13353 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x13352 with
                             | Some x13354 ->
                                 ignore
                                   (Ojs.call x13353 "push"
                                      [|((match x13354 with
                                          | `U1 x13355 ->
                                              Ojs.string_to_js x13355
                                          | `U2 x13356 -> URL.t_to_js x13356))|])
                             | None -> ());
                            x13353))|])
    let (getRegistrations :
      'tags this -> ServiceWorkerRegistration.t list Promise.t_1) =
      fun (x13362 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x13364 : Ojs.t) ->
             Ojs.list_of_js ServiceWorkerRegistration.t_of_js x13364)
          (Ojs.call (this_to_js Obj.magic x13362) "getRegistrations" [||])
    let (register :
      'tags this ->
        scriptURL:[ `U1 of string  | `U2 of URL.t ] ->
          ?options:RegistrationOptions.t ->
            unit -> ServiceWorkerRegistration.t Promise.t_1)
      =
      fun (x13372 : 'tags this) ->
        fun ~scriptURL:(x13366 : [ `U1 of string  | `U2 of URL.t ]) ->
          fun ?options:(x13367 : RegistrationOptions.t option) ->
            fun () ->
              Promise.t_1_of_js ServiceWorkerRegistration.t_of_js
                (let x13374 = this_to_js Obj.magic x13372 in
                 Ojs.call (Ojs.get_prop_ascii x13374 "register") "apply"
                   [|x13374;((let x13368 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x13368 "push"
                                   [|((match x13366 with
                                       | `U1 x13370 ->
                                           Ojs.string_to_js x13370
                                       | `U2 x13371 -> URL.t_to_js x13371))|]);
                              (match x13367 with
                               | Some x13369 ->
                                   ignore
                                     (Ojs.call x13368 "push"
                                        [|(RegistrationOptions.t_to_js x13369)|])
                               | None -> ());
                              x13368))|])
    let (startMessages : 'tags this -> unit) =
      fun (x13376 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x13376) "startMessages" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13387 : 'tags this) ->
        fun ~type_:(x13378 : 'K) ->
          fun ~listener:(x13379 : this:t -> ev:any -> any) ->
            fun
              ?options:(x13380 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13389 = this_to_js Obj.magic x13387 in
                   Ojs.call (Ojs.get_prop_ascii x13389 "addEventListener")
                     "apply"
                     [|x13389;((let x13381 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13381 "push"
                                     [|(Obj.magic x13378)|]);
                                ignore
                                  (Ojs.call x13381 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x13385 : Ojs.t) ->
                                             fun (x13386 : Ojs.t) ->
                                               any_to_js
                                                 (x13379
                                                    ~this:(t_of_js x13385)
                                                    ~ev:(any_of_js x13386))))|]);
                                (match x13380 with
                                 | Some x13382 ->
                                     ignore
                                       (Ojs.call x13381 "push"
                                          [|((match x13382 with
                                              | `U1 x13383 ->
                                                  Ojs.bool_to_js x13383
                                              | `U2 x13384 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x13384))|])
                                 | None -> ());
                                x13381))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13397 : 'tags this) ->
        fun ~type_:(x13390 : string) ->
          fun ~listener:(x13391 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x13392 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13399 = this_to_js Obj.magic x13397 in
                   Ojs.call (Ojs.get_prop_ascii x13399 "addEventListener")
                     "apply"
                     [|x13399;((let x13393 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13393 "push"
                                     [|(Ojs.string_to_js x13390)|]);
                                ignore
                                  (Ojs.call x13393 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x13391)|]);
                                (match x13392 with
                                 | Some x13394 ->
                                     ignore
                                       (Ojs.call x13393 "push"
                                          [|((match x13394 with
                                              | `U1 x13395 ->
                                                  Ojs.bool_to_js x13395
                                              | `U2 x13396 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x13396))|])
                                 | None -> ());
                                x13393))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13409 : 'tags this) ->
        fun ~type_:(x13400 : 'K) ->
          fun ~listener:(x13401 : this:t -> ev:any -> any) ->
            fun
              ?options:(x13402 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13411 = this_to_js Obj.magic x13409 in
                   Ojs.call (Ojs.get_prop_ascii x13411 "removeEventListener")
                     "apply"
                     [|x13411;((let x13403 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13403 "push"
                                     [|(Obj.magic x13400)|]);
                                ignore
                                  (Ojs.call x13403 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x13407 : Ojs.t) ->
                                             fun (x13408 : Ojs.t) ->
                                               any_to_js
                                                 (x13401
                                                    ~this:(t_of_js x13407)
                                                    ~ev:(any_of_js x13408))))|]);
                                (match x13402 with
                                 | Some x13404 ->
                                     ignore
                                       (Ojs.call x13403 "push"
                                          [|((match x13404 with
                                              | `U1 x13405 ->
                                                  Ojs.bool_to_js x13405
                                              | `U2 x13406 ->
                                                  EventListenerOptions.t_to_js
                                                    x13406))|])
                                 | None -> ());
                                x13403))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13419 : 'tags this) ->
        fun ~type_:(x13412 : string) ->
          fun ~listener:(x13413 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x13414 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13421 = this_to_js Obj.magic x13419 in
                   Ojs.call (Ojs.get_prop_ascii x13421 "removeEventListener")
                     "apply"
                     [|x13421;((let x13415 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13415 "push"
                                     [|(Ojs.string_to_js x13412)|]);
                                ignore
                                  (Ojs.call x13415 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x13413)|]);
                                (match x13414 with
                                 | Some x13416 ->
                                     ignore
                                       (Ojs.call x13415 "push"
                                          [|((match x13416 with
                                              | `U1 x13417 ->
                                                  Ojs.bool_to_js x13417
                                              | `U2 x13418 ->
                                                  EventListenerOptions.t_to_js
                                                    x13418))|])
                                 | None -> ());
                                x13415))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerContainer")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerContainer") 
             [||])
  end
module SecurityPolicyViolationEventDisposition =
  struct
    type t = [ `L_s172_report  | `L_s67_enforce ]
    let rec t_of_js : Ojs.t -> t =
      fun (x13423 : Ojs.t) ->
        let x13424 = x13423 in
        match Ojs.string_of_js x13424 with
        | "report" -> `L_s172_report
        | "enforce" -> `L_s67_enforce
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x13422 : [ `L_s172_report  | `L_s67_enforce ]) ->
        match x13422 with
        | `L_s172_report -> Ojs.string_to_js "report"
        | `L_s67_enforce -> Ojs.string_to_js "enforce"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13426 : Ojs.t) -> t_of_js x13426
    and t_0_to_js : t_0 -> Ojs.t = fun (x13425 : t) -> t_to_js x13425
  end
module SecurityPolicyViolationEventInit =
  struct
    type t = [ `EventInit  | `SecurityPolicyViolationEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13428 : Ojs.t) -> t_of_js x13428
    and t_0_to_js : t_0 -> Ojs.t = fun (x13427 : t) -> t_to_js x13427
    type tags = [ `EventInit  | `SecurityPolicyViolationEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `SecurityPolicyViolationEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13431 : Ojs.t) -> intf_of_js __tags_of_js x13431
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13429 : __tags intf) -> intf_to_js __tags_to_js x13429
    let (get_blockedURI : 'tags this -> string option) =
      fun (x13433 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13433) "blockedURI")
    let (set_blockedURI : 'tags this -> string -> unit) =
      fun (x13436 : 'tags this) ->
        fun (x13437 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13436) "blockedURI"
            (Ojs.string_to_js x13437)
    let (get_columnNumber : 'tags this -> float option) =
      fun (x13439 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13439) "columnNumber")
    let (set_columnNumber : 'tags this -> float -> unit) =
      fun (x13442 : 'tags this) ->
        fun (x13443 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13442) "columnNumber"
            (Ojs.float_to_js x13443)
    let (get_disposition :
      'tags this -> SecurityPolicyViolationEventDisposition.t) =
      fun (x13445 : 'tags this) ->
        SecurityPolicyViolationEventDisposition.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13445) "disposition")
    let (set_disposition :
      'tags this -> SecurityPolicyViolationEventDisposition.t -> unit) =
      fun (x13447 : 'tags this) ->
        fun (x13448 : SecurityPolicyViolationEventDisposition.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13447) "disposition"
            (SecurityPolicyViolationEventDisposition.t_to_js x13448)
    let (get_documentURI : 'tags this -> string) =
      fun (x13450 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13450) "documentURI")
    let (set_documentURI : 'tags this -> string -> unit) =
      fun (x13452 : 'tags this) ->
        fun (x13453 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13452) "documentURI"
            (Ojs.string_to_js x13453)
    let (get_effectiveDirective : 'tags this -> string) =
      fun (x13455 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13455)
             "effectiveDirective")
    let (set_effectiveDirective : 'tags this -> string -> unit) =
      fun (x13457 : 'tags this) ->
        fun (x13458 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13457)
            "effectiveDirective" (Ojs.string_to_js x13458)
    let (get_lineNumber : 'tags this -> float option) =
      fun (x13460 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13460) "lineNumber")
    let (set_lineNumber : 'tags this -> float -> unit) =
      fun (x13463 : 'tags this) ->
        fun (x13464 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13463) "lineNumber"
            (Ojs.float_to_js x13464)
    let (get_originalPolicy : 'tags this -> string) =
      fun (x13466 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13466) "originalPolicy")
    let (set_originalPolicy : 'tags this -> string -> unit) =
      fun (x13468 : 'tags this) ->
        fun (x13469 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13468) "originalPolicy"
            (Ojs.string_to_js x13469)
    let (get_referrer : 'tags this -> string option) =
      fun (x13471 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13471) "referrer")
    let (set_referrer : 'tags this -> string -> unit) =
      fun (x13474 : 'tags this) ->
        fun (x13475 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13474) "referrer"
            (Ojs.string_to_js x13475)
    let (get_sample : 'tags this -> string option) =
      fun (x13477 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13477) "sample")
    let (set_sample : 'tags this -> string -> unit) =
      fun (x13480 : 'tags this) ->
        fun (x13481 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13480) "sample"
            (Ojs.string_to_js x13481)
    let (get_sourceFile : 'tags this -> string option) =
      fun (x13483 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13483) "sourceFile")
    let (set_sourceFile : 'tags this -> string -> unit) =
      fun (x13486 : 'tags this) ->
        fun (x13487 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13486) "sourceFile"
            (Ojs.string_to_js x13487)
    let (get_statusCode : 'tags this -> float) =
      fun (x13489 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13489) "statusCode")
    let (set_statusCode : 'tags this -> float -> unit) =
      fun (x13491 : 'tags this) ->
        fun (x13492 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13491) "statusCode"
            (Ojs.float_to_js x13492)
    let (get_violatedDirective : 'tags this -> string) =
      fun (x13494 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13494)
             "violatedDirective")
    let (set_violatedDirective : 'tags this -> string -> unit) =
      fun (x13496 : 'tags this) ->
        fun (x13497 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13496)
            "violatedDirective" (Ojs.string_to_js x13497)
    let (create :
      ?blockedURI:string ->
        ?columnNumber:float ->
          disposition:SecurityPolicyViolationEventDisposition.t ->
            documentURI:string ->
              effectiveDirective:string ->
                ?lineNumber:float ->
                  originalPolicy:string ->
                    ?referrer:string ->
                      ?sample:string ->
                        ?sourceFile:string ->
                          statusCode:float ->
                            violatedDirective:string -> unit -> t)
      =
      fun ?blockedURI:(x13499 : string option) ->
        fun ?columnNumber:(x13500 : float option) ->
          fun
            ~disposition:(x13501 : SecurityPolicyViolationEventDisposition.t)
            ->
            fun ~documentURI:(x13502 : string) ->
              fun ~effectiveDirective:(x13503 : string) ->
                fun ?lineNumber:(x13504 : float option) ->
                  fun ~originalPolicy:(x13505 : string) ->
                    fun ?referrer:(x13506 : string option) ->
                      fun ?sample:(x13507 : string option) ->
                        fun ?sourceFile:(x13508 : string option) ->
                          fun ~statusCode:(x13509 : float) ->
                            fun ~violatedDirective:(x13510 : string) ->
                              fun () ->
                                let x13511 = Ojs.empty_obj () in
                                (match x13499 with
                                 | Some x13517 ->
                                     Ojs.set_prop_ascii x13511 "blockedURI"
                                       (Ojs.string_to_js x13517)
                                 | None -> ());
                                (match x13500 with
                                 | Some x13516 ->
                                     Ojs.set_prop_ascii x13511 "columnNumber"
                                       (Ojs.float_to_js x13516)
                                 | None -> ());
                                Ojs.set_prop_ascii x13511 "disposition"
                                  (SecurityPolicyViolationEventDisposition.t_to_js
                                     x13501);
                                Ojs.set_prop_ascii x13511 "documentURI"
                                  (Ojs.string_to_js x13502);
                                Ojs.set_prop_ascii x13511
                                  "effectiveDirective"
                                  (Ojs.string_to_js x13503);
                                (match x13504 with
                                 | Some x13515 ->
                                     Ojs.set_prop_ascii x13511 "lineNumber"
                                       (Ojs.float_to_js x13515)
                                 | None -> ());
                                Ojs.set_prop_ascii x13511 "originalPolicy"
                                  (Ojs.string_to_js x13505);
                                (match x13506 with
                                 | Some x13514 ->
                                     Ojs.set_prop_ascii x13511 "referrer"
                                       (Ojs.string_to_js x13514)
                                 | None -> ());
                                (match x13507 with
                                 | Some x13513 ->
                                     Ojs.set_prop_ascii x13511 "sample"
                                       (Ojs.string_to_js x13513)
                                 | None -> ());
                                (match x13508 with
                                 | Some x13512 ->
                                     Ojs.set_prop_ascii x13511 "sourceFile"
                                       (Ojs.string_to_js x13512)
                                 | None -> ());
                                Ojs.set_prop_ascii x13511 "statusCode"
                                  (Ojs.float_to_js x13509);
                                Ojs.set_prop_ascii x13511 "violatedDirective"
                                  (Ojs.string_to_js x13510);
                                t_of_js x13511
    let cast_from = Obj.magic
  end
module SecurityPolicyViolationEvent =
  struct
    type t = [ `Event  | `SecurityPolicyViolationEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13519 : Ojs.t) -> t_of_js x13519
    and t_0_to_js : t_0 -> Ojs.t = fun (x13518 : t) -> t_to_js x13518
    type tags = [ `Event  | `SecurityPolicyViolationEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `SecurityPolicyViolationEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13522 : Ojs.t) -> intf_of_js __tags_of_js x13522
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13520 : __tags intf) -> intf_to_js __tags_to_js x13520
    let (get_blockedURI : 'tags this -> string) =
      fun (x13524 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13524) "blockedURI")
    let (get_columnNumber : 'tags this -> float) =
      fun (x13526 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13526) "columnNumber")
    let (get_disposition :
      'tags this -> SecurityPolicyViolationEventDisposition.t) =
      fun (x13528 : 'tags this) ->
        SecurityPolicyViolationEventDisposition.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13528) "disposition")
    let (get_documentURI : 'tags this -> string) =
      fun (x13530 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13530) "documentURI")
    let (get_effectiveDirective : 'tags this -> string) =
      fun (x13532 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13532)
             "effectiveDirective")
    let (get_lineNumber : 'tags this -> float) =
      fun (x13534 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13534) "lineNumber")
    let (get_originalPolicy : 'tags this -> string) =
      fun (x13536 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13536) "originalPolicy")
    let (get_referrer : 'tags this -> string) =
      fun (x13538 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13538) "referrer")
    let (get_sample : 'tags this -> string) =
      fun (x13540 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13540) "sample")
    let (get_sourceFile : 'tags this -> string) =
      fun (x13542 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13542) "sourceFile")
    let (get_statusCode : 'tags this -> float) =
      fun (x13544 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13544) "statusCode")
    let (get_violatedDirective : 'tags this -> string) =
      fun (x13546 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13546)
             "violatedDirective")
    let (create :
      blockedURI:string ->
        columnNumber:float ->
          disposition:SecurityPolicyViolationEventDisposition.t ->
            documentURI:string ->
              effectiveDirective:string ->
                lineNumber:float ->
                  originalPolicy:string ->
                    referrer:string ->
                      sample:string ->
                        sourceFile:string ->
                          statusCode:float ->
                            violatedDirective:string -> unit -> t)
      =
      fun ~blockedURI:(x13548 : string) ->
        fun ~columnNumber:(x13549 : float) ->
          fun
            ~disposition:(x13550 : SecurityPolicyViolationEventDisposition.t)
            ->
            fun ~documentURI:(x13551 : string) ->
              fun ~effectiveDirective:(x13552 : string) ->
                fun ~lineNumber:(x13553 : float) ->
                  fun ~originalPolicy:(x13554 : string) ->
                    fun ~referrer:(x13555 : string) ->
                      fun ~sample:(x13556 : string) ->
                        fun ~sourceFile:(x13557 : string) ->
                          fun ~statusCode:(x13558 : float) ->
                            fun ~violatedDirective:(x13559 : string) ->
                              fun () ->
                                let x13560 = Ojs.empty_obj () in
                                Ojs.set_prop_ascii x13560 "blockedURI"
                                  (Ojs.string_to_js x13548);
                                Ojs.set_prop_ascii x13560 "columnNumber"
                                  (Ojs.float_to_js x13549);
                                Ojs.set_prop_ascii x13560 "disposition"
                                  (SecurityPolicyViolationEventDisposition.t_to_js
                                     x13550);
                                Ojs.set_prop_ascii x13560 "documentURI"
                                  (Ojs.string_to_js x13551);
                                Ojs.set_prop_ascii x13560
                                  "effectiveDirective"
                                  (Ojs.string_to_js x13552);
                                Ojs.set_prop_ascii x13560 "lineNumber"
                                  (Ojs.float_to_js x13553);
                                Ojs.set_prop_ascii x13560 "originalPolicy"
                                  (Ojs.string_to_js x13554);
                                Ojs.set_prop_ascii x13560 "referrer"
                                  (Ojs.string_to_js x13555);
                                Ojs.set_prop_ascii x13560 "sample"
                                  (Ojs.string_to_js x13556);
                                Ojs.set_prop_ascii x13560 "sourceFile"
                                  (Ojs.string_to_js x13557);
                                Ojs.set_prop_ascii x13560 "statusCode"
                                  (Ojs.float_to_js x13558);
                                Ojs.set_prop_ascii x13560 "violatedDirective"
                                  (Ojs.string_to_js x13559);
                                t_of_js x13560
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "SecurityPolicyViolationEvent")
             "prototype")
    let (create' :
      type_:string ->
        ?eventInitDict:SecurityPolicyViolationEventInit.t -> unit -> t)
      =
      fun ~type_:(x13561 : string) ->
        fun
          ?eventInitDict:(x13562 : SecurityPolicyViolationEventInit.t option)
          ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global
                    "SecurityPolicyViolationEvent")
                 (let x13563 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x13563 "push" [|(Ojs.string_to_js x13561)|]);
                  (match x13562 with
                   | Some x13564 ->
                       ignore
                         (Ojs.call x13563 "push"
                            [|(SecurityPolicyViolationEventInit.t_to_js
                                 x13564)|])
                   | None -> ());
                  x13563))
  end
module ReadableStreamReader =
  struct
    type 'T t = 'T ReadableStreamDefaultReader.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x13567 : Ojs.t) ->
            ReadableStreamDefaultReader.t_of_js __T_of_js x13567
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x13565 : __T ReadableStreamDefaultReader.t) ->
            ReadableStreamDefaultReader.t_to_js __T_to_js x13565
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x13571 : Ojs.t) -> t_of_js __T_of_js x13571
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x13569 : __T t) -> t_to_js __T_to_js x13569
  end
module PermissionStatus =
  struct
    type t = [ `EventTarget  | `PermissionStatus ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13574 : Ojs.t) -> t_of_js x13574
    and t_0_to_js : t_0 -> Ojs.t = fun (x13573 : t) -> t_to_js x13573
    type tags = [ `EventTarget  | `PermissionStatus ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PermissionStatus ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13577 : Ojs.t) -> intf_of_js __tags_of_js x13577
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13575 : __tags intf) -> intf_to_js __tags_to_js x13575
    let (get_onchange : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x13579 : 'tags this) ->
        Ojs.option_of_js
          (fun (x13581 : Ojs.t) ->
             fun ~this:(x13582 : t) ->
               fun ~ev:(x13583 : Event.t) ->
                 any_of_js
                   (Ojs.apply x13581
                      [|(t_to_js x13582);(Event.t_to_js x13583)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13579) "onchange")
    let (set_onchange :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x13584 : 'tags this) ->
        fun (x13585 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13584) "onchange"
            (Ojs.option_to_js
               (fun (x13586 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13587 : Ojs.t) ->
                       fun (x13588 : Ojs.t) ->
                         any_to_js
                           (x13586 ~this:(t_of_js x13587)
                              ~ev:(Event.t_of_js x13588)))) x13585)
    let (get_state : 'tags this -> PermissionState.t) =
      fun (x13590 : 'tags this) ->
        PermissionState.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13590) "state")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13601 : 'tags this) ->
        fun ~type_:(x13592 : 'K) ->
          fun ~listener:(x13593 : this:t -> ev:any -> any) ->
            fun
              ?options:(x13594 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13603 = this_to_js Obj.magic x13601 in
                   Ojs.call (Ojs.get_prop_ascii x13603 "addEventListener")
                     "apply"
                     [|x13603;((let x13595 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13595 "push"
                                     [|(Obj.magic x13592)|]);
                                ignore
                                  (Ojs.call x13595 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x13599 : Ojs.t) ->
                                             fun (x13600 : Ojs.t) ->
                                               any_to_js
                                                 (x13593
                                                    ~this:(t_of_js x13599)
                                                    ~ev:(any_of_js x13600))))|]);
                                (match x13594 with
                                 | Some x13596 ->
                                     ignore
                                       (Ojs.call x13595 "push"
                                          [|((match x13596 with
                                              | `U1 x13597 ->
                                                  Ojs.bool_to_js x13597
                                              | `U2 x13598 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x13598))|])
                                 | None -> ());
                                x13595))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13611 : 'tags this) ->
        fun ~type_:(x13604 : string) ->
          fun ~listener:(x13605 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x13606 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13613 = this_to_js Obj.magic x13611 in
                   Ojs.call (Ojs.get_prop_ascii x13613 "addEventListener")
                     "apply"
                     [|x13613;((let x13607 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13607 "push"
                                     [|(Ojs.string_to_js x13604)|]);
                                ignore
                                  (Ojs.call x13607 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x13605)|]);
                                (match x13606 with
                                 | Some x13608 ->
                                     ignore
                                       (Ojs.call x13607 "push"
                                          [|((match x13608 with
                                              | `U1 x13609 ->
                                                  Ojs.bool_to_js x13609
                                              | `U2 x13610 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x13610))|])
                                 | None -> ());
                                x13607))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13623 : 'tags this) ->
        fun ~type_:(x13614 : 'K) ->
          fun ~listener:(x13615 : this:t -> ev:any -> any) ->
            fun
              ?options:(x13616 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13625 = this_to_js Obj.magic x13623 in
                   Ojs.call (Ojs.get_prop_ascii x13625 "removeEventListener")
                     "apply"
                     [|x13625;((let x13617 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13617 "push"
                                     [|(Obj.magic x13614)|]);
                                ignore
                                  (Ojs.call x13617 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x13621 : Ojs.t) ->
                                             fun (x13622 : Ojs.t) ->
                                               any_to_js
                                                 (x13615
                                                    ~this:(t_of_js x13621)
                                                    ~ev:(any_of_js x13622))))|]);
                                (match x13616 with
                                 | Some x13618 ->
                                     ignore
                                       (Ojs.call x13617 "push"
                                          [|((match x13618 with
                                              | `U1 x13619 ->
                                                  Ojs.bool_to_js x13619
                                              | `U2 x13620 ->
                                                  EventListenerOptions.t_to_js
                                                    x13620))|])
                                 | None -> ());
                                x13617))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13633 : 'tags this) ->
        fun ~type_:(x13626 : string) ->
          fun ~listener:(x13627 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x13628 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13635 = this_to_js Obj.magic x13633 in
                   Ojs.call (Ojs.get_prop_ascii x13635 "removeEventListener")
                     "apply"
                     [|x13635;((let x13629 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13629 "push"
                                     [|(Ojs.string_to_js x13626)|]);
                                ignore
                                  (Ojs.call x13629 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x13627)|]);
                                (match x13628 with
                                 | Some x13630 ->
                                     ignore
                                       (Ojs.call x13629 "push"
                                          [|((match x13630 with
                                              | `U1 x13631 ->
                                                  Ojs.bool_to_js x13631
                                              | `U2 x13632 ->
                                                  EventListenerOptions.t_to_js
                                                    x13632))|])
                                 | None -> ());
                                x13629))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PermissionStatus") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PermissionStatus")
             [||])
  end
module PermissionName =
  struct
    type t =
      [ `L_s133_notifications  | `L_s150_persistent_storage  | `L_s161_push 
      | `L_s176_screen_wake_lock  | `L_s217_xr_spatial_tracking 
      | `L_s82_geolocation ]
    let rec t_of_js : Ojs.t -> t =
      fun (x13637 : Ojs.t) ->
        let x13638 = x13637 in
        match Ojs.string_of_js x13638 with
        | "notifications" -> `L_s133_notifications
        | "persistent-storage" -> `L_s150_persistent_storage
        | "push" -> `L_s161_push
        | "screen-wake-lock" -> `L_s176_screen_wake_lock
        | "xr-spatial-tracking" -> `L_s217_xr_spatial_tracking
        | "geolocation" -> `L_s82_geolocation
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x13636 :
          [ `L_s133_notifications  | `L_s150_persistent_storage 
          | `L_s161_push  | `L_s176_screen_wake_lock 
          | `L_s217_xr_spatial_tracking  | `L_s82_geolocation ])
        ->
        match x13636 with
        | `L_s133_notifications -> Ojs.string_to_js "notifications"
        | `L_s150_persistent_storage -> Ojs.string_to_js "persistent-storage"
        | `L_s161_push -> Ojs.string_to_js "push"
        | `L_s176_screen_wake_lock -> Ojs.string_to_js "screen-wake-lock"
        | `L_s217_xr_spatial_tracking ->
            Ojs.string_to_js "xr-spatial-tracking"
        | `L_s82_geolocation -> Ojs.string_to_js "geolocation"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13640 : Ojs.t) -> t_of_js x13640
    and t_0_to_js : t_0 -> Ojs.t = fun (x13639 : t) -> t_to_js x13639
  end
module PermissionDescriptor =
  struct
    type t = [ `PermissionDescriptor ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13642 : Ojs.t) -> t_of_js x13642
    and t_0_to_js : t_0 -> Ojs.t = fun (x13641 : t) -> t_to_js x13641
    type tags = [ `PermissionDescriptor ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PermissionDescriptor ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13645 : Ojs.t) -> intf_of_js __tags_of_js x13645
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13643 : __tags intf) -> intf_to_js __tags_to_js x13643
    let (get_name : 'tags this -> PermissionName.t) =
      fun (x13647 : 'tags this) ->
        PermissionName.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13647) "name")
    let (set_name : 'tags this -> PermissionName.t -> unit) =
      fun (x13649 : 'tags this) ->
        fun (x13650 : PermissionName.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13649) "name"
            (PermissionName.t_to_js x13650)
    let (create : name:PermissionName.t -> unit -> t) =
      fun ~name:(x13652 : PermissionName.t) ->
        fun () ->
          let x13653 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x13653 "name" (PermissionName.t_to_js x13652);
          t_of_js x13653
    let cast_from = Obj.magic
  end
module Permissions =
  struct
    type t = [ `Permissions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13655 : Ojs.t) -> t_of_js x13655
    and t_0_to_js : t_0 -> Ojs.t = fun (x13654 : t) -> t_to_js x13654
    type tags = [ `Permissions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Permissions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13658 : Ojs.t) -> intf_of_js __tags_of_js x13658
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13656 : __tags intf) -> intf_to_js __tags_to_js x13656
    let (query :
      'tags this ->
        permissionDesc:PermissionDescriptor.t ->
          PermissionStatus.t Promise.t_1)
      =
      fun (x13661 : 'tags this) ->
        fun ~permissionDesc:(x13660 : PermissionDescriptor.t) ->
          Promise.t_1_of_js PermissionStatus.t_of_js
            (Ojs.call (this_to_js Obj.magic x13661) "query"
               [|(PermissionDescriptor.t_to_js x13660)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Permissions")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Permissions") [||])
  end
module PermissionStatusEventMap =
  struct
    type t = [ `PermissionStatusEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13665 : Ojs.t) -> t_of_js x13665
    and t_0_to_js : t_0 -> Ojs.t = fun (x13664 : t) -> t_to_js x13664
    type tags = [ `PermissionStatusEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PermissionStatusEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13668 : Ojs.t) -> intf_of_js __tags_of_js x13668
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13666 : __tags intf) -> intf_to_js __tags_to_js x13666
    let (get_change : 'tags this -> Event.t) =
      fun (x13670 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13670) "change")
    let (set_change : 'tags this -> Event.t -> unit) =
      fun (x13672 : 'tags this) ->
        fun (x13673 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13672) "change"
            (Event.t_to_js x13673)
    let (create : change:Event.t -> unit -> t) =
      fun ~change:(x13675 : Event.t) ->
        fun () ->
          let x13676 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x13676 "change" (Event.t_to_js x13675);
          t_of_js x13676
    let cast_from = Obj.magic
  end
module PerformanceServerTiming =
  struct
    type t = [ `PerformanceServerTiming ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13678 : Ojs.t) -> t_of_js x13678
    and t_0_to_js : t_0 -> Ojs.t = fun (x13677 : t) -> t_to_js x13677
    type tags = [ `PerformanceServerTiming ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceServerTiming ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13681 : Ojs.t) -> intf_of_js __tags_of_js x13681
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13679 : __tags intf) -> intf_to_js __tags_to_js x13679
    let (get_description : 'tags this -> string) =
      fun (x13683 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13683) "description")
    let (get_duration : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13685 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13685) "duration")
    let (get_name : 'tags this -> string) =
      fun (x13687 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13687) "name")
    let (toJSON : 'tags this -> any) =
      fun (x13689 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x13689) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceServerTiming")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "PerformanceServerTiming") 
             [||])
  end
module PerformanceResourceTiming =
  struct
    type t = [ `PerformanceEntry  | `PerformanceResourceTiming ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13692 : Ojs.t) -> t_of_js x13692
    and t_0_to_js : t_0 -> Ojs.t = fun (x13691 : t) -> t_to_js x13691
    type tags = [ `PerformanceEntry  | `PerformanceResourceTiming ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceResourceTiming ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13695 : Ojs.t) -> intf_of_js __tags_of_js x13695
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13693 : __tags intf) -> intf_to_js __tags_to_js x13693
    let (get_connectEnd : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13697 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13697) "connectEnd")
    let (get_connectStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13699 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13699) "connectStart")
    let (get_decodedBodySize : 'tags this -> float) =
      fun (x13701 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13701) "decodedBodySize")
    let (get_domainLookupEnd : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13703 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13703) "domainLookupEnd")
    let (get_domainLookupStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13705 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13705)
             "domainLookupStart")
    let (get_encodedBodySize : 'tags this -> float) =
      fun (x13707 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13707) "encodedBodySize")
    let (get_fetchStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13709 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13709) "fetchStart")
    let (get_initiatorType : 'tags this -> string) =
      fun (x13711 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13711) "initiatorType")
    let (get_nextHopProtocol : 'tags this -> string) =
      fun (x13713 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13713) "nextHopProtocol")
    let (get_redirectEnd : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13715 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13715) "redirectEnd")
    let (get_redirectStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13717 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13717) "redirectStart")
    let (get_requestStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13719 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13719) "requestStart")
    let (get_responseEnd : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13721 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13721) "responseEnd")
    let (get_responseStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13723 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13723) "responseStart")
    let (get_secureConnectionStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13725 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13725)
             "secureConnectionStart")
    let (get_serverTiming : 'tags this -> PerformanceServerTiming.t list) =
      fun (x13727 : 'tags this) ->
        Ojs.list_of_js PerformanceServerTiming.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13727) "serverTiming")
    let (get_transferSize : 'tags this -> float) =
      fun (x13730 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13730) "transferSize")
    let (get_workerStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13732 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13732) "workerStart")
    let (toJSON : 'tags this -> any) =
      fun (x13734 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x13734) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceResourceTiming")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "PerformanceResourceTiming") 
             [||])
  end
module PerformanceObserverInit =
  struct
    type t = [ `PerformanceObserverInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13737 : Ojs.t) -> t_of_js x13737
    and t_0_to_js : t_0 -> Ojs.t = fun (x13736 : t) -> t_to_js x13736
    type tags = [ `PerformanceObserverInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceObserverInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13740 : Ojs.t) -> intf_of_js __tags_of_js x13740
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13738 : __tags intf) -> intf_to_js __tags_to_js x13738
    let (get_buffered : 'tags this -> bool option) =
      fun (x13742 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13742) "buffered")
    let (set_buffered : 'tags this -> bool -> unit) =
      fun (x13745 : 'tags this) ->
        fun (x13746 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13745) "buffered"
            (Ojs.bool_to_js x13746)
    let (get_entryTypes : 'tags this -> string list option) =
      fun (x13748 : 'tags this) ->
        Ojs.option_of_js
          (fun (x13750 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x13750)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13748) "entryTypes")
    let (set_entryTypes : 'tags this -> string list -> unit) =
      fun (x13752 : 'tags this) ->
        fun (x13753 : string list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13752) "entryTypes"
            (Ojs.list_to_js Ojs.string_to_js x13753)
    let (get_type : 'tags this -> string option) =
      fun (x13756 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13756) "type")
    let (set_type : 'tags this -> string -> unit) =
      fun (x13759 : 'tags this) ->
        fun (x13760 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13759) "type"
            (Ojs.string_to_js x13760)
    let (create :
      ?buffered:bool -> ?entryTypes:string list -> ?type_:string -> unit -> t)
      =
      fun ?buffered:(x13762 : bool option) ->
        fun ?entryTypes:(x13763 : string list option) ->
          fun ?type_:(x13764 : string option) ->
            fun () ->
              let x13765 = Ojs.empty_obj () in
              (match x13762 with
               | Some x13769 ->
                   Ojs.set_prop_ascii x13765 "buffered"
                     (Ojs.bool_to_js x13769)
               | None -> ());
              (match x13763 with
               | Some x13767 ->
                   Ojs.set_prop_ascii x13765 "entryTypes"
                     (Ojs.list_to_js Ojs.string_to_js x13767)
               | None -> ());
              (match x13764 with
               | Some x13766 ->
                   Ojs.set_prop_ascii x13765 "type" (Ojs.string_to_js x13766)
               | None -> ());
              t_of_js x13765
    let cast_from = Obj.magic
  end
module PerformanceObserverEntryList =
  struct
    type t = [ `PerformanceObserverEntryList ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13771 : Ojs.t) -> t_of_js x13771
    and t_0_to_js : t_0 -> Ojs.t = fun (x13770 : t) -> t_to_js x13770
    type tags = [ `PerformanceObserverEntryList ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceObserverEntryList ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13774 : Ojs.t) -> intf_of_js __tags_of_js x13774
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13772 : __tags intf) -> intf_to_js __tags_to_js x13772
    let (getEntries : 'tags this -> PerformanceEntryList.t) =
      fun (x13776 : 'tags this) ->
        PerformanceEntryList.t_of_js
          (Ojs.call (this_to_js Obj.magic x13776) "getEntries" [||])
    let (getEntriesByName :
      'tags this ->
        name:string -> ?type_:string -> unit -> PerformanceEntryList.t)
      =
      fun (x13782 : 'tags this) ->
        fun ~name:(x13778 : string) ->
          fun ?type_:(x13779 : string option) ->
            fun () ->
              PerformanceEntryList.t_of_js
                (let x13784 = this_to_js Obj.magic x13782 in
                 Ojs.call (Ojs.get_prop_ascii x13784 "getEntriesByName")
                   "apply"
                   [|x13784;((let x13780 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x13780 "push"
                                   [|(Ojs.string_to_js x13778)|]);
                              (match x13779 with
                               | Some x13781 ->
                                   ignore
                                     (Ojs.call x13780 "push"
                                        [|(Ojs.string_to_js x13781)|])
                               | None -> ());
                              x13780))|])
    let (getEntriesByType :
      'tags this -> type_:string -> PerformanceEntryList.t) =
      fun (x13786 : 'tags this) ->
        fun ~type_:(x13785 : string) ->
          PerformanceEntryList.t_of_js
            (Ojs.call (this_to_js Obj.magic x13786) "getEntriesByType"
               [|(Ojs.string_to_js x13785)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceObserverEntryList")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "PerformanceObserverEntryList")
             [||])
  end
module rec
  PerformanceObserver:sig
                        type t = [ `PerformanceObserver ] intf
                        type t_0 = t
                        [@@@js.stop ]
                        type tags = [ `PerformanceObserver ]
                        type tags_0 = tags
                        [@@@js.start ]
                        [@@@js.implem
                          type tags = [ `PerformanceObserver ]
                          type tags_0 = tags]
                        type 'tags this =
                          'tags intf constraint 'tags =
                                      [> `PerformanceObserver ]
                        val t_to_js : t -> Ojs.t
                        val t_of_js : Ojs.t -> t
                        val t_0_to_js : t_0 -> Ojs.t
                        val t_0_of_js : Ojs.t -> t_0
                        val disconnect : 'tags this -> unit
                        val observe :
                          'tags this ->
                            ?options:PerformanceObserverInit.t ->
                              unit -> unit
                        val takeRecords :
                          'tags this -> PerformanceEntryList.t
                        val cast_from : 'tags this -> t
                        val prototype : unit -> t
                        val create : PerformanceObserverCallback.t -> t
                        val supportedEntryTypes : unit -> string list
                      end =
  struct
    type t = [ `PerformanceObserver ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13789 : Ojs.t) -> t_of_js x13789
    and t_0_to_js : t_0 -> Ojs.t = fun (x13788 : t) -> t_to_js x13788
    type tags = [ `PerformanceObserver ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceObserver ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13792 : Ojs.t) -> intf_of_js __tags_of_js x13792
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13790 : __tags intf) -> intf_to_js __tags_to_js x13790
    let (disconnect : 'tags this -> unit) =
      fun (x13794 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x13794) "disconnect" [||])
    let (observe :
      'tags this -> ?options:PerformanceObserverInit.t -> unit -> unit) =
      fun (x13799 : 'tags this) ->
        fun ?options:(x13796 : PerformanceObserverInit.t option) ->
          fun () ->
            ignore
              (let x13801 = this_to_js Obj.magic x13799 in
               Ojs.call (Ojs.get_prop_ascii x13801 "observe") "apply"
                 [|x13801;((let x13797 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x13796 with
                             | Some x13798 ->
                                 ignore
                                   (Ojs.call x13797 "push"
                                      [|(PerformanceObserverInit.t_to_js
                                           x13798)|])
                             | None -> ());
                            x13797))|])
    let (takeRecords : 'tags this -> PerformanceEntryList.t) =
      fun (x13802 : 'tags this) ->
        PerformanceEntryList.t_of_js
          (Ojs.call (this_to_js Obj.magic x13802) "takeRecords" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceObserver")
             "prototype")
    let (create : PerformanceObserverCallback.t -> t) =
      fun (x13804 : PerformanceObserverCallback.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PerformanceObserver")
             [|(PerformanceObserverCallback.t_to_js x13804)|])
    let (supportedEntryTypes : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceObserver")
             "supportedEntryTypes")
  end
 and
  PerformanceObserverCallback:sig
                                type t =
                                  [ `PerformanceObserverCallback ] intf
                                type t_0 = t
                                [@@@js.stop ]
                                type tags = [ `PerformanceObserverCallback ]
                                type tags_0 = tags
                                [@@@js.start ]
                                [@@@js.implem
                                  type tags =
                                    [ `PerformanceObserverCallback ]
                                  type tags_0 = tags]
                                type 'tags this =
                                  'tags intf constraint 'tags =
                                              [>
                                                `PerformanceObserverCallback ]
                                val t_to_js : t -> Ojs.t
                                val t_of_js : Ojs.t -> t
                                val t_0_to_js : t_0 -> Ojs.t
                                val t_0_of_js : Ojs.t -> t_0
                                val apply :
                                  'tags this ->
                                    entries:PerformanceObserverEntryList.t ->
                                      observer:PerformanceObserver.t -> unit
                                val cast_from : 'tags this -> t
                              end =
  struct
    type t = [ `PerformanceObserverCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13807 : Ojs.t) -> t_of_js x13807
    and t_0_to_js : t_0 -> Ojs.t = fun (x13806 : t) -> t_to_js x13806
    type tags = [ `PerformanceObserverCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceObserverCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13810 : Ojs.t) -> intf_of_js __tags_of_js x13810
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13808 : __tags intf) -> intf_to_js __tags_to_js x13808
    let (apply :
      'tags this ->
        entries:PerformanceObserverEntryList.t ->
          observer:PerformanceObserver.t -> unit)
      =
      fun (x13814 : 'tags this) ->
        fun ~entries:(x13812 : PerformanceObserverEntryList.t) ->
          fun ~observer:(x13813 : PerformanceObserver.t) ->
            ignore
              (Ojs.apply (this_to_js Obj.magic x13814)
                 [|(PerformanceObserverEntryList.t_to_js x13812);(PerformanceObserver.t_to_js
                                                                    x13813)|])
    let cast_from = Obj.magic
  end
module PerformanceEventMap =
  struct
    type t = [ `PerformanceEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13817 : Ojs.t) -> t_of_js x13817
    and t_0_to_js : t_0 -> Ojs.t = fun (x13816 : t) -> t_to_js x13816
    type tags = [ `PerformanceEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13820 : Ojs.t) -> intf_of_js __tags_of_js x13820
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13818 : __tags intf) -> intf_to_js __tags_to_js x13818
    let (get_resourcetimingbufferfull : 'tags this -> Event.t) =
      fun (x13822 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13822)
             "resourcetimingbufferfull")
    let (set_resourcetimingbufferfull : 'tags this -> Event.t -> unit) =
      fun (x13824 : 'tags this) ->
        fun (x13825 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13824)
            "resourcetimingbufferfull" (Event.t_to_js x13825)
    let (create : resourcetimingbufferfull:Event.t -> unit -> t) =
      fun ~resourcetimingbufferfull:(x13827 : Event.t) ->
        fun () ->
          let x13828 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x13828 "resourcetimingbufferfull"
            (Event.t_to_js x13827);
          t_of_js x13828
    let cast_from = Obj.magic
  end
module DOMMatrix2DInit =
  struct
    type t = [ `DOMMatrix2DInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13830 : Ojs.t) -> t_of_js x13830
    and t_0_to_js : t_0 -> Ojs.t = fun (x13829 : t) -> t_to_js x13829
    type tags = [ `DOMMatrix2DInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrix2DInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13833 : Ojs.t) -> intf_of_js __tags_of_js x13833
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13831 : __tags intf) -> intf_to_js __tags_to_js x13831
    let (get_a : 'tags this -> float option) =
      fun (x13835 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13835) "a")
    let (set_a : 'tags this -> float -> unit) =
      fun (x13838 : 'tags this) ->
        fun (x13839 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13838) "a"
            (Ojs.float_to_js x13839)
    let (get_b : 'tags this -> float option) =
      fun (x13841 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13841) "b")
    let (set_b : 'tags this -> float -> unit) =
      fun (x13844 : 'tags this) ->
        fun (x13845 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13844) "b"
            (Ojs.float_to_js x13845)
    let (get_c : 'tags this -> float option) =
      fun (x13847 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13847) "c")
    let (set_c : 'tags this -> float -> unit) =
      fun (x13850 : 'tags this) ->
        fun (x13851 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13850) "c"
            (Ojs.float_to_js x13851)
    let (get_d : 'tags this -> float option) =
      fun (x13853 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13853) "d")
    let (set_d : 'tags this -> float -> unit) =
      fun (x13856 : 'tags this) ->
        fun (x13857 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13856) "d"
            (Ojs.float_to_js x13857)
    let (get_e : 'tags this -> float option) =
      fun (x13859 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13859) "e")
    let (set_e : 'tags this -> float -> unit) =
      fun (x13862 : 'tags this) ->
        fun (x13863 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13862) "e"
            (Ojs.float_to_js x13863)
    let (get_f : 'tags this -> float option) =
      fun (x13865 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13865) "f")
    let (set_f : 'tags this -> float -> unit) =
      fun (x13868 : 'tags this) ->
        fun (x13869 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13868) "f"
            (Ojs.float_to_js x13869)
    let (get_m11 : 'tags this -> float option) =
      fun (x13871 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13871) "m11")
    let (set_m11 : 'tags this -> float -> unit) =
      fun (x13874 : 'tags this) ->
        fun (x13875 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13874) "m11"
            (Ojs.float_to_js x13875)
    let (get_m12 : 'tags this -> float option) =
      fun (x13877 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13877) "m12")
    let (set_m12 : 'tags this -> float -> unit) =
      fun (x13880 : 'tags this) ->
        fun (x13881 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13880) "m12"
            (Ojs.float_to_js x13881)
    let (get_m21 : 'tags this -> float option) =
      fun (x13883 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13883) "m21")
    let (set_m21 : 'tags this -> float -> unit) =
      fun (x13886 : 'tags this) ->
        fun (x13887 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13886) "m21"
            (Ojs.float_to_js x13887)
    let (get_m22 : 'tags this -> float option) =
      fun (x13889 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13889) "m22")
    let (set_m22 : 'tags this -> float -> unit) =
      fun (x13892 : 'tags this) ->
        fun (x13893 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13892) "m22"
            (Ojs.float_to_js x13893)
    let (get_m41 : 'tags this -> float option) =
      fun (x13895 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13895) "m41")
    let (set_m41 : 'tags this -> float -> unit) =
      fun (x13898 : 'tags this) ->
        fun (x13899 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13898) "m41"
            (Ojs.float_to_js x13899)
    let (get_m42 : 'tags this -> float option) =
      fun (x13901 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13901) "m42")
    let (set_m42 : 'tags this -> float -> unit) =
      fun (x13904 : 'tags this) ->
        fun (x13905 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13904) "m42"
            (Ojs.float_to_js x13905)
    let (create :
      ?a:float ->
        ?b:float ->
          ?c:float ->
            ?d:float ->
              ?e:float ->
                ?f:float ->
                  ?m11:float ->
                    ?m12:float ->
                      ?m21:float ->
                        ?m22:float -> ?m41:float -> ?m42:float -> unit -> t)
      =
      fun ?a:(x13907 : float option) ->
        fun ?b:(x13908 : float option) ->
          fun ?c:(x13909 : float option) ->
            fun ?d:(x13910 : float option) ->
              fun ?e:(x13911 : float option) ->
                fun ?f:(x13912 : float option) ->
                  fun ?m11:(x13913 : float option) ->
                    fun ?m12:(x13914 : float option) ->
                      fun ?m21:(x13915 : float option) ->
                        fun ?m22:(x13916 : float option) ->
                          fun ?m41:(x13917 : float option) ->
                            fun ?m42:(x13918 : float option) ->
                              fun () ->
                                let x13919 = Ojs.empty_obj () in
                                (match x13907 with
                                 | Some x13931 ->
                                     Ojs.set_prop_ascii x13919 "a"
                                       (Ojs.float_to_js x13931)
                                 | None -> ());
                                (match x13908 with
                                 | Some x13930 ->
                                     Ojs.set_prop_ascii x13919 "b"
                                       (Ojs.float_to_js x13930)
                                 | None -> ());
                                (match x13909 with
                                 | Some x13929 ->
                                     Ojs.set_prop_ascii x13919 "c"
                                       (Ojs.float_to_js x13929)
                                 | None -> ());
                                (match x13910 with
                                 | Some x13928 ->
                                     Ojs.set_prop_ascii x13919 "d"
                                       (Ojs.float_to_js x13928)
                                 | None -> ());
                                (match x13911 with
                                 | Some x13927 ->
                                     Ojs.set_prop_ascii x13919 "e"
                                       (Ojs.float_to_js x13927)
                                 | None -> ());
                                (match x13912 with
                                 | Some x13926 ->
                                     Ojs.set_prop_ascii x13919 "f"
                                       (Ojs.float_to_js x13926)
                                 | None -> ());
                                (match x13913 with
                                 | Some x13925 ->
                                     Ojs.set_prop_ascii x13919 "m11"
                                       (Ojs.float_to_js x13925)
                                 | None -> ());
                                (match x13914 with
                                 | Some x13924 ->
                                     Ojs.set_prop_ascii x13919 "m12"
                                       (Ojs.float_to_js x13924)
                                 | None -> ());
                                (match x13915 with
                                 | Some x13923 ->
                                     Ojs.set_prop_ascii x13919 "m21"
                                       (Ojs.float_to_js x13923)
                                 | None -> ());
                                (match x13916 with
                                 | Some x13922 ->
                                     Ojs.set_prop_ascii x13919 "m22"
                                       (Ojs.float_to_js x13922)
                                 | None -> ());
                                (match x13917 with
                                 | Some x13921 ->
                                     Ojs.set_prop_ascii x13919 "m41"
                                       (Ojs.float_to_js x13921)
                                 | None -> ());
                                (match x13918 with
                                 | Some x13920 ->
                                     Ojs.set_prop_ascii x13919 "m42"
                                       (Ojs.float_to_js x13920)
                                 | None -> ());
                                t_of_js x13919
    let cast_from = Obj.magic
  end
module CanvasPath =
  struct
    type t = [ `CanvasPath ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13933 : Ojs.t) -> t_of_js x13933
    and t_0_to_js : t_0 -> Ojs.t = fun (x13932 : t) -> t_to_js x13932
    type tags = [ `CanvasPath ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CanvasPath ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13936 : Ojs.t) -> intf_of_js __tags_of_js x13936
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13934 : __tags intf) -> intf_to_js __tags_to_js x13934
    let (arc :
      'tags this ->
        x:float ->
          y:float ->
            radius:float ->
              startAngle:float ->
                endAngle:float -> ?counterclockwise:bool -> unit -> unit)
      =
      fun (x13946 : 'tags this) ->
        fun ~x:(x13938 : float) ->
          fun ~y:(x13939 : float) ->
            fun ~radius:(x13940 : float) ->
              fun ~startAngle:(x13941 : float) ->
                fun ~endAngle:(x13942 : float) ->
                  fun ?counterclockwise:(x13943 : bool option) ->
                    fun () ->
                      ignore
                        (let x13948 = this_to_js Obj.magic x13946 in
                         Ojs.call (Ojs.get_prop_ascii x13948 "arc") "apply"
                           [|x13948;((let x13944 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x13944 "push"
                                           [|(Ojs.float_to_js x13938)|]);
                                      ignore
                                        (Ojs.call x13944 "push"
                                           [|(Ojs.float_to_js x13939)|]);
                                      ignore
                                        (Ojs.call x13944 "push"
                                           [|(Ojs.float_to_js x13940)|]);
                                      ignore
                                        (Ojs.call x13944 "push"
                                           [|(Ojs.float_to_js x13941)|]);
                                      ignore
                                        (Ojs.call x13944 "push"
                                           [|(Ojs.float_to_js x13942)|]);
                                      (match x13943 with
                                       | Some x13945 ->
                                           ignore
                                             (Ojs.call x13944 "push"
                                                [|(Ojs.bool_to_js x13945)|])
                                       | None -> ());
                                      x13944))|])
    let (arcTo :
      'tags this ->
        x1:float -> y1:float -> x2:float -> y2:float -> radius:float -> unit)
      =
      fun (x13954 : 'tags this) ->
        fun ~x1:(x13949 : float) ->
          fun ~y1:(x13950 : float) ->
            fun ~x2:(x13951 : float) ->
              fun ~y2:(x13952 : float) ->
                fun ~radius:(x13953 : float) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x13954) "arcTo"
                       [|(Ojs.float_to_js x13949);(Ojs.float_to_js x13950);(
                         Ojs.float_to_js x13951);(Ojs.float_to_js x13952);(
                         Ojs.float_to_js x13953)|])
    let (bezierCurveTo :
      'tags this ->
        cp1x:float ->
          cp1y:float ->
            cp2x:float -> cp2y:float -> x:float -> y:float -> unit)
      =
      fun (x13962 : 'tags this) ->
        fun ~cp1x:(x13956 : float) ->
          fun ~cp1y:(x13957 : float) ->
            fun ~cp2x:(x13958 : float) ->
              fun ~cp2y:(x13959 : float) ->
                fun ~x:(x13960 : float) ->
                  fun ~y:(x13961 : float) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x13962) "bezierCurveTo"
                         [|(Ojs.float_to_js x13956);(Ojs.float_to_js x13957);(
                           Ojs.float_to_js x13958);(Ojs.float_to_js x13959);(
                           Ojs.float_to_js x13960);(Ojs.float_to_js x13961)|])
    let (closePath : 'tags this -> unit) =
      fun (x13964 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x13964) "closePath" [||])
    let (ellipse :
      'tags this ->
        x:float ->
          y:float ->
            radiusX:float ->
              radiusY:float ->
                rotation:float ->
                  startAngle:float ->
                    endAngle:float -> ?counterclockwise:bool -> unit -> unit)
      =
      fun (x13976 : 'tags this) ->
        fun ~x:(x13966 : float) ->
          fun ~y:(x13967 : float) ->
            fun ~radiusX:(x13968 : float) ->
              fun ~radiusY:(x13969 : float) ->
                fun ~rotation:(x13970 : float) ->
                  fun ~startAngle:(x13971 : float) ->
                    fun ~endAngle:(x13972 : float) ->
                      fun ?counterclockwise:(x13973 : bool option) ->
                        fun () ->
                          ignore
                            (let x13978 = this_to_js Obj.magic x13976 in
                             Ojs.call (Ojs.get_prop_ascii x13978 "ellipse")
                               "apply"
                               [|x13978;((let x13974 =
                                            Ojs.new_obj
                                              (Ojs.get_prop_ascii Ojs.global
                                                 "Array") [||] in
                                          ignore
                                            (Ojs.call x13974 "push"
                                               [|(Ojs.float_to_js x13966)|]);
                                          ignore
                                            (Ojs.call x13974 "push"
                                               [|(Ojs.float_to_js x13967)|]);
                                          ignore
                                            (Ojs.call x13974 "push"
                                               [|(Ojs.float_to_js x13968)|]);
                                          ignore
                                            (Ojs.call x13974 "push"
                                               [|(Ojs.float_to_js x13969)|]);
                                          ignore
                                            (Ojs.call x13974 "push"
                                               [|(Ojs.float_to_js x13970)|]);
                                          ignore
                                            (Ojs.call x13974 "push"
                                               [|(Ojs.float_to_js x13971)|]);
                                          ignore
                                            (Ojs.call x13974 "push"
                                               [|(Ojs.float_to_js x13972)|]);
                                          (match x13973 with
                                           | Some x13975 ->
                                               ignore
                                                 (Ojs.call x13974 "push"
                                                    [|(Ojs.bool_to_js x13975)|])
                                           | None -> ());
                                          x13974))|])
    let (lineTo : 'tags this -> x:float -> y:float -> unit) =
      fun (x13981 : 'tags this) ->
        fun ~x:(x13979 : float) ->
          fun ~y:(x13980 : float) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x13981) "lineTo"
                 [|(Ojs.float_to_js x13979);(Ojs.float_to_js x13980)|])
    let (moveTo : 'tags this -> x:float -> y:float -> unit) =
      fun (x13985 : 'tags this) ->
        fun ~x:(x13983 : float) ->
          fun ~y:(x13984 : float) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x13985) "moveTo"
                 [|(Ojs.float_to_js x13983);(Ojs.float_to_js x13984)|])
    let (quadraticCurveTo :
      'tags this -> cpx:float -> cpy:float -> x:float -> y:float -> unit) =
      fun (x13991 : 'tags this) ->
        fun ~cpx:(x13987 : float) ->
          fun ~cpy:(x13988 : float) ->
            fun ~x:(x13989 : float) ->
              fun ~y:(x13990 : float) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x13991) "quadraticCurveTo"
                     [|(Ojs.float_to_js x13987);(Ojs.float_to_js x13988);(
                       Ojs.float_to_js x13989);(Ojs.float_to_js x13990)|])
    let (rect :
      'tags this -> x:float -> y:float -> w:float -> h:float -> unit) =
      fun (x13997 : 'tags this) ->
        fun ~x:(x13993 : float) ->
          fun ~y:(x13994 : float) ->
            fun ~w:(x13995 : float) ->
              fun ~h:(x13996 : float) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x13997) "rect"
                     [|(Ojs.float_to_js x13993);(Ojs.float_to_js x13994);(
                       Ojs.float_to_js x13995);(Ojs.float_to_js x13996)|])
    let cast_from = Obj.magic
  end
module Path2D =
  struct
    type t = [ `CanvasPath  | `Path2D ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14000 : Ojs.t) -> t_of_js x14000
    and t_0_to_js : t_0 -> Ojs.t = fun (x13999 : t) -> t_to_js x13999
    type tags = [ `CanvasPath  | `Path2D ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Path2D ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14003 : Ojs.t) -> intf_of_js __tags_of_js x14003
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14001 : __tags intf) -> intf_to_js __tags_to_js x14001
    let (addPath :
      'tags this -> path:t -> ?transform:DOMMatrix2DInit.t -> unit -> unit) =
      fun (x14009 : 'tags this) ->
        fun ~path:(x14005 : t) ->
          fun ?transform:(x14006 : DOMMatrix2DInit.t option) ->
            fun () ->
              ignore
                (let x14011 = this_to_js Obj.magic x14009 in
                 Ojs.call (Ojs.get_prop_ascii x14011 "addPath") "apply"
                   [|x14011;((let x14007 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x14007 "push" [|(t_to_js x14005)|]);
                              (match x14006 with
                               | Some x14008 ->
                                   ignore
                                     (Ojs.call x14007 "push"
                                        [|(DOMMatrix2DInit.t_to_js x14008)|])
                               | None -> ());
                              x14007))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Path2D")
             "prototype")
    let (create : ?path:[ `U1 of t  | `U2 of string ] -> unit -> t) =
      fun ?path:(x14012 : [ `U1 of t  | `U2 of string ] option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Path2D")
               (let x14013 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x14012 with
                 | Some x14014 ->
                     ignore
                       (Ojs.call x14013 "push"
                          [|((match x14014 with
                              | `U1 x14015 -> t_to_js x14015
                              | `U2 x14016 -> Ojs.string_to_js x14016))|])
                 | None -> ());
                x14013))
  end
module OnErrorEventHandlerNonNull =
  struct
    type t = [ `OnErrorEventHandlerNonNull ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14018 : Ojs.t) -> t_of_js x14018
    and t_0_to_js : t_0 -> Ojs.t = fun (x14017 : t) -> t_to_js x14017
    type tags = [ `OnErrorEventHandlerNonNull ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OnErrorEventHandlerNonNull ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14021 : Ojs.t) -> intf_of_js __tags_of_js x14021
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14019 : __tags intf) -> intf_to_js __tags_to_js x14019
    let (apply :
      'tags this ->
        event:[ `U1 of Event.t  | `U2 of string ] ->
          ?source:string ->
            ?lineno:float -> ?colno:float -> ?error:Error.t_0 -> unit -> any)
      =
      fun (x14035 : 'tags this) ->
        fun ~event:(x14023 : [ `U1 of Event.t  | `U2 of string ]) ->
          fun ?source:(x14024 : string option) ->
            fun ?lineno:(x14025 : float option) ->
              fun ?colno:(x14026 : float option) ->
                fun ?error:(x14027 : Error.t_0 option) ->
                  fun () ->
                    any_of_js
                      (Ojs.call (this_to_js Obj.magic x14035) "apply"
                         [|Ojs.null;((let x14028 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x14028 "push"
                                           [|((match x14023 with
                                               | `U1 x14033 ->
                                                   Event.t_to_js x14033
                                               | `U2 x14034 ->
                                                   Ojs.string_to_js x14034))|]);
                                      (match x14024 with
                                       | Some x14032 ->
                                           ignore
                                             (Ojs.call x14028 "push"
                                                [|(Ojs.string_to_js x14032)|])
                                       | None -> ());
                                      (match x14025 with
                                       | Some x14031 ->
                                           ignore
                                             (Ojs.call x14028 "push"
                                                [|(Ojs.float_to_js x14031)|])
                                       | None -> ());
                                      (match x14026 with
                                       | Some x14030 ->
                                           ignore
                                             (Ojs.call x14028 "push"
                                                [|(Ojs.float_to_js x14030)|])
                                       | None -> ());
                                      (match x14027 with
                                       | Some x14029 ->
                                           ignore
                                             (Ojs.call x14028 "push"
                                                [|(Error.t_0_to_js x14029)|])
                                       | None -> ());
                                      x14028))|])
    let cast_from = Obj.magic
  end
module OnErrorEventHandler =
  struct
    type t = OnErrorEventHandlerNonNull.t option
    let rec t_of_js : Ojs.t -> t =
      fun (x14039 : Ojs.t) ->
        Ojs.option_of_js OnErrorEventHandlerNonNull.t_of_js x14039
    and t_to_js : t -> Ojs.t =
      fun (x14037 : OnErrorEventHandlerNonNull.t option) ->
        Ojs.option_to_js OnErrorEventHandlerNonNull.t_to_js x14037
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14042 : Ojs.t) -> t_of_js x14042
    and t_0_to_js : t_0 -> Ojs.t = fun (x14041 : t) -> t_to_js x14041
  end
module OES_fbo_render_mipmap =
  struct
    type t = [ `OES_fbo_render_mipmap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14044 : Ojs.t) -> t_of_js x14044
    and t_0_to_js : t_0 -> Ojs.t = fun (x14043 : t) -> t_to_js x14043
    type tags = [ `OES_fbo_render_mipmap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_fbo_render_mipmap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14047 : Ojs.t) -> intf_of_js __tags_of_js x14047
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14045 : __tags intf) -> intf_to_js __tags_to_js x14045
    let cast_from = Obj.magic
  end
module NotificationEventMap =
  struct
    type t = [ `NotificationEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14050 : Ojs.t) -> t_of_js x14050
    and t_0_to_js : t_0 -> Ojs.t = fun (x14049 : t) -> t_to_js x14049
    type tags = [ `NotificationEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `NotificationEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14053 : Ojs.t) -> intf_of_js __tags_of_js x14053
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14051 : __tags intf) -> intf_to_js __tags_to_js x14051
    let (get_click : 'tags this -> Event.t) =
      fun (x14055 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14055) "click")
    let (set_click : 'tags this -> Event.t -> unit) =
      fun (x14057 : 'tags this) ->
        fun (x14058 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14057) "click"
            (Event.t_to_js x14058)
    let (get_close : 'tags this -> Event.t) =
      fun (x14060 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14060) "close")
    let (set_close : 'tags this -> Event.t -> unit) =
      fun (x14062 : 'tags this) ->
        fun (x14063 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14062) "close"
            (Event.t_to_js x14063)
    let (get_error : 'tags this -> Event.t) =
      fun (x14065 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14065) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x14067 : 'tags this) ->
        fun (x14068 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14067) "error"
            (Event.t_to_js x14068)
    let (get_show : 'tags this -> Event.t) =
      fun (x14070 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14070) "show")
    let (set_show : 'tags this -> Event.t -> unit) =
      fun (x14072 : 'tags this) ->
        fun (x14073 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14072) "show"
            (Event.t_to_js x14073)
    let (create :
      click:Event.t ->
        close:Event.t -> error:Event.t -> show:Event.t -> unit -> t)
      =
      fun ~click:(x14075 : Event.t) ->
        fun ~close:(x14076 : Event.t) ->
          fun ~error:(x14077 : Event.t) ->
            fun ~show:(x14078 : Event.t) ->
              fun () ->
                let x14079 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x14079 "click" (Event.t_to_js x14075);
                Ojs.set_prop_ascii x14079 "close" (Event.t_to_js x14076);
                Ojs.set_prop_ascii x14079 "error" (Event.t_to_js x14077);
                Ojs.set_prop_ascii x14079 "show" (Event.t_to_js x14078);
                t_of_js x14079
    let cast_from = Obj.magic
  end
module MessagePortEventMap =
  struct
    type t = [ `MessagePortEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14081 : Ojs.t) -> t_of_js x14081
    and t_0_to_js : t_0 -> Ojs.t = fun (x14080 : t) -> t_to_js x14080
    type tags = [ `MessagePortEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `MessagePortEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14084 : Ojs.t) -> intf_of_js __tags_of_js x14084
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14082 : __tags intf) -> intf_to_js __tags_to_js x14082
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x14086 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14086) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x14088 : 'tags this) ->
        fun (x14089 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14088) "message"
            (MessageEvent.t_0_to_js x14089)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x14091 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14091) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x14093 : 'tags this) ->
        fun (x14094 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14093) "messageerror"
            (MessageEvent.t_0_to_js x14094)
    let (create :
      message:MessageEvent.t_0 -> messageerror:MessageEvent.t_0 -> unit -> t)
      =
      fun ~message:(x14096 : MessageEvent.t_0) ->
        fun ~messageerror:(x14097 : MessageEvent.t_0) ->
          fun () ->
            let x14098 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x14098 "message"
              (MessageEvent.t_0_to_js x14096);
            Ojs.set_prop_ascii x14098 "messageerror"
              (MessageEvent.t_0_to_js x14097);
            t_of_js x14098
    let cast_from = Obj.magic
  end
module MessageChannel =
  struct
    type t = [ `MessageChannel ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14100 : Ojs.t) -> t_of_js x14100
    and t_0_to_js : t_0 -> Ojs.t = fun (x14099 : t) -> t_to_js x14099
    type tags = [ `MessageChannel ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `MessageChannel ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14103 : Ojs.t) -> intf_of_js __tags_of_js x14103
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14101 : __tags intf) -> intf_to_js __tags_to_js x14101
    let (get_port1 : 'tags this -> MessagePort.t) =
      fun (x14105 : 'tags this) ->
        MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14105) "port1")
    let (get_port2 : 'tags this -> MessagePort.t) =
      fun (x14107 : 'tags this) ->
        MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14107) "port2")
    let (create : port1:MessagePort.t -> port2:MessagePort.t -> unit -> t) =
      fun ~port1:(x14109 : MessagePort.t) ->
        fun ~port2:(x14110 : MessagePort.t) ->
          fun () ->
            let x14111 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x14111 "port1" (MessagePort.t_to_js x14109);
            Ojs.set_prop_ascii x14111 "port2" (MessagePort.t_to_js x14110);
            t_of_js x14111
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "MessageChannel") "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "MessageChannel") [||])
  end
module LockMode =
  struct
    type t = [ `L_s179_shared  | `L_s70_exclusive ]
    let rec t_of_js : Ojs.t -> t =
      fun (x14113 : Ojs.t) ->
        let x14114 = x14113 in
        match Ojs.string_of_js x14114 with
        | "shared" -> `L_s179_shared
        | "exclusive" -> `L_s70_exclusive
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x14112 : [ `L_s179_shared  | `L_s70_exclusive ]) ->
        match x14112 with
        | `L_s179_shared -> Ojs.string_to_js "shared"
        | `L_s70_exclusive -> Ojs.string_to_js "exclusive"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14116 : Ojs.t) -> t_of_js x14116
    and t_0_to_js : t_0 -> Ojs.t = fun (x14115 : t) -> t_to_js x14115
  end
module LockOptions =
  struct
    type t = [ `LockOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14118 : Ojs.t) -> t_of_js x14118
    and t_0_to_js : t_0 -> Ojs.t = fun (x14117 : t) -> t_to_js x14117
    type tags = [ `LockOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `LockOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14121 : Ojs.t) -> intf_of_js __tags_of_js x14121
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14119 : __tags intf) -> intf_to_js __tags_to_js x14119
    let (get_ifAvailable : 'tags this -> bool option) =
      fun (x14123 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14123) "ifAvailable")
    let (set_ifAvailable : 'tags this -> bool -> unit) =
      fun (x14126 : 'tags this) ->
        fun (x14127 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14126) "ifAvailable"
            (Ojs.bool_to_js x14127)
    let (get_mode : 'tags this -> LockMode.t option) =
      fun (x14129 : 'tags this) ->
        Ojs.option_of_js LockMode.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14129) "mode")
    let (set_mode : 'tags this -> LockMode.t -> unit) =
      fun (x14132 : 'tags this) ->
        fun (x14133 : LockMode.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14132) "mode"
            (LockMode.t_to_js x14133)
    let (get_signal : 'tags this -> AbortSignal.t option) =
      fun (x14135 : 'tags this) ->
        Ojs.option_of_js AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14135) "signal")
    let (set_signal : 'tags this -> AbortSignal.t -> unit) =
      fun (x14138 : 'tags this) ->
        fun (x14139 : AbortSignal.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14138) "signal"
            (AbortSignal.t_to_js x14139)
    let (get_steal : 'tags this -> bool option) =
      fun (x14141 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14141) "steal")
    let (set_steal : 'tags this -> bool -> unit) =
      fun (x14144 : 'tags this) ->
        fun (x14145 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14144) "steal"
            (Ojs.bool_to_js x14145)
    let (create :
      ?ifAvailable:bool ->
        ?mode:LockMode.t -> ?signal:AbortSignal.t -> ?steal:bool -> unit -> t)
      =
      fun ?ifAvailable:(x14147 : bool option) ->
        fun ?mode:(x14148 : LockMode.t option) ->
          fun ?signal:(x14149 : AbortSignal.t option) ->
            fun ?steal:(x14150 : bool option) ->
              fun () ->
                let x14151 = Ojs.empty_obj () in
                (match x14147 with
                 | Some x14155 ->
                     Ojs.set_prop_ascii x14151 "ifAvailable"
                       (Ojs.bool_to_js x14155)
                 | None -> ());
                (match x14148 with
                 | Some x14154 ->
                     Ojs.set_prop_ascii x14151 "mode"
                       (LockMode.t_to_js x14154)
                 | None -> ());
                (match x14149 with
                 | Some x14153 ->
                     Ojs.set_prop_ascii x14151 "signal"
                       (AbortSignal.t_to_js x14153)
                 | None -> ());
                (match x14150 with
                 | Some x14152 ->
                     Ojs.set_prop_ascii x14151 "steal"
                       (Ojs.bool_to_js x14152)
                 | None -> ());
                t_of_js x14151
    let cast_from = Obj.magic
  end
module LockInfo =
  struct
    type t = [ `LockInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14157 : Ojs.t) -> t_of_js x14157
    and t_0_to_js : t_0 -> Ojs.t = fun (x14156 : t) -> t_to_js x14156
    type tags = [ `LockInfo ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `LockInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14160 : Ojs.t) -> intf_of_js __tags_of_js x14160
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14158 : __tags intf) -> intf_to_js __tags_to_js x14158
    let (get_clientId : 'tags this -> string option) =
      fun (x14162 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14162) "clientId")
    let (set_clientId : 'tags this -> string -> unit) =
      fun (x14165 : 'tags this) ->
        fun (x14166 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14165) "clientId"
            (Ojs.string_to_js x14166)
    let (get_mode : 'tags this -> LockMode.t option) =
      fun (x14168 : 'tags this) ->
        Ojs.option_of_js LockMode.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14168) "mode")
    let (set_mode : 'tags this -> LockMode.t -> unit) =
      fun (x14171 : 'tags this) ->
        fun (x14172 : LockMode.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14171) "mode"
            (LockMode.t_to_js x14172)
    let (get_name : 'tags this -> string option) =
      fun (x14174 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14174) "name")
    let (set_name : 'tags this -> string -> unit) =
      fun (x14177 : 'tags this) ->
        fun (x14178 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14177) "name"
            (Ojs.string_to_js x14178)
    let (create :
      ?clientId:string -> ?mode:LockMode.t -> ?name:string -> unit -> t) =
      fun ?clientId:(x14180 : string option) ->
        fun ?mode:(x14181 : LockMode.t option) ->
          fun ?name:(x14182 : string option) ->
            fun () ->
              let x14183 = Ojs.empty_obj () in
              (match x14180 with
               | Some x14186 ->
                   Ojs.set_prop_ascii x14183 "clientId"
                     (Ojs.string_to_js x14186)
               | None -> ());
              (match x14181 with
               | Some x14185 ->
                   Ojs.set_prop_ascii x14183 "mode" (LockMode.t_to_js x14185)
               | None -> ());
              (match x14182 with
               | Some x14184 ->
                   Ojs.set_prop_ascii x14183 "name" (Ojs.string_to_js x14184)
               | None -> ());
              t_of_js x14183
    let cast_from = Obj.magic
  end
module LockManagerSnapshot =
  struct
    type t = [ `LockManagerSnapshot ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14188 : Ojs.t) -> t_of_js x14188
    and t_0_to_js : t_0 -> Ojs.t = fun (x14187 : t) -> t_to_js x14187
    type tags = [ `LockManagerSnapshot ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `LockManagerSnapshot ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14191 : Ojs.t) -> intf_of_js __tags_of_js x14191
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14189 : __tags intf) -> intf_to_js __tags_to_js x14189
    let (get_held : 'tags this -> LockInfo.t list option) =
      fun (x14193 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14195 : Ojs.t) -> Ojs.list_of_js LockInfo.t_of_js x14195)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14193) "held")
    let (set_held : 'tags this -> LockInfo.t list -> unit) =
      fun (x14197 : 'tags this) ->
        fun (x14198 : LockInfo.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14197) "held"
            (Ojs.list_to_js LockInfo.t_to_js x14198)
    let (get_pending : 'tags this -> LockInfo.t list option) =
      fun (x14201 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14203 : Ojs.t) -> Ojs.list_of_js LockInfo.t_of_js x14203)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14201) "pending")
    let (set_pending : 'tags this -> LockInfo.t list -> unit) =
      fun (x14205 : 'tags this) ->
        fun (x14206 : LockInfo.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14205) "pending"
            (Ojs.list_to_js LockInfo.t_to_js x14206)
    let (create :
      ?held:LockInfo.t list -> ?pending:LockInfo.t list -> unit -> t) =
      fun ?held:(x14209 : LockInfo.t list option) ->
        fun ?pending:(x14210 : LockInfo.t list option) ->
          fun () ->
            let x14211 = Ojs.empty_obj () in
            (match x14209 with
             | Some x14214 ->
                 Ojs.set_prop_ascii x14211 "held"
                   (Ojs.list_to_js LockInfo.t_to_js x14214)
             | None -> ());
            (match x14210 with
             | Some x14212 ->
                 Ojs.set_prop_ascii x14211 "pending"
                   (Ojs.list_to_js LockInfo.t_to_js x14212)
             | None -> ());
            t_of_js x14211
    let cast_from = Obj.magic
  end
module Lock =
  struct
    type t = [ `Lock ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14217 : Ojs.t) -> t_of_js x14217
    and t_0_to_js : t_0 -> Ojs.t = fun (x14216 : t) -> t_to_js x14216
    type tags = [ `Lock ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Lock ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14220 : Ojs.t) -> intf_of_js __tags_of_js x14220
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14218 : __tags intf) -> intf_to_js __tags_to_js x14218
    let (get_mode : 'tags this -> LockMode.t) =
      fun (x14222 : 'tags this) ->
        LockMode.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14222) "mode")
    let (get_name : 'tags this -> string) =
      fun (x14224 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14224) "name")
    let (create : mode:LockMode.t -> name:string -> unit -> t) =
      fun ~mode:(x14226 : LockMode.t) ->
        fun ~name:(x14227 : string) ->
          fun () ->
            let x14228 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x14228 "mode" (LockMode.t_to_js x14226);
            Ojs.set_prop_ascii x14228 "name" (Ojs.string_to_js x14227);
            t_of_js x14228
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Lock")
             "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Lock") [||])
  end
module LockGrantedCallback =
  struct
    type t = [ `LockGrantedCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14230 : Ojs.t) -> t_of_js x14230
    and t_0_to_js : t_0 -> Ojs.t = fun (x14229 : t) -> t_to_js x14229
    type tags = [ `LockGrantedCallback ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `LockGrantedCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14233 : Ojs.t) -> intf_of_js __tags_of_js x14233
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14231 : __tags intf) -> intf_to_js __tags_to_js x14231
    let (apply : 'tags this -> lock:Lock.t option -> any) =
      fun (x14237 : 'tags this) ->
        fun ~lock:(x14235 : Lock.t option) ->
          any_of_js
            (Ojs.apply (this_to_js Obj.magic x14237)
               [|(Ojs.option_to_js Lock.t_to_js x14235)|])
    let cast_from = Obj.magic
  end
module LockManager =
  struct
    type t = [ `LockManager ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14240 : Ojs.t) -> t_of_js x14240
    and t_0_to_js : t_0 -> Ojs.t = fun (x14239 : t) -> t_to_js x14239
    type tags = [ `LockManager ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `LockManager ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14243 : Ojs.t) -> intf_of_js __tags_of_js x14243
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14241 : __tags intf) -> intf_to_js __tags_to_js x14241
    let (query : 'tags this -> LockManagerSnapshot.t Promise.t_1) =
      fun (x14245 : 'tags this) ->
        Promise.t_1_of_js LockManagerSnapshot.t_of_js
          (Ojs.call (this_to_js Obj.magic x14245) "query" [||])
    let (request :
      'tags this ->
        name:string -> callback:LockGrantedCallback.t -> any Promise.t_1)
      =
      fun (x14250 : 'tags this) ->
        fun ~name:(x14248 : string) ->
          fun ~callback:(x14249 : LockGrantedCallback.t) ->
            Promise.t_1_of_js any_of_js
              (Ojs.call (this_to_js Obj.magic x14250) "request"
                 [|(Ojs.string_to_js x14248);(LockGrantedCallback.t_to_js
                                                x14249)|])
    let (request' :
      'tags this ->
        name:string ->
          options:LockOptions.t ->
            callback:LockGrantedCallback.t -> any Promise.t_1)
      =
      fun (x14256 : 'tags this) ->
        fun ~name:(x14253 : string) ->
          fun ~options:(x14254 : LockOptions.t) ->
            fun ~callback:(x14255 : LockGrantedCallback.t) ->
              Promise.t_1_of_js any_of_js
                (Ojs.call (this_to_js Obj.magic x14256) "request"
                   [|(Ojs.string_to_js x14253);(LockOptions.t_to_js x14254);(
                     LockGrantedCallback.t_to_js x14255)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "LockManager")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "LockManager") [||])
  end
module ImportMeta =
  struct
    type t = [ `ImportMeta ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14260 : Ojs.t) -> t_of_js x14260
    and t_0_to_js : t_0 -> Ojs.t = fun (x14259 : t) -> t_to_js x14259
    type tags = [ `ImportMeta ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImportMeta ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14263 : Ojs.t) -> intf_of_js __tags_of_js x14263
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14261 : __tags intf) -> intf_to_js __tags_to_js x14261
    let (get_url : 'tags this -> string) =
      fun (x14265 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14265) "url")
    let (set_url : 'tags this -> string -> unit) =
      fun (x14267 : 'tags this) ->
        fun (x14268 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14267) "url"
            (Ojs.string_to_js x14268)
    let (create : url:string -> unit -> t) =
      fun ~url:(x14270 : string) ->
        fun () ->
          let x14271 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x14271 "url" (Ojs.string_to_js x14270);
          t_of_js x14271
    let cast_from = Obj.magic
  end
module ImageBitmapRenderingContextSettings =
  struct
    type t = [ `ImageBitmapRenderingContextSettings ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14273 : Ojs.t) -> t_of_js x14273
    and t_0_to_js : t_0 -> Ojs.t = fun (x14272 : t) -> t_to_js x14272
    type tags = [ `ImageBitmapRenderingContextSettings ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ImageBitmapRenderingContextSettings ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14276 : Ojs.t) -> intf_of_js __tags_of_js x14276
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14274 : __tags intf) -> intf_to_js __tags_to_js x14274
    let (get_alpha : 'tags this -> bool option) =
      fun (x14278 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14278) "alpha")
    let (set_alpha : 'tags this -> bool -> unit) =
      fun (x14281 : 'tags this) ->
        fun (x14282 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14281) "alpha"
            (Ojs.bool_to_js x14282)
    let (create : ?alpha:bool -> unit -> t) =
      fun ?alpha:(x14284 : bool option) ->
        fun () ->
          let x14285 = Ojs.empty_obj () in
          (match x14284 with
           | Some x14286 ->
               Ojs.set_prop_ascii x14285 "alpha" (Ojs.bool_to_js x14286)
           | None -> ());
          t_of_js x14285
    let cast_from = Obj.magic
  end
module ImageBitmapRenderingContext =
  struct
    type t = [ `ImageBitmapRenderingContext ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14288 : Ojs.t) -> t_of_js x14288
    and t_0_to_js : t_0 -> Ojs.t = fun (x14287 : t) -> t_to_js x14287
    type tags = [ `ImageBitmapRenderingContext ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ImageBitmapRenderingContext ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14291 : Ojs.t) -> intf_of_js __tags_of_js x14291
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14289 : __tags intf) -> intf_to_js __tags_to_js x14289
    let (transferFromImageBitmap :
      'tags this -> bitmap:ImageBitmap.t option -> unit) =
      fun (x14295 : 'tags this) ->
        fun ~bitmap:(x14293 : ImageBitmap.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x14295) "transferFromImageBitmap"
               [|(Ojs.option_to_js ImageBitmap.t_to_js x14293)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ImageBitmapRenderingContext")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ImageBitmapRenderingContext")
             [||])
  end
module IDBTransactionEventMap =
  struct
    type t = [ `IDBTransactionEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14298 : Ojs.t) -> t_of_js x14298
    and t_0_to_js : t_0 -> Ojs.t = fun (x14297 : t) -> t_to_js x14297
    type tags = [ `IDBTransactionEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBTransactionEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14301 : Ojs.t) -> intf_of_js __tags_of_js x14301
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14299 : __tags intf) -> intf_to_js __tags_to_js x14299
    let (get_abort : 'tags this -> Event.t) =
      fun (x14303 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14303) "abort")
    let (set_abort : 'tags this -> Event.t -> unit) =
      fun (x14305 : 'tags this) ->
        fun (x14306 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14305) "abort"
            (Event.t_to_js x14306)
    let (get_complete : 'tags this -> Event.t) =
      fun (x14308 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14308) "complete")
    let (set_complete : 'tags this -> Event.t -> unit) =
      fun (x14310 : 'tags this) ->
        fun (x14311 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14310) "complete"
            (Event.t_to_js x14311)
    let (get_error : 'tags this -> Event.t) =
      fun (x14313 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14313) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x14315 : 'tags this) ->
        fun (x14316 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14315) "error"
            (Event.t_to_js x14316)
    let (create :
      abort:Event.t -> complete:Event.t -> error:Event.t -> unit -> t) =
      fun ~abort:(x14318 : Event.t) ->
        fun ~complete:(x14319 : Event.t) ->
          fun ~error:(x14320 : Event.t) ->
            fun () ->
              let x14321 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x14321 "abort" (Event.t_to_js x14318);
              Ojs.set_prop_ascii x14321 "complete" (Event.t_to_js x14319);
              Ojs.set_prop_ascii x14321 "error" (Event.t_to_js x14320);
              t_of_js x14321
    let cast_from = Obj.magic
  end
module IDBRequestEventMap =
  struct
    type t = [ `IDBRequestEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14323 : Ojs.t) -> t_of_js x14323
    and t_0_to_js : t_0 -> Ojs.t = fun (x14322 : t) -> t_to_js x14322
    type tags = [ `IDBRequestEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBRequestEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14326 : Ojs.t) -> intf_of_js __tags_of_js x14326
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14324 : __tags intf) -> intf_to_js __tags_to_js x14324
    let (get_error : 'tags this -> Event.t) =
      fun (x14328 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14328) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x14330 : 'tags this) ->
        fun (x14331 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14330) "error"
            (Event.t_to_js x14331)
    let (get_success : 'tags this -> Event.t) =
      fun (x14333 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14333) "success")
    let (set_success : 'tags this -> Event.t -> unit) =
      fun (x14335 : 'tags this) ->
        fun (x14336 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14335) "success"
            (Event.t_to_js x14336)
    let (create : error:Event.t -> success:Event.t -> unit -> t) =
      fun ~error:(x14338 : Event.t) ->
        fun ~success:(x14339 : Event.t) ->
          fun () ->
            let x14340 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x14340 "error" (Event.t_to_js x14338);
            Ojs.set_prop_ascii x14340 "success" (Event.t_to_js x14339);
            t_of_js x14340
    let cast_from = Obj.magic
  end
module IDBOpenDBRequestEventMap =
  struct
    type t = [ `IDBOpenDBRequestEventMap  | `IDBRequestEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14342 : Ojs.t) -> t_of_js x14342
    and t_0_to_js : t_0 -> Ojs.t = fun (x14341 : t) -> t_to_js x14341
    type tags = [ `IDBOpenDBRequestEventMap  | `IDBRequestEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBOpenDBRequestEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14345 : Ojs.t) -> intf_of_js __tags_of_js x14345
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14343 : __tags intf) -> intf_to_js __tags_to_js x14343
    let (get_blocked : 'tags this -> Event.t) =
      fun (x14347 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14347) "blocked")
    let (set_blocked : 'tags this -> Event.t -> unit) =
      fun (x14349 : 'tags this) ->
        fun (x14350 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14349) "blocked"
            (Event.t_to_js x14350)
    let (get_upgradeneeded : 'tags this -> IDBVersionChangeEvent.t) =
      fun (x14352 : 'tags this) ->
        IDBVersionChangeEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14352) "upgradeneeded")
    let (set_upgradeneeded : 'tags this -> IDBVersionChangeEvent.t -> unit) =
      fun (x14354 : 'tags this) ->
        fun (x14355 : IDBVersionChangeEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14354) "upgradeneeded"
            (IDBVersionChangeEvent.t_to_js x14355)
    let (create :
      blocked:Event.t -> upgradeneeded:IDBVersionChangeEvent.t -> unit -> t)
      =
      fun ~blocked:(x14357 : Event.t) ->
        fun ~upgradeneeded:(x14358 : IDBVersionChangeEvent.t) ->
          fun () ->
            let x14359 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x14359 "blocked" (Event.t_to_js x14357);
            Ojs.set_prop_ascii x14359 "upgradeneeded"
              (IDBVersionChangeEvent.t_to_js x14358);
            t_of_js x14359
    let cast_from = Obj.magic
  end
module IDBDatabaseEventMap =
  struct
    type t = [ `IDBDatabaseEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14361 : Ojs.t) -> t_of_js x14361
    and t_0_to_js : t_0 -> Ojs.t = fun (x14360 : t) -> t_to_js x14360
    type tags = [ `IDBDatabaseEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBDatabaseEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14364 : Ojs.t) -> intf_of_js __tags_of_js x14364
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14362 : __tags intf) -> intf_to_js __tags_to_js x14362
    let (get_abort : 'tags this -> Event.t) =
      fun (x14366 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14366) "abort")
    let (set_abort : 'tags this -> Event.t -> unit) =
      fun (x14368 : 'tags this) ->
        fun (x14369 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14368) "abort"
            (Event.t_to_js x14369)
    let (get_close : 'tags this -> Event.t) =
      fun (x14371 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14371) "close")
    let (set_close : 'tags this -> Event.t -> unit) =
      fun (x14373 : 'tags this) ->
        fun (x14374 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14373) "close"
            (Event.t_to_js x14374)
    let (get_error : 'tags this -> Event.t) =
      fun (x14376 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14376) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x14378 : 'tags this) ->
        fun (x14379 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14378) "error"
            (Event.t_to_js x14379)
    let (get_versionchange : 'tags this -> IDBVersionChangeEvent.t) =
      fun (x14381 : 'tags this) ->
        IDBVersionChangeEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14381) "versionchange")
    let (set_versionchange : 'tags this -> IDBVersionChangeEvent.t -> unit) =
      fun (x14383 : 'tags this) ->
        fun (x14384 : IDBVersionChangeEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14383) "versionchange"
            (IDBVersionChangeEvent.t_to_js x14384)
    let (create :
      abort:Event.t ->
        close:Event.t ->
          error:Event.t -> versionchange:IDBVersionChangeEvent.t -> unit -> t)
      =
      fun ~abort:(x14386 : Event.t) ->
        fun ~close:(x14387 : Event.t) ->
          fun ~error:(x14388 : Event.t) ->
            fun ~versionchange:(x14389 : IDBVersionChangeEvent.t) ->
              fun () ->
                let x14390 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x14390 "abort" (Event.t_to_js x14386);
                Ojs.set_prop_ascii x14390 "close" (Event.t_to_js x14387);
                Ojs.set_prop_ascii x14390 "error" (Event.t_to_js x14388);
                Ojs.set_prop_ascii x14390 "versionchange"
                  (IDBVersionChangeEvent.t_to_js x14389);
                t_of_js x14390
    let cast_from = Obj.magic
  end
module FontFaceSetLoadEventInit =
  struct
    type t = [ `EventInit  | `FontFaceSetLoadEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14392 : Ojs.t) -> t_of_js x14392
    and t_0_to_js : t_0 -> Ojs.t = fun (x14391 : t) -> t_to_js x14391
    type tags = [ `EventInit  | `FontFaceSetLoadEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FontFaceSetLoadEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14395 : Ojs.t) -> intf_of_js __tags_of_js x14395
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14393 : __tags intf) -> intf_to_js __tags_to_js x14393
    let (get_fontfaces : 'tags this -> FontFace.t list option) =
      fun (x14397 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14399 : Ojs.t) -> Ojs.list_of_js FontFace.t_of_js x14399)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14397) "fontfaces")
    let (set_fontfaces : 'tags this -> FontFace.t list -> unit) =
      fun (x14401 : 'tags this) ->
        fun (x14402 : FontFace.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14401) "fontfaces"
            (Ojs.list_to_js FontFace.t_to_js x14402)
    let (create : ?fontfaces:FontFace.t list -> unit -> t) =
      fun ?fontfaces:(x14405 : FontFace.t list option) ->
        fun () ->
          let x14406 = Ojs.empty_obj () in
          (match x14405 with
           | Some x14407 ->
               Ojs.set_prop_ascii x14406 "fontfaces"
                 (Ojs.list_to_js FontFace.t_to_js x14407)
           | None -> ());
          t_of_js x14406
    let cast_from = Obj.magic
  end
module FontFaceSetLoadEvent =
  struct
    type t = [ `Event  | `FontFaceSetLoadEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14410 : Ojs.t) -> t_of_js x14410
    and t_0_to_js : t_0 -> Ojs.t = fun (x14409 : t) -> t_to_js x14409
    type tags = [ `Event  | `FontFaceSetLoadEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FontFaceSetLoadEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14413 : Ojs.t) -> intf_of_js __tags_of_js x14413
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14411 : __tags intf) -> intf_to_js __tags_to_js x14411
    let (get_fontfaces : 'tags this -> FontFace.t list) =
      fun (x14415 : 'tags this) ->
        Ojs.list_of_js FontFace.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14415) "fontfaces")
    let (create : fontfaces:FontFace.t list -> unit -> t) =
      fun ~fontfaces:(x14418 : FontFace.t list) ->
        fun () ->
          let x14419 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x14419 "fontfaces"
            (Ojs.list_to_js FontFace.t_to_js x14418);
          t_of_js x14419
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "FontFaceSetLoadEvent")
             "prototype")
    let (create' :
      type_:string -> ?eventInitDict:FontFaceSetLoadEventInit.t -> unit -> t)
      =
      fun ~type_:(x14421 : string) ->
        fun ?eventInitDict:(x14422 : FontFaceSetLoadEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "FontFaceSetLoadEvent")
                 (let x14423 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x14423 "push" [|(Ojs.string_to_js x14421)|]);
                  (match x14422 with
                   | Some x14424 ->
                       ignore
                         (Ojs.call x14423 "push"
                            [|(FontFaceSetLoadEventInit.t_to_js x14424)|])
                   | None -> ());
                  x14423))
  end
module FontFaceSetEventMap =
  struct
    type t = [ `FontFaceSetEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14426 : Ojs.t) -> t_of_js x14426
    and t_0_to_js : t_0 -> Ojs.t = fun (x14425 : t) -> t_to_js x14425
    type tags = [ `FontFaceSetEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFaceSetEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14429 : Ojs.t) -> intf_of_js __tags_of_js x14429
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14427 : __tags intf) -> intf_to_js __tags_to_js x14427
    let (get_loading : 'tags this -> Event.t) =
      fun (x14431 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14431) "loading")
    let (set_loading : 'tags this -> Event.t -> unit) =
      fun (x14433 : 'tags this) ->
        fun (x14434 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14433) "loading"
            (Event.t_to_js x14434)
    let (get_loadingdone : 'tags this -> Event.t) =
      fun (x14436 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14436) "loadingdone")
    let (set_loadingdone : 'tags this -> Event.t -> unit) =
      fun (x14438 : 'tags this) ->
        fun (x14439 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14438) "loadingdone"
            (Event.t_to_js x14439)
    let (get_loadingerror : 'tags this -> Event.t) =
      fun (x14441 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14441) "loadingerror")
    let (set_loadingerror : 'tags this -> Event.t -> unit) =
      fun (x14443 : 'tags this) ->
        fun (x14444 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14443) "loadingerror"
            (Event.t_to_js x14444)
    let (create :
      loading:Event.t ->
        loadingdone:Event.t -> loadingerror:Event.t -> unit -> t)
      =
      fun ~loading:(x14446 : Event.t) ->
        fun ~loadingdone:(x14447 : Event.t) ->
          fun ~loadingerror:(x14448 : Event.t) ->
            fun () ->
              let x14449 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x14449 "loading" (Event.t_to_js x14446);
              Ojs.set_prop_ascii x14449 "loadingdone" (Event.t_to_js x14447);
              Ojs.set_prop_ascii x14449 "loadingerror" (Event.t_to_js x14448);
              t_of_js x14449
    let cast_from = Obj.magic
  end
module FileReaderSync =
  struct
    type t = [ `FileReaderSync ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14451 : Ojs.t) -> t_of_js x14451
    and t_0_to_js : t_0 -> Ojs.t = fun (x14450 : t) -> t_to_js x14450
    type tags = [ `FileReaderSync ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FileReaderSync ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14454 : Ojs.t) -> intf_of_js __tags_of_js x14454
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14452 : __tags intf) -> intf_to_js __tags_to_js x14452
    let (readAsArrayBuffer : 'tags this -> blob:Blob.t -> ArrayBuffer.t_0) =
      fun (x14457 : 'tags this) ->
        fun ~blob:(x14456 : Blob.t) ->
          ArrayBuffer.t_0_of_js
            (Ojs.call (this_to_js Obj.magic x14457) "readAsArrayBuffer"
               [|(Blob.t_to_js x14456)|])
    let (readAsBinaryString : 'tags this -> blob:Blob.t -> string) =
      fun (x14460 : 'tags this) ->
        fun ~blob:(x14459 : Blob.t) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x14460) "readAsBinaryString"
               [|(Blob.t_to_js x14459)|])
    let (readAsDataURL : 'tags this -> blob:Blob.t -> string) =
      fun (x14463 : 'tags this) ->
        fun ~blob:(x14462 : Blob.t) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x14463) "readAsDataURL"
               [|(Blob.t_to_js x14462)|])
    let (readAsText :
      'tags this -> blob:Blob.t -> ?encoding:string -> unit -> string) =
      fun (x14469 : 'tags this) ->
        fun ~blob:(x14465 : Blob.t) ->
          fun ?encoding:(x14466 : string option) ->
            fun () ->
              Ojs.string_of_js
                (let x14471 = this_to_js Obj.magic x14469 in
                 Ojs.call (Ojs.get_prop_ascii x14471 "readAsText") "apply"
                   [|x14471;((let x14467 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x14467 "push"
                                   [|(Blob.t_to_js x14465)|]);
                              (match x14466 with
                               | Some x14468 ->
                                   ignore
                                     (Ojs.call x14467 "push"
                                        [|(Ojs.string_to_js x14468)|])
                               | None -> ());
                              x14467))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "FileReaderSync") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FileReaderSync") [||])
  end
module FileReader =
  struct
    type t = [ `EventTarget  | `FileReader ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14473 : Ojs.t) -> t_of_js x14473
    and t_0_to_js : t_0 -> Ojs.t = fun (x14472 : t) -> t_to_js x14472
    type tags = [ `EventTarget  | `FileReader ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FileReader ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14476 : Ojs.t) -> intf_of_js __tags_of_js x14476
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14474 : __tags intf) -> intf_to_js __tags_to_js x14474
    let (get_error : 'tags this -> DOMException.t option) =
      fun (x14478 : 'tags this) ->
        Ojs.option_of_js DOMException.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14478) "error")
    let (get_onabort :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option) =
      fun (x14481 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14483 : Ojs.t) ->
             fun ~this:(x14484 : t) ->
               fun ~ev:(x14485 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x14483
                      [|(t_to_js x14484);(ProgressEvent.t_to_js t_to_js
                                            x14485)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14481) "onabort")
    let (set_onabort :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option -> unit) =
      fun (x14487 : 'tags this) ->
        fun (x14488 : (this:t -> ev:t ProgressEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14487) "onabort"
            (Ojs.option_to_js
               (fun (x14489 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x14490 : Ojs.t) ->
                       fun (x14491 : Ojs.t) ->
                         any_to_js
                           (x14489 ~this:(t_of_js x14490)
                              ~ev:(ProgressEvent.t_of_js t_of_js x14491))))
               x14488)
    let (get_onerror :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option) =
      fun (x14494 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14496 : Ojs.t) ->
             fun ~this:(x14497 : t) ->
               fun ~ev:(x14498 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x14496
                      [|(t_to_js x14497);(ProgressEvent.t_to_js t_to_js
                                            x14498)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14494) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option -> unit) =
      fun (x14500 : 'tags this) ->
        fun (x14501 : (this:t -> ev:t ProgressEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14500) "onerror"
            (Ojs.option_to_js
               (fun (x14502 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x14503 : Ojs.t) ->
                       fun (x14504 : Ojs.t) ->
                         any_to_js
                           (x14502 ~this:(t_of_js x14503)
                              ~ev:(ProgressEvent.t_of_js t_of_js x14504))))
               x14501)
    let (get_onload :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option) =
      fun (x14507 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14509 : Ojs.t) ->
             fun ~this:(x14510 : t) ->
               fun ~ev:(x14511 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x14509
                      [|(t_to_js x14510);(ProgressEvent.t_to_js t_to_js
                                            x14511)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14507) "onload")
    let (set_onload :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option -> unit) =
      fun (x14513 : 'tags this) ->
        fun (x14514 : (this:t -> ev:t ProgressEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14513) "onload"
            (Ojs.option_to_js
               (fun (x14515 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x14516 : Ojs.t) ->
                       fun (x14517 : Ojs.t) ->
                         any_to_js
                           (x14515 ~this:(t_of_js x14516)
                              ~ev:(ProgressEvent.t_of_js t_of_js x14517))))
               x14514)
    let (get_onloadend :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option) =
      fun (x14520 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14522 : Ojs.t) ->
             fun ~this:(x14523 : t) ->
               fun ~ev:(x14524 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x14522
                      [|(t_to_js x14523);(ProgressEvent.t_to_js t_to_js
                                            x14524)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14520) "onloadend")
    let (set_onloadend :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option -> unit) =
      fun (x14526 : 'tags this) ->
        fun (x14527 : (this:t -> ev:t ProgressEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14526) "onloadend"
            (Ojs.option_to_js
               (fun (x14528 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x14529 : Ojs.t) ->
                       fun (x14530 : Ojs.t) ->
                         any_to_js
                           (x14528 ~this:(t_of_js x14529)
                              ~ev:(ProgressEvent.t_of_js t_of_js x14530))))
               x14527)
    let (get_onloadstart :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option) =
      fun (x14533 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14535 : Ojs.t) ->
             fun ~this:(x14536 : t) ->
               fun ~ev:(x14537 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x14535
                      [|(t_to_js x14536);(ProgressEvent.t_to_js t_to_js
                                            x14537)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14533) "onloadstart")
    let (set_onloadstart :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option -> unit) =
      fun (x14539 : 'tags this) ->
        fun (x14540 : (this:t -> ev:t ProgressEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14539) "onloadstart"
            (Ojs.option_to_js
               (fun (x14541 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x14542 : Ojs.t) ->
                       fun (x14543 : Ojs.t) ->
                         any_to_js
                           (x14541 ~this:(t_of_js x14542)
                              ~ev:(ProgressEvent.t_of_js t_of_js x14543))))
               x14540)
    let (get_onprogress :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option) =
      fun (x14546 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14548 : Ojs.t) ->
             fun ~this:(x14549 : t) ->
               fun ~ev:(x14550 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x14548
                      [|(t_to_js x14549);(ProgressEvent.t_to_js t_to_js
                                            x14550)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14546) "onprogress")
    let (set_onprogress :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option -> unit) =
      fun (x14552 : 'tags this) ->
        fun (x14553 : (this:t -> ev:t ProgressEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14552) "onprogress"
            (Ojs.option_to_js
               (fun (x14554 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x14555 : Ojs.t) ->
                       fun (x14556 : Ojs.t) ->
                         any_to_js
                           (x14554 ~this:(t_of_js x14555)
                              ~ev:(ProgressEvent.t_of_js t_of_js x14556))))
               x14553)
    let (get_readyState : 'tags this -> float) =
      fun (x14559 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14559) "readyState")
    let (get_result :
      'tags this ->
        [ `String of string  | `Null  | `Other of ArrayBuffer.t_0 ]
          Primitive.t)
      =
      fun (x14561 : 'tags this) ->
        Primitive.t_of_js
          (fun (x14563 : Ojs.t) ->
             let x14564 = x14563 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x14564 "dummy") with
             | "String" -> `String (Ojs.string_of_js x14564)
             | "Null" -> `Null
             | "Other" -> `Other (ArrayBuffer.t_0_of_js x14564)
             | _ -> assert false)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14561) "result")
    let (abort : 'tags this -> unit) =
      fun (x14565 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x14565) "abort" [||])
    let (readAsArrayBuffer : 'tags this -> blob:Blob.t -> unit) =
      fun (x14568 : 'tags this) ->
        fun ~blob:(x14567 : Blob.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x14568) "readAsArrayBuffer"
               [|(Blob.t_to_js x14567)|])
    let (readAsBinaryString : 'tags this -> blob:Blob.t -> unit) =
      fun (x14571 : 'tags this) ->
        fun ~blob:(x14570 : Blob.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x14571) "readAsBinaryString"
               [|(Blob.t_to_js x14570)|])
    let (readAsDataURL : 'tags this -> blob:Blob.t -> unit) =
      fun (x14574 : 'tags this) ->
        fun ~blob:(x14573 : Blob.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x14574) "readAsDataURL"
               [|(Blob.t_to_js x14573)|])
    let (readAsText :
      'tags this -> blob:Blob.t -> ?encoding:string -> unit -> unit) =
      fun (x14580 : 'tags this) ->
        fun ~blob:(x14576 : Blob.t) ->
          fun ?encoding:(x14577 : string option) ->
            fun () ->
              ignore
                (let x14582 = this_to_js Obj.magic x14580 in
                 Ojs.call (Ojs.get_prop_ascii x14582 "readAsText") "apply"
                   [|x14582;((let x14578 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x14578 "push"
                                   [|(Blob.t_to_js x14576)|]);
                              (match x14577 with
                               | Some x14579 ->
                                   ignore
                                     (Ojs.call x14578 "push"
                                        [|(Ojs.string_to_js x14579)|])
                               | None -> ());
                              x14578))|])
    let (get_DONE : 'tags this -> float) =
      fun (x14583 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14583) "DONE")
    let (get_EMPTY : 'tags this -> float) =
      fun (x14585 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14585) "EMPTY")
    let (get_LOADING : 'tags this -> float) =
      fun (x14587 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14587) "LOADING")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14598 : 'tags this) ->
        fun ~type_:(x14589 : 'K) ->
          fun ~listener:(x14590 : this:t -> ev:any -> any) ->
            fun
              ?options:(x14591 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14600 = this_to_js Obj.magic x14598 in
                   Ojs.call (Ojs.get_prop_ascii x14600 "addEventListener")
                     "apply"
                     [|x14600;((let x14592 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14592 "push"
                                     [|(Obj.magic x14589)|]);
                                ignore
                                  (Ojs.call x14592 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x14596 : Ojs.t) ->
                                             fun (x14597 : Ojs.t) ->
                                               any_to_js
                                                 (x14590
                                                    ~this:(t_of_js x14596)
                                                    ~ev:(any_of_js x14597))))|]);
                                (match x14591 with
                                 | Some x14593 ->
                                     ignore
                                       (Ojs.call x14592 "push"
                                          [|((match x14593 with
                                              | `U1 x14594 ->
                                                  Ojs.bool_to_js x14594
                                              | `U2 x14595 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x14595))|])
                                 | None -> ());
                                x14592))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14608 : 'tags this) ->
        fun ~type_:(x14601 : string) ->
          fun ~listener:(x14602 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x14603 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14610 = this_to_js Obj.magic x14608 in
                   Ojs.call (Ojs.get_prop_ascii x14610 "addEventListener")
                     "apply"
                     [|x14610;((let x14604 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14604 "push"
                                     [|(Ojs.string_to_js x14601)|]);
                                ignore
                                  (Ojs.call x14604 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x14602)|]);
                                (match x14603 with
                                 | Some x14605 ->
                                     ignore
                                       (Ojs.call x14604 "push"
                                          [|((match x14605 with
                                              | `U1 x14606 ->
                                                  Ojs.bool_to_js x14606
                                              | `U2 x14607 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x14607))|])
                                 | None -> ());
                                x14604))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14620 : 'tags this) ->
        fun ~type_:(x14611 : 'K) ->
          fun ~listener:(x14612 : this:t -> ev:any -> any) ->
            fun
              ?options:(x14613 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14622 = this_to_js Obj.magic x14620 in
                   Ojs.call (Ojs.get_prop_ascii x14622 "removeEventListener")
                     "apply"
                     [|x14622;((let x14614 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14614 "push"
                                     [|(Obj.magic x14611)|]);
                                ignore
                                  (Ojs.call x14614 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x14618 : Ojs.t) ->
                                             fun (x14619 : Ojs.t) ->
                                               any_to_js
                                                 (x14612
                                                    ~this:(t_of_js x14618)
                                                    ~ev:(any_of_js x14619))))|]);
                                (match x14613 with
                                 | Some x14615 ->
                                     ignore
                                       (Ojs.call x14614 "push"
                                          [|((match x14615 with
                                              | `U1 x14616 ->
                                                  Ojs.bool_to_js x14616
                                              | `U2 x14617 ->
                                                  EventListenerOptions.t_to_js
                                                    x14617))|])
                                 | None -> ());
                                x14614))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14630 : 'tags this) ->
        fun ~type_:(x14623 : string) ->
          fun ~listener:(x14624 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x14625 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14632 = this_to_js Obj.magic x14630 in
                   Ojs.call (Ojs.get_prop_ascii x14632 "removeEventListener")
                     "apply"
                     [|x14632;((let x14626 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14626 "push"
                                     [|(Ojs.string_to_js x14623)|]);
                                ignore
                                  (Ojs.call x14626 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x14624)|]);
                                (match x14625 with
                                 | Some x14627 ->
                                     ignore
                                       (Ojs.call x14626 "push"
                                          [|((match x14627 with
                                              | `U1 x14628 ->
                                                  Ojs.bool_to_js x14628
                                              | `U2 x14629 ->
                                                  EventListenerOptions.t_to_js
                                                    x14629))|])
                                 | None -> ());
                                x14626))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileReader")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FileReader") [||])
    let (done_ : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileReader")
             "DONE")
    let (empty : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileReader")
             "EMPTY")
    let (loading : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileReader")
             "LOADING")
  end
module FileReaderEventMap =
  struct
    type t = [ `FileReaderEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14634 : Ojs.t) -> t_of_js x14634
    and t_0_to_js : t_0 -> Ojs.t = fun (x14633 : t) -> t_to_js x14633
    type tags = [ `FileReaderEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FileReaderEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14637 : Ojs.t) -> intf_of_js __tags_of_js x14637
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14635 : __tags intf) -> intf_to_js __tags_to_js x14635
    let (get_abort : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x14639 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14639) "abort")
    let (set_abort : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x14642 : 'tags this) ->
        fun (x14643 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14642) "abort"
            (ProgressEvent.t_to_js FileReader.t_to_js x14643)
    let (get_error : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x14646 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14646) "error")
    let (set_error : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x14649 : 'tags this) ->
        fun (x14650 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14649) "error"
            (ProgressEvent.t_to_js FileReader.t_to_js x14650)
    let (get_load : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x14653 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14653) "load")
    let (set_load : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x14656 : 'tags this) ->
        fun (x14657 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14656) "load"
            (ProgressEvent.t_to_js FileReader.t_to_js x14657)
    let (get_loadend : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x14660 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14660) "loadend")
    let (set_loadend : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x14663 : 'tags this) ->
        fun (x14664 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14663) "loadend"
            (ProgressEvent.t_to_js FileReader.t_to_js x14664)
    let (get_loadstart : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x14667 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14667) "loadstart")
    let (set_loadstart : 'tags this -> FileReader.t ProgressEvent.t -> unit)
      =
      fun (x14670 : 'tags this) ->
        fun (x14671 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14670) "loadstart"
            (ProgressEvent.t_to_js FileReader.t_to_js x14671)
    let (get_progress : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x14674 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14674) "progress")
    let (set_progress : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x14677 : 'tags this) ->
        fun (x14678 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14677) "progress"
            (ProgressEvent.t_to_js FileReader.t_to_js x14678)
    let (create :
      abort:FileReader.t ProgressEvent.t ->
        error:FileReader.t ProgressEvent.t ->
          load:FileReader.t ProgressEvent.t ->
            loadend:FileReader.t ProgressEvent.t ->
              loadstart:FileReader.t ProgressEvent.t ->
                progress:FileReader.t ProgressEvent.t -> unit -> t)
      =
      fun ~abort:(x14681 : FileReader.t ProgressEvent.t) ->
        fun ~error:(x14682 : FileReader.t ProgressEvent.t) ->
          fun ~load:(x14683 : FileReader.t ProgressEvent.t) ->
            fun ~loadend:(x14684 : FileReader.t ProgressEvent.t) ->
              fun ~loadstart:(x14685 : FileReader.t ProgressEvent.t) ->
                fun ~progress:(x14686 : FileReader.t ProgressEvent.t) ->
                  fun () ->
                    let x14687 = Ojs.empty_obj () in
                    Ojs.set_prop_ascii x14687 "abort"
                      (ProgressEvent.t_to_js FileReader.t_to_js x14681);
                    Ojs.set_prop_ascii x14687 "error"
                      (ProgressEvent.t_to_js FileReader.t_to_js x14682);
                    Ojs.set_prop_ascii x14687 "load"
                      (ProgressEvent.t_to_js FileReader.t_to_js x14683);
                    Ojs.set_prop_ascii x14687 "loadend"
                      (ProgressEvent.t_to_js FileReader.t_to_js x14684);
                    Ojs.set_prop_ascii x14687 "loadstart"
                      (ProgressEvent.t_to_js FileReader.t_to_js x14685);
                    Ojs.set_prop_ascii x14687 "progress"
                      (ProgressEvent.t_to_js FileReader.t_to_js x14686);
                    t_of_js x14687
    let cast_from = Obj.magic
  end
module FileList =
  struct
    type t =
      [ `FileList  | File.t ArrayLike.tags_1
      | File.t IterableIterator.tags_1] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14695 : Ojs.t) -> t_of_js x14695
    and t_0_to_js : t_0 -> Ojs.t = fun (x14694 : t) -> t_to_js x14694
    type tags =
      [ `FileList  | File.t ArrayLike.tags_1
      | File.t IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FileList ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14698 : Ojs.t) -> intf_of_js __tags_of_js x14698
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14696 : __tags intf) -> intf_to_js __tags_to_js x14696
    let (get_length : 'tags this -> float) =
      fun (x14700 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14700) "length")
    let (item : 'tags this -> index:float -> File.t option) =
      fun (x14703 : 'tags this) ->
        fun ~index:(x14702 : float) ->
          Ojs.option_of_js File.t_of_js
            (Ojs.call (this_to_js Obj.magic x14703) "item"
               [|(Ojs.float_to_js x14702)|])
    let (get : 'tags this -> float -> File.t) =
      fun (x14706 : 'tags this) ->
        fun (x14708 : float) ->
          File.t_of_js
            (Ojs.get_prop (this_to_js Obj.magic x14706)
               (Ojs.float_to_js x14708))
    let (set : 'tags this -> float -> File.t -> unit) =
      fun (x14709 : 'tags this) ->
        fun (x14711 : float) ->
          fun (x14712 : File.t) ->
            Ojs.set_prop (this_to_js Obj.magic x14709)
              (Ojs.float_to_js x14711) (File.t_to_js x14712)
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileList")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FileList") [||])
  end
module EventSourceEventMap =
  struct
    type t = [ `EventSourceEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14714 : Ojs.t) -> t_of_js x14714
    and t_0_to_js : t_0 -> Ojs.t = fun (x14713 : t) -> t_to_js x14713
    type tags = [ `EventSourceEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EventSourceEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14717 : Ojs.t) -> intf_of_js __tags_of_js x14717
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14715 : __tags intf) -> intf_to_js __tags_to_js x14715
    let (get_error : 'tags this -> Event.t) =
      fun (x14719 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14719) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x14721 : 'tags this) ->
        fun (x14722 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14721) "error"
            (Event.t_to_js x14722)
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x14724 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14724) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x14726 : 'tags this) ->
        fun (x14727 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14726) "message"
            (MessageEvent.t_0_to_js x14727)
    let (get_open : 'tags this -> Event.t) =
      fun (x14729 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14729) "open")
    let (set_open : 'tags this -> Event.t -> unit) =
      fun (x14731 : 'tags this) ->
        fun (x14732 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14731) "open"
            (Event.t_to_js x14732)
    let (create :
      error:Event.t -> message:MessageEvent.t_0 -> open_:Event.t -> unit -> t)
      =
      fun ~error:(x14734 : Event.t) ->
        fun ~message:(x14735 : MessageEvent.t_0) ->
          fun ~open_:(x14736 : Event.t) ->
            fun () ->
              let x14737 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x14737 "error" (Event.t_to_js x14734);
              Ojs.set_prop_ascii x14737 "message"
                (MessageEvent.t_0_to_js x14735);
              Ojs.set_prop_ascii x14737 "open" (Event.t_to_js x14736);
              t_of_js x14737
    let cast_from = Obj.magic
  end
module EventSourceInit =
  struct
    type t = [ `EventSourceInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14739 : Ojs.t) -> t_of_js x14739
    and t_0_to_js : t_0 -> Ojs.t = fun (x14738 : t) -> t_to_js x14738
    type tags = [ `EventSourceInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EventSourceInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14742 : Ojs.t) -> intf_of_js __tags_of_js x14742
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14740 : __tags intf) -> intf_to_js __tags_to_js x14740
    let (get_withCredentials : 'tags this -> bool option) =
      fun (x14744 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14744) "withCredentials")
    let (set_withCredentials : 'tags this -> bool -> unit) =
      fun (x14747 : 'tags this) ->
        fun (x14748 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14747) "withCredentials"
            (Ojs.bool_to_js x14748)
    let (create : ?withCredentials:bool -> unit -> t) =
      fun ?withCredentials:(x14750 : bool option) ->
        fun () ->
          let x14751 = Ojs.empty_obj () in
          (match x14750 with
           | Some x14752 ->
               Ojs.set_prop_ascii x14751 "withCredentials"
                 (Ojs.bool_to_js x14752)
           | None -> ());
          t_of_js x14751
    let cast_from = Obj.magic
  end
module EventSource =
  struct
    type t = [ `EventSource  | `EventTarget ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14754 : Ojs.t) -> t_of_js x14754
    and t_0_to_js : t_0 -> Ojs.t = fun (x14753 : t) -> t_to_js x14753
    type tags = [ `EventSource  | `EventTarget ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EventSource ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14757 : Ojs.t) -> intf_of_js __tags_of_js x14757
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14755 : __tags intf) -> intf_to_js __tags_to_js x14755
    let (get_onerror : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x14759 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14761 : Ojs.t) ->
             fun ~this:(x14762 : t) ->
               fun ~ev:(x14763 : Event.t) ->
                 any_of_js
                   (Ojs.apply x14761
                      [|(t_to_js x14762);(Event.t_to_js x14763)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14759) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x14764 : 'tags this) ->
        fun (x14765 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14764) "onerror"
            (Ojs.option_to_js
               (fun (x14766 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x14767 : Ojs.t) ->
                       fun (x14768 : Ojs.t) ->
                         any_to_js
                           (x14766 ~this:(t_of_js x14767)
                              ~ev:(Event.t_of_js x14768)))) x14765)
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x14770 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14772 : Ojs.t) ->
             fun ~this:(x14773 : t) ->
               fun ~ev:(x14774 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x14772
                      [|(t_to_js x14773);(MessageEvent.t_0_to_js x14774)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14770) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x14775 : 'tags this) ->
        fun (x14776 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14775) "onmessage"
            (Ojs.option_to_js
               (fun (x14777 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x14778 : Ojs.t) ->
                       fun (x14779 : Ojs.t) ->
                         any_to_js
                           (x14777 ~this:(t_of_js x14778)
                              ~ev:(MessageEvent.t_0_of_js x14779)))) x14776)
    let (get_onopen : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x14781 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14783 : Ojs.t) ->
             fun ~this:(x14784 : t) ->
               fun ~ev:(x14785 : Event.t) ->
                 any_of_js
                   (Ojs.apply x14783
                      [|(t_to_js x14784);(Event.t_to_js x14785)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14781) "onopen")
    let (set_onopen :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x14786 : 'tags this) ->
        fun (x14787 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14786) "onopen"
            (Ojs.option_to_js
               (fun (x14788 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x14789 : Ojs.t) ->
                       fun (x14790 : Ojs.t) ->
                         any_to_js
                           (x14788 ~this:(t_of_js x14789)
                              ~ev:(Event.t_of_js x14790)))) x14787)
    let (get_readyState : 'tags this -> float) =
      fun (x14792 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14792) "readyState")
    let (get_url : 'tags this -> string) =
      fun (x14794 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14794) "url")
    let (get_withCredentials : 'tags this -> bool) =
      fun (x14796 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14796) "withCredentials")
    let (close : 'tags this -> unit) =
      fun (x14798 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x14798) "close" [||])
    let (get_CLOSED : 'tags this -> float) =
      fun (x14800 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14800) "CLOSED")
    let (get_CONNECTING : 'tags this -> float) =
      fun (x14802 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14802) "CONNECTING")
    let (get_OPEN : 'tags this -> float) =
      fun (x14804 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14804) "OPEN")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14815 : 'tags this) ->
        fun ~type_:(x14806 : 'K) ->
          fun ~listener:(x14807 : this:t -> ev:any -> any) ->
            fun
              ?options:(x14808 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14817 = this_to_js Obj.magic x14815 in
                   Ojs.call (Ojs.get_prop_ascii x14817 "addEventListener")
                     "apply"
                     [|x14817;((let x14809 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14809 "push"
                                     [|(Obj.magic x14806)|]);
                                ignore
                                  (Ojs.call x14809 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x14813 : Ojs.t) ->
                                             fun (x14814 : Ojs.t) ->
                                               any_to_js
                                                 (x14807
                                                    ~this:(t_of_js x14813)
                                                    ~ev:(any_of_js x14814))))|]);
                                (match x14808 with
                                 | Some x14810 ->
                                     ignore
                                       (Ojs.call x14809 "push"
                                          [|((match x14810 with
                                              | `U1 x14811 ->
                                                  Ojs.bool_to_js x14811
                                              | `U2 x14812 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x14812))|])
                                 | None -> ());
                                x14809))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:(this:t -> event:MessageEvent.t_0 -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14827 : 'tags this) ->
        fun ~type_:(x14818 : string) ->
          fun ~listener:(x14819 : this:t -> event:MessageEvent.t_0 -> any) ->
            fun
              ?options:(x14820 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14829 = this_to_js Obj.magic x14827 in
                   Ojs.call (Ojs.get_prop_ascii x14829 "addEventListener")
                     "apply"
                     [|x14829;((let x14821 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14821 "push"
                                     [|(Ojs.string_to_js x14818)|]);
                                ignore
                                  (Ojs.call x14821 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x14825 : Ojs.t) ->
                                             fun (x14826 : Ojs.t) ->
                                               any_to_js
                                                 (x14819
                                                    ~this:(t_of_js x14825)
                                                    ~event:(MessageEvent.t_0_of_js
                                                              x14826))))|]);
                                (match x14820 with
                                 | Some x14822 ->
                                     ignore
                                       (Ojs.call x14821 "push"
                                          [|((match x14822 with
                                              | `U1 x14823 ->
                                                  Ojs.bool_to_js x14823
                                              | `U2 x14824 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x14824))|])
                                 | None -> ());
                                x14821))|])
    let (addEventListener'' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14837 : 'tags this) ->
        fun ~type_:(x14830 : string) ->
          fun ~listener:(x14831 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x14832 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14839 = this_to_js Obj.magic x14837 in
                   Ojs.call (Ojs.get_prop_ascii x14839 "addEventListener")
                     "apply"
                     [|x14839;((let x14833 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14833 "push"
                                     [|(Ojs.string_to_js x14830)|]);
                                ignore
                                  (Ojs.call x14833 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x14831)|]);
                                (match x14832 with
                                 | Some x14834 ->
                                     ignore
                                       (Ojs.call x14833 "push"
                                          [|((match x14834 with
                                              | `U1 x14835 ->
                                                  Ojs.bool_to_js x14835
                                              | `U2 x14836 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x14836))|])
                                 | None -> ());
                                x14833))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14849 : 'tags this) ->
        fun ~type_:(x14840 : 'K) ->
          fun ~listener:(x14841 : this:t -> ev:any -> any) ->
            fun
              ?options:(x14842 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14851 = this_to_js Obj.magic x14849 in
                   Ojs.call (Ojs.get_prop_ascii x14851 "removeEventListener")
                     "apply"
                     [|x14851;((let x14843 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14843 "push"
                                     [|(Obj.magic x14840)|]);
                                ignore
                                  (Ojs.call x14843 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x14847 : Ojs.t) ->
                                             fun (x14848 : Ojs.t) ->
                                               any_to_js
                                                 (x14841
                                                    ~this:(t_of_js x14847)
                                                    ~ev:(any_of_js x14848))))|]);
                                (match x14842 with
                                 | Some x14844 ->
                                     ignore
                                       (Ojs.call x14843 "push"
                                          [|((match x14844 with
                                              | `U1 x14845 ->
                                                  Ojs.bool_to_js x14845
                                              | `U2 x14846 ->
                                                  EventListenerOptions.t_to_js
                                                    x14846))|])
                                 | None -> ());
                                x14843))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:(this:t -> event:MessageEvent.t_0 -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14861 : 'tags this) ->
        fun ~type_:(x14852 : string) ->
          fun ~listener:(x14853 : this:t -> event:MessageEvent.t_0 -> any) ->
            fun
              ?options:(x14854 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14863 = this_to_js Obj.magic x14861 in
                   Ojs.call (Ojs.get_prop_ascii x14863 "removeEventListener")
                     "apply"
                     [|x14863;((let x14855 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14855 "push"
                                     [|(Ojs.string_to_js x14852)|]);
                                ignore
                                  (Ojs.call x14855 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x14859 : Ojs.t) ->
                                             fun (x14860 : Ojs.t) ->
                                               any_to_js
                                                 (x14853
                                                    ~this:(t_of_js x14859)
                                                    ~event:(MessageEvent.t_0_of_js
                                                              x14860))))|]);
                                (match x14854 with
                                 | Some x14856 ->
                                     ignore
                                       (Ojs.call x14855 "push"
                                          [|((match x14856 with
                                              | `U1 x14857 ->
                                                  Ojs.bool_to_js x14857
                                              | `U2 x14858 ->
                                                  EventListenerOptions.t_to_js
                                                    x14858))|])
                                 | None -> ());
                                x14855))|])
    let (removeEventListener'' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14871 : 'tags this) ->
        fun ~type_:(x14864 : string) ->
          fun ~listener:(x14865 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x14866 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14873 = this_to_js Obj.magic x14871 in
                   Ojs.call (Ojs.get_prop_ascii x14873 "removeEventListener")
                     "apply"
                     [|x14873;((let x14867 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14867 "push"
                                     [|(Ojs.string_to_js x14864)|]);
                                ignore
                                  (Ojs.call x14867 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x14865)|]);
                                (match x14866 with
                                 | Some x14868 ->
                                     ignore
                                       (Ojs.call x14867 "push"
                                          [|((match x14868 with
                                              | `U1 x14869 ->
                                                  Ojs.bool_to_js x14869
                                              | `U2 x14870 ->
                                                  EventListenerOptions.t_to_js
                                                    x14870))|])
                                 | None -> ());
                                x14867))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "EventSource")
             "prototype")
    let (create :
      url:[ `U1 of string  | `U2 of URL.t ] ->
        ?eventSourceInitDict:EventSourceInit.t -> unit -> t)
      =
      fun ~url:(x14874 : [ `U1 of string  | `U2 of URL.t ]) ->
        fun ?eventSourceInitDict:(x14875 : EventSourceInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "EventSource")
                 (let x14876 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x14876 "push"
                       [|((match x14874 with
                           | `U1 x14878 -> Ojs.string_to_js x14878
                           | `U2 x14879 -> URL.t_to_js x14879))|]);
                  (match x14875 with
                   | Some x14877 ->
                       ignore
                         (Ojs.call x14876 "push"
                            [|(EventSourceInit.t_to_js x14877)|])
                   | None -> ());
                  x14876))
    let (closed : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "EventSource")
             "CLOSED")
    let (connecting : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "EventSource")
             "CONNECTING")
    let (open_ : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "EventSource")
             "OPEN")
  end
module EXT_texture_compression_rgtc =
  struct
    type t = [ `EXT_texture_compression_rgtc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14881 : Ojs.t) -> t_of_js x14881
    and t_0_to_js : t_0 -> Ojs.t = fun (x14880 : t) -> t_to_js x14880
    type tags = [ `EXT_texture_compression_rgtc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_texture_compression_rgtc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14884 : Ojs.t) -> intf_of_js __tags_of_js x14884
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14882 : __tags intf) -> intf_to_js __tags_to_js x14882
    let (get_COMPRESSED_RED_GREEN_RGTC2_EXT : 'tags this -> GLenum.t) =
      fun (x14886 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14886)
             "COMPRESSED_RED_GREEN_RGTC2_EXT")
    let (get_COMPRESSED_RED_RGTC1_EXT : 'tags this -> GLenum.t) =
      fun (x14888 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14888)
             "COMPRESSED_RED_RGTC1_EXT")
    let (get_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT : 'tags this -> GLenum.t)
      =
      fun (x14890 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14890)
             "COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT")
    let (get_COMPRESSED_SIGNED_RED_RGTC1_EXT : 'tags this -> GLenum.t) =
      fun (x14892 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14892)
             "COMPRESSED_SIGNED_RED_RGTC1_EXT")
    let (create :
      compressed_red_green_rgtc2_ext:GLenum.t ->
        compressed_red_rgtc1_ext:GLenum.t ->
          compressed_signed_red_green_rgtc2_ext:GLenum.t ->
            compressed_signed_red_rgtc1_ext:GLenum.t -> unit -> t)
      =
      fun ~compressed_red_green_rgtc2_ext:(x14894 : GLenum.t) ->
        fun ~compressed_red_rgtc1_ext:(x14895 : GLenum.t) ->
          fun ~compressed_signed_red_green_rgtc2_ext:(x14896 : GLenum.t) ->
            fun ~compressed_signed_red_rgtc1_ext:(x14897 : GLenum.t) ->
              fun () ->
                let x14898 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x14898 "COMPRESSED_RED_GREEN_RGTC2_EXT"
                  (GLenum.t_to_js x14894);
                Ojs.set_prop_ascii x14898 "COMPRESSED_RED_RGTC1_EXT"
                  (GLenum.t_to_js x14895);
                Ojs.set_prop_ascii x14898
                  "COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT"
                  (GLenum.t_to_js x14896);
                Ojs.set_prop_ascii x14898 "COMPRESSED_SIGNED_RED_RGTC1_EXT"
                  (GLenum.t_to_js x14897);
                t_of_js x14898
    let cast_from = Obj.magic
  end
module DedicatedWorkerGlobalScopeEventMap =
  struct
    type t =
      [ `DedicatedWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14900 : Ojs.t) -> t_of_js x14900
    and t_0_to_js : t_0 -> Ojs.t = fun (x14899 : t) -> t_to_js x14899
    type tags =
      [ `DedicatedWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `DedicatedWorkerGlobalScopeEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14903 : Ojs.t) -> intf_of_js __tags_of_js x14903
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14901 : __tags intf) -> intf_to_js __tags_to_js x14901
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x14905 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14905) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x14907 : 'tags this) ->
        fun (x14908 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14907) "message"
            (MessageEvent.t_0_to_js x14908)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x14910 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14910) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x14912 : 'tags this) ->
        fun (x14913 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14912) "messageerror"
            (MessageEvent.t_0_to_js x14913)
    let (create :
      message:MessageEvent.t_0 -> messageerror:MessageEvent.t_0 -> unit -> t)
      =
      fun ~message:(x14915 : MessageEvent.t_0) ->
        fun ~messageerror:(x14916 : MessageEvent.t_0) ->
          fun () ->
            let x14917 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x14917 "message"
              (MessageEvent.t_0_to_js x14915);
            Ojs.set_prop_ascii x14917 "messageerror"
              (MessageEvent.t_0_to_js x14916);
            t_of_js x14917
    let cast_from = Obj.magic
  end
module FrameRequestCallback =
  struct
    type t = [ `FrameRequestCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14919 : Ojs.t) -> t_of_js x14919
    and t_0_to_js : t_0 -> Ojs.t = fun (x14918 : t) -> t_to_js x14918
    type tags = [ `FrameRequestCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FrameRequestCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14922 : Ojs.t) -> intf_of_js __tags_of_js x14922
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14920 : __tags intf) -> intf_to_js __tags_to_js x14920
    let (apply : 'tags this -> time:DOMHighResTimeStamp.t -> unit) =
      fun (x14925 : 'tags this) ->
        fun ~time:(x14924 : DOMHighResTimeStamp.t) ->
          ignore
            (Ojs.apply (this_to_js Obj.magic x14925)
               [|(DOMHighResTimeStamp.t_to_js x14924)|])
    let cast_from = Obj.magic
  end
module AnimationFrameProvider =
  struct
    type t = [ `AnimationFrameProvider ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14928 : Ojs.t) -> t_of_js x14928
    and t_0_to_js : t_0 -> Ojs.t = fun (x14927 : t) -> t_to_js x14927
    type tags = [ `AnimationFrameProvider ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `AnimationFrameProvider ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14931 : Ojs.t) -> intf_of_js __tags_of_js x14931
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14929 : __tags intf) -> intf_to_js __tags_to_js x14929
    let (cancelAnimationFrame : 'tags this -> handle:float -> unit) =
      fun (x14934 : 'tags this) ->
        fun ~handle:(x14933 : float) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x14934) "cancelAnimationFrame"
               [|(Ojs.float_to_js x14933)|])
    let (requestAnimationFrame :
      'tags this -> callback:FrameRequestCallback.t -> float) =
      fun (x14937 : 'tags this) ->
        fun ~callback:(x14936 : FrameRequestCallback.t) ->
          Ojs.float_of_js
            (Ojs.call (this_to_js Obj.magic x14937) "requestAnimationFrame"
               [|(FrameRequestCallback.t_to_js x14936)|])
    let cast_from = Obj.magic
  end
module DedicatedWorkerGlobalScope =
  struct
    type t =
      [ `AnimationFrameProvider  | `DedicatedWorkerGlobalScope 
      | `EventTarget  | `FontFaceSource  | `WindowOrWorkerGlobalScope 
      | `WorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14940 : Ojs.t) -> t_of_js x14940
    and t_0_to_js : t_0 -> Ojs.t = fun (x14939 : t) -> t_to_js x14939
    type tags =
      [ `AnimationFrameProvider  | `DedicatedWorkerGlobalScope 
      | `EventTarget  | `FontFaceSource  | `WindowOrWorkerGlobalScope 
      | `WorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `DedicatedWorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14943 : Ojs.t) -> intf_of_js __tags_of_js x14943
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14941 : __tags intf) -> intf_to_js __tags_to_js x14941
    let (get_name : 'tags this -> string) =
      fun (x14945 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14945) "name")
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x14947 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14949 : Ojs.t) ->
             fun ~this:(x14950 : t) ->
               fun ~ev:(x14951 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x14949
                      [|(t_to_js x14950);(MessageEvent.t_0_to_js x14951)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14947) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x14952 : 'tags this) ->
        fun (x14953 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14952) "onmessage"
            (Ojs.option_to_js
               (fun (x14954 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x14955 : Ojs.t) ->
                       fun (x14956 : Ojs.t) ->
                         any_to_js
                           (x14954 ~this:(t_of_js x14955)
                              ~ev:(MessageEvent.t_0_of_js x14956)))) x14953)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x14958 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14960 : Ojs.t) ->
             fun ~this:(x14961 : t) ->
               fun ~ev:(x14962 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x14960
                      [|(t_to_js x14961);(MessageEvent.t_0_to_js x14962)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14958) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x14963 : 'tags this) ->
        fun (x14964 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14963) "onmessageerror"
            (Ojs.option_to_js
               (fun (x14965 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x14966 : Ojs.t) ->
                       fun (x14967 : Ojs.t) ->
                         any_to_js
                           (x14965 ~this:(t_of_js x14966)
                              ~ev:(MessageEvent.t_0_of_js x14967)))) x14964)
    let (close : 'tags this -> unit) =
      fun (x14969 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x14969) "close" [||])
    let (postMessage :
      'tags this -> message:any -> transfer:Transferable.t list -> unit) =
      fun (x14974 : 'tags this) ->
        fun ~message:(x14971 : any) ->
          fun ~transfer:(x14972 : Transferable.t list) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x14974) "postMessage"
                 [|(any_to_js x14971);(Ojs.list_to_js Transferable.t_to_js
                                         x14972)|])
    let (postMessage' :
      'tags this ->
        message:any -> ?options:StructuredSerializeOptions.t -> unit -> unit)
      =
      fun (x14980 : 'tags this) ->
        fun ~message:(x14976 : any) ->
          fun ?options:(x14977 : StructuredSerializeOptions.t option) ->
            fun () ->
              ignore
                (let x14982 = this_to_js Obj.magic x14980 in
                 Ojs.call (Ojs.get_prop_ascii x14982 "postMessage") "apply"
                   [|x14982;((let x14978 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x14978 "push"
                                   [|(any_to_js x14976)|]);
                              (match x14977 with
                               | Some x14979 ->
                                   ignore
                                     (Ojs.call x14978 "push"
                                        [|(StructuredSerializeOptions.t_to_js
                                             x14979)|])
                               | None -> ());
                              x14978))|])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14992 : 'tags this) ->
        fun ~type_:(x14983 : 'K) ->
          fun ~listener:(x14984 : this:t -> ev:any -> any) ->
            fun
              ?options:(x14985 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14994 = this_to_js Obj.magic x14992 in
                   Ojs.call (Ojs.get_prop_ascii x14994 "addEventListener")
                     "apply"
                     [|x14994;((let x14986 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14986 "push"
                                     [|(Obj.magic x14983)|]);
                                ignore
                                  (Ojs.call x14986 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x14990 : Ojs.t) ->
                                             fun (x14991 : Ojs.t) ->
                                               any_to_js
                                                 (x14984
                                                    ~this:(t_of_js x14990)
                                                    ~ev:(any_of_js x14991))))|]);
                                (match x14985 with
                                 | Some x14987 ->
                                     ignore
                                       (Ojs.call x14986 "push"
                                          [|((match x14987 with
                                              | `U1 x14988 ->
                                                  Ojs.bool_to_js x14988
                                              | `U2 x14989 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x14989))|])
                                 | None -> ());
                                x14986))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x15002 : 'tags this) ->
        fun ~type_:(x14995 : string) ->
          fun ~listener:(x14996 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x14997 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x15004 = this_to_js Obj.magic x15002 in
                   Ojs.call (Ojs.get_prop_ascii x15004 "addEventListener")
                     "apply"
                     [|x15004;((let x14998 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14998 "push"
                                     [|(Ojs.string_to_js x14995)|]);
                                ignore
                                  (Ojs.call x14998 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x14996)|]);
                                (match x14997 with
                                 | Some x14999 ->
                                     ignore
                                       (Ojs.call x14998 "push"
                                          [|((match x14999 with
                                              | `U1 x15000 ->
                                                  Ojs.bool_to_js x15000
                                              | `U2 x15001 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x15001))|])
                                 | None -> ());
                                x14998))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x15014 : 'tags this) ->
        fun ~type_:(x15005 : 'K) ->
          fun ~listener:(x15006 : this:t -> ev:any -> any) ->
            fun
              ?options:(x15007 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x15016 = this_to_js Obj.magic x15014 in
                   Ojs.call (Ojs.get_prop_ascii x15016 "removeEventListener")
                     "apply"
                     [|x15016;((let x15008 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x15008 "push"
                                     [|(Obj.magic x15005)|]);
                                ignore
                                  (Ojs.call x15008 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x15012 : Ojs.t) ->
                                             fun (x15013 : Ojs.t) ->
                                               any_to_js
                                                 (x15006
                                                    ~this:(t_of_js x15012)
                                                    ~ev:(any_of_js x15013))))|]);
                                (match x15007 with
                                 | Some x15009 ->
                                     ignore
                                       (Ojs.call x15008 "push"
                                          [|((match x15009 with
                                              | `U1 x15010 ->
                                                  Ojs.bool_to_js x15010
                                              | `U2 x15011 ->
                                                  EventListenerOptions.t_to_js
                                                    x15011))|])
                                 | None -> ());
                                x15008))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x15024 : 'tags this) ->
        fun ~type_:(x15017 : string) ->
          fun ~listener:(x15018 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x15019 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x15026 = this_to_js Obj.magic x15024 in
                   Ojs.call (Ojs.get_prop_ascii x15026 "removeEventListener")
                     "apply"
                     [|x15026;((let x15020 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x15020 "push"
                                     [|(Ojs.string_to_js x15017)|]);
                                ignore
                                  (Ojs.call x15020 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x15018)|]);
                                (match x15019 with
                                 | Some x15021 ->
                                     ignore
                                       (Ojs.call x15020 "push"
                                          [|((match x15021 with
                                              | `U1 x15022 ->
                                                  Ojs.bool_to_js x15022
                                              | `U2 x15023 ->
                                                  EventListenerOptions.t_to_js
                                                    x15023))|])
                                 | None -> ());
                                x15020))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "DedicatedWorkerGlobalScope")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "DedicatedWorkerGlobalScope")
             [||])
  end
module DOMRectInit =
  struct
    type t = [ `DOMRectInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15028 : Ojs.t) -> t_of_js x15028
    and t_0_to_js : t_0 -> Ojs.t = fun (x15027 : t) -> t_to_js x15027
    type tags = [ `DOMRectInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMRectInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15031 : Ojs.t) -> intf_of_js __tags_of_js x15031
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15029 : __tags intf) -> intf_to_js __tags_to_js x15029
    let (get_height : 'tags this -> float option) =
      fun (x15033 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15033) "height")
    let (set_height : 'tags this -> float -> unit) =
      fun (x15036 : 'tags this) ->
        fun (x15037 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15036) "height"
            (Ojs.float_to_js x15037)
    let (get_width : 'tags this -> float option) =
      fun (x15039 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15039) "width")
    let (set_width : 'tags this -> float -> unit) =
      fun (x15042 : 'tags this) ->
        fun (x15043 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15042) "width"
            (Ojs.float_to_js x15043)
    let (get_x : 'tags this -> float option) =
      fun (x15045 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15045) "x")
    let (set_x : 'tags this -> float -> unit) =
      fun (x15048 : 'tags this) ->
        fun (x15049 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15048) "x"
            (Ojs.float_to_js x15049)
    let (get_y : 'tags this -> float option) =
      fun (x15051 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15051) "y")
    let (set_y : 'tags this -> float -> unit) =
      fun (x15054 : 'tags this) ->
        fun (x15055 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15054) "y"
            (Ojs.float_to_js x15055)
    let (create :
      ?height:float -> ?width:float -> ?x:float -> ?y:float -> unit -> t) =
      fun ?height:(x15057 : float option) ->
        fun ?width:(x15058 : float option) ->
          fun ?x:(x15059 : float option) ->
            fun ?y:(x15060 : float option) ->
              fun () ->
                let x15061 = Ojs.empty_obj () in
                (match x15057 with
                 | Some x15065 ->
                     Ojs.set_prop_ascii x15061 "height"
                       (Ojs.float_to_js x15065)
                 | None -> ());
                (match x15058 with
                 | Some x15064 ->
                     Ojs.set_prop_ascii x15061 "width"
                       (Ojs.float_to_js x15064)
                 | None -> ());
                (match x15059 with
                 | Some x15063 ->
                     Ojs.set_prop_ascii x15061 "x" (Ojs.float_to_js x15063)
                 | None -> ());
                (match x15060 with
                 | Some x15062 ->
                     Ojs.set_prop_ascii x15061 "y" (Ojs.float_to_js x15062)
                 | None -> ());
                t_of_js x15061
    let cast_from = Obj.magic
  end
module DOMRectReadOnly =
  struct
    type t = [ `DOMRectReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15067 : Ojs.t) -> t_of_js x15067
    and t_0_to_js : t_0 -> Ojs.t = fun (x15066 : t) -> t_to_js x15066
    type tags = [ `DOMRectReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMRectReadOnly ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15070 : Ojs.t) -> intf_of_js __tags_of_js x15070
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15068 : __tags intf) -> intf_to_js __tags_to_js x15068
    let (get_bottom : 'tags this -> float) =
      fun (x15072 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15072) "bottom")
    let (get_height : 'tags this -> float) =
      fun (x15074 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15074) "height")
    let (get_left : 'tags this -> float) =
      fun (x15076 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15076) "left")
    let (get_right : 'tags this -> float) =
      fun (x15078 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15078) "right")
    let (get_top : 'tags this -> float) =
      fun (x15080 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15080) "top")
    let (get_width : 'tags this -> float) =
      fun (x15082 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15082) "width")
    let (get_x : 'tags this -> float) =
      fun (x15084 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15084) "x")
    let (get_y : 'tags this -> float) =
      fun (x15086 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15086) "y")
    let (toJSON : 'tags this -> any) =
      fun (x15088 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x15088) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "DOMRectReadOnly") "prototype")
    let (create :
      ?x:float -> ?y:float -> ?width:float -> ?height:float -> unit -> t) =
      fun ?x:(x15090 : float option) ->
        fun ?y:(x15091 : float option) ->
          fun ?width:(x15092 : float option) ->
            fun ?height:(x15093 : float option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Ojs.global "DOMRectReadOnly")
                     (let x15094 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x15090 with
                       | Some x15098 ->
                           ignore
                             (Ojs.call x15094 "push"
                                [|(Ojs.float_to_js x15098)|])
                       | None -> ());
                      (match x15091 with
                       | Some x15097 ->
                           ignore
                             (Ojs.call x15094 "push"
                                [|(Ojs.float_to_js x15097)|])
                       | None -> ());
                      (match x15092 with
                       | Some x15096 ->
                           ignore
                             (Ojs.call x15094 "push"
                                [|(Ojs.float_to_js x15096)|])
                       | None -> ());
                      (match x15093 with
                       | Some x15095 ->
                           ignore
                             (Ojs.call x15094 "push"
                                [|(Ojs.float_to_js x15095)|])
                       | None -> ());
                      x15094))
    let (fromRect : ?other:DOMRectInit.t -> unit -> t) =
      fun ?other:(x15099 : DOMRectInit.t option) ->
        fun () ->
          t_of_js
            (let x15102 = Ojs.get_prop_ascii Ojs.global "DOMRectReadOnly" in
             Ojs.call (Ojs.get_prop_ascii x15102 "fromRect") "apply"
               [|x15102;((let x15100 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x15099 with
                           | Some x15101 ->
                               ignore
                                 (Ojs.call x15100 "push"
                                    [|(DOMRectInit.t_to_js x15101)|])
                           | None -> ());
                          x15100))|])
  end
module DOMRect =
  struct
    type t = [ `DOMRect  | `DOMRectReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15104 : Ojs.t) -> t_of_js x15104
    and t_0_to_js : t_0 -> Ojs.t = fun (x15103 : t) -> t_to_js x15103
    type tags = [ `DOMRect  | `DOMRectReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMRect ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15107 : Ojs.t) -> intf_of_js __tags_of_js x15107
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15105 : __tags intf) -> intf_to_js __tags_to_js x15105
    let (get_height : 'tags this -> float) =
      fun (x15109 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15109) "height")
    let (set_height : 'tags this -> float -> unit) =
      fun (x15111 : 'tags this) ->
        fun (x15112 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15111) "height"
            (Ojs.float_to_js x15112)
    let (get_width : 'tags this -> float) =
      fun (x15114 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15114) "width")
    let (set_width : 'tags this -> float -> unit) =
      fun (x15116 : 'tags this) ->
        fun (x15117 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15116) "width"
            (Ojs.float_to_js x15117)
    let (get_x : 'tags this -> float) =
      fun (x15119 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15119) "x")
    let (set_x : 'tags this -> float -> unit) =
      fun (x15121 : 'tags this) ->
        fun (x15122 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15121) "x"
            (Ojs.float_to_js x15122)
    let (get_y : 'tags this -> float) =
      fun (x15124 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15124) "y")
    let (set_y : 'tags this -> float -> unit) =
      fun (x15126 : 'tags this) ->
        fun (x15127 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15126) "y"
            (Ojs.float_to_js x15127)
    let (create :
      height:float -> width:float -> x:float -> y:float -> unit -> t) =
      fun ~height:(x15129 : float) ->
        fun ~width:(x15130 : float) ->
          fun ~x:(x15131 : float) ->
            fun ~y:(x15132 : float) ->
              fun () ->
                let x15133 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x15133 "height" (Ojs.float_to_js x15129);
                Ojs.set_prop_ascii x15133 "width" (Ojs.float_to_js x15130);
                Ojs.set_prop_ascii x15133 "x" (Ojs.float_to_js x15131);
                Ojs.set_prop_ascii x15133 "y" (Ojs.float_to_js x15132);
                t_of_js x15133
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMRect")
             "prototype")
    let (create' :
      ?x:float -> ?y:float -> ?width:float -> ?height:float -> unit -> t) =
      fun ?x:(x15134 : float option) ->
        fun ?y:(x15135 : float option) ->
          fun ?width:(x15136 : float option) ->
            fun ?height:(x15137 : float option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMRect")
                     (let x15138 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x15134 with
                       | Some x15142 ->
                           ignore
                             (Ojs.call x15138 "push"
                                [|(Ojs.float_to_js x15142)|])
                       | None -> ());
                      (match x15135 with
                       | Some x15141 ->
                           ignore
                             (Ojs.call x15138 "push"
                                [|(Ojs.float_to_js x15141)|])
                       | None -> ());
                      (match x15136 with
                       | Some x15140 ->
                           ignore
                             (Ojs.call x15138 "push"
                                [|(Ojs.float_to_js x15140)|])
                       | None -> ());
                      (match x15137 with
                       | Some x15139 ->
                           ignore
                             (Ojs.call x15138 "push"
                                [|(Ojs.float_to_js x15139)|])
                       | None -> ());
                      x15138))
    let (fromRect : ?other:DOMRectInit.t -> unit -> t) =
      fun ?other:(x15143 : DOMRectInit.t option) ->
        fun () ->
          t_of_js
            (let x15146 = Ojs.get_prop_ascii Ojs.global "DOMRect" in
             Ojs.call (Ojs.get_prop_ascii x15146 "fromRect") "apply"
               [|x15146;((let x15144 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x15143 with
                           | Some x15145 ->
                               ignore
                                 (Ojs.call x15144 "push"
                                    [|(DOMRectInit.t_to_js x15145)|])
                           | None -> ());
                          x15144))|])
  end
module DOMPointInit =
  struct
    type t = [ `DOMPointInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15148 : Ojs.t) -> t_of_js x15148
    and t_0_to_js : t_0 -> Ojs.t = fun (x15147 : t) -> t_to_js x15147
    type tags = [ `DOMPointInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMPointInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15151 : Ojs.t) -> intf_of_js __tags_of_js x15151
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15149 : __tags intf) -> intf_to_js __tags_to_js x15149
    let (get_w : 'tags this -> float option) =
      fun (x15153 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15153) "w")
    let (set_w : 'tags this -> float -> unit) =
      fun (x15156 : 'tags this) ->
        fun (x15157 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15156) "w"
            (Ojs.float_to_js x15157)
    let (get_x : 'tags this -> float option) =
      fun (x15159 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15159) "x")
    let (set_x : 'tags this -> float -> unit) =
      fun (x15162 : 'tags this) ->
        fun (x15163 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15162) "x"
            (Ojs.float_to_js x15163)
    let (get_y : 'tags this -> float option) =
      fun (x15165 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15165) "y")
    let (set_y : 'tags this -> float -> unit) =
      fun (x15168 : 'tags this) ->
        fun (x15169 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15168) "y"
            (Ojs.float_to_js x15169)
    let (get_z : 'tags this -> float option) =
      fun (x15171 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15171) "z")
    let (set_z : 'tags this -> float -> unit) =
      fun (x15174 : 'tags this) ->
        fun (x15175 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15174) "z"
            (Ojs.float_to_js x15175)
    let (create : ?w:float -> ?x:float -> ?y:float -> ?z:float -> unit -> t)
      =
      fun ?w:(x15177 : float option) ->
        fun ?x:(x15178 : float option) ->
          fun ?y:(x15179 : float option) ->
            fun ?z:(x15180 : float option) ->
              fun () ->
                let x15181 = Ojs.empty_obj () in
                (match x15177 with
                 | Some x15185 ->
                     Ojs.set_prop_ascii x15181 "w" (Ojs.float_to_js x15185)
                 | None -> ());
                (match x15178 with
                 | Some x15184 ->
                     Ojs.set_prop_ascii x15181 "x" (Ojs.float_to_js x15184)
                 | None -> ());
                (match x15179 with
                 | Some x15183 ->
                     Ojs.set_prop_ascii x15181 "y" (Ojs.float_to_js x15183)
                 | None -> ());
                (match x15180 with
                 | Some x15182 ->
                     Ojs.set_prop_ascii x15181 "z" (Ojs.float_to_js x15182)
                 | None -> ());
                t_of_js x15181
    let cast_from = Obj.magic
  end
module DOMQuadInit =
  struct
    type t = [ `DOMQuadInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15187 : Ojs.t) -> t_of_js x15187
    and t_0_to_js : t_0 -> Ojs.t = fun (x15186 : t) -> t_to_js x15186
    type tags = [ `DOMQuadInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMQuadInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15190 : Ojs.t) -> intf_of_js __tags_of_js x15190
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15188 : __tags intf) -> intf_to_js __tags_to_js x15188
    let (get_p1 : 'tags this -> DOMPointInit.t option) =
      fun (x15192 : 'tags this) ->
        Ojs.option_of_js DOMPointInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15192) "p1")
    let (set_p1 : 'tags this -> DOMPointInit.t -> unit) =
      fun (x15195 : 'tags this) ->
        fun (x15196 : DOMPointInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15195) "p1"
            (DOMPointInit.t_to_js x15196)
    let (get_p2 : 'tags this -> DOMPointInit.t option) =
      fun (x15198 : 'tags this) ->
        Ojs.option_of_js DOMPointInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15198) "p2")
    let (set_p2 : 'tags this -> DOMPointInit.t -> unit) =
      fun (x15201 : 'tags this) ->
        fun (x15202 : DOMPointInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15201) "p2"
            (DOMPointInit.t_to_js x15202)
    let (get_p3 : 'tags this -> DOMPointInit.t option) =
      fun (x15204 : 'tags this) ->
        Ojs.option_of_js DOMPointInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15204) "p3")
    let (set_p3 : 'tags this -> DOMPointInit.t -> unit) =
      fun (x15207 : 'tags this) ->
        fun (x15208 : DOMPointInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15207) "p3"
            (DOMPointInit.t_to_js x15208)
    let (get_p4 : 'tags this -> DOMPointInit.t option) =
      fun (x15210 : 'tags this) ->
        Ojs.option_of_js DOMPointInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15210) "p4")
    let (set_p4 : 'tags this -> DOMPointInit.t -> unit) =
      fun (x15213 : 'tags this) ->
        fun (x15214 : DOMPointInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15213) "p4"
            (DOMPointInit.t_to_js x15214)
    let (create :
      ?p1:DOMPointInit.t ->
        ?p2:DOMPointInit.t ->
          ?p3:DOMPointInit.t -> ?p4:DOMPointInit.t -> unit -> t)
      =
      fun ?p1:(x15216 : DOMPointInit.t option) ->
        fun ?p2:(x15217 : DOMPointInit.t option) ->
          fun ?p3:(x15218 : DOMPointInit.t option) ->
            fun ?p4:(x15219 : DOMPointInit.t option) ->
              fun () ->
                let x15220 = Ojs.empty_obj () in
                (match x15216 with
                 | Some x15224 ->
                     Ojs.set_prop_ascii x15220 "p1"
                       (DOMPointInit.t_to_js x15224)
                 | None -> ());
                (match x15217 with
                 | Some x15223 ->
                     Ojs.set_prop_ascii x15220 "p2"
                       (DOMPointInit.t_to_js x15223)
                 | None -> ());
                (match x15218 with
                 | Some x15222 ->
                     Ojs.set_prop_ascii x15220 "p3"
                       (DOMPointInit.t_to_js x15222)
                 | None -> ());
                (match x15219 with
                 | Some x15221 ->
                     Ojs.set_prop_ascii x15220 "p4"
                       (DOMPointInit.t_to_js x15221)
                 | None -> ());
                t_of_js x15220
    let cast_from = Obj.magic
  end
module DOMMatrixInit =
  struct
    type t = [ `DOMMatrix2DInit  | `DOMMatrixInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15226 : Ojs.t) -> t_of_js x15226
    and t_0_to_js : t_0 -> Ojs.t = fun (x15225 : t) -> t_to_js x15225
    type tags = [ `DOMMatrix2DInit  | `DOMMatrixInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrixInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15229 : Ojs.t) -> intf_of_js __tags_of_js x15229
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15227 : __tags intf) -> intf_to_js __tags_to_js x15227
    let (get_is2D : 'tags this -> bool option) =
      fun (x15231 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15231) "is2D")
    let (set_is2D : 'tags this -> bool -> unit) =
      fun (x15234 : 'tags this) ->
        fun (x15235 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15234) "is2D"
            (Ojs.bool_to_js x15235)
    let (get_m13 : 'tags this -> float option) =
      fun (x15237 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15237) "m13")
    let (set_m13 : 'tags this -> float -> unit) =
      fun (x15240 : 'tags this) ->
        fun (x15241 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15240) "m13"
            (Ojs.float_to_js x15241)
    let (get_m14 : 'tags this -> float option) =
      fun (x15243 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15243) "m14")
    let (set_m14 : 'tags this -> float -> unit) =
      fun (x15246 : 'tags this) ->
        fun (x15247 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15246) "m14"
            (Ojs.float_to_js x15247)
    let (get_m23 : 'tags this -> float option) =
      fun (x15249 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15249) "m23")
    let (set_m23 : 'tags this -> float -> unit) =
      fun (x15252 : 'tags this) ->
        fun (x15253 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15252) "m23"
            (Ojs.float_to_js x15253)
    let (get_m24 : 'tags this -> float option) =
      fun (x15255 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15255) "m24")
    let (set_m24 : 'tags this -> float -> unit) =
      fun (x15258 : 'tags this) ->
        fun (x15259 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15258) "m24"
            (Ojs.float_to_js x15259)
    let (get_m31 : 'tags this -> float option) =
      fun (x15261 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15261) "m31")
    let (set_m31 : 'tags this -> float -> unit) =
      fun (x15264 : 'tags this) ->
        fun (x15265 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15264) "m31"
            (Ojs.float_to_js x15265)
    let (get_m32 : 'tags this -> float option) =
      fun (x15267 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15267) "m32")
    let (set_m32 : 'tags this -> float -> unit) =
      fun (x15270 : 'tags this) ->
        fun (x15271 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15270) "m32"
            (Ojs.float_to_js x15271)
    let (get_m33 : 'tags this -> float option) =
      fun (x15273 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15273) "m33")
    let (set_m33 : 'tags this -> float -> unit) =
      fun (x15276 : 'tags this) ->
        fun (x15277 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15276) "m33"
            (Ojs.float_to_js x15277)
    let (get_m34 : 'tags this -> float option) =
      fun (x15279 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15279) "m34")
    let (set_m34 : 'tags this -> float -> unit) =
      fun (x15282 : 'tags this) ->
        fun (x15283 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15282) "m34"
            (Ojs.float_to_js x15283)
    let (get_m43 : 'tags this -> float option) =
      fun (x15285 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15285) "m43")
    let (set_m43 : 'tags this -> float -> unit) =
      fun (x15288 : 'tags this) ->
        fun (x15289 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15288) "m43"
            (Ojs.float_to_js x15289)
    let (get_m44 : 'tags this -> float option) =
      fun (x15291 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15291) "m44")
    let (set_m44 : 'tags this -> float -> unit) =
      fun (x15294 : 'tags this) ->
        fun (x15295 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15294) "m44"
            (Ojs.float_to_js x15295)
    let (create :
      ?is2D:bool ->
        ?m13:float ->
          ?m14:float ->
            ?m23:float ->
              ?m24:float ->
                ?m31:float ->
                  ?m32:float ->
                    ?m33:float ->
                      ?m34:float -> ?m43:float -> ?m44:float -> unit -> t)
      =
      fun ?is2D:(x15297 : bool option) ->
        fun ?m13:(x15298 : float option) ->
          fun ?m14:(x15299 : float option) ->
            fun ?m23:(x15300 : float option) ->
              fun ?m24:(x15301 : float option) ->
                fun ?m31:(x15302 : float option) ->
                  fun ?m32:(x15303 : float option) ->
                    fun ?m33:(x15304 : float option) ->
                      fun ?m34:(x15305 : float option) ->
                        fun ?m43:(x15306 : float option) ->
                          fun ?m44:(x15307 : float option) ->
                            fun () ->
                              let x15308 = Ojs.empty_obj () in
                              (match x15297 with
                               | Some x15319 ->
                                   Ojs.set_prop_ascii x15308 "is2D"
                                     (Ojs.bool_to_js x15319)
                               | None -> ());
                              (match x15298 with
                               | Some x15318 ->
                                   Ojs.set_prop_ascii x15308 "m13"
                                     (Ojs.float_to_js x15318)
                               | None -> ());
                              (match x15299 with
                               | Some x15317 ->
                                   Ojs.set_prop_ascii x15308 "m14"
                                     (Ojs.float_to_js x15317)
                               | None -> ());
                              (match x15300 with
                               | Some x15316 ->
                                   Ojs.set_prop_ascii x15308 "m23"
                                     (Ojs.float_to_js x15316)
                               | None -> ());
                              (match x15301 with
                               | Some x15315 ->
                                   Ojs.set_prop_ascii x15308 "m24"
                                     (Ojs.float_to_js x15315)
                               | None -> ());
                              (match x15302 with
                               | Some x15314 ->
                                   Ojs.set_prop_ascii x15308 "m31"
                                     (Ojs.float_to_js x15314)
                               | None -> ());
                              (match x15303 with
                               | Some x15313 ->
                                   Ojs.set_prop_ascii x15308 "m32"
                                     (Ojs.float_to_js x15313)
                               | None -> ());
                              (match x15304 with
                               | Some x15312 ->
                                   Ojs.set_prop_ascii x15308 "m33"
                                     (Ojs.float_to_js x15312)
                               | None -> ());
                              (match x15305 with
                               | Some x15311 ->
                                   Ojs.set_prop_ascii x15308 "m34"
                                     (Ojs.float_to_js x15311)
                               | None -> ());
                              (match x15306 with
                               | Some x15310 ->
                                   Ojs.set_prop_ascii x15308 "m43"
                                     (Ojs.float_to_js x15310)
                               | None -> ());
                              (match x15307 with
                               | Some x15309 ->
                                   Ojs.set_prop_ascii x15308 "m44"
                                     (Ojs.float_to_js x15309)
                               | None -> ());
                              t_of_js x15308
    let cast_from = Obj.magic
  end
module rec
  DOMPoint:sig
             type t = [ `DOMPoint  | `DOMPointReadOnly ] intf
             type t_0 = t
             [@@@js.stop ]
             type tags = [ `DOMPoint  | `DOMPointReadOnly ]
             type tags_0 = tags
             [@@@js.start ]
             [@@@js.implem
               type tags = [ `DOMPoint  | `DOMPointReadOnly ]
               type tags_0 = tags]
             type 'tags this = 'tags intf constraint 'tags = [> `DOMPoint ]
             val t_to_js : t -> Ojs.t
             val t_of_js : Ojs.t -> t
             val t_0_to_js : t_0 -> Ojs.t
             val t_0_of_js : Ojs.t -> t_0
             val get_w : 'tags this -> float
             val set_w : 'tags this -> float -> unit
             val get_x : 'tags this -> float
             val set_x : 'tags this -> float -> unit
             val get_y : 'tags this -> float
             val set_y : 'tags this -> float -> unit
             val get_z : 'tags this -> float
             val set_z : 'tags this -> float -> unit
             val create :
               w:float -> x:float -> y:float -> z:float -> unit -> t
             val cast_from : 'tags this -> t
             val prototype : unit -> t
             val create' :
               ?x:float -> ?y:float -> ?z:float -> ?w:float -> unit -> t
             val fromPoint : ?other:DOMPointInit.t -> unit -> t
           end =
  struct
    type t = [ `DOMPoint  | `DOMPointReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15321 : Ojs.t) -> t_of_js x15321
    and t_0_to_js : t_0 -> Ojs.t = fun (x15320 : t) -> t_to_js x15320
    type tags = [ `DOMPoint  | `DOMPointReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMPoint ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15324 : Ojs.t) -> intf_of_js __tags_of_js x15324
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15322 : __tags intf) -> intf_to_js __tags_to_js x15322
    let (get_w : 'tags this -> float) =
      fun (x15326 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15326) "w")
    let (set_w : 'tags this -> float -> unit) =
      fun (x15328 : 'tags this) ->
        fun (x15329 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15328) "w"
            (Ojs.float_to_js x15329)
    let (get_x : 'tags this -> float) =
      fun (x15331 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15331) "x")
    let (set_x : 'tags this -> float -> unit) =
      fun (x15333 : 'tags this) ->
        fun (x15334 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15333) "x"
            (Ojs.float_to_js x15334)
    let (get_y : 'tags this -> float) =
      fun (x15336 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15336) "y")
    let (set_y : 'tags this -> float -> unit) =
      fun (x15338 : 'tags this) ->
        fun (x15339 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15338) "y"
            (Ojs.float_to_js x15339)
    let (get_z : 'tags this -> float) =
      fun (x15341 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15341) "z")
    let (set_z : 'tags this -> float -> unit) =
      fun (x15343 : 'tags this) ->
        fun (x15344 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15343) "z"
            (Ojs.float_to_js x15344)
    let (create : w:float -> x:float -> y:float -> z:float -> unit -> t) =
      fun ~w:(x15346 : float) ->
        fun ~x:(x15347 : float) ->
          fun ~y:(x15348 : float) ->
            fun ~z:(x15349 : float) ->
              fun () ->
                let x15350 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x15350 "w" (Ojs.float_to_js x15346);
                Ojs.set_prop_ascii x15350 "x" (Ojs.float_to_js x15347);
                Ojs.set_prop_ascii x15350 "y" (Ojs.float_to_js x15348);
                Ojs.set_prop_ascii x15350 "z" (Ojs.float_to_js x15349);
                t_of_js x15350
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMPoint")
             "prototype")
    let (create' : ?x:float -> ?y:float -> ?z:float -> ?w:float -> unit -> t)
      =
      fun ?x:(x15351 : float option) ->
        fun ?y:(x15352 : float option) ->
          fun ?z:(x15353 : float option) ->
            fun ?w:(x15354 : float option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMPoint")
                     (let x15355 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x15351 with
                       | Some x15359 ->
                           ignore
                             (Ojs.call x15355 "push"
                                [|(Ojs.float_to_js x15359)|])
                       | None -> ());
                      (match x15352 with
                       | Some x15358 ->
                           ignore
                             (Ojs.call x15355 "push"
                                [|(Ojs.float_to_js x15358)|])
                       | None -> ());
                      (match x15353 with
                       | Some x15357 ->
                           ignore
                             (Ojs.call x15355 "push"
                                [|(Ojs.float_to_js x15357)|])
                       | None -> ());
                      (match x15354 with
                       | Some x15356 ->
                           ignore
                             (Ojs.call x15355 "push"
                                [|(Ojs.float_to_js x15356)|])
                       | None -> ());
                      x15355))
    let (fromPoint : ?other:DOMPointInit.t -> unit -> t) =
      fun ?other:(x15360 : DOMPointInit.t option) ->
        fun () ->
          t_of_js
            (let x15363 = Ojs.get_prop_ascii Ojs.global "DOMPoint" in
             Ojs.call (Ojs.get_prop_ascii x15363 "fromPoint") "apply"
               [|x15363;((let x15361 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x15360 with
                           | Some x15362 ->
                               ignore
                                 (Ojs.call x15361 "push"
                                    [|(DOMPointInit.t_to_js x15362)|])
                           | None -> ());
                          x15361))|])
  end
 and
  DOMPointReadOnly:sig
                     type t = [ `DOMPointReadOnly ] intf
                     type t_0 = t
                     [@@@js.stop ]
                     type tags = [ `DOMPointReadOnly ]
                     type tags_0 = tags
                     [@@@js.start ]
                     [@@@js.implem
                       type tags = [ `DOMPointReadOnly ]
                       type tags_0 = tags]
                     type 'tags this =
                       'tags intf constraint 'tags = [> `DOMPointReadOnly ]
                     val t_to_js : t -> Ojs.t
                     val t_of_js : Ojs.t -> t
                     val t_0_to_js : t_0 -> Ojs.t
                     val t_0_of_js : Ojs.t -> t_0
                     val get_w : 'tags this -> float
                     val get_x : 'tags this -> float
                     val get_y : 'tags this -> float
                     val get_z : 'tags this -> float
                     val matrixTransform :
                       'tags this ->
                         ?matrix:DOMMatrixInit.t -> unit -> DOMPoint.t
                     val toJSON : 'tags this -> any
                     val cast_from : 'tags this -> t
                     val prototype : unit -> t
                     val create :
                       ?x:float ->
                         ?y:float -> ?z:float -> ?w:float -> unit -> t
                     val fromPoint : ?other:DOMPointInit.t -> unit -> t
                   end =
  struct
    type t = [ `DOMPointReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15365 : Ojs.t) -> t_of_js x15365
    and t_0_to_js : t_0 -> Ojs.t = fun (x15364 : t) -> t_to_js x15364
    type tags = [ `DOMPointReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMPointReadOnly ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15368 : Ojs.t) -> intf_of_js __tags_of_js x15368
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15366 : __tags intf) -> intf_to_js __tags_to_js x15366
    let (get_w : 'tags this -> float) =
      fun (x15370 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15370) "w")
    let (get_x : 'tags this -> float) =
      fun (x15372 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15372) "x")
    let (get_y : 'tags this -> float) =
      fun (x15374 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15374) "y")
    let (get_z : 'tags this -> float) =
      fun (x15376 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15376) "z")
    let (matrixTransform :
      'tags this -> ?matrix:DOMMatrixInit.t -> unit -> DOMPoint.t) =
      fun (x15381 : 'tags this) ->
        fun ?matrix:(x15378 : DOMMatrixInit.t option) ->
          fun () ->
            DOMPoint.t_of_js
              (let x15383 = this_to_js Obj.magic x15381 in
               Ojs.call (Ojs.get_prop_ascii x15383 "matrixTransform") "apply"
                 [|x15383;((let x15379 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15378 with
                             | Some x15380 ->
                                 ignore
                                   (Ojs.call x15379 "push"
                                      [|(DOMMatrixInit.t_to_js x15380)|])
                             | None -> ());
                            x15379))|])
    let (toJSON : 'tags this -> any) =
      fun (x15384 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x15384) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "DOMPointReadOnly") "prototype")
    let (create : ?x:float -> ?y:float -> ?z:float -> ?w:float -> unit -> t)
      =
      fun ?x:(x15386 : float option) ->
        fun ?y:(x15387 : float option) ->
          fun ?z:(x15388 : float option) ->
            fun ?w:(x15389 : float option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Ojs.global "DOMPointReadOnly")
                     (let x15390 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x15386 with
                       | Some x15394 ->
                           ignore
                             (Ojs.call x15390 "push"
                                [|(Ojs.float_to_js x15394)|])
                       | None -> ());
                      (match x15387 with
                       | Some x15393 ->
                           ignore
                             (Ojs.call x15390 "push"
                                [|(Ojs.float_to_js x15393)|])
                       | None -> ());
                      (match x15388 with
                       | Some x15392 ->
                           ignore
                             (Ojs.call x15390 "push"
                                [|(Ojs.float_to_js x15392)|])
                       | None -> ());
                      (match x15389 with
                       | Some x15391 ->
                           ignore
                             (Ojs.call x15390 "push"
                                [|(Ojs.float_to_js x15391)|])
                       | None -> ());
                      x15390))
    let (fromPoint : ?other:DOMPointInit.t -> unit -> t) =
      fun ?other:(x15395 : DOMPointInit.t option) ->
        fun () ->
          t_of_js
            (let x15398 = Ojs.get_prop_ascii Ojs.global "DOMPointReadOnly" in
             Ojs.call (Ojs.get_prop_ascii x15398 "fromPoint") "apply"
               [|x15398;((let x15396 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x15395 with
                           | Some x15397 ->
                               ignore
                                 (Ojs.call x15396 "push"
                                    [|(DOMPointInit.t_to_js x15397)|])
                           | None -> ());
                          x15396))|])
  end
module DOMQuad =
  struct
    type t = [ `DOMQuad ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15400 : Ojs.t) -> t_of_js x15400
    and t_0_to_js : t_0 -> Ojs.t = fun (x15399 : t) -> t_to_js x15399
    type tags = [ `DOMQuad ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMQuad ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15403 : Ojs.t) -> intf_of_js __tags_of_js x15403
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15401 : __tags intf) -> intf_to_js __tags_to_js x15401
    let (get_p1 : 'tags this -> DOMPoint.t) =
      fun (x15405 : 'tags this) ->
        DOMPoint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15405) "p1")
    let (get_p2 : 'tags this -> DOMPoint.t) =
      fun (x15407 : 'tags this) ->
        DOMPoint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15407) "p2")
    let (get_p3 : 'tags this -> DOMPoint.t) =
      fun (x15409 : 'tags this) ->
        DOMPoint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15409) "p3")
    let (get_p4 : 'tags this -> DOMPoint.t) =
      fun (x15411 : 'tags this) ->
        DOMPoint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15411) "p4")
    let (getBounds : 'tags this -> DOMRect.t) =
      fun (x15413 : 'tags this) ->
        DOMRect.t_of_js
          (Ojs.call (this_to_js Obj.magic x15413) "getBounds" [||])
    let (toJSON : 'tags this -> any) =
      fun (x15415 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x15415) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMQuad")
             "prototype")
    let (create :
      ?p1:DOMPointInit.t ->
        ?p2:DOMPointInit.t ->
          ?p3:DOMPointInit.t -> ?p4:DOMPointInit.t -> unit -> t)
      =
      fun ?p1:(x15417 : DOMPointInit.t option) ->
        fun ?p2:(x15418 : DOMPointInit.t option) ->
          fun ?p3:(x15419 : DOMPointInit.t option) ->
            fun ?p4:(x15420 : DOMPointInit.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMQuad")
                     (let x15421 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x15417 with
                       | Some x15425 ->
                           ignore
                             (Ojs.call x15421 "push"
                                [|(DOMPointInit.t_to_js x15425)|])
                       | None -> ());
                      (match x15418 with
                       | Some x15424 ->
                           ignore
                             (Ojs.call x15421 "push"
                                [|(DOMPointInit.t_to_js x15424)|])
                       | None -> ());
                      (match x15419 with
                       | Some x15423 ->
                           ignore
                             (Ojs.call x15421 "push"
                                [|(DOMPointInit.t_to_js x15423)|])
                       | None -> ());
                      (match x15420 with
                       | Some x15422 ->
                           ignore
                             (Ojs.call x15421 "push"
                                [|(DOMPointInit.t_to_js x15422)|])
                       | None -> ());
                      x15421))
    let (fromQuad : ?other:DOMQuadInit.t -> unit -> t) =
      fun ?other:(x15426 : DOMQuadInit.t option) ->
        fun () ->
          t_of_js
            (let x15429 = Ojs.get_prop_ascii Ojs.global "DOMQuad" in
             Ojs.call (Ojs.get_prop_ascii x15429 "fromQuad") "apply"
               [|x15429;((let x15427 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x15426 with
                           | Some x15428 ->
                               ignore
                                 (Ojs.call x15427 "push"
                                    [|(DOMQuadInit.t_to_js x15428)|])
                           | None -> ());
                          x15427))|])
    let (fromRect : ?other:DOMRectInit.t -> unit -> t) =
      fun ?other:(x15430 : DOMRectInit.t option) ->
        fun () ->
          t_of_js
            (let x15433 = Ojs.get_prop_ascii Ojs.global "DOMQuad" in
             Ojs.call (Ojs.get_prop_ascii x15433 "fromRect") "apply"
               [|x15433;((let x15431 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x15430 with
                           | Some x15432 ->
                               ignore
                                 (Ojs.call x15431 "push"
                                    [|(DOMRectInit.t_to_js x15432)|])
                           | None -> ());
                          x15431))|])
  end
module rec
  DOMMatrix:sig
              type t = [ `DOMMatrix  | `DOMMatrixReadOnly ] intf
              type t_0 = t
              [@@@js.stop ]
              type tags = [ `DOMMatrix  | `DOMMatrixReadOnly ]
              type tags_0 = tags
              [@@@js.start ]
              [@@@js.implem
                type tags = [ `DOMMatrix  | `DOMMatrixReadOnly ]
                type tags_0 = tags]
              type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrix ]
              val t_to_js : t -> Ojs.t
              val t_of_js : Ojs.t -> t
              val t_0_to_js : t_0 -> Ojs.t
              val t_0_of_js : Ojs.t -> t_0
              val get_a : 'tags this -> float
              val set_a : 'tags this -> float -> unit
              val get_b : 'tags this -> float
              val set_b : 'tags this -> float -> unit
              val get_c : 'tags this -> float
              val set_c : 'tags this -> float -> unit
              val get_d : 'tags this -> float
              val set_d : 'tags this -> float -> unit
              val get_e : 'tags this -> float
              val set_e : 'tags this -> float -> unit
              val get_f : 'tags this -> float
              val set_f : 'tags this -> float -> unit
              val get_m11 : 'tags this -> float
              val set_m11 : 'tags this -> float -> unit
              val get_m12 : 'tags this -> float
              val set_m12 : 'tags this -> float -> unit
              val get_m13 : 'tags this -> float
              val set_m13 : 'tags this -> float -> unit
              val get_m14 : 'tags this -> float
              val set_m14 : 'tags this -> float -> unit
              val get_m21 : 'tags this -> float
              val set_m21 : 'tags this -> float -> unit
              val get_m22 : 'tags this -> float
              val set_m22 : 'tags this -> float -> unit
              val get_m23 : 'tags this -> float
              val set_m23 : 'tags this -> float -> unit
              val get_m24 : 'tags this -> float
              val set_m24 : 'tags this -> float -> unit
              val get_m31 : 'tags this -> float
              val set_m31 : 'tags this -> float -> unit
              val get_m32 : 'tags this -> float
              val set_m32 : 'tags this -> float -> unit
              val get_m33 : 'tags this -> float
              val set_m33 : 'tags this -> float -> unit
              val get_m34 : 'tags this -> float
              val set_m34 : 'tags this -> float -> unit
              val get_m41 : 'tags this -> float
              val set_m41 : 'tags this -> float -> unit
              val get_m42 : 'tags this -> float
              val set_m42 : 'tags this -> float -> unit
              val get_m43 : 'tags this -> float
              val set_m43 : 'tags this -> float -> unit
              val get_m44 : 'tags this -> float
              val set_m44 : 'tags this -> float -> unit
              val invertSelf : 'tags this -> t
              val multiplySelf :
                'tags this -> ?other:DOMMatrixInit.t -> unit -> t
              val preMultiplySelf :
                'tags this -> ?other:DOMMatrixInit.t -> unit -> t
              val rotateAxisAngleSelf :
                'tags this ->
                  ?x:float ->
                    ?y:float -> ?z:float -> ?angle:float -> unit -> t
              val rotateFromVectorSelf :
                'tags this -> ?x:float -> ?y:float -> unit -> t
              val rotateSelf :
                'tags this ->
                  ?rotX:float -> ?rotY:float -> ?rotZ:float -> unit -> t
              val scale3dSelf :
                'tags this ->
                  ?scale:float ->
                    ?originX:float ->
                      ?originY:float -> ?originZ:float -> unit -> t
              val scaleSelf :
                'tags this ->
                  ?scaleX:float ->
                    ?scaleY:float ->
                      ?scaleZ:float ->
                        ?originX:float ->
                          ?originY:float -> ?originZ:float -> unit -> t
              val skewXSelf : 'tags this -> ?sx:float -> unit -> t
              val skewYSelf : 'tags this -> ?sy:float -> unit -> t
              val translateSelf :
                'tags this ->
                  ?tx:float -> ?ty:float -> ?tz:float -> unit -> t
              val cast_from : 'tags this -> t
              val prototype : unit -> t
              val create :
                ?init:[ `U1 of string  | `U2 of float list ] -> unit -> t
              val fromFloat32Array : Float32Array.t_0 -> t
              val fromFloat64Array : Float64Array.t_0 -> t
              val fromMatrix : ?other:DOMMatrixInit.t -> unit -> t
            end =
  struct
    type t = [ `DOMMatrix  | `DOMMatrixReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15435 : Ojs.t) -> t_of_js x15435
    and t_0_to_js : t_0 -> Ojs.t = fun (x15434 : t) -> t_to_js x15434
    type tags = [ `DOMMatrix  | `DOMMatrixReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrix ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15438 : Ojs.t) -> intf_of_js __tags_of_js x15438
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15436 : __tags intf) -> intf_to_js __tags_to_js x15436
    let (get_a : 'tags this -> float) =
      fun (x15440 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15440) "a")
    let (set_a : 'tags this -> float -> unit) =
      fun (x15442 : 'tags this) ->
        fun (x15443 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15442) "a"
            (Ojs.float_to_js x15443)
    let (get_b : 'tags this -> float) =
      fun (x15445 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15445) "b")
    let (set_b : 'tags this -> float -> unit) =
      fun (x15447 : 'tags this) ->
        fun (x15448 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15447) "b"
            (Ojs.float_to_js x15448)
    let (get_c : 'tags this -> float) =
      fun (x15450 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15450) "c")
    let (set_c : 'tags this -> float -> unit) =
      fun (x15452 : 'tags this) ->
        fun (x15453 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15452) "c"
            (Ojs.float_to_js x15453)
    let (get_d : 'tags this -> float) =
      fun (x15455 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15455) "d")
    let (set_d : 'tags this -> float -> unit) =
      fun (x15457 : 'tags this) ->
        fun (x15458 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15457) "d"
            (Ojs.float_to_js x15458)
    let (get_e : 'tags this -> float) =
      fun (x15460 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15460) "e")
    let (set_e : 'tags this -> float -> unit) =
      fun (x15462 : 'tags this) ->
        fun (x15463 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15462) "e"
            (Ojs.float_to_js x15463)
    let (get_f : 'tags this -> float) =
      fun (x15465 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15465) "f")
    let (set_f : 'tags this -> float -> unit) =
      fun (x15467 : 'tags this) ->
        fun (x15468 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15467) "f"
            (Ojs.float_to_js x15468)
    let (get_m11 : 'tags this -> float) =
      fun (x15470 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15470) "m11")
    let (set_m11 : 'tags this -> float -> unit) =
      fun (x15472 : 'tags this) ->
        fun (x15473 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15472) "m11"
            (Ojs.float_to_js x15473)
    let (get_m12 : 'tags this -> float) =
      fun (x15475 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15475) "m12")
    let (set_m12 : 'tags this -> float -> unit) =
      fun (x15477 : 'tags this) ->
        fun (x15478 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15477) "m12"
            (Ojs.float_to_js x15478)
    let (get_m13 : 'tags this -> float) =
      fun (x15480 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15480) "m13")
    let (set_m13 : 'tags this -> float -> unit) =
      fun (x15482 : 'tags this) ->
        fun (x15483 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15482) "m13"
            (Ojs.float_to_js x15483)
    let (get_m14 : 'tags this -> float) =
      fun (x15485 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15485) "m14")
    let (set_m14 : 'tags this -> float -> unit) =
      fun (x15487 : 'tags this) ->
        fun (x15488 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15487) "m14"
            (Ojs.float_to_js x15488)
    let (get_m21 : 'tags this -> float) =
      fun (x15490 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15490) "m21")
    let (set_m21 : 'tags this -> float -> unit) =
      fun (x15492 : 'tags this) ->
        fun (x15493 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15492) "m21"
            (Ojs.float_to_js x15493)
    let (get_m22 : 'tags this -> float) =
      fun (x15495 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15495) "m22")
    let (set_m22 : 'tags this -> float -> unit) =
      fun (x15497 : 'tags this) ->
        fun (x15498 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15497) "m22"
            (Ojs.float_to_js x15498)
    let (get_m23 : 'tags this -> float) =
      fun (x15500 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15500) "m23")
    let (set_m23 : 'tags this -> float -> unit) =
      fun (x15502 : 'tags this) ->
        fun (x15503 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15502) "m23"
            (Ojs.float_to_js x15503)
    let (get_m24 : 'tags this -> float) =
      fun (x15505 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15505) "m24")
    let (set_m24 : 'tags this -> float -> unit) =
      fun (x15507 : 'tags this) ->
        fun (x15508 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15507) "m24"
            (Ojs.float_to_js x15508)
    let (get_m31 : 'tags this -> float) =
      fun (x15510 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15510) "m31")
    let (set_m31 : 'tags this -> float -> unit) =
      fun (x15512 : 'tags this) ->
        fun (x15513 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15512) "m31"
            (Ojs.float_to_js x15513)
    let (get_m32 : 'tags this -> float) =
      fun (x15515 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15515) "m32")
    let (set_m32 : 'tags this -> float -> unit) =
      fun (x15517 : 'tags this) ->
        fun (x15518 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15517) "m32"
            (Ojs.float_to_js x15518)
    let (get_m33 : 'tags this -> float) =
      fun (x15520 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15520) "m33")
    let (set_m33 : 'tags this -> float -> unit) =
      fun (x15522 : 'tags this) ->
        fun (x15523 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15522) "m33"
            (Ojs.float_to_js x15523)
    let (get_m34 : 'tags this -> float) =
      fun (x15525 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15525) "m34")
    let (set_m34 : 'tags this -> float -> unit) =
      fun (x15527 : 'tags this) ->
        fun (x15528 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15527) "m34"
            (Ojs.float_to_js x15528)
    let (get_m41 : 'tags this -> float) =
      fun (x15530 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15530) "m41")
    let (set_m41 : 'tags this -> float -> unit) =
      fun (x15532 : 'tags this) ->
        fun (x15533 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15532) "m41"
            (Ojs.float_to_js x15533)
    let (get_m42 : 'tags this -> float) =
      fun (x15535 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15535) "m42")
    let (set_m42 : 'tags this -> float -> unit) =
      fun (x15537 : 'tags this) ->
        fun (x15538 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15537) "m42"
            (Ojs.float_to_js x15538)
    let (get_m43 : 'tags this -> float) =
      fun (x15540 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15540) "m43")
    let (set_m43 : 'tags this -> float -> unit) =
      fun (x15542 : 'tags this) ->
        fun (x15543 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15542) "m43"
            (Ojs.float_to_js x15543)
    let (get_m44 : 'tags this -> float) =
      fun (x15545 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15545) "m44")
    let (set_m44 : 'tags this -> float -> unit) =
      fun (x15547 : 'tags this) ->
        fun (x15548 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15547) "m44"
            (Ojs.float_to_js x15548)
    let (invertSelf : 'tags this -> t) =
      fun (x15550 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x15550) "invertSelf" [||])
    let (multiplySelf : 'tags this -> ?other:DOMMatrixInit.t -> unit -> t) =
      fun (x15555 : 'tags this) ->
        fun ?other:(x15552 : DOMMatrixInit.t option) ->
          fun () ->
            t_of_js
              (let x15557 = this_to_js Obj.magic x15555 in
               Ojs.call (Ojs.get_prop_ascii x15557 "multiplySelf") "apply"
                 [|x15557;((let x15553 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15552 with
                             | Some x15554 ->
                                 ignore
                                   (Ojs.call x15553 "push"
                                      [|(DOMMatrixInit.t_to_js x15554)|])
                             | None -> ());
                            x15553))|])
    let (preMultiplySelf : 'tags this -> ?other:DOMMatrixInit.t -> unit -> t)
      =
      fun (x15561 : 'tags this) ->
        fun ?other:(x15558 : DOMMatrixInit.t option) ->
          fun () ->
            t_of_js
              (let x15563 = this_to_js Obj.magic x15561 in
               Ojs.call (Ojs.get_prop_ascii x15563 "preMultiplySelf") "apply"
                 [|x15563;((let x15559 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15558 with
                             | Some x15560 ->
                                 ignore
                                   (Ojs.call x15559 "push"
                                      [|(DOMMatrixInit.t_to_js x15560)|])
                             | None -> ());
                            x15559))|])
    let (rotateAxisAngleSelf :
      'tags this ->
        ?x:float -> ?y:float -> ?z:float -> ?angle:float -> unit -> t)
      =
      fun (x15573 : 'tags this) ->
        fun ?x:(x15564 : float option) ->
          fun ?y:(x15565 : float option) ->
            fun ?z:(x15566 : float option) ->
              fun ?angle:(x15567 : float option) ->
                fun () ->
                  t_of_js
                    (let x15575 = this_to_js Obj.magic x15573 in
                     Ojs.call
                       (Ojs.get_prop_ascii x15575 "rotateAxisAngleSelf")
                       "apply"
                       [|x15575;((let x15568 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x15564 with
                                   | Some x15572 ->
                                       ignore
                                         (Ojs.call x15568 "push"
                                            [|(Ojs.float_to_js x15572)|])
                                   | None -> ());
                                  (match x15565 with
                                   | Some x15571 ->
                                       ignore
                                         (Ojs.call x15568 "push"
                                            [|(Ojs.float_to_js x15571)|])
                                   | None -> ());
                                  (match x15566 with
                                   | Some x15570 ->
                                       ignore
                                         (Ojs.call x15568 "push"
                                            [|(Ojs.float_to_js x15570)|])
                                   | None -> ());
                                  (match x15567 with
                                   | Some x15569 ->
                                       ignore
                                         (Ojs.call x15568 "push"
                                            [|(Ojs.float_to_js x15569)|])
                                   | None -> ());
                                  x15568))|])
    let (rotateFromVectorSelf :
      'tags this -> ?x:float -> ?y:float -> unit -> t) =
      fun (x15581 : 'tags this) ->
        fun ?x:(x15576 : float option) ->
          fun ?y:(x15577 : float option) ->
            fun () ->
              t_of_js
                (let x15583 = this_to_js Obj.magic x15581 in
                 Ojs.call (Ojs.get_prop_ascii x15583 "rotateFromVectorSelf")
                   "apply"
                   [|x15583;((let x15578 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x15576 with
                               | Some x15580 ->
                                   ignore
                                     (Ojs.call x15578 "push"
                                        [|(Ojs.float_to_js x15580)|])
                               | None -> ());
                              (match x15577 with
                               | Some x15579 ->
                                   ignore
                                     (Ojs.call x15578 "push"
                                        [|(Ojs.float_to_js x15579)|])
                               | None -> ());
                              x15578))|])
    let (rotateSelf :
      'tags this -> ?rotX:float -> ?rotY:float -> ?rotZ:float -> unit -> t) =
      fun (x15591 : 'tags this) ->
        fun ?rotX:(x15584 : float option) ->
          fun ?rotY:(x15585 : float option) ->
            fun ?rotZ:(x15586 : float option) ->
              fun () ->
                t_of_js
                  (let x15593 = this_to_js Obj.magic x15591 in
                   Ojs.call (Ojs.get_prop_ascii x15593 "rotateSelf") "apply"
                     [|x15593;((let x15587 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x15584 with
                                 | Some x15590 ->
                                     ignore
                                       (Ojs.call x15587 "push"
                                          [|(Ojs.float_to_js x15590)|])
                                 | None -> ());
                                (match x15585 with
                                 | Some x15589 ->
                                     ignore
                                       (Ojs.call x15587 "push"
                                          [|(Ojs.float_to_js x15589)|])
                                 | None -> ());
                                (match x15586 with
                                 | Some x15588 ->
                                     ignore
                                       (Ojs.call x15587 "push"
                                          [|(Ojs.float_to_js x15588)|])
                                 | None -> ());
                                x15587))|])
    let (scale3dSelf :
      'tags this ->
        ?scale:float ->
          ?originX:float -> ?originY:float -> ?originZ:float -> unit -> t)
      =
      fun (x15603 : 'tags this) ->
        fun ?scale:(x15594 : float option) ->
          fun ?originX:(x15595 : float option) ->
            fun ?originY:(x15596 : float option) ->
              fun ?originZ:(x15597 : float option) ->
                fun () ->
                  t_of_js
                    (let x15605 = this_to_js Obj.magic x15603 in
                     Ojs.call (Ojs.get_prop_ascii x15605 "scale3dSelf")
                       "apply"
                       [|x15605;((let x15598 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x15594 with
                                   | Some x15602 ->
                                       ignore
                                         (Ojs.call x15598 "push"
                                            [|(Ojs.float_to_js x15602)|])
                                   | None -> ());
                                  (match x15595 with
                                   | Some x15601 ->
                                       ignore
                                         (Ojs.call x15598 "push"
                                            [|(Ojs.float_to_js x15601)|])
                                   | None -> ());
                                  (match x15596 with
                                   | Some x15600 ->
                                       ignore
                                         (Ojs.call x15598 "push"
                                            [|(Ojs.float_to_js x15600)|])
                                   | None -> ());
                                  (match x15597 with
                                   | Some x15599 ->
                                       ignore
                                         (Ojs.call x15598 "push"
                                            [|(Ojs.float_to_js x15599)|])
                                   | None -> ());
                                  x15598))|])
    let (scaleSelf :
      'tags this ->
        ?scaleX:float ->
          ?scaleY:float ->
            ?scaleZ:float ->
              ?originX:float -> ?originY:float -> ?originZ:float -> unit -> t)
      =
      fun (x15619 : 'tags this) ->
        fun ?scaleX:(x15606 : float option) ->
          fun ?scaleY:(x15607 : float option) ->
            fun ?scaleZ:(x15608 : float option) ->
              fun ?originX:(x15609 : float option) ->
                fun ?originY:(x15610 : float option) ->
                  fun ?originZ:(x15611 : float option) ->
                    fun () ->
                      t_of_js
                        (let x15621 = this_to_js Obj.magic x15619 in
                         Ojs.call (Ojs.get_prop_ascii x15621 "scaleSelf")
                           "apply"
                           [|x15621;((let x15612 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      (match x15606 with
                                       | Some x15618 ->
                                           ignore
                                             (Ojs.call x15612 "push"
                                                [|(Ojs.float_to_js x15618)|])
                                       | None -> ());
                                      (match x15607 with
                                       | Some x15617 ->
                                           ignore
                                             (Ojs.call x15612 "push"
                                                [|(Ojs.float_to_js x15617)|])
                                       | None -> ());
                                      (match x15608 with
                                       | Some x15616 ->
                                           ignore
                                             (Ojs.call x15612 "push"
                                                [|(Ojs.float_to_js x15616)|])
                                       | None -> ());
                                      (match x15609 with
                                       | Some x15615 ->
                                           ignore
                                             (Ojs.call x15612 "push"
                                                [|(Ojs.float_to_js x15615)|])
                                       | None -> ());
                                      (match x15610 with
                                       | Some x15614 ->
                                           ignore
                                             (Ojs.call x15612 "push"
                                                [|(Ojs.float_to_js x15614)|])
                                       | None -> ());
                                      (match x15611 with
                                       | Some x15613 ->
                                           ignore
                                             (Ojs.call x15612 "push"
                                                [|(Ojs.float_to_js x15613)|])
                                       | None -> ());
                                      x15612))|])
    let (skewXSelf : 'tags this -> ?sx:float -> unit -> t) =
      fun (x15625 : 'tags this) ->
        fun ?sx:(x15622 : float option) ->
          fun () ->
            t_of_js
              (let x15627 = this_to_js Obj.magic x15625 in
               Ojs.call (Ojs.get_prop_ascii x15627 "skewXSelf") "apply"
                 [|x15627;((let x15623 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15622 with
                             | Some x15624 ->
                                 ignore
                                   (Ojs.call x15623 "push"
                                      [|(Ojs.float_to_js x15624)|])
                             | None -> ());
                            x15623))|])
    let (skewYSelf : 'tags this -> ?sy:float -> unit -> t) =
      fun (x15631 : 'tags this) ->
        fun ?sy:(x15628 : float option) ->
          fun () ->
            t_of_js
              (let x15633 = this_to_js Obj.magic x15631 in
               Ojs.call (Ojs.get_prop_ascii x15633 "skewYSelf") "apply"
                 [|x15633;((let x15629 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15628 with
                             | Some x15630 ->
                                 ignore
                                   (Ojs.call x15629 "push"
                                      [|(Ojs.float_to_js x15630)|])
                             | None -> ());
                            x15629))|])
    let (translateSelf :
      'tags this -> ?tx:float -> ?ty:float -> ?tz:float -> unit -> t) =
      fun (x15641 : 'tags this) ->
        fun ?tx:(x15634 : float option) ->
          fun ?ty:(x15635 : float option) ->
            fun ?tz:(x15636 : float option) ->
              fun () ->
                t_of_js
                  (let x15643 = this_to_js Obj.magic x15641 in
                   Ojs.call (Ojs.get_prop_ascii x15643 "translateSelf")
                     "apply"
                     [|x15643;((let x15637 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x15634 with
                                 | Some x15640 ->
                                     ignore
                                       (Ojs.call x15637 "push"
                                          [|(Ojs.float_to_js x15640)|])
                                 | None -> ());
                                (match x15635 with
                                 | Some x15639 ->
                                     ignore
                                       (Ojs.call x15637 "push"
                                          [|(Ojs.float_to_js x15639)|])
                                 | None -> ());
                                (match x15636 with
                                 | Some x15638 ->
                                     ignore
                                       (Ojs.call x15637 "push"
                                          [|(Ojs.float_to_js x15638)|])
                                 | None -> ());
                                x15637))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMMatrix")
             "prototype")
    let (create : ?init:[ `U1 of string  | `U2 of float list ] -> unit -> t)
      =
      fun ?init:(x15644 : [ `U1 of string  | `U2 of float list ] option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMMatrix")
               (let x15645 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x15644 with
                 | Some x15646 ->
                     ignore
                       (Ojs.call x15645 "push"
                          [|((match x15646 with
                              | `U1 x15647 -> Ojs.string_to_js x15647
                              | `U2 x15648 ->
                                  Ojs.list_to_js Ojs.float_to_js x15648))|])
                 | None -> ());
                x15645))
    let (fromFloat32Array : Float32Array.t_0 -> t) =
      fun (x15650 : Float32Array.t_0) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "DOMMatrix")
             "fromFloat32Array" [|(Float32Array.t_0_to_js x15650)|])
    let (fromFloat64Array : Float64Array.t_0 -> t) =
      fun (x15651 : Float64Array.t_0) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "DOMMatrix")
             "fromFloat64Array" [|(Float64Array.t_0_to_js x15651)|])
    let (fromMatrix : ?other:DOMMatrixInit.t -> unit -> t) =
      fun ?other:(x15652 : DOMMatrixInit.t option) ->
        fun () ->
          t_of_js
            (let x15655 = Ojs.get_prop_ascii Ojs.global "DOMMatrix" in
             Ojs.call (Ojs.get_prop_ascii x15655 "fromMatrix") "apply"
               [|x15655;((let x15653 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x15652 with
                           | Some x15654 ->
                               ignore
                                 (Ojs.call x15653 "push"
                                    [|(DOMMatrixInit.t_to_js x15654)|])
                           | None -> ());
                          x15653))|])
  end
 and
  DOMMatrixReadOnly:sig
                      type t = [ `DOMMatrixReadOnly ] intf
                      type t_0 = t
                      [@@@js.stop ]
                      type tags = [ `DOMMatrixReadOnly ]
                      type tags_0 = tags
                      [@@@js.start ]
                      [@@@js.implem
                        type tags = [ `DOMMatrixReadOnly ]
                        type tags_0 = tags]
                      type 'tags this =
                        'tags intf constraint 'tags = [> `DOMMatrixReadOnly ]
                      val t_to_js : t -> Ojs.t
                      val t_of_js : Ojs.t -> t
                      val t_0_to_js : t_0 -> Ojs.t
                      val t_0_of_js : Ojs.t -> t_0
                      val get_a : 'tags this -> float
                      val get_b : 'tags this -> float
                      val get_c : 'tags this -> float
                      val get_d : 'tags this -> float
                      val get_e : 'tags this -> float
                      val get_f : 'tags this -> float
                      val get_is2D : 'tags this -> bool
                      val get_isIdentity : 'tags this -> bool
                      val get_m11 : 'tags this -> float
                      val get_m12 : 'tags this -> float
                      val get_m13 : 'tags this -> float
                      val get_m14 : 'tags this -> float
                      val get_m21 : 'tags this -> float
                      val get_m22 : 'tags this -> float
                      val get_m23 : 'tags this -> float
                      val get_m24 : 'tags this -> float
                      val get_m31 : 'tags this -> float
                      val get_m32 : 'tags this -> float
                      val get_m33 : 'tags this -> float
                      val get_m34 : 'tags this -> float
                      val get_m41 : 'tags this -> float
                      val get_m42 : 'tags this -> float
                      val get_m43 : 'tags this -> float
                      val get_m44 : 'tags this -> float
                      val flipX : 'tags this -> DOMMatrix.t
                      val flipY : 'tags this -> DOMMatrix.t
                      val inverse : 'tags this -> DOMMatrix.t
                      val multiply :
                        'tags this ->
                          ?other:DOMMatrixInit.t -> unit -> DOMMatrix.t
                      val rotate :
                        'tags this ->
                          ?rotX:float ->
                            ?rotY:float -> ?rotZ:float -> unit -> DOMMatrix.t
                      val rotateAxisAngle :
                        'tags this ->
                          ?x:float ->
                            ?y:float ->
                              ?z:float -> ?angle:float -> unit -> DOMMatrix.t
                      val rotateFromVector :
                        'tags this ->
                          ?x:float -> ?y:float -> unit -> DOMMatrix.t
                      val scale :
                        'tags this ->
                          ?scaleX:float ->
                            ?scaleY:float ->
                              ?scaleZ:float ->
                                ?originX:float ->
                                  ?originY:float ->
                                    ?originZ:float -> unit -> DOMMatrix.t
                      val scale3d :
                        'tags this ->
                          ?scale:float ->
                            ?originX:float ->
                              ?originY:float ->
                                ?originZ:float -> unit -> DOMMatrix.t
                      val scaleNonUniform :
                        'tags this ->
                          ?scaleX:float ->
                            ?scaleY:float -> unit -> DOMMatrix.t
                      val skewX :
                        'tags this -> ?sx:float -> unit -> DOMMatrix.t
                      val skewY :
                        'tags this -> ?sy:float -> unit -> DOMMatrix.t
                      val toFloat32Array : 'tags this -> Float32Array.t_0
                      val toFloat64Array : 'tags this -> Float64Array.t_0
                      val toJSON : 'tags this -> any
                      val transformPoint :
                        'tags this ->
                          ?point:DOMPointInit.t -> unit -> DOMPoint.t
                      val translate :
                        'tags this ->
                          ?tx:float ->
                            ?ty:float -> ?tz:float -> unit -> DOMMatrix.t
                      val cast_from : 'tags this -> t
                      val prototype : unit -> t
                      val create :
                        ?init:[ `U1 of string  | `U2 of float list ] ->
                          unit -> t
                      val fromFloat32Array : Float32Array.t_0 -> t
                      val fromFloat64Array : Float64Array.t_0 -> t
                      val fromMatrix : ?other:DOMMatrixInit.t -> unit -> t
                    end =
  struct
    type t = [ `DOMMatrixReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15657 : Ojs.t) -> t_of_js x15657
    and t_0_to_js : t_0 -> Ojs.t = fun (x15656 : t) -> t_to_js x15656
    type tags = [ `DOMMatrixReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrixReadOnly ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15660 : Ojs.t) -> intf_of_js __tags_of_js x15660
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15658 : __tags intf) -> intf_to_js __tags_to_js x15658
    let (get_a : 'tags this -> float) =
      fun (x15662 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15662) "a")
    let (get_b : 'tags this -> float) =
      fun (x15664 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15664) "b")
    let (get_c : 'tags this -> float) =
      fun (x15666 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15666) "c")
    let (get_d : 'tags this -> float) =
      fun (x15668 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15668) "d")
    let (get_e : 'tags this -> float) =
      fun (x15670 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15670) "e")
    let (get_f : 'tags this -> float) =
      fun (x15672 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15672) "f")
    let (get_is2D : 'tags this -> bool) =
      fun (x15674 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15674) "is2D")
    let (get_isIdentity : 'tags this -> bool) =
      fun (x15676 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15676) "isIdentity")
    let (get_m11 : 'tags this -> float) =
      fun (x15678 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15678) "m11")
    let (get_m12 : 'tags this -> float) =
      fun (x15680 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15680) "m12")
    let (get_m13 : 'tags this -> float) =
      fun (x15682 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15682) "m13")
    let (get_m14 : 'tags this -> float) =
      fun (x15684 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15684) "m14")
    let (get_m21 : 'tags this -> float) =
      fun (x15686 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15686) "m21")
    let (get_m22 : 'tags this -> float) =
      fun (x15688 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15688) "m22")
    let (get_m23 : 'tags this -> float) =
      fun (x15690 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15690) "m23")
    let (get_m24 : 'tags this -> float) =
      fun (x15692 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15692) "m24")
    let (get_m31 : 'tags this -> float) =
      fun (x15694 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15694) "m31")
    let (get_m32 : 'tags this -> float) =
      fun (x15696 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15696) "m32")
    let (get_m33 : 'tags this -> float) =
      fun (x15698 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15698) "m33")
    let (get_m34 : 'tags this -> float) =
      fun (x15700 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15700) "m34")
    let (get_m41 : 'tags this -> float) =
      fun (x15702 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15702) "m41")
    let (get_m42 : 'tags this -> float) =
      fun (x15704 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15704) "m42")
    let (get_m43 : 'tags this -> float) =
      fun (x15706 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15706) "m43")
    let (get_m44 : 'tags this -> float) =
      fun (x15708 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15708) "m44")
    let (flipX : 'tags this -> DOMMatrix.t) =
      fun (x15710 : 'tags this) ->
        DOMMatrix.t_of_js
          (Ojs.call (this_to_js Obj.magic x15710) "flipX" [||])
    let (flipY : 'tags this -> DOMMatrix.t) =
      fun (x15712 : 'tags this) ->
        DOMMatrix.t_of_js
          (Ojs.call (this_to_js Obj.magic x15712) "flipY" [||])
    let (inverse : 'tags this -> DOMMatrix.t) =
      fun (x15714 : 'tags this) ->
        DOMMatrix.t_of_js
          (Ojs.call (this_to_js Obj.magic x15714) "inverse" [||])
    let (multiply :
      'tags this -> ?other:DOMMatrixInit.t -> unit -> DOMMatrix.t) =
      fun (x15719 : 'tags this) ->
        fun ?other:(x15716 : DOMMatrixInit.t option) ->
          fun () ->
            DOMMatrix.t_of_js
              (let x15721 = this_to_js Obj.magic x15719 in
               Ojs.call (Ojs.get_prop_ascii x15721 "multiply") "apply"
                 [|x15721;((let x15717 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15716 with
                             | Some x15718 ->
                                 ignore
                                   (Ojs.call x15717 "push"
                                      [|(DOMMatrixInit.t_to_js x15718)|])
                             | None -> ());
                            x15717))|])
    let (rotate :
      'tags this ->
        ?rotX:float -> ?rotY:float -> ?rotZ:float -> unit -> DOMMatrix.t)
      =
      fun (x15729 : 'tags this) ->
        fun ?rotX:(x15722 : float option) ->
          fun ?rotY:(x15723 : float option) ->
            fun ?rotZ:(x15724 : float option) ->
              fun () ->
                DOMMatrix.t_of_js
                  (let x15731 = this_to_js Obj.magic x15729 in
                   Ojs.call (Ojs.get_prop_ascii x15731 "rotate") "apply"
                     [|x15731;((let x15725 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x15722 with
                                 | Some x15728 ->
                                     ignore
                                       (Ojs.call x15725 "push"
                                          [|(Ojs.float_to_js x15728)|])
                                 | None -> ());
                                (match x15723 with
                                 | Some x15727 ->
                                     ignore
                                       (Ojs.call x15725 "push"
                                          [|(Ojs.float_to_js x15727)|])
                                 | None -> ());
                                (match x15724 with
                                 | Some x15726 ->
                                     ignore
                                       (Ojs.call x15725 "push"
                                          [|(Ojs.float_to_js x15726)|])
                                 | None -> ());
                                x15725))|])
    let (rotateAxisAngle :
      'tags this ->
        ?x:float ->
          ?y:float -> ?z:float -> ?angle:float -> unit -> DOMMatrix.t)
      =
      fun (x15741 : 'tags this) ->
        fun ?x:(x15732 : float option) ->
          fun ?y:(x15733 : float option) ->
            fun ?z:(x15734 : float option) ->
              fun ?angle:(x15735 : float option) ->
                fun () ->
                  DOMMatrix.t_of_js
                    (let x15743 = this_to_js Obj.magic x15741 in
                     Ojs.call (Ojs.get_prop_ascii x15743 "rotateAxisAngle")
                       "apply"
                       [|x15743;((let x15736 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x15732 with
                                   | Some x15740 ->
                                       ignore
                                         (Ojs.call x15736 "push"
                                            [|(Ojs.float_to_js x15740)|])
                                   | None -> ());
                                  (match x15733 with
                                   | Some x15739 ->
                                       ignore
                                         (Ojs.call x15736 "push"
                                            [|(Ojs.float_to_js x15739)|])
                                   | None -> ());
                                  (match x15734 with
                                   | Some x15738 ->
                                       ignore
                                         (Ojs.call x15736 "push"
                                            [|(Ojs.float_to_js x15738)|])
                                   | None -> ());
                                  (match x15735 with
                                   | Some x15737 ->
                                       ignore
                                         (Ojs.call x15736 "push"
                                            [|(Ojs.float_to_js x15737)|])
                                   | None -> ());
                                  x15736))|])
    let (rotateFromVector :
      'tags this -> ?x:float -> ?y:float -> unit -> DOMMatrix.t) =
      fun (x15749 : 'tags this) ->
        fun ?x:(x15744 : float option) ->
          fun ?y:(x15745 : float option) ->
            fun () ->
              DOMMatrix.t_of_js
                (let x15751 = this_to_js Obj.magic x15749 in
                 Ojs.call (Ojs.get_prop_ascii x15751 "rotateFromVector")
                   "apply"
                   [|x15751;((let x15746 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x15744 with
                               | Some x15748 ->
                                   ignore
                                     (Ojs.call x15746 "push"
                                        [|(Ojs.float_to_js x15748)|])
                               | None -> ());
                              (match x15745 with
                               | Some x15747 ->
                                   ignore
                                     (Ojs.call x15746 "push"
                                        [|(Ojs.float_to_js x15747)|])
                               | None -> ());
                              x15746))|])
    let (scale :
      'tags this ->
        ?scaleX:float ->
          ?scaleY:float ->
            ?scaleZ:float ->
              ?originX:float ->
                ?originY:float -> ?originZ:float -> unit -> DOMMatrix.t)
      =
      fun (x15765 : 'tags this) ->
        fun ?scaleX:(x15752 : float option) ->
          fun ?scaleY:(x15753 : float option) ->
            fun ?scaleZ:(x15754 : float option) ->
              fun ?originX:(x15755 : float option) ->
                fun ?originY:(x15756 : float option) ->
                  fun ?originZ:(x15757 : float option) ->
                    fun () ->
                      DOMMatrix.t_of_js
                        (let x15767 = this_to_js Obj.magic x15765 in
                         Ojs.call (Ojs.get_prop_ascii x15767 "scale") "apply"
                           [|x15767;((let x15758 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      (match x15752 with
                                       | Some x15764 ->
                                           ignore
                                             (Ojs.call x15758 "push"
                                                [|(Ojs.float_to_js x15764)|])
                                       | None -> ());
                                      (match x15753 with
                                       | Some x15763 ->
                                           ignore
                                             (Ojs.call x15758 "push"
                                                [|(Ojs.float_to_js x15763)|])
                                       | None -> ());
                                      (match x15754 with
                                       | Some x15762 ->
                                           ignore
                                             (Ojs.call x15758 "push"
                                                [|(Ojs.float_to_js x15762)|])
                                       | None -> ());
                                      (match x15755 with
                                       | Some x15761 ->
                                           ignore
                                             (Ojs.call x15758 "push"
                                                [|(Ojs.float_to_js x15761)|])
                                       | None -> ());
                                      (match x15756 with
                                       | Some x15760 ->
                                           ignore
                                             (Ojs.call x15758 "push"
                                                [|(Ojs.float_to_js x15760)|])
                                       | None -> ());
                                      (match x15757 with
                                       | Some x15759 ->
                                           ignore
                                             (Ojs.call x15758 "push"
                                                [|(Ojs.float_to_js x15759)|])
                                       | None -> ());
                                      x15758))|])
    let (scale3d :
      'tags this ->
        ?scale:float ->
          ?originX:float ->
            ?originY:float -> ?originZ:float -> unit -> DOMMatrix.t)
      =
      fun (x15777 : 'tags this) ->
        fun ?scale:(x15768 : float option) ->
          fun ?originX:(x15769 : float option) ->
            fun ?originY:(x15770 : float option) ->
              fun ?originZ:(x15771 : float option) ->
                fun () ->
                  DOMMatrix.t_of_js
                    (let x15779 = this_to_js Obj.magic x15777 in
                     Ojs.call (Ojs.get_prop_ascii x15779 "scale3d") "apply"
                       [|x15779;((let x15772 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x15768 with
                                   | Some x15776 ->
                                       ignore
                                         (Ojs.call x15772 "push"
                                            [|(Ojs.float_to_js x15776)|])
                                   | None -> ());
                                  (match x15769 with
                                   | Some x15775 ->
                                       ignore
                                         (Ojs.call x15772 "push"
                                            [|(Ojs.float_to_js x15775)|])
                                   | None -> ());
                                  (match x15770 with
                                   | Some x15774 ->
                                       ignore
                                         (Ojs.call x15772 "push"
                                            [|(Ojs.float_to_js x15774)|])
                                   | None -> ());
                                  (match x15771 with
                                   | Some x15773 ->
                                       ignore
                                         (Ojs.call x15772 "push"
                                            [|(Ojs.float_to_js x15773)|])
                                   | None -> ());
                                  x15772))|])
    let (scaleNonUniform :
      'tags this -> ?scaleX:float -> ?scaleY:float -> unit -> DOMMatrix.t) =
      fun (x15785 : 'tags this) ->
        fun ?scaleX:(x15780 : float option) ->
          fun ?scaleY:(x15781 : float option) ->
            fun () ->
              DOMMatrix.t_of_js
                (let x15787 = this_to_js Obj.magic x15785 in
                 Ojs.call (Ojs.get_prop_ascii x15787 "scaleNonUniform")
                   "apply"
                   [|x15787;((let x15782 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x15780 with
                               | Some x15784 ->
                                   ignore
                                     (Ojs.call x15782 "push"
                                        [|(Ojs.float_to_js x15784)|])
                               | None -> ());
                              (match x15781 with
                               | Some x15783 ->
                                   ignore
                                     (Ojs.call x15782 "push"
                                        [|(Ojs.float_to_js x15783)|])
                               | None -> ());
                              x15782))|])
    let (skewX : 'tags this -> ?sx:float -> unit -> DOMMatrix.t) =
      fun (x15791 : 'tags this) ->
        fun ?sx:(x15788 : float option) ->
          fun () ->
            DOMMatrix.t_of_js
              (let x15793 = this_to_js Obj.magic x15791 in
               Ojs.call (Ojs.get_prop_ascii x15793 "skewX") "apply"
                 [|x15793;((let x15789 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15788 with
                             | Some x15790 ->
                                 ignore
                                   (Ojs.call x15789 "push"
                                      [|(Ojs.float_to_js x15790)|])
                             | None -> ());
                            x15789))|])
    let (skewY : 'tags this -> ?sy:float -> unit -> DOMMatrix.t) =
      fun (x15797 : 'tags this) ->
        fun ?sy:(x15794 : float option) ->
          fun () ->
            DOMMatrix.t_of_js
              (let x15799 = this_to_js Obj.magic x15797 in
               Ojs.call (Ojs.get_prop_ascii x15799 "skewY") "apply"
                 [|x15799;((let x15795 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15794 with
                             | Some x15796 ->
                                 ignore
                                   (Ojs.call x15795 "push"
                                      [|(Ojs.float_to_js x15796)|])
                             | None -> ());
                            x15795))|])
    let (toFloat32Array : 'tags this -> Float32Array.t_0) =
      fun (x15800 : 'tags this) ->
        Float32Array.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x15800) "toFloat32Array" [||])
    let (toFloat64Array : 'tags this -> Float64Array.t_0) =
      fun (x15802 : 'tags this) ->
        Float64Array.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x15802) "toFloat64Array" [||])
    let (toJSON : 'tags this -> any) =
      fun (x15804 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x15804) "toJSON" [||])
    let (transformPoint :
      'tags this -> ?point:DOMPointInit.t -> unit -> DOMPoint.t) =
      fun (x15809 : 'tags this) ->
        fun ?point:(x15806 : DOMPointInit.t option) ->
          fun () ->
            DOMPoint.t_of_js
              (let x15811 = this_to_js Obj.magic x15809 in
               Ojs.call (Ojs.get_prop_ascii x15811 "transformPoint") "apply"
                 [|x15811;((let x15807 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15806 with
                             | Some x15808 ->
                                 ignore
                                   (Ojs.call x15807 "push"
                                      [|(DOMPointInit.t_to_js x15808)|])
                             | None -> ());
                            x15807))|])
    let (translate :
      'tags this ->
        ?tx:float -> ?ty:float -> ?tz:float -> unit -> DOMMatrix.t)
      =
      fun (x15819 : 'tags this) ->
        fun ?tx:(x15812 : float option) ->
          fun ?ty:(x15813 : float option) ->
            fun ?tz:(x15814 : float option) ->
              fun () ->
                DOMMatrix.t_of_js
                  (let x15821 = this_to_js Obj.magic x15819 in
                   Ojs.call (Ojs.get_prop_ascii x15821 "translate") "apply"
                     [|x15821;((let x15815 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x15812 with
                                 | Some x15818 ->
                                     ignore
                                       (Ojs.call x15815 "push"
                                          [|(Ojs.float_to_js x15818)|])
                                 | None -> ());
                                (match x15813 with
                                 | Some x15817 ->
                                     ignore
                                       (Ojs.call x15815 "push"
                                          [|(Ojs.float_to_js x15817)|])
                                 | None -> ());
                                (match x15814 with
                                 | Some x15816 ->
                                     ignore
                                       (Ojs.call x15815 "push"
                                          [|(Ojs.float_to_js x15816)|])
                                 | None -> ());
                                x15815))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly") "prototype")
    let (create : ?init:[ `U1 of string  | `U2 of float list ] -> unit -> t)
      =
      fun ?init:(x15822 : [ `U1 of string  | `U2 of float list ] option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr
               (Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly")
               (let x15823 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x15822 with
                 | Some x15824 ->
                     ignore
                       (Ojs.call x15823 "push"
                          [|((match x15824 with
                              | `U1 x15825 -> Ojs.string_to_js x15825
                              | `U2 x15826 ->
                                  Ojs.list_to_js Ojs.float_to_js x15826))|])
                 | None -> ());
                x15823))
    let (fromFloat32Array : Float32Array.t_0 -> t) =
      fun (x15828 : Float32Array.t_0) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly")
             "fromFloat32Array" [|(Float32Array.t_0_to_js x15828)|])
    let (fromFloat64Array : Float64Array.t_0 -> t) =
      fun (x15829 : Float64Array.t_0) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly")
             "fromFloat64Array" [|(Float64Array.t_0_to_js x15829)|])
    let (fromMatrix : ?other:DOMMatrixInit.t -> unit -> t) =
      fun ?other:(x15830 : DOMMatrixInit.t option) ->
        fun () ->
          t_of_js
            (let x15833 = Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly" in
             Ojs.call (Ojs.get_prop_ascii x15833 "fromMatrix") "apply"
               [|x15833;((let x15831 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x15830 with
                           | Some x15832 ->
                               ignore
                                 (Ojs.call x15831 "push"
                                    [|(DOMMatrixInit.t_to_js x15832)|])
                           | None -> ());
                          x15831))|])
  end
module CustomEventInit =
  struct
    type 'T t = [ `CustomEventInit of 'T  | `EventInit ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x15836 : Ojs.t) -> t_of_js __T_of_js x15836
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x15834 : __T t) -> t_to_js __T_to_js x15834
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x15840 : Ojs.t) -> t_of_js any_of_js x15840
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x15838 : any t) -> t_to_js any_to_js x15838
    type 'T tags = [ `CustomEventInit of 'T  | `EventInit ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `CustomEventInit of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__T_of_js : Ojs.t -> __T) ->
              fun (x15844 : Ojs.t) -> intf_of_js __tags_of_js x15844
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__T_to_js : __T -> Ojs.t) ->
              fun (x15842 : __tags intf) -> intf_to_js __tags_to_js x15842
    let (get_detail : ('tags, 'T) this -> 'T option) =
      fun (x15846 : ('tags, 'T) this) ->
        Ojs.option_of_js Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x15846)
             "detail")
    let (set_detail : ('tags, 'T) this -> 'T -> unit) =
      fun (x15850 : ('tags, 'T) this) ->
        fun (x15851 : 'T) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x15850) "detail"
            (Obj.magic x15851)
    let (create : ?detail:'T -> unit -> 'T t) =
      fun ?detail:(x15854 : 'T option) ->
        fun () ->
          let x15855 = Ojs.empty_obj () in
          (match x15854 with
           | Some x15857 ->
               Ojs.set_prop_ascii x15855 "detail" (Obj.magic x15857)
           | None -> ());
          t_of_js Obj.magic x15855
    let cast_from = Obj.magic
  end
module CustomEvent =
  struct
    type 'T t = [ `CustomEvent of 'T  | `Event ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x15860 : Ojs.t) -> t_of_js __T_of_js x15860
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x15858 : __T t) -> t_to_js __T_to_js x15858
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x15864 : Ojs.t) -> t_of_js any_of_js x15864
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x15862 : any t) -> t_to_js any_to_js x15862
    type 'T tags = [ `CustomEvent of 'T  | `Event ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `CustomEvent of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__T_of_js : Ojs.t -> __T) ->
              fun (x15868 : Ojs.t) -> intf_of_js __tags_of_js x15868
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__T_to_js : __T -> Ojs.t) ->
              fun (x15866 : __tags intf) -> intf_to_js __tags_to_js x15866
    let (get_detail : ('tags, 'T) this -> 'T) =
      fun (x15870 : ('tags, 'T) this) ->
        Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x15870)
             "detail")
    let (initCustomEvent :
      ('tags, 'T) this ->
        type_:string ->
          ?bubbles:bool -> ?cancelable:bool -> ?detail:'T -> unit -> unit)
      =
      fun (x15881 : ('tags, 'T) this) ->
        fun ~type_:(x15873 : string) ->
          fun ?bubbles:(x15874 : bool option) ->
            fun ?cancelable:(x15875 : bool option) ->
              fun ?detail:(x15876 : 'T option) ->
                fun () ->
                  ignore
                    (let x15884 = this_to_js Obj.magic Obj.magic x15881 in
                     Ojs.call (Ojs.get_prop_ascii x15884 "initCustomEvent")
                       "apply"
                       [|x15884;((let x15877 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x15877 "push"
                                       [|(Ojs.string_to_js x15873)|]);
                                  (match x15874 with
                                   | Some x15880 ->
                                       ignore
                                         (Ojs.call x15877 "push"
                                            [|(Ojs.bool_to_js x15880)|])
                                   | None -> ());
                                  (match x15875 with
                                   | Some x15879 ->
                                       ignore
                                         (Ojs.call x15877 "push"
                                            [|(Ojs.bool_to_js x15879)|])
                                   | None -> ());
                                  (match x15876 with
                                   | Some x15878 ->
                                       ignore
                                         (Ojs.call x15877 "push"
                                            [|(Obj.magic x15878)|])
                                   | None -> ());
                                  x15877))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CustomEvent")
             "prototype")
    let (create :
      type_:string -> ?eventInitDict:'T CustomEventInit.t -> unit -> 'T t) =
      fun ~type_:(x15885 : string) ->
        fun ?eventInitDict:(x15886 : 'T CustomEventInit.t option) ->
          fun () ->
            t_of_js Obj.magic
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "CustomEvent")
                 (let x15887 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x15887 "push" [|(Ojs.string_to_js x15885)|]);
                  (match x15886 with
                   | Some x15888 ->
                       ignore
                         (Ojs.call x15887 "push"
                            [|(CustomEventInit.t_to_js Obj.magic x15888)|])
                   | None -> ());
                  x15887))
  end
module QueuingStrategyInit =
  struct
    type t = [ `QueuingStrategyInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15892 : Ojs.t) -> t_of_js x15892
    and t_0_to_js : t_0 -> Ojs.t = fun (x15891 : t) -> t_to_js x15891
    type tags = [ `QueuingStrategyInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `QueuingStrategyInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15895 : Ojs.t) -> intf_of_js __tags_of_js x15895
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15893 : __tags intf) -> intf_to_js __tags_to_js x15893
    let (get_highWaterMark : 'tags this -> float) =
      fun (x15897 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15897) "highWaterMark")
    let (set_highWaterMark : 'tags this -> float -> unit) =
      fun (x15899 : 'tags this) ->
        fun (x15900 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15899) "highWaterMark"
            (Ojs.float_to_js x15900)
    let (create : highWaterMark:float -> unit -> t) =
      fun ~highWaterMark:(x15902 : float) ->
        fun () ->
          let x15903 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x15903 "highWaterMark" (Ojs.float_to_js x15902);
          t_of_js x15903
    let cast_from = Obj.magic
  end
module CountQueuingStrategy =
  struct
    type t = [ `CountQueuingStrategy  | `QueuingStrategy of any ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15905 : Ojs.t) -> t_of_js x15905
    and t_0_to_js : t_0 -> Ojs.t = fun (x15904 : t) -> t_to_js x15904
    type tags = [ `CountQueuingStrategy  | `QueuingStrategy of any ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `CountQueuingStrategy ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15908 : Ojs.t) -> intf_of_js __tags_of_js x15908
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15906 : __tags intf) -> intf_to_js __tags_to_js x15906
    let (get_highWaterMark : 'tags this -> float) =
      fun (x15910 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15910) "highWaterMark")
    let (get_size : 'tags this -> QueuingStrategySize.t_0) =
      fun (x15912 : 'tags this) ->
        QueuingStrategySize.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15912) "size")
    let (create :
      highWaterMark:float -> size:QueuingStrategySize.t_0 -> unit -> t) =
      fun ~highWaterMark:(x15914 : float) ->
        fun ~size:(x15915 : QueuingStrategySize.t_0) ->
          fun () ->
            let x15916 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x15916 "highWaterMark"
              (Ojs.float_to_js x15914);
            Ojs.set_prop_ascii x15916 "size"
              (QueuingStrategySize.t_0_to_js x15915);
            t_of_js x15916
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "CountQueuingStrategy")
             "prototype")
    let (create' : QueuingStrategyInit.t -> t) =
      fun (x15917 : QueuingStrategyInit.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CountQueuingStrategy")
             [|(QueuingStrategyInit.t_to_js x15917)|])
  end
module Console =
  struct
    type t = [ `Console ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15919 : Ojs.t) -> t_of_js x15919
    and t_0_to_js : t_0 -> Ojs.t = fun (x15918 : t) -> t_to_js x15918
    type tags = [ `Console ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Console ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15922 : Ojs.t) -> intf_of_js __tags_of_js x15922
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15920 : __tags intf) -> intf_to_js __tags_to_js x15920
    let (assert_ :
      'tags this -> ?condition:bool -> data:any list -> unit -> unit) =
      fun (x15929 : 'tags this) ->
        fun ?condition:(x15924 : bool option) ->
          fun ~data:(x15925 : any list) ->
            fun () ->
              ignore
                (let x15931 = this_to_js Obj.magic x15929 in
                 Ojs.call (Ojs.get_prop_ascii x15931 "assert") "apply"
                   [|x15931;((let x15926 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x15924 with
                               | Some x15928 ->
                                   ignore
                                     (Ojs.call x15926 "push"
                                        [|(Ojs.bool_to_js x15928)|])
                               | None -> ());
                              List.iter
                                (fun (x15927 : any) ->
                                   ignore
                                     (Ojs.call x15926 "push"
                                        [|(any_to_js x15927)|])) x15925;
                              x15926))|])
    let (clear : 'tags this -> unit) =
      fun (x15932 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x15932) "clear" [||])
    let (count : 'tags this -> ?label:string -> unit -> unit) =
      fun (x15937 : 'tags this) ->
        fun ?label:(x15934 : string option) ->
          fun () ->
            ignore
              (let x15939 = this_to_js Obj.magic x15937 in
               Ojs.call (Ojs.get_prop_ascii x15939 "count") "apply"
                 [|x15939;((let x15935 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15934 with
                             | Some x15936 ->
                                 ignore
                                   (Ojs.call x15935 "push"
                                      [|(Ojs.string_to_js x15936)|])
                             | None -> ());
                            x15935))|])
    let (countReset : 'tags this -> ?label:string -> unit -> unit) =
      fun (x15943 : 'tags this) ->
        fun ?label:(x15940 : string option) ->
          fun () ->
            ignore
              (let x15945 = this_to_js Obj.magic x15943 in
               Ojs.call (Ojs.get_prop_ascii x15945 "countReset") "apply"
                 [|x15945;((let x15941 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15940 with
                             | Some x15942 ->
                                 ignore
                                   (Ojs.call x15941 "push"
                                      [|(Ojs.string_to_js x15942)|])
                             | None -> ());
                            x15941))|])
    let (debug : 'tags this -> data:any list -> unit) =
      fun (x15949 : 'tags this) ->
        fun ~data:(x15946 : any list) ->
          ignore
            (let x15951 = this_to_js Obj.magic x15949 in
             Ojs.call (Ojs.get_prop_ascii x15951 "debug") "apply"
               [|x15951;((let x15947 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x15948 : any) ->
                               ignore
                                 (Ojs.call x15947 "push"
                                    [|(any_to_js x15948)|])) x15946;
                          x15947))|])
    let (dir : 'tags this -> ?item:any -> ?options:any -> unit -> unit) =
      fun (x15957 : 'tags this) ->
        fun ?item:(x15952 : any option) ->
          fun ?options:(x15953 : any option) ->
            fun () ->
              ignore
                (let x15959 = this_to_js Obj.magic x15957 in
                 Ojs.call (Ojs.get_prop_ascii x15959 "dir") "apply"
                   [|x15959;((let x15954 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x15952 with
                               | Some x15956 ->
                                   ignore
                                     (Ojs.call x15954 "push"
                                        [|(any_to_js x15956)|])
                               | None -> ());
                              (match x15953 with
                               | Some x15955 ->
                                   ignore
                                     (Ojs.call x15954 "push"
                                        [|(any_to_js x15955)|])
                               | None -> ());
                              x15954))|])
    let (dirxml : 'tags this -> data:any list -> unit) =
      fun (x15963 : 'tags this) ->
        fun ~data:(x15960 : any list) ->
          ignore
            (let x15965 = this_to_js Obj.magic x15963 in
             Ojs.call (Ojs.get_prop_ascii x15965 "dirxml") "apply"
               [|x15965;((let x15961 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x15962 : any) ->
                               ignore
                                 (Ojs.call x15961 "push"
                                    [|(any_to_js x15962)|])) x15960;
                          x15961))|])
    let (error : 'tags this -> data:any list -> unit) =
      fun (x15969 : 'tags this) ->
        fun ~data:(x15966 : any list) ->
          ignore
            (let x15971 = this_to_js Obj.magic x15969 in
             Ojs.call (Ojs.get_prop_ascii x15971 "error") "apply"
               [|x15971;((let x15967 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x15968 : any) ->
                               ignore
                                 (Ojs.call x15967 "push"
                                    [|(any_to_js x15968)|])) x15966;
                          x15967))|])
    let (group : 'tags this -> data:any list -> unit) =
      fun (x15975 : 'tags this) ->
        fun ~data:(x15972 : any list) ->
          ignore
            (let x15977 = this_to_js Obj.magic x15975 in
             Ojs.call (Ojs.get_prop_ascii x15977 "group") "apply"
               [|x15977;((let x15973 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x15974 : any) ->
                               ignore
                                 (Ojs.call x15973 "push"
                                    [|(any_to_js x15974)|])) x15972;
                          x15973))|])
    let (groupCollapsed : 'tags this -> data:any list -> unit) =
      fun (x15981 : 'tags this) ->
        fun ~data:(x15978 : any list) ->
          ignore
            (let x15983 = this_to_js Obj.magic x15981 in
             Ojs.call (Ojs.get_prop_ascii x15983 "groupCollapsed") "apply"
               [|x15983;((let x15979 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x15980 : any) ->
                               ignore
                                 (Ojs.call x15979 "push"
                                    [|(any_to_js x15980)|])) x15978;
                          x15979))|])
    let (groupEnd : 'tags this -> unit) =
      fun (x15984 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x15984) "groupEnd" [||])
    let (info : 'tags this -> data:any list -> unit) =
      fun (x15989 : 'tags this) ->
        fun ~data:(x15986 : any list) ->
          ignore
            (let x15991 = this_to_js Obj.magic x15989 in
             Ojs.call (Ojs.get_prop_ascii x15991 "info") "apply"
               [|x15991;((let x15987 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x15988 : any) ->
                               ignore
                                 (Ojs.call x15987 "push"
                                    [|(any_to_js x15988)|])) x15986;
                          x15987))|])
    let (log : 'tags this -> data:any list -> unit) =
      fun (x15995 : 'tags this) ->
        fun ~data:(x15992 : any list) ->
          ignore
            (let x15997 = this_to_js Obj.magic x15995 in
             Ojs.call (Ojs.get_prop_ascii x15997 "log") "apply"
               [|x15997;((let x15993 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x15994 : any) ->
                               ignore
                                 (Ojs.call x15993 "push"
                                    [|(any_to_js x15994)|])) x15992;
                          x15993))|])
    let (table :
      'tags this ->
        ?tabularData:any -> ?properties:string list -> unit -> unit)
      =
      fun (x16004 : 'tags this) ->
        fun ?tabularData:(x15998 : any option) ->
          fun ?properties:(x15999 : string list option) ->
            fun () ->
              ignore
                (let x16006 = this_to_js Obj.magic x16004 in
                 Ojs.call (Ojs.get_prop_ascii x16006 "table") "apply"
                   [|x16006;((let x16000 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x15998 with
                               | Some x16003 ->
                                   ignore
                                     (Ojs.call x16000 "push"
                                        [|(any_to_js x16003)|])
                               | None -> ());
                              (match x15999 with
                               | Some x16001 ->
                                   ignore
                                     (Ojs.call x16000 "push"
                                        [|(Ojs.list_to_js Ojs.string_to_js
                                             x16001)|])
                               | None -> ());
                              x16000))|])
    let (time : 'tags this -> ?label:string -> unit -> unit) =
      fun (x16010 : 'tags this) ->
        fun ?label:(x16007 : string option) ->
          fun () ->
            ignore
              (let x16012 = this_to_js Obj.magic x16010 in
               Ojs.call (Ojs.get_prop_ascii x16012 "time") "apply"
                 [|x16012;((let x16008 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x16007 with
                             | Some x16009 ->
                                 ignore
                                   (Ojs.call x16008 "push"
                                      [|(Ojs.string_to_js x16009)|])
                             | None -> ());
                            x16008))|])
    let (timeEnd : 'tags this -> ?label:string -> unit -> unit) =
      fun (x16016 : 'tags this) ->
        fun ?label:(x16013 : string option) ->
          fun () ->
            ignore
              (let x16018 = this_to_js Obj.magic x16016 in
               Ojs.call (Ojs.get_prop_ascii x16018 "timeEnd") "apply"
                 [|x16018;((let x16014 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x16013 with
                             | Some x16015 ->
                                 ignore
                                   (Ojs.call x16014 "push"
                                      [|(Ojs.string_to_js x16015)|])
                             | None -> ());
                            x16014))|])
    let (timeLog :
      'tags this -> ?label:string -> data:any list -> unit -> unit) =
      fun (x16024 : 'tags this) ->
        fun ?label:(x16019 : string option) ->
          fun ~data:(x16020 : any list) ->
            fun () ->
              ignore
                (let x16026 = this_to_js Obj.magic x16024 in
                 Ojs.call (Ojs.get_prop_ascii x16026 "timeLog") "apply"
                   [|x16026;((let x16021 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x16019 with
                               | Some x16023 ->
                                   ignore
                                     (Ojs.call x16021 "push"
                                        [|(Ojs.string_to_js x16023)|])
                               | None -> ());
                              List.iter
                                (fun (x16022 : any) ->
                                   ignore
                                     (Ojs.call x16021 "push"
                                        [|(any_to_js x16022)|])) x16020;
                              x16021))|])
    let (timeStamp : 'tags this -> ?label:string -> unit -> unit) =
      fun (x16030 : 'tags this) ->
        fun ?label:(x16027 : string option) ->
          fun () ->
            ignore
              (let x16032 = this_to_js Obj.magic x16030 in
               Ojs.call (Ojs.get_prop_ascii x16032 "timeStamp") "apply"
                 [|x16032;((let x16028 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x16027 with
                             | Some x16029 ->
                                 ignore
                                   (Ojs.call x16028 "push"
                                      [|(Ojs.string_to_js x16029)|])
                             | None -> ());
                            x16028))|])
    let (trace : 'tags this -> data:any list -> unit) =
      fun (x16036 : 'tags this) ->
        fun ~data:(x16033 : any list) ->
          ignore
            (let x16038 = this_to_js Obj.magic x16036 in
             Ojs.call (Ojs.get_prop_ascii x16038 "trace") "apply"
               [|x16038;((let x16034 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x16035 : any) ->
                               ignore
                                 (Ojs.call x16034 "push"
                                    [|(any_to_js x16035)|])) x16033;
                          x16034))|])
    let (warn : 'tags this -> data:any list -> unit) =
      fun (x16042 : 'tags this) ->
        fun ~data:(x16039 : any list) ->
          ignore
            (let x16044 = this_to_js Obj.magic x16042 in
             Ojs.call (Ojs.get_prop_ascii x16044 "warn") "apply"
               [|x16044;((let x16040 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x16041 : any) ->
                               ignore
                                 (Ojs.call x16040 "push"
                                    [|(any_to_js x16041)|])) x16039;
                          x16040))|])
    let cast_from = Obj.magic
  end
module CanvasPattern =
  struct
    type t = [ `CanvasPattern ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x16046 : Ojs.t) -> t_of_js x16046
    and t_0_to_js : t_0 -> Ojs.t = fun (x16045 : t) -> t_to_js x16045
    type tags = [ `CanvasPattern ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CanvasPattern ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x16049 : Ojs.t) -> intf_of_js __tags_of_js x16049
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x16047 : __tags intf) -> intf_to_js __tags_to_js x16047
    let (setTransform :
      'tags this -> ?transform:DOMMatrix2DInit.t -> unit -> unit) =
      fun (x16054 : 'tags this) ->
        fun ?transform:(x16051 : DOMMatrix2DInit.t option) ->
          fun () ->
            ignore
              (let x16056 = this_to_js Obj.magic x16054 in
               Ojs.call (Ojs.get_prop_ascii x16056 "setTransform") "apply"
                 [|x16056;((let x16052 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x16051 with
                             | Some x16053 ->
                                 ignore
                                   (Ojs.call x16052 "push"
                                      [|(DOMMatrix2DInit.t_to_js x16053)|])
                             | None -> ());
                            x16052))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CanvasPattern")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CanvasPattern") [||])
  end
module CanvasGradient =
  struct
    type t = [ `CanvasGradient ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x16058 : Ojs.t) -> t_of_js x16058
    and t_0_to_js : t_0 -> Ojs.t = fun (x16057 : t) -> t_to_js x16057
    type tags = [ `CanvasGradient ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CanvasGradient ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x16061 : Ojs.t) -> intf_of_js __tags_of_js x16061
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x16059 : __tags intf) -> intf_to_js __tags_to_js x16059
    let (addColorStop : 'tags this -> offset:float -> color:string -> unit) =
      fun (x16065 : 'tags this) ->
        fun ~offset:(x16063 : float) ->
          fun ~color:(x16064 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x16065) "addColorStop"
                 [|(Ojs.float_to_js x16063);(Ojs.string_to_js x16064)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "CanvasGradient") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CanvasGradient") [||])
  end
module ByteLengthQueuingStrategy =
  struct
    type t =
      [ `ByteLengthQueuingStrategy 
      | `QueuingStrategy of ArrayBufferView.t_0 ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x16068 : Ojs.t) -> t_of_js x16068
    and t_0_to_js : t_0 -> Ojs.t = fun (x16067 : t) -> t_to_js x16067
    type tags =
      [ `ByteLengthQueuingStrategy 
      | `QueuingStrategy of ArrayBufferView.t_0 ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ByteLengthQueuingStrategy ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x16071 : Ojs.t) -> intf_of_js __tags_of_js x16071
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x16069 : __tags intf) -> intf_to_js __tags_to_js x16069
    let (get_highWaterMark : 'tags this -> float) =
      fun (x16073 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x16073) "highWaterMark")
    let (get_size : 'tags this -> ArrayBufferView.t_0 QueuingStrategySize.t)
      =
      fun (x16075 : 'tags this) ->
        QueuingStrategySize.t_of_js ArrayBufferView.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x16075) "size")
    let (create :
      highWaterMark:float ->
        size:ArrayBufferView.t_0 QueuingStrategySize.t -> unit -> t)
      =
      fun ~highWaterMark:(x16078 : float) ->
        fun ~size:(x16079 : ArrayBufferView.t_0 QueuingStrategySize.t) ->
          fun () ->
            let x16080 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x16080 "highWaterMark"
              (Ojs.float_to_js x16078);
            Ojs.set_prop_ascii x16080 "size"
              (QueuingStrategySize.t_to_js ArrayBufferView.t_0_to_js x16079);
            t_of_js x16080
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ByteLengthQueuingStrategy")
             "prototype")
    let (create' : QueuingStrategyInit.t -> t) =
      fun (x16082 : QueuingStrategyInit.t) ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ByteLengthQueuingStrategy")
             [|(QueuingStrategyInit.t_to_js x16082)|])
  end
module BroadcastChannelEventMap =
  struct
    type t = [ `BroadcastChannelEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x16084 : Ojs.t) -> t_of_js x16084
    and t_0_to_js : t_0 -> Ojs.t = fun (x16083 : t) -> t_to_js x16083
    type tags = [ `BroadcastChannelEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `BroadcastChannelEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x16087 : Ojs.t) -> intf_of_js __tags_of_js x16087
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x16085 : __tags intf) -> intf_to_js __tags_to_js x16085
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x16089 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x16089) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x16091 : 'tags this) ->
        fun (x16092 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x16091) "message"
            (MessageEvent.t_0_to_js x16092)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x16094 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x16094) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x16096 : 'tags this) ->
        fun (x16097 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x16096) "messageerror"
            (MessageEvent.t_0_to_js x16097)
    let (create :
      message:MessageEvent.t_0 -> messageerror:MessageEvent.t_0 -> unit -> t)
      =
      fun ~message:(x16099 : MessageEvent.t_0) ->
        fun ~messageerror:(x16100 : MessageEvent.t_0) ->
          fun () ->
            let x16101 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x16101 "message"
              (MessageEvent.t_0_to_js x16099);
            Ojs.set_prop_ascii x16101 "messageerror"
              (MessageEvent.t_0_to_js x16100);
            t_of_js x16101
    let cast_from = Obj.magic
  end
module BroadcastChannel =
  struct
    type t = [ `BroadcastChannel  | `EventTarget ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x16103 : Ojs.t) -> t_of_js x16103
    and t_0_to_js : t_0 -> Ojs.t = fun (x16102 : t) -> t_to_js x16102
    type tags = [ `BroadcastChannel  | `EventTarget ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `BroadcastChannel ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x16106 : Ojs.t) -> intf_of_js __tags_of_js x16106
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x16104 : __tags intf) -> intf_to_js __tags_to_js x16104
    let (get_name : 'tags this -> string) =
      fun (x16108 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x16108) "name")
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x16110 : 'tags this) ->
        Ojs.option_of_js
          (fun (x16112 : Ojs.t) ->
             fun ~this:(x16113 : t) ->
               fun ~ev:(x16114 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x16112
                      [|(t_to_js x16113);(MessageEvent.t_0_to_js x16114)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x16110) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x16115 : 'tags this) ->
        fun (x16116 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x16115) "onmessage"
            (Ojs.option_to_js
               (fun (x16117 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x16118 : Ojs.t) ->
                       fun (x16119 : Ojs.t) ->
                         any_to_js
                           (x16117 ~this:(t_of_js x16118)
                              ~ev:(MessageEvent.t_0_of_js x16119)))) x16116)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x16121 : 'tags this) ->
        Ojs.option_of_js
          (fun (x16123 : Ojs.t) ->
             fun ~this:(x16124 : t) ->
               fun ~ev:(x16125 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x16123
                      [|(t_to_js x16124);(MessageEvent.t_0_to_js x16125)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x16121) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x16126 : 'tags this) ->
        fun (x16127 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x16126) "onmessageerror"
            (Ojs.option_to_js
               (fun (x16128 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x16129 : Ojs.t) ->
                       fun (x16130 : Ojs.t) ->
                         any_to_js
                           (x16128 ~this:(t_of_js x16129)
                              ~ev:(MessageEvent.t_0_of_js x16130)))) x16127)
    let (close : 'tags this -> unit) =
      fun (x16132 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x16132) "close" [||])
    let (postMessage : 'tags this -> message:any -> unit) =
      fun (x16135 : 'tags this) ->
        fun ~message:(x16134 : any) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x16135) "postMessage"
               [|(any_to_js x16134)|])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x16146 : 'tags this) ->
        fun ~type_:(x16137 : 'K) ->
          fun ~listener:(x16138 : this:t -> ev:any -> any) ->
            fun
              ?options:(x16139 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x16148 = this_to_js Obj.magic x16146 in
                   Ojs.call (Ojs.get_prop_ascii x16148 "addEventListener")
                     "apply"
                     [|x16148;((let x16140 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x16140 "push"
                                     [|(Obj.magic x16137)|]);
                                ignore
                                  (Ojs.call x16140 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x16144 : Ojs.t) ->
                                             fun (x16145 : Ojs.t) ->
                                               any_to_js
                                                 (x16138
                                                    ~this:(t_of_js x16144)
                                                    ~ev:(any_of_js x16145))))|]);
                                (match x16139 with
                                 | Some x16141 ->
                                     ignore
                                       (Ojs.call x16140 "push"
                                          [|((match x16141 with
                                              | `U1 x16142 ->
                                                  Ojs.bool_to_js x16142
                                              | `U2 x16143 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x16143))|])
                                 | None -> ());
                                x16140))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x16156 : 'tags this) ->
        fun ~type_:(x16149 : string) ->
          fun ~listener:(x16150 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x16151 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x16158 = this_to_js Obj.magic x16156 in
                   Ojs.call (Ojs.get_prop_ascii x16158 "addEventListener")
                     "apply"
                     [|x16158;((let x16152 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x16152 "push"
                                     [|(Ojs.string_to_js x16149)|]);
                                ignore
                                  (Ojs.call x16152 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x16150)|]);
                                (match x16151 with
                                 | Some x16153 ->
                                     ignore
                                       (Ojs.call x16152 "push"
                                          [|((match x16153 with
                                              | `U1 x16154 ->
                                                  Ojs.bool_to_js x16154
                                              | `U2 x16155 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x16155))|])
                                 | None -> ());
                                x16152))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x16168 : 'tags this) ->
        fun ~type_:(x16159 : 'K) ->
          fun ~listener:(x16160 : this:t -> ev:any -> any) ->
            fun
              ?options:(x16161 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x16170 = this_to_js Obj.magic x16168 in
                   Ojs.call (Ojs.get_prop_ascii x16170 "removeEventListener")
                     "apply"
                     [|x16170;((let x16162 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x16162 "push"
                                     [|(Obj.magic x16159)|]);
                                ignore
                                  (Ojs.call x16162 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x16166 : Ojs.t) ->
                                             fun (x16167 : Ojs.t) ->
                                               any_to_js
                                                 (x16160
                                                    ~this:(t_of_js x16166)
                                                    ~ev:(any_of_js x16167))))|]);
                                (match x16161 with
                                 | Some x16163 ->
                                     ignore
                                       (Ojs.call x16162 "push"
                                          [|((match x16163 with
                                              | `U1 x16164 ->
                                                  Ojs.bool_to_js x16164
                                              | `U2 x16165 ->
                                                  EventListenerOptions.t_to_js
                                                    x16165))|])
                                 | None -> ());
                                x16162))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x16178 : 'tags this) ->
        fun ~type_:(x16171 : string) ->
          fun ~listener:(x16172 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x16173 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x16180 = this_to_js Obj.magic x16178 in
                   Ojs.call (Ojs.get_prop_ascii x16180 "removeEventListener")
                     "apply"
                     [|x16180;((let x16174 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x16174 "push"
                                     [|(Ojs.string_to_js x16171)|]);
                                ignore
                                  (Ojs.call x16174 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x16172)|]);
                                (match x16173 with
                                 | Some x16175 ->
                                     ignore
                                       (Ojs.call x16174 "push"
                                          [|((match x16175 with
                                              | `U1 x16176 ->
                                                  Ojs.bool_to_js x16176
                                              | `U2 x16177 ->
                                                  EventListenerOptions.t_to_js
                                                    x16177))|])
                                 | None -> ());
                                x16174))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "BroadcastChannel") "prototype")
    let (create : string -> t) =
      fun (x16181 : string) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "BroadcastChannel")
             [|(Ojs.string_to_js x16181)|])
  end
module AbortSignalEventMap =
  struct
    type t = [ `AbortSignalEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x16183 : Ojs.t) -> t_of_js x16183
    and t_0_to_js : t_0 -> Ojs.t = fun (x16182 : t) -> t_to_js x16182
    type tags = [ `AbortSignalEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AbortSignalEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x16186 : Ojs.t) -> intf_of_js __tags_of_js x16186
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x16184 : __tags intf) -> intf_to_js __tags_to_js x16184
    let (get_abort : 'tags this -> Event.t) =
      fun (x16188 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x16188) "abort")
    let (set_abort : 'tags this -> Event.t -> unit) =
      fun (x16190 : 'tags this) ->
        fun (x16191 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x16190) "abort"
            (Event.t_to_js x16191)
    let (create : abort:Event.t -> unit -> t) =
      fun ~abort:(x16193 : Event.t) ->
        fun () ->
          let x16194 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x16194 "abort" (Event.t_to_js x16193);
          t_of_js x16194
    let cast_from = Obj.magic
  end
module AbortController =
  struct
    type t = [ `AbortController ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x16196 : Ojs.t) -> t_of_js x16196
    and t_0_to_js : t_0 -> Ojs.t = fun (x16195 : t) -> t_to_js x16195
    type tags = [ `AbortController ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AbortController ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x16199 : Ojs.t) -> intf_of_js __tags_of_js x16199
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x16197 : __tags intf) -> intf_to_js __tags_to_js x16197
    let (get_signal : 'tags this -> AbortSignal.t) =
      fun (x16201 : 'tags this) ->
        AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x16201) "signal")
    let (abort : 'tags this -> ?reason:any -> unit -> unit) =
      fun (x16206 : 'tags this) ->
        fun ?reason:(x16203 : any option) ->
          fun () ->
            ignore
              (let x16208 = this_to_js Obj.magic x16206 in
               Ojs.call (Ojs.get_prop_ascii x16208 "abort") "apply"
                 [|x16208;((let x16204 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x16203 with
                             | Some x16205 ->
                                 ignore
                                   (Ojs.call x16204 "push"
                                      [|(any_to_js x16205)|])
                             | None -> ());
                            x16204))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "AbortController") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "AbortController") [||])
  end
module MessageEvent_Make(T:Ojs.T) =
  struct
    type 'T parent = 'T MessageEvent.t
    let rec parent_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T parent =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x16211 : Ojs.t) -> MessageEvent.t_of_js __T_of_js x16211
    and parent_to_js : 'T . ('T -> Ojs.t) -> 'T parent -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x16209 : __T MessageEvent.t) ->
            MessageEvent.t_to_js __T_to_js x16209
    type t = T.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16215 : Ojs.t) -> parent_of_js T.t_of_js x16215
    and t_to_js : t -> Ojs.t =
      fun (x16213 : T.t parent) -> parent_to_js T.t_to_js x16213
    let (get_data : t -> T.t) =
      fun (x16217 : t) ->
        T.t_of_js (Ojs.get_prop_ascii (t_to_js x16217) "data")
    let (get_lastEventId : t -> string) =
      fun (x16218 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x16218) "lastEventId")
    let (get_origin : t -> string) =
      fun (x16219 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x16219) "origin")
    let (get_ports : t -> MessagePort.t list) =
      fun (x16220 : t) ->
        Ojs.list_of_js MessagePort.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16220) "ports")
    let (get_source : t -> MessageEventSource.t option) =
      fun (x16222 : t) ->
        Ojs.option_of_js MessageEventSource.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16222) "source")
    let (initMessageEvent :
      t ->
        type_:string ->
          ?bubbles:bool ->
            ?cancelable:bool ->
              ?data:any ->
                ?origin:string ->
                  ?lastEventId:string ->
                    ?source:MessageEventSource.t option ->
                      ?ports:MessagePort.t list -> unit -> unit)
      =
      fun (x16242 : t) ->
        fun ~type_:(x16224 : string) ->
          fun ?bubbles:(x16225 : bool option) ->
            fun ?cancelable:(x16226 : bool option) ->
              fun ?data:(x16227 : any option) ->
                fun ?origin:(x16228 : string option) ->
                  fun ?lastEventId:(x16229 : string option) ->
                    fun ?source:(x16230 : MessageEventSource.t option option)
                      ->
                      fun ?ports:(x16231 : MessagePort.t list option) ->
                        fun () ->
                          ignore
                            (let x16243 = t_to_js x16242 in
                             Ojs.call
                               (Ojs.get_prop_ascii x16243 "initMessageEvent")
                               "apply"
                               [|x16243;((let x16232 =
                                            Ojs.new_obj
                                              (Ojs.get_prop_ascii Ojs.global
                                                 "Array") [||] in
                                          ignore
                                            (Ojs.call x16232 "push"
                                               [|(Ojs.string_to_js x16224)|]);
                                          (match x16225 with
                                           | Some x16241 ->
                                               ignore
                                                 (Ojs.call x16232 "push"
                                                    [|(Ojs.bool_to_js x16241)|])
                                           | None -> ());
                                          (match x16226 with
                                           | Some x16240 ->
                                               ignore
                                                 (Ojs.call x16232 "push"
                                                    [|(Ojs.bool_to_js x16240)|])
                                           | None -> ());
                                          (match x16227 with
                                           | Some x16239 ->
                                               ignore
                                                 (Ojs.call x16232 "push"
                                                    [|(any_to_js x16239)|])
                                           | None -> ());
                                          (match x16228 with
                                           | Some x16238 ->
                                               ignore
                                                 (Ojs.call x16232 "push"
                                                    [|(Ojs.string_to_js
                                                         x16238)|])
                                           | None -> ());
                                          (match x16229 with
                                           | Some x16237 ->
                                               ignore
                                                 (Ojs.call x16232 "push"
                                                    [|(Ojs.string_to_js
                                                         x16237)|])
                                           | None -> ());
                                          (match x16230 with
                                           | Some x16235 ->
                                               ignore
                                                 (Ojs.call x16232 "push"
                                                    [|(Ojs.option_to_js
                                                         MessageEventSource.t_to_js
                                                         x16235)|])
                                           | None -> ());
                                          (match x16231 with
                                           | Some x16233 ->
                                               ignore
                                                 (Ojs.call x16232 "push"
                                                    [|(Ojs.list_to_js
                                                         MessagePort.t_to_js
                                                         x16233)|])
                                           | None -> ());
                                          x16232))|])
    let (initMessageEvent :
      t ->
        type_:string ->
          ?bubbles:bool ->
            ?cancelable:bool ->
              ?data:any ->
                ?origin:string ->
                  ?lastEventId:string ->
                    ?source:MessageEventSource.t option ->
                      ?ports:MessagePort.t Iterable.t_1 -> unit -> unit)
      =
      fun (x16262 : t) ->
        fun ~type_:(x16244 : string) ->
          fun ?bubbles:(x16245 : bool option) ->
            fun ?cancelable:(x16246 : bool option) ->
              fun ?data:(x16247 : any option) ->
                fun ?origin:(x16248 : string option) ->
                  fun ?lastEventId:(x16249 : string option) ->
                    fun ?source:(x16250 : MessageEventSource.t option option)
                      ->
                      fun ?ports:(x16251 : MessagePort.t Iterable.t_1 option)
                        ->
                        fun () ->
                          ignore
                            (let x16263 = t_to_js x16262 in
                             Ojs.call
                               (Ojs.get_prop_ascii x16263 "initMessageEvent")
                               "apply"
                               [|x16263;((let x16252 =
                                            Ojs.new_obj
                                              (Ojs.get_prop_ascii Ojs.global
                                                 "Array") [||] in
                                          ignore
                                            (Ojs.call x16252 "push"
                                               [|(Ojs.string_to_js x16244)|]);
                                          (match x16245 with
                                           | Some x16261 ->
                                               ignore
                                                 (Ojs.call x16252 "push"
                                                    [|(Ojs.bool_to_js x16261)|])
                                           | None -> ());
                                          (match x16246 with
                                           | Some x16260 ->
                                               ignore
                                                 (Ojs.call x16252 "push"
                                                    [|(Ojs.bool_to_js x16260)|])
                                           | None -> ());
                                          (match x16247 with
                                           | Some x16259 ->
                                               ignore
                                                 (Ojs.call x16252 "push"
                                                    [|(any_to_js x16259)|])
                                           | None -> ());
                                          (match x16248 with
                                           | Some x16258 ->
                                               ignore
                                                 (Ojs.call x16252 "push"
                                                    [|(Ojs.string_to_js
                                                         x16258)|])
                                           | None -> ());
                                          (match x16249 with
                                           | Some x16257 ->
                                               ignore
                                                 (Ojs.call x16252 "push"
                                                    [|(Ojs.string_to_js
                                                         x16257)|])
                                           | None -> ());
                                          (match x16250 with
                                           | Some x16255 ->
                                               ignore
                                                 (Ojs.call x16252 "push"
                                                    [|(Ojs.option_to_js
                                                         MessageEventSource.t_to_js
                                                         x16255)|])
                                           | None -> ());
                                          (match x16251 with
                                           | Some x16253 ->
                                               ignore
                                                 (Ojs.call x16252 "push"
                                                    [|(Iterable.t_1_to_js
                                                         MessagePort.t_to_js
                                                         x16253)|])
                                           | None -> ());
                                          x16252))|])
  end
module CustomEventInit_Make(T:Ojs.T) =
  struct
    type 'T parent = 'T CustomEventInit.t
    let rec parent_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T parent =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x16266 : Ojs.t) -> CustomEventInit.t_of_js __T_of_js x16266
    and parent_to_js : 'T . ('T -> Ojs.t) -> 'T parent -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x16264 : __T CustomEventInit.t) ->
            CustomEventInit.t_to_js __T_to_js x16264
    type t = T.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16270 : Ojs.t) -> parent_of_js T.t_of_js x16270
    and t_to_js : t -> Ojs.t =
      fun (x16268 : T.t parent) -> parent_to_js T.t_to_js x16268
    let (get_detail : t -> T.t option) =
      fun (x16272 : t) ->
        Ojs.option_of_js T.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16272) "detail")
    let (set_detail : t -> T.t -> unit) =
      fun (x16274 : t) ->
        fun (x16275 : T.t) ->
          Ojs.set_prop_ascii (t_to_js x16274) "detail" (T.t_to_js x16275)
  end
module MessageEventInit_Make(T:Ojs.T) =
  struct
    type 'T parent = 'T MessageEventInit.t
    let rec parent_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T parent =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x16278 : Ojs.t) -> MessageEventInit.t_of_js __T_of_js x16278
    and parent_to_js : 'T . ('T -> Ojs.t) -> 'T parent -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x16276 : __T MessageEventInit.t) ->
            MessageEventInit.t_to_js __T_to_js x16276
    type t = T.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16282 : Ojs.t) -> parent_of_js T.t_of_js x16282
    and t_to_js : t -> Ojs.t =
      fun (x16280 : T.t parent) -> parent_to_js T.t_to_js x16280
    let (get_data : t -> T.t option) =
      fun (x16284 : t) ->
        Ojs.option_of_js T.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16284) "data")
    let (set_data : t -> T.t -> unit) =
      fun (x16286 : t) ->
        fun (x16287 : T.t) ->
          Ojs.set_prop_ascii (t_to_js x16286) "data" (T.t_to_js x16287)
    let (get_lastEventId : t -> string option) =
      fun (x16288 : t) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js x16288) "lastEventId")
    let (set_lastEventId : t -> string -> unit) =
      fun (x16290 : t) ->
        fun (x16291 : string) ->
          Ojs.set_prop_ascii (t_to_js x16290) "lastEventId"
            (Ojs.string_to_js x16291)
    let (get_origin : t -> string option) =
      fun (x16292 : t) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js x16292) "origin")
    let (set_origin : t -> string -> unit) =
      fun (x16294 : t) ->
        fun (x16295 : string) ->
          Ojs.set_prop_ascii (t_to_js x16294) "origin"
            (Ojs.string_to_js x16295)
    let (get_ports : t -> MessagePort.t list option) =
      fun (x16296 : t) ->
        Ojs.option_of_js
          (fun (x16297 : Ojs.t) -> Ojs.list_of_js MessagePort.t_of_js x16297)
          (Ojs.get_prop_ascii (t_to_js x16296) "ports")
    let (set_ports : t -> MessagePort.t list -> unit) =
      fun (x16299 : t) ->
        fun (x16300 : MessagePort.t list) ->
          Ojs.set_prop_ascii (t_to_js x16299) "ports"
            (Ojs.list_to_js MessagePort.t_to_js x16300)
    let (get_source : t -> MessageEventSource.t option option) =
      fun (x16302 : t) ->
        Ojs.option_of_js
          (fun (x16303 : Ojs.t) ->
             Ojs.option_of_js MessageEventSource.t_of_js x16303)
          (Ojs.get_prop_ascii (t_to_js x16302) "source")
    let (set_source : t -> MessageEventSource.t option -> unit) =
      fun (x16305 : t) ->
        fun (x16306 : MessageEventSource.t option) ->
          Ojs.set_prop_ascii (t_to_js x16305) "source"
            (Ojs.option_to_js MessageEventSource.t_to_js x16306)
  end
module QueuingStrategy_Make(T:Ojs.T) =
  struct
    type 'T parent = 'T QueuingStrategy.t
    let rec parent_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T parent =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x16310 : Ojs.t) -> QueuingStrategy.t_of_js __T_of_js x16310
    and parent_to_js : 'T . ('T -> Ojs.t) -> 'T parent -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x16308 : __T QueuingStrategy.t) ->
            QueuingStrategy.t_to_js __T_to_js x16308
    type t = T.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16314 : Ojs.t) -> parent_of_js T.t_of_js x16314
    and t_to_js : t -> Ojs.t =
      fun (x16312 : T.t parent) -> parent_to_js T.t_to_js x16312
    let (get_highWaterMark : t -> float option) =
      fun (x16316 : t) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x16316) "highWaterMark")
    let (set_highWaterMark : t -> float -> unit) =
      fun (x16318 : t) ->
        fun (x16319 : float) ->
          Ojs.set_prop_ascii (t_to_js x16318) "highWaterMark"
            (Ojs.float_to_js x16319)
    let (get_size : t -> T.t QueuingStrategySize.t option) =
      fun (x16320 : t) ->
        Ojs.option_of_js
          (fun (x16321 : Ojs.t) ->
             QueuingStrategySize.t_of_js T.t_of_js x16321)
          (Ojs.get_prop_ascii (t_to_js x16320) "size")
    let (set_size : t -> T.t QueuingStrategySize.t -> unit) =
      fun (x16323 : t) ->
        fun (x16324 : T.t QueuingStrategySize.t) ->
          Ojs.set_prop_ascii (t_to_js x16323) "size"
            (QueuingStrategySize.t_to_js T.t_to_js x16324)
  end
module ReadableStreamDefaultReadValueResult_Make(T:Ojs.T) =
  struct
    type 'T parent = 'T ReadableStreamDefaultReadValueResult.t
    let rec parent_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T parent =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x16328 : Ojs.t) ->
            ReadableStreamDefaultReadValueResult.t_of_js __T_of_js x16328
    and parent_to_js : 'T . ('T -> Ojs.t) -> 'T parent -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x16326 : __T ReadableStreamDefaultReadValueResult.t) ->
            ReadableStreamDefaultReadValueResult.t_to_js __T_to_js x16326
    type t = T.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16332 : Ojs.t) -> parent_of_js T.t_of_js x16332
    and t_to_js : t -> Ojs.t =
      fun (x16330 : T.t parent) -> parent_to_js T.t_to_js x16330
    let (get_done : t -> [ `L_b_false ]) =
      fun (x16334 : t) ->
        let x16335 = Ojs.get_prop_ascii (t_to_js x16334) "done" in
        match Ojs.bool_of_js x16335 with
        | false -> `L_b_false
        | _ -> assert false
    let (set_done : t -> [ `L_b_false ] -> unit) =
      fun (x16336 : t) ->
        fun (x16337 : [ `L_b_false ]) ->
          Ojs.set_prop_ascii (t_to_js x16336) "done"
            (match x16337 with | `L_b_false -> Ojs.bool_to_js false)
    let (get_value : t -> T.t) =
      fun (x16338 : t) ->
        T.t_of_js (Ojs.get_prop_ascii (t_to_js x16338) "value")
    let (set_value : t -> T.t -> unit) =
      fun (x16339 : t) ->
        fun (x16340 : T.t) ->
          Ojs.set_prop_ascii (t_to_js x16339) "value" (T.t_to_js x16340)
  end
module ReadableWritablePair_Make(R:Ojs.T)(W:Ojs.T) =
  struct
    type ('R, 'W) parent = ('R, 'W) ReadableWritablePair.t
    let rec parent_of_js :
      'R 'W . (Ojs.t -> 'R) -> (Ojs.t -> 'W) -> Ojs.t -> ('R, 'W) parent =
      fun (type __R) ->
        fun (type __W) ->
          fun (__R_of_js : Ojs.t -> __R) ->
            fun (__W_of_js : Ojs.t -> __W) ->
              fun (x16344 : Ojs.t) ->
                ReadableWritablePair.t_of_js __R_of_js __W_of_js x16344
    and parent_to_js :
      'R 'W . ('R -> Ojs.t) -> ('W -> Ojs.t) -> ('R, 'W) parent -> Ojs.t =
      fun (type __R) ->
        fun (type __W) ->
          fun (__R_to_js : __R -> Ojs.t) ->
            fun (__W_to_js : __W -> Ojs.t) ->
              fun (x16341 : (__R, __W) ReadableWritablePair.t) ->
                ReadableWritablePair.t_to_js __R_to_js __W_to_js x16341
    type t = (R.t, W.t) parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16350 : Ojs.t) -> parent_of_js R.t_of_js W.t_of_js x16350
    and t_to_js : t -> Ojs.t =
      fun (x16347 : (R.t, W.t) parent) ->
        parent_to_js R.t_to_js W.t_to_js x16347
    let (get_readable : t -> R.t ReadableStream.t) =
      fun (x16353 : t) ->
        ReadableStream.t_of_js R.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16353) "readable")
    let (set_readable : t -> R.t ReadableStream.t -> unit) =
      fun (x16355 : t) ->
        fun (x16356 : R.t ReadableStream.t) ->
          Ojs.set_prop_ascii (t_to_js x16355) "readable"
            (ReadableStream.t_to_js R.t_to_js x16356)
    let (get_writable : t -> W.t WritableStream.t) =
      fun (x16358 : t) ->
        WritableStream.t_of_js W.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16358) "writable")
    let (set_writable : t -> W.t WritableStream.t -> unit) =
      fun (x16360 : t) ->
        fun (x16361 : W.t WritableStream.t) ->
          Ojs.set_prop_ascii (t_to_js x16360) "writable"
            (WritableStream.t_to_js W.t_to_js x16361)
  end
module Transformer_Make(I:Ojs.T)(O:Ojs.T) =
  struct
    type ('I, 'O) parent = ('I, 'O) Transformer.t
    let rec parent_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) parent =
      fun (type __I) ->
        fun (type __O) ->
          fun (__I_of_js : Ojs.t -> __I) ->
            fun (__O_of_js : Ojs.t -> __O) ->
              fun (x16366 : Ojs.t) ->
                Transformer.t_of_js __I_of_js __O_of_js x16366
    and parent_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) parent -> Ojs.t =
      fun (type __I) ->
        fun (type __O) ->
          fun (__I_to_js : __I -> Ojs.t) ->
            fun (__O_to_js : __O -> Ojs.t) ->
              fun (x16363 : (__I, __O) Transformer.t) ->
                Transformer.t_to_js __I_to_js __O_to_js x16363
    type t = (I.t, O.t) parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16372 : Ojs.t) -> parent_of_js I.t_of_js O.t_of_js x16372
    and t_to_js : t -> Ojs.t =
      fun (x16369 : (I.t, O.t) parent) ->
        parent_to_js I.t_to_js O.t_to_js x16369
    let (get_flush : t -> O.t TransformerFlushCallback.t option) =
      fun (x16375 : t) ->
        Ojs.option_of_js
          (fun (x16376 : Ojs.t) ->
             TransformerFlushCallback.t_of_js O.t_of_js x16376)
          (Ojs.get_prop_ascii (t_to_js x16375) "flush")
    let (set_flush : t -> O.t TransformerFlushCallback.t -> unit) =
      fun (x16378 : t) ->
        fun (x16379 : O.t TransformerFlushCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x16378) "flush"
            (TransformerFlushCallback.t_to_js O.t_to_js x16379)
    let (get_readableType : t -> undefined) =
      fun (x16381 : t) ->
        undefined_of_js (Ojs.get_prop_ascii (t_to_js x16381) "readableType")
    let (set_readableType : t -> undefined -> unit) =
      fun (x16382 : t) ->
        fun (x16383 : undefined) ->
          Ojs.set_prop_ascii (t_to_js x16382) "readableType"
            (undefined_to_js x16383)
    let (get_start : t -> O.t TransformerStartCallback.t option) =
      fun (x16384 : t) ->
        Ojs.option_of_js
          (fun (x16385 : Ojs.t) ->
             TransformerStartCallback.t_of_js O.t_of_js x16385)
          (Ojs.get_prop_ascii (t_to_js x16384) "start")
    let (set_start : t -> O.t TransformerStartCallback.t -> unit) =
      fun (x16387 : t) ->
        fun (x16388 : O.t TransformerStartCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x16387) "start"
            (TransformerStartCallback.t_to_js O.t_to_js x16388)
    let (get_transform :
      t -> (I.t, O.t) TransformerTransformCallback.t option) =
      fun (x16390 : t) ->
        Ojs.option_of_js
          (fun (x16391 : Ojs.t) ->
             TransformerTransformCallback.t_of_js I.t_of_js O.t_of_js x16391)
          (Ojs.get_prop_ascii (t_to_js x16390) "transform")
    let (set_transform :
      t -> (I.t, O.t) TransformerTransformCallback.t -> unit) =
      fun (x16394 : t) ->
        fun (x16395 : (I.t, O.t) TransformerTransformCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x16394) "transform"
            (TransformerTransformCallback.t_to_js I.t_to_js O.t_to_js x16395)
    let (get_writableType : t -> undefined) =
      fun (x16398 : t) ->
        undefined_of_js (Ojs.get_prop_ascii (t_to_js x16398) "writableType")
    let (set_writableType : t -> undefined -> unit) =
      fun (x16399 : t) ->
        fun (x16400 : undefined) ->
          Ojs.set_prop_ascii (t_to_js x16399) "writableType"
            (undefined_to_js x16400)
  end
module UnderlyingSink_Make(W:Ojs.T) =
  struct
    type 'W parent = 'W UnderlyingSink.t
    let rec parent_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W parent =
      fun (type __W) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x16403 : Ojs.t) -> UnderlyingSink.t_of_js __W_of_js x16403
    and parent_to_js : 'W . ('W -> Ojs.t) -> 'W parent -> Ojs.t =
      fun (type __W) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x16401 : __W UnderlyingSink.t) ->
            UnderlyingSink.t_to_js __W_to_js x16401
    type t = W.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16407 : Ojs.t) -> parent_of_js W.t_of_js x16407
    and t_to_js : t -> Ojs.t =
      fun (x16405 : W.t parent) -> parent_to_js W.t_to_js x16405
    let (get_abort : t -> UnderlyingSinkAbortCallback.t option) =
      fun (x16409 : t) ->
        Ojs.option_of_js UnderlyingSinkAbortCallback.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16409) "abort")
    let (set_abort : t -> UnderlyingSinkAbortCallback.t -> unit) =
      fun (x16411 : t) ->
        fun (x16412 : UnderlyingSinkAbortCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x16411) "abort"
            (UnderlyingSinkAbortCallback.t_to_js x16412)
    let (get_close : t -> UnderlyingSinkCloseCallback.t option) =
      fun (x16413 : t) ->
        Ojs.option_of_js UnderlyingSinkCloseCallback.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16413) "close")
    let (set_close : t -> UnderlyingSinkCloseCallback.t -> unit) =
      fun (x16415 : t) ->
        fun (x16416 : UnderlyingSinkCloseCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x16415) "close"
            (UnderlyingSinkCloseCallback.t_to_js x16416)
    let (get_start : t -> UnderlyingSinkStartCallback.t option) =
      fun (x16417 : t) ->
        Ojs.option_of_js UnderlyingSinkStartCallback.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16417) "start")
    let (set_start : t -> UnderlyingSinkStartCallback.t -> unit) =
      fun (x16419 : t) ->
        fun (x16420 : UnderlyingSinkStartCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x16419) "start"
            (UnderlyingSinkStartCallback.t_to_js x16420)
    let (get_type : t -> undefined) =
      fun (x16421 : t) ->
        undefined_of_js (Ojs.get_prop_ascii (t_to_js x16421) "type")
    let (set_type : t -> undefined -> unit) =
      fun (x16422 : t) ->
        fun (x16423 : undefined) ->
          Ojs.set_prop_ascii (t_to_js x16422) "type" (undefined_to_js x16423)
    let (get_write : t -> W.t UnderlyingSinkWriteCallback.t option) =
      fun (x16424 : t) ->
        Ojs.option_of_js
          (fun (x16425 : Ojs.t) ->
             UnderlyingSinkWriteCallback.t_of_js W.t_of_js x16425)
          (Ojs.get_prop_ascii (t_to_js x16424) "write")
    let (set_write : t -> W.t UnderlyingSinkWriteCallback.t -> unit) =
      fun (x16427 : t) ->
        fun (x16428 : W.t UnderlyingSinkWriteCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x16427) "write"
            (UnderlyingSinkWriteCallback.t_to_js W.t_to_js x16428)
  end
module UnderlyingSource_Make(R:Ojs.T) =
  struct
    type 'R parent = 'R UnderlyingSource.t
    let rec parent_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R parent =
      fun (type __R) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x16432 : Ojs.t) -> UnderlyingSource.t_of_js __R_of_js x16432
    and parent_to_js : 'R . ('R -> Ojs.t) -> 'R parent -> Ojs.t =
      fun (type __R) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x16430 : __R UnderlyingSource.t) ->
            UnderlyingSource.t_to_js __R_to_js x16430
    type t = R.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16436 : Ojs.t) -> parent_of_js R.t_of_js x16436
    and t_to_js : t -> Ojs.t =
      fun (x16434 : R.t parent) -> parent_to_js R.t_to_js x16434
    let (get_cancel : t -> UnderlyingSourceCancelCallback.t option) =
      fun (x16438 : t) ->
        Ojs.option_of_js UnderlyingSourceCancelCallback.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16438) "cancel")
    let (set_cancel : t -> UnderlyingSourceCancelCallback.t -> unit) =
      fun (x16440 : t) ->
        fun (x16441 : UnderlyingSourceCancelCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x16440) "cancel"
            (UnderlyingSourceCancelCallback.t_to_js x16441)
    let (get_pull : t -> R.t UnderlyingSourcePullCallback.t option) =
      fun (x16442 : t) ->
        Ojs.option_of_js
          (fun (x16443 : Ojs.t) ->
             UnderlyingSourcePullCallback.t_of_js R.t_of_js x16443)
          (Ojs.get_prop_ascii (t_to_js x16442) "pull")
    let (set_pull : t -> R.t UnderlyingSourcePullCallback.t -> unit) =
      fun (x16445 : t) ->
        fun (x16446 : R.t UnderlyingSourcePullCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x16445) "pull"
            (UnderlyingSourcePullCallback.t_to_js R.t_to_js x16446)
    let (get_start : t -> R.t UnderlyingSourceStartCallback.t option) =
      fun (x16448 : t) ->
        Ojs.option_of_js
          (fun (x16449 : Ojs.t) ->
             UnderlyingSourceStartCallback.t_of_js R.t_of_js x16449)
          (Ojs.get_prop_ascii (t_to_js x16448) "start")
    let (set_start : t -> R.t UnderlyingSourceStartCallback.t -> unit) =
      fun (x16451 : t) ->
        fun (x16452 : R.t UnderlyingSourceStartCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x16451) "start"
            (UnderlyingSourceStartCallback.t_to_js R.t_to_js x16452)
    let (get_type : t -> undefined) =
      fun (x16454 : t) ->
        undefined_of_js (Ojs.get_prop_ascii (t_to_js x16454) "type")
    let (set_type : t -> undefined -> unit) =
      fun (x16455 : t) ->
        fun (x16456 : undefined) ->
          Ojs.set_prop_ascii (t_to_js x16455) "type" (undefined_to_js x16456)
  end
module CustomEvent_Make(T:Ojs.T) =
  struct
    type 'T parent = 'T CustomEvent.t
    let rec parent_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T parent =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x16459 : Ojs.t) -> CustomEvent.t_of_js __T_of_js x16459
    and parent_to_js : 'T . ('T -> Ojs.t) -> 'T parent -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x16457 : __T CustomEvent.t) ->
            CustomEvent.t_to_js __T_to_js x16457
    type t = T.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16463 : Ojs.t) -> parent_of_js T.t_of_js x16463
    and t_to_js : t -> Ojs.t =
      fun (x16461 : T.t parent) -> parent_to_js T.t_to_js x16461
    let (get_detail : t -> T.t) =
      fun (x16465 : t) ->
        T.t_of_js (Ojs.get_prop_ascii (t_to_js x16465) "detail")
    let (initCustomEvent :
      t ->
        type_:string ->
          ?bubbles:bool -> ?cancelable:bool -> ?detail:T.t -> unit -> unit)
      =
      fun (x16474 : t) ->
        fun ~type_:(x16466 : string) ->
          fun ?bubbles:(x16467 : bool option) ->
            fun ?cancelable:(x16468 : bool option) ->
              fun ?detail:(x16469 : T.t option) ->
                fun () ->
                  ignore
                    (let x16475 = t_to_js x16474 in
                     Ojs.call (Ojs.get_prop_ascii x16475 "initCustomEvent")
                       "apply"
                       [|x16475;((let x16470 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x16470 "push"
                                       [|(Ojs.string_to_js x16466)|]);
                                  (match x16467 with
                                   | Some x16473 ->
                                       ignore
                                         (Ojs.call x16470 "push"
                                            [|(Ojs.bool_to_js x16473)|])
                                   | None -> ());
                                  (match x16468 with
                                   | Some x16472 ->
                                       ignore
                                         (Ojs.call x16470 "push"
                                            [|(Ojs.bool_to_js x16472)|])
                                   | None -> ());
                                  (match x16469 with
                                   | Some x16471 ->
                                       ignore
                                         (Ojs.call x16470 "push"
                                            [|(T.t_to_js x16471)|])
                                   | None -> ());
                                  x16470))|])
  end
module IDBRequest_Make(T:Ojs.T) =
  struct
    type 'T parent = 'T IDBRequest.t
    let rec parent_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T parent =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x16478 : Ojs.t) -> IDBRequest.t_of_js __T_of_js x16478
    and parent_to_js : 'T . ('T -> Ojs.t) -> 'T parent -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x16476 : __T IDBRequest.t) ->
            IDBRequest.t_to_js __T_to_js x16476
    type t = T.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16482 : Ojs.t) -> parent_of_js T.t_of_js x16482
    and t_to_js : t -> Ojs.t =
      fun (x16480 : T.t parent) -> parent_to_js T.t_to_js x16480
    let (get_error : t -> DOMException.t option) =
      fun (x16484 : t) ->
        Ojs.option_of_js DOMException.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16484) "error")
    let (get_onerror : t -> (this:t -> ev:Event.t -> any) option) =
      fun (x16486 : t) ->
        Ojs.option_of_js
          (fun (x16487 : Ojs.t) ->
             fun ~this:(x16488 : t) ->
               fun ~ev:(x16489 : Event.t) ->
                 any_of_js
                   (Ojs.apply x16487
                      [|(t_to_js x16488);(Event.t_to_js x16489)|]))
          (Ojs.get_prop_ascii (t_to_js x16486) "onerror")
    let (set_onerror : t -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x16490 : t) ->
        fun (x16491 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (t_to_js x16490) "onerror"
            (Ojs.option_to_js
               (fun (x16492 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x16493 : Ojs.t) ->
                       fun (x16494 : Ojs.t) ->
                         any_to_js
                           (x16492 ~this:(t_of_js x16493)
                              ~ev:(Event.t_of_js x16494)))) x16491)
    let (get_onsuccess : t -> (this:t -> ev:Event.t -> any) option) =
      fun (x16495 : t) ->
        Ojs.option_of_js
          (fun (x16496 : Ojs.t) ->
             fun ~this:(x16497 : t) ->
               fun ~ev:(x16498 : Event.t) ->
                 any_of_js
                   (Ojs.apply x16496
                      [|(t_to_js x16497);(Event.t_to_js x16498)|]))
          (Ojs.get_prop_ascii (t_to_js x16495) "onsuccess")
    let (set_onsuccess : t -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x16499 : t) ->
        fun (x16500 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (t_to_js x16499) "onsuccess"
            (Ojs.option_to_js
               (fun (x16501 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x16502 : Ojs.t) ->
                       fun (x16503 : Ojs.t) ->
                         any_to_js
                           (x16501 ~this:(t_of_js x16502)
                              ~ev:(Event.t_of_js x16503)))) x16500)
    let (get_readyState : t -> IDBRequestReadyState.t) =
      fun (x16504 : t) ->
        IDBRequestReadyState.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16504) "readyState")
    let (get_result : t -> T.t) =
      fun (x16505 : t) ->
        T.t_of_js (Ojs.get_prop_ascii (t_to_js x16505) "result")
    let (get_source :
      t -> (IDBCursor.t, IDBIndex.t, IDBObjectStore.t) union3) =
      fun (x16506 : t) ->
        union3_of_js IDBCursor.t_of_js IDBIndex.t_of_js
          IDBObjectStore.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16506) "source")
    let (get_transaction : t -> IDBTransaction.t option) =
      fun (x16510 : t) ->
        Ojs.option_of_js IDBTransaction.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16510) "transaction")
    let (addEventListener :
      t ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x16521 : t) ->
        fun ~type_:(x16512 : 'K) ->
          fun ~listener:(x16513 : this:t -> ev:any -> any) ->
            fun
              ?options:(x16514 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x16522 = t_to_js x16521 in
                   Ojs.call (Ojs.get_prop_ascii x16522 "addEventListener")
                     "apply"
                     [|x16522;((let x16515 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x16515 "push"
                                     [|(Obj.magic x16512)|]);
                                ignore
                                  (Ojs.call x16515 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x16519 : Ojs.t) ->
                                             fun (x16520 : Ojs.t) ->
                                               any_to_js
                                                 (x16513
                                                    ~this:(t_of_js x16519)
                                                    ~ev:(any_of_js x16520))))|]);
                                (match x16514 with
                                 | Some x16516 ->
                                     ignore
                                       (Ojs.call x16515 "push"
                                          [|((match x16516 with
                                              | `U1 x16517 ->
                                                  Ojs.bool_to_js x16517
                                              | `U2 x16518 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x16518))|])
                                 | None -> ());
                                x16515))|])
    let (addEventListener :
      t ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x16530 : t) ->
        fun ~type_:(x16523 : string) ->
          fun ~listener:(x16524 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x16525 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x16531 = t_to_js x16530 in
                   Ojs.call (Ojs.get_prop_ascii x16531 "addEventListener")
                     "apply"
                     [|x16531;((let x16526 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x16526 "push"
                                     [|(Ojs.string_to_js x16523)|]);
                                ignore
                                  (Ojs.call x16526 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x16524)|]);
                                (match x16525 with
                                 | Some x16527 ->
                                     ignore
                                       (Ojs.call x16526 "push"
                                          [|((match x16527 with
                                              | `U1 x16528 ->
                                                  Ojs.bool_to_js x16528
                                              | `U2 x16529 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x16529))|])
                                 | None -> ());
                                x16526))|])
    let (removeEventListener :
      t ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x16541 : t) ->
        fun ~type_:(x16532 : 'K) ->
          fun ~listener:(x16533 : this:t -> ev:any -> any) ->
            fun
              ?options:(x16534 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x16542 = t_to_js x16541 in
                   Ojs.call (Ojs.get_prop_ascii x16542 "removeEventListener")
                     "apply"
                     [|x16542;((let x16535 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x16535 "push"
                                     [|(Obj.magic x16532)|]);
                                ignore
                                  (Ojs.call x16535 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x16539 : Ojs.t) ->
                                             fun (x16540 : Ojs.t) ->
                                               any_to_js
                                                 (x16533
                                                    ~this:(t_of_js x16539)
                                                    ~ev:(any_of_js x16540))))|]);
                                (match x16534 with
                                 | Some x16536 ->
                                     ignore
                                       (Ojs.call x16535 "push"
                                          [|((match x16536 with
                                              | `U1 x16537 ->
                                                  Ojs.bool_to_js x16537
                                              | `U2 x16538 ->
                                                  EventListenerOptions.t_to_js
                                                    x16538))|])
                                 | None -> ());
                                x16535))|])
    let (removeEventListener :
      t ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x16550 : t) ->
        fun ~type_:(x16543 : string) ->
          fun ~listener:(x16544 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x16545 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x16551 = t_to_js x16550 in
                   Ojs.call (Ojs.get_prop_ascii x16551 "removeEventListener")
                     "apply"
                     [|x16551;((let x16546 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x16546 "push"
                                     [|(Ojs.string_to_js x16543)|]);
                                ignore
                                  (Ojs.call x16546 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x16544)|]);
                                (match x16545 with
                                 | Some x16547 ->
                                     ignore
                                       (Ojs.call x16546 "push"
                                          [|((match x16547 with
                                              | `U1 x16548 ->
                                                  Ojs.bool_to_js x16548
                                              | `U2 x16549 ->
                                                  EventListenerOptions.t_to_js
                                                    x16549))|])
                                 | None -> ());
                                x16546))|])
  end
module ProgressEvent_Make(T:Ojs.T) =
  struct
    type 'T parent = 'T ProgressEvent.t
    let rec parent_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T parent =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x16554 : Ojs.t) -> ProgressEvent.t_of_js __T_of_js x16554
    and parent_to_js : 'T . ('T -> Ojs.t) -> 'T parent -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x16552 : __T ProgressEvent.t) ->
            ProgressEvent.t_to_js __T_to_js x16552
    type t = T.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16558 : Ojs.t) -> parent_of_js T.t_of_js x16558
    and t_to_js : t -> Ojs.t =
      fun (x16556 : T.t parent) -> parent_to_js T.t_to_js x16556
    let (get_lengthComputable : t -> bool) =
      fun (x16560 : t) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (t_to_js x16560) "lengthComputable")
    let (get_loaded : t -> float) =
      fun (x16561 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x16561) "loaded")
    let (get_target : t -> T.t option) =
      fun (x16562 : t) ->
        Ojs.option_of_js T.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16562) "target")
    let (get_total : t -> float) =
      fun (x16564 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x16564) "total")
  end
module ReadableStream_Make(R:Ojs.T) =
  struct
    type 'R parent = 'R ReadableStream.t
    let rec parent_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R parent =
      fun (type __R) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x16567 : Ojs.t) -> ReadableStream.t_of_js __R_of_js x16567
    and parent_to_js : 'R . ('R -> Ojs.t) -> 'R parent -> Ojs.t =
      fun (type __R) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x16565 : __R ReadableStream.t) ->
            ReadableStream.t_to_js __R_to_js x16565
    type t = R.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16571 : Ojs.t) -> parent_of_js R.t_of_js x16571
    and t_to_js : t -> Ojs.t =
      fun (x16569 : R.t parent) -> parent_to_js R.t_to_js x16569
    let (get_locked : t -> bool) =
      fun (x16573 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x16573) "locked")
    let (cancel : t -> ?reason:any -> unit -> unit Promise.t_1) =
      fun (x16577 : t) ->
        fun ?reason:(x16574 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x16578 = t_to_js x16577 in
               Ojs.call (Ojs.get_prop_ascii x16578 "cancel") "apply"
                 [|x16578;((let x16575 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x16574 with
                             | Some x16576 ->
                                 ignore
                                   (Ojs.call x16575 "push"
                                      [|(any_to_js x16576)|])
                             | None -> ());
                            x16575))|])
    let (getReader : t -> R.t ReadableStreamDefaultReader.t) =
      fun (x16580 : t) ->
        ReadableStreamDefaultReader.t_of_js R.t_of_js
          (Ojs.call (t_to_js x16580) "getReader" [||])
    let (pipeThrough :
      t ->
        transform:('T, R.t) ReadableWritablePair.t ->
          ?options:StreamPipeOptions.t -> unit -> 'T parent)
      =
      fun (x16588 : t) ->
        fun ~transform:(x16582 : ('T, R.t) ReadableWritablePair.t) ->
          fun ?options:(x16583 : StreamPipeOptions.t option) ->
            fun () ->
              parent_of_js Obj.magic
                (let x16589 = t_to_js x16588 in
                 Ojs.call (Ojs.get_prop_ascii x16589 "pipeThrough") "apply"
                   [|x16589;((let x16584 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x16584 "push"
                                   [|(ReadableWritablePair.t_to_js Obj.magic
                                        R.t_to_js x16582)|]);
                              (match x16583 with
                               | Some x16585 ->
                                   ignore
                                     (Ojs.call x16584 "push"
                                        [|(StreamPipeOptions.t_to_js x16585)|])
                               | None -> ());
                              x16584))|])
    let (pipeTo :
      t ->
        destination:R.t WritableStream.t ->
          ?options:StreamPipeOptions.t -> unit -> unit Promise.t_1)
      =
      fun (x16596 : t) ->
        fun ~destination:(x16591 : R.t WritableStream.t) ->
          fun ?options:(x16592 : StreamPipeOptions.t option) ->
            fun () ->
              Promise.t_1_of_js Ojs.unit_of_js
                (let x16597 = t_to_js x16596 in
                 Ojs.call (Ojs.get_prop_ascii x16597 "pipeTo") "apply"
                   [|x16597;((let x16593 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x16593 "push"
                                   [|(WritableStream.t_to_js R.t_to_js x16591)|]);
                              (match x16592 with
                               | Some x16594 ->
                                   ignore
                                     (Ojs.call x16593 "push"
                                        [|(StreamPipeOptions.t_to_js x16594)|])
                               | None -> ());
                              x16593))|])
    let (tee : t -> (t * t)) =
      fun (x16599 : t) ->
        let x16600 = Ojs.call (t_to_js x16599) "tee" [||] in
        ((t_of_js (Ojs.array_get x16600 0)),
          (t_of_js (Ojs.array_get x16600 1)))
  end
module ReadableStreamDefaultController_Make(R:Ojs.T) =
  struct
    type 'R parent = 'R ReadableStreamDefaultController.t
    let rec parent_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R parent =
      fun (type __R) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x16603 : Ojs.t) ->
            ReadableStreamDefaultController.t_of_js __R_of_js x16603
    and parent_to_js : 'R . ('R -> Ojs.t) -> 'R parent -> Ojs.t =
      fun (type __R) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x16601 : __R ReadableStreamDefaultController.t) ->
            ReadableStreamDefaultController.t_to_js __R_to_js x16601
    type t = R.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16607 : Ojs.t) -> parent_of_js R.t_of_js x16607
    and t_to_js : t -> Ojs.t =
      fun (x16605 : R.t parent) -> parent_to_js R.t_to_js x16605
    let (get_desiredSize : t -> float option) =
      fun (x16609 : t) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x16609) "desiredSize")
    let (close : t -> unit) =
      fun (x16611 : t) -> ignore (Ojs.call (t_to_js x16611) "close" [||])
    let (enqueue : t -> ?chunk:R.t -> unit -> unit) =
      fun (x16615 : t) ->
        fun ?chunk:(x16612 : R.t option) ->
          fun () ->
            ignore
              (let x16616 = t_to_js x16615 in
               Ojs.call (Ojs.get_prop_ascii x16616 "enqueue") "apply"
                 [|x16616;((let x16613 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x16612 with
                             | Some x16614 ->
                                 ignore
                                   (Ojs.call x16613 "push"
                                      [|(R.t_to_js x16614)|])
                             | None -> ());
                            x16613))|])
    let (error : t -> ?e:any -> unit -> unit) =
      fun (x16620 : t) ->
        fun ?e:(x16617 : any option) ->
          fun () ->
            ignore
              (let x16621 = t_to_js x16620 in
               Ojs.call (Ojs.get_prop_ascii x16621 "error") "apply"
                 [|x16621;((let x16618 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x16617 with
                             | Some x16619 ->
                                 ignore
                                   (Ojs.call x16618 "push"
                                      [|(any_to_js x16619)|])
                             | None -> ());
                            x16618))|])
  end
module ReadableStreamDefaultReader_Make(R:Ojs.T) =
  struct
    type 'R parent = 'R ReadableStreamDefaultReader.t
    let rec parent_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R parent =
      fun (type __R) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x16624 : Ojs.t) ->
            ReadableStreamDefaultReader.t_of_js __R_of_js x16624
    and parent_to_js : 'R . ('R -> Ojs.t) -> 'R parent -> Ojs.t =
      fun (type __R) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x16622 : __R ReadableStreamDefaultReader.t) ->
            ReadableStreamDefaultReader.t_to_js __R_to_js x16622
    type t = R.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16628 : Ojs.t) -> parent_of_js R.t_of_js x16628
    and t_to_js : t -> Ojs.t =
      fun (x16626 : R.t parent) -> parent_to_js R.t_to_js x16626
    let (read : t -> R.t ReadableStreamDefaultReadResult.t Promise.t_1) =
      fun (x16630 : t) ->
        Promise.t_1_of_js
          (fun (x16631 : Ojs.t) ->
             ReadableStreamDefaultReadResult.t_of_js R.t_of_js x16631)
          (Ojs.call (t_to_js x16630) "read" [||])
    let (releaseLock : t -> unit) =
      fun (x16633 : t) ->
        ignore (Ojs.call (t_to_js x16633) "releaseLock" [||])
  end
module TransformStream_Make(I:Ojs.T)(O:Ojs.T) =
  struct
    type ('I, 'O) parent = ('I, 'O) TransformStream.t
    let rec parent_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) parent =
      fun (type __I) ->
        fun (type __O) ->
          fun (__I_of_js : Ojs.t -> __I) ->
            fun (__O_of_js : Ojs.t -> __O) ->
              fun (x16637 : Ojs.t) ->
                TransformStream.t_of_js __I_of_js __O_of_js x16637
    and parent_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) parent -> Ojs.t =
      fun (type __I) ->
        fun (type __O) ->
          fun (__I_to_js : __I -> Ojs.t) ->
            fun (__O_to_js : __O -> Ojs.t) ->
              fun (x16634 : (__I, __O) TransformStream.t) ->
                TransformStream.t_to_js __I_to_js __O_to_js x16634
    type t = (I.t, O.t) parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16643 : Ojs.t) -> parent_of_js I.t_of_js O.t_of_js x16643
    and t_to_js : t -> Ojs.t =
      fun (x16640 : (I.t, O.t) parent) ->
        parent_to_js I.t_to_js O.t_to_js x16640
    let (get_readable : t -> O.t ReadableStream.t) =
      fun (x16646 : t) ->
        ReadableStream.t_of_js O.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16646) "readable")
    let (get_writable : t -> I.t WritableStream.t) =
      fun (x16648 : t) ->
        WritableStream.t_of_js I.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16648) "writable")
  end
module TransformStreamDefaultController_Make(O:Ojs.T) =
  struct
    type 'O parent = 'O TransformStreamDefaultController.t
    let rec parent_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O parent =
      fun (type __O) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x16652 : Ojs.t) ->
            TransformStreamDefaultController.t_of_js __O_of_js x16652
    and parent_to_js : 'O . ('O -> Ojs.t) -> 'O parent -> Ojs.t =
      fun (type __O) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x16650 : __O TransformStreamDefaultController.t) ->
            TransformStreamDefaultController.t_to_js __O_to_js x16650
    type t = O.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16656 : Ojs.t) -> parent_of_js O.t_of_js x16656
    and t_to_js : t -> Ojs.t =
      fun (x16654 : O.t parent) -> parent_to_js O.t_to_js x16654
    let (get_desiredSize : t -> float option) =
      fun (x16658 : t) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x16658) "desiredSize")
    let (enqueue : t -> ?chunk:O.t -> unit -> unit) =
      fun (x16663 : t) ->
        fun ?chunk:(x16660 : O.t option) ->
          fun () ->
            ignore
              (let x16664 = t_to_js x16663 in
               Ojs.call (Ojs.get_prop_ascii x16664 "enqueue") "apply"
                 [|x16664;((let x16661 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x16660 with
                             | Some x16662 ->
                                 ignore
                                   (Ojs.call x16661 "push"
                                      [|(O.t_to_js x16662)|])
                             | None -> ());
                            x16661))|])
    let (error : t -> ?reason:any -> unit -> unit) =
      fun (x16668 : t) ->
        fun ?reason:(x16665 : any option) ->
          fun () ->
            ignore
              (let x16669 = t_to_js x16668 in
               Ojs.call (Ojs.get_prop_ascii x16669 "error") "apply"
                 [|x16669;((let x16666 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x16665 with
                             | Some x16667 ->
                                 ignore
                                   (Ojs.call x16666 "push"
                                      [|(any_to_js x16667)|])
                             | None -> ());
                            x16666))|])
    let (terminate : t -> unit) =
      fun (x16670 : t) -> ignore (Ojs.call (t_to_js x16670) "terminate" [||])
  end
module WritableStream_Make(W:Ojs.T) =
  struct
    type 'W parent = 'W WritableStream.t
    let rec parent_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W parent =
      fun (type __W) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x16673 : Ojs.t) -> WritableStream.t_of_js __W_of_js x16673
    and parent_to_js : 'W . ('W -> Ojs.t) -> 'W parent -> Ojs.t =
      fun (type __W) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x16671 : __W WritableStream.t) ->
            WritableStream.t_to_js __W_to_js x16671
    type t = W.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16677 : Ojs.t) -> parent_of_js W.t_of_js x16677
    and t_to_js : t -> Ojs.t =
      fun (x16675 : W.t parent) -> parent_to_js W.t_to_js x16675
    let (get_locked : t -> bool) =
      fun (x16679 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x16679) "locked")
    let (abort : t -> ?reason:any -> unit -> unit Promise.t_1) =
      fun (x16683 : t) ->
        fun ?reason:(x16680 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x16684 = t_to_js x16683 in
               Ojs.call (Ojs.get_prop_ascii x16684 "abort") "apply"
                 [|x16684;((let x16681 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x16680 with
                             | Some x16682 ->
                                 ignore
                                   (Ojs.call x16681 "push"
                                      [|(any_to_js x16682)|])
                             | None -> ());
                            x16681))|])
    let (close : t -> unit Promise.t_1) =
      fun (x16686 : t) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (t_to_js x16686) "close" [||])
    let (getWriter : t -> W.t WritableStreamDefaultWriter.t) =
      fun (x16688 : t) ->
        WritableStreamDefaultWriter.t_of_js W.t_of_js
          (Ojs.call (t_to_js x16688) "getWriter" [||])
  end
module WritableStreamDefaultWriter_Make(W:Ojs.T) =
  struct
    type 'W parent = 'W WritableStreamDefaultWriter.t
    let rec parent_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W parent =
      fun (type __W) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x16692 : Ojs.t) ->
            WritableStreamDefaultWriter.t_of_js __W_of_js x16692
    and parent_to_js : 'W . ('W -> Ojs.t) -> 'W parent -> Ojs.t =
      fun (type __W) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x16690 : __W WritableStreamDefaultWriter.t) ->
            WritableStreamDefaultWriter.t_to_js __W_to_js x16690
    type t = W.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16696 : Ojs.t) -> parent_of_js W.t_of_js x16696
    and t_to_js : t -> Ojs.t =
      fun (x16694 : W.t parent) -> parent_to_js W.t_to_js x16694
    let (get_closed : t -> undefined Promise.t_1) =
      fun (x16698 : t) ->
        Promise.t_1_of_js undefined_of_js
          (Ojs.get_prop_ascii (t_to_js x16698) "closed")
    let (get_desiredSize : t -> float option) =
      fun (x16700 : t) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x16700) "desiredSize")
    let (get_ready : t -> undefined Promise.t_1) =
      fun (x16702 : t) ->
        Promise.t_1_of_js undefined_of_js
          (Ojs.get_prop_ascii (t_to_js x16702) "ready")
    let (abort : t -> ?reason:any -> unit -> unit Promise.t_1) =
      fun (x16707 : t) ->
        fun ?reason:(x16704 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x16708 = t_to_js x16707 in
               Ojs.call (Ojs.get_prop_ascii x16708 "abort") "apply"
                 [|x16708;((let x16705 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x16704 with
                             | Some x16706 ->
                                 ignore
                                   (Ojs.call x16705 "push"
                                      [|(any_to_js x16706)|])
                             | None -> ());
                            x16705))|])
    let (close : t -> unit Promise.t_1) =
      fun (x16710 : t) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (t_to_js x16710) "close" [||])
    let (releaseLock : t -> unit) =
      fun (x16712 : t) ->
        ignore (Ojs.call (t_to_js x16712) "releaseLock" [||])
    let (write : t -> ?chunk:W.t -> unit -> unit Promise.t_1) =
      fun (x16716 : t) ->
        fun ?chunk:(x16713 : W.t option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x16717 = t_to_js x16716 in
               Ojs.call (Ojs.get_prop_ascii x16717 "write") "apply"
                 [|x16717;((let x16714 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x16713 with
                             | Some x16715 ->
                                 ignore
                                   (Ojs.call x16714 "push"
                                      [|(W.t_to_js x16715)|])
                             | None -> ());
                            x16714))|])
  end
module QueuingStrategySize_Make(T:Ojs.T) =
  struct
    type 'T parent = 'T QueuingStrategySize.t
    let rec parent_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T parent =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x16721 : Ojs.t) ->
            QueuingStrategySize.t_of_js __T_of_js x16721
    and parent_to_js : 'T . ('T -> Ojs.t) -> 'T parent -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x16719 : __T QueuingStrategySize.t) ->
            QueuingStrategySize.t_to_js __T_to_js x16719
    type t = T.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16725 : Ojs.t) -> parent_of_js T.t_of_js x16725
    and t_to_js : t -> Ojs.t =
      fun (x16723 : T.t parent) -> parent_to_js T.t_to_js x16723
    let (apply : t -> chunk:T.t -> float) =
      fun (x16728 : t) ->
        fun ~chunk:(x16727 : T.t) ->
          Ojs.float_of_js (Ojs.apply (t_to_js x16728) [|(T.t_to_js x16727)|])
  end
module TransformerFlushCallback_Make(O:Ojs.T) =
  struct
    type 'O parent = 'O TransformerFlushCallback.t
    let rec parent_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O parent =
      fun (type __O) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x16731 : Ojs.t) ->
            TransformerFlushCallback.t_of_js __O_of_js x16731
    and parent_to_js : 'O . ('O -> Ojs.t) -> 'O parent -> Ojs.t =
      fun (type __O) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x16729 : __O TransformerFlushCallback.t) ->
            TransformerFlushCallback.t_to_js __O_to_js x16729
    type t = O.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16735 : Ojs.t) -> parent_of_js O.t_of_js x16735
    and t_to_js : t -> Ojs.t =
      fun (x16733 : O.t parent) -> parent_to_js O.t_to_js x16733
    let (apply :
      t ->
        controller:O.t TransformStreamDefaultController.t ->
          (unit, unit PromiseLike.t_1) union2)
      =
      fun (x16739 : t) ->
        fun ~controller:(x16737 : O.t TransformStreamDefaultController.t) ->
          union2_of_js Ojs.unit_of_js
            (fun (x16741 : Ojs.t) ->
               PromiseLike.t_1_of_js Ojs.unit_of_js x16741)
            (Ojs.apply (t_to_js x16739)
               [|(TransformStreamDefaultController.t_to_js O.t_to_js x16737)|])
  end
module TransformerStartCallback_Make(O:Ojs.T) =
  struct
    type 'O parent = 'O TransformerStartCallback.t
    let rec parent_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O parent =
      fun (type __O) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x16745 : Ojs.t) ->
            TransformerStartCallback.t_of_js __O_of_js x16745
    and parent_to_js : 'O . ('O -> Ojs.t) -> 'O parent -> Ojs.t =
      fun (type __O) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x16743 : __O TransformerStartCallback.t) ->
            TransformerStartCallback.t_to_js __O_to_js x16743
    type t = O.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16749 : Ojs.t) -> parent_of_js O.t_of_js x16749
    and t_to_js : t -> Ojs.t =
      fun (x16747 : O.t parent) -> parent_to_js O.t_to_js x16747
    let (apply :
      t -> controller:O.t TransformStreamDefaultController.t -> any) =
      fun (x16753 : t) ->
        fun ~controller:(x16751 : O.t TransformStreamDefaultController.t) ->
          any_of_js
            (Ojs.apply (t_to_js x16753)
               [|(TransformStreamDefaultController.t_to_js O.t_to_js x16751)|])
  end
module TransformerTransformCallback_Make(I:Ojs.T)(O:Ojs.T) =
  struct
    type ('I, 'O) parent = ('I, 'O) TransformerTransformCallback.t
    let rec parent_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) parent =
      fun (type __I) ->
        fun (type __O) ->
          fun (__I_of_js : Ojs.t -> __I) ->
            fun (__O_of_js : Ojs.t -> __O) ->
              fun (x16757 : Ojs.t) ->
                TransformerTransformCallback.t_of_js __I_of_js __O_of_js
                  x16757
    and parent_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) parent -> Ojs.t =
      fun (type __I) ->
        fun (type __O) ->
          fun (__I_to_js : __I -> Ojs.t) ->
            fun (__O_to_js : __O -> Ojs.t) ->
              fun (x16754 : (__I, __O) TransformerTransformCallback.t) ->
                TransformerTransformCallback.t_to_js __I_to_js __O_to_js
                  x16754
    type t = (I.t, O.t) parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16763 : Ojs.t) -> parent_of_js I.t_of_js O.t_of_js x16763
    and t_to_js : t -> Ojs.t =
      fun (x16760 : (I.t, O.t) parent) ->
        parent_to_js I.t_to_js O.t_to_js x16760
    let (apply :
      t ->
        chunk:I.t ->
          controller:O.t TransformStreamDefaultController.t ->
            (unit, unit PromiseLike.t_1) union2)
      =
      fun (x16769 : t) ->
        fun ~chunk:(x16766 : I.t) ->
          fun ~controller:(x16767 : O.t TransformStreamDefaultController.t)
            ->
            union2_of_js Ojs.unit_of_js
              (fun (x16771 : Ojs.t) ->
                 PromiseLike.t_1_of_js Ojs.unit_of_js x16771)
              (Ojs.apply (t_to_js x16769)
                 [|(I.t_to_js x16766);(TransformStreamDefaultController.t_to_js
                                         O.t_to_js x16767)|])
  end
module UnderlyingSinkWriteCallback_Make(W:Ojs.T) =
  struct
    type 'W parent = 'W UnderlyingSinkWriteCallback.t
    let rec parent_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W parent =
      fun (type __W) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x16775 : Ojs.t) ->
            UnderlyingSinkWriteCallback.t_of_js __W_of_js x16775
    and parent_to_js : 'W . ('W -> Ojs.t) -> 'W parent -> Ojs.t =
      fun (type __W) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x16773 : __W UnderlyingSinkWriteCallback.t) ->
            UnderlyingSinkWriteCallback.t_to_js __W_to_js x16773
    type t = W.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16779 : Ojs.t) -> parent_of_js W.t_of_js x16779
    and t_to_js : t -> Ojs.t =
      fun (x16777 : W.t parent) -> parent_to_js W.t_to_js x16777
    let (apply :
      t ->
        chunk:W.t ->
          controller:WritableStreamDefaultController.t ->
            (unit, unit PromiseLike.t_1) union2)
      =
      fun (x16783 : t) ->
        fun ~chunk:(x16781 : W.t) ->
          fun ~controller:(x16782 : WritableStreamDefaultController.t) ->
            union2_of_js Ojs.unit_of_js
              (fun (x16785 : Ojs.t) ->
                 PromiseLike.t_1_of_js Ojs.unit_of_js x16785)
              (Ojs.apply (t_to_js x16783)
                 [|(W.t_to_js x16781);(WritableStreamDefaultController.t_to_js
                                         x16782)|])
  end
module UnderlyingSourcePullCallback_Make(R:Ojs.T) =
  struct
    type 'R parent = 'R UnderlyingSourcePullCallback.t
    let rec parent_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R parent =
      fun (type __R) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x16789 : Ojs.t) ->
            UnderlyingSourcePullCallback.t_of_js __R_of_js x16789
    and parent_to_js : 'R . ('R -> Ojs.t) -> 'R parent -> Ojs.t =
      fun (type __R) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x16787 : __R UnderlyingSourcePullCallback.t) ->
            UnderlyingSourcePullCallback.t_to_js __R_to_js x16787
    type t = R.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16793 : Ojs.t) -> parent_of_js R.t_of_js x16793
    and t_to_js : t -> Ojs.t =
      fun (x16791 : R.t parent) -> parent_to_js R.t_to_js x16791
    let (apply :
      t ->
        controller:R.t ReadableStreamController.t ->
          (unit, unit PromiseLike.t_1) union2)
      =
      fun (x16797 : t) ->
        fun ~controller:(x16795 : R.t ReadableStreamController.t) ->
          union2_of_js Ojs.unit_of_js
            (fun (x16799 : Ojs.t) ->
               PromiseLike.t_1_of_js Ojs.unit_of_js x16799)
            (Ojs.apply (t_to_js x16797)
               [|(ReadableStreamController.t_to_js R.t_to_js x16795)|])
  end
module UnderlyingSourceStartCallback_Make(R:Ojs.T) =
  struct
    type 'R parent = 'R UnderlyingSourceStartCallback.t
    let rec parent_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R parent =
      fun (type __R) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x16803 : Ojs.t) ->
            UnderlyingSourceStartCallback.t_of_js __R_of_js x16803
    and parent_to_js : 'R . ('R -> Ojs.t) -> 'R parent -> Ojs.t =
      fun (type __R) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x16801 : __R UnderlyingSourceStartCallback.t) ->
            UnderlyingSourceStartCallback.t_to_js __R_to_js x16801
    type t = R.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16807 : Ojs.t) -> parent_of_js R.t_of_js x16807
    and t_to_js : t -> Ojs.t =
      fun (x16805 : R.t parent) -> parent_to_js R.t_to_js x16805
    let (apply : t -> controller:R.t ReadableStreamController.t -> any) =
      fun (x16811 : t) ->
        fun ~controller:(x16809 : R.t ReadableStreamController.t) ->
          any_of_js
            (Ojs.apply (t_to_js x16811)
               [|(ReadableStreamController.t_to_js R.t_to_js x16809)|])
  end
let (importScripts : string list -> unit) =
  fun (x16812 : string list) ->
    ignore
      (let x16815 = Ojs.global in
       Ojs.call (Ojs.get_prop_ascii x16815 "importScripts") "apply"
         [|x16815;((let x16813 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    List.iter
                      (fun (x16814 : string) ->
                         ignore
                           (Ojs.call x16813 "push"
                              [|(Ojs.string_to_js x16814)|])) x16812;
                    x16813))|])
let (console : unit -> Console.t) =
  fun () -> Console.t_of_js (Ojs.get_prop_ascii Ojs.global "console")
let (name : unit -> string) =
  fun () -> Ojs.string_of_js (Ojs.get_prop_ascii Ojs.global "name")
let (onmessage :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:MessageEvent.t_0 -> any) option)
  =
  fun () ->
    Ojs.option_of_js
      (fun (x16816 : Ojs.t) ->
         fun ~this:(x16817 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16818 : MessageEvent.t_0) ->
             any_of_js
               (Ojs.apply x16816
                  [|(DedicatedWorkerGlobalScope.t_to_js x16817);(MessageEvent.t_0_to_js
                                                                   x16818)|]))
      (Ojs.get_prop_ascii Ojs.global "onmessage")
let (onmessageerror :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:MessageEvent.t_0 -> any) option)
  =
  fun () ->
    Ojs.option_of_js
      (fun (x16819 : Ojs.t) ->
         fun ~this:(x16820 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16821 : MessageEvent.t_0) ->
             any_of_js
               (Ojs.apply x16819
                  [|(DedicatedWorkerGlobalScope.t_to_js x16820);(MessageEvent.t_0_to_js
                                                                   x16821)|]))
      (Ojs.get_prop_ascii Ojs.global "onmessageerror")
let (close : unit -> unit) =
  fun () -> ignore (Ojs.call Ojs.global "close" [||])
let (postMessage : message:any -> transfer:Transferable.t list -> unit) =
  fun ~message:(x16822 : any) ->
    fun ~transfer:(x16823 : Transferable.t list) ->
      ignore
        (Ojs.call Ojs.global "postMessage"
           [|(any_to_js x16822);(Ojs.list_to_js Transferable.t_to_js x16823)|])
let (postMessage' :
  message:any -> ?options:StructuredSerializeOptions.t -> unit -> unit) =
  fun ~message:(x16825 : any) ->
    fun ?options:(x16826 : StructuredSerializeOptions.t option) ->
      fun () ->
        ignore
          (let x16829 = Ojs.global in
           Ojs.call (Ojs.get_prop_ascii x16829 "postMessage") "apply"
             [|x16829;((let x16827 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x16827 "push" [|(any_to_js x16825)|]);
                        (match x16826 with
                         | Some x16828 ->
                             ignore
                               (Ojs.call x16827 "push"
                                  [|(StructuredSerializeOptions.t_to_js
                                       x16828)|])
                         | None -> ());
                        x16827))|])
let (dispatchEvent : Event.t -> bool) =
  fun (x16830 : Event.t) ->
    Ojs.bool_of_js
      (Ojs.call Ojs.global "dispatchEvent" [|(Event.t_to_js x16830)|])
let (location : unit -> WorkerLocation.t) =
  fun () -> WorkerLocation.t_of_js (Ojs.get_prop_ascii Ojs.global "location")
let (navigator : unit -> WorkerNavigator.t) =
  fun () ->
    WorkerNavigator.t_of_js (Ojs.get_prop_ascii Ojs.global "navigator")
let (onerror :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:ErrorEvent.t -> any) option)
  =
  fun () ->
    Ojs.option_of_js
      (fun (x16831 : Ojs.t) ->
         fun ~this:(x16832 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16833 : ErrorEvent.t) ->
             any_of_js
               (Ojs.apply x16831
                  [|(DedicatedWorkerGlobalScope.t_to_js x16832);(ErrorEvent.t_to_js
                                                                   x16833)|]))
      (Ojs.get_prop_ascii Ojs.global "onerror")
let (onlanguagechange :
  unit -> (this:DedicatedWorkerGlobalScope.t -> ev:Event.t -> any) option) =
  fun () ->
    Ojs.option_of_js
      (fun (x16834 : Ojs.t) ->
         fun ~this:(x16835 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16836 : Event.t) ->
             any_of_js
               (Ojs.apply x16834
                  [|(DedicatedWorkerGlobalScope.t_to_js x16835);(Event.t_to_js
                                                                   x16836)|]))
      (Ojs.get_prop_ascii Ojs.global "onlanguagechange")
let (onoffline :
  unit -> (this:DedicatedWorkerGlobalScope.t -> ev:Event.t -> any) option) =
  fun () ->
    Ojs.option_of_js
      (fun (x16837 : Ojs.t) ->
         fun ~this:(x16838 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16839 : Event.t) ->
             any_of_js
               (Ojs.apply x16837
                  [|(DedicatedWorkerGlobalScope.t_to_js x16838);(Event.t_to_js
                                                                   x16839)|]))
      (Ojs.get_prop_ascii Ojs.global "onoffline")
let (ononline :
  unit -> (this:DedicatedWorkerGlobalScope.t -> ev:Event.t -> any) option) =
  fun () ->
    Ojs.option_of_js
      (fun (x16840 : Ojs.t) ->
         fun ~this:(x16841 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16842 : Event.t) ->
             any_of_js
               (Ojs.apply x16840
                  [|(DedicatedWorkerGlobalScope.t_to_js x16841);(Event.t_to_js
                                                                   x16842)|]))
      (Ojs.get_prop_ascii Ojs.global "ononline")
let (onrejectionhandled :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:PromiseRejectionEvent.t -> any)
      option)
  =
  fun () ->
    Ojs.option_of_js
      (fun (x16843 : Ojs.t) ->
         fun ~this:(x16844 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16845 : PromiseRejectionEvent.t) ->
             any_of_js
               (Ojs.apply x16843
                  [|(DedicatedWorkerGlobalScope.t_to_js x16844);(PromiseRejectionEvent.t_to_js
                                                                   x16845)|]))
      (Ojs.get_prop_ascii Ojs.global "onrejectionhandled")
let (onunhandledrejection :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:PromiseRejectionEvent.t -> any)
      option)
  =
  fun () ->
    Ojs.option_of_js
      (fun (x16846 : Ojs.t) ->
         fun ~this:(x16847 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16848 : PromiseRejectionEvent.t) ->
             any_of_js
               (Ojs.apply x16846
                  [|(DedicatedWorkerGlobalScope.t_to_js x16847);(PromiseRejectionEvent.t_to_js
                                                                   x16848)|]))
      (Ojs.get_prop_ascii Ojs.global "onunhandledrejection")
let (self : unit -> (WorkerGlobalScope.t, any) intersection2) =
  fun () ->
    intersection2_of_js WorkerGlobalScope.t_of_js any_of_js
      (Ojs.get_prop_ascii Ojs.global "self")
let (importScripts' :
  [ `String of string  | `Other of URL.t ] Primitive.t list -> unit) =
  fun (x16851 : [ `String of string  | `Other of URL.t ] Primitive.t list) ->
    ignore
      (let x16857 = Ojs.global in
       Ojs.call (Ojs.get_prop_ascii x16857 "importScripts") "apply"
         [|x16857;((let x16852 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    List.iter
                      (fun
                         (x16853 :
                           [ `String of string  | `Other of URL.t ]
                             Primitive.t)
                         ->
                         ignore
                           (Ojs.call x16852 "push"
                              [|(Primitive.t_to_js
                                   (fun
                                      (x16854 :
                                        [ `String of string 
                                        | `Other of URL.t ])
                                      ->
                                      match x16854 with
                                      | `String x16855 ->
                                          Ojs.string_to_js x16855
                                      | `Other x16856 -> URL.t_to_js x16856)
                                   x16853)|])) x16851;
                    x16852))|])
let (fonts : unit -> FontFaceSet.t) =
  fun () -> FontFaceSet.t_of_js (Ojs.get_prop_ascii Ojs.global "fonts")
let (caches : unit -> CacheStorage.t) =
  fun () -> CacheStorage.t_of_js (Ojs.get_prop_ascii Ojs.global "caches")
let (crossOriginIsolated : unit -> bool) =
  fun () ->
    Ojs.bool_of_js (Ojs.get_prop_ascii Ojs.global "crossOriginIsolated")
let (crypto : unit -> Crypto.t) =
  fun () -> Crypto.t_of_js (Ojs.get_prop_ascii Ojs.global "crypto")
let (indexedDB : unit -> IDBFactory.t) =
  fun () -> IDBFactory.t_of_js (Ojs.get_prop_ascii Ojs.global "indexedDB")
let (isSecureContext : unit -> bool) =
  fun () -> Ojs.bool_of_js (Ojs.get_prop_ascii Ojs.global "isSecureContext")
let (origin : unit -> string) =
  fun () -> Ojs.string_of_js (Ojs.get_prop_ascii Ojs.global "origin")
let (performance : unit -> Performance.t) =
  fun () -> Performance.t_of_js (Ojs.get_prop_ascii Ojs.global "performance")
let (atob : string -> string) =
  fun (x16858 : string) ->
    Ojs.string_of_js
      (Ojs.call Ojs.global "atob" [|(Ojs.string_to_js x16858)|])
let (btoa : string -> string) =
  fun (x16859 : string) ->
    Ojs.string_of_js
      (Ojs.call Ojs.global "btoa" [|(Ojs.string_to_js x16859)|])
let (clearInterval : ?id:float -> unit -> unit) =
  fun ?id:(x16860 : float option) ->
    fun () ->
      ignore
        (let x16863 = Ojs.global in
         Ojs.call (Ojs.get_prop_ascii x16863 "clearInterval") "apply"
           [|x16863;((let x16861 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x16860 with
                       | Some x16862 ->
                           ignore
                             (Ojs.call x16861 "push"
                                [|(Ojs.float_to_js x16862)|])
                       | None -> ());
                      x16861))|])
let (clearTimeout : ?id:float -> unit -> unit) =
  fun ?id:(x16864 : float option) ->
    fun () ->
      ignore
        (let x16867 = Ojs.global in
         Ojs.call (Ojs.get_prop_ascii x16867 "clearTimeout") "apply"
           [|x16867;((let x16865 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x16864 with
                       | Some x16866 ->
                           ignore
                             (Ojs.call x16865 "push"
                                [|(Ojs.float_to_js x16866)|])
                       | None -> ());
                      x16865))|])
let (createImageBitmap :
  image:ImageBitmapSource.t ->
    ?options:ImageBitmapOptions.t -> unit -> ImageBitmap.t Promise.t_1)
  =
  fun ~image:(x16868 : ImageBitmapSource.t) ->
    fun ?options:(x16869 : ImageBitmapOptions.t option) ->
      fun () ->
        Promise.t_1_of_js ImageBitmap.t_of_js
          (let x16872 = Ojs.global in
           Ojs.call (Ojs.get_prop_ascii x16872 "createImageBitmap") "apply"
             [|x16872;((let x16870 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x16870 "push"
                             [|(ImageBitmapSource.t_to_js x16868)|]);
                        (match x16869 with
                         | Some x16871 ->
                             ignore
                               (Ojs.call x16870 "push"
                                  [|(ImageBitmapOptions.t_to_js x16871)|])
                         | None -> ());
                        x16870))|])
let (createImageBitmap' :
  image:ImageBitmapSource.t ->
    sx:float ->
      sy:float ->
        sw:float ->
          sh:float ->
            ?options:ImageBitmapOptions.t ->
              unit -> ImageBitmap.t Promise.t_1)
  =
  fun ~image:(x16874 : ImageBitmapSource.t) ->
    fun ~sx:(x16875 : float) ->
      fun ~sy:(x16876 : float) ->
        fun ~sw:(x16877 : float) ->
          fun ~sh:(x16878 : float) ->
            fun ?options:(x16879 : ImageBitmapOptions.t option) ->
              fun () ->
                Promise.t_1_of_js ImageBitmap.t_of_js
                  (let x16882 = Ojs.global in
                   Ojs.call (Ojs.get_prop_ascii x16882 "createImageBitmap")
                     "apply"
                     [|x16882;((let x16880 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x16880 "push"
                                     [|(ImageBitmapSource.t_to_js x16874)|]);
                                ignore
                                  (Ojs.call x16880 "push"
                                     [|(Ojs.float_to_js x16875)|]);
                                ignore
                                  (Ojs.call x16880 "push"
                                     [|(Ojs.float_to_js x16876)|]);
                                ignore
                                  (Ojs.call x16880 "push"
                                     [|(Ojs.float_to_js x16877)|]);
                                ignore
                                  (Ojs.call x16880 "push"
                                     [|(Ojs.float_to_js x16878)|]);
                                (match x16879 with
                                 | Some x16881 ->
                                     ignore
                                       (Ojs.call x16880 "push"
                                          [|(ImageBitmapOptions.t_to_js
                                               x16881)|])
                                 | None -> ());
                                x16880))|])
let (fetch :
  input:RequestInfo.t ->
    ?init:RequestInit.t -> unit -> Response.t Promise.t_1)
  =
  fun ~input:(x16884 : RequestInfo.t) ->
    fun ?init:(x16885 : RequestInit.t option) ->
      fun () ->
        Promise.t_1_of_js Response.t_of_js
          (let x16888 = Ojs.global in
           Ojs.call (Ojs.get_prop_ascii x16888 "fetch") "apply"
             [|x16888;((let x16886 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x16886 "push"
                             [|(RequestInfo.t_to_js x16884)|]);
                        (match x16885 with
                         | Some x16887 ->
                             ignore
                               (Ojs.call x16886 "push"
                                  [|(RequestInit.t_to_js x16887)|])
                         | None -> ());
                        x16886))|])
let (queueMicrotask : VoidFunction.t -> unit) =
  fun (x16890 : VoidFunction.t) ->
    ignore
      (Ojs.call Ojs.global "queueMicrotask" [|(VoidFunction.t_to_js x16890)|])
let (reportError : any -> unit) =
  fun (x16891 : any) ->
    ignore (Ojs.call Ojs.global "reportError" [|(any_to_js x16891)|])
let (setInterval :
  handler:TimerHandler.t ->
    ?timeout:float -> arguments:any list -> unit -> float)
  =
  fun ~handler:(x16892 : TimerHandler.t) ->
    fun ?timeout:(x16893 : float option) ->
      fun ~arguments:(x16894 : any list) ->
        fun () ->
          Ojs.float_of_js
            (let x16898 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x16898 "setInterval") "apply"
               [|x16898;((let x16895 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x16895 "push"
                               [|(TimerHandler.t_to_js x16892)|]);
                          (match x16893 with
                           | Some x16897 ->
                               ignore
                                 (Ojs.call x16895 "push"
                                    [|(Ojs.float_to_js x16897)|])
                           | None -> ());
                          List.iter
                            (fun (x16896 : any) ->
                               ignore
                                 (Ojs.call x16895 "push"
                                    [|(any_to_js x16896)|])) x16894;
                          x16895))|])
let (setTimeout :
  handler:TimerHandler.t ->
    ?timeout:float -> arguments:any list -> unit -> float)
  =
  fun ~handler:(x16899 : TimerHandler.t) ->
    fun ?timeout:(x16900 : float option) ->
      fun ~arguments:(x16901 : any list) ->
        fun () ->
          Ojs.float_of_js
            (let x16905 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x16905 "setTimeout") "apply"
               [|x16905;((let x16902 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x16902 "push"
                               [|(TimerHandler.t_to_js x16899)|]);
                          (match x16900 with
                           | Some x16904 ->
                               ignore
                                 (Ojs.call x16902 "push"
                                    [|(Ojs.float_to_js x16904)|])
                           | None -> ());
                          List.iter
                            (fun (x16903 : any) ->
                               ignore
                                 (Ojs.call x16902 "push"
                                    [|(any_to_js x16903)|])) x16901;
                          x16902))|])
let (cancelAnimationFrame : float -> unit) =
  fun (x16906 : float) ->
    ignore
      (Ojs.call Ojs.global "cancelAnimationFrame"
         [|(Ojs.float_to_js x16906)|])
let (requestAnimationFrame : FrameRequestCallback.t -> float) =
  fun (x16907 : FrameRequestCallback.t) ->
    Ojs.float_of_js
      (Ojs.call Ojs.global "requestAnimationFrame"
         [|(FrameRequestCallback.t_to_js x16907)|])
let (addEventListener :
  type_:'K ->
    listener:(this:DedicatedWorkerGlobalScope.t -> ev:any -> any) ->
      ?options:[ `Boolean of bool  | `Other of AddEventListenerOptions.t ]
        Primitive.t -> unit -> unit)
  =
  fun ~type_:(x16908 : 'K) ->
    fun
      ~listener:(x16909 : this:DedicatedWorkerGlobalScope.t -> ev:any -> any)
      ->
      fun
        ?options:(x16910 :
                   [ `Boolean of bool 
                   | `Other of AddEventListenerOptions.t ] Primitive.t option)
        ->
        fun () ->
          ignore
            (let x16918 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x16918 "addEventListener") "apply"
               [|x16918;((let x16911 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x16911 "push" [|(Obj.magic x16908)|]);
                          ignore
                            (Ojs.call x16911 "push"
                               [|(Ojs.fun_to_js 2
                                    (fun (x16916 : Ojs.t) ->
                                       fun (x16917 : Ojs.t) ->
                                         any_to_js
                                           (x16909
                                              ~this:(DedicatedWorkerGlobalScope.t_of_js
                                                       x16916)
                                              ~ev:(any_of_js x16917))))|]);
                          (match x16910 with
                           | Some x16912 ->
                               ignore
                                 (Ojs.call x16911 "push"
                                    [|(Primitive.t_to_js
                                         (fun
                                            (x16913 :
                                              [ `Boolean of bool 
                                              | `Other of
                                                  AddEventListenerOptions.t ])
                                            ->
                                            match x16913 with
                                            | `Boolean x16914 ->
                                                Ojs.bool_to_js x16914
                                            | `Other x16915 ->
                                                AddEventListenerOptions.t_to_js
                                                  x16915) x16912)|])
                           | None -> ());
                          x16911))|])
let (addEventListener' :
  type_:string ->
    listener:EventListenerOrEventListenerObject.t ->
      ?options:[ `Boolean of bool  | `Other of AddEventListenerOptions.t ]
        Primitive.t -> unit -> unit)
  =
  fun ~type_:(x16919 : string) ->
    fun ~listener:(x16920 : EventListenerOrEventListenerObject.t) ->
      fun
        ?options:(x16921 :
                   [ `Boolean of bool 
                   | `Other of AddEventListenerOptions.t ] Primitive.t option)
        ->
        fun () ->
          ignore
            (let x16927 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x16927 "addEventListener") "apply"
               [|x16927;((let x16922 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x16922 "push"
                               [|(Ojs.string_to_js x16919)|]);
                          ignore
                            (Ojs.call x16922 "push"
                               [|(EventListenerOrEventListenerObject.t_to_js
                                    x16920)|]);
                          (match x16921 with
                           | Some x16923 ->
                               ignore
                                 (Ojs.call x16922 "push"
                                    [|(Primitive.t_to_js
                                         (fun
                                            (x16924 :
                                              [ `Boolean of bool 
                                              | `Other of
                                                  AddEventListenerOptions.t ])
                                            ->
                                            match x16924 with
                                            | `Boolean x16925 ->
                                                Ojs.bool_to_js x16925
                                            | `Other x16926 ->
                                                AddEventListenerOptions.t_to_js
                                                  x16926) x16923)|])
                           | None -> ());
                          x16922))|])
let (removeEventListener :
  type_:'K ->
    listener:(this:DedicatedWorkerGlobalScope.t -> ev:any -> any) ->
      ?options:[ `Boolean of bool  | `Other of EventListenerOptions.t ]
        Primitive.t -> unit -> unit)
  =
  fun ~type_:(x16928 : 'K) ->
    fun
      ~listener:(x16929 : this:DedicatedWorkerGlobalScope.t -> ev:any -> any)
      ->
      fun
        ?options:(x16930 :
                   [ `Boolean of bool  | `Other of EventListenerOptions.t ]
                     Primitive.t option)
        ->
        fun () ->
          ignore
            (let x16938 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x16938 "removeEventListener")
               "apply"
               [|x16938;((let x16931 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x16931 "push" [|(Obj.magic x16928)|]);
                          ignore
                            (Ojs.call x16931 "push"
                               [|(Ojs.fun_to_js 2
                                    (fun (x16936 : Ojs.t) ->
                                       fun (x16937 : Ojs.t) ->
                                         any_to_js
                                           (x16929
                                              ~this:(DedicatedWorkerGlobalScope.t_of_js
                                                       x16936)
                                              ~ev:(any_of_js x16937))))|]);
                          (match x16930 with
                           | Some x16932 ->
                               ignore
                                 (Ojs.call x16931 "push"
                                    [|(Primitive.t_to_js
                                         (fun
                                            (x16933 :
                                              [ `Boolean of bool 
                                              | `Other of
                                                  EventListenerOptions.t ])
                                            ->
                                            match x16933 with
                                            | `Boolean x16934 ->
                                                Ojs.bool_to_js x16934
                                            | `Other x16935 ->
                                                EventListenerOptions.t_to_js
                                                  x16935) x16932)|])
                           | None -> ());
                          x16931))|])
let (removeEventListener' :
  type_:string ->
    listener:EventListenerOrEventListenerObject.t ->
      ?options:[ `Boolean of bool  | `Other of EventListenerOptions.t ]
        Primitive.t -> unit -> unit)
  =
  fun ~type_:(x16939 : string) ->
    fun ~listener:(x16940 : EventListenerOrEventListenerObject.t) ->
      fun
        ?options:(x16941 :
                   [ `Boolean of bool  | `Other of EventListenerOptions.t ]
                     Primitive.t option)
        ->
        fun () ->
          ignore
            (let x16947 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x16947 "removeEventListener")
               "apply"
               [|x16947;((let x16942 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x16942 "push"
                               [|(Ojs.string_to_js x16939)|]);
                          ignore
                            (Ojs.call x16942 "push"
                               [|(EventListenerOrEventListenerObject.t_to_js
                                    x16940)|]);
                          (match x16941 with
                           | Some x16943 ->
                               ignore
                                 (Ojs.call x16942 "push"
                                    [|(Primitive.t_to_js
                                         (fun
                                            (x16944 :
                                              [ `Boolean of bool 
                                              | `Other of
                                                  EventListenerOptions.t ])
                                            ->
                                            match x16944 with
                                            | `Boolean x16945 ->
                                                Ojs.bool_to_js x16945
                                            | `Other x16946 ->
                                                EventListenerOptions.t_to_js
                                                  x16946) x16943)|])
                           | None -> ());
                          x16942))|])
