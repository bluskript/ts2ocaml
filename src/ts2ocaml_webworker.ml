[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Ts2ocaml_min
open Ts2ocaml_es
module DOMHighResTimeStamp =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> Ojs.float_of_js x2
    and t_to_js : t -> Ojs.t = fun (x1 : float) -> Ojs.float_to_js x1
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4 : Ojs.t) -> t_of_js x4
    and t_0_to_js : t_0 -> Ojs.t = fun (x3 : t) -> t_to_js x3
  end
module PerformanceMeasureOptions =
  struct
    type t = [ `PerformanceMeasureOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6 : Ojs.t) -> t_of_js x6
    and t_0_to_js : t_0 -> Ojs.t = fun (x5 : t) -> t_to_js x5
    type tags = [ `PerformanceMeasureOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceMeasureOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x9 : Ojs.t) -> intf_of_js __tags_of_js x9
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7 : __tags intf) -> intf_to_js __tags_to_js x7
    let (get_detail : 'tags this -> any option) =
      fun (x11 : 'tags this) ->
        Ojs.option_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11) "detail")
    let (set_detail : 'tags this -> any -> unit) =
      fun (x14 : 'tags this) ->
        fun (x15 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14) "detail"
            (any_to_js x15)
    let (get_duration : 'tags this -> DOMHighResTimeStamp.t option) =
      fun (x17 : 'tags this) ->
        Ojs.option_of_js DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x17) "duration")
    let (set_duration : 'tags this -> DOMHighResTimeStamp.t -> unit) =
      fun (x20 : 'tags this) ->
        fun (x21 : DOMHighResTimeStamp.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x20) "duration"
            (DOMHighResTimeStamp.t_to_js x21)
    let (get_end :
      'tags this ->
        [ `String of string  | `Undefined 
        | `Other of DOMHighResTimeStamp.t ] Primitive.t)
      =
      fun (x23 : 'tags this) ->
        Primitive.t_of_js
          (fun (x25 : Ojs.t) ->
             let x26 = x25 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x26 "dummy") with
             | "String" -> `String (Ojs.string_of_js x26)
             | "Undefined" -> `Undefined
             | "Other" -> `Other (DOMHighResTimeStamp.t_of_js x26)
             | _ -> assert false)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x23) "end")
    let (set_end :
      'tags this -> [ `U1 of string  | `U2 of DOMHighResTimeStamp.t ] -> unit)
      =
      fun (x27 : 'tags this) ->
        fun (x28 : [ `U1 of string  | `U2 of DOMHighResTimeStamp.t ]) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x27) "end"
            (match x28 with
             | `U1 x29 -> Ojs.string_to_js x29
             | `U2 x30 -> DOMHighResTimeStamp.t_to_js x30)
    let (get_start :
      'tags this ->
        [ `String of string  | `Undefined 
        | `Other of DOMHighResTimeStamp.t ] Primitive.t)
      =
      fun (x32 : 'tags this) ->
        Primitive.t_of_js
          (fun (x34 : Ojs.t) ->
             let x35 = x34 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x35 "dummy") with
             | "String" -> `String (Ojs.string_of_js x35)
             | "Undefined" -> `Undefined
             | "Other" -> `Other (DOMHighResTimeStamp.t_of_js x35)
             | _ -> assert false)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x32) "start")
    let (set_start :
      'tags this -> [ `U1 of string  | `U2 of DOMHighResTimeStamp.t ] -> unit)
      =
      fun (x36 : 'tags this) ->
        fun (x37 : [ `U1 of string  | `U2 of DOMHighResTimeStamp.t ]) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x36) "start"
            (match x37 with
             | `U1 x38 -> Ojs.string_to_js x38
             | `U2 x39 -> DOMHighResTimeStamp.t_to_js x39)
    let (create :
      ?detail:any ->
        ?duration:DOMHighResTimeStamp.t ->
          ?end_:[ `String of string  | `Other of DOMHighResTimeStamp.t ]
            Primitive.t ->
            ?start:[ `String of string  | `Other of DOMHighResTimeStamp.t ]
              Primitive.t -> unit -> t)
      =
      fun ?detail:(x41 : any option) ->
        fun ?duration:(x42 : DOMHighResTimeStamp.t option) ->
          fun
            ?end_:(x43 :
                    [ `String of string  | `Other of DOMHighResTimeStamp.t ]
                      Primitive.t option)
            ->
            fun
              ?start:(x44 :
                       [ `String of string 
                       | `Other of DOMHighResTimeStamp.t ] Primitive.t option)
              ->
              fun () ->
                let x45 = Ojs.empty_obj () in
                (match x41 with
                 | Some x55 ->
                     Ojs.set_prop_ascii x45 "detail" (any_to_js x55)
                 | None -> ());
                (match x42 with
                 | Some x54 ->
                     Ojs.set_prop_ascii x45 "duration"
                       (DOMHighResTimeStamp.t_to_js x54)
                 | None -> ());
                (match x43 with
                 | Some x50 ->
                     Ojs.set_prop_ascii x45 "end"
                       (Primitive.t_to_js
                          (fun
                             (x51 :
                               [ `String of string 
                               | `Other of DOMHighResTimeStamp.t ])
                             ->
                             match x51 with
                             | `String x52 -> Ojs.string_to_js x52
                             | `Other x53 -> DOMHighResTimeStamp.t_to_js x53)
                          x50)
                 | None -> ());
                (match x44 with
                 | Some x46 ->
                     Ojs.set_prop_ascii x45 "start"
                       (Primitive.t_to_js
                          (fun
                             (x47 :
                               [ `String of string 
                               | `Other of DOMHighResTimeStamp.t ])
                             ->
                             match x47 with
                             | `String x48 -> Ojs.string_to_js x48
                             | `Other x49 -> DOMHighResTimeStamp.t_to_js x49)
                          x46)
                 | None -> ());
                t_of_js x45
    let cast_from = Obj.magic
  end
module PerformanceEntry =
  struct
    type t = [ `PerformanceEntry ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x57 : Ojs.t) -> t_of_js x57
    and t_0_to_js : t_0 -> Ojs.t = fun (x56 : t) -> t_to_js x56
    type tags = [ `PerformanceEntry ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceEntry ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x60 : Ojs.t) -> intf_of_js __tags_of_js x60
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x58 : __tags intf) -> intf_to_js __tags_to_js x58
    let (get_duration : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x62 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x62) "duration")
    let (get_entryType : 'tags this -> string) =
      fun (x64 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x64) "entryType")
    let (get_name : 'tags this -> string) =
      fun (x66 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x66) "name")
    let (get_startTime : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x68 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x68) "startTime")
    let (toJSON : 'tags this -> any) =
      fun (x70 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x70) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceEntry") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PerformanceEntry")
             [||])
  end
module PerformanceMeasure =
  struct
    type t = [ `PerformanceEntry  | `PerformanceMeasure ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x73 : Ojs.t) -> t_of_js x73
    and t_0_to_js : t_0 -> Ojs.t = fun (x72 : t) -> t_to_js x72
    type tags = [ `PerformanceEntry  | `PerformanceMeasure ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceMeasure ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x76 : Ojs.t) -> intf_of_js __tags_of_js x76
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x74 : __tags intf) -> intf_to_js __tags_to_js x74
    let (get_detail : 'tags this -> any) =
      fun (x78 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x78) "detail")
    let (create : detail:any -> unit -> t) =
      fun ~detail:(x80 : any) ->
        fun () ->
          let x81 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x81 "detail" (any_to_js x80); t_of_js x81
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceMeasure") "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PerformanceMeasure")
             [||])
  end
module PerformanceMarkOptions =
  struct
    type t = [ `PerformanceMarkOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x83 : Ojs.t) -> t_of_js x83
    and t_0_to_js : t_0 -> Ojs.t = fun (x82 : t) -> t_to_js x82
    type tags = [ `PerformanceMarkOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceMarkOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x86 : Ojs.t) -> intf_of_js __tags_of_js x86
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x84 : __tags intf) -> intf_to_js __tags_to_js x84
    let (get_detail : 'tags this -> any option) =
      fun (x88 : 'tags this) ->
        Ojs.option_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x88) "detail")
    let (set_detail : 'tags this -> any -> unit) =
      fun (x91 : 'tags this) ->
        fun (x92 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x91) "detail"
            (any_to_js x92)
    let (get_startTime : 'tags this -> DOMHighResTimeStamp.t option) =
      fun (x94 : 'tags this) ->
        Ojs.option_of_js DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x94) "startTime")
    let (set_startTime : 'tags this -> DOMHighResTimeStamp.t -> unit) =
      fun (x97 : 'tags this) ->
        fun (x98 : DOMHighResTimeStamp.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x97) "startTime"
            (DOMHighResTimeStamp.t_to_js x98)
    let (create :
      ?detail:any -> ?startTime:DOMHighResTimeStamp.t -> unit -> t) =
      fun ?detail:(x100 : any option) ->
        fun ?startTime:(x101 : DOMHighResTimeStamp.t option) ->
          fun () ->
            let x102 = Ojs.empty_obj () in
            (match x100 with
             | Some x104 -> Ojs.set_prop_ascii x102 "detail" (any_to_js x104)
             | None -> ());
            (match x101 with
             | Some x103 ->
                 Ojs.set_prop_ascii x102 "startTime"
                   (DOMHighResTimeStamp.t_to_js x103)
             | None -> ());
            t_of_js x102
    let cast_from = Obj.magic
  end
module PerformanceMark =
  struct
    type t = [ `PerformanceEntry  | `PerformanceMark ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x106 : Ojs.t) -> t_of_js x106
    and t_0_to_js : t_0 -> Ojs.t = fun (x105 : t) -> t_to_js x105
    type tags = [ `PerformanceEntry  | `PerformanceMark ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceMark ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x109 : Ojs.t) -> intf_of_js __tags_of_js x109
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x107 : __tags intf) -> intf_to_js __tags_to_js x107
    let (get_detail : 'tags this -> any) =
      fun (x111 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x111) "detail")
    let (create : detail:any -> unit -> t) =
      fun ~detail:(x113 : any) ->
        fun () ->
          let x114 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x114 "detail" (any_to_js x113); t_of_js x114
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceMark") "prototype")
    let (create' :
      markName:string -> ?markOptions:PerformanceMarkOptions.t -> unit -> t)
      =
      fun ~markName:(x115 : string) ->
        fun ?markOptions:(x116 : PerformanceMarkOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "PerformanceMark")
                 (let x117 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x117 "push" [|(Ojs.string_to_js x115)|]);
                  (match x116 with
                   | Some x118 ->
                       ignore
                         (Ojs.call x117 "push"
                            [|(PerformanceMarkOptions.t_to_js x118)|])
                   | None -> ());
                  x117))
  end
module PerformanceEntryList =
  struct
    type t = PerformanceEntry.t list
    let rec t_of_js : Ojs.t -> t =
      fun (x121 : Ojs.t) -> Ojs.list_of_js PerformanceEntry.t_of_js x121
    and t_to_js : t -> Ojs.t =
      fun (x119 : PerformanceEntry.t list) ->
        Ojs.list_to_js PerformanceEntry.t_to_js x119
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x124 : Ojs.t) -> t_of_js x124
    and t_0_to_js : t_0 -> Ojs.t = fun (x123 : t) -> t_to_js x123
  end
module EventInit =
  struct
    type t = [ `EventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x126 : Ojs.t) -> t_of_js x126
    and t_0_to_js : t_0 -> Ojs.t = fun (x125 : t) -> t_to_js x125
    type tags = [ `EventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x129 : Ojs.t) -> intf_of_js __tags_of_js x129
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x127 : __tags intf) -> intf_to_js __tags_to_js x127
    let (get_bubbles : 'tags this -> bool option) =
      fun (x131 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x131) "bubbles")
    let (set_bubbles : 'tags this -> bool -> unit) =
      fun (x134 : 'tags this) ->
        fun (x135 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x134) "bubbles"
            (Ojs.bool_to_js x135)
    let (get_cancelable : 'tags this -> bool option) =
      fun (x137 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x137) "cancelable")
    let (set_cancelable : 'tags this -> bool -> unit) =
      fun (x140 : 'tags this) ->
        fun (x141 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x140) "cancelable"
            (Ojs.bool_to_js x141)
    let (get_composed : 'tags this -> bool option) =
      fun (x143 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x143) "composed")
    let (set_composed : 'tags this -> bool -> unit) =
      fun (x146 : 'tags this) ->
        fun (x147 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x146) "composed"
            (Ojs.bool_to_js x147)
    let (create :
      ?bubbles:bool -> ?cancelable:bool -> ?composed:bool -> unit -> t) =
      fun ?bubbles:(x149 : bool option) ->
        fun ?cancelable:(x150 : bool option) ->
          fun ?composed:(x151 : bool option) ->
            fun () ->
              let x152 = Ojs.empty_obj () in
              (match x149 with
               | Some x155 ->
                   Ojs.set_prop_ascii x152 "bubbles" (Ojs.bool_to_js x155)
               | None -> ());
              (match x150 with
               | Some x154 ->
                   Ojs.set_prop_ascii x152 "cancelable" (Ojs.bool_to_js x154)
               | None -> ());
              (match x151 with
               | Some x153 ->
                   Ojs.set_prop_ascii x152 "composed" (Ojs.bool_to_js x153)
               | None -> ());
              t_of_js x152
    let cast_from = Obj.magic
  end
module EventListenerOptions =
  struct
    type t = [ `EventListenerOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x157 : Ojs.t) -> t_of_js x157
    and t_0_to_js : t_0 -> Ojs.t = fun (x156 : t) -> t_to_js x156
    type tags = [ `EventListenerOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EventListenerOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x160 : Ojs.t) -> intf_of_js __tags_of_js x160
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x158 : __tags intf) -> intf_to_js __tags_to_js x158
    let (get_capture : 'tags this -> bool option) =
      fun (x162 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x162) "capture")
    let (set_capture : 'tags this -> bool -> unit) =
      fun (x165 : 'tags this) ->
        fun (x166 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x165) "capture"
            (Ojs.bool_to_js x166)
    let (create : ?capture:bool -> unit -> t) =
      fun ?capture:(x168 : bool option) ->
        fun () ->
          let x169 = Ojs.empty_obj () in
          (match x168 with
           | Some x170 ->
               Ojs.set_prop_ascii x169 "capture" (Ojs.bool_to_js x170)
           | None -> ());
          t_of_js x169
    let cast_from = Obj.magic
  end
module rec
  AbortSignal:sig
                type t = [ `AbortSignal  | `EventTarget ] intf
                type t_0 = t
                [@@@js.stop ]
                type tags = [ `AbortSignal  | `EventTarget ]
                type tags_0 = tags
                [@@@js.start ]
                [@@@js.implem
                  type tags = [ `AbortSignal  | `EventTarget ]
                  type tags_0 = tags]
                type 'tags this =
                  'tags intf constraint 'tags = [> `AbortSignal ]
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
                val get_aborted : 'tags this -> bool
                val get_onabort :
                  'tags this -> (this:t -> ev:Event.t -> any) option
                val set_onabort :
                  'tags this -> (this:t -> ev:Event.t -> any) option -> unit
                val addEventListener :
                  'tags this ->
                    type_:'K ->
                      listener:(this:t -> ev:any -> any) ->
                        ?options:[ `U1 of bool 
                                 | `U2 of AddEventListenerOptions.t ]
                          -> unit -> unit
                val addEventListener' :
                  'tags this ->
                    type_:string ->
                      listener:EventListenerOrEventListenerObject.t ->
                        ?options:[ `U1 of bool 
                                 | `U2 of AddEventListenerOptions.t ]
                          -> unit -> unit
                val removeEventListener :
                  'tags this ->
                    type_:'K ->
                      listener:(this:t -> ev:any -> any) ->
                        ?options:[ `U1 of bool 
                                 | `U2 of EventListenerOptions.t ]
                          -> unit -> unit
                val removeEventListener' :
                  'tags this ->
                    type_:string ->
                      listener:EventListenerOrEventListenerObject.t ->
                        ?options:[ `U1 of bool 
                                 | `U2 of EventListenerOptions.t ]
                          -> unit -> unit
                val cast_from : 'tags this -> t
                val prototype : unit -> t
                val create : unit -> t
              end =
  struct
    type t = [ `AbortSignal  | `EventTarget ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x172 : Ojs.t) -> t_of_js x172
    and t_0_to_js : t_0 -> Ojs.t = fun (x171 : t) -> t_to_js x171
    type tags = [ `AbortSignal  | `EventTarget ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AbortSignal ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x175 : Ojs.t) -> intf_of_js __tags_of_js x175
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x173 : __tags intf) -> intf_to_js __tags_to_js x173
    let (get_aborted : 'tags this -> bool) =
      fun (x177 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x177) "aborted")
    let (get_onabort : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x179 : 'tags this) ->
        Ojs.option_of_js
          (fun (x181 : Ojs.t) ->
             fun ~this:(x182 : t) ->
               fun ~ev:(x183 : Event.t) ->
                 any_of_js
                   (Ojs.apply x181 [|(t_to_js x182);(Event.t_to_js x183)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x179) "onabort")
    let (set_onabort :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x184 : 'tags this) ->
        fun (x185 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x184) "onabort"
            (Ojs.option_to_js
               (fun (x186 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x187 : Ojs.t) ->
                       fun (x188 : Ojs.t) ->
                         any_to_js
                           (x186 ~this:(t_of_js x187)
                              ~ev:(Event.t_of_js x188)))) x185)
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x199 : 'tags this) ->
        fun ~type_:(x190 : 'K) ->
          fun ~listener:(x191 : this:t -> ev:any -> any) ->
            fun
              ?options:(x192 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x201 = this_to_js Obj.magic x199 in
                   Ojs.call (Ojs.get_prop_ascii x201 "addEventListener")
                     "apply"
                     [|x201;((let x193 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x193 "push" [|(Obj.magic x190)|]);
                              ignore
                                (Ojs.call x193 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x197 : Ojs.t) ->
                                           fun (x198 : Ojs.t) ->
                                             any_to_js
                                               (x191 ~this:(t_of_js x197)
                                                  ~ev:(any_of_js x198))))|]);
                              (match x192 with
                               | Some x194 ->
                                   ignore
                                     (Ojs.call x193 "push"
                                        [|((match x194 with
                                            | `U1 x195 -> Ojs.bool_to_js x195
                                            | `U2 x196 ->
                                                AddEventListenerOptions.t_to_js
                                                  x196))|])
                               | None -> ());
                              x193))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x209 : 'tags this) ->
        fun ~type_:(x202 : string) ->
          fun ~listener:(x203 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x204 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x211 = this_to_js Obj.magic x209 in
                   Ojs.call (Ojs.get_prop_ascii x211 "addEventListener")
                     "apply"
                     [|x211;((let x205 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x205 "push"
                                   [|(Ojs.string_to_js x202)|]);
                              ignore
                                (Ojs.call x205 "push"
                                   [|(EventListenerOrEventListenerObject.t_to_js
                                        x203)|]);
                              (match x204 with
                               | Some x206 ->
                                   ignore
                                     (Ojs.call x205 "push"
                                        [|((match x206 with
                                            | `U1 x207 -> Ojs.bool_to_js x207
                                            | `U2 x208 ->
                                                AddEventListenerOptions.t_to_js
                                                  x208))|])
                               | None -> ());
                              x205))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x221 : 'tags this) ->
        fun ~type_:(x212 : 'K) ->
          fun ~listener:(x213 : this:t -> ev:any -> any) ->
            fun
              ?options:(x214 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x223 = this_to_js Obj.magic x221 in
                   Ojs.call (Ojs.get_prop_ascii x223 "removeEventListener")
                     "apply"
                     [|x223;((let x215 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x215 "push" [|(Obj.magic x212)|]);
                              ignore
                                (Ojs.call x215 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x219 : Ojs.t) ->
                                           fun (x220 : Ojs.t) ->
                                             any_to_js
                                               (x213 ~this:(t_of_js x219)
                                                  ~ev:(any_of_js x220))))|]);
                              (match x214 with
                               | Some x216 ->
                                   ignore
                                     (Ojs.call x215 "push"
                                        [|((match x216 with
                                            | `U1 x217 -> Ojs.bool_to_js x217
                                            | `U2 x218 ->
                                                EventListenerOptions.t_to_js
                                                  x218))|])
                               | None -> ());
                              x215))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x231 : 'tags this) ->
        fun ~type_:(x224 : string) ->
          fun ~listener:(x225 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x226 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x233 = this_to_js Obj.magic x231 in
                   Ojs.call (Ojs.get_prop_ascii x233 "removeEventListener")
                     "apply"
                     [|x233;((let x227 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x227 "push"
                                   [|(Ojs.string_to_js x224)|]);
                              ignore
                                (Ojs.call x227 "push"
                                   [|(EventListenerOrEventListenerObject.t_to_js
                                        x225)|]);
                              (match x226 with
                               | Some x228 ->
                                   ignore
                                     (Ojs.call x227 "push"
                                        [|((match x228 with
                                            | `U1 x229 -> Ojs.bool_to_js x229
                                            | `U2 x230 ->
                                                EventListenerOptions.t_to_js
                                                  x230))|])
                               | None -> ());
                              x227))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "AbortSignal")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "AbortSignal") [||])
  end
 and
  AddEventListenerOptions:sig
                            type t =
                              [ `AddEventListenerOptions 
                              | `EventListenerOptions ] intf
                            type t_0 = t
                            [@@@js.stop ]
                            type tags =
                              [ `AddEventListenerOptions 
                              | `EventListenerOptions ]
                            type tags_0 = tags
                            [@@@js.start ]
                            [@@@js.implem
                              type tags =
                                [ `AddEventListenerOptions 
                                | `EventListenerOptions ]
                              type tags_0 = tags]
                            type 'tags this =
                              'tags intf constraint 'tags =
                                          [> `AddEventListenerOptions ]
                            val t_to_js : t -> Ojs.t
                            val t_of_js : Ojs.t -> t
                            val t_0_to_js : t_0 -> Ojs.t
                            val t_0_of_js : Ojs.t -> t_0
                            val get_once : 'tags this -> bool option
                            val set_once : 'tags this -> bool -> unit
                            val get_passive : 'tags this -> bool option
                            val set_passive : 'tags this -> bool -> unit
                            val get_signal :
                              'tags this -> AbortSignal.t option
                            val set_signal :
                              'tags this -> AbortSignal.t -> unit
                            val create :
                              ?once:bool ->
                                ?passive:bool ->
                                  ?signal:AbortSignal.t -> unit -> t
                            val cast_from : 'tags this -> t
                          end =
  struct
    type t = [ `AddEventListenerOptions  | `EventListenerOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x235 : Ojs.t) -> t_of_js x235
    and t_0_to_js : t_0 -> Ojs.t = fun (x234 : t) -> t_to_js x234
    type tags = [ `AddEventListenerOptions  | `EventListenerOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `AddEventListenerOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x238 : Ojs.t) -> intf_of_js __tags_of_js x238
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x236 : __tags intf) -> intf_to_js __tags_to_js x236
    let (get_once : 'tags this -> bool option) =
      fun (x240 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x240) "once")
    let (set_once : 'tags this -> bool -> unit) =
      fun (x243 : 'tags this) ->
        fun (x244 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x243) "once"
            (Ojs.bool_to_js x244)
    let (get_passive : 'tags this -> bool option) =
      fun (x246 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x246) "passive")
    let (set_passive : 'tags this -> bool -> unit) =
      fun (x249 : 'tags this) ->
        fun (x250 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x249) "passive"
            (Ojs.bool_to_js x250)
    let (get_signal : 'tags this -> AbortSignal.t option) =
      fun (x252 : 'tags this) ->
        Ojs.option_of_js AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x252) "signal")
    let (set_signal : 'tags this -> AbortSignal.t -> unit) =
      fun (x255 : 'tags this) ->
        fun (x256 : AbortSignal.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x255) "signal"
            (AbortSignal.t_to_js x256)
    let (create :
      ?once:bool -> ?passive:bool -> ?signal:AbortSignal.t -> unit -> t) =
      fun ?once:(x258 : bool option) ->
        fun ?passive:(x259 : bool option) ->
          fun ?signal:(x260 : AbortSignal.t option) ->
            fun () ->
              let x261 = Ojs.empty_obj () in
              (match x258 with
               | Some x264 ->
                   Ojs.set_prop_ascii x261 "once" (Ojs.bool_to_js x264)
               | None -> ());
              (match x259 with
               | Some x263 ->
                   Ojs.set_prop_ascii x261 "passive" (Ojs.bool_to_js x263)
               | None -> ());
              (match x260 with
               | Some x262 ->
                   Ojs.set_prop_ascii x261 "signal"
                     (AbortSignal.t_to_js x262)
               | None -> ());
              t_of_js x261
    let cast_from = Obj.magic
  end and
       Event:sig
               type t = [ `Event ] intf
               type t_0 = t
               [@@@js.stop ]
               type tags = [ `Event ]
               type tags_0 = tags
               [@@@js.start ]
               [@@@js.implem type tags = [ `Event ]
                 type tags_0 = tags]
               type 'tags this = 'tags intf constraint 'tags = [> `Event ]
               val t_to_js : t -> Ojs.t
               val t_of_js : Ojs.t -> t
               val t_0_to_js : t_0 -> Ojs.t
               val t_0_of_js : Ojs.t -> t_0
               val get_bubbles : 'tags this -> bool
               val get_cancelBubble : 'tags this -> bool
               val set_cancelBubble : 'tags this -> bool -> unit
               val get_cancelable : 'tags this -> bool
               val get_composed : 'tags this -> bool
               val get_currentTarget : 'tags this -> EventTarget.t option
               val get_defaultPrevented : 'tags this -> bool
               val get_eventPhase : 'tags this -> float
               val get_isTrusted : 'tags this -> bool
               val get_returnValue : 'tags this -> bool
               val set_returnValue : 'tags this -> bool -> unit
               val get_srcElement : 'tags this -> EventTarget.t option
               val get_target : 'tags this -> EventTarget.t option
               val get_timeStamp : 'tags this -> DOMHighResTimeStamp.t
               val get_type : 'tags this -> string
               val composedPath : 'tags this -> EventTarget.t list
               val initEvent :
                 'tags this ->
                   type_:string ->
                     ?bubbles:bool -> ?cancelable:bool -> unit -> unit
               val preventDefault : 'tags this -> unit
               val stopImmediatePropagation : 'tags this -> unit
               val stopPropagation : 'tags this -> unit
               val get_AT_TARGET : 'tags this -> float
               val get_BUBBLING_PHASE : 'tags this -> float
               val get_CAPTURING_PHASE : 'tags this -> float
               val get_NONE : 'tags this -> float
               val cast_from : 'tags this -> t
               val prototype : unit -> t
               val create :
                 type_:string -> ?eventInitDict:EventInit.t -> unit -> t
               val at_target : unit -> float
               val bubbling_phase : unit -> float
               val capturing_phase : unit -> float
               val none : unit -> float
             end =
       struct
         type t = [ `Event ] intf
         let rec t_of_js : Ojs.t -> t = Obj.magic
         and t_to_js : t -> Ojs.t = Obj.magic
         type t_0 = t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x266 : Ojs.t) -> t_of_js x266
         and t_0_to_js : t_0 -> Ojs.t = fun (x265 : t) -> t_to_js x265
         type tags = [ `Event ]
         type tags_0 = tags
         type 'tags this = 'tags intf constraint 'tags = [> `Event ]
         let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
           =
           fun (type __tags) ->
             fun (__tags_of_js : Ojs.t -> __tags) ->
               fun (x269 : Ojs.t) -> intf_of_js __tags_of_js x269
         and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
           fun (type __tags) ->
             fun (__tags_to_js : __tags -> Ojs.t) ->
               fun (x267 : __tags intf) -> intf_to_js __tags_to_js x267
         let (get_bubbles : 'tags this -> bool) =
           fun (x271 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x271) "bubbles")
         let (get_cancelBubble : 'tags this -> bool) =
           fun (x273 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x273) "cancelBubble")
         let (set_cancelBubble : 'tags this -> bool -> unit) =
           fun (x275 : 'tags this) ->
             fun (x276 : bool) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x275) "cancelBubble"
                 (Ojs.bool_to_js x276)
         let (get_cancelable : 'tags this -> bool) =
           fun (x278 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x278) "cancelable")
         let (get_composed : 'tags this -> bool) =
           fun (x280 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x280) "composed")
         let (get_currentTarget : 'tags this -> EventTarget.t option) =
           fun (x282 : 'tags this) ->
             Ojs.option_of_js EventTarget.t_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x282)
                  "currentTarget")
         let (get_defaultPrevented : 'tags this -> bool) =
           fun (x285 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x285)
                  "defaultPrevented")
         let (get_eventPhase : 'tags this -> float) =
           fun (x287 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x287) "eventPhase")
         let (get_isTrusted : 'tags this -> bool) =
           fun (x289 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x289) "isTrusted")
         let (get_returnValue : 'tags this -> bool) =
           fun (x291 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x291) "returnValue")
         let (set_returnValue : 'tags this -> bool -> unit) =
           fun (x293 : 'tags this) ->
             fun (x294 : bool) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x293) "returnValue"
                 (Ojs.bool_to_js x294)
         let (get_srcElement : 'tags this -> EventTarget.t option) =
           fun (x296 : 'tags this) ->
             Ojs.option_of_js EventTarget.t_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x296) "srcElement")
         let (get_target : 'tags this -> EventTarget.t option) =
           fun (x299 : 'tags this) ->
             Ojs.option_of_js EventTarget.t_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x299) "target")
         let (get_timeStamp : 'tags this -> DOMHighResTimeStamp.t) =
           fun (x302 : 'tags this) ->
             DOMHighResTimeStamp.t_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x302) "timeStamp")
         let (get_type : 'tags this -> string) =
           fun (x304 : 'tags this) ->
             Ojs.string_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x304) "type")
         let (composedPath : 'tags this -> EventTarget.t list) =
           fun (x306 : 'tags this) ->
             Ojs.list_of_js EventTarget.t_of_js
               (Ojs.call (this_to_js Obj.magic x306) "composedPath" [||])
         let (initEvent :
           'tags this ->
             type_:string ->
               ?bubbles:bool -> ?cancelable:bool -> unit -> unit)
           =
           fun (x315 : 'tags this) ->
             fun ~type_:(x309 : string) ->
               fun ?bubbles:(x310 : bool option) ->
                 fun ?cancelable:(x311 : bool option) ->
                   fun () ->
                     ignore
                       (let x317 = this_to_js Obj.magic x315 in
                        Ojs.call (Ojs.get_prop_ascii x317 "initEvent")
                          "apply"
                          [|x317;((let x312 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x312 "push"
                                        [|(Ojs.string_to_js x309)|]);
                                   (match x310 with
                                    | Some x314 ->
                                        ignore
                                          (Ojs.call x312 "push"
                                             [|(Ojs.bool_to_js x314)|])
                                    | None -> ());
                                   (match x311 with
                                    | Some x313 ->
                                        ignore
                                          (Ojs.call x312 "push"
                                             [|(Ojs.bool_to_js x313)|])
                                    | None -> ());
                                   x312))|])
         let (preventDefault : 'tags this -> unit) =
           fun (x318 : 'tags this) ->
             ignore
               (Ojs.call (this_to_js Obj.magic x318) "preventDefault" [||])
         let (stopImmediatePropagation : 'tags this -> unit) =
           fun (x320 : 'tags this) ->
             ignore
               (Ojs.call (this_to_js Obj.magic x320)
                  "stopImmediatePropagation" [||])
         let (stopPropagation : 'tags this -> unit) =
           fun (x322 : 'tags this) ->
             ignore
               (Ojs.call (this_to_js Obj.magic x322) "stopPropagation" [||])
         let (get_AT_TARGET : 'tags this -> float) =
           fun (x324 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x324) "AT_TARGET")
         let (get_BUBBLING_PHASE : 'tags this -> float) =
           fun (x326 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x326)
                  "BUBBLING_PHASE")
         let (get_CAPTURING_PHASE : 'tags this -> float) =
           fun (x328 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x328)
                  "CAPTURING_PHASE")
         let (get_NONE : 'tags this -> float) =
           fun (x330 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x330) "NONE")
         let cast_from = Obj.magic
         let (prototype : unit -> t) =
           fun () ->
             t_of_js
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Event")
                  "prototype")
         let (create :
           type_:string -> ?eventInitDict:EventInit.t -> unit -> t) =
           fun ~type_:(x332 : string) ->
             fun ?eventInitDict:(x333 : EventInit.t option) ->
               fun () ->
                 t_of_js
                   (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Event")
                      (let x334 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       ignore
                         (Ojs.call x334 "push" [|(Ojs.string_to_js x332)|]);
                       (match x333 with
                        | Some x335 ->
                            ignore
                              (Ojs.call x334 "push"
                                 [|(EventInit.t_to_js x335)|])
                        | None -> ());
                       x334))
         let (at_target : unit -> float) =
           fun () ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Event")
                  "AT_TARGET")
         let (bubbling_phase : unit -> float) =
           fun () ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Event")
                  "BUBBLING_PHASE")
         let (capturing_phase : unit -> float) =
           fun () ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Event")
                  "CAPTURING_PHASE")
         let (none : unit -> float) =
           fun () ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Event")
                  "NONE")
       end and
            EventListener:sig
                            type t = [ `EventListener ] intf
                            type t_0 = t
                            [@@@js.stop ]
                            type tags = [ `EventListener ]
                            type tags_0 = tags
                            [@@@js.start ]
                            [@@@js.implem
                              type tags = [ `EventListener ]
                              type tags_0 = tags]
                            type 'tags this =
                              'tags intf constraint 'tags =
                                          [> `EventListener ]
                            val t_to_js : t -> Ojs.t
                            val t_of_js : Ojs.t -> t
                            val t_0_to_js : t_0 -> Ojs.t
                            val t_0_of_js : Ojs.t -> t_0
                            val apply : 'tags this -> evt:Event.t -> unit
                            val cast_from : 'tags this -> t
                          end =
            struct
              type t = [ `EventListener ] intf
              let rec t_of_js : Ojs.t -> t = Obj.magic
              and t_to_js : t -> Ojs.t = Obj.magic
              type t_0 = t
              let rec t_0_of_js : Ojs.t -> t_0 =
                fun (x337 : Ojs.t) -> t_of_js x337
              and t_0_to_js : t_0 -> Ojs.t = fun (x336 : t) -> t_to_js x336
              type tags = [ `EventListener ]
              type tags_0 = tags
              type 'tags this =
                'tags intf constraint 'tags = [> `EventListener ]
              let rec this_of_js :
                'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
                fun (type __tags) ->
                  fun (__tags_of_js : Ojs.t -> __tags) ->
                    fun (x340 : Ojs.t) -> intf_of_js __tags_of_js x340
              and this_to_js :
                'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
                fun (type __tags) ->
                  fun (__tags_to_js : __tags -> Ojs.t) ->
                    fun (x338 : __tags intf) -> intf_to_js __tags_to_js x338
              let (apply : 'tags this -> evt:Event.t -> unit) =
                fun (x343 : 'tags this) ->
                  fun ~evt:(x342 : Event.t) ->
                    ignore
                      (Ojs.apply (this_to_js Obj.magic x343)
                         [|(Event.t_to_js x342)|])
              let cast_from = Obj.magic
            end and
                 EventListenerObject:sig
                                       type t = [ `EventListenerObject ] intf
                                       type t_0 = t
                                       [@@@js.stop ]
                                       type tags = [ `EventListenerObject ]
                                       type tags_0 = tags
                                       [@@@js.start ]
                                       [@@@js.implem
                                         type tags = [ `EventListenerObject ]
                                         type tags_0 = tags]
                                       type 'tags this =
                                         'tags intf constraint 'tags =
                                                     [>
                                                       `EventListenerObject ]
                                       val t_to_js : t -> Ojs.t
                                       val t_of_js : Ojs.t -> t
                                       val t_0_to_js : t_0 -> Ojs.t
                                       val t_0_of_js : Ojs.t -> t_0
                                       val handleEvent :
                                         'tags this ->
                                           object_:Event.t -> unit
                                       val cast_from : 'tags this -> t
                                     end =
                 struct
                   type t = [ `EventListenerObject ] intf
                   let rec t_of_js : Ojs.t -> t = Obj.magic
                   and t_to_js : t -> Ojs.t = Obj.magic
                   type t_0 = t
                   let rec t_0_of_js : Ojs.t -> t_0 =
                     fun (x346 : Ojs.t) -> t_of_js x346
                   and t_0_to_js : t_0 -> Ojs.t =
                     fun (x345 : t) -> t_to_js x345
                   type tags = [ `EventListenerObject ]
                   type tags_0 = tags
                   type 'tags this =
                     'tags intf constraint 'tags = [> `EventListenerObject ]
                   let rec this_of_js :
                     'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
                     fun (type __tags) ->
                       fun (__tags_of_js : Ojs.t -> __tags) ->
                         fun (x349 : Ojs.t) -> intf_of_js __tags_of_js x349
                   and this_to_js :
                     'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
                     fun (type __tags) ->
                       fun (__tags_to_js : __tags -> Ojs.t) ->
                         fun (x347 : __tags intf) ->
                           intf_to_js __tags_to_js x347
                   let (handleEvent : 'tags this -> object_:Event.t -> unit)
                     =
                     fun (x352 : 'tags this) ->
                       fun ~object_:(x351 : Event.t) ->
                         ignore
                           (Ojs.call (this_to_js Obj.magic x352)
                              "handleEvent" [|(Event.t_to_js x351)|])
                   let cast_from = Obj.magic
                 end and
                      EventListenerOrEventListenerObject:sig
                                                           type t =
                                                             (EventListener.t,
                                                               EventListenerObject.t)
                                                               union2
                                                           type t_0 = t
                                                           val t_to_js :
                                                             t -> Ojs.t
                                                           val t_of_js :
                                                             Ojs.t -> t
                                                           val t_0_to_js :
                                                             t_0 -> Ojs.t
                                                           val t_0_of_js :
                                                             Ojs.t -> t_0
                                                         end =
                      struct
                        type t =
                          (EventListener.t, EventListenerObject.t) union2
                        let rec t_of_js : Ojs.t -> t =
                          fun (x357 : Ojs.t) ->
                            union2_of_js EventListener.t_of_js
                              EventListenerObject.t_of_js x357
                        and t_to_js : t -> Ojs.t =
                          fun
                            (x354 :
                              (EventListener.t, EventListenerObject.t) union2)
                            ->
                            union2_to_js EventListener.t_to_js
                              EventListenerObject.t_to_js x354
                        type t_0 = t
                        let rec t_0_of_js : Ojs.t -> t_0 =
                          fun (x361 : Ojs.t) -> t_of_js x361
                        and t_0_to_js : t_0 -> Ojs.t =
                          fun (x360 : t) -> t_to_js x360
                      end and
                           EventTarget:sig
                                         type t = [ `EventTarget ] intf
                                         type t_0 = t
                                         [@@@js.stop ]
                                         type tags = [ `EventTarget ]
                                         type tags_0 = tags
                                         [@@@js.start ]
                                         [@@@js.implem
                                           type tags = [ `EventTarget ]
                                           type tags_0 = tags]
                                         type 'tags this =
                                           'tags intf constraint 'tags =
                                                       [> `EventTarget ]
                                         val t_to_js : t -> Ojs.t
                                         val t_of_js : Ojs.t -> t
                                         val t_0_to_js : t_0 -> Ojs.t
                                         val t_0_of_js : Ojs.t -> t_0
                                         val addEventListener :
                                           'tags this ->
                                             type_:string ->
                                               callback:EventListenerOrEventListenerObject.t
                                                 option ->
                                                 ?options:[
                                                            `U1 of
                                                              AddEventListenerOptions.t
                                                               | `U2 of bool ]
                                                   -> unit -> unit
                                         val dispatchEvent :
                                           'tags this ->
                                             event:Event.t -> bool
                                         val removeEventListener :
                                           'tags this ->
                                             type_:string ->
                                               callback:EventListenerOrEventListenerObject.t
                                                 option ->
                                                 ?options:[
                                                            `U1 of
                                                              EventListenerOptions.t
                                                               | `U2 of bool ]
                                                   -> unit -> unit
                                         val cast_from : 'tags this -> t
                                         val prototype : unit -> t
                                         val create : unit -> t
                                       end =
                           struct
                             type t = [ `EventTarget ] intf
                             let rec t_of_js : Ojs.t -> t = Obj.magic
                             and t_to_js : t -> Ojs.t = Obj.magic
                             type t_0 = t
                             let rec t_0_of_js : Ojs.t -> t_0 =
                               fun (x363 : Ojs.t) -> t_of_js x363
                             and t_0_to_js : t_0 -> Ojs.t =
                               fun (x362 : t) -> t_to_js x362
                             type tags = [ `EventTarget ]
                             type tags_0 = tags
                             type 'tags this =
                               'tags intf constraint 'tags =
                                           [> `EventTarget ]
                             let rec this_of_js :
                               'tags .
                                 (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
                               =
                               fun (type __tags) ->
                                 fun (__tags_of_js : Ojs.t -> __tags) ->
                                   fun (x366 : Ojs.t) ->
                                     intf_of_js __tags_of_js x366
                             and this_to_js :
                               'tags .
                                 ('tags -> Ojs.t) -> 'tags this -> Ojs.t
                               =
                               fun (type __tags) ->
                                 fun (__tags_to_js : __tags -> Ojs.t) ->
                                   fun (x364 : __tags intf) ->
                                     intf_to_js __tags_to_js x364
                             let (addEventListener :
                               'tags this ->
                                 type_:string ->
                                   callback:EventListenerOrEventListenerObject.t
                                     option ->
                                     ?options:[
                                                `U1 of
                                                  AddEventListenerOptions.t 
                                              | `U2 of bool ]
                                       -> unit -> unit)
                               =
                               fun (x376 : 'tags this) ->
                                 fun ~type_:(x368 : string) ->
                                   fun
                                     ~callback:(x369 :
                                                 EventListenerOrEventListenerObject.t
                                                   option)
                                     ->
                                     fun
                                       ?options:(x370 :
                                                  [
                                                    `U1 of
                                                      AddEventListenerOptions.t
                                                       | `U2 of bool ]
                                                    option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x378 =
                                              this_to_js Obj.magic x376 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x378
                                                 "addEventListener") "apply"
                                              [|x378;((let x371 =
                                                         Ojs.new_obj
                                                           (Ojs.get_prop_ascii
                                                              Ojs.global
                                                              "Array") 
                                                           [||] in
                                                       ignore
                                                         (Ojs.call x371
                                                            "push"
                                                            [|(Ojs.string_to_js
                                                                 x368)|]);
                                                       ignore
                                                         (Ojs.call x371
                                                            "push"
                                                            [|(Ojs.option_to_js
                                                                 EventListenerOrEventListenerObject.t_to_js
                                                                 x369)|]);
                                                       (match x370 with
                                                        | Some x372 ->
                                                            ignore
                                                              (Ojs.call x371
                                                                 "push"
                                                                 [|((
                                                                   match x372
                                                                   with
                                                                   | 
                                                                   `U1 x373
                                                                    ->
                                                                    AddEventListenerOptions.t_to_js
                                                                    x373
                                                                   | 
                                                                   `U2 x374
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x374))|])
                                                        | None -> ());
                                                       x371))|])
                             let (dispatchEvent :
                               'tags this -> event:Event.t -> bool) =
                               fun (x380 : 'tags this) ->
                                 fun ~event:(x379 : Event.t) ->
                                   Ojs.bool_of_js
                                     (Ojs.call (this_to_js Obj.magic x380)
                                        "dispatchEvent"
                                        [|(Event.t_to_js x379)|])
                             let (removeEventListener :
                               'tags this ->
                                 type_:string ->
                                   callback:EventListenerOrEventListenerObject.t
                                     option ->
                                     ?options:[
                                                `U1 of EventListenerOptions.t 
                                              | `U2 of bool ]
                                       -> unit -> unit)
                               =
                               fun (x390 : 'tags this) ->
                                 fun ~type_:(x382 : string) ->
                                   fun
                                     ~callback:(x383 :
                                                 EventListenerOrEventListenerObject.t
                                                   option)
                                     ->
                                     fun
                                       ?options:(x384 :
                                                  [
                                                    `U1 of
                                                      EventListenerOptions.t 
                                                  | `U2 of bool ] option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x392 =
                                              this_to_js Obj.magic x390 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x392
                                                 "removeEventListener")
                                              "apply"
                                              [|x392;((let x385 =
                                                         Ojs.new_obj
                                                           (Ojs.get_prop_ascii
                                                              Ojs.global
                                                              "Array") 
                                                           [||] in
                                                       ignore
                                                         (Ojs.call x385
                                                            "push"
                                                            [|(Ojs.string_to_js
                                                                 x382)|]);
                                                       ignore
                                                         (Ojs.call x385
                                                            "push"
                                                            [|(Ojs.option_to_js
                                                                 EventListenerOrEventListenerObject.t_to_js
                                                                 x383)|]);
                                                       (match x384 with
                                                        | Some x386 ->
                                                            ignore
                                                              (Ojs.call x385
                                                                 "push"
                                                                 [|((
                                                                   match x386
                                                                   with
                                                                   | 
                                                                   `U1 x387
                                                                    ->
                                                                    EventListenerOptions.t_to_js
                                                                    x387
                                                                   | 
                                                                   `U2 x388
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x388))|])
                                                        | None -> ());
                                                       x385))|])
                             let cast_from = Obj.magic
                             let (prototype : unit -> t) =
                               fun () ->
                                 t_of_js
                                   (Ojs.get_prop_ascii
                                      (Ojs.get_prop_ascii Ojs.global
                                         "EventTarget") "prototype")
                             let (create : unit -> t) =
                               fun () ->
                                 t_of_js
                                   (Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global
                                         "EventTarget") [||])
                           end
module Performance =
  struct
    type t = [ `EventTarget  | `Performance ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x394 : Ojs.t) -> t_of_js x394
    and t_0_to_js : t_0 -> Ojs.t = fun (x393 : t) -> t_to_js x393
    type tags = [ `EventTarget  | `Performance ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Performance ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x397 : Ojs.t) -> intf_of_js __tags_of_js x397
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x395 : __tags intf) -> intf_to_js __tags_to_js x395
    let (get_onresourcetimingbufferfull :
      'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x399 : 'tags this) ->
        Ojs.option_of_js
          (fun (x401 : Ojs.t) ->
             fun ~this:(x402 : t) ->
               fun ~ev:(x403 : Event.t) ->
                 any_of_js
                   (Ojs.apply x401 [|(t_to_js x402);(Event.t_to_js x403)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x399)
             "onresourcetimingbufferfull")
    let (set_onresourcetimingbufferfull :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x404 : 'tags this) ->
        fun (x405 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x404)
            "onresourcetimingbufferfull"
            (Ojs.option_to_js
               (fun (x406 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x407 : Ojs.t) ->
                       fun (x408 : Ojs.t) ->
                         any_to_js
                           (x406 ~this:(t_of_js x407)
                              ~ev:(Event.t_of_js x408)))) x405)
    let (get_timeOrigin : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x410 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x410) "timeOrigin")
    let (clearMarks : 'tags this -> ?markName:string -> unit -> unit) =
      fun (x415 : 'tags this) ->
        fun ?markName:(x412 : string option) ->
          fun () ->
            ignore
              (let x417 = this_to_js Obj.magic x415 in
               Ojs.call (Ojs.get_prop_ascii x417 "clearMarks") "apply"
                 [|x417;((let x413 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x412 with
                           | Some x414 ->
                               ignore
                                 (Ojs.call x413 "push"
                                    [|(Ojs.string_to_js x414)|])
                           | None -> ());
                          x413))|])
    let (clearMeasures : 'tags this -> ?measureName:string -> unit -> unit) =
      fun (x421 : 'tags this) ->
        fun ?measureName:(x418 : string option) ->
          fun () ->
            ignore
              (let x423 = this_to_js Obj.magic x421 in
               Ojs.call (Ojs.get_prop_ascii x423 "clearMeasures") "apply"
                 [|x423;((let x419 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x418 with
                           | Some x420 ->
                               ignore
                                 (Ojs.call x419 "push"
                                    [|(Ojs.string_to_js x420)|])
                           | None -> ());
                          x419))|])
    let (clearResourceTimings : 'tags this -> unit) =
      fun (x424 : 'tags this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic x424) "clearResourceTimings" [||])
    let (getEntries : 'tags this -> PerformanceEntryList.t) =
      fun (x426 : 'tags this) ->
        PerformanceEntryList.t_of_js
          (Ojs.call (this_to_js Obj.magic x426) "getEntries" [||])
    let (getEntriesByName :
      'tags this ->
        name:string -> ?type_:string -> unit -> PerformanceEntryList.t)
      =
      fun (x432 : 'tags this) ->
        fun ~name:(x428 : string) ->
          fun ?type_:(x429 : string option) ->
            fun () ->
              PerformanceEntryList.t_of_js
                (let x434 = this_to_js Obj.magic x432 in
                 Ojs.call (Ojs.get_prop_ascii x434 "getEntriesByName")
                   "apply"
                   [|x434;((let x430 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x430 "push"
                                 [|(Ojs.string_to_js x428)|]);
                            (match x429 with
                             | Some x431 ->
                                 ignore
                                   (Ojs.call x430 "push"
                                      [|(Ojs.string_to_js x431)|])
                             | None -> ());
                            x430))|])
    let (getEntriesByType :
      'tags this -> type_:string -> PerformanceEntryList.t) =
      fun (x436 : 'tags this) ->
        fun ~type_:(x435 : string) ->
          PerformanceEntryList.t_of_js
            (Ojs.call (this_to_js Obj.magic x436) "getEntriesByType"
               [|(Ojs.string_to_js x435)|])
    let (mark :
      'tags this ->
        markName:string ->
          ?markOptions:PerformanceMarkOptions.t -> unit -> PerformanceMark.t)
      =
      fun (x442 : 'tags this) ->
        fun ~markName:(x438 : string) ->
          fun ?markOptions:(x439 : PerformanceMarkOptions.t option) ->
            fun () ->
              PerformanceMark.t_of_js
                (let x444 = this_to_js Obj.magic x442 in
                 Ojs.call (Ojs.get_prop_ascii x444 "mark") "apply"
                   [|x444;((let x440 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x440 "push"
                                 [|(Ojs.string_to_js x438)|]);
                            (match x439 with
                             | Some x441 ->
                                 ignore
                                   (Ojs.call x440 "push"
                                      [|(PerformanceMarkOptions.t_to_js x441)|])
                             | None -> ());
                            x440))|])
    let (measure :
      'tags this ->
        measureName:string ->
          ?startOrMeasureOptions:[ `U1 of string 
                                 | `U2 of PerformanceMeasureOptions.t ]
            -> ?endMark:string -> unit -> PerformanceMeasure.t)
      =
      fun (x453 : 'tags this) ->
        fun ~measureName:(x445 : string) ->
          fun
            ?startOrMeasureOptions:(x446 :
                                     [ `U1 of string 
                                     | `U2 of PerformanceMeasureOptions.t ]
                                       option)
            ->
            fun ?endMark:(x447 : string option) ->
              fun () ->
                PerformanceMeasure.t_of_js
                  (let x455 = this_to_js Obj.magic x453 in
                   Ojs.call (Ojs.get_prop_ascii x455 "measure") "apply"
                     [|x455;((let x448 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x448 "push"
                                   [|(Ojs.string_to_js x445)|]);
                              (match x446 with
                               | Some x450 ->
                                   ignore
                                     (Ojs.call x448 "push"
                                        [|((match x450 with
                                            | `U1 x451 ->
                                                Ojs.string_to_js x451
                                            | `U2 x452 ->
                                                PerformanceMeasureOptions.t_to_js
                                                  x452))|])
                               | None -> ());
                              (match x447 with
                               | Some x449 ->
                                   ignore
                                     (Ojs.call x448 "push"
                                        [|(Ojs.string_to_js x449)|])
                               | None -> ());
                              x448))|])
    let (now : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x456 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.call (this_to_js Obj.magic x456) "now" [||])
    let (setResourceTimingBufferSize : 'tags this -> maxSize:float -> unit) =
      fun (x459 : 'tags this) ->
        fun ~maxSize:(x458 : float) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x459)
               "setResourceTimingBufferSize" [|(Ojs.float_to_js x458)|])
    let (toJSON : 'tags this -> any) =
      fun (x461 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x461) "toJSON" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x472 : 'tags this) ->
        fun ~type_:(x463 : 'K) ->
          fun ~listener:(x464 : this:t -> ev:any -> any) ->
            fun
              ?options:(x465 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x474 = this_to_js Obj.magic x472 in
                   Ojs.call (Ojs.get_prop_ascii x474 "addEventListener")
                     "apply"
                     [|x474;((let x466 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x466 "push" [|(Obj.magic x463)|]);
                              ignore
                                (Ojs.call x466 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x470 : Ojs.t) ->
                                           fun (x471 : Ojs.t) ->
                                             any_to_js
                                               (x464 ~this:(t_of_js x470)
                                                  ~ev:(any_of_js x471))))|]);
                              (match x465 with
                               | Some x467 ->
                                   ignore
                                     (Ojs.call x466 "push"
                                        [|((match x467 with
                                            | `U1 x468 -> Ojs.bool_to_js x468
                                            | `U2 x469 ->
                                                AddEventListenerOptions.t_to_js
                                                  x469))|])
                               | None -> ());
                              x466))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x482 : 'tags this) ->
        fun ~type_:(x475 : string) ->
          fun ~listener:(x476 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x477 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x484 = this_to_js Obj.magic x482 in
                   Ojs.call (Ojs.get_prop_ascii x484 "addEventListener")
                     "apply"
                     [|x484;((let x478 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x478 "push"
                                   [|(Ojs.string_to_js x475)|]);
                              ignore
                                (Ojs.call x478 "push"
                                   [|(EventListenerOrEventListenerObject.t_to_js
                                        x476)|]);
                              (match x477 with
                               | Some x479 ->
                                   ignore
                                     (Ojs.call x478 "push"
                                        [|((match x479 with
                                            | `U1 x480 -> Ojs.bool_to_js x480
                                            | `U2 x481 ->
                                                AddEventListenerOptions.t_to_js
                                                  x481))|])
                               | None -> ());
                              x478))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x494 : 'tags this) ->
        fun ~type_:(x485 : 'K) ->
          fun ~listener:(x486 : this:t -> ev:any -> any) ->
            fun
              ?options:(x487 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x496 = this_to_js Obj.magic x494 in
                   Ojs.call (Ojs.get_prop_ascii x496 "removeEventListener")
                     "apply"
                     [|x496;((let x488 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x488 "push" [|(Obj.magic x485)|]);
                              ignore
                                (Ojs.call x488 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x492 : Ojs.t) ->
                                           fun (x493 : Ojs.t) ->
                                             any_to_js
                                               (x486 ~this:(t_of_js x492)
                                                  ~ev:(any_of_js x493))))|]);
                              (match x487 with
                               | Some x489 ->
                                   ignore
                                     (Ojs.call x488 "push"
                                        [|((match x489 with
                                            | `U1 x490 -> Ojs.bool_to_js x490
                                            | `U2 x491 ->
                                                EventListenerOptions.t_to_js
                                                  x491))|])
                               | None -> ());
                              x488))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x504 : 'tags this) ->
        fun ~type_:(x497 : string) ->
          fun ~listener:(x498 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x499 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x506 = this_to_js Obj.magic x504 in
                   Ojs.call (Ojs.get_prop_ascii x506 "removeEventListener")
                     "apply"
                     [|x506;((let x500 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x500 "push"
                                   [|(Ojs.string_to_js x497)|]);
                              ignore
                                (Ojs.call x500 "push"
                                   [|(EventListenerOrEventListenerObject.t_to_js
                                        x498)|]);
                              (match x499 with
                               | Some x501 ->
                                   ignore
                                     (Ojs.call x500 "push"
                                        [|((match x501 with
                                            | `U1 x502 -> Ojs.bool_to_js x502
                                            | `U2 x503 ->
                                                EventListenerOptions.t_to_js
                                                  x503))|])
                               | None -> ());
                              x500))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Performance")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Performance") [||])
  end
module PerformanceStatic =
  struct
    let (onresourcetimingbufferfull :
      unit -> (this:Performance.t -> ev:Event.t -> any) option) =
      fun () ->
        Ojs.option_of_js
          (fun (x507 : Ojs.t) ->
             fun ~this:(x508 : Performance.t) ->
               fun ~ev:(x509 : Event.t) ->
                 any_of_js
                   (Ojs.apply x507
                      [|(Performance.t_to_js x508);(Event.t_to_js x509)|]))
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "performance")
             "onresourcetimingbufferfull")
    let (timeOrigin : unit -> DOMHighResTimeStamp.t) =
      fun () ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "performance")
             "timeOrigin")
    let (clearMarks : ?markName:string -> unit -> unit) =
      fun ?markName:(x510 : string option) ->
        fun () ->
          ignore
            (let x513 = Ojs.get_prop_ascii Ojs.global "performance" in
             Ojs.call (Ojs.get_prop_ascii x513 "clearMarks") "apply"
               [|x513;((let x511 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x510 with
                         | Some x512 ->
                             ignore
                               (Ojs.call x511 "push"
                                  [|(Ojs.string_to_js x512)|])
                         | None -> ());
                        x511))|])
    let (clearMeasures : ?measureName:string -> unit -> unit) =
      fun ?measureName:(x514 : string option) ->
        fun () ->
          ignore
            (let x517 = Ojs.get_prop_ascii Ojs.global "performance" in
             Ojs.call (Ojs.get_prop_ascii x517 "clearMeasures") "apply"
               [|x517;((let x515 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x514 with
                         | Some x516 ->
                             ignore
                               (Ojs.call x515 "push"
                                  [|(Ojs.string_to_js x516)|])
                         | None -> ());
                        x515))|])
    let (clearResourceTimings : unit -> unit) =
      fun () ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance")
             "clearResourceTimings" [||])
    let (getEntries : unit -> PerformanceEntryList.t) =
      fun () ->
        PerformanceEntryList.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance")
             "getEntries" [||])
    let (getEntriesByName :
      name:string -> ?type_:string -> unit -> PerformanceEntryList.t) =
      fun ~name:(x518 : string) ->
        fun ?type_:(x519 : string option) ->
          fun () ->
            PerformanceEntryList.t_of_js
              (let x522 = Ojs.get_prop_ascii Ojs.global "performance" in
               Ojs.call (Ojs.get_prop_ascii x522 "getEntriesByName") "apply"
                 [|x522;((let x520 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x520 "push" [|(Ojs.string_to_js x518)|]);
                          (match x519 with
                           | Some x521 ->
                               ignore
                                 (Ojs.call x520 "push"
                                    [|(Ojs.string_to_js x521)|])
                           | None -> ());
                          x520))|])
    let (getEntriesByType : string -> PerformanceEntryList.t) =
      fun (x523 : string) ->
        PerformanceEntryList.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance")
             "getEntriesByType" [|(Ojs.string_to_js x523)|])
    let (mark :
      markName:string ->
        ?markOptions:PerformanceMarkOptions.t -> unit -> PerformanceMark.t)
      =
      fun ~markName:(x524 : string) ->
        fun ?markOptions:(x525 : PerformanceMarkOptions.t option) ->
          fun () ->
            PerformanceMark.t_of_js
              (let x528 = Ojs.get_prop_ascii Ojs.global "performance" in
               Ojs.call (Ojs.get_prop_ascii x528 "mark") "apply"
                 [|x528;((let x526 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x526 "push" [|(Ojs.string_to_js x524)|]);
                          (match x525 with
                           | Some x527 ->
                               ignore
                                 (Ojs.call x526 "push"
                                    [|(PerformanceMarkOptions.t_to_js x527)|])
                           | None -> ());
                          x526))|])
    let (measure :
      measureName:string ->
        ?startOrMeasureOptions:[ `U1 of string 
                               | `U2 of PerformanceMeasureOptions.t ]
          -> ?endMark:string -> unit -> PerformanceMeasure.t)
      =
      fun ~measureName:(x529 : string) ->
        fun
          ?startOrMeasureOptions:(x530 :
                                   [ `U1 of string 
                                   | `U2 of PerformanceMeasureOptions.t ]
                                     option)
          ->
          fun ?endMark:(x531 : string option) ->
            fun () ->
              PerformanceMeasure.t_of_js
                (let x537 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x537 "measure") "apply"
                   [|x537;((let x532 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x532 "push"
                                 [|(Ojs.string_to_js x529)|]);
                            (match x530 with
                             | Some x534 ->
                                 ignore
                                   (Ojs.call x532 "push"
                                      [|((match x534 with
                                          | `U1 x535 -> Ojs.string_to_js x535
                                          | `U2 x536 ->
                                              PerformanceMeasureOptions.t_to_js
                                                x536))|])
                             | None -> ());
                            (match x531 with
                             | Some x533 ->
                                 ignore
                                   (Ojs.call x532 "push"
                                      [|(Ojs.string_to_js x533)|])
                             | None -> ());
                            x532))|])
    let (now : unit -> DOMHighResTimeStamp.t) =
      fun () ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance") "now" [||])
    let (setResourceTimingBufferSize : float -> unit) =
      fun (x538 : float) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance")
             "setResourceTimingBufferSize" [|(Ojs.float_to_js x538)|])
    let (toJSON : unit -> any) =
      fun () ->
        any_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance") "toJSON"
             [||])
    let (addEventListener :
      type_:'K ->
        listener:(this:Performance.t -> ev:any -> any) ->
          ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
            unit -> unit)
      =
      fun ~type_:(x539 : 'K) ->
        fun ~listener:(x540 : this:Performance.t -> ev:any -> any) ->
          fun
            ?options:(x541 :
                       [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                         option)
            ->
            fun () ->
              ignore
                (let x548 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x548 "addEventListener")
                   "apply"
                   [|x548;((let x542 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x542 "push" [|(Obj.magic x539)|]);
                            ignore
                              (Ojs.call x542 "push"
                                 [|(Ojs.fun_to_js 2
                                      (fun (x546 : Ojs.t) ->
                                         fun (x547 : Ojs.t) ->
                                           any_to_js
                                             (x540
                                                ~this:(Performance.t_of_js
                                                         x546)
                                                ~ev:(any_of_js x547))))|]);
                            (match x541 with
                             | Some x543 ->
                                 ignore
                                   (Ojs.call x542 "push"
                                      [|((match x543 with
                                          | `U1 x544 -> Ojs.bool_to_js x544
                                          | `U2 x545 ->
                                              AddEventListenerOptions.t_to_js
                                                x545))|])
                             | None -> ());
                            x542))|])
    let (addEventListener' :
      type_:string ->
        listener:EventListenerOrEventListenerObject.t ->
          ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
            unit -> unit)
      =
      fun ~type_:(x549 : string) ->
        fun ~listener:(x550 : EventListenerOrEventListenerObject.t) ->
          fun
            ?options:(x551 :
                       [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                         option)
            ->
            fun () ->
              ignore
                (let x556 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x556 "addEventListener")
                   "apply"
                   [|x556;((let x552 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x552 "push"
                                 [|(Ojs.string_to_js x549)|]);
                            ignore
                              (Ojs.call x552 "push"
                                 [|(EventListenerOrEventListenerObject.t_to_js
                                      x550)|]);
                            (match x551 with
                             | Some x553 ->
                                 ignore
                                   (Ojs.call x552 "push"
                                      [|((match x553 with
                                          | `U1 x554 -> Ojs.bool_to_js x554
                                          | `U2 x555 ->
                                              AddEventListenerOptions.t_to_js
                                                x555))|])
                             | None -> ());
                            x552))|])
    let (removeEventListener :
      type_:'K ->
        listener:(this:Performance.t -> ev:any -> any) ->
          ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
            unit -> unit)
      =
      fun ~type_:(x557 : 'K) ->
        fun ~listener:(x558 : this:Performance.t -> ev:any -> any) ->
          fun
            ?options:(x559 :
                       [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                         option)
            ->
            fun () ->
              ignore
                (let x566 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x566 "removeEventListener")
                   "apply"
                   [|x566;((let x560 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x560 "push" [|(Obj.magic x557)|]);
                            ignore
                              (Ojs.call x560 "push"
                                 [|(Ojs.fun_to_js 2
                                      (fun (x564 : Ojs.t) ->
                                         fun (x565 : Ojs.t) ->
                                           any_to_js
                                             (x558
                                                ~this:(Performance.t_of_js
                                                         x564)
                                                ~ev:(any_of_js x565))))|]);
                            (match x559 with
                             | Some x561 ->
                                 ignore
                                   (Ojs.call x560 "push"
                                      [|((match x561 with
                                          | `U1 x562 -> Ojs.bool_to_js x562
                                          | `U2 x563 ->
                                              EventListenerOptions.t_to_js
                                                x563))|])
                             | None -> ());
                            x560))|])
    let (removeEventListener' :
      type_:string ->
        listener:EventListenerOrEventListenerObject.t ->
          ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
            unit -> unit)
      =
      fun ~type_:(x567 : string) ->
        fun ~listener:(x568 : EventListenerOrEventListenerObject.t) ->
          fun
            ?options:(x569 :
                       [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                         option)
            ->
            fun () ->
              ignore
                (let x574 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x574 "removeEventListener")
                   "apply"
                   [|x574;((let x570 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x570 "push"
                                 [|(Ojs.string_to_js x567)|]);
                            ignore
                              (Ojs.call x570 "push"
                                 [|(EventListenerOrEventListenerObject.t_to_js
                                      x568)|]);
                            (match x569 with
                             | Some x571 ->
                                 ignore
                                   (Ojs.call x570 "push"
                                      [|((match x571 with
                                          | `U1 x572 -> Ojs.bool_to_js x572
                                          | `U2 x573 ->
                                              EventListenerOptions.t_to_js
                                                x573))|])
                             | None -> ());
                            x570))|])
  end
module StorageEstimate =
  struct
    type t = [ `StorageEstimate ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x576 : Ojs.t) -> t_of_js x576
    and t_0_to_js : t_0 -> Ojs.t = fun (x575 : t) -> t_to_js x575
    type tags = [ `StorageEstimate ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `StorageEstimate ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x579 : Ojs.t) -> intf_of_js __tags_of_js x579
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x577 : __tags intf) -> intf_to_js __tags_to_js x577
    let (get_quota : 'tags this -> float option) =
      fun (x581 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x581) "quota")
    let (set_quota : 'tags this -> float -> unit) =
      fun (x584 : 'tags this) ->
        fun (x585 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x584) "quota"
            (Ojs.float_to_js x585)
    let (get_usage : 'tags this -> float option) =
      fun (x587 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x587) "usage")
    let (set_usage : 'tags this -> float -> unit) =
      fun (x590 : 'tags this) ->
        fun (x591 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x590) "usage"
            (Ojs.float_to_js x591)
    let (create : ?quota:float -> ?usage:float -> unit -> t) =
      fun ?quota:(x593 : float option) ->
        fun ?usage:(x594 : float option) ->
          fun () ->
            let x595 = Ojs.empty_obj () in
            (match x593 with
             | Some x597 ->
                 Ojs.set_prop_ascii x595 "quota" (Ojs.float_to_js x597)
             | None -> ());
            (match x594 with
             | Some x596 ->
                 Ojs.set_prop_ascii x595 "usage" (Ojs.float_to_js x596)
             | None -> ());
            t_of_js x595
    let cast_from = Obj.magic
  end
module FileSystemRemoveOptions =
  struct
    type t = [ `FileSystemRemoveOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x599 : Ojs.t) -> t_of_js x599
    and t_0_to_js : t_0 -> Ojs.t = fun (x598 : t) -> t_to_js x598
    type tags = [ `FileSystemRemoveOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FileSystemRemoveOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x602 : Ojs.t) -> intf_of_js __tags_of_js x602
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x600 : __tags intf) -> intf_to_js __tags_to_js x600
    let (get_recursive : 'tags this -> bool option) =
      fun (x604 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x604) "recursive")
    let (set_recursive : 'tags this -> bool -> unit) =
      fun (x607 : 'tags this) ->
        fun (x608 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x607) "recursive"
            (Ojs.bool_to_js x608)
    let (create : ?recursive:bool -> unit -> t) =
      fun ?recursive:(x610 : bool option) ->
        fun () ->
          let x611 = Ojs.empty_obj () in
          (match x610 with
           | Some x612 ->
               Ojs.set_prop_ascii x611 "recursive" (Ojs.bool_to_js x612)
           | None -> ());
          t_of_js x611
    let cast_from = Obj.magic
  end
module FileSystemGetFileOptions =
  struct
    type t = [ `FileSystemGetFileOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x614 : Ojs.t) -> t_of_js x614
    and t_0_to_js : t_0 -> Ojs.t = fun (x613 : t) -> t_to_js x613
    type tags = [ `FileSystemGetFileOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FileSystemGetFileOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x617 : Ojs.t) -> intf_of_js __tags_of_js x617
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x615 : __tags intf) -> intf_to_js __tags_to_js x615
    let (get_create : 'tags this -> bool option) =
      fun (x619 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x619) "create")
    let (set_create : 'tags this -> bool -> unit) =
      fun (x622 : 'tags this) ->
        fun (x623 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x622) "create"
            (Ojs.bool_to_js x623)
    let (create : ?create_:bool -> unit -> t) =
      fun ?create_:(x625 : bool option) ->
        fun () ->
          let x626 = Ojs.empty_obj () in
          (match x625 with
           | Some x627 ->
               Ojs.set_prop_ascii x626 "create" (Ojs.bool_to_js x627)
           | None -> ());
          t_of_js x626
    let cast_from = Obj.magic
  end
module FileSystemGetDirectoryOptions =
  struct
    type t = [ `FileSystemGetDirectoryOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x629 : Ojs.t) -> t_of_js x629
    and t_0_to_js : t_0 -> Ojs.t = fun (x628 : t) -> t_to_js x628
    type tags = [ `FileSystemGetDirectoryOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FileSystemGetDirectoryOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x632 : Ojs.t) -> intf_of_js __tags_of_js x632
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x630 : __tags intf) -> intf_to_js __tags_to_js x630
    let (get_create : 'tags this -> bool option) =
      fun (x634 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x634) "create")
    let (set_create : 'tags this -> bool -> unit) =
      fun (x637 : 'tags this) ->
        fun (x638 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x637) "create"
            (Ojs.bool_to_js x638)
    let (create : ?create_:bool -> unit -> t) =
      fun ?create_:(x640 : bool option) ->
        fun () ->
          let x641 = Ojs.empty_obj () in
          (match x640 with
           | Some x642 ->
               Ojs.set_prop_ascii x641 "create" (Ojs.bool_to_js x642)
           | None -> ());
          t_of_js x641
    let cast_from = Obj.magic
  end
module FileSystemHandleKind =
  struct
    type t = [ `L_s61_directory  | `L_s75_file ]
    let rec t_of_js : Ojs.t -> t =
      fun (x644 : Ojs.t) ->
        let x645 = x644 in
        match Ojs.string_of_js x645 with
        | "directory" -> `L_s61_directory
        | "file" -> `L_s75_file
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x643 : [ `L_s61_directory  | `L_s75_file ]) ->
        match x643 with
        | `L_s61_directory -> Ojs.string_to_js "directory"
        | `L_s75_file -> Ojs.string_to_js "file"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x647 : Ojs.t) -> t_of_js x647
    and t_0_to_js : t_0 -> Ojs.t = fun (x646 : t) -> t_to_js x646
  end
module FileSystemHandle =
  struct
    type t = [ `FileSystemHandle ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x649 : Ojs.t) -> t_of_js x649
    and t_0_to_js : t_0 -> Ojs.t = fun (x648 : t) -> t_to_js x648
    type tags = [ `FileSystemHandle ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FileSystemHandle ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x652 : Ojs.t) -> intf_of_js __tags_of_js x652
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x650 : __tags intf) -> intf_to_js __tags_to_js x650
    let (get_kind : 'tags this -> FileSystemHandleKind.t) =
      fun (x654 : 'tags this) ->
        FileSystemHandleKind.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x654) "kind")
    let (get_name : 'tags this -> string) =
      fun (x656 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x656) "name")
    let (isSameEntry : 'tags this -> other:t -> bool Promise.t_1) =
      fun (x659 : 'tags this) ->
        fun ~other:(x658 : t) ->
          Promise.t_1_of_js Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x659) "isSameEntry"
               [|(t_to_js x658)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "FileSystemHandle") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FileSystemHandle")
             [||])
  end
module EndingType =
  struct
    type t = [ `L_s120_native  | `L_s199_transparent ]
    let rec t_of_js : Ojs.t -> t =
      fun (x663 : Ojs.t) ->
        let x664 = x663 in
        match Ojs.string_of_js x664 with
        | "native" -> `L_s120_native
        | "transparent" -> `L_s199_transparent
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x662 : [ `L_s120_native  | `L_s199_transparent ]) ->
        match x662 with
        | `L_s120_native -> Ojs.string_to_js "native"
        | `L_s199_transparent -> Ojs.string_to_js "transparent"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x666 : Ojs.t) -> t_of_js x666
    and t_0_to_js : t_0 -> Ojs.t = fun (x665 : t) -> t_to_js x665
  end
module BlobPropertyBag =
  struct
    type t = [ `BlobPropertyBag ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x668 : Ojs.t) -> t_of_js x668
    and t_0_to_js : t_0 -> Ojs.t = fun (x667 : t) -> t_to_js x667
    type tags = [ `BlobPropertyBag ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `BlobPropertyBag ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x671 : Ojs.t) -> intf_of_js __tags_of_js x671
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x669 : __tags intf) -> intf_to_js __tags_to_js x669
    let (get_endings : 'tags this -> EndingType.t option) =
      fun (x673 : 'tags this) ->
        Ojs.option_of_js EndingType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x673) "endings")
    let (set_endings : 'tags this -> EndingType.t -> unit) =
      fun (x676 : 'tags this) ->
        fun (x677 : EndingType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x676) "endings"
            (EndingType.t_to_js x677)
    let (get_type : 'tags this -> string option) =
      fun (x679 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x679) "type")
    let (set_type : 'tags this -> string -> unit) =
      fun (x682 : 'tags this) ->
        fun (x683 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x682) "type"
            (Ojs.string_to_js x683)
    let (create : ?endings:EndingType.t -> ?type_:string -> unit -> t) =
      fun ?endings:(x685 : EndingType.t option) ->
        fun ?type_:(x686 : string option) ->
          fun () ->
            let x687 = Ojs.empty_obj () in
            (match x685 with
             | Some x689 ->
                 Ojs.set_prop_ascii x687 "endings" (EndingType.t_to_js x689)
             | None -> ());
            (match x686 with
             | Some x688 ->
                 Ojs.set_prop_ascii x687 "type" (Ojs.string_to_js x688)
             | None -> ());
            t_of_js x687
    let cast_from = Obj.magic
  end
module FilePropertyBag =
  struct
    type t = [ `BlobPropertyBag  | `FilePropertyBag ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x691 : Ojs.t) -> t_of_js x691
    and t_0_to_js : t_0 -> Ojs.t = fun (x690 : t) -> t_to_js x690
    type tags = [ `BlobPropertyBag  | `FilePropertyBag ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FilePropertyBag ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x694 : Ojs.t) -> intf_of_js __tags_of_js x694
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x692 : __tags intf) -> intf_to_js __tags_to_js x692
    let (get_lastModified : 'tags this -> float option) =
      fun (x696 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x696) "lastModified")
    let (set_lastModified : 'tags this -> float -> unit) =
      fun (x699 : 'tags this) ->
        fun (x700 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x699) "lastModified"
            (Ojs.float_to_js x700)
    let (create : ?lastModified:float -> unit -> t) =
      fun ?lastModified:(x702 : float option) ->
        fun () ->
          let x703 = Ojs.empty_obj () in
          (match x702 with
           | Some x704 ->
               Ojs.set_prop_ascii x703 "lastModified" (Ojs.float_to_js x704)
           | None -> ());
          t_of_js x703
    let cast_from = Obj.magic
  end
module ReadableStreamDefaultController =
  struct
    type 'R t = [ `ReadableStreamDefaultController of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 =
      fun (type __R) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x707 : Ojs.t) -> t_of_js __R_of_js x707
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t =
      fun (type __R) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x705 : __R t) -> t_to_js __R_to_js x705
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x711 : Ojs.t) -> t_of_js any_of_js x711
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x709 : any t) -> t_to_js any_to_js x709
    type 'R tags = [ `ReadableStreamDefaultController of 'R ]
    type 'R tags_1 = 'R tags
    type tags_0 = any tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags =
                  [> `ReadableStreamDefaultController of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      =
      fun (type __tags) ->
        fun (type __R) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__R_of_js : Ojs.t -> __R) ->
              fun (x715 : Ojs.t) -> intf_of_js __tags_of_js x715
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __R) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__R_to_js : __R -> Ojs.t) ->
              fun (x713 : __tags intf) -> intf_to_js __tags_to_js x713
    let (get_desiredSize : ('tags, 'R) this -> float option) =
      fun (x717 : ('tags, 'R) this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x717)
             "desiredSize")
    let (close : ('tags, 'R) this -> unit) =
      fun (x721 : ('tags, 'R) this) ->
        ignore (Ojs.call (this_to_js Obj.magic Obj.magic x721) "close" [||])
    let (enqueue : ('tags, 'R) this -> ?chunk:'R -> unit -> unit) =
      fun (x727 : ('tags, 'R) this) ->
        fun ?chunk:(x724 : 'R option) ->
          fun () ->
            ignore
              (let x730 = this_to_js Obj.magic Obj.magic x727 in
               Ojs.call (Ojs.get_prop_ascii x730 "enqueue") "apply"
                 [|x730;((let x725 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x724 with
                           | Some x726 ->
                               ignore
                                 (Ojs.call x725 "push" [|(Obj.magic x726)|])
                           | None -> ());
                          x725))|])
    let (error : ('tags, 'R) this -> ?e:any -> unit -> unit) =
      fun (x734 : ('tags, 'R) this) ->
        fun ?e:(x731 : any option) ->
          fun () ->
            ignore
              (let x737 = this_to_js Obj.magic Obj.magic x734 in
               Ojs.call (Ojs.get_prop_ascii x737 "error") "apply"
                 [|x737;((let x732 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x731 with
                           | Some x733 ->
                               ignore
                                 (Ojs.call x732 "push" [|(any_to_js x733)|])
                           | None -> ());
                          x732))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ReadableStreamDefaultController")
             "prototype")
    let (create : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ReadableStreamDefaultController")
             [||])
  end
module ReadableStreamController =
  struct
    type 'T t = 'T ReadableStreamDefaultController.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x740 : Ojs.t) ->
            ReadableStreamDefaultController.t_of_js __T_of_js x740
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x738 : __T ReadableStreamDefaultController.t) ->
            ReadableStreamDefaultController.t_to_js __T_to_js x738
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x744 : Ojs.t) -> t_of_js __T_of_js x744
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x742 : __T t) -> t_to_js __T_to_js x742
  end
module UnderlyingSourceStartCallback =
  struct
    type 'R t = [ `UnderlyingSourceStartCallback of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 =
      fun (type __R) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x748 : Ojs.t) -> t_of_js __R_of_js x748
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t =
      fun (type __R) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x746 : __R t) -> t_to_js __R_to_js x746
    type 'R tags = [ `UnderlyingSourceStartCallback of 'R ]
    type 'R tags_1 = 'R tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags = [> `UnderlyingSourceStartCallback of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      =
      fun (type __tags) ->
        fun (type __R) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__R_of_js : Ojs.t -> __R) ->
              fun (x752 : Ojs.t) -> intf_of_js __tags_of_js x752
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __R) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__R_to_js : __R -> Ojs.t) ->
              fun (x750 : __tags intf) -> intf_to_js __tags_to_js x750
    let (apply :
      ('tags, 'R) this -> controller:'R ReadableStreamController.t -> any) =
      fun (x756 : ('tags, 'R) this) ->
        fun ~controller:(x754 : 'R ReadableStreamController.t) ->
          any_of_js
            (Ojs.apply (this_to_js Obj.magic Obj.magic x756)
               [|(ReadableStreamController.t_to_js Obj.magic x754)|])
    let cast_from = Obj.magic
  end
module UnderlyingSourcePullCallback =
  struct
    type 'R t = [ `UnderlyingSourcePullCallback of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 =
      fun (type __R) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x761 : Ojs.t) -> t_of_js __R_of_js x761
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t =
      fun (type __R) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x759 : __R t) -> t_to_js __R_to_js x759
    type 'R tags = [ `UnderlyingSourcePullCallback of 'R ]
    type 'R tags_1 = 'R tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags = [> `UnderlyingSourcePullCallback of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      =
      fun (type __tags) ->
        fun (type __R) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__R_of_js : Ojs.t -> __R) ->
              fun (x765 : Ojs.t) -> intf_of_js __tags_of_js x765
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __R) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__R_to_js : __R -> Ojs.t) ->
              fun (x763 : __tags intf) -> intf_to_js __tags_to_js x763
    let (apply :
      ('tags, 'R) this ->
        controller:'R ReadableStreamController.t ->
          (unit, unit PromiseLike.t_1) union2)
      =
      fun (x769 : ('tags, 'R) this) ->
        fun ~controller:(x767 : 'R ReadableStreamController.t) ->
          union2_of_js Ojs.unit_of_js
            (fun (x773 : Ojs.t) -> PromiseLike.t_1_of_js Ojs.unit_of_js x773)
            (Ojs.apply (this_to_js Obj.magic Obj.magic x769)
               [|(ReadableStreamController.t_to_js Obj.magic x767)|])
    let cast_from = Obj.magic
  end
module UnderlyingSourceCancelCallback =
  struct
    type t = [ `UnderlyingSourceCancelCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x776 : Ojs.t) -> t_of_js x776
    and t_0_to_js : t_0 -> Ojs.t = fun (x775 : t) -> t_to_js x775
    type tags = [ `UnderlyingSourceCancelCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `UnderlyingSourceCancelCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x779 : Ojs.t) -> intf_of_js __tags_of_js x779
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x777 : __tags intf) -> intf_to_js __tags_to_js x777
    let (apply :
      'tags this ->
        ?reason:any -> unit -> (unit, unit PromiseLike.t_1) union2)
      =
      fun (x784 : 'tags this) ->
        fun ?reason:(x781 : any option) ->
          fun () ->
            union2_of_js Ojs.unit_of_js
              (fun (x787 : Ojs.t) ->
                 PromiseLike.t_1_of_js Ojs.unit_of_js x787)
              (Ojs.call (this_to_js Obj.magic x784) "apply"
                 [|Ojs.null;((let x782 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x781 with
                               | Some x783 ->
                                   ignore
                                     (Ojs.call x782 "push"
                                        [|(any_to_js x783)|])
                               | None -> ());
                              x782))|])
    let cast_from = Obj.magic
  end
module UnderlyingSource =
  struct
    type 'R t = [ `UnderlyingSource of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 =
      fun (type __R) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x791 : Ojs.t) -> t_of_js __R_of_js x791
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t =
      fun (type __R) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x789 : __R t) -> t_to_js __R_to_js x789
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x795 : Ojs.t) -> t_of_js any_of_js x795
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x793 : any t) -> t_to_js any_to_js x793
    type 'R tags = [ `UnderlyingSource of 'R ]
    type 'R tags_1 = 'R tags
    type tags_0 = any tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags = [> `UnderlyingSource of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      =
      fun (type __tags) ->
        fun (type __R) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__R_of_js : Ojs.t -> __R) ->
              fun (x799 : Ojs.t) -> intf_of_js __tags_of_js x799
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __R) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__R_to_js : __R -> Ojs.t) ->
              fun (x797 : __tags intf) -> intf_to_js __tags_to_js x797
    let (get_cancel :
      ('tags, 'R) this -> UnderlyingSourceCancelCallback.t option) =
      fun (x801 : ('tags, 'R) this) ->
        Ojs.option_of_js UnderlyingSourceCancelCallback.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x801) "cancel")
    let (set_cancel :
      ('tags, 'R) this -> UnderlyingSourceCancelCallback.t -> unit) =
      fun (x805 : ('tags, 'R) this) ->
        fun (x806 : UnderlyingSourceCancelCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x805) "cancel"
            (UnderlyingSourceCancelCallback.t_to_js x806)
    let (get_pull :
      ('tags, 'R) this -> 'R UnderlyingSourcePullCallback.t option) =
      fun (x809 : ('tags, 'R) this) ->
        Ojs.option_of_js
          (fun (x812 : Ojs.t) ->
             UnderlyingSourcePullCallback.t_of_js Obj.magic x812)
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x809) "pull")
    let (set_pull :
      ('tags, 'R) this -> 'R UnderlyingSourcePullCallback.t -> unit) =
      fun (x814 : ('tags, 'R) this) ->
        fun (x815 : 'R UnderlyingSourcePullCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x814) "pull"
            (UnderlyingSourcePullCallback.t_to_js Obj.magic x815)
    let (get_start :
      ('tags, 'R) this -> 'R UnderlyingSourceStartCallback.t option) =
      fun (x819 : ('tags, 'R) this) ->
        Ojs.option_of_js
          (fun (x822 : Ojs.t) ->
             UnderlyingSourceStartCallback.t_of_js Obj.magic x822)
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x819) "start")
    let (set_start :
      ('tags, 'R) this -> 'R UnderlyingSourceStartCallback.t -> unit) =
      fun (x824 : ('tags, 'R) this) ->
        fun (x825 : 'R UnderlyingSourceStartCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x824) "start"
            (UnderlyingSourceStartCallback.t_to_js Obj.magic x825)
    let (get_type : ('tags, 'R) this -> undefined) =
      fun (x829 : ('tags, 'R) this) ->
        undefined_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x829) "type")
    let (set_type : ('tags, 'R) this -> undefined -> unit) =
      fun (x832 : ('tags, 'R) this) ->
        fun (x833 : undefined) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x832) "type"
            (undefined_to_js x833)
    let (create :
      ?cancel:UnderlyingSourceCancelCallback.t ->
        ?pull:'R UnderlyingSourcePullCallback.t ->
          ?start:'R UnderlyingSourceStartCallback.t ->
            ?type_:never -> unit -> 'R t)
      =
      fun ?cancel:(x836 : UnderlyingSourceCancelCallback.t option) ->
        fun ?pull:(x837 : 'R UnderlyingSourcePullCallback.t option) ->
          fun ?start:(x838 : 'R UnderlyingSourceStartCallback.t option) ->
            fun ?type_:(x839 : never option) ->
              fun () ->
                let x840 = Ojs.empty_obj () in
                (match x836 with
                 | Some x847 ->
                     Ojs.set_prop_ascii x840 "cancel"
                       (UnderlyingSourceCancelCallback.t_to_js x847)
                 | None -> ());
                (match x837 with
                 | Some x845 ->
                     Ojs.set_prop_ascii x840 "pull"
                       (UnderlyingSourcePullCallback.t_to_js Obj.magic x845)
                 | None -> ());
                (match x838 with
                 | Some x843 ->
                     Ojs.set_prop_ascii x840 "start"
                       (UnderlyingSourceStartCallback.t_to_js Obj.magic x843)
                 | None -> ());
                (match x839 with
                 | Some x842 ->
                     Ojs.set_prop_ascii x840 "type" (never_to_js x842)
                 | None -> ());
                t_of_js Obj.magic x840
    let cast_from = Obj.magic
  end
module StreamPipeOptions =
  struct
    type t = [ `StreamPipeOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x849 : Ojs.t) -> t_of_js x849
    and t_0_to_js : t_0 -> Ojs.t = fun (x848 : t) -> t_to_js x848
    type tags = [ `StreamPipeOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `StreamPipeOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x852 : Ojs.t) -> intf_of_js __tags_of_js x852
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x850 : __tags intf) -> intf_to_js __tags_to_js x850
    let (get_preventAbort : 'tags this -> bool option) =
      fun (x854 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x854) "preventAbort")
    let (set_preventAbort : 'tags this -> bool -> unit) =
      fun (x857 : 'tags this) ->
        fun (x858 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x857) "preventAbort"
            (Ojs.bool_to_js x858)
    let (get_preventCancel : 'tags this -> bool option) =
      fun (x860 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x860) "preventCancel")
    let (set_preventCancel : 'tags this -> bool -> unit) =
      fun (x863 : 'tags this) ->
        fun (x864 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x863) "preventCancel"
            (Ojs.bool_to_js x864)
    let (get_preventClose : 'tags this -> bool option) =
      fun (x866 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x866) "preventClose")
    let (set_preventClose : 'tags this -> bool -> unit) =
      fun (x869 : 'tags this) ->
        fun (x870 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x869) "preventClose"
            (Ojs.bool_to_js x870)
    let (get_signal : 'tags this -> AbortSignal.t option) =
      fun (x872 : 'tags this) ->
        Ojs.option_of_js AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x872) "signal")
    let (set_signal : 'tags this -> AbortSignal.t -> unit) =
      fun (x875 : 'tags this) ->
        fun (x876 : AbortSignal.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x875) "signal"
            (AbortSignal.t_to_js x876)
    let (create :
      ?preventAbort:bool ->
        ?preventCancel:bool ->
          ?preventClose:bool -> ?signal:AbortSignal.t -> unit -> t)
      =
      fun ?preventAbort:(x878 : bool option) ->
        fun ?preventCancel:(x879 : bool option) ->
          fun ?preventClose:(x880 : bool option) ->
            fun ?signal:(x881 : AbortSignal.t option) ->
              fun () ->
                let x882 = Ojs.empty_obj () in
                (match x878 with
                 | Some x886 ->
                     Ojs.set_prop_ascii x882 "preventAbort"
                       (Ojs.bool_to_js x886)
                 | None -> ());
                (match x879 with
                 | Some x885 ->
                     Ojs.set_prop_ascii x882 "preventCancel"
                       (Ojs.bool_to_js x885)
                 | None -> ());
                (match x880 with
                 | Some x884 ->
                     Ojs.set_prop_ascii x882 "preventClose"
                       (Ojs.bool_to_js x884)
                 | None -> ());
                (match x881 with
                 | Some x883 ->
                     Ojs.set_prop_ascii x882 "signal"
                       (AbortSignal.t_to_js x883)
                 | None -> ());
                t_of_js x882
    let cast_from = Obj.magic
  end
module WritableStreamDefaultController =
  struct
    type t = [ `WritableStreamDefaultController ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x888 : Ojs.t) -> t_of_js x888
    and t_0_to_js : t_0 -> Ojs.t = fun (x887 : t) -> t_to_js x887
    type tags = [ `WritableStreamDefaultController ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WritableStreamDefaultController ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x891 : Ojs.t) -> intf_of_js __tags_of_js x891
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x889 : __tags intf) -> intf_to_js __tags_to_js x889
    let (error : 'tags this -> ?e:any -> unit -> unit) =
      fun (x896 : 'tags this) ->
        fun ?e:(x893 : any option) ->
          fun () ->
            ignore
              (let x898 = this_to_js Obj.magic x896 in
               Ojs.call (Ojs.get_prop_ascii x898 "error") "apply"
                 [|x898;((let x894 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x893 with
                           | Some x895 ->
                               ignore
                                 (Ojs.call x894 "push" [|(any_to_js x895)|])
                           | None -> ());
                          x894))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WritableStreamDefaultController")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WritableStreamDefaultController")
             [||])
  end
module UnderlyingSinkWriteCallback =
  struct
    type 'W t = [ `UnderlyingSinkWriteCallback of 'W ] intf
    let rec t_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t =
      fun _W -> Obj.magic
    and t_to_js : 'W . ('W -> Ojs.t) -> 'W t -> Ojs.t = fun _W -> Obj.magic
    type 'W t_1 = 'W t
    let rec t_1_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t_1 =
      fun (type __W) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x901 : Ojs.t) -> t_of_js __W_of_js x901
    and t_1_to_js : 'W . ('W -> Ojs.t) -> 'W t_1 -> Ojs.t =
      fun (type __W) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x899 : __W t) -> t_to_js __W_to_js x899
    type 'W tags = [ `UnderlyingSinkWriteCallback of 'W ]
    type 'W tags_1 = 'W tags
    type ('tags, 'W) this =
      'tags intf constraint 'tags = [> `UnderlyingSinkWriteCallback of 'W ]
    let rec this_of_js :
      'tags 'W .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'W) this
      =
      fun (type __tags) ->
        fun (type __W) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__W_of_js : Ojs.t -> __W) ->
              fun (x905 : Ojs.t) -> intf_of_js __tags_of_js x905
    and this_to_js :
      'tags 'W .
        ('tags -> Ojs.t) -> ('W -> Ojs.t) -> ('tags, 'W) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __W) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__W_to_js : __W -> Ojs.t) ->
              fun (x903 : __tags intf) -> intf_to_js __tags_to_js x903
    let (apply :
      ('tags, 'W) this ->
        chunk:'W ->
          controller:WritableStreamDefaultController.t ->
            (unit, unit PromiseLike.t_1) union2)
      =
      fun (x909 : ('tags, 'W) this) ->
        fun ~chunk:(x907 : 'W) ->
          fun ~controller:(x908 : WritableStreamDefaultController.t) ->
            union2_of_js Ojs.unit_of_js
              (fun (x913 : Ojs.t) ->
                 PromiseLike.t_1_of_js Ojs.unit_of_js x913)
              (Ojs.apply (this_to_js Obj.magic Obj.magic x909)
                 [|(Obj.magic x907);(WritableStreamDefaultController.t_to_js
                                       x908)|])
    let cast_from = Obj.magic
  end
module UnderlyingSinkStartCallback =
  struct
    type t = [ `UnderlyingSinkStartCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x916 : Ojs.t) -> t_of_js x916
    and t_0_to_js : t_0 -> Ojs.t = fun (x915 : t) -> t_to_js x915
    type tags = [ `UnderlyingSinkStartCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `UnderlyingSinkStartCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x919 : Ojs.t) -> intf_of_js __tags_of_js x919
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x917 : __tags intf) -> intf_to_js __tags_to_js x917
    let (apply :
      'tags this -> controller:WritableStreamDefaultController.t -> any) =
      fun (x922 : 'tags this) ->
        fun ~controller:(x921 : WritableStreamDefaultController.t) ->
          any_of_js
            (Ojs.apply (this_to_js Obj.magic x922)
               [|(WritableStreamDefaultController.t_to_js x921)|])
    let cast_from = Obj.magic
  end
module UnderlyingSinkCloseCallback =
  struct
    type t = [ `UnderlyingSinkCloseCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x925 : Ojs.t) -> t_of_js x925
    and t_0_to_js : t_0 -> Ojs.t = fun (x924 : t) -> t_to_js x924
    type tags = [ `UnderlyingSinkCloseCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `UnderlyingSinkCloseCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x928 : Ojs.t) -> intf_of_js __tags_of_js x928
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x926 : __tags intf) -> intf_to_js __tags_to_js x926
    let (apply : 'tags this -> (unit, unit PromiseLike.t_1) union2) =
      fun (x930 : 'tags this) ->
        union2_of_js Ojs.unit_of_js
          (fun (x933 : Ojs.t) -> PromiseLike.t_1_of_js Ojs.unit_of_js x933)
          (Ojs.apply (this_to_js Obj.magic x930) [||])
    let cast_from = Obj.magic
  end
module UnderlyingSinkAbortCallback =
  struct
    type t = [ `UnderlyingSinkAbortCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x936 : Ojs.t) -> t_of_js x936
    and t_0_to_js : t_0 -> Ojs.t = fun (x935 : t) -> t_to_js x935
    type tags = [ `UnderlyingSinkAbortCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `UnderlyingSinkAbortCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x939 : Ojs.t) -> intf_of_js __tags_of_js x939
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x937 : __tags intf) -> intf_to_js __tags_to_js x937
    let (apply :
      'tags this ->
        ?reason:any -> unit -> (unit, unit PromiseLike.t_1) union2)
      =
      fun (x944 : 'tags this) ->
        fun ?reason:(x941 : any option) ->
          fun () ->
            union2_of_js Ojs.unit_of_js
              (fun (x947 : Ojs.t) ->
                 PromiseLike.t_1_of_js Ojs.unit_of_js x947)
              (Ojs.call (this_to_js Obj.magic x944) "apply"
                 [|Ojs.null;((let x942 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x941 with
                               | Some x943 ->
                                   ignore
                                     (Ojs.call x942 "push"
                                        [|(any_to_js x943)|])
                               | None -> ());
                              x942))|])
    let cast_from = Obj.magic
  end
module UnderlyingSink =
  struct
    type 'W t = [ `UnderlyingSink of 'W ] intf
    let rec t_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t =
      fun _W -> Obj.magic
    and t_to_js : 'W . ('W -> Ojs.t) -> 'W t -> Ojs.t = fun _W -> Obj.magic
    type 'W t_1 = 'W t
    let rec t_1_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t_1 =
      fun (type __W) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x951 : Ojs.t) -> t_of_js __W_of_js x951
    and t_1_to_js : 'W . ('W -> Ojs.t) -> 'W t_1 -> Ojs.t =
      fun (type __W) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x949 : __W t) -> t_to_js __W_to_js x949
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x955 : Ojs.t) -> t_of_js any_of_js x955
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x953 : any t) -> t_to_js any_to_js x953
    type 'W tags = [ `UnderlyingSink of 'W ]
    type 'W tags_1 = 'W tags
    type tags_0 = any tags
    type ('tags, 'W) this =
      'tags intf constraint 'tags = [> `UnderlyingSink of 'W ]
    let rec this_of_js :
      'tags 'W .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'W) this
      =
      fun (type __tags) ->
        fun (type __W) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__W_of_js : Ojs.t -> __W) ->
              fun (x959 : Ojs.t) -> intf_of_js __tags_of_js x959
    and this_to_js :
      'tags 'W .
        ('tags -> Ojs.t) -> ('W -> Ojs.t) -> ('tags, 'W) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __W) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__W_to_js : __W -> Ojs.t) ->
              fun (x957 : __tags intf) -> intf_to_js __tags_to_js x957
    let (get_abort :
      ('tags, 'W) this -> UnderlyingSinkAbortCallback.t option) =
      fun (x961 : ('tags, 'W) this) ->
        Ojs.option_of_js UnderlyingSinkAbortCallback.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x961) "abort")
    let (set_abort :
      ('tags, 'W) this -> UnderlyingSinkAbortCallback.t -> unit) =
      fun (x965 : ('tags, 'W) this) ->
        fun (x966 : UnderlyingSinkAbortCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x965) "abort"
            (UnderlyingSinkAbortCallback.t_to_js x966)
    let (get_close :
      ('tags, 'W) this -> UnderlyingSinkCloseCallback.t option) =
      fun (x969 : ('tags, 'W) this) ->
        Ojs.option_of_js UnderlyingSinkCloseCallback.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x969) "close")
    let (set_close :
      ('tags, 'W) this -> UnderlyingSinkCloseCallback.t -> unit) =
      fun (x973 : ('tags, 'W) this) ->
        fun (x974 : UnderlyingSinkCloseCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x973) "close"
            (UnderlyingSinkCloseCallback.t_to_js x974)
    let (get_start :
      ('tags, 'W) this -> UnderlyingSinkStartCallback.t option) =
      fun (x977 : ('tags, 'W) this) ->
        Ojs.option_of_js UnderlyingSinkStartCallback.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x977) "start")
    let (set_start :
      ('tags, 'W) this -> UnderlyingSinkStartCallback.t -> unit) =
      fun (x981 : ('tags, 'W) this) ->
        fun (x982 : UnderlyingSinkStartCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x981) "start"
            (UnderlyingSinkStartCallback.t_to_js x982)
    let (get_type : ('tags, 'W) this -> undefined) =
      fun (x985 : ('tags, 'W) this) ->
        undefined_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x985) "type")
    let (set_type : ('tags, 'W) this -> undefined -> unit) =
      fun (x988 : ('tags, 'W) this) ->
        fun (x989 : undefined) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x988) "type"
            (undefined_to_js x989)
    let (get_write :
      ('tags, 'W) this -> 'W UnderlyingSinkWriteCallback.t option) =
      fun (x992 : ('tags, 'W) this) ->
        Ojs.option_of_js
          (fun (x995 : Ojs.t) ->
             UnderlyingSinkWriteCallback.t_of_js Obj.magic x995)
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x992) "write")
    let (set_write :
      ('tags, 'W) this -> 'W UnderlyingSinkWriteCallback.t -> unit) =
      fun (x997 : ('tags, 'W) this) ->
        fun (x998 : 'W UnderlyingSinkWriteCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x997) "write"
            (UnderlyingSinkWriteCallback.t_to_js Obj.magic x998)
    let (create :
      ?abort:UnderlyingSinkAbortCallback.t ->
        ?close:UnderlyingSinkCloseCallback.t ->
          ?start:UnderlyingSinkStartCallback.t ->
            ?type_:never ->
              ?write:'W UnderlyingSinkWriteCallback.t -> unit -> 'W t)
      =
      fun ?abort:(x1002 : UnderlyingSinkAbortCallback.t option) ->
        fun ?close:(x1003 : UnderlyingSinkCloseCallback.t option) ->
          fun ?start:(x1004 : UnderlyingSinkStartCallback.t option) ->
            fun ?type_:(x1005 : never option) ->
              fun ?write:(x1006 : 'W UnderlyingSinkWriteCallback.t option) ->
                fun () ->
                  let x1007 = Ojs.empty_obj () in
                  (match x1002 with
                   | Some x1014 ->
                       Ojs.set_prop_ascii x1007 "abort"
                         (UnderlyingSinkAbortCallback.t_to_js x1014)
                   | None -> ());
                  (match x1003 with
                   | Some x1013 ->
                       Ojs.set_prop_ascii x1007 "close"
                         (UnderlyingSinkCloseCallback.t_to_js x1013)
                   | None -> ());
                  (match x1004 with
                   | Some x1012 ->
                       Ojs.set_prop_ascii x1007 "start"
                         (UnderlyingSinkStartCallback.t_to_js x1012)
                   | None -> ());
                  (match x1005 with
                   | Some x1011 ->
                       Ojs.set_prop_ascii x1007 "type" (never_to_js x1011)
                   | None -> ());
                  (match x1006 with
                   | Some x1009 ->
                       Ojs.set_prop_ascii x1007 "write"
                         (UnderlyingSinkWriteCallback.t_to_js Obj.magic x1009)
                   | None -> ());
                  t_of_js Obj.magic x1007
    let cast_from = Obj.magic
  end
module QueuingStrategySize =
  struct
    type 'T t = [ `QueuingStrategySize of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x1017 : Ojs.t) -> t_of_js __T_of_js x1017
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x1015 : __T t) -> t_to_js __T_to_js x1015
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x1021 : Ojs.t) -> t_of_js any_of_js x1021
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x1019 : any t) -> t_to_js any_to_js x1019
    type 'T tags = [ `QueuingStrategySize of 'T ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `QueuingStrategySize of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__T_of_js : Ojs.t -> __T) ->
              fun (x1025 : Ojs.t) -> intf_of_js __tags_of_js x1025
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__T_to_js : __T -> Ojs.t) ->
              fun (x1023 : __tags intf) -> intf_to_js __tags_to_js x1023
    let (apply : ('tags, 'T) this -> chunk:'T -> float) =
      fun (x1028 : ('tags, 'T) this) ->
        fun ~chunk:(x1027 : 'T) ->
          Ojs.float_of_js
            (Ojs.apply (this_to_js Obj.magic Obj.magic x1028)
               [|(Obj.magic x1027)|])
    let cast_from = Obj.magic
  end
module QueuingStrategy =
  struct
    type 'T t = [ `QueuingStrategy of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x1033 : Ojs.t) -> t_of_js __T_of_js x1033
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x1031 : __T t) -> t_to_js __T_to_js x1031
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x1037 : Ojs.t) -> t_of_js any_of_js x1037
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x1035 : any t) -> t_to_js any_to_js x1035
    type 'T tags = [ `QueuingStrategy of 'T ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `QueuingStrategy of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__T_of_js : Ojs.t -> __T) ->
              fun (x1041 : Ojs.t) -> intf_of_js __tags_of_js x1041
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__T_to_js : __T -> Ojs.t) ->
              fun (x1039 : __tags intf) -> intf_to_js __tags_to_js x1039
    let (get_highWaterMark : ('tags, 'T) this -> float option) =
      fun (x1043 : ('tags, 'T) this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x1043)
             "highWaterMark")
    let (set_highWaterMark : ('tags, 'T) this -> float -> unit) =
      fun (x1047 : ('tags, 'T) this) ->
        fun (x1048 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x1047)
            "highWaterMark" (Ojs.float_to_js x1048)
    let (get_size : ('tags, 'T) this -> 'T QueuingStrategySize.t option) =
      fun (x1051 : ('tags, 'T) this) ->
        Ojs.option_of_js
          (fun (x1054 : Ojs.t) -> QueuingStrategySize.t_of_js Obj.magic x1054)
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x1051) "size")
    let (set_size : ('tags, 'T) this -> 'T QueuingStrategySize.t -> unit) =
      fun (x1056 : ('tags, 'T) this) ->
        fun (x1057 : 'T QueuingStrategySize.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x1056) "size"
            (QueuingStrategySize.t_to_js Obj.magic x1057)
    let (create :
      ?highWaterMark:float -> ?size:'T QueuingStrategySize.t -> unit -> 'T t)
      =
      fun ?highWaterMark:(x1061 : float option) ->
        fun ?size:(x1062 : 'T QueuingStrategySize.t option) ->
          fun () ->
            let x1063 = Ojs.empty_obj () in
            (match x1061 with
             | Some x1067 ->
                 Ojs.set_prop_ascii x1063 "highWaterMark"
                   (Ojs.float_to_js x1067)
             | None -> ());
            (match x1062 with
             | Some x1065 ->
                 Ojs.set_prop_ascii x1063 "size"
                   (QueuingStrategySize.t_to_js Obj.magic x1065)
             | None -> ());
            t_of_js Obj.magic x1063
    let cast_from = Obj.magic
  end
module rec
  WritableStream:sig
                   type 'W t = [ `WritableStream of 'W ] intf
                   type 'W t_1 = 'W t
                   type t_0 = any t
                   [@@@js.stop ]
                   type 'W tags = [ `WritableStream of 'W ]
                   type 'W tags_1 = 'W tags
                   type tags_0 = any tags
                   [@@@js.start ]
                   [@@@js.implem
                     type 'W tags = [ `WritableStream of 'W ]
                     type 'W tags_1 = 'W tags
                     type tags_0 = any tags]
                   type ('tags, 'W) this =
                     'tags intf constraint 'tags = [> `WritableStream of 'W ]
                   val t_to_js : ('W -> Ojs.t) -> 'W t -> Ojs.t
                   val t_of_js : (Ojs.t -> 'W) -> Ojs.t -> 'W t
                   val t_1_to_js : ('W -> Ojs.t) -> 'W t_1 -> Ojs.t
                   val t_1_of_js : (Ojs.t -> 'W) -> Ojs.t -> 'W t_1
                   val t_0_to_js : t_0 -> Ojs.t
                   val t_0_of_js : Ojs.t -> t_0
                   val get_locked : ('tags, 'W) this -> bool
                   val abort :
                     ('tags, 'W) this ->
                       ?reason:any -> unit -> unit Promise.t_1
                   val close : ('tags, 'W) this -> unit Promise.t_1
                   val getWriter :
                     ('tags, 'W) this -> 'W WritableStreamDefaultWriter.t
                   val cast_from : ('tags, 'W) this -> 'W t
                   val prototype : unit -> t_0
                   val create :
                     ?underlyingSink:'W UnderlyingSink.t ->
                       ?strategy:'W QueuingStrategy.t -> unit -> 'W t
                 end =
  struct
    type 'W t = [ `WritableStream of 'W ] intf
    let rec t_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t =
      fun _W -> Obj.magic
    and t_to_js : 'W . ('W -> Ojs.t) -> 'W t -> Ojs.t = fun _W -> Obj.magic
    type 'W t_1 = 'W t
    let rec t_1_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t_1 =
      fun (type __W) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x1070 : Ojs.t) -> t_of_js __W_of_js x1070
    and t_1_to_js : 'W . ('W -> Ojs.t) -> 'W t_1 -> Ojs.t =
      fun (type __W) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x1068 : __W t) -> t_to_js __W_to_js x1068
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x1074 : Ojs.t) -> t_of_js any_of_js x1074
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x1072 : any t) -> t_to_js any_to_js x1072
    type 'W tags = [ `WritableStream of 'W ]
    type 'W tags_1 = 'W tags
    type tags_0 = any tags
    type ('tags, 'W) this =
      'tags intf constraint 'tags = [> `WritableStream of 'W ]
    let rec this_of_js :
      'tags 'W .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'W) this
      =
      fun (type __tags) ->
        fun (type __W) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__W_of_js : Ojs.t -> __W) ->
              fun (x1078 : Ojs.t) -> intf_of_js __tags_of_js x1078
    and this_to_js :
      'tags 'W .
        ('tags -> Ojs.t) -> ('W -> Ojs.t) -> ('tags, 'W) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __W) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__W_to_js : __W -> Ojs.t) ->
              fun (x1076 : __tags intf) -> intf_to_js __tags_to_js x1076
    let (get_locked : ('tags, 'W) this -> bool) =
      fun (x1080 : ('tags, 'W) this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x1080) "locked")
    let (abort : ('tags, 'W) this -> ?reason:any -> unit -> unit Promise.t_1)
      =
      fun (x1086 : ('tags, 'W) this) ->
        fun ?reason:(x1083 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x1089 = this_to_js Obj.magic Obj.magic x1086 in
               Ojs.call (Ojs.get_prop_ascii x1089 "abort") "apply"
                 [|x1089;((let x1084 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1083 with
                            | Some x1085 ->
                                ignore
                                  (Ojs.call x1084 "push"
                                     [|(any_to_js x1085)|])
                            | None -> ());
                           x1084))|])
    let (close : ('tags, 'W) this -> unit Promise.t_1) =
      fun (x1091 : ('tags, 'W) this) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (this_to_js Obj.magic Obj.magic x1091) "close" [||])
    let (getWriter : ('tags, 'W) this -> 'W WritableStreamDefaultWriter.t) =
      fun (x1095 : ('tags, 'W) this) ->
        WritableStreamDefaultWriter.t_of_js Obj.magic
          (Ojs.call (this_to_js Obj.magic Obj.magic x1095) "getWriter" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WritableStream") "prototype")
    let (create :
      ?underlyingSink:'W UnderlyingSink.t ->
        ?strategy:'W QueuingStrategy.t -> unit -> 'W t)
      =
      fun ?underlyingSink:(x1099 : 'W UnderlyingSink.t option) ->
        fun ?strategy:(x1100 : 'W QueuingStrategy.t option) ->
          fun () ->
            t_of_js Obj.magic
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "WritableStream")
                 (let x1101 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x1099 with
                   | Some x1104 ->
                       ignore
                         (Ojs.call x1101 "push"
                            [|(UnderlyingSink.t_to_js Obj.magic x1104)|])
                   | None -> ());
                  (match x1100 with
                   | Some x1102 ->
                       ignore
                         (Ojs.call x1101 "push"
                            [|(QueuingStrategy.t_to_js Obj.magic x1102)|])
                   | None -> ());
                  x1101))
  end
 and
  WritableStreamDefaultWriter:sig
                                type 'W t =
                                  [ `WritableStreamDefaultWriter of 'W ] intf
                                type 'W t_1 = 'W t
                                type t_0 = any t
                                [@@@js.stop ]
                                type 'W tags =
                                  [ `WritableStreamDefaultWriter of 'W ]
                                type 'W tags_1 = 'W tags
                                type tags_0 = any tags
                                [@@@js.start ]
                                [@@@js.implem
                                  type 'W tags =
                                    [ `WritableStreamDefaultWriter of 'W ]
                                  type 'W tags_1 = 'W tags
                                  type tags_0 = any tags]
                                type ('tags, 'W) this =
                                  'tags intf constraint 'tags =
                                              [>
                                                `WritableStreamDefaultWriter
                                                  of 'W ]
                                val t_to_js : ('W -> Ojs.t) -> 'W t -> Ojs.t
                                val t_of_js : (Ojs.t -> 'W) -> Ojs.t -> 'W t
                                val t_1_to_js :
                                  ('W -> Ojs.t) -> 'W t_1 -> Ojs.t
                                val t_1_of_js :
                                  (Ojs.t -> 'W) -> Ojs.t -> 'W t_1
                                val t_0_to_js : t_0 -> Ojs.t
                                val t_0_of_js : Ojs.t -> t_0
                                val get_closed :
                                  ('tags, 'W) this -> undefined Promise.t_1
                                val get_desiredSize :
                                  ('tags, 'W) this -> float option
                                val get_ready :
                                  ('tags, 'W) this -> undefined Promise.t_1
                                val abort :
                                  ('tags, 'W) this ->
                                    ?reason:any -> unit -> unit Promise.t_1
                                val close :
                                  ('tags, 'W) this -> unit Promise.t_1
                                val releaseLock : ('tags, 'W) this -> unit
                                val write :
                                  ('tags, 'W) this ->
                                    ?chunk:'W -> unit -> unit Promise.t_1
                                val cast_from : ('tags, 'W) this -> 'W t
                                val prototype : unit -> t_0
                                val create : 'W WritableStream.t -> 'W t
                              end =
  struct
    type 'W t = [ `WritableStreamDefaultWriter of 'W ] intf
    let rec t_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t =
      fun _W -> Obj.magic
    and t_to_js : 'W . ('W -> Ojs.t) -> 'W t -> Ojs.t = fun _W -> Obj.magic
    type 'W t_1 = 'W t
    let rec t_1_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t_1 =
      fun (type __W) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x1109 : Ojs.t) -> t_of_js __W_of_js x1109
    and t_1_to_js : 'W . ('W -> Ojs.t) -> 'W t_1 -> Ojs.t =
      fun (type __W) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x1107 : __W t) -> t_to_js __W_to_js x1107
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x1113 : Ojs.t) -> t_of_js any_of_js x1113
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x1111 : any t) -> t_to_js any_to_js x1111
    type 'W tags = [ `WritableStreamDefaultWriter of 'W ]
    type 'W tags_1 = 'W tags
    type tags_0 = any tags
    type ('tags, 'W) this =
      'tags intf constraint 'tags = [> `WritableStreamDefaultWriter of 'W ]
    let rec this_of_js :
      'tags 'W .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'W) this
      =
      fun (type __tags) ->
        fun (type __W) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__W_of_js : Ojs.t -> __W) ->
              fun (x1117 : Ojs.t) -> intf_of_js __tags_of_js x1117
    and this_to_js :
      'tags 'W .
        ('tags -> Ojs.t) -> ('W -> Ojs.t) -> ('tags, 'W) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __W) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__W_to_js : __W -> Ojs.t) ->
              fun (x1115 : __tags intf) -> intf_to_js __tags_to_js x1115
    let (get_closed : ('tags, 'W) this -> undefined Promise.t_1) =
      fun (x1119 : ('tags, 'W) this) ->
        Promise.t_1_of_js undefined_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x1119) "closed")
    let (get_desiredSize : ('tags, 'W) this -> float option) =
      fun (x1123 : ('tags, 'W) this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x1123)
             "desiredSize")
    let (get_ready : ('tags, 'W) this -> undefined Promise.t_1) =
      fun (x1127 : ('tags, 'W) this) ->
        Promise.t_1_of_js undefined_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x1127) "ready")
    let (abort : ('tags, 'W) this -> ?reason:any -> unit -> unit Promise.t_1)
      =
      fun (x1134 : ('tags, 'W) this) ->
        fun ?reason:(x1131 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x1137 = this_to_js Obj.magic Obj.magic x1134 in
               Ojs.call (Ojs.get_prop_ascii x1137 "abort") "apply"
                 [|x1137;((let x1132 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1131 with
                            | Some x1133 ->
                                ignore
                                  (Ojs.call x1132 "push"
                                     [|(any_to_js x1133)|])
                            | None -> ());
                           x1132))|])
    let (close : ('tags, 'W) this -> unit Promise.t_1) =
      fun (x1139 : ('tags, 'W) this) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (this_to_js Obj.magic Obj.magic x1139) "close" [||])
    let (releaseLock : ('tags, 'W) this -> unit) =
      fun (x1143 : ('tags, 'W) this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic Obj.magic x1143) "releaseLock" [||])
    let (write : ('tags, 'W) this -> ?chunk:'W -> unit -> unit Promise.t_1) =
      fun (x1149 : ('tags, 'W) this) ->
        fun ?chunk:(x1146 : 'W option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x1152 = this_to_js Obj.magic Obj.magic x1149 in
               Ojs.call (Ojs.get_prop_ascii x1152 "write") "apply"
                 [|x1152;((let x1147 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1146 with
                            | Some x1148 ->
                                ignore
                                  (Ojs.call x1147 "push"
                                     [|(Obj.magic x1148)|])
                            | None -> ());
                           x1147))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WritableStreamDefaultWriter")
             "prototype")
    let (create : 'W WritableStream.t -> 'W t) =
      fun (x1154 : 'W WritableStream.t) ->
        t_of_js Obj.magic
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WritableStreamDefaultWriter")
             [|(WritableStream.t_to_js Obj.magic x1154)|])
  end
module ReadableStreamGenericReader =
  struct
    type t = [ `ReadableStreamGenericReader ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1158 : Ojs.t) -> t_of_js x1158
    and t_0_to_js : t_0 -> Ojs.t = fun (x1157 : t) -> t_to_js x1157
    type tags = [ `ReadableStreamGenericReader ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ReadableStreamGenericReader ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1161 : Ojs.t) -> intf_of_js __tags_of_js x1161
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1159 : __tags intf) -> intf_to_js __tags_to_js x1159
    let (get_closed : 'tags this -> undefined Promise.t_1) =
      fun (x1163 : 'tags this) ->
        Promise.t_1_of_js undefined_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1163) "closed")
    let (cancel : 'tags this -> ?reason:any -> unit -> unit Promise.t_1) =
      fun (x1169 : 'tags this) ->
        fun ?reason:(x1166 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x1171 = this_to_js Obj.magic x1169 in
               Ojs.call (Ojs.get_prop_ascii x1171 "cancel") "apply"
                 [|x1171;((let x1167 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1166 with
                            | Some x1168 ->
                                ignore
                                  (Ojs.call x1167 "push"
                                     [|(any_to_js x1168)|])
                            | None -> ());
                           x1167))|])
    let cast_from = Obj.magic
  end
module ReadableStreamDefaultReadValueResult =
  struct
    type 'T t = [ `ReadableStreamDefaultReadValueResult of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x1175 : Ojs.t) -> t_of_js __T_of_js x1175
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x1173 : __T t) -> t_to_js __T_to_js x1173
    type 'T tags = [ `ReadableStreamDefaultReadValueResult of 'T ]
    type 'T tags_1 = 'T tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags =
                  [> `ReadableStreamDefaultReadValueResult of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__T_of_js : Ojs.t -> __T) ->
              fun (x1179 : Ojs.t) -> intf_of_js __tags_of_js x1179
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__T_to_js : __T -> Ojs.t) ->
              fun (x1177 : __tags intf) -> intf_to_js __tags_to_js x1177
    let (get_done : ('tags, 'T) this -> [ `L_b_false ]) =
      fun (x1181 : ('tags, 'T) this) ->
        let x1184 =
          Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x1181) "done" in
        match Ojs.bool_of_js x1184 with
        | false -> `L_b_false
        | _ -> assert false
    let (set_done : ('tags, 'T) this -> [ `L_b_false ] -> unit) =
      fun (x1185 : ('tags, 'T) this) ->
        fun (x1186 : [ `L_b_false ]) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x1185) "done"
            (match x1186 with | `L_b_false -> Ojs.bool_to_js false)
    let (get_value : ('tags, 'T) this -> 'T) =
      fun (x1189 : ('tags, 'T) this) ->
        Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x1189) "value")
    let (set_value : ('tags, 'T) this -> 'T -> unit) =
      fun (x1192 : ('tags, 'T) this) ->
        fun (x1193 : 'T) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x1192) "value"
            (Obj.magic x1193)
    let (create : done_:[ `L_b_false ] -> value:'T -> unit -> 'T t) =
      fun ~done_:(x1196 : [ `L_b_false ]) ->
        fun ~value:(x1197 : 'T) ->
          fun () ->
            let x1198 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x1198 "done"
              (match x1196 with | `L_b_false -> Ojs.bool_to_js false);
            Ojs.set_prop_ascii x1198 "value" (Obj.magic x1197);
            t_of_js Obj.magic x1198
    let cast_from = Obj.magic
  end
module ReadableStreamDefaultReadDoneResult =
  struct
    type t = [ `ReadableStreamDefaultReadDoneResult ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1201 : Ojs.t) -> t_of_js x1201
    and t_0_to_js : t_0 -> Ojs.t = fun (x1200 : t) -> t_to_js x1200
    type tags = [ `ReadableStreamDefaultReadDoneResult ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ReadableStreamDefaultReadDoneResult ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1204 : Ojs.t) -> intf_of_js __tags_of_js x1204
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1202 : __tags intf) -> intf_to_js __tags_to_js x1202
    let (get_done : 'tags this -> [ `L_b_true ]) =
      fun (x1206 : 'tags this) ->
        let x1208 = Ojs.get_prop_ascii (this_to_js Obj.magic x1206) "done" in
        match Ojs.bool_of_js x1208 with
        | true -> `L_b_true
        | _ -> assert false
    let (set_done : 'tags this -> [ `L_b_true ] -> unit) =
      fun (x1209 : 'tags this) ->
        fun (x1210 : [ `L_b_true ]) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1209) "done"
            (match x1210 with | `L_b_true -> Ojs.bool_to_js true)
    let (get_value : 'tags this -> undefined) =
      fun (x1212 : 'tags this) ->
        undefined_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1212) "value")
    let (set_value : 'tags this -> undefined -> unit) =
      fun (x1214 : 'tags this) ->
        fun (x1215 : undefined) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1214) "value"
            (undefined_to_js x1215)
    let (create : done_:[ `L_b_true ] -> ?value:never -> unit -> t) =
      fun ~done_:(x1217 : [ `L_b_true ]) ->
        fun ?value:(x1218 : never option) ->
          fun () ->
            let x1219 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x1219 "done"
              (match x1217 with | `L_b_true -> Ojs.bool_to_js true);
            (match x1218 with
             | Some x1220 ->
                 Ojs.set_prop_ascii x1219 "value" (never_to_js x1220)
             | None -> ());
            t_of_js x1219
    let cast_from = Obj.magic
  end
module ReadableStreamDefaultReadResult =
  struct
    type 'T t =
      [ `U_b_false of 'T ReadableStreamDefaultReadValueResult.t 
      | `U_b_true of ReadableStreamDefaultReadDoneResult.t ]
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x1225 : Ojs.t) ->
            let x1226 = x1225 in
            match Ojs.bool_of_js (Ojs.get_prop_ascii x1226 "done") with
            | false ->
                `U_b_false
                  (ReadableStreamDefaultReadValueResult.t_of_js __T_of_js
                     x1226)
            | true ->
                `U_b_true (ReadableStreamDefaultReadDoneResult.t_of_js x1226)
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun
            (x1221 :
              [ `U_b_false of __T ReadableStreamDefaultReadValueResult.t 
              | `U_b_true of ReadableStreamDefaultReadDoneResult.t ])
            ->
            match x1221 with
            | `U_b_false x1222 ->
                ReadableStreamDefaultReadValueResult.t_to_js __T_to_js x1222
            | `U_b_true x1224 ->
                ReadableStreamDefaultReadDoneResult.t_to_js x1224
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x1230 : Ojs.t) -> t_of_js __T_of_js x1230
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x1228 : __T t) -> t_to_js __T_to_js x1228
  end
module rec
  ReadableStream:sig
                   type 'R t = [ `ReadableStream of 'R ] intf
                   type 'R t_1 = 'R t
                   type t_0 = any t
                   [@@@js.stop ]
                   type 'R tags = [ `ReadableStream of 'R ]
                   type 'R tags_1 = 'R tags
                   type tags_0 = any tags
                   [@@@js.start ]
                   [@@@js.implem
                     type 'R tags = [ `ReadableStream of 'R ]
                     type 'R tags_1 = 'R tags
                     type tags_0 = any tags]
                   type ('tags, 'R) this =
                     'tags intf constraint 'tags = [> `ReadableStream of 'R ]
                   val t_to_js : ('R -> Ojs.t) -> 'R t -> Ojs.t
                   val t_of_js : (Ojs.t -> 'R) -> Ojs.t -> 'R t
                   val t_1_to_js : ('R -> Ojs.t) -> 'R t_1 -> Ojs.t
                   val t_1_of_js : (Ojs.t -> 'R) -> Ojs.t -> 'R t_1
                   val t_0_to_js : t_0 -> Ojs.t
                   val t_0_of_js : Ojs.t -> t_0
                   val get_locked : ('tags, 'R) this -> bool
                   val cancel :
                     ('tags, 'R) this ->
                       ?reason:any -> unit -> unit Promise.t_1
                   val getReader :
                     ('tags, 'R) this -> 'R ReadableStreamDefaultReader.t
                   val pipeThrough :
                     ('tags, 'R) this ->
                       transform:('T, 'R) ReadableWritablePair.t ->
                         ?options:StreamPipeOptions.t -> unit -> 'T t
                   val pipeTo :
                     ('tags, 'R) this ->
                       destination:'R WritableStream.t ->
                         ?options:StreamPipeOptions.t ->
                           unit -> unit Promise.t_1
                   val tee : ('tags, 'R) this -> ('R t * 'R t)
                   val cast_from : ('tags, 'R) this -> 'R t
                   val prototype : unit -> t_0
                   val create :
                     ?underlyingSource:'R UnderlyingSource.t ->
                       ?strategy:'R QueuingStrategy.t -> unit -> 'R t
                 end =
  struct
    type 'R t = [ `ReadableStream of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 =
      fun (type __R) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x1234 : Ojs.t) -> t_of_js __R_of_js x1234
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t =
      fun (type __R) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x1232 : __R t) -> t_to_js __R_to_js x1232
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x1238 : Ojs.t) -> t_of_js any_of_js x1238
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x1236 : any t) -> t_to_js any_to_js x1236
    type 'R tags = [ `ReadableStream of 'R ]
    type 'R tags_1 = 'R tags
    type tags_0 = any tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags = [> `ReadableStream of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      =
      fun (type __tags) ->
        fun (type __R) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__R_of_js : Ojs.t -> __R) ->
              fun (x1242 : Ojs.t) -> intf_of_js __tags_of_js x1242
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __R) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__R_to_js : __R -> Ojs.t) ->
              fun (x1240 : __tags intf) -> intf_to_js __tags_to_js x1240
    let (get_locked : ('tags, 'R) this -> bool) =
      fun (x1244 : ('tags, 'R) this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x1244) "locked")
    let (cancel :
      ('tags, 'R) this -> ?reason:any -> unit -> unit Promise.t_1) =
      fun (x1250 : ('tags, 'R) this) ->
        fun ?reason:(x1247 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x1253 = this_to_js Obj.magic Obj.magic x1250 in
               Ojs.call (Ojs.get_prop_ascii x1253 "cancel") "apply"
                 [|x1253;((let x1248 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1247 with
                            | Some x1249 ->
                                ignore
                                  (Ojs.call x1248 "push"
                                     [|(any_to_js x1249)|])
                            | None -> ());
                           x1248))|])
    let (getReader : ('tags, 'R) this -> 'R ReadableStreamDefaultReader.t) =
      fun (x1255 : ('tags, 'R) this) ->
        ReadableStreamDefaultReader.t_of_js Obj.magic
          (Ojs.call (this_to_js Obj.magic Obj.magic x1255) "getReader" [||])
    let (pipeThrough :
      ('tags, 'R) this ->
        transform:('T, 'R) ReadableWritablePair.t ->
          ?options:StreamPipeOptions.t -> unit -> 'T t)
      =
      fun (x1265 : ('tags, 'R) this) ->
        fun ~transform:(x1259 : ('T, 'R) ReadableWritablePair.t) ->
          fun ?options:(x1260 : StreamPipeOptions.t option) ->
            fun () ->
              t_of_js Obj.magic
                (let x1268 = this_to_js Obj.magic Obj.magic x1265 in
                 Ojs.call (Ojs.get_prop_ascii x1268 "pipeThrough") "apply"
                   [|x1268;((let x1261 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1261 "push"
                                  [|(ReadableWritablePair.t_to_js Obj.magic
                                       Obj.magic x1259)|]);
                             (match x1260 with
                              | Some x1262 ->
                                  ignore
                                    (Ojs.call x1261 "push"
                                       [|(StreamPipeOptions.t_to_js x1262)|])
                              | None -> ());
                             x1261))|])
    let (pipeTo :
      ('tags, 'R) this ->
        destination:'R WritableStream.t ->
          ?options:StreamPipeOptions.t -> unit -> unit Promise.t_1)
      =
      fun (x1275 : ('tags, 'R) this) ->
        fun ~destination:(x1270 : 'R WritableStream.t) ->
          fun ?options:(x1271 : StreamPipeOptions.t option) ->
            fun () ->
              Promise.t_1_of_js Ojs.unit_of_js
                (let x1278 = this_to_js Obj.magic Obj.magic x1275 in
                 Ojs.call (Ojs.get_prop_ascii x1278 "pipeTo") "apply"
                   [|x1278;((let x1272 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1272 "push"
                                  [|(WritableStream.t_to_js Obj.magic x1270)|]);
                             (match x1271 with
                              | Some x1273 ->
                                  ignore
                                    (Ojs.call x1272 "push"
                                       [|(StreamPipeOptions.t_to_js x1273)|])
                              | None -> ());
                             x1272))|])
    let (tee : ('tags, 'R) this -> ('R t * 'R t)) =
      fun (x1280 : ('tags, 'R) this) ->
        let x1283 =
          Ojs.call (this_to_js Obj.magic Obj.magic x1280) "tee" [||] in
        ((t_of_js Obj.magic (Ojs.array_get x1283 0)),
          (t_of_js Obj.magic (Ojs.array_get x1283 1)))
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ReadableStream") "prototype")
    let (create :
      ?underlyingSource:'R UnderlyingSource.t ->
        ?strategy:'R QueuingStrategy.t -> unit -> 'R t)
      =
      fun ?underlyingSource:(x1286 : 'R UnderlyingSource.t option) ->
        fun ?strategy:(x1287 : 'R QueuingStrategy.t option) ->
          fun () ->
            t_of_js Obj.magic
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "ReadableStream")
                 (let x1288 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x1286 with
                   | Some x1291 ->
                       ignore
                         (Ojs.call x1288 "push"
                            [|(UnderlyingSource.t_to_js Obj.magic x1291)|])
                   | None -> ());
                  (match x1287 with
                   | Some x1289 ->
                       ignore
                         (Ojs.call x1288 "push"
                            [|(QueuingStrategy.t_to_js Obj.magic x1289)|])
                   | None -> ());
                  x1288))
  end
 and
  ReadableStreamDefaultReader:sig
                                type 'R t =
                                  [ `ReadableStreamDefaultReader of 'R 
                                  | `ReadableStreamGenericReader ] intf
                                type 'R t_1 = 'R t
                                type t_0 = any t
                                [@@@js.stop ]
                                type 'R tags =
                                  [ `ReadableStreamDefaultReader of 'R 
                                  | `ReadableStreamGenericReader ]
                                type 'R tags_1 = 'R tags
                                type tags_0 = any tags
                                [@@@js.start ]
                                [@@@js.implem
                                  type 'R tags =
                                    [ `ReadableStreamDefaultReader of 'R 
                                    | `ReadableStreamGenericReader ]
                                  type 'R tags_1 = 'R tags
                                  type tags_0 = any tags]
                                type ('tags, 'R) this =
                                  'tags intf constraint 'tags =
                                              [>
                                                `ReadableStreamDefaultReader
                                                  of 'R ]
                                val t_to_js : ('R -> Ojs.t) -> 'R t -> Ojs.t
                                val t_of_js : (Ojs.t -> 'R) -> Ojs.t -> 'R t
                                val t_1_to_js :
                                  ('R -> Ojs.t) -> 'R t_1 -> Ojs.t
                                val t_1_of_js :
                                  (Ojs.t -> 'R) -> Ojs.t -> 'R t_1
                                val t_0_to_js : t_0 -> Ojs.t
                                val t_0_of_js : Ojs.t -> t_0
                                val read :
                                  ('tags, 'R) this ->
                                    'R ReadableStreamDefaultReadResult.t
                                      Promise.t_1
                                val releaseLock : ('tags, 'R) this -> unit
                                val cast_from : ('tags, 'R) this -> 'R t
                                val prototype : unit -> t_0
                                val create : 'R ReadableStream.t -> 'R t
                              end =
  struct
    type 'R t =
      [ `ReadableStreamDefaultReader of 'R  | `ReadableStreamGenericReader ]
        intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 =
      fun (type __R) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x1296 : Ojs.t) -> t_of_js __R_of_js x1296
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t =
      fun (type __R) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x1294 : __R t) -> t_to_js __R_to_js x1294
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x1300 : Ojs.t) -> t_of_js any_of_js x1300
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x1298 : any t) -> t_to_js any_to_js x1298
    type 'R tags =
      [ `ReadableStreamDefaultReader of 'R  | `ReadableStreamGenericReader ]
    type 'R tags_1 = 'R tags
    type tags_0 = any tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags = [> `ReadableStreamDefaultReader of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      =
      fun (type __tags) ->
        fun (type __R) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__R_of_js : Ojs.t -> __R) ->
              fun (x1304 : Ojs.t) -> intf_of_js __tags_of_js x1304
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __R) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__R_to_js : __R -> Ojs.t) ->
              fun (x1302 : __tags intf) -> intf_to_js __tags_to_js x1302
    let (read :
      ('tags, 'R) this -> 'R ReadableStreamDefaultReadResult.t Promise.t_1) =
      fun (x1306 : ('tags, 'R) this) ->
        Promise.t_1_of_js
          (fun (x1309 : Ojs.t) ->
             ReadableStreamDefaultReadResult.t_of_js Obj.magic x1309)
          (Ojs.call (this_to_js Obj.magic Obj.magic x1306) "read" [||])
    let (releaseLock : ('tags, 'R) this -> unit) =
      fun (x1311 : ('tags, 'R) this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic Obj.magic x1311) "releaseLock" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ReadableStreamDefaultReader")
             "prototype")
    let (create : 'R ReadableStream.t -> 'R t) =
      fun (x1314 : 'R ReadableStream.t) ->
        t_of_js Obj.magic
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ReadableStreamDefaultReader")
             [|(ReadableStream.t_to_js Obj.magic x1314)|])
  end and
       ReadableWritablePair:sig
                              type ('R, 'W) t =
                                [ `ReadableWritablePair of ('R * 'W) ] intf
                              type ('R, 'W) t_2 = ('R, 'W) t
                              type 'R t_1 = ('R, any) t
                              type t_0 = (any, any) t
                              [@@@js.stop ]
                              type ('R, 'W) tags =
                                [ `ReadableWritablePair of ('R * 'W) ]
                              type ('R, 'W) tags_2 = ('R, 'W) tags
                              type 'R tags_1 = ('R, any) tags
                              type tags_0 = (any, any) tags
                              [@@@js.start ]
                              [@@@js.implem
                                type ('R, 'W) tags =
                                  [ `ReadableWritablePair of ('R * 'W) ]
                                type ('R, 'W) tags_2 = ('R, 'W) tags
                                type 'R tags_1 = ('R, any) tags
                                type tags_0 = (any, any) tags]
                              type ('tags, 'R, 'W) this =
                                'tags intf constraint 'tags =
                                            [>
                                              `ReadableWritablePair of
                                                ('R * 'W) ]
                              val t_to_js :
                                ('R -> Ojs.t) ->
                                  ('W -> Ojs.t) -> ('R, 'W) t -> Ojs.t
                              val t_of_js :
                                (Ojs.t -> 'R) ->
                                  (Ojs.t -> 'W) -> Ojs.t -> ('R, 'W) t
                              val t_2_to_js :
                                ('R -> Ojs.t) ->
                                  ('W -> Ojs.t) -> ('R, 'W) t_2 -> Ojs.t
                              val t_2_of_js :
                                (Ojs.t -> 'R) ->
                                  (Ojs.t -> 'W) -> Ojs.t -> ('R, 'W) t_2
                              val t_1_to_js :
                                ('R -> Ojs.t) -> 'R t_1 -> Ojs.t
                              val t_1_of_js :
                                (Ojs.t -> 'R) -> Ojs.t -> 'R t_1
                              val t_0_to_js : t_0 -> Ojs.t
                              val t_0_of_js : Ojs.t -> t_0
                              val get_readable :
                                ('tags, 'R, 'W) this -> 'R ReadableStream.t
                              val set_readable :
                                ('tags, 'R, 'W) this ->
                                  'R ReadableStream.t -> unit
                              val get_writable :
                                ('tags, 'R, 'W) this -> 'W WritableStream.t
                              val set_writable :
                                ('tags, 'R, 'W) this ->
                                  'W WritableStream.t -> unit
                              val create :
                                readable:'R ReadableStream.t ->
                                  writable:'W WritableStream.t ->
                                    unit -> ('R, 'W) t
                              val cast_from :
                                ('tags, 'R, 'W) this -> ('R, 'W) t
                            end =
       struct
         type ('R, 'W) t = [ `ReadableWritablePair of ('R * 'W) ] intf
         let rec t_of_js :
           'R 'W . (Ojs.t -> 'R) -> (Ojs.t -> 'W) -> Ojs.t -> ('R, 'W) t =
           fun _R -> fun _W -> Obj.magic
         and t_to_js :
           'R 'W . ('R -> Ojs.t) -> ('W -> Ojs.t) -> ('R, 'W) t -> Ojs.t =
           fun _R -> fun _W -> Obj.magic
         type ('R, 'W) t_2 = ('R, 'W) t
         let rec t_2_of_js :
           'R 'W . (Ojs.t -> 'R) -> (Ojs.t -> 'W) -> Ojs.t -> ('R, 'W) t_2 =
           fun (type __R) ->
             fun (type __W) ->
               fun (__R_of_js : Ojs.t -> __R) ->
                 fun (__W_of_js : Ojs.t -> __W) ->
                   fun (x1320 : Ojs.t) -> t_of_js __R_of_js __W_of_js x1320
         and t_2_to_js :
           'R 'W . ('R -> Ojs.t) -> ('W -> Ojs.t) -> ('R, 'W) t_2 -> Ojs.t =
           fun (type __R) ->
             fun (type __W) ->
               fun (__R_to_js : __R -> Ojs.t) ->
                 fun (__W_to_js : __W -> Ojs.t) ->
                   fun (x1317 : (__R, __W) t) ->
                     t_to_js __R_to_js __W_to_js x1317
         type 'R t_1 = ('R, any) t
         let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 =
           fun (type __R) ->
             fun (__R_of_js : Ojs.t -> __R) ->
               fun (x1326 : Ojs.t) -> t_of_js __R_of_js any_of_js x1326
         and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t =
           fun (type __R) ->
             fun (__R_to_js : __R -> Ojs.t) ->
               fun (x1323 : (__R, any) t) ->
                 t_to_js __R_to_js any_to_js x1323
         type t_0 = (any, any) t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x1332 : Ojs.t) -> t_of_js any_of_js any_of_js x1332
         and t_0_to_js : t_0 -> Ojs.t =
           fun (x1329 : (any, any) t) -> t_to_js any_to_js any_to_js x1329
         type ('R, 'W) tags = [ `ReadableWritablePair of ('R * 'W) ]
         type ('R, 'W) tags_2 = ('R, 'W) tags
         type 'R tags_1 = ('R, any) tags
         type tags_0 = (any, any) tags
         type ('tags, 'R, 'W) this =
           'tags intf constraint 'tags =
                       [> `ReadableWritablePair of ('R * 'W) ]
         let rec this_of_js :
           'tags 'R 'W .
             (Ojs.t -> 'tags) ->
               (Ojs.t -> 'R) ->
                 (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'R, 'W) this
           =
           fun (type __tags) ->
             fun (type __R) ->
               fun (type __W) ->
                 fun (__tags_of_js : Ojs.t -> __tags) ->
                   fun (__R_of_js : Ojs.t -> __R) ->
                     fun (__W_of_js : Ojs.t -> __W) ->
                       fun (x1337 : Ojs.t) -> intf_of_js __tags_of_js x1337
         and this_to_js :
           'tags 'R 'W .
             ('tags -> Ojs.t) ->
               ('R -> Ojs.t) ->
                 ('W -> Ojs.t) -> ('tags, 'R, 'W) this -> Ojs.t
           =
           fun (type __tags) ->
             fun (type __R) ->
               fun (type __W) ->
                 fun (__tags_to_js : __tags -> Ojs.t) ->
                   fun (__R_to_js : __R -> Ojs.t) ->
                     fun (__W_to_js : __W -> Ojs.t) ->
                       fun (x1335 : __tags intf) ->
                         intf_to_js __tags_to_js x1335
         let (get_readable : ('tags, 'R, 'W) this -> 'R ReadableStream.t) =
           fun (x1339 : ('tags, 'R, 'W) this) ->
             ReadableStream.t_of_js Obj.magic
               (Ojs.get_prop_ascii
                  (this_to_js Obj.magic Obj.magic Obj.magic x1339) "readable")
         let (set_readable :
           ('tags, 'R, 'W) this -> 'R ReadableStream.t -> unit) =
           fun (x1344 : ('tags, 'R, 'W) this) ->
             fun (x1345 : 'R ReadableStream.t) ->
               Ojs.set_prop_ascii
                 (this_to_js Obj.magic Obj.magic Obj.magic x1344) "readable"
                 (ReadableStream.t_to_js Obj.magic x1345)
         let (get_writable : ('tags, 'R, 'W) this -> 'W WritableStream.t) =
           fun (x1350 : ('tags, 'R, 'W) this) ->
             WritableStream.t_of_js Obj.magic
               (Ojs.get_prop_ascii
                  (this_to_js Obj.magic Obj.magic Obj.magic x1350) "writable")
         let (set_writable :
           ('tags, 'R, 'W) this -> 'W WritableStream.t -> unit) =
           fun (x1355 : ('tags, 'R, 'W) this) ->
             fun (x1356 : 'W WritableStream.t) ->
               Ojs.set_prop_ascii
                 (this_to_js Obj.magic Obj.magic Obj.magic x1355) "writable"
                 (WritableStream.t_to_js Obj.magic x1356)
         let (create :
           readable:'R ReadableStream.t ->
             writable:'W WritableStream.t -> unit -> ('R, 'W) t)
           =
           fun ~readable:(x1361 : 'R ReadableStream.t) ->
             fun ~writable:(x1362 : 'W WritableStream.t) ->
               fun () ->
                 let x1363 = Ojs.empty_obj () in
                 Ojs.set_prop_ascii x1363 "readable"
                   (ReadableStream.t_to_js Obj.magic x1361);
                 Ojs.set_prop_ascii x1363 "writable"
                   (WritableStream.t_to_js Obj.magic x1362);
                 t_of_js Obj.magic Obj.magic x1363
         let cast_from = Obj.magic
       end
module BufferSource =
  struct
    type t = (ArrayBuffer.t_0, ArrayBufferView.t_0) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x1371 : Ojs.t) ->
        union2_of_js ArrayBuffer.t_0_of_js ArrayBufferView.t_0_of_js x1371
    and t_to_js : t -> Ojs.t =
      fun (x1368 : (ArrayBuffer.t_0, ArrayBufferView.t_0) union2) ->
        union2_to_js ArrayBuffer.t_0_to_js ArrayBufferView.t_0_to_js x1368
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1375 : Ojs.t) -> t_of_js x1375
    and t_0_to_js : t_0 -> Ojs.t = fun (x1374 : t) -> t_to_js x1374
  end
module rec
  Blob:sig
         type t = [ `Blob ] intf
         type t_0 = t
         [@@@js.stop ]
         type tags = [ `Blob ]
         type tags_0 = tags
         [@@@js.start ]
         [@@@js.implem type tags = [ `Blob ]
           type tags_0 = tags]
         type 'tags this = 'tags intf constraint 'tags = [> `Blob ]
         val t_to_js : t -> Ojs.t
         val t_of_js : Ojs.t -> t
         val t_0_to_js : t_0 -> Ojs.t
         val t_0_of_js : Ojs.t -> t_0
         val get_size : 'tags this -> float
         val get_type : 'tags this -> string
         val arrayBuffer : 'tags this -> ArrayBuffer.t_0 Promise.t_1
         val slice :
           'tags this ->
             ?start:float -> ?end_:float -> ?contentType:string -> unit -> t
         val stream : 'tags this -> ReadableStream.t_0
         val text : 'tags this -> string Promise.t_1
         val cast_from : 'tags this -> t
         val prototype : unit -> t
         val create :
           ?blobParts:BlobPart.t list ->
             ?options:BlobPropertyBag.t -> unit -> t
       end =
  struct
    type t = [ `Blob ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1377 : Ojs.t) -> t_of_js x1377
    and t_0_to_js : t_0 -> Ojs.t = fun (x1376 : t) -> t_to_js x1376
    type tags = [ `Blob ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Blob ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1380 : Ojs.t) -> intf_of_js __tags_of_js x1380
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1378 : __tags intf) -> intf_to_js __tags_to_js x1378
    let (get_size : 'tags this -> float) =
      fun (x1382 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1382) "size")
    let (get_type : 'tags this -> string) =
      fun (x1384 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1384) "type")
    let (arrayBuffer : 'tags this -> ArrayBuffer.t_0 Promise.t_1) =
      fun (x1386 : 'tags this) ->
        Promise.t_1_of_js ArrayBuffer.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x1386) "arrayBuffer" [||])
    let (slice :
      'tags this ->
        ?start:float -> ?end_:float -> ?contentType:string -> unit -> t)
      =
      fun (x1396 : 'tags this) ->
        fun ?start:(x1389 : float option) ->
          fun ?end_:(x1390 : float option) ->
            fun ?contentType:(x1391 : string option) ->
              fun () ->
                t_of_js
                  (let x1398 = this_to_js Obj.magic x1396 in
                   Ojs.call (Ojs.get_prop_ascii x1398 "slice") "apply"
                     [|x1398;((let x1392 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x1389 with
                                | Some x1395 ->
                                    ignore
                                      (Ojs.call x1392 "push"
                                         [|(Ojs.float_to_js x1395)|])
                                | None -> ());
                               (match x1390 with
                                | Some x1394 ->
                                    ignore
                                      (Ojs.call x1392 "push"
                                         [|(Ojs.float_to_js x1394)|])
                                | None -> ());
                               (match x1391 with
                                | Some x1393 ->
                                    ignore
                                      (Ojs.call x1392 "push"
                                         [|(Ojs.string_to_js x1393)|])
                                | None -> ());
                               x1392))|])
    let (stream : 'tags this -> ReadableStream.t_0) =
      fun (x1399 : 'tags this) ->
        ReadableStream.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x1399) "stream" [||])
    let (text : 'tags this -> string Promise.t_1) =
      fun (x1401 : 'tags this) ->
        Promise.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x1401) "text" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Blob")
             "prototype")
    let (create :
      ?blobParts:BlobPart.t list -> ?options:BlobPropertyBag.t -> unit -> t)
      =
      fun ?blobParts:(x1404 : BlobPart.t list option) ->
        fun ?options:(x1405 : BlobPropertyBag.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Blob")
                 (let x1406 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x1404 with
                   | Some x1408 ->
                       ignore
                         (Ojs.call x1406 "push"
                            [|(Ojs.list_to_js BlobPart.t_to_js x1408)|])
                   | None -> ());
                  (match x1405 with
                   | Some x1407 ->
                       ignore
                         (Ojs.call x1406 "push"
                            [|(BlobPropertyBag.t_to_js x1407)|])
                   | None -> ());
                  x1406))
  end
 and
  BlobPart:sig
             type t =
               [ `String of string 
               | `Other of (Blob.t, BufferSource.t) union2 ] Primitive.t
             type t_0 = t
             val t_to_js : t -> Ojs.t
             val t_of_js : Ojs.t -> t
             val t_0_to_js : t_0 -> Ojs.t
             val t_0_of_js : Ojs.t -> t_0
           end =
  struct
    type t =
      [ `String of string  | `Other of (Blob.t, BufferSource.t) union2 ]
        Primitive.t
    let rec t_of_js : Ojs.t -> t =
      fun (x1416 : Ojs.t) ->
        Primitive.t_of_js
          (fun (x1417 : Ojs.t) ->
             let x1418 = x1417 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x1418 "dummy") with
             | "String" -> `String (Ojs.string_of_js x1418)
             | "Other" ->
                 `Other
                   (union2_of_js Blob.t_of_js BufferSource.t_of_js x1418)
             | _ -> assert false) x1416
    and t_to_js : t -> Ojs.t =
      fun
        (x1410 :
          [ `String of string  | `Other of (Blob.t, BufferSource.t) union2 ]
            Primitive.t)
        ->
        Primitive.t_to_js
          (fun
             (x1411 :
               [ `String of string 
               | `Other of (Blob.t, BufferSource.t) union2 ])
             ->
             match x1411 with
             | `String x1412 -> Ojs.string_to_js x1412
             | `Other x1413 ->
                 union2_to_js Blob.t_to_js BufferSource.t_to_js x1413) x1410
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1422 : Ojs.t) -> t_of_js x1422
    and t_0_to_js : t_0 -> Ojs.t = fun (x1421 : t) -> t_to_js x1421
  end
module File =
  struct
    type t = [ `Blob  | `File ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1424 : Ojs.t) -> t_of_js x1424
    and t_0_to_js : t_0 -> Ojs.t = fun (x1423 : t) -> t_to_js x1423
    type tags = [ `Blob  | `File ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `File ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1427 : Ojs.t) -> intf_of_js __tags_of_js x1427
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1425 : __tags intf) -> intf_to_js __tags_to_js x1425
    let (get_lastModified : 'tags this -> float) =
      fun (x1429 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1429) "lastModified")
    let (get_name : 'tags this -> string) =
      fun (x1431 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1431) "name")
    let (get_webkitRelativePath : 'tags this -> string) =
      fun (x1433 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1433)
             "webkitRelativePath")
    let (create :
      lastModified:float ->
        name:string -> webkitRelativePath:string -> unit -> t)
      =
      fun ~lastModified:(x1435 : float) ->
        fun ~name:(x1436 : string) ->
          fun ~webkitRelativePath:(x1437 : string) ->
            fun () ->
              let x1438 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x1438 "lastModified" (Ojs.float_to_js x1435);
              Ojs.set_prop_ascii x1438 "name" (Ojs.string_to_js x1436);
              Ojs.set_prop_ascii x1438 "webkitRelativePath"
                (Ojs.string_to_js x1437);
              t_of_js x1438
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "File")
             "prototype")
    let (create' :
      fileBits:BlobPart.t list ->
        fileName:string -> ?options:FilePropertyBag.t -> unit -> t)
      =
      fun ~fileBits:(x1439 : BlobPart.t list) ->
        fun ~fileName:(x1440 : string) ->
          fun ?options:(x1441 : FilePropertyBag.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "File")
                   (let x1442 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x1442 "push"
                         [|(Ojs.list_to_js BlobPart.t_to_js x1439)|]);
                    ignore
                      (Ojs.call x1442 "push" [|(Ojs.string_to_js x1440)|]);
                    (match x1441 with
                     | Some x1443 ->
                         ignore
                           (Ojs.call x1442 "push"
                              [|(FilePropertyBag.t_to_js x1443)|])
                     | None -> ());
                    x1442))
  end
module FileSystemFileHandle =
  struct
    type t = [ `FileSystemFileHandle  | `FileSystemHandle ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1446 : Ojs.t) -> t_of_js x1446
    and t_0_to_js : t_0 -> Ojs.t = fun (x1445 : t) -> t_to_js x1445
    type tags = [ `FileSystemFileHandle  | `FileSystemHandle ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FileSystemFileHandle ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1449 : Ojs.t) -> intf_of_js __tags_of_js x1449
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1447 : __tags intf) -> intf_to_js __tags_to_js x1447
    let (get_kind : 'tags this -> [ `L_s75_file ]) =
      fun (x1451 : 'tags this) ->
        let x1453 = Ojs.get_prop_ascii (this_to_js Obj.magic x1451) "kind" in
        match Ojs.string_of_js x1453 with
        | "file" -> `L_s75_file
        | _ -> assert false
    let (getFile : 'tags this -> File.t Promise.t_1) =
      fun (x1454 : 'tags this) ->
        Promise.t_1_of_js File.t_of_js
          (Ojs.call (this_to_js Obj.magic x1454) "getFile" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "FileSystemFileHandle")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FileSystemFileHandle")
             [||])
  end
module FileSystemDirectoryHandle =
  struct
    type t = [ `FileSystemDirectoryHandle  | `FileSystemHandle ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1458 : Ojs.t) -> t_of_js x1458
    and t_0_to_js : t_0 -> Ojs.t = fun (x1457 : t) -> t_to_js x1457
    type tags = [ `FileSystemDirectoryHandle  | `FileSystemHandle ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FileSystemDirectoryHandle ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1461 : Ojs.t) -> intf_of_js __tags_of_js x1461
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1459 : __tags intf) -> intf_to_js __tags_to_js x1459
    let (get_kind : 'tags this -> [ `L_s61_directory ]) =
      fun (x1463 : 'tags this) ->
        let x1465 = Ojs.get_prop_ascii (this_to_js Obj.magic x1463) "kind" in
        match Ojs.string_of_js x1465 with
        | "directory" -> `L_s61_directory
        | _ -> assert false
    let (getDirectoryHandle :
      'tags this ->
        name:string ->
          ?options:FileSystemGetDirectoryOptions.t -> unit -> t Promise.t_1)
      =
      fun (x1470 : 'tags this) ->
        fun ~name:(x1466 : string) ->
          fun ?options:(x1467 : FileSystemGetDirectoryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js t_of_js
                (let x1472 = this_to_js Obj.magic x1470 in
                 Ojs.call (Ojs.get_prop_ascii x1472 "getDirectoryHandle")
                   "apply"
                   [|x1472;((let x1468 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1468 "push"
                                  [|(Ojs.string_to_js x1466)|]);
                             (match x1467 with
                              | Some x1469 ->
                                  ignore
                                    (Ojs.call x1468 "push"
                                       [|(FileSystemGetDirectoryOptions.t_to_js
                                            x1469)|])
                              | None -> ());
                             x1468))|])
    let (getFileHandle :
      'tags this ->
        name:string ->
          ?options:FileSystemGetFileOptions.t ->
            unit -> FileSystemFileHandle.t Promise.t_1)
      =
      fun (x1478 : 'tags this) ->
        fun ~name:(x1474 : string) ->
          fun ?options:(x1475 : FileSystemGetFileOptions.t option) ->
            fun () ->
              Promise.t_1_of_js FileSystemFileHandle.t_of_js
                (let x1480 = this_to_js Obj.magic x1478 in
                 Ojs.call (Ojs.get_prop_ascii x1480 "getFileHandle") "apply"
                   [|x1480;((let x1476 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1476 "push"
                                  [|(Ojs.string_to_js x1474)|]);
                             (match x1475 with
                              | Some x1477 ->
                                  ignore
                                    (Ojs.call x1476 "push"
                                       [|(FileSystemGetFileOptions.t_to_js
                                            x1477)|])
                              | None -> ());
                             x1476))|])
    let (removeEntry :
      'tags this ->
        name:string ->
          ?options:FileSystemRemoveOptions.t -> unit -> unit Promise.t_1)
      =
      fun (x1486 : 'tags this) ->
        fun ~name:(x1482 : string) ->
          fun ?options:(x1483 : FileSystemRemoveOptions.t option) ->
            fun () ->
              Promise.t_1_of_js Ojs.unit_of_js
                (let x1488 = this_to_js Obj.magic x1486 in
                 Ojs.call (Ojs.get_prop_ascii x1488 "removeEntry") "apply"
                   [|x1488;((let x1484 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1484 "push"
                                  [|(Ojs.string_to_js x1482)|]);
                             (match x1483 with
                              | Some x1485 ->
                                  ignore
                                    (Ojs.call x1484 "push"
                                       [|(FileSystemRemoveOptions.t_to_js
                                            x1485)|])
                              | None -> ());
                             x1484))|])
    let (resolve :
      'tags this ->
        possibleDescendant:FileSystemHandle.t ->
          string list option Promise.t_1)
      =
      fun (x1491 : 'tags this) ->
        fun ~possibleDescendant:(x1490 : FileSystemHandle.t) ->
          Promise.t_1_of_js
            (fun (x1493 : Ojs.t) ->
               Ojs.option_of_js
                 (fun (x1494 : Ojs.t) ->
                    Ojs.list_of_js Ojs.string_of_js x1494) x1493)
            (Ojs.call (this_to_js Obj.magic x1491) "resolve"
               [|(FileSystemHandle.t_to_js x1490)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "FileSystemDirectoryHandle")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "FileSystemDirectoryHandle") 
             [||])
  end
module StorageManager =
  struct
    type t = [ `StorageManager ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1497 : Ojs.t) -> t_of_js x1497
    and t_0_to_js : t_0 -> Ojs.t = fun (x1496 : t) -> t_to_js x1496
    type tags = [ `StorageManager ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `StorageManager ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1500 : Ojs.t) -> intf_of_js __tags_of_js x1500
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1498 : __tags intf) -> intf_to_js __tags_to_js x1498
    let (estimate : 'tags this -> StorageEstimate.t Promise.t_1) =
      fun (x1502 : 'tags this) ->
        Promise.t_1_of_js StorageEstimate.t_of_js
          (Ojs.call (this_to_js Obj.magic x1502) "estimate" [||])
    let (getDirectory :
      'tags this -> FileSystemDirectoryHandle.t Promise.t_1) =
      fun (x1505 : 'tags this) ->
        Promise.t_1_of_js FileSystemDirectoryHandle.t_of_js
          (Ojs.call (this_to_js Obj.magic x1505) "getDirectory" [||])
    let (persisted : 'tags this -> bool Promise.t_1) =
      fun (x1508 : 'tags this) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (this_to_js Obj.magic x1508) "persisted" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "StorageManager") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "StorageManager") [||])
  end
module NavigatorStorage =
  struct
    type t = [ `NavigatorStorage ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1512 : Ojs.t) -> t_of_js x1512
    and t_0_to_js : t_0 -> Ojs.t = fun (x1511 : t) -> t_to_js x1511
    type tags = [ `NavigatorStorage ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NavigatorStorage ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1515 : Ojs.t) -> intf_of_js __tags_of_js x1515
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1513 : __tags intf) -> intf_to_js __tags_to_js x1513
    let (get_storage : 'tags this -> StorageManager.t) =
      fun (x1517 : 'tags this) ->
        StorageManager.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1517) "storage")
    let (create : storage:StorageManager.t -> unit -> t) =
      fun ~storage:(x1519 : StorageManager.t) ->
        fun () ->
          let x1520 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x1520 "storage" (StorageManager.t_to_js x1519);
          t_of_js x1520
    let cast_from = Obj.magic
  end
module NavigatorOnLine =
  struct
    type t = [ `NavigatorOnLine ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1522 : Ojs.t) -> t_of_js x1522
    and t_0_to_js : t_0 -> Ojs.t = fun (x1521 : t) -> t_to_js x1521
    type tags = [ `NavigatorOnLine ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NavigatorOnLine ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1525 : Ojs.t) -> intf_of_js __tags_of_js x1525
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1523 : __tags intf) -> intf_to_js __tags_to_js x1523
    let (get_onLine : 'tags this -> bool) =
      fun (x1527 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1527) "onLine")
    let (create : onLine:bool -> unit -> t) =
      fun ~onLine:(x1529 : bool) ->
        fun () ->
          let x1530 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x1530 "onLine" (Ojs.bool_to_js x1529);
          t_of_js x1530
    let cast_from = Obj.magic
  end
module ConnectionType =
  struct
    type t =
      [ `L_s118_mixed  | `L_s130_none  | `L_s144_other  | `L_s201_unknown 
      | `L_s213_wifi  | `L_s46_bluetooth  | `L_s47_cellular 
      | `L_s69_ethernet ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1532 : Ojs.t) ->
        let x1533 = x1532 in
        match Ojs.string_of_js x1533 with
        | "mixed" -> `L_s118_mixed
        | "none" -> `L_s130_none
        | "other" -> `L_s144_other
        | "unknown" -> `L_s201_unknown
        | "wifi" -> `L_s213_wifi
        | "bluetooth" -> `L_s46_bluetooth
        | "cellular" -> `L_s47_cellular
        | "ethernet" -> `L_s69_ethernet
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x1531 :
          [ `L_s118_mixed  | `L_s130_none  | `L_s144_other 
          | `L_s201_unknown  | `L_s213_wifi  | `L_s46_bluetooth 
          | `L_s47_cellular  | `L_s69_ethernet ])
        ->
        match x1531 with
        | `L_s118_mixed -> Ojs.string_to_js "mixed"
        | `L_s130_none -> Ojs.string_to_js "none"
        | `L_s144_other -> Ojs.string_to_js "other"
        | `L_s201_unknown -> Ojs.string_to_js "unknown"
        | `L_s213_wifi -> Ojs.string_to_js "wifi"
        | `L_s46_bluetooth -> Ojs.string_to_js "bluetooth"
        | `L_s47_cellular -> Ojs.string_to_js "cellular"
        | `L_s69_ethernet -> Ojs.string_to_js "ethernet"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1535 : Ojs.t) -> t_of_js x1535
    and t_0_to_js : t_0 -> Ojs.t = fun (x1534 : t) -> t_to_js x1534
  end
module NetworkInformation =
  struct
    type t = [ `EventTarget  | `NetworkInformation ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1537 : Ojs.t) -> t_of_js x1537
    and t_0_to_js : t_0 -> Ojs.t = fun (x1536 : t) -> t_to_js x1536
    type tags = [ `EventTarget  | `NetworkInformation ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NetworkInformation ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1540 : Ojs.t) -> intf_of_js __tags_of_js x1540
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1538 : __tags intf) -> intf_to_js __tags_to_js x1538
    let (get_type : 'tags this -> ConnectionType.t) =
      fun (x1542 : 'tags this) ->
        ConnectionType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1542) "type")
    let (create : type_:ConnectionType.t -> unit -> t) =
      fun ~type_:(x1544 : ConnectionType.t) ->
        fun () ->
          let x1545 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x1545 "type" (ConnectionType.t_to_js x1544);
          t_of_js x1545
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "NetworkInformation") "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "NetworkInformation")
             [||])
  end
module NavigatorNetworkInformation =
  struct
    type t = [ `NavigatorNetworkInformation ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1547 : Ojs.t) -> t_of_js x1547
    and t_0_to_js : t_0 -> Ojs.t = fun (x1546 : t) -> t_to_js x1546
    type tags = [ `NavigatorNetworkInformation ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `NavigatorNetworkInformation ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1550 : Ojs.t) -> intf_of_js __tags_of_js x1550
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1548 : __tags intf) -> intf_to_js __tags_to_js x1548
    let (get_connection : 'tags this -> NetworkInformation.t) =
      fun (x1552 : 'tags this) ->
        NetworkInformation.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1552) "connection")
    let (create : connection:NetworkInformation.t -> unit -> t) =
      fun ~connection:(x1554 : NetworkInformation.t) ->
        fun () ->
          let x1555 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x1555 "connection"
            (NetworkInformation.t_to_js x1554);
          t_of_js x1555
    let cast_from = Obj.magic
  end
module NavigatorLanguage =
  struct
    type t = [ `NavigatorLanguage ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1557 : Ojs.t) -> t_of_js x1557
    and t_0_to_js : t_0 -> Ojs.t = fun (x1556 : t) -> t_to_js x1556
    type tags = [ `NavigatorLanguage ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NavigatorLanguage ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1560 : Ojs.t) -> intf_of_js __tags_of_js x1560
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1558 : __tags intf) -> intf_to_js __tags_to_js x1558
    let (get_language : 'tags this -> string) =
      fun (x1562 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1562) "language")
    let (get_languages : 'tags this -> string list) =
      fun (x1564 : 'tags this) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1564) "languages")
    let (create : language:string -> languages:string list -> unit -> t) =
      fun ~language:(x1567 : string) ->
        fun ~languages:(x1568 : string list) ->
          fun () ->
            let x1569 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x1569 "language" (Ojs.string_to_js x1567);
            Ojs.set_prop_ascii x1569 "languages"
              (Ojs.list_to_js Ojs.string_to_js x1568);
            t_of_js x1569
    let cast_from = Obj.magic
  end
module NavigatorID =
  struct
    type t = [ `NavigatorID ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1572 : Ojs.t) -> t_of_js x1572
    and t_0_to_js : t_0 -> Ojs.t = fun (x1571 : t) -> t_to_js x1571
    type tags = [ `NavigatorID ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NavigatorID ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1575 : Ojs.t) -> intf_of_js __tags_of_js x1575
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1573 : __tags intf) -> intf_to_js __tags_to_js x1573
    let (get_appCodeName : 'tags this -> string) =
      fun (x1577 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1577) "appCodeName")
    let (get_appName : 'tags this -> string) =
      fun (x1579 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1579) "appName")
    let (get_appVersion : 'tags this -> string) =
      fun (x1581 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1581) "appVersion")
    let (get_platform : 'tags this -> string) =
      fun (x1583 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1583) "platform")
    let (get_product : 'tags this -> string) =
      fun (x1585 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1585) "product")
    let (get_userAgent : 'tags this -> string) =
      fun (x1587 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1587) "userAgent")
    let (create :
      appCodeName:string ->
        appName:string ->
          appVersion:string ->
            platform:string ->
              product:string -> userAgent:string -> unit -> t)
      =
      fun ~appCodeName:(x1589 : string) ->
        fun ~appName:(x1590 : string) ->
          fun ~appVersion:(x1591 : string) ->
            fun ~platform:(x1592 : string) ->
              fun ~product:(x1593 : string) ->
                fun ~userAgent:(x1594 : string) ->
                  fun () ->
                    let x1595 = Ojs.empty_obj () in
                    Ojs.set_prop_ascii x1595 "appCodeName"
                      (Ojs.string_to_js x1589);
                    Ojs.set_prop_ascii x1595 "appName"
                      (Ojs.string_to_js x1590);
                    Ojs.set_prop_ascii x1595 "appVersion"
                      (Ojs.string_to_js x1591);
                    Ojs.set_prop_ascii x1595 "platform"
                      (Ojs.string_to_js x1592);
                    Ojs.set_prop_ascii x1595 "product"
                      (Ojs.string_to_js x1593);
                    Ojs.set_prop_ascii x1595 "userAgent"
                      (Ojs.string_to_js x1594);
                    t_of_js x1595
    let cast_from = Obj.magic
  end
module NavigatorConcurrentHardware =
  struct
    type t = [ `NavigatorConcurrentHardware ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1597 : Ojs.t) -> t_of_js x1597
    and t_0_to_js : t_0 -> Ojs.t = fun (x1596 : t) -> t_to_js x1596
    type tags = [ `NavigatorConcurrentHardware ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `NavigatorConcurrentHardware ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1600 : Ojs.t) -> intf_of_js __tags_of_js x1600
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1598 : __tags intf) -> intf_to_js __tags_to_js x1598
    let (get_hardwareConcurrency : 'tags this -> float) =
      fun (x1602 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1602)
             "hardwareConcurrency")
    let (create : hardwareConcurrency:float -> unit -> t) =
      fun ~hardwareConcurrency:(x1604 : float) ->
        fun () ->
          let x1605 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x1605 "hardwareConcurrency"
            (Ojs.float_to_js x1604);
          t_of_js x1605
    let cast_from = Obj.magic
  end
module MediaEncodingType =
  struct
    type t = [ `L_s167_record  | `L_s212_webrtc ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1607 : Ojs.t) ->
        let x1608 = x1607 in
        match Ojs.string_of_js x1608 with
        | "record" -> `L_s167_record
        | "webrtc" -> `L_s212_webrtc
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x1606 : [ `L_s167_record  | `L_s212_webrtc ]) ->
        match x1606 with
        | `L_s167_record -> Ojs.string_to_js "record"
        | `L_s212_webrtc -> Ojs.string_to_js "webrtc"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1610 : Ojs.t) -> t_of_js x1610
    and t_0_to_js : t_0 -> Ojs.t = fun (x1609 : t) -> t_to_js x1609
  end
module TransferFunction =
  struct
    type t = [ `L_s153_pq  | `L_s187_srgb  | `L_s88_hlg ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1612 : Ojs.t) ->
        let x1613 = x1612 in
        match Ojs.string_of_js x1613 with
        | "pq" -> `L_s153_pq
        | "srgb" -> `L_s187_srgb
        | "hlg" -> `L_s88_hlg
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x1611 : [ `L_s153_pq  | `L_s187_srgb  | `L_s88_hlg ]) ->
        match x1611 with
        | `L_s153_pq -> Ojs.string_to_js "pq"
        | `L_s187_srgb -> Ojs.string_to_js "srgb"
        | `L_s88_hlg -> Ojs.string_to_js "hlg"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1615 : Ojs.t) -> t_of_js x1615
    and t_0_to_js : t_0 -> Ojs.t = fun (x1614 : t) -> t_to_js x1614
  end
module HdrMetadataType =
  struct
    type t =
      [ `L_s183_smpteSt2086  | `L_s184_smpteSt2094_10 
      | `L_s185_smpteSt2094_40 ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1617 : Ojs.t) ->
        let x1618 = x1617 in
        match Ojs.string_of_js x1618 with
        | "smpteSt2086" -> `L_s183_smpteSt2086
        | "smpteSt2094-10" -> `L_s184_smpteSt2094_10
        | "smpteSt2094-40" -> `L_s185_smpteSt2094_40
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x1616 :
          [ `L_s183_smpteSt2086  | `L_s184_smpteSt2094_10 
          | `L_s185_smpteSt2094_40 ])
        ->
        match x1616 with
        | `L_s183_smpteSt2086 -> Ojs.string_to_js "smpteSt2086"
        | `L_s184_smpteSt2094_10 -> Ojs.string_to_js "smpteSt2094-10"
        | `L_s185_smpteSt2094_40 -> Ojs.string_to_js "smpteSt2094-40"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1620 : Ojs.t) -> t_of_js x1620
    and t_0_to_js : t_0 -> Ojs.t = fun (x1619 : t) -> t_to_js x1619
  end
module ColorGamut =
  struct
    type t = [ `L_s146_p3  | `L_s166_rec2020  | `L_s187_srgb ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1622 : Ojs.t) ->
        let x1623 = x1622 in
        match Ojs.string_of_js x1623 with
        | "p3" -> `L_s146_p3
        | "rec2020" -> `L_s166_rec2020
        | "srgb" -> `L_s187_srgb
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x1621 : [ `L_s146_p3  | `L_s166_rec2020  | `L_s187_srgb ]) ->
        match x1621 with
        | `L_s146_p3 -> Ojs.string_to_js "p3"
        | `L_s166_rec2020 -> Ojs.string_to_js "rec2020"
        | `L_s187_srgb -> Ojs.string_to_js "srgb"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1625 : Ojs.t) -> t_of_js x1625
    and t_0_to_js : t_0 -> Ojs.t = fun (x1624 : t) -> t_to_js x1624
  end
module VideoConfiguration =
  struct
    type t = [ `VideoConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1627 : Ojs.t) -> t_of_js x1627
    and t_0_to_js : t_0 -> Ojs.t = fun (x1626 : t) -> t_to_js x1626
    type tags = [ `VideoConfiguration ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `VideoConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1630 : Ojs.t) -> intf_of_js __tags_of_js x1630
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1628 : __tags intf) -> intf_to_js __tags_to_js x1628
    let (get_bitrate : 'tags this -> float) =
      fun (x1632 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1632) "bitrate")
    let (set_bitrate : 'tags this -> float -> unit) =
      fun (x1634 : 'tags this) ->
        fun (x1635 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1634) "bitrate"
            (Ojs.float_to_js x1635)
    let (get_colorGamut : 'tags this -> ColorGamut.t option) =
      fun (x1637 : 'tags this) ->
        Ojs.option_of_js ColorGamut.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1637) "colorGamut")
    let (set_colorGamut : 'tags this -> ColorGamut.t -> unit) =
      fun (x1640 : 'tags this) ->
        fun (x1641 : ColorGamut.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1640) "colorGamut"
            (ColorGamut.t_to_js x1641)
    let (get_contentType : 'tags this -> string) =
      fun (x1643 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1643) "contentType")
    let (set_contentType : 'tags this -> string -> unit) =
      fun (x1645 : 'tags this) ->
        fun (x1646 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1645) "contentType"
            (Ojs.string_to_js x1646)
    let (get_framerate : 'tags this -> float) =
      fun (x1648 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1648) "framerate")
    let (set_framerate : 'tags this -> float -> unit) =
      fun (x1650 : 'tags this) ->
        fun (x1651 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1650) "framerate"
            (Ojs.float_to_js x1651)
    let (get_hdrMetadataType : 'tags this -> HdrMetadataType.t option) =
      fun (x1653 : 'tags this) ->
        Ojs.option_of_js HdrMetadataType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1653) "hdrMetadataType")
    let (set_hdrMetadataType : 'tags this -> HdrMetadataType.t -> unit) =
      fun (x1656 : 'tags this) ->
        fun (x1657 : HdrMetadataType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1656) "hdrMetadataType"
            (HdrMetadataType.t_to_js x1657)
    let (get_height : 'tags this -> float) =
      fun (x1659 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1659) "height")
    let (set_height : 'tags this -> float -> unit) =
      fun (x1661 : 'tags this) ->
        fun (x1662 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1661) "height"
            (Ojs.float_to_js x1662)
    let (get_scalabilityMode : 'tags this -> string option) =
      fun (x1664 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1664) "scalabilityMode")
    let (set_scalabilityMode : 'tags this -> string -> unit) =
      fun (x1667 : 'tags this) ->
        fun (x1668 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1667) "scalabilityMode"
            (Ojs.string_to_js x1668)
    let (get_transferFunction : 'tags this -> TransferFunction.t option) =
      fun (x1670 : 'tags this) ->
        Ojs.option_of_js TransferFunction.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1670) "transferFunction")
    let (set_transferFunction : 'tags this -> TransferFunction.t -> unit) =
      fun (x1673 : 'tags this) ->
        fun (x1674 : TransferFunction.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1673) "transferFunction"
            (TransferFunction.t_to_js x1674)
    let (get_width : 'tags this -> float) =
      fun (x1676 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1676) "width")
    let (set_width : 'tags this -> float -> unit) =
      fun (x1678 : 'tags this) ->
        fun (x1679 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1678) "width"
            (Ojs.float_to_js x1679)
    let (create :
      bitrate:float ->
        ?colorGamut:ColorGamut.t ->
          contentType:string ->
            framerate:float ->
              ?hdrMetadataType:HdrMetadataType.t ->
                height:float ->
                  ?scalabilityMode:string ->
                    ?transferFunction:TransferFunction.t ->
                      width:float -> unit -> t)
      =
      fun ~bitrate:(x1681 : float) ->
        fun ?colorGamut:(x1682 : ColorGamut.t option) ->
          fun ~contentType:(x1683 : string) ->
            fun ~framerate:(x1684 : float) ->
              fun ?hdrMetadataType:(x1685 : HdrMetadataType.t option) ->
                fun ~height:(x1686 : float) ->
                  fun ?scalabilityMode:(x1687 : string option) ->
                    fun ?transferFunction:(x1688 : TransferFunction.t option)
                      ->
                      fun ~width:(x1689 : float) ->
                        fun () ->
                          let x1690 = Ojs.empty_obj () in
                          Ojs.set_prop_ascii x1690 "bitrate"
                            (Ojs.float_to_js x1681);
                          (match x1682 with
                           | Some x1694 ->
                               Ojs.set_prop_ascii x1690 "colorGamut"
                                 (ColorGamut.t_to_js x1694)
                           | None -> ());
                          Ojs.set_prop_ascii x1690 "contentType"
                            (Ojs.string_to_js x1683);
                          Ojs.set_prop_ascii x1690 "framerate"
                            (Ojs.float_to_js x1684);
                          (match x1685 with
                           | Some x1693 ->
                               Ojs.set_prop_ascii x1690 "hdrMetadataType"
                                 (HdrMetadataType.t_to_js x1693)
                           | None -> ());
                          Ojs.set_prop_ascii x1690 "height"
                            (Ojs.float_to_js x1686);
                          (match x1687 with
                           | Some x1692 ->
                               Ojs.set_prop_ascii x1690 "scalabilityMode"
                                 (Ojs.string_to_js x1692)
                           | None -> ());
                          (match x1688 with
                           | Some x1691 ->
                               Ojs.set_prop_ascii x1690 "transferFunction"
                                 (TransferFunction.t_to_js x1691)
                           | None -> ());
                          Ojs.set_prop_ascii x1690 "width"
                            (Ojs.float_to_js x1689);
                          t_of_js x1690
    let cast_from = Obj.magic
  end
module AudioConfiguration =
  struct
    type t = [ `AudioConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1696 : Ojs.t) -> t_of_js x1696
    and t_0_to_js : t_0 -> Ojs.t = fun (x1695 : t) -> t_to_js x1695
    type tags = [ `AudioConfiguration ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AudioConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1699 : Ojs.t) -> intf_of_js __tags_of_js x1699
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1697 : __tags intf) -> intf_to_js __tags_to_js x1697
    let (get_bitrate : 'tags this -> float option) =
      fun (x1701 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1701) "bitrate")
    let (set_bitrate : 'tags this -> float -> unit) =
      fun (x1704 : 'tags this) ->
        fun (x1705 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1704) "bitrate"
            (Ojs.float_to_js x1705)
    let (get_channels : 'tags this -> string option) =
      fun (x1707 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1707) "channels")
    let (set_channels : 'tags this -> string -> unit) =
      fun (x1710 : 'tags this) ->
        fun (x1711 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1710) "channels"
            (Ojs.string_to_js x1711)
    let (get_contentType : 'tags this -> string) =
      fun (x1713 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1713) "contentType")
    let (set_contentType : 'tags this -> string -> unit) =
      fun (x1715 : 'tags this) ->
        fun (x1716 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1715) "contentType"
            (Ojs.string_to_js x1716)
    let (get_samplerate : 'tags this -> float option) =
      fun (x1718 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1718) "samplerate")
    let (set_samplerate : 'tags this -> float -> unit) =
      fun (x1721 : 'tags this) ->
        fun (x1722 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1721) "samplerate"
            (Ojs.float_to_js x1722)
    let (get_spatialRendering : 'tags this -> bool option) =
      fun (x1724 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1724) "spatialRendering")
    let (set_spatialRendering : 'tags this -> bool -> unit) =
      fun (x1727 : 'tags this) ->
        fun (x1728 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1727) "spatialRendering"
            (Ojs.bool_to_js x1728)
    let (create :
      ?bitrate:float ->
        ?channels:string ->
          contentType:string ->
            ?samplerate:float -> ?spatialRendering:bool -> unit -> t)
      =
      fun ?bitrate:(x1730 : float option) ->
        fun ?channels:(x1731 : string option) ->
          fun ~contentType:(x1732 : string) ->
            fun ?samplerate:(x1733 : float option) ->
              fun ?spatialRendering:(x1734 : bool option) ->
                fun () ->
                  let x1735 = Ojs.empty_obj () in
                  (match x1730 with
                   | Some x1739 ->
                       Ojs.set_prop_ascii x1735 "bitrate"
                         (Ojs.float_to_js x1739)
                   | None -> ());
                  (match x1731 with
                   | Some x1738 ->
                       Ojs.set_prop_ascii x1735 "channels"
                         (Ojs.string_to_js x1738)
                   | None -> ());
                  Ojs.set_prop_ascii x1735 "contentType"
                    (Ojs.string_to_js x1732);
                  (match x1733 with
                   | Some x1737 ->
                       Ojs.set_prop_ascii x1735 "samplerate"
                         (Ojs.float_to_js x1737)
                   | None -> ());
                  (match x1734 with
                   | Some x1736 ->
                       Ojs.set_prop_ascii x1735 "spatialRendering"
                         (Ojs.bool_to_js x1736)
                   | None -> ());
                  t_of_js x1735
    let cast_from = Obj.magic
  end
module MediaConfiguration =
  struct
    type t = [ `MediaConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1741 : Ojs.t) -> t_of_js x1741
    and t_0_to_js : t_0 -> Ojs.t = fun (x1740 : t) -> t_to_js x1740
    type tags = [ `MediaConfiguration ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `MediaConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1744 : Ojs.t) -> intf_of_js __tags_of_js x1744
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1742 : __tags intf) -> intf_to_js __tags_to_js x1742
    let (get_audio : 'tags this -> AudioConfiguration.t option) =
      fun (x1746 : 'tags this) ->
        Ojs.option_of_js AudioConfiguration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1746) "audio")
    let (set_audio : 'tags this -> AudioConfiguration.t -> unit) =
      fun (x1749 : 'tags this) ->
        fun (x1750 : AudioConfiguration.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1749) "audio"
            (AudioConfiguration.t_to_js x1750)
    let (get_video : 'tags this -> VideoConfiguration.t option) =
      fun (x1752 : 'tags this) ->
        Ojs.option_of_js VideoConfiguration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1752) "video")
    let (set_video : 'tags this -> VideoConfiguration.t -> unit) =
      fun (x1755 : 'tags this) ->
        fun (x1756 : VideoConfiguration.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1755) "video"
            (VideoConfiguration.t_to_js x1756)
    let (create :
      ?audio:AudioConfiguration.t -> ?video:VideoConfiguration.t -> unit -> t)
      =
      fun ?audio:(x1758 : AudioConfiguration.t option) ->
        fun ?video:(x1759 : VideoConfiguration.t option) ->
          fun () ->
            let x1760 = Ojs.empty_obj () in
            (match x1758 with
             | Some x1762 ->
                 Ojs.set_prop_ascii x1760 "audio"
                   (AudioConfiguration.t_to_js x1762)
             | None -> ());
            (match x1759 with
             | Some x1761 ->
                 Ojs.set_prop_ascii x1760 "video"
                   (VideoConfiguration.t_to_js x1761)
             | None -> ());
            t_of_js x1760
    let cast_from = Obj.magic
  end
module MediaEncodingConfiguration =
  struct
    type t = [ `MediaConfiguration  | `MediaEncodingConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1764 : Ojs.t) -> t_of_js x1764
    and t_0_to_js : t_0 -> Ojs.t = fun (x1763 : t) -> t_to_js x1763
    type tags = [ `MediaConfiguration  | `MediaEncodingConfiguration ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaEncodingConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1767 : Ojs.t) -> intf_of_js __tags_of_js x1767
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1765 : __tags intf) -> intf_to_js __tags_to_js x1765
    let (get_type : 'tags this -> MediaEncodingType.t) =
      fun (x1769 : 'tags this) ->
        MediaEncodingType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1769) "type")
    let (set_type : 'tags this -> MediaEncodingType.t -> unit) =
      fun (x1771 : 'tags this) ->
        fun (x1772 : MediaEncodingType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1771) "type"
            (MediaEncodingType.t_to_js x1772)
    let (create : type_:MediaEncodingType.t -> unit -> t) =
      fun ~type_:(x1774 : MediaEncodingType.t) ->
        fun () ->
          let x1775 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x1775 "type" (MediaEncodingType.t_to_js x1774);
          t_of_js x1775
    let cast_from = Obj.magic
  end
module MediaCapabilitiesInfo =
  struct
    type t = [ `MediaCapabilitiesInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1777 : Ojs.t) -> t_of_js x1777
    and t_0_to_js : t_0 -> Ojs.t = fun (x1776 : t) -> t_to_js x1776
    type tags = [ `MediaCapabilitiesInfo ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaCapabilitiesInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1780 : Ojs.t) -> intf_of_js __tags_of_js x1780
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1778 : __tags intf) -> intf_to_js __tags_to_js x1778
    let (get_powerEfficient : 'tags this -> bool) =
      fun (x1782 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1782) "powerEfficient")
    let (set_powerEfficient : 'tags this -> bool -> unit) =
      fun (x1784 : 'tags this) ->
        fun (x1785 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1784) "powerEfficient"
            (Ojs.bool_to_js x1785)
    let (get_smooth : 'tags this -> bool) =
      fun (x1787 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1787) "smooth")
    let (set_smooth : 'tags this -> bool -> unit) =
      fun (x1789 : 'tags this) ->
        fun (x1790 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1789) "smooth"
            (Ojs.bool_to_js x1790)
    let (get_supported : 'tags this -> bool) =
      fun (x1792 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1792) "supported")
    let (set_supported : 'tags this -> bool -> unit) =
      fun (x1794 : 'tags this) ->
        fun (x1795 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1794) "supported"
            (Ojs.bool_to_js x1795)
    let (create :
      powerEfficient:bool -> smooth:bool -> supported:bool -> unit -> t) =
      fun ~powerEfficient:(x1797 : bool) ->
        fun ~smooth:(x1798 : bool) ->
          fun ~supported:(x1799 : bool) ->
            fun () ->
              let x1800 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x1800 "powerEfficient"
                (Ojs.bool_to_js x1797);
              Ojs.set_prop_ascii x1800 "smooth" (Ojs.bool_to_js x1798);
              Ojs.set_prop_ascii x1800 "supported" (Ojs.bool_to_js x1799);
              t_of_js x1800
    let cast_from = Obj.magic
  end
module MediaCapabilitiesEncodingInfo =
  struct
    type t =
      [ `MediaCapabilitiesEncodingInfo  | `MediaCapabilitiesInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1802 : Ojs.t) -> t_of_js x1802
    and t_0_to_js : t_0 -> Ojs.t = fun (x1801 : t) -> t_to_js x1801
    type tags = [ `MediaCapabilitiesEncodingInfo  | `MediaCapabilitiesInfo ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaCapabilitiesEncodingInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1805 : Ojs.t) -> intf_of_js __tags_of_js x1805
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1803 : __tags intf) -> intf_to_js __tags_to_js x1803
    let (get_configuration :
      'tags this -> MediaEncodingConfiguration.t option) =
      fun (x1807 : 'tags this) ->
        Ojs.option_of_js MediaEncodingConfiguration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1807) "configuration")
    let (set_configuration :
      'tags this -> MediaEncodingConfiguration.t -> unit) =
      fun (x1810 : 'tags this) ->
        fun (x1811 : MediaEncodingConfiguration.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1810) "configuration"
            (MediaEncodingConfiguration.t_to_js x1811)
    let (create : ?configuration:MediaEncodingConfiguration.t -> unit -> t) =
      fun ?configuration:(x1813 : MediaEncodingConfiguration.t option) ->
        fun () ->
          let x1814 = Ojs.empty_obj () in
          (match x1813 with
           | Some x1815 ->
               Ojs.set_prop_ascii x1814 "configuration"
                 (MediaEncodingConfiguration.t_to_js x1815)
           | None -> ());
          t_of_js x1814
    let cast_from = Obj.magic
  end
module MediaDecodingType =
  struct
    type t = [ `L_s113_media_source  | `L_s212_webrtc  | `L_s75_file ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1817 : Ojs.t) ->
        let x1818 = x1817 in
        match Ojs.string_of_js x1818 with
        | "media-source" -> `L_s113_media_source
        | "webrtc" -> `L_s212_webrtc
        | "file" -> `L_s75_file
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x1816 : [ `L_s113_media_source  | `L_s212_webrtc  | `L_s75_file ])
        ->
        match x1816 with
        | `L_s113_media_source -> Ojs.string_to_js "media-source"
        | `L_s212_webrtc -> Ojs.string_to_js "webrtc"
        | `L_s75_file -> Ojs.string_to_js "file"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1820 : Ojs.t) -> t_of_js x1820
    and t_0_to_js : t_0 -> Ojs.t = fun (x1819 : t) -> t_to_js x1819
  end
module MediaDecodingConfiguration =
  struct
    type t = [ `MediaConfiguration  | `MediaDecodingConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1822 : Ojs.t) -> t_of_js x1822
    and t_0_to_js : t_0 -> Ojs.t = fun (x1821 : t) -> t_to_js x1821
    type tags = [ `MediaConfiguration  | `MediaDecodingConfiguration ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaDecodingConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1825 : Ojs.t) -> intf_of_js __tags_of_js x1825
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1823 : __tags intf) -> intf_to_js __tags_to_js x1823
    let (get_type : 'tags this -> MediaDecodingType.t) =
      fun (x1827 : 'tags this) ->
        MediaDecodingType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1827) "type")
    let (set_type : 'tags this -> MediaDecodingType.t -> unit) =
      fun (x1829 : 'tags this) ->
        fun (x1830 : MediaDecodingType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1829) "type"
            (MediaDecodingType.t_to_js x1830)
    let (create : type_:MediaDecodingType.t -> unit -> t) =
      fun ~type_:(x1832 : MediaDecodingType.t) ->
        fun () ->
          let x1833 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x1833 "type" (MediaDecodingType.t_to_js x1832);
          t_of_js x1833
    let cast_from = Obj.magic
  end
module MediaCapabilitiesDecodingInfo =
  struct
    type t =
      [ `MediaCapabilitiesDecodingInfo  | `MediaCapabilitiesInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1835 : Ojs.t) -> t_of_js x1835
    and t_0_to_js : t_0 -> Ojs.t = fun (x1834 : t) -> t_to_js x1834
    type tags = [ `MediaCapabilitiesDecodingInfo  | `MediaCapabilitiesInfo ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaCapabilitiesDecodingInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1838 : Ojs.t) -> intf_of_js __tags_of_js x1838
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1836 : __tags intf) -> intf_to_js __tags_to_js x1836
    let (get_configuration :
      'tags this -> MediaDecodingConfiguration.t option) =
      fun (x1840 : 'tags this) ->
        Ojs.option_of_js MediaDecodingConfiguration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1840) "configuration")
    let (set_configuration :
      'tags this -> MediaDecodingConfiguration.t -> unit) =
      fun (x1843 : 'tags this) ->
        fun (x1844 : MediaDecodingConfiguration.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1843) "configuration"
            (MediaDecodingConfiguration.t_to_js x1844)
    let (create : ?configuration:MediaDecodingConfiguration.t -> unit -> t) =
      fun ?configuration:(x1846 : MediaDecodingConfiguration.t option) ->
        fun () ->
          let x1847 = Ojs.empty_obj () in
          (match x1846 with
           | Some x1848 ->
               Ojs.set_prop_ascii x1847 "configuration"
                 (MediaDecodingConfiguration.t_to_js x1848)
           | None -> ());
          t_of_js x1847
    let cast_from = Obj.magic
  end
module MediaCapabilities =
  struct
    type t = [ `MediaCapabilities ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1850 : Ojs.t) -> t_of_js x1850
    and t_0_to_js : t_0 -> Ojs.t = fun (x1849 : t) -> t_to_js x1849
    type tags = [ `MediaCapabilities ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `MediaCapabilities ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1853 : Ojs.t) -> intf_of_js __tags_of_js x1853
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1851 : __tags intf) -> intf_to_js __tags_to_js x1851
    let (decodingInfo :
      'tags this ->
        configuration:MediaDecodingConfiguration.t ->
          MediaCapabilitiesDecodingInfo.t Promise.t_1)
      =
      fun (x1856 : 'tags this) ->
        fun ~configuration:(x1855 : MediaDecodingConfiguration.t) ->
          Promise.t_1_of_js MediaCapabilitiesDecodingInfo.t_of_js
            (Ojs.call (this_to_js Obj.magic x1856) "decodingInfo"
               [|(MediaDecodingConfiguration.t_to_js x1855)|])
    let (encodingInfo :
      'tags this ->
        configuration:MediaEncodingConfiguration.t ->
          MediaCapabilitiesEncodingInfo.t Promise.t_1)
      =
      fun (x1860 : 'tags this) ->
        fun ~configuration:(x1859 : MediaEncodingConfiguration.t) ->
          Promise.t_1_of_js MediaCapabilitiesEncodingInfo.t_of_js
            (Ojs.call (this_to_js Obj.magic x1860) "encodingInfo"
               [|(MediaEncodingConfiguration.t_to_js x1859)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "MediaCapabilities") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "MediaCapabilities")
             [||])
  end
module NavigatorStatic =
  struct
    let (mediaCapabilities : unit -> MediaCapabilities.t) =
      fun () ->
        MediaCapabilities.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "navigator")
             "mediaCapabilities")
  end
module LocationStatic =
  struct
    let (hash : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "hash")
    let (host : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "host")
    let (hostname : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "hostname")
    let (href : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "href")
    let (toString : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "location") "toString"
             [||])
    let (origin : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "origin")
    let (pathname : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "pathname")
    let (port : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "port")
    let (protocol : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "protocol")
    let (search : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "search")
  end
module IDBVersionChangeEventInit =
  struct
    type t = [ `EventInit  | `IDBVersionChangeEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1864 : Ojs.t) -> t_of_js x1864
    and t_0_to_js : t_0 -> Ojs.t = fun (x1863 : t) -> t_to_js x1863
    type tags = [ `EventInit  | `IDBVersionChangeEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBVersionChangeEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1867 : Ojs.t) -> intf_of_js __tags_of_js x1867
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1865 : __tags intf) -> intf_to_js __tags_to_js x1865
    let (get_newVersion : 'tags this -> float option) =
      fun (x1869 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1869) "newVersion")
    let (set_newVersion : 'tags this -> float option -> unit) =
      fun (x1872 : 'tags this) ->
        fun (x1873 : float option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1872) "newVersion"
            (Ojs.option_to_js Ojs.float_to_js x1873)
    let (get_oldVersion : 'tags this -> float option) =
      fun (x1876 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1876) "oldVersion")
    let (set_oldVersion : 'tags this -> float -> unit) =
      fun (x1879 : 'tags this) ->
        fun (x1880 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1879) "oldVersion"
            (Ojs.float_to_js x1880)
    let (create : ?newVersion:float -> ?oldVersion:float -> unit -> t) =
      fun ?newVersion:(x1882 : float option) ->
        fun ?oldVersion:(x1883 : float option) ->
          fun () ->
            let x1884 = Ojs.empty_obj () in
            (match x1882 with
             | Some x1886 ->
                 Ojs.set_prop_ascii x1884 "newVersion"
                   (Ojs.float_to_js x1886)
             | None -> ());
            (match x1883 with
             | Some x1885 ->
                 Ojs.set_prop_ascii x1884 "oldVersion"
                   (Ojs.float_to_js x1885)
             | None -> ());
            t_of_js x1884
    let cast_from = Obj.magic
  end
module IDBVersionChangeEvent =
  struct
    type t = [ `Event  | `IDBVersionChangeEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1888 : Ojs.t) -> t_of_js x1888
    and t_0_to_js : t_0 -> Ojs.t = fun (x1887 : t) -> t_to_js x1887
    type tags = [ `Event  | `IDBVersionChangeEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBVersionChangeEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1891 : Ojs.t) -> intf_of_js __tags_of_js x1891
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1889 : __tags intf) -> intf_to_js __tags_to_js x1889
    let (get_newVersion : 'tags this -> float option) =
      fun (x1893 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1893) "newVersion")
    let (get_oldVersion : 'tags this -> float) =
      fun (x1896 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1896) "oldVersion")
    let (create : ?newVersion:float -> oldVersion:float -> unit -> t) =
      fun ?newVersion:(x1898 : float option) ->
        fun ~oldVersion:(x1899 : float) ->
          fun () ->
            let x1900 = Ojs.empty_obj () in
            (match x1898 with
             | Some x1901 ->
                 Ojs.set_prop_ascii x1900 "newVersion"
                   (Ojs.float_to_js x1901)
             | None -> ());
            Ojs.set_prop_ascii x1900 "oldVersion" (Ojs.float_to_js x1899);
            t_of_js x1900
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "IDBVersionChangeEvent")
             "prototype")
    let (create' :
      type_:string -> ?eventInitDict:IDBVersionChangeEventInit.t -> unit -> t)
      =
      fun ~type_:(x1902 : string) ->
        fun ?eventInitDict:(x1903 : IDBVersionChangeEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "IDBVersionChangeEvent")
                 (let x1904 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x1904 "push" [|(Ojs.string_to_js x1902)|]);
                  (match x1903 with
                   | Some x1905 ->
                       ignore
                         (Ojs.call x1904 "push"
                            [|(IDBVersionChangeEventInit.t_to_js x1905)|])
                   | None -> ());
                  x1904))
  end
module IDBObjectStoreParameters =
  struct
    type t = [ `IDBObjectStoreParameters ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1907 : Ojs.t) -> t_of_js x1907
    and t_0_to_js : t_0 -> Ojs.t = fun (x1906 : t) -> t_to_js x1906
    type tags = [ `IDBObjectStoreParameters ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBObjectStoreParameters ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1910 : Ojs.t) -> intf_of_js __tags_of_js x1910
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1908 : __tags intf) -> intf_to_js __tags_to_js x1908
    let (get_autoIncrement : 'tags this -> bool option) =
      fun (x1912 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1912) "autoIncrement")
    let (set_autoIncrement : 'tags this -> bool -> unit) =
      fun (x1915 : 'tags this) ->
        fun (x1916 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1915) "autoIncrement"
            (Ojs.bool_to_js x1916)
    let (get_keyPath :
      'tags this ->
        [ `String of string  | `Null  | `Undefined  | `Other of string list ]
          Primitive.t)
      =
      fun (x1918 : 'tags this) ->
        Primitive.t_of_js
          (fun (x1920 : Ojs.t) ->
             let x1921 = x1920 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x1921 "dummy") with
             | "String" -> `String (Ojs.string_of_js x1921)
             | "Null" -> `Null
             | "Undefined" -> `Undefined
             | "Other" -> `Other (Ojs.list_of_js Ojs.string_of_js x1921)
             | _ -> assert false)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1918) "keyPath")
    let (set_keyPath :
      'tags this -> [ `Null  | `U1 of string  | `U2 of string list ] -> unit)
      =
      fun (x1923 : 'tags this) ->
        fun (x1924 : [ `Null  | `U1 of string  | `U2 of string list ]) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1923) "keyPath"
            (match x1924 with
             | `Null -> Ojs.null
             | `U1 x1925 -> Ojs.string_to_js x1925
             | `U2 x1926 -> Ojs.list_to_js Ojs.string_to_js x1926)
    let (create :
      ?autoIncrement:bool ->
        ?keyPath:[ `String of string  | `Other of string list ] Primitive.t
          -> unit -> t)
      =
      fun ?autoIncrement:(x1929 : bool option) ->
        fun
          ?keyPath:(x1930 :
                     [ `String of string  | `Other of string list ]
                       Primitive.t option)
          ->
          fun () ->
            let x1931 = Ojs.empty_obj () in
            (match x1929 with
             | Some x1937 ->
                 Ojs.set_prop_ascii x1931 "autoIncrement"
                   (Ojs.bool_to_js x1937)
             | None -> ());
            (match x1930 with
             | Some x1932 ->
                 Ojs.set_prop_ascii x1931 "keyPath"
                   (Primitive.t_to_js
                      (fun
                         (x1933 :
                           [ `String of string  | `Other of string list ])
                         ->
                         match x1933 with
                         | `String x1934 -> Ojs.string_to_js x1934
                         | `Other x1935 ->
                             Ojs.list_to_js Ojs.string_to_js x1935) x1932)
             | None -> ());
            t_of_js x1931
    let cast_from = Obj.magic
  end
module IDBIndexParameters =
  struct
    type t = [ `IDBIndexParameters ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1939 : Ojs.t) -> t_of_js x1939
    and t_0_to_js : t_0 -> Ojs.t = fun (x1938 : t) -> t_to_js x1938
    type tags = [ `IDBIndexParameters ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBIndexParameters ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1942 : Ojs.t) -> intf_of_js __tags_of_js x1942
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1940 : __tags intf) -> intf_to_js __tags_to_js x1940
    let (get_multiEntry : 'tags this -> bool option) =
      fun (x1944 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1944) "multiEntry")
    let (set_multiEntry : 'tags this -> bool -> unit) =
      fun (x1947 : 'tags this) ->
        fun (x1948 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1947) "multiEntry"
            (Ojs.bool_to_js x1948)
    let (get_unique : 'tags this -> bool option) =
      fun (x1950 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1950) "unique")
    let (set_unique : 'tags this -> bool -> unit) =
      fun (x1953 : 'tags this) ->
        fun (x1954 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1953) "unique"
            (Ojs.bool_to_js x1954)
    let (create : ?multiEntry:bool -> ?unique:bool -> unit -> t) =
      fun ?multiEntry:(x1956 : bool option) ->
        fun ?unique:(x1957 : bool option) ->
          fun () ->
            let x1958 = Ojs.empty_obj () in
            (match x1956 with
             | Some x1960 ->
                 Ojs.set_prop_ascii x1958 "multiEntry" (Ojs.bool_to_js x1960)
             | None -> ());
            (match x1957 with
             | Some x1959 ->
                 Ojs.set_prop_ascii x1958 "unique" (Ojs.bool_to_js x1959)
             | None -> ());
            t_of_js x1958
    let cast_from = Obj.magic
  end
module IDBValidKey =
  struct
    type t =
      [ `Number of float  | `String of string 
      | `Other of (t list, BufferSource.t, Date.t_0) union3 ] Primitive.t
    let rec t_of_js : Ojs.t -> t =
      fun (x1970 : Ojs.t) ->
        Primitive.t_of_js
          (fun (x1971 : Ojs.t) ->
             let x1972 = x1971 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x1972 "dummy") with
             | "Number" -> `Number (Ojs.float_of_js x1972)
             | "String" -> `String (Ojs.string_of_js x1972)
             | "Other" ->
                 `Other
                   (union3_of_js
                      (fun (x1973 : Ojs.t) -> Ojs.list_of_js t_of_js x1973)
                      BufferSource.t_of_js Date.t_0_of_js x1972)
             | _ -> assert false) x1970
    and t_to_js : t -> Ojs.t =
      fun
        (x1961 :
          [ `Number of float  | `String of string 
          | `Other of (t list, BufferSource.t, Date.t_0) union3 ] Primitive.t)
        ->
        Primitive.t_to_js
          (fun
             (x1962 :
               [ `Number of float  | `String of string 
               | `Other of (t list, BufferSource.t, Date.t_0) union3 ])
             ->
             match x1962 with
             | `Number x1963 -> Ojs.float_to_js x1963
             | `String x1964 -> Ojs.string_to_js x1964
             | `Other x1965 ->
                 union3_to_js
                   (fun (x1966 : t list) -> Ojs.list_to_js t_to_js x1966)
                   BufferSource.t_to_js Date.t_0_to_js x1965) x1961
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1978 : Ojs.t) -> t_of_js x1978
    and t_0_to_js : t_0 -> Ojs.t = fun (x1977 : t) -> t_to_js x1977
  end
module IDBTransactionMode =
  struct
    type t =
      [ `L_s163_readonly  | `L_s164_readwrite  | `L_s209_versionchange ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1980 : Ojs.t) ->
        let x1981 = x1980 in
        match Ojs.string_of_js x1981 with
        | "readonly" -> `L_s163_readonly
        | "readwrite" -> `L_s164_readwrite
        | "versionchange" -> `L_s209_versionchange
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x1979 :
          [ `L_s163_readonly  | `L_s164_readwrite  | `L_s209_versionchange ])
        ->
        match x1979 with
        | `L_s163_readonly -> Ojs.string_to_js "readonly"
        | `L_s164_readwrite -> Ojs.string_to_js "readwrite"
        | `L_s209_versionchange -> Ojs.string_to_js "versionchange"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1983 : Ojs.t) -> t_of_js x1983
    and t_0_to_js : t_0 -> Ojs.t = fun (x1982 : t) -> t_to_js x1982
  end
module IDBTransactionDurability =
  struct
    type t = [ `L_s170_relaxed  | `L_s189_strict  | `L_s57_default ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1985 : Ojs.t) ->
        let x1986 = x1985 in
        match Ojs.string_of_js x1986 with
        | "relaxed" -> `L_s170_relaxed
        | "strict" -> `L_s189_strict
        | "default" -> `L_s57_default
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x1984 : [ `L_s170_relaxed  | `L_s189_strict  | `L_s57_default ])
        ->
        match x1984 with
        | `L_s170_relaxed -> Ojs.string_to_js "relaxed"
        | `L_s189_strict -> Ojs.string_to_js "strict"
        | `L_s57_default -> Ojs.string_to_js "default"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1988 : Ojs.t) -> t_of_js x1988
    and t_0_to_js : t_0 -> Ojs.t = fun (x1987 : t) -> t_to_js x1987
  end
module IDBRequestReadyState =
  struct
    type t = [ `L_s149_pending  | `L_s64_done ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1990 : Ojs.t) ->
        let x1991 = x1990 in
        match Ojs.string_of_js x1991 with
        | "pending" -> `L_s149_pending
        | "done" -> `L_s64_done
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x1989 : [ `L_s149_pending  | `L_s64_done ]) ->
        match x1989 with
        | `L_s149_pending -> Ojs.string_to_js "pending"
        | `L_s64_done -> Ojs.string_to_js "done"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1993 : Ojs.t) -> t_of_js x1993
    and t_0_to_js : t_0 -> Ojs.t = fun (x1992 : t) -> t_to_js x1992
  end
module IDBKeyRange =
  struct
    type t = [ `IDBKeyRange ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1995 : Ojs.t) -> t_of_js x1995
    and t_0_to_js : t_0 -> Ojs.t = fun (x1994 : t) -> t_to_js x1994
    type tags = [ `IDBKeyRange ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBKeyRange ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1998 : Ojs.t) -> intf_of_js __tags_of_js x1998
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1996 : __tags intf) -> intf_to_js __tags_to_js x1996
    let (get_lower : 'tags this -> any) =
      fun (x2000 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x2000) "lower")
    let (get_lowerOpen : 'tags this -> bool) =
      fun (x2002 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2002) "lowerOpen")
    let (get_upper : 'tags this -> any) =
      fun (x2004 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x2004) "upper")
    let (get_upperOpen : 'tags this -> bool) =
      fun (x2006 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2006) "upperOpen")
    let (includes : 'tags this -> key:any -> bool) =
      fun (x2009 : 'tags this) ->
        fun ~key:(x2008 : any) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x2009) "includes"
               [|(any_to_js x2008)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "IDBKeyRange")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBKeyRange") [||])
    let (bound :
      lower:any ->
        upper:any -> ?lowerOpen:bool -> ?upperOpen:bool -> unit -> t)
      =
      fun ~lower:(x2011 : any) ->
        fun ~upper:(x2012 : any) ->
          fun ?lowerOpen:(x2013 : bool option) ->
            fun ?upperOpen:(x2014 : bool option) ->
              fun () ->
                t_of_js
                  (let x2018 = Ojs.get_prop_ascii Ojs.global "IDBKeyRange" in
                   Ojs.call (Ojs.get_prop_ascii x2018 "bound") "apply"
                     [|x2018;((let x2015 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2015 "push" [|(any_to_js x2011)|]);
                               ignore
                                 (Ojs.call x2015 "push" [|(any_to_js x2012)|]);
                               (match x2013 with
                                | Some x2017 ->
                                    ignore
                                      (Ojs.call x2015 "push"
                                         [|(Ojs.bool_to_js x2017)|])
                                | None -> ());
                               (match x2014 with
                                | Some x2016 ->
                                    ignore
                                      (Ojs.call x2015 "push"
                                         [|(Ojs.bool_to_js x2016)|])
                                | None -> ());
                               x2015))|])
    let (lowerBound : lower:any -> ?open_:bool -> unit -> t) =
      fun ~lower:(x2019 : any) ->
        fun ?open_:(x2020 : bool option) ->
          fun () ->
            t_of_js
              (let x2023 = Ojs.get_prop_ascii Ojs.global "IDBKeyRange" in
               Ojs.call (Ojs.get_prop_ascii x2023 "lowerBound") "apply"
                 [|x2023;((let x2021 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2021 "push" [|(any_to_js x2019)|]);
                           (match x2020 with
                            | Some x2022 ->
                                ignore
                                  (Ojs.call x2021 "push"
                                     [|(Ojs.bool_to_js x2022)|])
                            | None -> ());
                           x2021))|])
    let (only : any -> t) =
      fun (x2024 : any) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "IDBKeyRange") "only"
             [|(any_to_js x2024)|])
    let (upperBound : upper:any -> ?open_:bool -> unit -> t) =
      fun ~upper:(x2025 : any) ->
        fun ?open_:(x2026 : bool option) ->
          fun () ->
            t_of_js
              (let x2029 = Ojs.get_prop_ascii Ojs.global "IDBKeyRange" in
               Ojs.call (Ojs.get_prop_ascii x2029 "upperBound") "apply"
                 [|x2029;((let x2027 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2027 "push" [|(any_to_js x2025)|]);
                           (match x2026 with
                            | Some x2028 ->
                                ignore
                                  (Ojs.call x2027 "push"
                                     [|(Ojs.bool_to_js x2028)|])
                            | None -> ());
                           x2027))|])
  end
module IDBCursorDirection =
  struct
    type t =
      [ `L_s123_next  | `L_s124_nextunique  | `L_s155_prev 
      | `L_s156_prevunique ]
    let rec t_of_js : Ojs.t -> t =
      fun (x2031 : Ojs.t) ->
        let x2032 = x2031 in
        match Ojs.string_of_js x2032 with
        | "next" -> `L_s123_next
        | "nextunique" -> `L_s124_nextunique
        | "prev" -> `L_s155_prev
        | "prevunique" -> `L_s156_prevunique
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x2030 :
          [ `L_s123_next  | `L_s124_nextunique  | `L_s155_prev 
          | `L_s156_prevunique ])
        ->
        match x2030 with
        | `L_s123_next -> Ojs.string_to_js "next"
        | `L_s124_nextunique -> Ojs.string_to_js "nextunique"
        | `L_s155_prev -> Ojs.string_to_js "prev"
        | `L_s156_prevunique -> Ojs.string_to_js "prevunique"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2034 : Ojs.t) -> t_of_js x2034
    and t_0_to_js : t_0 -> Ojs.t = fun (x2033 : t) -> t_to_js x2033
  end
module DOMStringList =
  struct
    type t =
      [ `DOMStringList  | string ArrayLike.tags_1
      | string IterableIterator.tags_1] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2036 : Ojs.t) -> t_of_js x2036
    and t_0_to_js : t_0 -> Ojs.t = fun (x2035 : t) -> t_to_js x2035
    type tags =
      [ `DOMStringList  | string ArrayLike.tags_1
      | string IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMStringList ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x2039 : Ojs.t) -> intf_of_js __tags_of_js x2039
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x2037 : __tags intf) -> intf_to_js __tags_to_js x2037
    let (get_length : 'tags this -> float) =
      fun (x2041 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2041) "length")
    let (contains : 'tags this -> string:string -> bool) =
      fun (x2044 : 'tags this) ->
        fun ~string:(x2043 : string) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x2044) "contains"
               [|(Ojs.string_to_js x2043)|])
    let (item : 'tags this -> index:float -> string option) =
      fun (x2047 : 'tags this) ->
        fun ~index:(x2046 : float) ->
          Ojs.option_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x2047) "item"
               [|(Ojs.float_to_js x2046)|])
    let (get : 'tags this -> float -> string) =
      fun (x2050 : 'tags this) ->
        fun (x2052 : float) ->
          Ojs.string_of_js
            (Ojs.get_prop (this_to_js Obj.magic x2050)
               (Ojs.float_to_js x2052))
    let (set : 'tags this -> float -> string -> unit) =
      fun (x2053 : 'tags this) ->
        fun (x2055 : float) ->
          fun (x2056 : string) ->
            Ojs.set_prop (this_to_js Obj.magic x2053) (Ojs.float_to_js x2055)
              (Ojs.string_to_js x2056)
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMStringList")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "DOMStringList") [||])
  end
module DOMException =
  struct
    type t = [ `DOMException ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2058 : Ojs.t) -> t_of_js x2058
    and t_0_to_js : t_0 -> Ojs.t = fun (x2057 : t) -> t_to_js x2057
    type tags = [ `DOMException ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMException ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x2061 : Ojs.t) -> intf_of_js __tags_of_js x2061
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x2059 : __tags intf) -> intf_to_js __tags_to_js x2059
    let (get_code : 'tags this -> float) =
      fun (x2063 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2063) "code")
    let (get_message : 'tags this -> string) =
      fun (x2065 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2065) "message")
    let (get_name : 'tags this -> string) =
      fun (x2067 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2067) "name")
    let (get_ABORT_ERR : 'tags this -> float) =
      fun (x2069 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2069) "ABORT_ERR")
    let (get_DATA_CLONE_ERR : 'tags this -> float) =
      fun (x2071 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2071) "DATA_CLONE_ERR")
    let (get_DOMSTRING_SIZE_ERR : 'tags this -> float) =
      fun (x2073 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2073)
             "DOMSTRING_SIZE_ERR")
    let (get_HIERARCHY_REQUEST_ERR : 'tags this -> float) =
      fun (x2075 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2075)
             "HIERARCHY_REQUEST_ERR")
    let (get_INDEX_SIZE_ERR : 'tags this -> float) =
      fun (x2077 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2077) "INDEX_SIZE_ERR")
    let (get_INUSE_ATTRIBUTE_ERR : 'tags this -> float) =
      fun (x2079 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2079)
             "INUSE_ATTRIBUTE_ERR")
    let (get_INVALID_ACCESS_ERR : 'tags this -> float) =
      fun (x2081 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2081)
             "INVALID_ACCESS_ERR")
    let (get_INVALID_CHARACTER_ERR : 'tags this -> float) =
      fun (x2083 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2083)
             "INVALID_CHARACTER_ERR")
    let (get_INVALID_MODIFICATION_ERR : 'tags this -> float) =
      fun (x2085 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2085)
             "INVALID_MODIFICATION_ERR")
    let (get_INVALID_NODE_TYPE_ERR : 'tags this -> float) =
      fun (x2087 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2087)
             "INVALID_NODE_TYPE_ERR")
    let (get_INVALID_STATE_ERR : 'tags this -> float) =
      fun (x2089 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2089)
             "INVALID_STATE_ERR")
    let (get_NAMESPACE_ERR : 'tags this -> float) =
      fun (x2091 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2091) "NAMESPACE_ERR")
    let (get_NETWORK_ERR : 'tags this -> float) =
      fun (x2093 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2093) "NETWORK_ERR")
    let (get_NOT_FOUND_ERR : 'tags this -> float) =
      fun (x2095 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2095) "NOT_FOUND_ERR")
    let (get_NOT_SUPPORTED_ERR : 'tags this -> float) =
      fun (x2097 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2097)
             "NOT_SUPPORTED_ERR")
    let (get_NO_DATA_ALLOWED_ERR : 'tags this -> float) =
      fun (x2099 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2099)
             "NO_DATA_ALLOWED_ERR")
    let (get_NO_MODIFICATION_ALLOWED_ERR : 'tags this -> float) =
      fun (x2101 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2101)
             "NO_MODIFICATION_ALLOWED_ERR")
    let (get_QUOTA_EXCEEDED_ERR : 'tags this -> float) =
      fun (x2103 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2103)
             "QUOTA_EXCEEDED_ERR")
    let (get_SECURITY_ERR : 'tags this -> float) =
      fun (x2105 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2105) "SECURITY_ERR")
    let (get_SYNTAX_ERR : 'tags this -> float) =
      fun (x2107 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2107) "SYNTAX_ERR")
    let (get_TIMEOUT_ERR : 'tags this -> float) =
      fun (x2109 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2109) "TIMEOUT_ERR")
    let (get_TYPE_MISMATCH_ERR : 'tags this -> float) =
      fun (x2111 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2111)
             "TYPE_MISMATCH_ERR")
    let (get_URL_MISMATCH_ERR : 'tags this -> float) =
      fun (x2113 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2113) "URL_MISMATCH_ERR")
    let (get_VALIDATION_ERR : 'tags this -> float) =
      fun (x2115 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2115) "VALIDATION_ERR")
    let (get_WRONG_DOCUMENT_ERR : 'tags this -> float) =
      fun (x2117 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2117)
             "WRONG_DOCUMENT_ERR")
    let (create :
      code:float ->
        message:string ->
          name:string ->
            abort_err:float ->
              data_clone_err:float ->
                domstring_size_err:float ->
                  hierarchy_request_err:float ->
                    index_size_err:float ->
                      inuse_attribute_err:float ->
                        invalid_access_err:float ->
                          invalid_character_err:float ->
                            invalid_modification_err:float ->
                              invalid_node_type_err:float ->
                                invalid_state_err:float ->
                                  namespace_err:float ->
                                    network_err:float ->
                                      not_found_err:float ->
                                        not_supported_err:float ->
                                          no_data_allowed_err:float ->
                                            no_modification_allowed_err:float
                                              ->
                                              quota_exceeded_err:float ->
                                                security_err:float ->
                                                  syntax_err:float ->
                                                    timeout_err:float ->
                                                      type_mismatch_err:float
                                                        ->
                                                        url_mismatch_err:float
                                                          ->
                                                          validation_err:float
                                                            ->
                                                            wrong_document_err:float
                                                              -> unit -> t)
      =
      fun ~code:(x2119 : float) ->
        fun ~message:(x2120 : string) ->
          fun ~name:(x2121 : string) ->
            fun ~abort_err:(x2122 : float) ->
              fun ~data_clone_err:(x2123 : float) ->
                fun ~domstring_size_err:(x2124 : float) ->
                  fun ~hierarchy_request_err:(x2125 : float) ->
                    fun ~index_size_err:(x2126 : float) ->
                      fun ~inuse_attribute_err:(x2127 : float) ->
                        fun ~invalid_access_err:(x2128 : float) ->
                          fun ~invalid_character_err:(x2129 : float) ->
                            fun ~invalid_modification_err:(x2130 : float) ->
                              fun ~invalid_node_type_err:(x2131 : float) ->
                                fun ~invalid_state_err:(x2132 : float) ->
                                  fun ~namespace_err:(x2133 : float) ->
                                    fun ~network_err:(x2134 : float) ->
                                      fun ~not_found_err:(x2135 : float) ->
                                        fun
                                          ~not_supported_err:(x2136 : float)
                                          ->
                                          fun
                                            ~no_data_allowed_err:(x2137 :
                                                                   float)
                                            ->
                                            fun
                                              ~no_modification_allowed_err:
                                              (x2138 : float) ->
                                              fun
                                                ~quota_exceeded_err:(x2139 :
                                                                    float)
                                                ->
                                                fun
                                                  ~security_err:(x2140 :
                                                                  float)
                                                  ->
                                                  fun
                                                    ~syntax_err:(x2141 :
                                                                  float)
                                                    ->
                                                    fun
                                                      ~timeout_err:(x2142 :
                                                                    float)
                                                      ->
                                                      fun
                                                        ~type_mismatch_err:
                                                        (x2143 : float) ->
                                                        fun
                                                          ~url_mismatch_err:
                                                          (x2144 : float) ->
                                                          fun
                                                            ~validation_err:
                                                            (x2145 : 
                                                              float)
                                                            ->
                                                            fun
                                                              ~wrong_document_err:
                                                              (x2146 : 
                                                                float)
                                                              ->
                                                              fun () ->
                                                                let x2147 =
                                                                  Ojs.empty_obj
                                                                    () in
                                                                Ojs.set_prop_ascii
                                                                  x2147
                                                                  "code"
                                                                  (Ojs.float_to_js
                                                                    x2119);
                                                                Ojs.set_prop_ascii
                                                                  x2147
                                                                  "message"
                                                                  (Ojs.string_to_js
                                                                    x2120);
                                                                Ojs.set_prop_ascii
                                                                  x2147
                                                                  "name"
                                                                  (Ojs.string_to_js
                                                                    x2121);
                                                                Ojs.set_prop_ascii
                                                                  x2147
                                                                  "ABORT_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2122);
                                                                Ojs.set_prop_ascii
                                                                  x2147
                                                                  "DATA_CLONE_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2123);
                                                                Ojs.set_prop_ascii
                                                                  x2147
                                                                  "DOMSTRING_SIZE_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2124);
                                                                Ojs.set_prop_ascii
                                                                  x2147
                                                                  "HIERARCHY_REQUEST_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2125);
                                                                Ojs.set_prop_ascii
                                                                  x2147
                                                                  "INDEX_SIZE_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2126);
                                                                Ojs.set_prop_ascii
                                                                  x2147
                                                                  "INUSE_ATTRIBUTE_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2127);
                                                                Ojs.set_prop_ascii
                                                                  x2147
                                                                  "INVALID_ACCESS_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2128);
                                                                Ojs.set_prop_ascii
                                                                  x2147
                                                                  "INVALID_CHARACTER_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2129);
                                                                Ojs.set_prop_ascii
                                                                  x2147
                                                                  "INVALID_MODIFICATION_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2130);
                                                                Ojs.set_prop_ascii
                                                                  x2147
                                                                  "INVALID_NODE_TYPE_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2131);
                                                                Ojs.set_prop_ascii
                                                                  x2147
                                                                  "INVALID_STATE_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2132);
                                                                Ojs.set_prop_ascii
                                                                  x2147
                                                                  "NAMESPACE_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2133);
                                                                Ojs.set_prop_ascii
                                                                  x2147
                                                                  "NETWORK_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2134);
                                                                Ojs.set_prop_ascii
                                                                  x2147
                                                                  "NOT_FOUND_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2135);
                                                                Ojs.set_prop_ascii
                                                                  x2147
                                                                  "NOT_SUPPORTED_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2136);
                                                                Ojs.set_prop_ascii
                                                                  x2147
                                                                  "NO_DATA_ALLOWED_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2137);
                                                                Ojs.set_prop_ascii
                                                                  x2147
                                                                  "NO_MODIFICATION_ALLOWED_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2138);
                                                                Ojs.set_prop_ascii
                                                                  x2147
                                                                  "QUOTA_EXCEEDED_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2139);
                                                                Ojs.set_prop_ascii
                                                                  x2147
                                                                  "SECURITY_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2140);
                                                                Ojs.set_prop_ascii
                                                                  x2147
                                                                  "SYNTAX_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2141);
                                                                Ojs.set_prop_ascii
                                                                  x2147
                                                                  "TIMEOUT_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2142);
                                                                Ojs.set_prop_ascii
                                                                  x2147
                                                                  "TYPE_MISMATCH_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2143);
                                                                Ojs.set_prop_ascii
                                                                  x2147
                                                                  "URL_MISMATCH_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2144);
                                                                Ojs.set_prop_ascii
                                                                  x2147
                                                                  "VALIDATION_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2145);
                                                                Ojs.set_prop_ascii
                                                                  x2147
                                                                  "WRONG_DOCUMENT_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2146);
                                                                t_of_js x2147
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "prototype")
    let (create' : ?message:string -> ?name:string -> unit -> t) =
      fun ?message:(x2148 : string option) ->
        fun ?name:(x2149 : string option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMException")
                 (let x2150 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x2148 with
                   | Some x2152 ->
                       ignore
                         (Ojs.call x2150 "push" [|(Ojs.string_to_js x2152)|])
                   | None -> ());
                  (match x2149 with
                   | Some x2151 ->
                       ignore
                         (Ojs.call x2150 "push" [|(Ojs.string_to_js x2151)|])
                   | None -> ());
                  x2150))
    let (abort_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "ABORT_ERR")
    let (data_clone_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "DATA_CLONE_ERR")
    let (domstring_size_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "DOMSTRING_SIZE_ERR")
    let (hierarchy_request_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "HIERARCHY_REQUEST_ERR")
    let (index_size_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INDEX_SIZE_ERR")
    let (inuse_attribute_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INUSE_ATTRIBUTE_ERR")
    let (invalid_access_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_ACCESS_ERR")
    let (invalid_character_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_CHARACTER_ERR")
    let (invalid_modification_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_MODIFICATION_ERR")
    let (invalid_node_type_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_NODE_TYPE_ERR")
    let (invalid_state_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_STATE_ERR")
    let (namespace_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NAMESPACE_ERR")
    let (network_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NETWORK_ERR")
    let (not_found_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NOT_FOUND_ERR")
    let (not_supported_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NOT_SUPPORTED_ERR")
    let (no_data_allowed_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NO_DATA_ALLOWED_ERR")
    let (no_modification_allowed_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NO_MODIFICATION_ALLOWED_ERR")
    let (quota_exceeded_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "QUOTA_EXCEEDED_ERR")
    let (security_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "SECURITY_ERR")
    let (syntax_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "SYNTAX_ERR")
    let (timeout_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "TIMEOUT_ERR")
    let (type_mismatch_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "TYPE_MISMATCH_ERR")
    let (url_mismatch_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "URL_MISMATCH_ERR")
    let (validation_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "VALIDATION_ERR")
    let (wrong_document_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "WRONG_DOCUMENT_ERR")
  end
module rec
  IDBCursor:sig
              type t = [ `IDBCursor ] intf
              type t_0 = t
              [@@@js.stop ]
              type tags = [ `IDBCursor ]
              type tags_0 = tags
              [@@@js.start ]
              [@@@js.implem type tags = [ `IDBCursor ]
                type tags_0 = tags]
              type 'tags this = 'tags intf constraint 'tags = [> `IDBCursor ]
              val t_to_js : t -> Ojs.t
              val t_of_js : Ojs.t -> t
              val t_0_to_js : t_0 -> Ojs.t
              val t_0_of_js : Ojs.t -> t_0
              val get_direction : 'tags this -> IDBCursorDirection.t
              val get_key : 'tags this -> IDBValidKey.t
              val get_primaryKey : 'tags this -> IDBValidKey.t
              val get_request : 'tags this -> IDBRequest.t_0
              val get_source :
                'tags this -> (IDBIndex.t, IDBObjectStore.t) union2
              val advance : 'tags this -> count:float -> unit
              val continue : 'tags this -> ?key:IDBValidKey.t -> unit -> unit
              val continuePrimaryKey :
                'tags this ->
                  key:IDBValidKey.t -> primaryKey:IDBValidKey.t -> unit
              val delete : 'tags this -> undefined IDBRequest.t
              val update :
                'tags this -> value:any -> IDBValidKey.t IDBRequest.t
              val cast_from : 'tags this -> t
              val prototype : unit -> t
              val create : unit -> t
            end =
  struct
    type t = [ `IDBCursor ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2154 : Ojs.t) -> t_of_js x2154
    and t_0_to_js : t_0 -> Ojs.t = fun (x2153 : t) -> t_to_js x2153
    type tags = [ `IDBCursor ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBCursor ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x2157 : Ojs.t) -> intf_of_js __tags_of_js x2157
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x2155 : __tags intf) -> intf_to_js __tags_to_js x2155
    let (get_direction : 'tags this -> IDBCursorDirection.t) =
      fun (x2159 : 'tags this) ->
        IDBCursorDirection.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2159) "direction")
    let (get_key : 'tags this -> IDBValidKey.t) =
      fun (x2161 : 'tags this) ->
        IDBValidKey.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2161) "key")
    let (get_primaryKey : 'tags this -> IDBValidKey.t) =
      fun (x2163 : 'tags this) ->
        IDBValidKey.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2163) "primaryKey")
    let (get_request : 'tags this -> IDBRequest.t_0) =
      fun (x2165 : 'tags this) ->
        IDBRequest.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2165) "request")
    let (get_source : 'tags this -> (IDBIndex.t, IDBObjectStore.t) union2) =
      fun (x2167 : 'tags this) ->
        union2_of_js IDBIndex.t_of_js IDBObjectStore.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2167) "source")
    let (advance : 'tags this -> count:float -> unit) =
      fun (x2172 : 'tags this) ->
        fun ~count:(x2171 : float) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x2172) "advance"
               [|(Ojs.float_to_js x2171)|])
    let (continue : 'tags this -> ?key:IDBValidKey.t -> unit -> unit) =
      fun (x2177 : 'tags this) ->
        fun ?key:(x2174 : IDBValidKey.t option) ->
          fun () ->
            ignore
              (let x2179 = this_to_js Obj.magic x2177 in
               Ojs.call (Ojs.get_prop_ascii x2179 "continue") "apply"
                 [|x2179;((let x2175 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x2174 with
                            | Some x2176 ->
                                ignore
                                  (Ojs.call x2175 "push"
                                     [|(IDBValidKey.t_to_js x2176)|])
                            | None -> ());
                           x2175))|])
    let (continuePrimaryKey :
      'tags this -> key:IDBValidKey.t -> primaryKey:IDBValidKey.t -> unit) =
      fun (x2182 : 'tags this) ->
        fun ~key:(x2180 : IDBValidKey.t) ->
          fun ~primaryKey:(x2181 : IDBValidKey.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x2182) "continuePrimaryKey"
                 [|(IDBValidKey.t_to_js x2180);(IDBValidKey.t_to_js x2181)|])
    let (delete : 'tags this -> undefined IDBRequest.t) =
      fun (x2184 : 'tags this) ->
        IDBRequest.t_of_js undefined_of_js
          (Ojs.call (this_to_js Obj.magic x2184) "delete" [||])
    let (update : 'tags this -> value:any -> IDBValidKey.t IDBRequest.t) =
      fun (x2188 : 'tags this) ->
        fun ~value:(x2187 : any) ->
          IDBRequest.t_of_js IDBValidKey.t_of_js
            (Ojs.call (this_to_js Obj.magic x2188) "update"
               [|(any_to_js x2187)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "IDBCursor")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBCursor") [||])
  end
 and
  IDBCursorWithValue:sig
                       type t = [ `IDBCursor  | `IDBCursorWithValue ] intf
                       type t_0 = t
                       [@@@js.stop ]
                       type tags = [ `IDBCursor  | `IDBCursorWithValue ]
                       type tags_0 = tags
                       [@@@js.start ]
                       [@@@js.implem
                         type tags = [ `IDBCursor  | `IDBCursorWithValue ]
                         type tags_0 = tags]
                       type 'tags this =
                         'tags intf constraint 'tags =
                                     [> `IDBCursorWithValue ]
                       val t_to_js : t -> Ojs.t
                       val t_of_js : Ojs.t -> t
                       val t_0_to_js : t_0 -> Ojs.t
                       val t_0_of_js : Ojs.t -> t_0
                       val get_value : 'tags this -> any
                       val create : value:any -> unit -> t
                       val cast_from : 'tags this -> t
                       val prototype : unit -> t
                       val create' : unit -> t
                     end =
  struct
    type t = [ `IDBCursor  | `IDBCursorWithValue ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2192 : Ojs.t) -> t_of_js x2192
    and t_0_to_js : t_0 -> Ojs.t = fun (x2191 : t) -> t_to_js x2191
    type tags = [ `IDBCursor  | `IDBCursorWithValue ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBCursorWithValue ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x2195 : Ojs.t) -> intf_of_js __tags_of_js x2195
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x2193 : __tags intf) -> intf_to_js __tags_to_js x2193
    let (get_value : 'tags this -> any) =
      fun (x2197 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x2197) "value")
    let (create : value:any -> unit -> t) =
      fun ~value:(x2199 : any) ->
        fun () ->
          let x2200 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x2200 "value" (any_to_js x2199); t_of_js x2200
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "IDBCursorWithValue") "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBCursorWithValue")
             [||])
  end and
       IDBDatabase:sig
                     type t = [ `EventTarget  | `IDBDatabase ] intf
                     type t_0 = t
                     [@@@js.stop ]
                     type tags = [ `EventTarget  | `IDBDatabase ]
                     type tags_0 = tags
                     [@@@js.start ]
                     [@@@js.implem
                       type tags = [ `EventTarget  | `IDBDatabase ]
                       type tags_0 = tags]
                     type 'tags this =
                       'tags intf constraint 'tags = [> `IDBDatabase ]
                     val t_to_js : t -> Ojs.t
                     val t_of_js : Ojs.t -> t
                     val t_0_to_js : t_0 -> Ojs.t
                     val t_0_of_js : Ojs.t -> t_0
                     val get_name : 'tags this -> string
                     val get_objectStoreNames : 'tags this -> DOMStringList.t
                     val get_onabort :
                       'tags this -> (this:t -> ev:Event.t -> any) option
                     val set_onabort :
                       'tags this ->
                         (this:t -> ev:Event.t -> any) option -> unit
                     val get_onclose :
                       'tags this -> (this:t -> ev:Event.t -> any) option
                     val set_onclose :
                       'tags this ->
                         (this:t -> ev:Event.t -> any) option -> unit
                     val get_onerror :
                       'tags this -> (this:t -> ev:Event.t -> any) option
                     val set_onerror :
                       'tags this ->
                         (this:t -> ev:Event.t -> any) option -> unit
                     val get_onversionchange :
                       'tags this ->
                         (this:t -> ev:IDBVersionChangeEvent.t -> any) option
                     val set_onversionchange :
                       'tags this ->
                         (this:t -> ev:IDBVersionChangeEvent.t -> any) option
                           -> unit
                     val get_version : 'tags this -> float
                     val close : 'tags this -> unit
                     val createObjectStore :
                       'tags this ->
                         name:string ->
                           ?options:IDBObjectStoreParameters.t ->
                             unit -> IDBObjectStore.t
                     val deleteObjectStore :
                       'tags this -> name:string -> unit
                     val transaction :
                       'tags this ->
                         storeNames:[ `U1 of string  | `U2 of string list ]
                           ->
                           ?mode:IDBTransactionMode.t ->
                             unit -> IDBTransaction.t
                     val addEventListener :
                       'tags this ->
                         type_:'K ->
                           listener:(this:t -> ev:any -> any) ->
                             ?options:[ `U1 of bool 
                                      | `U2 of AddEventListenerOptions.t ]
                               -> unit -> unit
                     val addEventListener' :
                       'tags this ->
                         type_:string ->
                           listener:EventListenerOrEventListenerObject.t ->
                             ?options:[ `U1 of bool 
                                      | `U2 of AddEventListenerOptions.t ]
                               -> unit -> unit
                     val removeEventListener :
                       'tags this ->
                         type_:'K ->
                           listener:(this:t -> ev:any -> any) ->
                             ?options:[ `U1 of bool 
                                      | `U2 of EventListenerOptions.t ]
                               -> unit -> unit
                     val removeEventListener' :
                       'tags this ->
                         type_:string ->
                           listener:EventListenerOrEventListenerObject.t ->
                             ?options:[ `U1 of bool 
                                      | `U2 of EventListenerOptions.t ]
                               -> unit -> unit
                     val transaction' :
                       'tags this ->
                         storeNames:[ `U1 of string 
                                    | `U2 of string Iterable.t_1 ]
                           ->
                           ?mode:IDBTransactionMode.t ->
                             unit -> IDBTransaction.t
                     val cast_from : 'tags this -> t
                     val prototype : unit -> t
                     val create : unit -> t
                   end =
       struct
         type t = [ `EventTarget  | `IDBDatabase ] intf
         let rec t_of_js : Ojs.t -> t = Obj.magic
         and t_to_js : t -> Ojs.t = Obj.magic
         type t_0 = t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x2202 : Ojs.t) -> t_of_js x2202
         and t_0_to_js : t_0 -> Ojs.t = fun (x2201 : t) -> t_to_js x2201
         type tags = [ `EventTarget  | `IDBDatabase ]
         type tags_0 = tags
         type 'tags this = 'tags intf constraint 'tags = [> `IDBDatabase ]
         let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
           =
           fun (type __tags) ->
             fun (__tags_of_js : Ojs.t -> __tags) ->
               fun (x2205 : Ojs.t) -> intf_of_js __tags_of_js x2205
         and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
           fun (type __tags) ->
             fun (__tags_to_js : __tags -> Ojs.t) ->
               fun (x2203 : __tags intf) -> intf_to_js __tags_to_js x2203
         let (get_name : 'tags this -> string) =
           fun (x2207 : 'tags this) ->
             Ojs.string_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x2207) "name")
         let (get_objectStoreNames : 'tags this -> DOMStringList.t) =
           fun (x2209 : 'tags this) ->
             DOMStringList.t_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x2209)
                  "objectStoreNames")
         let (get_onabort :
           'tags this -> (this:t -> ev:Event.t -> any) option) =
           fun (x2211 : 'tags this) ->
             Ojs.option_of_js
               (fun (x2213 : Ojs.t) ->
                  fun ~this:(x2214 : t) ->
                    fun ~ev:(x2215 : Event.t) ->
                      any_of_js
                        (Ojs.apply x2213
                           [|(t_to_js x2214);(Event.t_to_js x2215)|]))
               (Ojs.get_prop_ascii (this_to_js Obj.magic x2211) "onabort")
         let (set_onabort :
           'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
           fun (x2216 : 'tags this) ->
             fun (x2217 : (this:t -> ev:Event.t -> any) option) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x2216) "onabort"
                 (Ojs.option_to_js
                    (fun (x2218 : this:t -> ev:Event.t -> any) ->
                       Ojs.fun_to_js 2
                         (fun (x2219 : Ojs.t) ->
                            fun (x2220 : Ojs.t) ->
                              any_to_js
                                (x2218 ~this:(t_of_js x2219)
                                   ~ev:(Event.t_of_js x2220)))) x2217)
         let (get_onclose :
           'tags this -> (this:t -> ev:Event.t -> any) option) =
           fun (x2222 : 'tags this) ->
             Ojs.option_of_js
               (fun (x2224 : Ojs.t) ->
                  fun ~this:(x2225 : t) ->
                    fun ~ev:(x2226 : Event.t) ->
                      any_of_js
                        (Ojs.apply x2224
                           [|(t_to_js x2225);(Event.t_to_js x2226)|]))
               (Ojs.get_prop_ascii (this_to_js Obj.magic x2222) "onclose")
         let (set_onclose :
           'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
           fun (x2227 : 'tags this) ->
             fun (x2228 : (this:t -> ev:Event.t -> any) option) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x2227) "onclose"
                 (Ojs.option_to_js
                    (fun (x2229 : this:t -> ev:Event.t -> any) ->
                       Ojs.fun_to_js 2
                         (fun (x2230 : Ojs.t) ->
                            fun (x2231 : Ojs.t) ->
                              any_to_js
                                (x2229 ~this:(t_of_js x2230)
                                   ~ev:(Event.t_of_js x2231)))) x2228)
         let (get_onerror :
           'tags this -> (this:t -> ev:Event.t -> any) option) =
           fun (x2233 : 'tags this) ->
             Ojs.option_of_js
               (fun (x2235 : Ojs.t) ->
                  fun ~this:(x2236 : t) ->
                    fun ~ev:(x2237 : Event.t) ->
                      any_of_js
                        (Ojs.apply x2235
                           [|(t_to_js x2236);(Event.t_to_js x2237)|]))
               (Ojs.get_prop_ascii (this_to_js Obj.magic x2233) "onerror")
         let (set_onerror :
           'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
           fun (x2238 : 'tags this) ->
             fun (x2239 : (this:t -> ev:Event.t -> any) option) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x2238) "onerror"
                 (Ojs.option_to_js
                    (fun (x2240 : this:t -> ev:Event.t -> any) ->
                       Ojs.fun_to_js 2
                         (fun (x2241 : Ojs.t) ->
                            fun (x2242 : Ojs.t) ->
                              any_to_js
                                (x2240 ~this:(t_of_js x2241)
                                   ~ev:(Event.t_of_js x2242)))) x2239)
         let (get_onversionchange :
           'tags this -> (this:t -> ev:IDBVersionChangeEvent.t -> any) option)
           =
           fun (x2244 : 'tags this) ->
             Ojs.option_of_js
               (fun (x2246 : Ojs.t) ->
                  fun ~this:(x2247 : t) ->
                    fun ~ev:(x2248 : IDBVersionChangeEvent.t) ->
                      any_of_js
                        (Ojs.apply x2246
                           [|(t_to_js x2247);(IDBVersionChangeEvent.t_to_js
                                                x2248)|]))
               (Ojs.get_prop_ascii (this_to_js Obj.magic x2244)
                  "onversionchange")
         let (set_onversionchange :
           'tags this ->
             (this:t -> ev:IDBVersionChangeEvent.t -> any) option -> unit)
           =
           fun (x2249 : 'tags this) ->
             fun
               (x2250 : (this:t -> ev:IDBVersionChangeEvent.t -> any) option)
               ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x2249)
                 "onversionchange"
                 (Ojs.option_to_js
                    (fun
                       (x2251 : this:t -> ev:IDBVersionChangeEvent.t -> any)
                       ->
                       Ojs.fun_to_js 2
                         (fun (x2252 : Ojs.t) ->
                            fun (x2253 : Ojs.t) ->
                              any_to_js
                                (x2251 ~this:(t_of_js x2252)
                                   ~ev:(IDBVersionChangeEvent.t_of_js x2253))))
                    x2250)
         let (get_version : 'tags this -> float) =
           fun (x2255 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x2255) "version")
         let (close : 'tags this -> unit) =
           fun (x2257 : 'tags this) ->
             ignore (Ojs.call (this_to_js Obj.magic x2257) "close" [||])
         let (createObjectStore :
           'tags this ->
             name:string ->
               ?options:IDBObjectStoreParameters.t ->
                 unit -> IDBObjectStore.t)
           =
           fun (x2263 : 'tags this) ->
             fun ~name:(x2259 : string) ->
               fun ?options:(x2260 : IDBObjectStoreParameters.t option) ->
                 fun () ->
                   IDBObjectStore.t_of_js
                     (let x2265 = this_to_js Obj.magic x2263 in
                      Ojs.call (Ojs.get_prop_ascii x2265 "createObjectStore")
                        "apply"
                        [|x2265;((let x2261 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x2261 "push"
                                       [|(Ojs.string_to_js x2259)|]);
                                  (match x2260 with
                                   | Some x2262 ->
                                       ignore
                                         (Ojs.call x2261 "push"
                                            [|(IDBObjectStoreParameters.t_to_js
                                                 x2262)|])
                                   | None -> ());
                                  x2261))|])
         let (deleteObjectStore : 'tags this -> name:string -> unit) =
           fun (x2267 : 'tags this) ->
             fun ~name:(x2266 : string) ->
               ignore
                 (Ojs.call (this_to_js Obj.magic x2267) "deleteObjectStore"
                    [|(Ojs.string_to_js x2266)|])
         let (transaction :
           'tags this ->
             storeNames:[ `U1 of string  | `U2 of string list ] ->
               ?mode:IDBTransactionMode.t -> unit -> IDBTransaction.t)
           =
           fun (x2276 : 'tags this) ->
             fun
               ~storeNames:(x2269 : [ `U1 of string  | `U2 of string list ])
               ->
               fun ?mode:(x2270 : IDBTransactionMode.t option) ->
                 fun () ->
                   IDBTransaction.t_of_js
                     (let x2278 = this_to_js Obj.magic x2276 in
                      Ojs.call (Ojs.get_prop_ascii x2278 "transaction")
                        "apply"
                        [|x2278;((let x2271 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x2271 "push"
                                       [|((match x2269 with
                                           | `U1 x2273 ->
                                               Ojs.string_to_js x2273
                                           | `U2 x2274 ->
                                               Ojs.list_to_js
                                                 Ojs.string_to_js x2274))|]);
                                  (match x2270 with
                                   | Some x2272 ->
                                       ignore
                                         (Ojs.call x2271 "push"
                                            [|(IDBTransactionMode.t_to_js
                                                 x2272)|])
                                   | None -> ());
                                  x2271))|])
         let (addEventListener :
           'tags this ->
             type_:'K ->
               listener:(this:t -> ev:any -> any) ->
                 ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                   -> unit -> unit)
           =
           fun (x2288 : 'tags this) ->
             fun ~type_:(x2279 : 'K) ->
               fun ~listener:(x2280 : this:t -> ev:any -> any) ->
                 fun
                   ?options:(x2281 :
                              [ `U1 of bool 
                              | `U2 of AddEventListenerOptions.t ] option)
                   ->
                   fun () ->
                     ignore
                       (let x2290 = this_to_js Obj.magic x2288 in
                        Ojs.call
                          (Ojs.get_prop_ascii x2290 "addEventListener")
                          "apply"
                          [|x2290;((let x2282 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x2282 "push"
                                         [|(Obj.magic x2279)|]);
                                    ignore
                                      (Ojs.call x2282 "push"
                                         [|(Ojs.fun_to_js 2
                                              (fun (x2286 : Ojs.t) ->
                                                 fun (x2287 : Ojs.t) ->
                                                   any_to_js
                                                     (x2280
                                                        ~this:(t_of_js x2286)
                                                        ~ev:(any_of_js x2287))))|]);
                                    (match x2281 with
                                     | Some x2283 ->
                                         ignore
                                           (Ojs.call x2282 "push"
                                              [|((match x2283 with
                                                  | `U1 x2284 ->
                                                      Ojs.bool_to_js x2284
                                                  | `U2 x2285 ->
                                                      AddEventListenerOptions.t_to_js
                                                        x2285))|])
                                     | None -> ());
                                    x2282))|])
         let (addEventListener' :
           'tags this ->
             type_:string ->
               listener:EventListenerOrEventListenerObject.t ->
                 ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                   -> unit -> unit)
           =
           fun (x2298 : 'tags this) ->
             fun ~type_:(x2291 : string) ->
               fun ~listener:(x2292 : EventListenerOrEventListenerObject.t)
                 ->
                 fun
                   ?options:(x2293 :
                              [ `U1 of bool 
                              | `U2 of AddEventListenerOptions.t ] option)
                   ->
                   fun () ->
                     ignore
                       (let x2300 = this_to_js Obj.magic x2298 in
                        Ojs.call
                          (Ojs.get_prop_ascii x2300 "addEventListener")
                          "apply"
                          [|x2300;((let x2294 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x2294 "push"
                                         [|(Ojs.string_to_js x2291)|]);
                                    ignore
                                      (Ojs.call x2294 "push"
                                         [|(EventListenerOrEventListenerObject.t_to_js
                                              x2292)|]);
                                    (match x2293 with
                                     | Some x2295 ->
                                         ignore
                                           (Ojs.call x2294 "push"
                                              [|((match x2295 with
                                                  | `U1 x2296 ->
                                                      Ojs.bool_to_js x2296
                                                  | `U2 x2297 ->
                                                      AddEventListenerOptions.t_to_js
                                                        x2297))|])
                                     | None -> ());
                                    x2294))|])
         let (removeEventListener :
           'tags this ->
             type_:'K ->
               listener:(this:t -> ev:any -> any) ->
                 ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
                   unit -> unit)
           =
           fun (x2310 : 'tags this) ->
             fun ~type_:(x2301 : 'K) ->
               fun ~listener:(x2302 : this:t -> ev:any -> any) ->
                 fun
                   ?options:(x2303 :
                              [ `U1 of bool 
                              | `U2 of EventListenerOptions.t ] option)
                   ->
                   fun () ->
                     ignore
                       (let x2312 = this_to_js Obj.magic x2310 in
                        Ojs.call
                          (Ojs.get_prop_ascii x2312 "removeEventListener")
                          "apply"
                          [|x2312;((let x2304 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x2304 "push"
                                         [|(Obj.magic x2301)|]);
                                    ignore
                                      (Ojs.call x2304 "push"
                                         [|(Ojs.fun_to_js 2
                                              (fun (x2308 : Ojs.t) ->
                                                 fun (x2309 : Ojs.t) ->
                                                   any_to_js
                                                     (x2302
                                                        ~this:(t_of_js x2308)
                                                        ~ev:(any_of_js x2309))))|]);
                                    (match x2303 with
                                     | Some x2305 ->
                                         ignore
                                           (Ojs.call x2304 "push"
                                              [|((match x2305 with
                                                  | `U1 x2306 ->
                                                      Ojs.bool_to_js x2306
                                                  | `U2 x2307 ->
                                                      EventListenerOptions.t_to_js
                                                        x2307))|])
                                     | None -> ());
                                    x2304))|])
         let (removeEventListener' :
           'tags this ->
             type_:string ->
               listener:EventListenerOrEventListenerObject.t ->
                 ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
                   unit -> unit)
           =
           fun (x2320 : 'tags this) ->
             fun ~type_:(x2313 : string) ->
               fun ~listener:(x2314 : EventListenerOrEventListenerObject.t)
                 ->
                 fun
                   ?options:(x2315 :
                              [ `U1 of bool 
                              | `U2 of EventListenerOptions.t ] option)
                   ->
                   fun () ->
                     ignore
                       (let x2322 = this_to_js Obj.magic x2320 in
                        Ojs.call
                          (Ojs.get_prop_ascii x2322 "removeEventListener")
                          "apply"
                          [|x2322;((let x2316 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x2316 "push"
                                         [|(Ojs.string_to_js x2313)|]);
                                    ignore
                                      (Ojs.call x2316 "push"
                                         [|(EventListenerOrEventListenerObject.t_to_js
                                              x2314)|]);
                                    (match x2315 with
                                     | Some x2317 ->
                                         ignore
                                           (Ojs.call x2316 "push"
                                              [|((match x2317 with
                                                  | `U1 x2318 ->
                                                      Ojs.bool_to_js x2318
                                                  | `U2 x2319 ->
                                                      EventListenerOptions.t_to_js
                                                        x2319))|])
                                     | None -> ());
                                    x2316))|])
         let (transaction' :
           'tags this ->
             storeNames:[ `U1 of string  | `U2 of string Iterable.t_1 ] ->
               ?mode:IDBTransactionMode.t -> unit -> IDBTransaction.t)
           =
           fun (x2330 : 'tags this) ->
             fun
               ~storeNames:(x2323 :
                             [ `U1 of string  | `U2 of string Iterable.t_1 ])
               ->
               fun ?mode:(x2324 : IDBTransactionMode.t option) ->
                 fun () ->
                   IDBTransaction.t_of_js
                     (let x2332 = this_to_js Obj.magic x2330 in
                      Ojs.call (Ojs.get_prop_ascii x2332 "transaction")
                        "apply"
                        [|x2332;((let x2325 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x2325 "push"
                                       [|((match x2323 with
                                           | `U1 x2327 ->
                                               Ojs.string_to_js x2327
                                           | `U2 x2328 ->
                                               Iterable.t_1_to_js
                                                 Ojs.string_to_js x2328))|]);
                                  (match x2324 with
                                   | Some x2326 ->
                                       ignore
                                         (Ojs.call x2325 "push"
                                            [|(IDBTransactionMode.t_to_js
                                                 x2326)|])
                                   | None -> ());
                                  x2325))|])
         let cast_from = Obj.magic
         let (prototype : unit -> t) =
           fun () ->
             t_of_js
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global "IDBDatabase") "prototype")
         let (create : unit -> t) =
           fun () ->
             t_of_js
               (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBDatabase")
                  [||])
       end and
            IDBIndex:sig
                       type t = [ `IDBIndex ] intf
                       type t_0 = t
                       [@@@js.stop ]
                       type tags = [ `IDBIndex ]
                       type tags_0 = tags
                       [@@@js.start ]
                       [@@@js.implem
                         type tags = [ `IDBIndex ]
                         type tags_0 = tags]
                       type 'tags this =
                         'tags intf constraint 'tags = [> `IDBIndex ]
                       val t_to_js : t -> Ojs.t
                       val t_of_js : Ojs.t -> t
                       val t_0_to_js : t_0 -> Ojs.t
                       val t_0_of_js : Ojs.t -> t_0
                       val get_keyPath :
                         'tags this ->
                           [ `String of string  | `Other of string list ]
                             Primitive.t
                       val get_multiEntry : 'tags this -> bool
                       val get_name : 'tags this -> string
                       val set_name : 'tags this -> string -> unit
                       val get_objectStore : 'tags this -> IDBObjectStore.t
                       val get_unique : 'tags this -> bool
                       val count :
                         'tags this ->
                           ?query:[ `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ]
                             -> unit -> float IDBRequest.t
                       val get_ :
                         'tags this ->
                           query:[ `U1 of IDBValidKey.t 
                                 | `U2 of IDBKeyRange.t ]
                             -> any IDBRequest.t
                       val getAll :
                         'tags this ->
                           ?query:[ `Null  | `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ]
                             -> ?count:float -> unit -> any list IDBRequest.t
                       val getAllKeys :
                         'tags this ->
                           ?query:[ `Null  | `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ]
                             ->
                             ?count:float ->
                               unit -> IDBValidKey.t list IDBRequest.t
                       val getKey :
                         'tags this ->
                           query:[ `U1 of IDBValidKey.t 
                                 | `U2 of IDBKeyRange.t ]
                             -> IDBValidKey.t option IDBRequest.t
                       val openCursor :
                         'tags this ->
                           ?query:[ `Null  | `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ]
                             ->
                             ?direction:IDBCursorDirection.t ->
                               unit ->
                                 IDBCursorWithValue.t option IDBRequest.t
                       val openKeyCursor :
                         'tags this ->
                           ?query:[ `Null  | `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ]
                             ->
                             ?direction:IDBCursorDirection.t ->
                               unit -> IDBCursor.t option IDBRequest.t
                       val cast_from : 'tags this -> t
                       val prototype : unit -> t
                       val create : unit -> t
                     end =
            struct
              type t = [ `IDBIndex ] intf
              let rec t_of_js : Ojs.t -> t = Obj.magic
              and t_to_js : t -> Ojs.t = Obj.magic
              type t_0 = t
              let rec t_0_of_js : Ojs.t -> t_0 =
                fun (x2334 : Ojs.t) -> t_of_js x2334
              and t_0_to_js : t_0 -> Ojs.t = fun (x2333 : t) -> t_to_js x2333
              type tags = [ `IDBIndex ]
              type tags_0 = tags
              type 'tags this = 'tags intf constraint 'tags = [> `IDBIndex ]
              let rec this_of_js :
                'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
                fun (type __tags) ->
                  fun (__tags_of_js : Ojs.t -> __tags) ->
                    fun (x2337 : Ojs.t) -> intf_of_js __tags_of_js x2337
              and this_to_js :
                'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
                fun (type __tags) ->
                  fun (__tags_to_js : __tags -> Ojs.t) ->
                    fun (x2335 : __tags intf) ->
                      intf_to_js __tags_to_js x2335
              let (get_keyPath :
                'tags this ->
                  [ `String of string  | `Other of string list ] Primitive.t)
                =
                fun (x2339 : 'tags this) ->
                  Primitive.t_of_js
                    (fun (x2341 : Ojs.t) ->
                       let x2342 = x2341 in
                       match Ojs.string_of_js
                               (Ojs.get_prop_ascii x2342 "dummy")
                       with
                       | "String" -> `String (Ojs.string_of_js x2342)
                       | "Other" ->
                           `Other (Ojs.list_of_js Ojs.string_of_js x2342)
                       | _ -> assert false)
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x2339)
                       "keyPath")
              let (get_multiEntry : 'tags this -> bool) =
                fun (x2344 : 'tags this) ->
                  Ojs.bool_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x2344)
                       "multiEntry")
              let (get_name : 'tags this -> string) =
                fun (x2346 : 'tags this) ->
                  Ojs.string_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x2346) "name")
              let (set_name : 'tags this -> string -> unit) =
                fun (x2348 : 'tags this) ->
                  fun (x2349 : string) ->
                    Ojs.set_prop_ascii (this_to_js Obj.magic x2348) "name"
                      (Ojs.string_to_js x2349)
              let (get_objectStore : 'tags this -> IDBObjectStore.t) =
                fun (x2351 : 'tags this) ->
                  IDBObjectStore.t_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x2351)
                       "objectStore")
              let (get_unique : 'tags this -> bool) =
                fun (x2353 : 'tags this) ->
                  Ojs.bool_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x2353) "unique")
              let (count :
                'tags this ->
                  ?query:[ `U1 of IDBValidKey.t  | `U2 of IDBKeyRange.t ] ->
                    unit -> float IDBRequest.t)
                =
                fun (x2360 : 'tags this) ->
                  fun
                    ?query:(x2355 :
                             [ `U1 of IDBValidKey.t  | `U2 of IDBKeyRange.t ]
                               option)
                    ->
                    fun () ->
                      IDBRequest.t_of_js Ojs.float_of_js
                        (let x2362 = this_to_js Obj.magic x2360 in
                         Ojs.call (Ojs.get_prop_ascii x2362 "count") "apply"
                           [|x2362;((let x2356 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     (match x2355 with
                                      | Some x2357 ->
                                          ignore
                                            (Ojs.call x2356 "push"
                                               [|((match x2357 with
                                                   | `U1 x2358 ->
                                                       IDBValidKey.t_to_js
                                                         x2358
                                                   | `U2 x2359 ->
                                                       IDBKeyRange.t_to_js
                                                         x2359))|])
                                      | None -> ());
                                     x2356))|])
              let (get_ :
                'tags this ->
                  query:[ `U1 of IDBValidKey.t  | `U2 of IDBKeyRange.t ] ->
                    any IDBRequest.t)
                =
                fun (x2367 : 'tags this) ->
                  fun
                    ~query:(x2364 :
                             [ `U1 of IDBValidKey.t  | `U2 of IDBKeyRange.t ])
                    ->
                    IDBRequest.t_of_js any_of_js
                      (Ojs.call (this_to_js Obj.magic x2367) "get"
                         [|((match x2364 with
                             | `U1 x2365 -> IDBValidKey.t_to_js x2365
                             | `U2 x2366 -> IDBKeyRange.t_to_js x2366))|])
              let (getAll :
                'tags this ->
                  ?query:[ `Null  | `U1 of IDBValidKey.t 
                         | `U2 of IDBKeyRange.t ]
                    -> ?count:float -> unit -> any list IDBRequest.t)
                =
                fun (x2377 : 'tags this) ->
                  fun
                    ?query:(x2370 :
                             [ `Null  | `U1 of IDBValidKey.t 
                             | `U2 of IDBKeyRange.t ] option)
                    ->
                    fun ?count:(x2371 : float option) ->
                      fun () ->
                        IDBRequest.t_of_js
                          (fun (x2380 : Ojs.t) ->
                             Ojs.list_of_js any_of_js x2380)
                          (let x2379 = this_to_js Obj.magic x2377 in
                           Ojs.call (Ojs.get_prop_ascii x2379 "getAll")
                             "apply"
                             [|x2379;((let x2372 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       (match x2370 with
                                        | Some x2374 ->
                                            ignore
                                              (Ojs.call x2372 "push"
                                                 [|((match x2374 with
                                                     | `Null -> Ojs.null
                                                     | `U1 x2375 ->
                                                         IDBValidKey.t_to_js
                                                           x2375
                                                     | `U2 x2376 ->
                                                         IDBKeyRange.t_to_js
                                                           x2376))|])
                                        | None -> ());
                                       (match x2371 with
                                        | Some x2373 ->
                                            ignore
                                              (Ojs.call x2372 "push"
                                                 [|(Ojs.float_to_js x2373)|])
                                        | None -> ());
                                       x2372))|])
              let (getAllKeys :
                'tags this ->
                  ?query:[ `Null  | `U1 of IDBValidKey.t 
                         | `U2 of IDBKeyRange.t ]
                    ->
                    ?count:float -> unit -> IDBValidKey.t list IDBRequest.t)
                =
                fun (x2389 : 'tags this) ->
                  fun
                    ?query:(x2382 :
                             [ `Null  | `U1 of IDBValidKey.t 
                             | `U2 of IDBKeyRange.t ] option)
                    ->
                    fun ?count:(x2383 : float option) ->
                      fun () ->
                        IDBRequest.t_of_js
                          (fun (x2392 : Ojs.t) ->
                             Ojs.list_of_js IDBValidKey.t_of_js x2392)
                          (let x2391 = this_to_js Obj.magic x2389 in
                           Ojs.call (Ojs.get_prop_ascii x2391 "getAllKeys")
                             "apply"
                             [|x2391;((let x2384 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       (match x2382 with
                                        | Some x2386 ->
                                            ignore
                                              (Ojs.call x2384 "push"
                                                 [|((match x2386 with
                                                     | `Null -> Ojs.null
                                                     | `U1 x2387 ->
                                                         IDBValidKey.t_to_js
                                                           x2387
                                                     | `U2 x2388 ->
                                                         IDBKeyRange.t_to_js
                                                           x2388))|])
                                        | None -> ());
                                       (match x2383 with
                                        | Some x2385 ->
                                            ignore
                                              (Ojs.call x2384 "push"
                                                 [|(Ojs.float_to_js x2385)|])
                                        | None -> ());
                                       x2384))|])
              let (getKey :
                'tags this ->
                  query:[ `U1 of IDBValidKey.t  | `U2 of IDBKeyRange.t ] ->
                    IDBValidKey.t option IDBRequest.t)
                =
                fun (x2397 : 'tags this) ->
                  fun
                    ~query:(x2394 :
                             [ `U1 of IDBValidKey.t  | `U2 of IDBKeyRange.t ])
                    ->
                    IDBRequest.t_of_js
                      (fun (x2399 : Ojs.t) ->
                         Ojs.option_of_js IDBValidKey.t_of_js x2399)
                      (Ojs.call (this_to_js Obj.magic x2397) "getKey"
                         [|((match x2394 with
                             | `U1 x2395 -> IDBValidKey.t_to_js x2395
                             | `U2 x2396 -> IDBKeyRange.t_to_js x2396))|])
              let (openCursor :
                'tags this ->
                  ?query:[ `Null  | `U1 of IDBValidKey.t 
                         | `U2 of IDBKeyRange.t ]
                    ->
                    ?direction:IDBCursorDirection.t ->
                      unit -> IDBCursorWithValue.t option IDBRequest.t)
                =
                fun (x2408 : 'tags this) ->
                  fun
                    ?query:(x2401 :
                             [ `Null  | `U1 of IDBValidKey.t 
                             | `U2 of IDBKeyRange.t ] option)
                    ->
                    fun ?direction:(x2402 : IDBCursorDirection.t option) ->
                      fun () ->
                        IDBRequest.t_of_js
                          (fun (x2411 : Ojs.t) ->
                             Ojs.option_of_js IDBCursorWithValue.t_of_js
                               x2411)
                          (let x2410 = this_to_js Obj.magic x2408 in
                           Ojs.call (Ojs.get_prop_ascii x2410 "openCursor")
                             "apply"
                             [|x2410;((let x2403 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       (match x2401 with
                                        | Some x2405 ->
                                            ignore
                                              (Ojs.call x2403 "push"
                                                 [|((match x2405 with
                                                     | `Null -> Ojs.null
                                                     | `U1 x2406 ->
                                                         IDBValidKey.t_to_js
                                                           x2406
                                                     | `U2 x2407 ->
                                                         IDBKeyRange.t_to_js
                                                           x2407))|])
                                        | None -> ());
                                       (match x2402 with
                                        | Some x2404 ->
                                            ignore
                                              (Ojs.call x2403 "push"
                                                 [|(IDBCursorDirection.t_to_js
                                                      x2404)|])
                                        | None -> ());
                                       x2403))|])
              let (openKeyCursor :
                'tags this ->
                  ?query:[ `Null  | `U1 of IDBValidKey.t 
                         | `U2 of IDBKeyRange.t ]
                    ->
                    ?direction:IDBCursorDirection.t ->
                      unit -> IDBCursor.t option IDBRequest.t)
                =
                fun (x2420 : 'tags this) ->
                  fun
                    ?query:(x2413 :
                             [ `Null  | `U1 of IDBValidKey.t 
                             | `U2 of IDBKeyRange.t ] option)
                    ->
                    fun ?direction:(x2414 : IDBCursorDirection.t option) ->
                      fun () ->
                        IDBRequest.t_of_js
                          (fun (x2423 : Ojs.t) ->
                             Ojs.option_of_js IDBCursor.t_of_js x2423)
                          (let x2422 = this_to_js Obj.magic x2420 in
                           Ojs.call
                             (Ojs.get_prop_ascii x2422 "openKeyCursor")
                             "apply"
                             [|x2422;((let x2415 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       (match x2413 with
                                        | Some x2417 ->
                                            ignore
                                              (Ojs.call x2415 "push"
                                                 [|((match x2417 with
                                                     | `Null -> Ojs.null
                                                     | `U1 x2418 ->
                                                         IDBValidKey.t_to_js
                                                           x2418
                                                     | `U2 x2419 ->
                                                         IDBKeyRange.t_to_js
                                                           x2419))|])
                                        | None -> ());
                                       (match x2414 with
                                        | Some x2416 ->
                                            ignore
                                              (Ojs.call x2415 "push"
                                                 [|(IDBCursorDirection.t_to_js
                                                      x2416)|])
                                        | None -> ());
                                       x2415))|])
              let cast_from = Obj.magic
              let (prototype : unit -> t) =
                fun () ->
                  t_of_js
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "IDBIndex") "prototype")
              let (create : unit -> t) =
                fun () ->
                  t_of_js
                    (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBIndex")
                       [||])
            end and
                 IDBObjectStore:sig
                                  type t = [ `IDBObjectStore ] intf
                                  type t_0 = t
                                  [@@@js.stop ]
                                  type tags = [ `IDBObjectStore ]
                                  type tags_0 = tags
                                  [@@@js.start ]
                                  [@@@js.implem
                                    type tags = [ `IDBObjectStore ]
                                    type tags_0 = tags]
                                  type 'tags this =
                                    'tags intf constraint 'tags =
                                                [> `IDBObjectStore ]
                                  val t_to_js : t -> Ojs.t
                                  val t_of_js : Ojs.t -> t
                                  val t_0_to_js : t_0 -> Ojs.t
                                  val t_0_of_js : Ojs.t -> t_0
                                  val get_autoIncrement : 'tags this -> bool
                                  val get_indexNames :
                                    'tags this -> DOMStringList.t
                                  val get_keyPath :
                                    'tags this ->
                                      [ `String of string 
                                      | `Other of string list ] Primitive.t
                                  val get_name : 'tags this -> string
                                  val set_name : 'tags this -> string -> unit
                                  val get_transaction :
                                    'tags this -> IDBTransaction.t
                                  val add :
                                    'tags this ->
                                      value:any ->
                                        ?key:IDBValidKey.t ->
                                          unit -> IDBValidKey.t IDBRequest.t
                                  val clear :
                                    'tags this -> undefined IDBRequest.t
                                  val count :
                                    'tags this ->
                                      ?query:[ `U1 of IDBValidKey.t 
                                             | `U2 of IDBKeyRange.t ]
                                        -> unit -> float IDBRequest.t
                                  val createIndex :
                                    'tags this ->
                                      name:string ->
                                        keyPath:[ `U1 of string 
                                                | `U2 of string list ]
                                          ->
                                          ?options:IDBIndexParameters.t ->
                                            unit -> IDBIndex.t
                                  val delete :
                                    'tags this ->
                                      query:[ `U1 of IDBValidKey.t 
                                            | `U2 of IDBKeyRange.t ]
                                        -> undefined IDBRequest.t
                                  val deleteIndex :
                                    'tags this -> name:string -> unit
                                  val get_ :
                                    'tags this ->
                                      query:[ `U1 of IDBValidKey.t 
                                            | `U2 of IDBKeyRange.t ]
                                        -> any IDBRequest.t
                                  val getAll :
                                    'tags this ->
                                      ?query:[ `Null  | `U1 of IDBValidKey.t 
                                             | `U2 of IDBKeyRange.t ]
                                        ->
                                        ?count:float ->
                                          unit -> any list IDBRequest.t
                                  val getAllKeys :
                                    'tags this ->
                                      ?query:[ `Null  | `U1 of IDBValidKey.t 
                                             | `U2 of IDBKeyRange.t ]
                                        ->
                                        ?count:float ->
                                          unit ->
                                            IDBValidKey.t list IDBRequest.t
                                  val getKey :
                                    'tags this ->
                                      query:[ `U1 of IDBValidKey.t 
                                            | `U2 of IDBKeyRange.t ]
                                        -> IDBValidKey.t option IDBRequest.t
                                  val index :
                                    'tags this -> name:string -> IDBIndex.t
                                  val openCursor :
                                    'tags this ->
                                      ?query:[ `Null  | `U1 of IDBValidKey.t 
                                             | `U2 of IDBKeyRange.t ]
                                        ->
                                        ?direction:IDBCursorDirection.t ->
                                          unit ->
                                            IDBCursorWithValue.t option
                                              IDBRequest.t
                                  val openKeyCursor :
                                    'tags this ->
                                      ?query:[ `Null  | `U1 of IDBValidKey.t 
                                             | `U2 of IDBKeyRange.t ]
                                        ->
                                        ?direction:IDBCursorDirection.t ->
                                          unit ->
                                            IDBCursor.t option IDBRequest.t
                                  val put :
                                    'tags this ->
                                      value:any ->
                                        ?key:IDBValidKey.t ->
                                          unit -> IDBValidKey.t IDBRequest.t
                                  val createIndex' :
                                    'tags this ->
                                      name:string ->
                                        keyPath:[ `U1 of string 
                                                | `U2 of string Iterable.t_1 ]
                                          ->
                                          ?options:IDBIndexParameters.t ->
                                            unit -> IDBIndex.t
                                  val cast_from : 'tags this -> t
                                  val prototype : unit -> t
                                  val create : unit -> t
                                end =
                 struct
                   type t = [ `IDBObjectStore ] intf
                   let rec t_of_js : Ojs.t -> t = Obj.magic
                   and t_to_js : t -> Ojs.t = Obj.magic
                   type t_0 = t
                   let rec t_0_of_js : Ojs.t -> t_0 =
                     fun (x2426 : Ojs.t) -> t_of_js x2426
                   and t_0_to_js : t_0 -> Ojs.t =
                     fun (x2425 : t) -> t_to_js x2425
                   type tags = [ `IDBObjectStore ]
                   type tags_0 = tags
                   type 'tags this =
                     'tags intf constraint 'tags = [> `IDBObjectStore ]
                   let rec this_of_js :
                     'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
                     fun (type __tags) ->
                       fun (__tags_of_js : Ojs.t -> __tags) ->
                         fun (x2429 : Ojs.t) -> intf_of_js __tags_of_js x2429
                   and this_to_js :
                     'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
                     fun (type __tags) ->
                       fun (__tags_to_js : __tags -> Ojs.t) ->
                         fun (x2427 : __tags intf) ->
                           intf_to_js __tags_to_js x2427
                   let (get_autoIncrement : 'tags this -> bool) =
                     fun (x2431 : 'tags this) ->
                       Ojs.bool_of_js
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x2431)
                            "autoIncrement")
                   let (get_indexNames : 'tags this -> DOMStringList.t) =
                     fun (x2433 : 'tags this) ->
                       DOMStringList.t_of_js
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x2433)
                            "indexNames")
                   let (get_keyPath :
                     'tags this ->
                       [ `String of string  | `Other of string list ]
                         Primitive.t)
                     =
                     fun (x2435 : 'tags this) ->
                       Primitive.t_of_js
                         (fun (x2437 : Ojs.t) ->
                            let x2438 = x2437 in
                            match Ojs.string_of_js
                                    (Ojs.get_prop_ascii x2438 "dummy")
                            with
                            | "String" -> `String (Ojs.string_of_js x2438)
                            | "Other" ->
                                `Other
                                  (Ojs.list_of_js Ojs.string_of_js x2438)
                            | _ -> assert false)
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x2435)
                            "keyPath")
                   let (get_name : 'tags this -> string) =
                     fun (x2440 : 'tags this) ->
                       Ojs.string_of_js
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x2440)
                            "name")
                   let (set_name : 'tags this -> string -> unit) =
                     fun (x2442 : 'tags this) ->
                       fun (x2443 : string) ->
                         Ojs.set_prop_ascii (this_to_js Obj.magic x2442)
                           "name" (Ojs.string_to_js x2443)
                   let (get_transaction : 'tags this -> IDBTransaction.t) =
                     fun (x2445 : 'tags this) ->
                       IDBTransaction.t_of_js
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x2445)
                            "transaction")
                   let (add :
                     'tags this ->
                       value:any ->
                         ?key:IDBValidKey.t ->
                           unit -> IDBValidKey.t IDBRequest.t)
                     =
                     fun (x2451 : 'tags this) ->
                       fun ~value:(x2447 : any) ->
                         fun ?key:(x2448 : IDBValidKey.t option) ->
                           fun () ->
                             IDBRequest.t_of_js IDBValidKey.t_of_js
                               (let x2453 = this_to_js Obj.magic x2451 in
                                Ojs.call (Ojs.get_prop_ascii x2453 "add")
                                  "apply"
                                  [|x2453;((let x2449 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            ignore
                                              (Ojs.call x2449 "push"
                                                 [|(any_to_js x2447)|]);
                                            (match x2448 with
                                             | Some x2450 ->
                                                 ignore
                                                   (Ojs.call x2449 "push"
                                                      [|(IDBValidKey.t_to_js
                                                           x2450)|])
                                             | None -> ());
                                            x2449))|])
                   let (clear : 'tags this -> undefined IDBRequest.t) =
                     fun (x2455 : 'tags this) ->
                       IDBRequest.t_of_js undefined_of_js
                         (Ojs.call (this_to_js Obj.magic x2455) "clear" [||])
                   let (count :
                     'tags this ->
                       ?query:[ `U1 of IDBValidKey.t 
                              | `U2 of IDBKeyRange.t ]
                         -> unit -> float IDBRequest.t)
                     =
                     fun (x2463 : 'tags this) ->
                       fun
                         ?query:(x2458 :
                                  [ `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ] option)
                         ->
                         fun () ->
                           IDBRequest.t_of_js Ojs.float_of_js
                             (let x2465 = this_to_js Obj.magic x2463 in
                              Ojs.call (Ojs.get_prop_ascii x2465 "count")
                                "apply"
                                [|x2465;((let x2459 =
                                            Ojs.new_obj
                                              (Ojs.get_prop_ascii Ojs.global
                                                 "Array") [||] in
                                          (match x2458 with
                                           | Some x2460 ->
                                               ignore
                                                 (Ojs.call x2459 "push"
                                                    [|((match x2460 with
                                                        | `U1 x2461 ->
                                                            IDBValidKey.t_to_js
                                                              x2461
                                                        | `U2 x2462 ->
                                                            IDBKeyRange.t_to_js
                                                              x2462))|])
                                           | None -> ());
                                          x2459))|])
                   let (createIndex :
                     'tags this ->
                       name:string ->
                         keyPath:[ `U1 of string  | `U2 of string list ] ->
                           ?options:IDBIndexParameters.t ->
                             unit -> IDBIndex.t)
                     =
                     fun (x2475 : 'tags this) ->
                       fun ~name:(x2467 : string) ->
                         fun
                           ~keyPath:(x2468 :
                                      [ `U1 of string  | `U2 of string list ])
                           ->
                           fun ?options:(x2469 : IDBIndexParameters.t option)
                             ->
                             fun () ->
                               IDBIndex.t_of_js
                                 (let x2477 = this_to_js Obj.magic x2475 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x2477 "createIndex")
                                    "apply"
                                    [|x2477;((let x2470 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x2470 "push"
                                                   [|(Ojs.string_to_js x2467)|]);
                                              ignore
                                                (Ojs.call x2470 "push"
                                                   [|((match x2468 with
                                                       | `U1 x2472 ->
                                                           Ojs.string_to_js
                                                             x2472
                                                       | `U2 x2473 ->
                                                           Ojs.list_to_js
                                                             Ojs.string_to_js
                                                             x2473))|]);
                                              (match x2469 with
                                               | Some x2471 ->
                                                   ignore
                                                     (Ojs.call x2470 "push"
                                                        [|(IDBIndexParameters.t_to_js
                                                             x2471)|])
                                               | None -> ());
                                              x2470))|])
                   let (delete :
                     'tags this ->
                       query:[ `U1 of IDBValidKey.t  | `U2 of IDBKeyRange.t ]
                         -> undefined IDBRequest.t)
                     =
                     fun (x2481 : 'tags this) ->
                       fun
                         ~query:(x2478 :
                                  [ `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ])
                         ->
                         IDBRequest.t_of_js undefined_of_js
                           (Ojs.call (this_to_js Obj.magic x2481) "delete"
                              [|((match x2478 with
                                  | `U1 x2479 -> IDBValidKey.t_to_js x2479
                                  | `U2 x2480 -> IDBKeyRange.t_to_js x2480))|])
                   let (deleteIndex : 'tags this -> name:string -> unit) =
                     fun (x2485 : 'tags this) ->
                       fun ~name:(x2484 : string) ->
                         ignore
                           (Ojs.call (this_to_js Obj.magic x2485)
                              "deleteIndex" [|(Ojs.string_to_js x2484)|])
                   let (get_ :
                     'tags this ->
                       query:[ `U1 of IDBValidKey.t  | `U2 of IDBKeyRange.t ]
                         -> any IDBRequest.t)
                     =
                     fun (x2490 : 'tags this) ->
                       fun
                         ~query:(x2487 :
                                  [ `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ])
                         ->
                         IDBRequest.t_of_js any_of_js
                           (Ojs.call (this_to_js Obj.magic x2490) "get"
                              [|((match x2487 with
                                  | `U1 x2488 -> IDBValidKey.t_to_js x2488
                                  | `U2 x2489 -> IDBKeyRange.t_to_js x2489))|])
                   let (getAll :
                     'tags this ->
                       ?query:[ `Null  | `U1 of IDBValidKey.t 
                              | `U2 of IDBKeyRange.t ]
                         -> ?count:float -> unit -> any list IDBRequest.t)
                     =
                     fun (x2500 : 'tags this) ->
                       fun
                         ?query:(x2493 :
                                  [ `Null  | `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ] option)
                         ->
                         fun ?count:(x2494 : float option) ->
                           fun () ->
                             IDBRequest.t_of_js
                               (fun (x2503 : Ojs.t) ->
                                  Ojs.list_of_js any_of_js x2503)
                               (let x2502 = this_to_js Obj.magic x2500 in
                                Ojs.call (Ojs.get_prop_ascii x2502 "getAll")
                                  "apply"
                                  [|x2502;((let x2495 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            (match x2493 with
                                             | Some x2497 ->
                                                 ignore
                                                   (Ojs.call x2495 "push"
                                                      [|((match x2497 with
                                                          | `Null -> Ojs.null
                                                          | `U1 x2498 ->
                                                              IDBValidKey.t_to_js
                                                                x2498
                                                          | `U2 x2499 ->
                                                              IDBKeyRange.t_to_js
                                                                x2499))|])
                                             | None -> ());
                                            (match x2494 with
                                             | Some x2496 ->
                                                 ignore
                                                   (Ojs.call x2495 "push"
                                                      [|(Ojs.float_to_js
                                                           x2496)|])
                                             | None -> ());
                                            x2495))|])
                   let (getAllKeys :
                     'tags this ->
                       ?query:[ `Null  | `U1 of IDBValidKey.t 
                              | `U2 of IDBKeyRange.t ]
                         ->
                         ?count:float ->
                           unit -> IDBValidKey.t list IDBRequest.t)
                     =
                     fun (x2512 : 'tags this) ->
                       fun
                         ?query:(x2505 :
                                  [ `Null  | `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ] option)
                         ->
                         fun ?count:(x2506 : float option) ->
                           fun () ->
                             IDBRequest.t_of_js
                               (fun (x2515 : Ojs.t) ->
                                  Ojs.list_of_js IDBValidKey.t_of_js x2515)
                               (let x2514 = this_to_js Obj.magic x2512 in
                                Ojs.call
                                  (Ojs.get_prop_ascii x2514 "getAllKeys")
                                  "apply"
                                  [|x2514;((let x2507 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            (match x2505 with
                                             | Some x2509 ->
                                                 ignore
                                                   (Ojs.call x2507 "push"
                                                      [|((match x2509 with
                                                          | `Null -> Ojs.null
                                                          | `U1 x2510 ->
                                                              IDBValidKey.t_to_js
                                                                x2510
                                                          | `U2 x2511 ->
                                                              IDBKeyRange.t_to_js
                                                                x2511))|])
                                             | None -> ());
                                            (match x2506 with
                                             | Some x2508 ->
                                                 ignore
                                                   (Ojs.call x2507 "push"
                                                      [|(Ojs.float_to_js
                                                           x2508)|])
                                             | None -> ());
                                            x2507))|])
                   let (getKey :
                     'tags this ->
                       query:[ `U1 of IDBValidKey.t  | `U2 of IDBKeyRange.t ]
                         -> IDBValidKey.t option IDBRequest.t)
                     =
                     fun (x2520 : 'tags this) ->
                       fun
                         ~query:(x2517 :
                                  [ `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ])
                         ->
                         IDBRequest.t_of_js
                           (fun (x2522 : Ojs.t) ->
                              Ojs.option_of_js IDBValidKey.t_of_js x2522)
                           (Ojs.call (this_to_js Obj.magic x2520) "getKey"
                              [|((match x2517 with
                                  | `U1 x2518 -> IDBValidKey.t_to_js x2518
                                  | `U2 x2519 -> IDBKeyRange.t_to_js x2519))|])
                   let (index : 'tags this -> name:string -> IDBIndex.t) =
                     fun (x2525 : 'tags this) ->
                       fun ~name:(x2524 : string) ->
                         IDBIndex.t_of_js
                           (Ojs.call (this_to_js Obj.magic x2525) "index"
                              [|(Ojs.string_to_js x2524)|])
                   let (openCursor :
                     'tags this ->
                       ?query:[ `Null  | `U1 of IDBValidKey.t 
                              | `U2 of IDBKeyRange.t ]
                         ->
                         ?direction:IDBCursorDirection.t ->
                           unit -> IDBCursorWithValue.t option IDBRequest.t)
                     =
                     fun (x2534 : 'tags this) ->
                       fun
                         ?query:(x2527 :
                                  [ `Null  | `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ] option)
                         ->
                         fun ?direction:(x2528 : IDBCursorDirection.t option)
                           ->
                           fun () ->
                             IDBRequest.t_of_js
                               (fun (x2537 : Ojs.t) ->
                                  Ojs.option_of_js IDBCursorWithValue.t_of_js
                                    x2537)
                               (let x2536 = this_to_js Obj.magic x2534 in
                                Ojs.call
                                  (Ojs.get_prop_ascii x2536 "openCursor")
                                  "apply"
                                  [|x2536;((let x2529 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            (match x2527 with
                                             | Some x2531 ->
                                                 ignore
                                                   (Ojs.call x2529 "push"
                                                      [|((match x2531 with
                                                          | `Null -> Ojs.null
                                                          | `U1 x2532 ->
                                                              IDBValidKey.t_to_js
                                                                x2532
                                                          | `U2 x2533 ->
                                                              IDBKeyRange.t_to_js
                                                                x2533))|])
                                             | None -> ());
                                            (match x2528 with
                                             | Some x2530 ->
                                                 ignore
                                                   (Ojs.call x2529 "push"
                                                      [|(IDBCursorDirection.t_to_js
                                                           x2530)|])
                                             | None -> ());
                                            x2529))|])
                   let (openKeyCursor :
                     'tags this ->
                       ?query:[ `Null  | `U1 of IDBValidKey.t 
                              | `U2 of IDBKeyRange.t ]
                         ->
                         ?direction:IDBCursorDirection.t ->
                           unit -> IDBCursor.t option IDBRequest.t)
                     =
                     fun (x2546 : 'tags this) ->
                       fun
                         ?query:(x2539 :
                                  [ `Null  | `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ] option)
                         ->
                         fun ?direction:(x2540 : IDBCursorDirection.t option)
                           ->
                           fun () ->
                             IDBRequest.t_of_js
                               (fun (x2549 : Ojs.t) ->
                                  Ojs.option_of_js IDBCursor.t_of_js x2549)
                               (let x2548 = this_to_js Obj.magic x2546 in
                                Ojs.call
                                  (Ojs.get_prop_ascii x2548 "openKeyCursor")
                                  "apply"
                                  [|x2548;((let x2541 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            (match x2539 with
                                             | Some x2543 ->
                                                 ignore
                                                   (Ojs.call x2541 "push"
                                                      [|((match x2543 with
                                                          | `Null -> Ojs.null
                                                          | `U1 x2544 ->
                                                              IDBValidKey.t_to_js
                                                                x2544
                                                          | `U2 x2545 ->
                                                              IDBKeyRange.t_to_js
                                                                x2545))|])
                                             | None -> ());
                                            (match x2540 with
                                             | Some x2542 ->
                                                 ignore
                                                   (Ojs.call x2541 "push"
                                                      [|(IDBCursorDirection.t_to_js
                                                           x2542)|])
                                             | None -> ());
                                            x2541))|])
                   let (put :
                     'tags this ->
                       value:any ->
                         ?key:IDBValidKey.t ->
                           unit -> IDBValidKey.t IDBRequest.t)
                     =
                     fun (x2555 : 'tags this) ->
                       fun ~value:(x2551 : any) ->
                         fun ?key:(x2552 : IDBValidKey.t option) ->
                           fun () ->
                             IDBRequest.t_of_js IDBValidKey.t_of_js
                               (let x2557 = this_to_js Obj.magic x2555 in
                                Ojs.call (Ojs.get_prop_ascii x2557 "put")
                                  "apply"
                                  [|x2557;((let x2553 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            ignore
                                              (Ojs.call x2553 "push"
                                                 [|(any_to_js x2551)|]);
                                            (match x2552 with
                                             | Some x2554 ->
                                                 ignore
                                                   (Ojs.call x2553 "push"
                                                      [|(IDBValidKey.t_to_js
                                                           x2554)|])
                                             | None -> ());
                                            x2553))|])
                   let (createIndex' :
                     'tags this ->
                       name:string ->
                         keyPath:[ `U1 of string 
                                 | `U2 of string Iterable.t_1 ]
                           ->
                           ?options:IDBIndexParameters.t ->
                             unit -> IDBIndex.t)
                     =
                     fun (x2567 : 'tags this) ->
                       fun ~name:(x2559 : string) ->
                         fun
                           ~keyPath:(x2560 :
                                      [ `U1 of string 
                                      | `U2 of string Iterable.t_1 ])
                           ->
                           fun ?options:(x2561 : IDBIndexParameters.t option)
                             ->
                             fun () ->
                               IDBIndex.t_of_js
                                 (let x2569 = this_to_js Obj.magic x2567 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x2569 "createIndex")
                                    "apply"
                                    [|x2569;((let x2562 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x2562 "push"
                                                   [|(Ojs.string_to_js x2559)|]);
                                              ignore
                                                (Ojs.call x2562 "push"
                                                   [|((match x2560 with
                                                       | `U1 x2564 ->
                                                           Ojs.string_to_js
                                                             x2564
                                                       | `U2 x2565 ->
                                                           Iterable.t_1_to_js
                                                             Ojs.string_to_js
                                                             x2565))|]);
                                              (match x2561 with
                                               | Some x2563 ->
                                                   ignore
                                                     (Ojs.call x2562 "push"
                                                        [|(IDBIndexParameters.t_to_js
                                                             x2563)|])
                                               | None -> ());
                                              x2562))|])
                   let cast_from = Obj.magic
                   let (prototype : unit -> t) =
                     fun () ->
                       t_of_js
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global "IDBObjectStore")
                            "prototype")
                   let (create : unit -> t) =
                     fun () ->
                       t_of_js
                         (Ojs.new_obj
                            (Ojs.get_prop_ascii Ojs.global "IDBObjectStore")
                            [||])
                 end and
                      IDBRequest:sig
                                   type 'T t =
                                     [ `EventTarget  | `IDBRequest of 'T ]
                                       intf
                                   type 'T t_1 = 'T t
                                   type t_0 = any t
                                   [@@@js.stop ]
                                   type 'T tags =
                                     [ `EventTarget  | `IDBRequest of 'T ]
                                   type 'T tags_1 = 'T tags
                                   type tags_0 = any tags
                                   [@@@js.start ]
                                   [@@@js.implem
                                     type 'T tags =
                                       [ `EventTarget  | `IDBRequest of 'T ]
                                     type 'T tags_1 = 'T tags
                                     type tags_0 = any tags]
                                   type ('tags, 'T) this =
                                     'tags intf constraint 'tags =
                                                 [> `IDBRequest of 'T ]
                                   val t_to_js :
                                     ('T -> Ojs.t) -> 'T t -> Ojs.t
                                   val t_of_js :
                                     (Ojs.t -> 'T) -> Ojs.t -> 'T t
                                   val t_1_to_js :
                                     ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
                                   val t_1_of_js :
                                     (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
                                   val t_0_to_js : t_0 -> Ojs.t
                                   val t_0_of_js : Ojs.t -> t_0
                                   val get_error :
                                     ('tags, 'T) this ->
                                       DOMException.t option
                                   val get_onerror :
                                     ('tags, 'T) this ->
                                       (this:'T t -> ev:Event.t -> any)
                                         option
                                   val set_onerror :
                                     ('tags, 'T) this ->
                                       (this:'T t -> ev:Event.t -> any)
                                         option -> unit
                                   val get_onsuccess :
                                     ('tags, 'T) this ->
                                       (this:'T t -> ev:Event.t -> any)
                                         option
                                   val set_onsuccess :
                                     ('tags, 'T) this ->
                                       (this:'T t -> ev:Event.t -> any)
                                         option -> unit
                                   val get_readyState :
                                     ('tags, 'T) this ->
                                       IDBRequestReadyState.t
                                   val get_result : ('tags, 'T) this -> 'T
                                   val get_source :
                                     ('tags, 'T) this ->
                                       (IDBCursor.t, IDBIndex.t,
                                         IDBObjectStore.t) union3
                                   val get_transaction :
                                     ('tags, 'T) this ->
                                       IDBTransaction.t option
                                   val addEventListener :
                                     ('tags, 'T) this ->
                                       type_:'K ->
                                         listener:(this:'T t -> ev:any -> any)
                                           ->
                                           ?options:[ `U1 of bool 
                                                    | `U2 of
                                                        AddEventListenerOptions.t
                                                        ]
                                             -> unit -> unit
                                   val addEventListener' :
                                     ('tags, 'T) this ->
                                       type_:string ->
                                         listener:EventListenerOrEventListenerObject.t
                                           ->
                                           ?options:[ `U1 of bool 
                                                    | `U2 of
                                                        AddEventListenerOptions.t
                                                        ]
                                             -> unit -> unit
                                   val removeEventListener :
                                     ('tags, 'T) this ->
                                       type_:'K ->
                                         listener:(this:'T t -> ev:any -> any)
                                           ->
                                           ?options:[ `U1 of bool 
                                                    | `U2 of
                                                        EventListenerOptions.t
                                                        ]
                                             -> unit -> unit
                                   val removeEventListener' :
                                     ('tags, 'T) this ->
                                       type_:string ->
                                         listener:EventListenerOrEventListenerObject.t
                                           ->
                                           ?options:[ `U1 of bool 
                                                    | `U2 of
                                                        EventListenerOptions.t
                                                        ]
                                             -> unit -> unit
                                   val cast_from : ('tags, 'T) this -> 'T t
                                   val prototype : unit -> t_0
                                   val create : unit -> t_0
                                 end =
                      struct
                        type 'T t =
                          [ `EventTarget  | `IDBRequest of 'T ] intf
                        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t
                          = fun _T -> Obj.magic
                        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t =
                          fun _T -> Obj.magic
                        type 'T t_1 = 'T t
                        let rec t_1_of_js :
                          'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
                          fun (type __T) ->
                            fun (__T_of_js : Ojs.t -> __T) ->
                              fun (x2572 : Ojs.t) -> t_of_js __T_of_js x2572
                        and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
                          =
                          fun (type __T) ->
                            fun (__T_to_js : __T -> Ojs.t) ->
                              fun (x2570 : __T t) -> t_to_js __T_to_js x2570
                        type t_0 = any t
                        let rec t_0_of_js : Ojs.t -> t_0 =
                          fun (x2576 : Ojs.t) -> t_of_js any_of_js x2576
                        and t_0_to_js : t_0 -> Ojs.t =
                          fun (x2574 : any t) -> t_to_js any_to_js x2574
                        type 'T tags = [ `EventTarget  | `IDBRequest of 'T ]
                        type 'T tags_1 = 'T tags
                        type tags_0 = any tags
                        type ('tags, 'T) this =
                          'tags intf constraint 'tags =
                                      [> `IDBRequest of 'T ]
                        let rec this_of_js :
                          'tags 'T .
                            (Ojs.t -> 'tags) ->
                              (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
                          =
                          fun (type __tags) ->
                            fun (type __T) ->
                              fun (__tags_of_js : Ojs.t -> __tags) ->
                                fun (__T_of_js : Ojs.t -> __T) ->
                                  fun (x2580 : Ojs.t) ->
                                    intf_of_js __tags_of_js x2580
                        and this_to_js :
                          'tags 'T .
                            ('tags -> Ojs.t) ->
                              ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
                          =
                          fun (type __tags) ->
                            fun (type __T) ->
                              fun (__tags_to_js : __tags -> Ojs.t) ->
                                fun (__T_to_js : __T -> Ojs.t) ->
                                  fun (x2578 : __tags intf) ->
                                    intf_to_js __tags_to_js x2578
                        let (get_error :
                          ('tags, 'T) this -> DOMException.t option) =
                          fun (x2582 : ('tags, 'T) this) ->
                            Ojs.option_of_js DOMException.t_of_js
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x2582)
                                 "error")
                        let (get_onerror :
                          ('tags, 'T) this ->
                            (this:'T t -> ev:Event.t -> any) option)
                          =
                          fun (x2586 : ('tags, 'T) this) ->
                            Ojs.option_of_js
                              (fun (x2589 : Ojs.t) ->
                                 fun ~this:(x2590 : 'T t) ->
                                   fun ~ev:(x2592 : Event.t) ->
                                     any_of_js
                                       (Ojs.apply x2589
                                          [|(t_to_js Obj.magic x2590);(
                                            Event.t_to_js x2592)|]))
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x2586)
                                 "onerror")
                        let (set_onerror :
                          ('tags, 'T) this ->
                            (this:'T t -> ev:Event.t -> any) option -> unit)
                          =
                          fun (x2593 : ('tags, 'T) this) ->
                            fun
                              (x2594 :
                                (this:'T t -> ev:Event.t -> any) option)
                              ->
                              Ojs.set_prop_ascii
                                (this_to_js Obj.magic Obj.magic x2593)
                                "onerror"
                                (Ojs.option_to_js
                                   (fun
                                      (x2595 :
                                        this:'T t -> ev:Event.t -> any)
                                      ->
                                      Ojs.fun_to_js 2
                                        (fun (x2596 : Ojs.t) ->
                                           fun (x2598 : Ojs.t) ->
                                             any_to_js
                                               (x2595
                                                  ~this:(t_of_js Obj.magic
                                                           x2596)
                                                  ~ev:(Event.t_of_js x2598))))
                                   x2594)
                        let (get_onsuccess :
                          ('tags, 'T) this ->
                            (this:'T t -> ev:Event.t -> any) option)
                          =
                          fun (x2601 : ('tags, 'T) this) ->
                            Ojs.option_of_js
                              (fun (x2604 : Ojs.t) ->
                                 fun ~this:(x2605 : 'T t) ->
                                   fun ~ev:(x2607 : Event.t) ->
                                     any_of_js
                                       (Ojs.apply x2604
                                          [|(t_to_js Obj.magic x2605);(
                                            Event.t_to_js x2607)|]))
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x2601)
                                 "onsuccess")
                        let (set_onsuccess :
                          ('tags, 'T) this ->
                            (this:'T t -> ev:Event.t -> any) option -> unit)
                          =
                          fun (x2608 : ('tags, 'T) this) ->
                            fun
                              (x2609 :
                                (this:'T t -> ev:Event.t -> any) option)
                              ->
                              Ojs.set_prop_ascii
                                (this_to_js Obj.magic Obj.magic x2608)
                                "onsuccess"
                                (Ojs.option_to_js
                                   (fun
                                      (x2610 :
                                        this:'T t -> ev:Event.t -> any)
                                      ->
                                      Ojs.fun_to_js 2
                                        (fun (x2611 : Ojs.t) ->
                                           fun (x2613 : Ojs.t) ->
                                             any_to_js
                                               (x2610
                                                  ~this:(t_of_js Obj.magic
                                                           x2611)
                                                  ~ev:(Event.t_of_js x2613))))
                                   x2609)
                        let (get_readyState :
                          ('tags, 'T) this -> IDBRequestReadyState.t) =
                          fun (x2616 : ('tags, 'T) this) ->
                            IDBRequestReadyState.t_of_js
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x2616)
                                 "readyState")
                        let (get_result : ('tags, 'T) this -> 'T) =
                          fun (x2619 : ('tags, 'T) this) ->
                            Obj.magic
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x2619)
                                 "result")
                        let (get_source :
                          ('tags, 'T) this ->
                            (IDBCursor.t, IDBIndex.t, IDBObjectStore.t)
                              union3)
                          =
                          fun (x2622 : ('tags, 'T) this) ->
                            union3_of_js IDBCursor.t_of_js IDBIndex.t_of_js
                              IDBObjectStore.t_of_js
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x2622)
                                 "source")
                        let (get_transaction :
                          ('tags, 'T) this -> IDBTransaction.t option) =
                          fun (x2628 : ('tags, 'T) this) ->
                            Ojs.option_of_js IDBTransaction.t_of_js
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x2628)
                                 "transaction")
                        let (addEventListener :
                          ('tags, 'T) this ->
                            type_:'K ->
                              listener:(this:'T t -> ev:any -> any) ->
                                ?options:[ `U1 of bool 
                                         | `U2 of AddEventListenerOptions.t ]
                                  -> unit -> unit)
                          =
                          fun (x2642 : ('tags, 'T) this) ->
                            fun ~type_:(x2632 : 'K) ->
                              fun
                                ~listener:(x2633 :
                                            this:'T t -> ev:any -> any)
                                ->
                                fun
                                  ?options:(x2634 :
                                             [ `U1 of bool 
                                             | `U2 of
                                                 AddEventListenerOptions.t ]
                                               option)
                                  ->
                                  fun () ->
                                    ignore
                                      (let x2645 =
                                         this_to_js Obj.magic Obj.magic x2642 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x2645
                                            "addEventListener") "apply"
                                         [|x2645;((let x2635 =
                                                     Ojs.new_obj
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global "Array")
                                                       [||] in
                                                   ignore
                                                     (Ojs.call x2635 "push"
                                                        [|(Obj.magic x2632)|]);
                                                   ignore
                                                     (Ojs.call x2635 "push"
                                                        [|(Ojs.fun_to_js 2
                                                             (fun
                                                                (x2639 :
                                                                  Ojs.t)
                                                                ->
                                                                fun
                                                                  (x2641 :
                                                                    Ojs.t)
                                                                  ->
                                                                  any_to_js
                                                                    (
                                                                    x2633
                                                                    ~this:(
                                                                    t_of_js
                                                                    Obj.magic
                                                                    x2639)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x2641))))|]);
                                                   (match x2634 with
                                                    | Some x2636 ->
                                                        ignore
                                                          (Ojs.call x2635
                                                             "push"
                                                             [|((match x2636
                                                                 with
                                                                 | `U1 x2637
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x2637
                                                                 | `U2 x2638
                                                                    ->
                                                                    AddEventListenerOptions.t_to_js
                                                                    x2638))|])
                                                    | None -> ());
                                                   x2635))|])
                        let (addEventListener' :
                          ('tags, 'T) this ->
                            type_:string ->
                              listener:EventListenerOrEventListenerObject.t
                                ->
                                ?options:[ `U1 of bool 
                                         | `U2 of AddEventListenerOptions.t ]
                                  -> unit -> unit)
                          =
                          fun (x2653 : ('tags, 'T) this) ->
                            fun ~type_:(x2646 : string) ->
                              fun
                                ~listener:(x2647 :
                                            EventListenerOrEventListenerObject.t)
                                ->
                                fun
                                  ?options:(x2648 :
                                             [ `U1 of bool 
                                             | `U2 of
                                                 AddEventListenerOptions.t ]
                                               option)
                                  ->
                                  fun () ->
                                    ignore
                                      (let x2656 =
                                         this_to_js Obj.magic Obj.magic x2653 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x2656
                                            "addEventListener") "apply"
                                         [|x2656;((let x2649 =
                                                     Ojs.new_obj
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global "Array")
                                                       [||] in
                                                   ignore
                                                     (Ojs.call x2649 "push"
                                                        [|(Ojs.string_to_js
                                                             x2646)|]);
                                                   ignore
                                                     (Ojs.call x2649 "push"
                                                        [|(EventListenerOrEventListenerObject.t_to_js
                                                             x2647)|]);
                                                   (match x2648 with
                                                    | Some x2650 ->
                                                        ignore
                                                          (Ojs.call x2649
                                                             "push"
                                                             [|((match x2650
                                                                 with
                                                                 | `U1 x2651
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x2651
                                                                 | `U2 x2652
                                                                    ->
                                                                    AddEventListenerOptions.t_to_js
                                                                    x2652))|])
                                                    | None -> ());
                                                   x2649))|])
                        let (removeEventListener :
                          ('tags, 'T) this ->
                            type_:'K ->
                              listener:(this:'T t -> ev:any -> any) ->
                                ?options:[ `U1 of bool 
                                         | `U2 of EventListenerOptions.t ]
                                  -> unit -> unit)
                          =
                          fun (x2667 : ('tags, 'T) this) ->
                            fun ~type_:(x2657 : 'K) ->
                              fun
                                ~listener:(x2658 :
                                            this:'T t -> ev:any -> any)
                                ->
                                fun
                                  ?options:(x2659 :
                                             [ `U1 of bool 
                                             | `U2 of EventListenerOptions.t ]
                                               option)
                                  ->
                                  fun () ->
                                    ignore
                                      (let x2670 =
                                         this_to_js Obj.magic Obj.magic x2667 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x2670
                                            "removeEventListener") "apply"
                                         [|x2670;((let x2660 =
                                                     Ojs.new_obj
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global "Array")
                                                       [||] in
                                                   ignore
                                                     (Ojs.call x2660 "push"
                                                        [|(Obj.magic x2657)|]);
                                                   ignore
                                                     (Ojs.call x2660 "push"
                                                        [|(Ojs.fun_to_js 2
                                                             (fun
                                                                (x2664 :
                                                                  Ojs.t)
                                                                ->
                                                                fun
                                                                  (x2666 :
                                                                    Ojs.t)
                                                                  ->
                                                                  any_to_js
                                                                    (
                                                                    x2658
                                                                    ~this:(
                                                                    t_of_js
                                                                    Obj.magic
                                                                    x2664)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x2666))))|]);
                                                   (match x2659 with
                                                    | Some x2661 ->
                                                        ignore
                                                          (Ojs.call x2660
                                                             "push"
                                                             [|((match x2661
                                                                 with
                                                                 | `U1 x2662
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x2662
                                                                 | `U2 x2663
                                                                    ->
                                                                    EventListenerOptions.t_to_js
                                                                    x2663))|])
                                                    | None -> ());
                                                   x2660))|])
                        let (removeEventListener' :
                          ('tags, 'T) this ->
                            type_:string ->
                              listener:EventListenerOrEventListenerObject.t
                                ->
                                ?options:[ `U1 of bool 
                                         | `U2 of EventListenerOptions.t ]
                                  -> unit -> unit)
                          =
                          fun (x2678 : ('tags, 'T) this) ->
                            fun ~type_:(x2671 : string) ->
                              fun
                                ~listener:(x2672 :
                                            EventListenerOrEventListenerObject.t)
                                ->
                                fun
                                  ?options:(x2673 :
                                             [ `U1 of bool 
                                             | `U2 of EventListenerOptions.t ]
                                               option)
                                  ->
                                  fun () ->
                                    ignore
                                      (let x2681 =
                                         this_to_js Obj.magic Obj.magic x2678 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x2681
                                            "removeEventListener") "apply"
                                         [|x2681;((let x2674 =
                                                     Ojs.new_obj
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global "Array")
                                                       [||] in
                                                   ignore
                                                     (Ojs.call x2674 "push"
                                                        [|(Ojs.string_to_js
                                                             x2671)|]);
                                                   ignore
                                                     (Ojs.call x2674 "push"
                                                        [|(EventListenerOrEventListenerObject.t_to_js
                                                             x2672)|]);
                                                   (match x2673 with
                                                    | Some x2675 ->
                                                        ignore
                                                          (Ojs.call x2674
                                                             "push"
                                                             [|((match x2675
                                                                 with
                                                                 | `U1 x2676
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x2676
                                                                 | `U2 x2677
                                                                    ->
                                                                    EventListenerOptions.t_to_js
                                                                    x2677))|])
                                                    | None -> ());
                                                   x2674))|])
                        let cast_from = Obj.magic
                        let (prototype : unit -> t_0) =
                          fun () ->
                            t_0_of_js
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global "IDBRequest")
                                 "prototype")
                        let (create : unit -> t_0) =
                          fun () ->
                            t_0_of_js
                              (Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "IDBRequest")
                                 [||])
                      end and
                           IDBTransaction:sig
                                            type t =
                                              [ `EventTarget 
                                              | `IDBTransaction ] intf
                                            type t_0 = t
                                            [@@@js.stop ]
                                            type tags =
                                              [ `EventTarget 
                                              | `IDBTransaction ]
                                            type tags_0 = tags
                                            [@@@js.start ]
                                            [@@@js.implem
                                              type tags =
                                                [ `EventTarget 
                                                | `IDBTransaction ]
                                              type tags_0 = tags]
                                            type 'tags this =
                                              'tags intf constraint 'tags =
                                                          [>
                                                            `IDBTransaction ]
                                            val t_to_js : t -> Ojs.t
                                            val t_of_js : Ojs.t -> t
                                            val t_0_to_js : t_0 -> Ojs.t
                                            val t_0_of_js : Ojs.t -> t_0
                                            val get_db :
                                              'tags this -> IDBDatabase.t
                                            val get_durability :
                                              'tags this ->
                                                IDBTransactionDurability.t
                                            val get_error :
                                              'tags this ->
                                                DOMException.t option
                                            val get_mode :
                                              'tags this ->
                                                IDBTransactionMode.t
                                            val get_objectStoreNames :
                                              'tags this -> DOMStringList.t
                                            val get_onabort :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  option
                                            val set_onabort :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  option -> unit
                                            val get_oncomplete :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  option
                                            val set_oncomplete :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  option -> unit
                                            val get_onerror :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  option
                                            val set_onerror :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  option -> unit
                                            val abort : 'tags this -> unit
                                            val commit : 'tags this -> unit
                                            val objectStore :
                                              'tags this ->
                                                name:string ->
                                                  IDBObjectStore.t
                                            val addEventListener :
                                              'tags this ->
                                                type_:'K ->
                                                  listener:(this:t ->
                                                              ev:any -> any)
                                                    ->
                                                    ?options:[ `U1 of bool 
                                                             | `U2 of
                                                                 AddEventListenerOptions.t
                                                                 ]
                                                      -> unit -> unit
                                            val addEventListener' :
                                              'tags this ->
                                                type_:string ->
                                                  listener:EventListenerOrEventListenerObject.t
                                                    ->
                                                    ?options:[ `U1 of bool 
                                                             | `U2 of
                                                                 AddEventListenerOptions.t
                                                                 ]
                                                      -> unit -> unit
                                            val removeEventListener :
                                              'tags this ->
                                                type_:'K ->
                                                  listener:(this:t ->
                                                              ev:any -> any)
                                                    ->
                                                    ?options:[ `U1 of bool 
                                                             | `U2 of
                                                                 EventListenerOptions.t
                                                                 ]
                                                      -> unit -> unit
                                            val removeEventListener' :
                                              'tags this ->
                                                type_:string ->
                                                  listener:EventListenerOrEventListenerObject.t
                                                    ->
                                                    ?options:[ `U1 of bool 
                                                             | `U2 of
                                                                 EventListenerOptions.t
                                                                 ]
                                                      -> unit -> unit
                                            val cast_from : 'tags this -> t
                                            val prototype : unit -> t
                                            val create : unit -> t
                                          end =
                           struct
                             type t =
                               [ `EventTarget  | `IDBTransaction ] intf
                             let rec t_of_js : Ojs.t -> t = Obj.magic
                             and t_to_js : t -> Ojs.t = Obj.magic
                             type t_0 = t
                             let rec t_0_of_js : Ojs.t -> t_0 =
                               fun (x2683 : Ojs.t) -> t_of_js x2683
                             and t_0_to_js : t_0 -> Ojs.t =
                               fun (x2682 : t) -> t_to_js x2682
                             type tags = [ `EventTarget  | `IDBTransaction ]
                             type tags_0 = tags
                             type 'tags this =
                               'tags intf constraint 'tags =
                                           [> `IDBTransaction ]
                             let rec this_of_js :
                               'tags .
                                 (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
                               =
                               fun (type __tags) ->
                                 fun (__tags_of_js : Ojs.t -> __tags) ->
                                   fun (x2686 : Ojs.t) ->
                                     intf_of_js __tags_of_js x2686
                             and this_to_js :
                               'tags .
                                 ('tags -> Ojs.t) -> 'tags this -> Ojs.t
                               =
                               fun (type __tags) ->
                                 fun (__tags_to_js : __tags -> Ojs.t) ->
                                   fun (x2684 : __tags intf) ->
                                     intf_to_js __tags_to_js x2684
                             let (get_db : 'tags this -> IDBDatabase.t) =
                               fun (x2688 : 'tags this) ->
                                 IDBDatabase.t_of_js
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x2688) "db")
                             let (get_durability :
                               'tags this -> IDBTransactionDurability.t) =
                               fun (x2690 : 'tags this) ->
                                 IDBTransactionDurability.t_of_js
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x2690)
                                      "durability")
                             let (get_error :
                               'tags this -> DOMException.t option) =
                               fun (x2692 : 'tags this) ->
                                 Ojs.option_of_js DOMException.t_of_js
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x2692) "error")
                             let (get_mode :
                               'tags this -> IDBTransactionMode.t) =
                               fun (x2695 : 'tags this) ->
                                 IDBTransactionMode.t_of_js
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x2695) "mode")
                             let (get_objectStoreNames :
                               'tags this -> DOMStringList.t) =
                               fun (x2697 : 'tags this) ->
                                 DOMStringList.t_of_js
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x2697)
                                      "objectStoreNames")
                             let (get_onabort :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) option)
                               =
                               fun (x2699 : 'tags this) ->
                                 Ojs.option_of_js
                                   (fun (x2701 : Ojs.t) ->
                                      fun ~this:(x2702 : t) ->
                                        fun ~ev:(x2703 : Event.t) ->
                                          any_of_js
                                            (Ojs.apply x2701
                                               [|(t_to_js x2702);(Event.t_to_js
                                                                    x2703)|]))
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x2699) "onabort")
                             let (set_onabort :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) option -> unit)
                               =
                               fun (x2704 : 'tags this) ->
                                 fun
                                   (x2705 :
                                     (this:t -> ev:Event.t -> any) option)
                                   ->
                                   Ojs.set_prop_ascii
                                     (this_to_js Obj.magic x2704) "onabort"
                                     (Ojs.option_to_js
                                        (fun
                                           (x2706 :
                                             this:t -> ev:Event.t -> any)
                                           ->
                                           Ojs.fun_to_js 2
                                             (fun (x2707 : Ojs.t) ->
                                                fun (x2708 : Ojs.t) ->
                                                  any_to_js
                                                    (x2706
                                                       ~this:(t_of_js x2707)
                                                       ~ev:(Event.t_of_js
                                                              x2708)))) x2705)
                             let (get_oncomplete :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) option)
                               =
                               fun (x2710 : 'tags this) ->
                                 Ojs.option_of_js
                                   (fun (x2712 : Ojs.t) ->
                                      fun ~this:(x2713 : t) ->
                                        fun ~ev:(x2714 : Event.t) ->
                                          any_of_js
                                            (Ojs.apply x2712
                                               [|(t_to_js x2713);(Event.t_to_js
                                                                    x2714)|]))
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x2710)
                                      "oncomplete")
                             let (set_oncomplete :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) option -> unit)
                               =
                               fun (x2715 : 'tags this) ->
                                 fun
                                   (x2716 :
                                     (this:t -> ev:Event.t -> any) option)
                                   ->
                                   Ojs.set_prop_ascii
                                     (this_to_js Obj.magic x2715)
                                     "oncomplete"
                                     (Ojs.option_to_js
                                        (fun
                                           (x2717 :
                                             this:t -> ev:Event.t -> any)
                                           ->
                                           Ojs.fun_to_js 2
                                             (fun (x2718 : Ojs.t) ->
                                                fun (x2719 : Ojs.t) ->
                                                  any_to_js
                                                    (x2717
                                                       ~this:(t_of_js x2718)
                                                       ~ev:(Event.t_of_js
                                                              x2719)))) x2716)
                             let (get_onerror :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) option)
                               =
                               fun (x2721 : 'tags this) ->
                                 Ojs.option_of_js
                                   (fun (x2723 : Ojs.t) ->
                                      fun ~this:(x2724 : t) ->
                                        fun ~ev:(x2725 : Event.t) ->
                                          any_of_js
                                            (Ojs.apply x2723
                                               [|(t_to_js x2724);(Event.t_to_js
                                                                    x2725)|]))
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x2721) "onerror")
                             let (set_onerror :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) option -> unit)
                               =
                               fun (x2726 : 'tags this) ->
                                 fun
                                   (x2727 :
                                     (this:t -> ev:Event.t -> any) option)
                                   ->
                                   Ojs.set_prop_ascii
                                     (this_to_js Obj.magic x2726) "onerror"
                                     (Ojs.option_to_js
                                        (fun
                                           (x2728 :
                                             this:t -> ev:Event.t -> any)
                                           ->
                                           Ojs.fun_to_js 2
                                             (fun (x2729 : Ojs.t) ->
                                                fun (x2730 : Ojs.t) ->
                                                  any_to_js
                                                    (x2728
                                                       ~this:(t_of_js x2729)
                                                       ~ev:(Event.t_of_js
                                                              x2730)))) x2727)
                             let (abort : 'tags this -> unit) =
                               fun (x2732 : 'tags this) ->
                                 ignore
                                   (Ojs.call (this_to_js Obj.magic x2732)
                                      "abort" [||])
                             let (commit : 'tags this -> unit) =
                               fun (x2734 : 'tags this) ->
                                 ignore
                                   (Ojs.call (this_to_js Obj.magic x2734)
                                      "commit" [||])
                             let (objectStore :
                               'tags this -> name:string -> IDBObjectStore.t)
                               =
                               fun (x2737 : 'tags this) ->
                                 fun ~name:(x2736 : string) ->
                                   IDBObjectStore.t_of_js
                                     (Ojs.call (this_to_js Obj.magic x2737)
                                        "objectStore"
                                        [|(Ojs.string_to_js x2736)|])
                             let (addEventListener :
                               'tags this ->
                                 type_:'K ->
                                   listener:(this:t -> ev:any -> any) ->
                                     ?options:[ `U1 of bool 
                                              | `U2 of
                                                  AddEventListenerOptions.t ]
                                       -> unit -> unit)
                               =
                               fun (x2748 : 'tags this) ->
                                 fun ~type_:(x2739 : 'K) ->
                                   fun
                                     ~listener:(x2740 :
                                                 this:t -> ev:any -> any)
                                     ->
                                     fun
                                       ?options:(x2741 :
                                                  [ `U1 of bool 
                                                  | `U2 of
                                                      AddEventListenerOptions.t
                                                      ]
                                                    option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x2750 =
                                              this_to_js Obj.magic x2748 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x2750
                                                 "addEventListener") "apply"
                                              [|x2750;((let x2742 =
                                                          Ojs.new_obj
                                                            (Ojs.get_prop_ascii
                                                               Ojs.global
                                                               "Array") 
                                                            [||] in
                                                        ignore
                                                          (Ojs.call x2742
                                                             "push"
                                                             [|(Obj.magic
                                                                  x2739)|]);
                                                        ignore
                                                          (Ojs.call x2742
                                                             "push"
                                                             [|(Ojs.fun_to_js
                                                                  2
                                                                  (fun
                                                                    (x2746 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x2747 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x2740
                                                                    ~this:(
                                                                    t_of_js
                                                                    x2746)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x2747))))|]);
                                                        (match x2741 with
                                                         | Some x2743 ->
                                                             ignore
                                                               (Ojs.call
                                                                  x2742
                                                                  "push"
                                                                  [|((
                                                                    match x2743
                                                                    with
                                                                    | 
                                                                    `U1 x2744
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x2744
                                                                    | 
                                                                    `U2 x2745
                                                                    ->
                                                                    AddEventListenerOptions.t_to_js
                                                                    x2745))|])
                                                         | None -> ());
                                                        x2742))|])
                             let (addEventListener' :
                               'tags this ->
                                 type_:string ->
                                   listener:EventListenerOrEventListenerObject.t
                                     ->
                                     ?options:[ `U1 of bool 
                                              | `U2 of
                                                  AddEventListenerOptions.t ]
                                       -> unit -> unit)
                               =
                               fun (x2758 : 'tags this) ->
                                 fun ~type_:(x2751 : string) ->
                                   fun
                                     ~listener:(x2752 :
                                                 EventListenerOrEventListenerObject.t)
                                     ->
                                     fun
                                       ?options:(x2753 :
                                                  [ `U1 of bool 
                                                  | `U2 of
                                                      AddEventListenerOptions.t
                                                      ]
                                                    option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x2760 =
                                              this_to_js Obj.magic x2758 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x2760
                                                 "addEventListener") "apply"
                                              [|x2760;((let x2754 =
                                                          Ojs.new_obj
                                                            (Ojs.get_prop_ascii
                                                               Ojs.global
                                                               "Array") 
                                                            [||] in
                                                        ignore
                                                          (Ojs.call x2754
                                                             "push"
                                                             [|(Ojs.string_to_js
                                                                  x2751)|]);
                                                        ignore
                                                          (Ojs.call x2754
                                                             "push"
                                                             [|(EventListenerOrEventListenerObject.t_to_js
                                                                  x2752)|]);
                                                        (match x2753 with
                                                         | Some x2755 ->
                                                             ignore
                                                               (Ojs.call
                                                                  x2754
                                                                  "push"
                                                                  [|((
                                                                    match x2755
                                                                    with
                                                                    | 
                                                                    `U1 x2756
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x2756
                                                                    | 
                                                                    `U2 x2757
                                                                    ->
                                                                    AddEventListenerOptions.t_to_js
                                                                    x2757))|])
                                                         | None -> ());
                                                        x2754))|])
                             let (removeEventListener :
                               'tags this ->
                                 type_:'K ->
                                   listener:(this:t -> ev:any -> any) ->
                                     ?options:[ `U1 of bool 
                                              | `U2 of EventListenerOptions.t ]
                                       -> unit -> unit)
                               =
                               fun (x2770 : 'tags this) ->
                                 fun ~type_:(x2761 : 'K) ->
                                   fun
                                     ~listener:(x2762 :
                                                 this:t -> ev:any -> any)
                                     ->
                                     fun
                                       ?options:(x2763 :
                                                  [ `U1 of bool 
                                                  | `U2 of
                                                      EventListenerOptions.t ]
                                                    option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x2772 =
                                              this_to_js Obj.magic x2770 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x2772
                                                 "removeEventListener")
                                              "apply"
                                              [|x2772;((let x2764 =
                                                          Ojs.new_obj
                                                            (Ojs.get_prop_ascii
                                                               Ojs.global
                                                               "Array") 
                                                            [||] in
                                                        ignore
                                                          (Ojs.call x2764
                                                             "push"
                                                             [|(Obj.magic
                                                                  x2761)|]);
                                                        ignore
                                                          (Ojs.call x2764
                                                             "push"
                                                             [|(Ojs.fun_to_js
                                                                  2
                                                                  (fun
                                                                    (x2768 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x2769 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x2762
                                                                    ~this:(
                                                                    t_of_js
                                                                    x2768)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x2769))))|]);
                                                        (match x2763 with
                                                         | Some x2765 ->
                                                             ignore
                                                               (Ojs.call
                                                                  x2764
                                                                  "push"
                                                                  [|((
                                                                    match x2765
                                                                    with
                                                                    | 
                                                                    `U1 x2766
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x2766
                                                                    | 
                                                                    `U2 x2767
                                                                    ->
                                                                    EventListenerOptions.t_to_js
                                                                    x2767))|])
                                                         | None -> ());
                                                        x2764))|])
                             let (removeEventListener' :
                               'tags this ->
                                 type_:string ->
                                   listener:EventListenerOrEventListenerObject.t
                                     ->
                                     ?options:[ `U1 of bool 
                                              | `U2 of EventListenerOptions.t ]
                                       -> unit -> unit)
                               =
                               fun (x2780 : 'tags this) ->
                                 fun ~type_:(x2773 : string) ->
                                   fun
                                     ~listener:(x2774 :
                                                 EventListenerOrEventListenerObject.t)
                                     ->
                                     fun
                                       ?options:(x2775 :
                                                  [ `U1 of bool 
                                                  | `U2 of
                                                      EventListenerOptions.t ]
                                                    option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x2782 =
                                              this_to_js Obj.magic x2780 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x2782
                                                 "removeEventListener")
                                              "apply"
                                              [|x2782;((let x2776 =
                                                          Ojs.new_obj
                                                            (Ojs.get_prop_ascii
                                                               Ojs.global
                                                               "Array") 
                                                            [||] in
                                                        ignore
                                                          (Ojs.call x2776
                                                             "push"
                                                             [|(Ojs.string_to_js
                                                                  x2773)|]);
                                                        ignore
                                                          (Ojs.call x2776
                                                             "push"
                                                             [|(EventListenerOrEventListenerObject.t_to_js
                                                                  x2774)|]);
                                                        (match x2775 with
                                                         | Some x2777 ->
                                                             ignore
                                                               (Ojs.call
                                                                  x2776
                                                                  "push"
                                                                  [|((
                                                                    match x2777
                                                                    with
                                                                    | 
                                                                    `U1 x2778
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x2778
                                                                    | 
                                                                    `U2 x2779
                                                                    ->
                                                                    EventListenerOptions.t_to_js
                                                                    x2779))|])
                                                         | None -> ());
                                                        x2776))|])
                             let cast_from = Obj.magic
                             let (prototype : unit -> t) =
                               fun () ->
                                 t_of_js
                                   (Ojs.get_prop_ascii
                                      (Ojs.get_prop_ascii Ojs.global
                                         "IDBTransaction") "prototype")
                             let (create : unit -> t) =
                               fun () ->
                                 t_of_js
                                   (Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global
                                         "IDBTransaction") [||])
                           end
module IDBOpenDBRequest =
  struct
    type t =
      [ `EventTarget  | `IDBOpenDBRequest  | `IDBRequest of IDBDatabase.t ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2784 : Ojs.t) -> t_of_js x2784
    and t_0_to_js : t_0 -> Ojs.t = fun (x2783 : t) -> t_to_js x2783
    type tags =
      [ `EventTarget  | `IDBOpenDBRequest  | `IDBRequest of IDBDatabase.t ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBOpenDBRequest ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x2787 : Ojs.t) -> intf_of_js __tags_of_js x2787
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x2785 : __tags intf) -> intf_to_js __tags_to_js x2785
    let (get_onblocked : 'tags this -> (this:t -> ev:Event.t -> any) option)
      =
      fun (x2789 : 'tags this) ->
        Ojs.option_of_js
          (fun (x2791 : Ojs.t) ->
             fun ~this:(x2792 : t) ->
               fun ~ev:(x2793 : Event.t) ->
                 any_of_js
                   (Ojs.apply x2791 [|(t_to_js x2792);(Event.t_to_js x2793)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2789) "onblocked")
    let (set_onblocked :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x2794 : 'tags this) ->
        fun (x2795 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2794) "onblocked"
            (Ojs.option_to_js
               (fun (x2796 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x2797 : Ojs.t) ->
                       fun (x2798 : Ojs.t) ->
                         any_to_js
                           (x2796 ~this:(t_of_js x2797)
                              ~ev:(Event.t_of_js x2798)))) x2795)
    let (get_onupgradeneeded :
      'tags this -> (this:t -> ev:IDBVersionChangeEvent.t -> any) option) =
      fun (x2800 : 'tags this) ->
        Ojs.option_of_js
          (fun (x2802 : Ojs.t) ->
             fun ~this:(x2803 : t) ->
               fun ~ev:(x2804 : IDBVersionChangeEvent.t) ->
                 any_of_js
                   (Ojs.apply x2802
                      [|(t_to_js x2803);(IDBVersionChangeEvent.t_to_js x2804)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2800) "onupgradeneeded")
    let (set_onupgradeneeded :
      'tags this ->
        (this:t -> ev:IDBVersionChangeEvent.t -> any) option -> unit)
      =
      fun (x2805 : 'tags this) ->
        fun (x2806 : (this:t -> ev:IDBVersionChangeEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2805) "onupgradeneeded"
            (Ojs.option_to_js
               (fun (x2807 : this:t -> ev:IDBVersionChangeEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x2808 : Ojs.t) ->
                       fun (x2809 : Ojs.t) ->
                         any_to_js
                           (x2807 ~this:(t_of_js x2808)
                              ~ev:(IDBVersionChangeEvent.t_of_js x2809))))
               x2806)
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x2820 : 'tags this) ->
        fun ~type_:(x2811 : 'K) ->
          fun ~listener:(x2812 : this:t -> ev:any -> any) ->
            fun
              ?options:(x2813 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x2822 = this_to_js Obj.magic x2820 in
                   Ojs.call (Ojs.get_prop_ascii x2822 "addEventListener")
                     "apply"
                     [|x2822;((let x2814 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2814 "push" [|(Obj.magic x2811)|]);
                               ignore
                                 (Ojs.call x2814 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x2818 : Ojs.t) ->
                                            fun (x2819 : Ojs.t) ->
                                              any_to_js
                                                (x2812 ~this:(t_of_js x2818)
                                                   ~ev:(any_of_js x2819))))|]);
                               (match x2813 with
                                | Some x2815 ->
                                    ignore
                                      (Ojs.call x2814 "push"
                                         [|((match x2815 with
                                             | `U1 x2816 ->
                                                 Ojs.bool_to_js x2816
                                             | `U2 x2817 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x2817))|])
                                | None -> ());
                               x2814))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x2830 : 'tags this) ->
        fun ~type_:(x2823 : string) ->
          fun ~listener:(x2824 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x2825 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x2832 = this_to_js Obj.magic x2830 in
                   Ojs.call (Ojs.get_prop_ascii x2832 "addEventListener")
                     "apply"
                     [|x2832;((let x2826 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2826 "push"
                                    [|(Ojs.string_to_js x2823)|]);
                               ignore
                                 (Ojs.call x2826 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x2824)|]);
                               (match x2825 with
                                | Some x2827 ->
                                    ignore
                                      (Ojs.call x2826 "push"
                                         [|((match x2827 with
                                             | `U1 x2828 ->
                                                 Ojs.bool_to_js x2828
                                             | `U2 x2829 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x2829))|])
                                | None -> ());
                               x2826))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x2842 : 'tags this) ->
        fun ~type_:(x2833 : 'K) ->
          fun ~listener:(x2834 : this:t -> ev:any -> any) ->
            fun
              ?options:(x2835 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x2844 = this_to_js Obj.magic x2842 in
                   Ojs.call (Ojs.get_prop_ascii x2844 "removeEventListener")
                     "apply"
                     [|x2844;((let x2836 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2836 "push" [|(Obj.magic x2833)|]);
                               ignore
                                 (Ojs.call x2836 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x2840 : Ojs.t) ->
                                            fun (x2841 : Ojs.t) ->
                                              any_to_js
                                                (x2834 ~this:(t_of_js x2840)
                                                   ~ev:(any_of_js x2841))))|]);
                               (match x2835 with
                                | Some x2837 ->
                                    ignore
                                      (Ojs.call x2836 "push"
                                         [|((match x2837 with
                                             | `U1 x2838 ->
                                                 Ojs.bool_to_js x2838
                                             | `U2 x2839 ->
                                                 EventListenerOptions.t_to_js
                                                   x2839))|])
                                | None -> ());
                               x2836))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x2852 : 'tags this) ->
        fun ~type_:(x2845 : string) ->
          fun ~listener:(x2846 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x2847 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x2854 = this_to_js Obj.magic x2852 in
                   Ojs.call (Ojs.get_prop_ascii x2854 "removeEventListener")
                     "apply"
                     [|x2854;((let x2848 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2848 "push"
                                    [|(Ojs.string_to_js x2845)|]);
                               ignore
                                 (Ojs.call x2848 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x2846)|]);
                               (match x2847 with
                                | Some x2849 ->
                                    ignore
                                      (Ojs.call x2848 "push"
                                         [|((match x2849 with
                                             | `U1 x2850 ->
                                                 Ojs.bool_to_js x2850
                                             | `U2 x2851 ->
                                                 EventListenerOptions.t_to_js
                                                   x2851))|])
                                | None -> ());
                               x2848))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "IDBOpenDBRequest") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBOpenDBRequest")
             [||])
  end
module IDBDatabaseInfo =
  struct
    type t = [ `IDBDatabaseInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2856 : Ojs.t) -> t_of_js x2856
    and t_0_to_js : t_0 -> Ojs.t = fun (x2855 : t) -> t_to_js x2855
    type tags = [ `IDBDatabaseInfo ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBDatabaseInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x2859 : Ojs.t) -> intf_of_js __tags_of_js x2859
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x2857 : __tags intf) -> intf_to_js __tags_to_js x2857
    let (get_name : 'tags this -> string option) =
      fun (x2861 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2861) "name")
    let (set_name : 'tags this -> string -> unit) =
      fun (x2864 : 'tags this) ->
        fun (x2865 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2864) "name"
            (Ojs.string_to_js x2865)
    let (get_version : 'tags this -> float option) =
      fun (x2867 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2867) "version")
    let (set_version : 'tags this -> float -> unit) =
      fun (x2870 : 'tags this) ->
        fun (x2871 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2870) "version"
            (Ojs.float_to_js x2871)
    let (create : ?name:string -> ?version:float -> unit -> t) =
      fun ?name:(x2873 : string option) ->
        fun ?version:(x2874 : float option) ->
          fun () ->
            let x2875 = Ojs.empty_obj () in
            (match x2873 with
             | Some x2877 ->
                 Ojs.set_prop_ascii x2875 "name" (Ojs.string_to_js x2877)
             | None -> ());
            (match x2874 with
             | Some x2876 ->
                 Ojs.set_prop_ascii x2875 "version" (Ojs.float_to_js x2876)
             | None -> ());
            t_of_js x2875
    let cast_from = Obj.magic
  end
module IndexedDBStatic =
  struct
    let (cmp : first:any -> second:any -> float) =
      fun ~first:(x2878 : any) ->
        fun ~second:(x2879 : any) ->
          Ojs.float_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "indexedDB") "cmp"
               [|(any_to_js x2878);(any_to_js x2879)|])
    let (databases : unit -> IDBDatabaseInfo.t list Promise.t_1) =
      fun () ->
        Promise.t_1_of_js
          (fun (x2880 : Ojs.t) ->
             Ojs.list_of_js IDBDatabaseInfo.t_of_js x2880)
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "indexedDB") "databases"
             [||])
    let (deleteDatabase : string -> IDBOpenDBRequest.t) =
      fun (x2882 : string) ->
        IDBOpenDBRequest.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "indexedDB")
             "deleteDatabase" [|(Ojs.string_to_js x2882)|])
    let (open_ : name:string -> ?version:float -> unit -> IDBOpenDBRequest.t)
      =
      fun ~name:(x2883 : string) ->
        fun ?version:(x2884 : float option) ->
          fun () ->
            IDBOpenDBRequest.t_of_js
              (let x2887 = Ojs.get_prop_ascii Ojs.global "indexedDB" in
               Ojs.call (Ojs.get_prop_ascii x2887 "open") "apply"
                 [|x2887;((let x2885 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2885 "push"
                                [|(Ojs.string_to_js x2883)|]);
                           (match x2884 with
                            | Some x2886 ->
                                ignore
                                  (Ojs.call x2885 "push"
                                     [|(Ojs.float_to_js x2886)|])
                            | None -> ());
                           x2885))|])
  end
module FontFaceSetLoadStatus =
  struct
    type t = [ `L_s102_loaded  | `L_s104_loading ]
    let rec t_of_js : Ojs.t -> t =
      fun (x2889 : Ojs.t) ->
        let x2890 = x2889 in
        match Ojs.string_of_js x2890 with
        | "loaded" -> `L_s102_loaded
        | "loading" -> `L_s104_loading
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x2888 : [ `L_s102_loaded  | `L_s104_loading ]) ->
        match x2888 with
        | `L_s102_loaded -> Ojs.string_to_js "loaded"
        | `L_s104_loading -> Ojs.string_to_js "loading"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2892 : Ojs.t) -> t_of_js x2892
    and t_0_to_js : t_0 -> Ojs.t = fun (x2891 : t) -> t_to_js x2891
  end
module FontFaceLoadStatus =
  struct
    type t =
      [ `L_s102_loaded  | `L_s104_loading  | `L_s202_unloaded 
      | `L_s68_error ]
    let rec t_of_js : Ojs.t -> t =
      fun (x2894 : Ojs.t) ->
        let x2895 = x2894 in
        match Ojs.string_of_js x2895 with
        | "loaded" -> `L_s102_loaded
        | "loading" -> `L_s104_loading
        | "unloaded" -> `L_s202_unloaded
        | "error" -> `L_s68_error
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x2893 :
          [ `L_s102_loaded  | `L_s104_loading  | `L_s202_unloaded 
          | `L_s68_error ])
        ->
        match x2893 with
        | `L_s102_loaded -> Ojs.string_to_js "loaded"
        | `L_s104_loading -> Ojs.string_to_js "loading"
        | `L_s202_unloaded -> Ojs.string_to_js "unloaded"
        | `L_s68_error -> Ojs.string_to_js "error"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2897 : Ojs.t) -> t_of_js x2897
    and t_0_to_js : t_0 -> Ojs.t = fun (x2896 : t) -> t_to_js x2896
  end
module FontFaceDescriptors =
  struct
    type t = [ `FontFaceDescriptors ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2899 : Ojs.t) -> t_of_js x2899
    and t_0_to_js : t_0 -> Ojs.t = fun (x2898 : t) -> t_to_js x2898
    type tags = [ `FontFaceDescriptors ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFaceDescriptors ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x2902 : Ojs.t) -> intf_of_js __tags_of_js x2902
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x2900 : __tags intf) -> intf_to_js __tags_to_js x2900
    let (get_display : 'tags this -> string option) =
      fun (x2904 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2904) "display")
    let (set_display : 'tags this -> string -> unit) =
      fun (x2907 : 'tags this) ->
        fun (x2908 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2907) "display"
            (Ojs.string_to_js x2908)
    let (get_featureSettings : 'tags this -> string option) =
      fun (x2910 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2910) "featureSettings")
    let (set_featureSettings : 'tags this -> string -> unit) =
      fun (x2913 : 'tags this) ->
        fun (x2914 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2913) "featureSettings"
            (Ojs.string_to_js x2914)
    let (get_stretch : 'tags this -> string option) =
      fun (x2916 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2916) "stretch")
    let (set_stretch : 'tags this -> string -> unit) =
      fun (x2919 : 'tags this) ->
        fun (x2920 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2919) "stretch"
            (Ojs.string_to_js x2920)
    let (get_style : 'tags this -> string option) =
      fun (x2922 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2922) "style")
    let (set_style : 'tags this -> string -> unit) =
      fun (x2925 : 'tags this) ->
        fun (x2926 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2925) "style"
            (Ojs.string_to_js x2926)
    let (get_unicodeRange : 'tags this -> string option) =
      fun (x2928 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2928) "unicodeRange")
    let (set_unicodeRange : 'tags this -> string -> unit) =
      fun (x2931 : 'tags this) ->
        fun (x2932 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2931) "unicodeRange"
            (Ojs.string_to_js x2932)
    let (get_variant : 'tags this -> string option) =
      fun (x2934 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2934) "variant")
    let (set_variant : 'tags this -> string -> unit) =
      fun (x2937 : 'tags this) ->
        fun (x2938 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2937) "variant"
            (Ojs.string_to_js x2938)
    let (get_weight : 'tags this -> string option) =
      fun (x2940 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2940) "weight")
    let (set_weight : 'tags this -> string -> unit) =
      fun (x2943 : 'tags this) ->
        fun (x2944 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2943) "weight"
            (Ojs.string_to_js x2944)
    let (create :
      ?display:string ->
        ?featureSettings:string ->
          ?stretch:string ->
            ?style:string ->
              ?unicodeRange:string ->
                ?variant:string -> ?weight:string -> unit -> t)
      =
      fun ?display:(x2946 : string option) ->
        fun ?featureSettings:(x2947 : string option) ->
          fun ?stretch:(x2948 : string option) ->
            fun ?style:(x2949 : string option) ->
              fun ?unicodeRange:(x2950 : string option) ->
                fun ?variant:(x2951 : string option) ->
                  fun ?weight:(x2952 : string option) ->
                    fun () ->
                      let x2953 = Ojs.empty_obj () in
                      (match x2946 with
                       | Some x2960 ->
                           Ojs.set_prop_ascii x2953 "display"
                             (Ojs.string_to_js x2960)
                       | None -> ());
                      (match x2947 with
                       | Some x2959 ->
                           Ojs.set_prop_ascii x2953 "featureSettings"
                             (Ojs.string_to_js x2959)
                       | None -> ());
                      (match x2948 with
                       | Some x2958 ->
                           Ojs.set_prop_ascii x2953 "stretch"
                             (Ojs.string_to_js x2958)
                       | None -> ());
                      (match x2949 with
                       | Some x2957 ->
                           Ojs.set_prop_ascii x2953 "style"
                             (Ojs.string_to_js x2957)
                       | None -> ());
                      (match x2950 with
                       | Some x2956 ->
                           Ojs.set_prop_ascii x2953 "unicodeRange"
                             (Ojs.string_to_js x2956)
                       | None -> ());
                      (match x2951 with
                       | Some x2955 ->
                           Ojs.set_prop_ascii x2953 "variant"
                             (Ojs.string_to_js x2955)
                       | None -> ());
                      (match x2952 with
                       | Some x2954 ->
                           Ojs.set_prop_ascii x2953 "weight"
                             (Ojs.string_to_js x2954)
                       | None -> ());
                      t_of_js x2953
    let cast_from = Obj.magic
  end
module BinaryData =
  struct
    type t = (ArrayBuffer.t_0, ArrayBufferView.t_0) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x2964 : Ojs.t) ->
        union2_of_js ArrayBuffer.t_0_of_js ArrayBufferView.t_0_of_js x2964
    and t_to_js : t -> Ojs.t =
      fun (x2961 : (ArrayBuffer.t_0, ArrayBufferView.t_0) union2) ->
        union2_to_js ArrayBuffer.t_0_to_js ArrayBufferView.t_0_to_js x2961
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2968 : Ojs.t) -> t_of_js x2968
    and t_0_to_js : t_0 -> Ojs.t = fun (x2967 : t) -> t_to_js x2967
  end
module FontFace =
  struct
    type t = [ `FontFace ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2970 : Ojs.t) -> t_of_js x2970
    and t_0_to_js : t_0 -> Ojs.t = fun (x2969 : t) -> t_to_js x2969
    type tags = [ `FontFace ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFace ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x2973 : Ojs.t) -> intf_of_js __tags_of_js x2973
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x2971 : __tags intf) -> intf_to_js __tags_to_js x2971
    let (get_ascentOverride : 'tags this -> string) =
      fun (x2975 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2975) "ascentOverride")
    let (set_ascentOverride : 'tags this -> string -> unit) =
      fun (x2977 : 'tags this) ->
        fun (x2978 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2977) "ascentOverride"
            (Ojs.string_to_js x2978)
    let (get_descentOverride : 'tags this -> string) =
      fun (x2980 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2980) "descentOverride")
    let (set_descentOverride : 'tags this -> string -> unit) =
      fun (x2982 : 'tags this) ->
        fun (x2983 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2982) "descentOverride"
            (Ojs.string_to_js x2983)
    let (get_display : 'tags this -> string) =
      fun (x2985 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2985) "display")
    let (set_display : 'tags this -> string -> unit) =
      fun (x2987 : 'tags this) ->
        fun (x2988 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2987) "display"
            (Ojs.string_to_js x2988)
    let (get_family : 'tags this -> string) =
      fun (x2990 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2990) "family")
    let (set_family : 'tags this -> string -> unit) =
      fun (x2992 : 'tags this) ->
        fun (x2993 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2992) "family"
            (Ojs.string_to_js x2993)
    let (get_featureSettings : 'tags this -> string) =
      fun (x2995 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2995) "featureSettings")
    let (set_featureSettings : 'tags this -> string -> unit) =
      fun (x2997 : 'tags this) ->
        fun (x2998 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2997) "featureSettings"
            (Ojs.string_to_js x2998)
    let (get_lineGapOverride : 'tags this -> string) =
      fun (x3000 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3000) "lineGapOverride")
    let (set_lineGapOverride : 'tags this -> string -> unit) =
      fun (x3002 : 'tags this) ->
        fun (x3003 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3002) "lineGapOverride"
            (Ojs.string_to_js x3003)
    let (get_loaded : 'tags this -> t Promise.t_1) =
      fun (x3005 : 'tags this) ->
        Promise.t_1_of_js t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3005) "loaded")
    let (get_status : 'tags this -> FontFaceLoadStatus.t) =
      fun (x3008 : 'tags this) ->
        FontFaceLoadStatus.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3008) "status")
    let (get_stretch : 'tags this -> string) =
      fun (x3010 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3010) "stretch")
    let (set_stretch : 'tags this -> string -> unit) =
      fun (x3012 : 'tags this) ->
        fun (x3013 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3012) "stretch"
            (Ojs.string_to_js x3013)
    let (get_style : 'tags this -> string) =
      fun (x3015 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3015) "style")
    let (set_style : 'tags this -> string -> unit) =
      fun (x3017 : 'tags this) ->
        fun (x3018 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3017) "style"
            (Ojs.string_to_js x3018)
    let (get_unicodeRange : 'tags this -> string) =
      fun (x3020 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3020) "unicodeRange")
    let (set_unicodeRange : 'tags this -> string -> unit) =
      fun (x3022 : 'tags this) ->
        fun (x3023 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3022) "unicodeRange"
            (Ojs.string_to_js x3023)
    let (get_variant : 'tags this -> string) =
      fun (x3025 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3025) "variant")
    let (set_variant : 'tags this -> string -> unit) =
      fun (x3027 : 'tags this) ->
        fun (x3028 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3027) "variant"
            (Ojs.string_to_js x3028)
    let (get_variationSettings : 'tags this -> string) =
      fun (x3030 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3030)
             "variationSettings")
    let (set_variationSettings : 'tags this -> string -> unit) =
      fun (x3032 : 'tags this) ->
        fun (x3033 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3032) "variationSettings"
            (Ojs.string_to_js x3033)
    let (get_weight : 'tags this -> string) =
      fun (x3035 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3035) "weight")
    let (set_weight : 'tags this -> string -> unit) =
      fun (x3037 : 'tags this) ->
        fun (x3038 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3037) "weight"
            (Ojs.string_to_js x3038)
    let (load : 'tags this -> t Promise.t_1) =
      fun (x3040 : 'tags this) ->
        Promise.t_1_of_js t_of_js
          (Ojs.call (this_to_js Obj.magic x3040) "load" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FontFace")
             "prototype")
    let (create :
      family:string ->
        source:[ `U1 of string  | `U2 of BinaryData.t ] ->
          ?descriptors:FontFaceDescriptors.t -> unit -> t)
      =
      fun ~family:(x3043 : string) ->
        fun ~source:(x3044 : [ `U1 of string  | `U2 of BinaryData.t ]) ->
          fun ?descriptors:(x3045 : FontFaceDescriptors.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "FontFace")
                   (let x3046 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x3046 "push" [|(Ojs.string_to_js x3043)|]);
                    ignore
                      (Ojs.call x3046 "push"
                         [|((match x3044 with
                             | `U1 x3048 -> Ojs.string_to_js x3048
                             | `U2 x3049 -> BinaryData.t_to_js x3049))|]);
                    (match x3045 with
                     | Some x3047 ->
                         ignore
                           (Ojs.call x3046 "push"
                              [|(FontFaceDescriptors.t_to_js x3047)|])
                     | None -> ());
                    x3046))
  end
module FontFaceSet =
  struct
    type t = [ `EventTarget  | `FontFaceSet ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3051 : Ojs.t) -> t_of_js x3051
    and t_0_to_js : t_0 -> Ojs.t = fun (x3050 : t) -> t_to_js x3050
    type tags = [ `EventTarget  | `FontFaceSet ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFaceSet ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3054 : Ojs.t) -> intf_of_js __tags_of_js x3054
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3052 : __tags intf) -> intf_to_js __tags_to_js x3052
    let (get_onloading : 'tags this -> (this:t -> ev:Event.t -> any) option)
      =
      fun (x3056 : 'tags this) ->
        Ojs.option_of_js
          (fun (x3058 : Ojs.t) ->
             fun ~this:(x3059 : t) ->
               fun ~ev:(x3060 : Event.t) ->
                 any_of_js
                   (Ojs.apply x3058 [|(t_to_js x3059);(Event.t_to_js x3060)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3056) "onloading")
    let (set_onloading :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x3061 : 'tags this) ->
        fun (x3062 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3061) "onloading"
            (Ojs.option_to_js
               (fun (x3063 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x3064 : Ojs.t) ->
                       fun (x3065 : Ojs.t) ->
                         any_to_js
                           (x3063 ~this:(t_of_js x3064)
                              ~ev:(Event.t_of_js x3065)))) x3062)
    let (get_onloadingdone :
      'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x3067 : 'tags this) ->
        Ojs.option_of_js
          (fun (x3069 : Ojs.t) ->
             fun ~this:(x3070 : t) ->
               fun ~ev:(x3071 : Event.t) ->
                 any_of_js
                   (Ojs.apply x3069 [|(t_to_js x3070);(Event.t_to_js x3071)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3067) "onloadingdone")
    let (set_onloadingdone :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x3072 : 'tags this) ->
        fun (x3073 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3072) "onloadingdone"
            (Ojs.option_to_js
               (fun (x3074 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x3075 : Ojs.t) ->
                       fun (x3076 : Ojs.t) ->
                         any_to_js
                           (x3074 ~this:(t_of_js x3075)
                              ~ev:(Event.t_of_js x3076)))) x3073)
    let (get_onloadingerror :
      'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x3078 : 'tags this) ->
        Ojs.option_of_js
          (fun (x3080 : Ojs.t) ->
             fun ~this:(x3081 : t) ->
               fun ~ev:(x3082 : Event.t) ->
                 any_of_js
                   (Ojs.apply x3080 [|(t_to_js x3081);(Event.t_to_js x3082)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3078) "onloadingerror")
    let (set_onloadingerror :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x3083 : 'tags this) ->
        fun (x3084 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3083) "onloadingerror"
            (Ojs.option_to_js
               (fun (x3085 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x3086 : Ojs.t) ->
                       fun (x3087 : Ojs.t) ->
                         any_to_js
                           (x3085 ~this:(t_of_js x3086)
                              ~ev:(Event.t_of_js x3087)))) x3084)
    let (get_ready : 'tags this -> t Promise.t_1) =
      fun (x3089 : 'tags this) ->
        Promise.t_1_of_js t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3089) "ready")
    let (get_status : 'tags this -> FontFaceSetLoadStatus.t) =
      fun (x3092 : 'tags this) ->
        FontFaceSetLoadStatus.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3092) "status")
    let (check : 'tags this -> font:string -> ?text:string -> unit -> bool) =
      fun (x3098 : 'tags this) ->
        fun ~font:(x3094 : string) ->
          fun ?text:(x3095 : string option) ->
            fun () ->
              Ojs.bool_of_js
                (let x3100 = this_to_js Obj.magic x3098 in
                 Ojs.call (Ojs.get_prop_ascii x3100 "check") "apply"
                   [|x3100;((let x3096 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3096 "push"
                                  [|(Ojs.string_to_js x3094)|]);
                             (match x3095 with
                              | Some x3097 ->
                                  ignore
                                    (Ojs.call x3096 "push"
                                       [|(Ojs.string_to_js x3097)|])
                              | None -> ());
                             x3096))|])
    let (load :
      'tags this ->
        font:string -> ?text:string -> unit -> FontFace.t list Promise.t_1)
      =
      fun (x3105 : 'tags this) ->
        fun ~font:(x3101 : string) ->
          fun ?text:(x3102 : string option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x3108 : Ojs.t) -> Ojs.list_of_js FontFace.t_of_js x3108)
                (let x3107 = this_to_js Obj.magic x3105 in
                 Ojs.call (Ojs.get_prop_ascii x3107 "load") "apply"
                   [|x3107;((let x3103 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3103 "push"
                                  [|(Ojs.string_to_js x3101)|]);
                             (match x3102 with
                              | Some x3104 ->
                                  ignore
                                    (Ojs.call x3103 "push"
                                       [|(Ojs.string_to_js x3104)|])
                              | None -> ());
                             x3103))|])
    let (forEach :
      'tags this ->
        callbackfn:(value:FontFace.t -> key:FontFace.t -> parent:t -> unit)
          -> ?thisArg:any -> unit -> unit)
      =
      fun (x3117 : 'tags this) ->
        fun
          ~callbackfn:(x3110 :
                        value:FontFace.t ->
                          key:FontFace.t -> parent:t -> unit)
          ->
          fun ?thisArg:(x3111 : any option) ->
            fun () ->
              ignore
                (let x3119 = this_to_js Obj.magic x3117 in
                 Ojs.call (Ojs.get_prop_ascii x3119 "forEach") "apply"
                   [|x3119;((let x3112 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3112 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3114 : Ojs.t) ->
                                          fun (x3115 : Ojs.t) ->
                                            fun (x3116 : Ojs.t) ->
                                              x3110
                                                ~value:(FontFace.t_of_js
                                                          x3114)
                                                ~key:(FontFace.t_of_js x3115)
                                                ~parent:(t_of_js x3116)))|]);
                             (match x3111 with
                              | Some x3113 ->
                                  ignore
                                    (Ojs.call x3112 "push"
                                       [|(any_to_js x3113)|])
                              | None -> ());
                             x3112))|])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x3129 : 'tags this) ->
        fun ~type_:(x3120 : 'K) ->
          fun ~listener:(x3121 : this:t -> ev:any -> any) ->
            fun
              ?options:(x3122 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x3131 = this_to_js Obj.magic x3129 in
                   Ojs.call (Ojs.get_prop_ascii x3131 "addEventListener")
                     "apply"
                     [|x3131;((let x3123 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3123 "push" [|(Obj.magic x3120)|]);
                               ignore
                                 (Ojs.call x3123 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x3127 : Ojs.t) ->
                                            fun (x3128 : Ojs.t) ->
                                              any_to_js
                                                (x3121 ~this:(t_of_js x3127)
                                                   ~ev:(any_of_js x3128))))|]);
                               (match x3122 with
                                | Some x3124 ->
                                    ignore
                                      (Ojs.call x3123 "push"
                                         [|((match x3124 with
                                             | `U1 x3125 ->
                                                 Ojs.bool_to_js x3125
                                             | `U2 x3126 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x3126))|])
                                | None -> ());
                               x3123))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x3139 : 'tags this) ->
        fun ~type_:(x3132 : string) ->
          fun ~listener:(x3133 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x3134 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x3141 = this_to_js Obj.magic x3139 in
                   Ojs.call (Ojs.get_prop_ascii x3141 "addEventListener")
                     "apply"
                     [|x3141;((let x3135 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3135 "push"
                                    [|(Ojs.string_to_js x3132)|]);
                               ignore
                                 (Ojs.call x3135 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x3133)|]);
                               (match x3134 with
                                | Some x3136 ->
                                    ignore
                                      (Ojs.call x3135 "push"
                                         [|((match x3136 with
                                             | `U1 x3137 ->
                                                 Ojs.bool_to_js x3137
                                             | `U2 x3138 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x3138))|])
                                | None -> ());
                               x3135))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x3151 : 'tags this) ->
        fun ~type_:(x3142 : 'K) ->
          fun ~listener:(x3143 : this:t -> ev:any -> any) ->
            fun
              ?options:(x3144 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x3153 = this_to_js Obj.magic x3151 in
                   Ojs.call (Ojs.get_prop_ascii x3153 "removeEventListener")
                     "apply"
                     [|x3153;((let x3145 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3145 "push" [|(Obj.magic x3142)|]);
                               ignore
                                 (Ojs.call x3145 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x3149 : Ojs.t) ->
                                            fun (x3150 : Ojs.t) ->
                                              any_to_js
                                                (x3143 ~this:(t_of_js x3149)
                                                   ~ev:(any_of_js x3150))))|]);
                               (match x3144 with
                                | Some x3146 ->
                                    ignore
                                      (Ojs.call x3145 "push"
                                         [|((match x3146 with
                                             | `U1 x3147 ->
                                                 Ojs.bool_to_js x3147
                                             | `U2 x3148 ->
                                                 EventListenerOptions.t_to_js
                                                   x3148))|])
                                | None -> ());
                               x3145))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x3161 : 'tags this) ->
        fun ~type_:(x3154 : string) ->
          fun ~listener:(x3155 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x3156 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x3163 = this_to_js Obj.magic x3161 in
                   Ojs.call (Ojs.get_prop_ascii x3163 "removeEventListener")
                     "apply"
                     [|x3163;((let x3157 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3157 "push"
                                    [|(Ojs.string_to_js x3154)|]);
                               ignore
                                 (Ojs.call x3157 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x3155)|]);
                               (match x3156 with
                                | Some x3158 ->
                                    ignore
                                      (Ojs.call x3157 "push"
                                         [|((match x3158 with
                                             | `U1 x3159 ->
                                                 Ojs.bool_to_js x3159
                                             | `U2 x3160 ->
                                                 EventListenerOptions.t_to_js
                                                   x3160))|])
                                | None -> ());
                               x3157))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FontFaceSet")
             "prototype")
    let (create : FontFace.t list -> t) =
      fun (x3164 : FontFace.t list) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FontFaceSet")
             [|(Ojs.list_to_js FontFace.t_to_js x3164)|])
  end
module FontsStatic =
  struct
    let (onloading :
      unit -> (this:FontFaceSet.t -> ev:Event.t -> any) option) =
      fun () ->
        Ojs.option_of_js
          (fun (x3166 : Ojs.t) ->
             fun ~this:(x3167 : FontFaceSet.t) ->
               fun ~ev:(x3168 : Event.t) ->
                 any_of_js
                   (Ojs.apply x3166
                      [|(FontFaceSet.t_to_js x3167);(Event.t_to_js x3168)|]))
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts")
             "onloading")
    let (onloadingdone :
      unit -> (this:FontFaceSet.t -> ev:Event.t -> any) option) =
      fun () ->
        Ojs.option_of_js
          (fun (x3169 : Ojs.t) ->
             fun ~this:(x3170 : FontFaceSet.t) ->
               fun ~ev:(x3171 : Event.t) ->
                 any_of_js
                   (Ojs.apply x3169
                      [|(FontFaceSet.t_to_js x3170);(Event.t_to_js x3171)|]))
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts")
             "onloadingdone")
    let (onloadingerror :
      unit -> (this:FontFaceSet.t -> ev:Event.t -> any) option) =
      fun () ->
        Ojs.option_of_js
          (fun (x3172 : Ojs.t) ->
             fun ~this:(x3173 : FontFaceSet.t) ->
               fun ~ev:(x3174 : Event.t) ->
                 any_of_js
                   (Ojs.apply x3172
                      [|(FontFaceSet.t_to_js x3173);(Event.t_to_js x3174)|]))
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts")
             "onloadingerror")
    let (ready : unit -> FontFaceSet.t Promise.t_1) =
      fun () ->
        Promise.t_1_of_js FontFaceSet.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts") "ready")
    let (status : unit -> FontFaceSetLoadStatus.t) =
      fun () ->
        FontFaceSetLoadStatus.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts")
             "status")
    let (check : font:string -> ?text:string -> unit -> bool) =
      fun ~font:(x3176 : string) ->
        fun ?text:(x3177 : string option) ->
          fun () ->
            Ojs.bool_of_js
              (let x3180 = Ojs.get_prop_ascii Ojs.global "fonts" in
               Ojs.call (Ojs.get_prop_ascii x3180 "check") "apply"
                 [|x3180;((let x3178 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x3178 "push"
                                [|(Ojs.string_to_js x3176)|]);
                           (match x3177 with
                            | Some x3179 ->
                                ignore
                                  (Ojs.call x3178 "push"
                                     [|(Ojs.string_to_js x3179)|])
                            | None -> ());
                           x3178))|])
    let (load :
      font:string -> ?text:string -> unit -> FontFace.t list Promise.t_1) =
      fun ~font:(x3181 : string) ->
        fun ?text:(x3182 : string option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x3186 : Ojs.t) -> Ojs.list_of_js FontFace.t_of_js x3186)
              (let x3185 = Ojs.get_prop_ascii Ojs.global "fonts" in
               Ojs.call (Ojs.get_prop_ascii x3185 "load") "apply"
                 [|x3185;((let x3183 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x3183 "push"
                                [|(Ojs.string_to_js x3181)|]);
                           (match x3182 with
                            | Some x3184 ->
                                ignore
                                  (Ojs.call x3183 "push"
                                     [|(Ojs.string_to_js x3184)|])
                            | None -> ());
                           x3183))|])
    let (forEach :
      callbackfn:(value:FontFace.t ->
                    key:FontFace.t -> parent:FontFaceSet.t -> unit)
        -> ?thisArg:any -> unit -> unit)
      =
      fun
        ~callbackfn:(x3188 :
                      value:FontFace.t ->
                        key:FontFace.t -> parent:FontFaceSet.t -> unit)
        ->
        fun ?thisArg:(x3189 : any option) ->
          fun () ->
            ignore
              (let x3195 = Ojs.get_prop_ascii Ojs.global "fonts" in
               Ojs.call (Ojs.get_prop_ascii x3195 "forEach") "apply"
                 [|x3195;((let x3190 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x3190 "push"
                                [|(Ojs.fun_to_js 3
                                     (fun (x3192 : Ojs.t) ->
                                        fun (x3193 : Ojs.t) ->
                                          fun (x3194 : Ojs.t) ->
                                            x3188
                                              ~value:(FontFace.t_of_js x3192)
                                              ~key:(FontFace.t_of_js x3193)
                                              ~parent:(FontFaceSet.t_of_js
                                                         x3194)))|]);
                           (match x3189 with
                            | Some x3191 ->
                                ignore
                                  (Ojs.call x3190 "push"
                                     [|(any_to_js x3191)|])
                            | None -> ());
                           x3190))|])
    let (addEventListener :
      type_:'K ->
        listener:(this:FontFaceSet.t -> ev:any -> any) ->
          ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
            unit -> unit)
      =
      fun ~type_:(x3196 : 'K) ->
        fun ~listener:(x3197 : this:FontFaceSet.t -> ev:any -> any) ->
          fun
            ?options:(x3198 :
                       [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                         option)
            ->
            fun () ->
              ignore
                (let x3205 = Ojs.get_prop_ascii Ojs.global "fonts" in
                 Ojs.call (Ojs.get_prop_ascii x3205 "addEventListener")
                   "apply"
                   [|x3205;((let x3199 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3199 "push" [|(Obj.magic x3196)|]);
                             ignore
                               (Ojs.call x3199 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x3203 : Ojs.t) ->
                                          fun (x3204 : Ojs.t) ->
                                            any_to_js
                                              (x3197
                                                 ~this:(FontFaceSet.t_of_js
                                                          x3203)
                                                 ~ev:(any_of_js x3204))))|]);
                             (match x3198 with
                              | Some x3200 ->
                                  ignore
                                    (Ojs.call x3199 "push"
                                       [|((match x3200 with
                                           | `U1 x3201 ->
                                               Ojs.bool_to_js x3201
                                           | `U2 x3202 ->
                                               AddEventListenerOptions.t_to_js
                                                 x3202))|])
                              | None -> ());
                             x3199))|])
    let (addEventListener' :
      type_:string ->
        listener:EventListenerOrEventListenerObject.t ->
          ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
            unit -> unit)
      =
      fun ~type_:(x3206 : string) ->
        fun ~listener:(x3207 : EventListenerOrEventListenerObject.t) ->
          fun
            ?options:(x3208 :
                       [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                         option)
            ->
            fun () ->
              ignore
                (let x3213 = Ojs.get_prop_ascii Ojs.global "fonts" in
                 Ojs.call (Ojs.get_prop_ascii x3213 "addEventListener")
                   "apply"
                   [|x3213;((let x3209 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3209 "push"
                                  [|(Ojs.string_to_js x3206)|]);
                             ignore
                               (Ojs.call x3209 "push"
                                  [|(EventListenerOrEventListenerObject.t_to_js
                                       x3207)|]);
                             (match x3208 with
                              | Some x3210 ->
                                  ignore
                                    (Ojs.call x3209 "push"
                                       [|((match x3210 with
                                           | `U1 x3211 ->
                                               Ojs.bool_to_js x3211
                                           | `U2 x3212 ->
                                               AddEventListenerOptions.t_to_js
                                                 x3212))|])
                              | None -> ());
                             x3209))|])
    let (removeEventListener :
      type_:'K ->
        listener:(this:FontFaceSet.t -> ev:any -> any) ->
          ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
            unit -> unit)
      =
      fun ~type_:(x3214 : 'K) ->
        fun ~listener:(x3215 : this:FontFaceSet.t -> ev:any -> any) ->
          fun
            ?options:(x3216 :
                       [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                         option)
            ->
            fun () ->
              ignore
                (let x3223 = Ojs.get_prop_ascii Ojs.global "fonts" in
                 Ojs.call (Ojs.get_prop_ascii x3223 "removeEventListener")
                   "apply"
                   [|x3223;((let x3217 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3217 "push" [|(Obj.magic x3214)|]);
                             ignore
                               (Ojs.call x3217 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x3221 : Ojs.t) ->
                                          fun (x3222 : Ojs.t) ->
                                            any_to_js
                                              (x3215
                                                 ~this:(FontFaceSet.t_of_js
                                                          x3221)
                                                 ~ev:(any_of_js x3222))))|]);
                             (match x3216 with
                              | Some x3218 ->
                                  ignore
                                    (Ojs.call x3217 "push"
                                       [|((match x3218 with
                                           | `U1 x3219 ->
                                               Ojs.bool_to_js x3219
                                           | `U2 x3220 ->
                                               EventListenerOptions.t_to_js
                                                 x3220))|])
                              | None -> ());
                             x3217))|])
    let (removeEventListener' :
      type_:string ->
        listener:EventListenerOrEventListenerObject.t ->
          ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
            unit -> unit)
      =
      fun ~type_:(x3224 : string) ->
        fun ~listener:(x3225 : EventListenerOrEventListenerObject.t) ->
          fun
            ?options:(x3226 :
                       [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                         option)
            ->
            fun () ->
              ignore
                (let x3231 = Ojs.get_prop_ascii Ojs.global "fonts" in
                 Ojs.call (Ojs.get_prop_ascii x3231 "removeEventListener")
                   "apply"
                   [|x3231;((let x3227 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3227 "push"
                                  [|(Ojs.string_to_js x3224)|]);
                             ignore
                               (Ojs.call x3227 "push"
                                  [|(EventListenerOrEventListenerObject.t_to_js
                                       x3225)|]);
                             (match x3226 with
                              | Some x3228 ->
                                  ignore
                                    (Ojs.call x3227 "push"
                                       [|((match x3228 with
                                           | `U1 x3229 ->
                                               Ojs.bool_to_js x3229
                                           | `U2 x3230 ->
                                               EventListenerOptions.t_to_js
                                                 x3230))|])
                              | None -> ());
                             x3227))|])
  end
module Algorithm =
  struct
    type t = [ `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3233 : Ojs.t) -> t_of_js x3233
    and t_0_to_js : t_0 -> Ojs.t = fun (x3232 : t) -> t_to_js x3232
    type tags = [ `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Algorithm ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3236 : Ojs.t) -> intf_of_js __tags_of_js x3236
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3234 : __tags intf) -> intf_to_js __tags_to_js x3234
    let (get_name : 'tags this -> string) =
      fun (x3238 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3238) "name")
    let (set_name : 'tags this -> string -> unit) =
      fun (x3240 : 'tags this) ->
        fun (x3241 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3240) "name"
            (Ojs.string_to_js x3241)
    let (create : name:string -> unit -> t) =
      fun ~name:(x3243 : string) ->
        fun () ->
          let x3244 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3244 "name" (Ojs.string_to_js x3243);
          t_of_js x3244
    let cast_from = Obj.magic
  end
module RsaPssParams =
  struct
    type t = [ `Algorithm  | `RsaPssParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3246 : Ojs.t) -> t_of_js x3246
    and t_0_to_js : t_0 -> Ojs.t = fun (x3245 : t) -> t_to_js x3245
    type tags = [ `Algorithm  | `RsaPssParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RsaPssParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3249 : Ojs.t) -> intf_of_js __tags_of_js x3249
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3247 : __tags intf) -> intf_to_js __tags_to_js x3247
    let (get_saltLength : 'tags this -> float) =
      fun (x3251 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3251) "saltLength")
    let (set_saltLength : 'tags this -> float -> unit) =
      fun (x3253 : 'tags this) ->
        fun (x3254 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3253) "saltLength"
            (Ojs.float_to_js x3254)
    let (create : saltLength:float -> unit -> t) =
      fun ~saltLength:(x3256 : float) ->
        fun () ->
          let x3257 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3257 "saltLength" (Ojs.float_to_js x3256);
          t_of_js x3257
    let cast_from = Obj.magic
  end
module RsaOaepParams =
  struct
    type t = [ `Algorithm  | `RsaOaepParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3259 : Ojs.t) -> t_of_js x3259
    and t_0_to_js : t_0 -> Ojs.t = fun (x3258 : t) -> t_to_js x3258
    type tags = [ `Algorithm  | `RsaOaepParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RsaOaepParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3262 : Ojs.t) -> intf_of_js __tags_of_js x3262
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3260 : __tags intf) -> intf_to_js __tags_to_js x3260
    let (get_label : 'tags this -> BufferSource.t option) =
      fun (x3264 : 'tags this) ->
        Ojs.option_of_js BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3264) "label")
    let (set_label : 'tags this -> BufferSource.t -> unit) =
      fun (x3267 : 'tags this) ->
        fun (x3268 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3267) "label"
            (BufferSource.t_to_js x3268)
    let (create : ?label:BufferSource.t -> unit -> t) =
      fun ?label:(x3270 : BufferSource.t option) ->
        fun () ->
          let x3271 = Ojs.empty_obj () in
          (match x3270 with
           | Some x3272 ->
               Ojs.set_prop_ascii x3271 "label" (BufferSource.t_to_js x3272)
           | None -> ());
          t_of_js x3271
    let cast_from = Obj.magic
  end
module BigInteger =
  struct
    type t = Uint8Array.t_0
    let rec t_of_js : Ojs.t -> t =
      fun (x3274 : Ojs.t) -> Uint8Array.t_0_of_js x3274
    and t_to_js : t -> Ojs.t =
      fun (x3273 : Uint8Array.t_0) -> Uint8Array.t_0_to_js x3273
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3276 : Ojs.t) -> t_of_js x3276
    and t_0_to_js : t_0 -> Ojs.t = fun (x3275 : t) -> t_to_js x3275
  end
module RsaKeyGenParams =
  struct
    type t = [ `Algorithm  | `RsaKeyGenParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3278 : Ojs.t) -> t_of_js x3278
    and t_0_to_js : t_0 -> Ojs.t = fun (x3277 : t) -> t_to_js x3277
    type tags = [ `Algorithm  | `RsaKeyGenParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RsaKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3281 : Ojs.t) -> intf_of_js __tags_of_js x3281
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3279 : __tags intf) -> intf_to_js __tags_to_js x3279
    let (get_modulusLength : 'tags this -> float) =
      fun (x3283 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3283) "modulusLength")
    let (set_modulusLength : 'tags this -> float -> unit) =
      fun (x3285 : 'tags this) ->
        fun (x3286 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3285) "modulusLength"
            (Ojs.float_to_js x3286)
    let (get_publicExponent : 'tags this -> BigInteger.t) =
      fun (x3288 : 'tags this) ->
        BigInteger.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3288) "publicExponent")
    let (set_publicExponent : 'tags this -> BigInteger.t -> unit) =
      fun (x3290 : 'tags this) ->
        fun (x3291 : BigInteger.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3290) "publicExponent"
            (BigInteger.t_to_js x3291)
    let (create :
      modulusLength:float -> publicExponent:BigInteger.t -> unit -> t) =
      fun ~modulusLength:(x3293 : float) ->
        fun ~publicExponent:(x3294 : BigInteger.t) ->
          fun () ->
            let x3295 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x3295 "modulusLength" (Ojs.float_to_js x3293);
            Ojs.set_prop_ascii x3295 "publicExponent"
              (BigInteger.t_to_js x3294);
            t_of_js x3295
    let cast_from = Obj.magic
  end
module AlgorithmIdentifier =
  struct
    type t = [ `String of string  | `Other of Algorithm.t ] Primitive.t
    let rec t_of_js : Ojs.t -> t =
      fun (x3300 : Ojs.t) ->
        Primitive.t_of_js
          (fun (x3301 : Ojs.t) ->
             let x3302 = x3301 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x3302 "dummy") with
             | "String" -> `String (Ojs.string_of_js x3302)
             | "Other" -> `Other (Algorithm.t_of_js x3302)
             | _ -> assert false) x3300
    and t_to_js : t -> Ojs.t =
      fun
        (x3296 : [ `String of string  | `Other of Algorithm.t ] Primitive.t)
        ->
        Primitive.t_to_js
          (fun (x3297 : [ `String of string  | `Other of Algorithm.t ]) ->
             match x3297 with
             | `String x3298 -> Ojs.string_to_js x3298
             | `Other x3299 -> Algorithm.t_to_js x3299) x3296
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3304 : Ojs.t) -> t_of_js x3304
    and t_0_to_js : t_0 -> Ojs.t = fun (x3303 : t) -> t_to_js x3303
  end
module HashAlgorithmIdentifier =
  struct
    type t = AlgorithmIdentifier.t
    let rec t_of_js : Ojs.t -> t =
      fun (x3306 : Ojs.t) -> AlgorithmIdentifier.t_of_js x3306
    and t_to_js : t -> Ojs.t =
      fun (x3305 : AlgorithmIdentifier.t) ->
        AlgorithmIdentifier.t_to_js x3305
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3308 : Ojs.t) -> t_of_js x3308
    and t_0_to_js : t_0 -> Ojs.t = fun (x3307 : t) -> t_to_js x3307
  end
module RsaHashedKeyGenParams =
  struct
    type t =
      [ `Algorithm  | `RsaHashedKeyGenParams  | `RsaKeyGenParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3310 : Ojs.t) -> t_of_js x3310
    and t_0_to_js : t_0 -> Ojs.t = fun (x3309 : t) -> t_to_js x3309
    type tags = [ `Algorithm  | `RsaHashedKeyGenParams  | `RsaKeyGenParams ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `RsaHashedKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3313 : Ojs.t) -> intf_of_js __tags_of_js x3313
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3311 : __tags intf) -> intf_to_js __tags_to_js x3311
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x3315 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3315) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x3317 : 'tags this) ->
        fun (x3318 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3317) "hash"
            (HashAlgorithmIdentifier.t_to_js x3318)
    let (create : hash:HashAlgorithmIdentifier.t -> unit -> t) =
      fun ~hash:(x3320 : HashAlgorithmIdentifier.t) ->
        fun () ->
          let x3321 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3321 "hash"
            (HashAlgorithmIdentifier.t_to_js x3320);
          t_of_js x3321
    let cast_from = Obj.magic
  end
module RsaHashedImportParams =
  struct
    type t = [ `Algorithm  | `RsaHashedImportParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3323 : Ojs.t) -> t_of_js x3323
    and t_0_to_js : t_0 -> Ojs.t = fun (x3322 : t) -> t_to_js x3322
    type tags = [ `Algorithm  | `RsaHashedImportParams ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `RsaHashedImportParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3326 : Ojs.t) -> intf_of_js __tags_of_js x3326
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3324 : __tags intf) -> intf_to_js __tags_to_js x3324
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x3328 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3328) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x3330 : 'tags this) ->
        fun (x3331 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3330) "hash"
            (HashAlgorithmIdentifier.t_to_js x3331)
    let (create : hash:HashAlgorithmIdentifier.t -> unit -> t) =
      fun ~hash:(x3333 : HashAlgorithmIdentifier.t) ->
        fun () ->
          let x3334 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3334 "hash"
            (HashAlgorithmIdentifier.t_to_js x3333);
          t_of_js x3334
    let cast_from = Obj.magic
  end
module Pbkdf2Params =
  struct
    type t = [ `Algorithm  | `Pbkdf2Params ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3336 : Ojs.t) -> t_of_js x3336
    and t_0_to_js : t_0 -> Ojs.t = fun (x3335 : t) -> t_to_js x3335
    type tags = [ `Algorithm  | `Pbkdf2Params ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Pbkdf2Params ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3339 : Ojs.t) -> intf_of_js __tags_of_js x3339
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3337 : __tags intf) -> intf_to_js __tags_to_js x3337
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x3341 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3341) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x3343 : 'tags this) ->
        fun (x3344 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3343) "hash"
            (HashAlgorithmIdentifier.t_to_js x3344)
    let (get_iterations : 'tags this -> float) =
      fun (x3346 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3346) "iterations")
    let (set_iterations : 'tags this -> float -> unit) =
      fun (x3348 : 'tags this) ->
        fun (x3349 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3348) "iterations"
            (Ojs.float_to_js x3349)
    let (get_salt : 'tags this -> BufferSource.t) =
      fun (x3351 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3351) "salt")
    let (set_salt : 'tags this -> BufferSource.t -> unit) =
      fun (x3353 : 'tags this) ->
        fun (x3354 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3353) "salt"
            (BufferSource.t_to_js x3354)
    let (create :
      hash:HashAlgorithmIdentifier.t ->
        iterations:float -> salt:BufferSource.t -> unit -> t)
      =
      fun ~hash:(x3356 : HashAlgorithmIdentifier.t) ->
        fun ~iterations:(x3357 : float) ->
          fun ~salt:(x3358 : BufferSource.t) ->
            fun () ->
              let x3359 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x3359 "hash"
                (HashAlgorithmIdentifier.t_to_js x3356);
              Ojs.set_prop_ascii x3359 "iterations" (Ojs.float_to_js x3357);
              Ojs.set_prop_ascii x3359 "salt" (BufferSource.t_to_js x3358);
              t_of_js x3359
    let cast_from = Obj.magic
  end
module KeyFormat =
  struct
    type t = [ `L_s152_pkcs8  | `L_s162_raw  | `L_s186_spki  | `L_s99_jwk ]
    let rec t_of_js : Ojs.t -> t =
      fun (x3361 : Ojs.t) ->
        let x3362 = x3361 in
        match Ojs.string_of_js x3362 with
        | "pkcs8" -> `L_s152_pkcs8
        | "raw" -> `L_s162_raw
        | "spki" -> `L_s186_spki
        | "jwk" -> `L_s99_jwk
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x3360 :
          [ `L_s152_pkcs8  | `L_s162_raw  | `L_s186_spki  | `L_s99_jwk ])
        ->
        match x3360 with
        | `L_s152_pkcs8 -> Ojs.string_to_js "pkcs8"
        | `L_s162_raw -> Ojs.string_to_js "raw"
        | `L_s186_spki -> Ojs.string_to_js "spki"
        | `L_s99_jwk -> Ojs.string_to_js "jwk"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3364 : Ojs.t) -> t_of_js x3364
    and t_0_to_js : t_0 -> Ojs.t = fun (x3363 : t) -> t_to_js x3363
  end
module RsaOtherPrimesInfo =
  struct
    type t = [ `RsaOtherPrimesInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3366 : Ojs.t) -> t_of_js x3366
    and t_0_to_js : t_0 -> Ojs.t = fun (x3365 : t) -> t_to_js x3365
    type tags = [ `RsaOtherPrimesInfo ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RsaOtherPrimesInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3369 : Ojs.t) -> intf_of_js __tags_of_js x3369
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3367 : __tags intf) -> intf_to_js __tags_to_js x3367
    let (get_d : 'tags this -> string option) =
      fun (x3371 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3371) "d")
    let (set_d : 'tags this -> string -> unit) =
      fun (x3374 : 'tags this) ->
        fun (x3375 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3374) "d"
            (Ojs.string_to_js x3375)
    let (get_r : 'tags this -> string option) =
      fun (x3377 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3377) "r")
    let (set_r : 'tags this -> string -> unit) =
      fun (x3380 : 'tags this) ->
        fun (x3381 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3380) "r"
            (Ojs.string_to_js x3381)
    let (get_t : 'tags this -> string option) =
      fun (x3383 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3383) "t")
    let (set_t : 'tags this -> string -> unit) =
      fun (x3386 : 'tags this) ->
        fun (x3387 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3386) "t"
            (Ojs.string_to_js x3387)
    let (create : ?d:string -> ?r:string -> ?t:string -> unit -> t) =
      fun ?d:(x3389 : string option) ->
        fun ?r:(x3390 : string option) ->
          fun ?t:(x3391 : string option) ->
            fun () ->
              let x3392 = Ojs.empty_obj () in
              (match x3389 with
               | Some x3395 ->
                   Ojs.set_prop_ascii x3392 "d" (Ojs.string_to_js x3395)
               | None -> ());
              (match x3390 with
               | Some x3394 ->
                   Ojs.set_prop_ascii x3392 "r" (Ojs.string_to_js x3394)
               | None -> ());
              (match x3391 with
               | Some x3393 ->
                   Ojs.set_prop_ascii x3392 "t" (Ojs.string_to_js x3393)
               | None -> ());
              t_of_js x3392
    let cast_from = Obj.magic
  end
module JsonWebKey =
  struct
    type t = [ `JsonWebKey ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3397 : Ojs.t) -> t_of_js x3397
    and t_0_to_js : t_0 -> Ojs.t = fun (x3396 : t) -> t_to_js x3396
    type tags = [ `JsonWebKey ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `JsonWebKey ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3400 : Ojs.t) -> intf_of_js __tags_of_js x3400
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3398 : __tags intf) -> intf_to_js __tags_to_js x3398
    let (get_alg : 'tags this -> string option) =
      fun (x3402 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3402) "alg")
    let (set_alg : 'tags this -> string -> unit) =
      fun (x3405 : 'tags this) ->
        fun (x3406 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3405) "alg"
            (Ojs.string_to_js x3406)
    let (get_crv : 'tags this -> string option) =
      fun (x3408 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3408) "crv")
    let (set_crv : 'tags this -> string -> unit) =
      fun (x3411 : 'tags this) ->
        fun (x3412 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3411) "crv"
            (Ojs.string_to_js x3412)
    let (get_d : 'tags this -> string option) =
      fun (x3414 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3414) "d")
    let (set_d : 'tags this -> string -> unit) =
      fun (x3417 : 'tags this) ->
        fun (x3418 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3417) "d"
            (Ojs.string_to_js x3418)
    let (get_dp : 'tags this -> string option) =
      fun (x3420 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3420) "dp")
    let (set_dp : 'tags this -> string -> unit) =
      fun (x3423 : 'tags this) ->
        fun (x3424 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3423) "dp"
            (Ojs.string_to_js x3424)
    let (get_dq : 'tags this -> string option) =
      fun (x3426 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3426) "dq")
    let (set_dq : 'tags this -> string -> unit) =
      fun (x3429 : 'tags this) ->
        fun (x3430 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3429) "dq"
            (Ojs.string_to_js x3430)
    let (get_e : 'tags this -> string option) =
      fun (x3432 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3432) "e")
    let (set_e : 'tags this -> string -> unit) =
      fun (x3435 : 'tags this) ->
        fun (x3436 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3435) "e"
            (Ojs.string_to_js x3436)
    let (get_ext : 'tags this -> bool option) =
      fun (x3438 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3438) "ext")
    let (set_ext : 'tags this -> bool -> unit) =
      fun (x3441 : 'tags this) ->
        fun (x3442 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3441) "ext"
            (Ojs.bool_to_js x3442)
    let (get_k : 'tags this -> string option) =
      fun (x3444 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3444) "k")
    let (set_k : 'tags this -> string -> unit) =
      fun (x3447 : 'tags this) ->
        fun (x3448 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3447) "k"
            (Ojs.string_to_js x3448)
    let (get_key_ops : 'tags this -> string list option) =
      fun (x3450 : 'tags this) ->
        Ojs.option_of_js
          (fun (x3452 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x3452)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3450) "key_ops")
    let (set_key_ops : 'tags this -> string list -> unit) =
      fun (x3454 : 'tags this) ->
        fun (x3455 : string list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3454) "key_ops"
            (Ojs.list_to_js Ojs.string_to_js x3455)
    let (get_kty : 'tags this -> string option) =
      fun (x3458 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3458) "kty")
    let (set_kty : 'tags this -> string -> unit) =
      fun (x3461 : 'tags this) ->
        fun (x3462 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3461) "kty"
            (Ojs.string_to_js x3462)
    let (get_n : 'tags this -> string option) =
      fun (x3464 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3464) "n")
    let (set_n : 'tags this -> string -> unit) =
      fun (x3467 : 'tags this) ->
        fun (x3468 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3467) "n"
            (Ojs.string_to_js x3468)
    let (get_oth : 'tags this -> RsaOtherPrimesInfo.t list option) =
      fun (x3470 : 'tags this) ->
        Ojs.option_of_js
          (fun (x3472 : Ojs.t) ->
             Ojs.list_of_js RsaOtherPrimesInfo.t_of_js x3472)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3470) "oth")
    let (set_oth : 'tags this -> RsaOtherPrimesInfo.t list -> unit) =
      fun (x3474 : 'tags this) ->
        fun (x3475 : RsaOtherPrimesInfo.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3474) "oth"
            (Ojs.list_to_js RsaOtherPrimesInfo.t_to_js x3475)
    let (get_p : 'tags this -> string option) =
      fun (x3478 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3478) "p")
    let (set_p : 'tags this -> string -> unit) =
      fun (x3481 : 'tags this) ->
        fun (x3482 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3481) "p"
            (Ojs.string_to_js x3482)
    let (get_q : 'tags this -> string option) =
      fun (x3484 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3484) "q")
    let (set_q : 'tags this -> string -> unit) =
      fun (x3487 : 'tags this) ->
        fun (x3488 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3487) "q"
            (Ojs.string_to_js x3488)
    let (get_qi : 'tags this -> string option) =
      fun (x3490 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3490) "qi")
    let (set_qi : 'tags this -> string -> unit) =
      fun (x3493 : 'tags this) ->
        fun (x3494 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3493) "qi"
            (Ojs.string_to_js x3494)
    let (get_use : 'tags this -> string option) =
      fun (x3496 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3496) "use")
    let (set_use : 'tags this -> string -> unit) =
      fun (x3499 : 'tags this) ->
        fun (x3500 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3499) "use"
            (Ojs.string_to_js x3500)
    let (get_x : 'tags this -> string option) =
      fun (x3502 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3502) "x")
    let (set_x : 'tags this -> string -> unit) =
      fun (x3505 : 'tags this) ->
        fun (x3506 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3505) "x"
            (Ojs.string_to_js x3506)
    let (get_y : 'tags this -> string option) =
      fun (x3508 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3508) "y")
    let (set_y : 'tags this -> string -> unit) =
      fun (x3511 : 'tags this) ->
        fun (x3512 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3511) "y"
            (Ojs.string_to_js x3512)
    let (create :
      ?alg:string ->
        ?crv:string ->
          ?d:string ->
            ?dp:string ->
              ?dq:string ->
                ?e:string ->
                  ?ext:bool ->
                    ?k:string ->
                      ?key_ops:string list ->
                        ?kty:string ->
                          ?n:string ->
                            ?oth:RsaOtherPrimesInfo.t list ->
                              ?p:string ->
                                ?q:string ->
                                  ?qi:string ->
                                    ?use:string ->
                                      ?x:string -> ?y:string -> unit -> t)
      =
      fun ?alg:(x3514 : string option) ->
        fun ?crv:(x3515 : string option) ->
          fun ?d:(x3516 : string option) ->
            fun ?dp:(x3517 : string option) ->
              fun ?dq:(x3518 : string option) ->
                fun ?e:(x3519 : string option) ->
                  fun ?ext:(x3520 : bool option) ->
                    fun ?k:(x3521 : string option) ->
                      fun ?key_ops:(x3522 : string list option) ->
                        fun ?kty:(x3523 : string option) ->
                          fun ?n:(x3524 : string option) ->
                            fun
                              ?oth:(x3525 : RsaOtherPrimesInfo.t list option)
                              ->
                              fun ?p:(x3526 : string option) ->
                                fun ?q:(x3527 : string option) ->
                                  fun ?qi:(x3528 : string option) ->
                                    fun ?use:(x3529 : string option) ->
                                      fun ?x:(x3530 : string option) ->
                                        fun ?y:(x3531 : string option) ->
                                          fun () ->
                                            let x3532 = Ojs.empty_obj () in
                                            (match x3514 with
                                             | Some x3552 ->
                                                 Ojs.set_prop_ascii x3532
                                                   "alg"
                                                   (Ojs.string_to_js x3552)
                                             | None -> ());
                                            (match x3515 with
                                             | Some x3551 ->
                                                 Ojs.set_prop_ascii x3532
                                                   "crv"
                                                   (Ojs.string_to_js x3551)
                                             | None -> ());
                                            (match x3516 with
                                             | Some x3550 ->
                                                 Ojs.set_prop_ascii x3532 "d"
                                                   (Ojs.string_to_js x3550)
                                             | None -> ());
                                            (match x3517 with
                                             | Some x3549 ->
                                                 Ojs.set_prop_ascii x3532
                                                   "dp"
                                                   (Ojs.string_to_js x3549)
                                             | None -> ());
                                            (match x3518 with
                                             | Some x3548 ->
                                                 Ojs.set_prop_ascii x3532
                                                   "dq"
                                                   (Ojs.string_to_js x3548)
                                             | None -> ());
                                            (match x3519 with
                                             | Some x3547 ->
                                                 Ojs.set_prop_ascii x3532 "e"
                                                   (Ojs.string_to_js x3547)
                                             | None -> ());
                                            (match x3520 with
                                             | Some x3546 ->
                                                 Ojs.set_prop_ascii x3532
                                                   "ext"
                                                   (Ojs.bool_to_js x3546)
                                             | None -> ());
                                            (match x3521 with
                                             | Some x3545 ->
                                                 Ojs.set_prop_ascii x3532 "k"
                                                   (Ojs.string_to_js x3545)
                                             | None -> ());
                                            (match x3522 with
                                             | Some x3543 ->
                                                 Ojs.set_prop_ascii x3532
                                                   "keyOps"
                                                   (Ojs.list_to_js
                                                      Ojs.string_to_js x3543)
                                             | None -> ());
                                            (match x3523 with
                                             | Some x3542 ->
                                                 Ojs.set_prop_ascii x3532
                                                   "kty"
                                                   (Ojs.string_to_js x3542)
                                             | None -> ());
                                            (match x3524 with
                                             | Some x3541 ->
                                                 Ojs.set_prop_ascii x3532 "n"
                                                   (Ojs.string_to_js x3541)
                                             | None -> ());
                                            (match x3525 with
                                             | Some x3539 ->
                                                 Ojs.set_prop_ascii x3532
                                                   "oth"
                                                   (Ojs.list_to_js
                                                      RsaOtherPrimesInfo.t_to_js
                                                      x3539)
                                             | None -> ());
                                            (match x3526 with
                                             | Some x3538 ->
                                                 Ojs.set_prop_ascii x3532 "p"
                                                   (Ojs.string_to_js x3538)
                                             | None -> ());
                                            (match x3527 with
                                             | Some x3537 ->
                                                 Ojs.set_prop_ascii x3532 "q"
                                                   (Ojs.string_to_js x3537)
                                             | None -> ());
                                            (match x3528 with
                                             | Some x3536 ->
                                                 Ojs.set_prop_ascii x3532
                                                   "qi"
                                                   (Ojs.string_to_js x3536)
                                             | None -> ());
                                            (match x3529 with
                                             | Some x3535 ->
                                                 Ojs.set_prop_ascii x3532
                                                   "use"
                                                   (Ojs.string_to_js x3535)
                                             | None -> ());
                                            (match x3530 with
                                             | Some x3534 ->
                                                 Ojs.set_prop_ascii x3532 "x"
                                                   (Ojs.string_to_js x3534)
                                             | None -> ());
                                            (match x3531 with
                                             | Some x3533 ->
                                                 Ojs.set_prop_ascii x3532 "y"
                                                   (Ojs.string_to_js x3533)
                                             | None -> ());
                                            t_of_js x3532
    let cast_from = Obj.magic
  end
module HmacKeyGenParams =
  struct
    type t = [ `Algorithm  | `HmacKeyGenParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3554 : Ojs.t) -> t_of_js x3554
    and t_0_to_js : t_0 -> Ojs.t = fun (x3553 : t) -> t_to_js x3553
    type tags = [ `Algorithm  | `HmacKeyGenParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `HmacKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3557 : Ojs.t) -> intf_of_js __tags_of_js x3557
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3555 : __tags intf) -> intf_to_js __tags_to_js x3555
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x3559 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3559) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x3561 : 'tags this) ->
        fun (x3562 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3561) "hash"
            (HashAlgorithmIdentifier.t_to_js x3562)
    let (get_length : 'tags this -> float option) =
      fun (x3564 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3564) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x3567 : 'tags this) ->
        fun (x3568 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3567) "length"
            (Ojs.float_to_js x3568)
    let (create :
      hash:HashAlgorithmIdentifier.t -> ?length:float -> unit -> t) =
      fun ~hash:(x3570 : HashAlgorithmIdentifier.t) ->
        fun ?length:(x3571 : float option) ->
          fun () ->
            let x3572 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x3572 "hash"
              (HashAlgorithmIdentifier.t_to_js x3570);
            (match x3571 with
             | Some x3573 ->
                 Ojs.set_prop_ascii x3572 "length" (Ojs.float_to_js x3573)
             | None -> ());
            t_of_js x3572
    let cast_from = Obj.magic
  end
module HmacImportParams =
  struct
    type t = [ `Algorithm  | `HmacImportParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3575 : Ojs.t) -> t_of_js x3575
    and t_0_to_js : t_0 -> Ojs.t = fun (x3574 : t) -> t_to_js x3574
    type tags = [ `Algorithm  | `HmacImportParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `HmacImportParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3578 : Ojs.t) -> intf_of_js __tags_of_js x3578
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3576 : __tags intf) -> intf_to_js __tags_to_js x3576
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x3580 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3580) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x3582 : 'tags this) ->
        fun (x3583 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3582) "hash"
            (HashAlgorithmIdentifier.t_to_js x3583)
    let (get_length : 'tags this -> float option) =
      fun (x3585 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3585) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x3588 : 'tags this) ->
        fun (x3589 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3588) "length"
            (Ojs.float_to_js x3589)
    let (create :
      hash:HashAlgorithmIdentifier.t -> ?length:float -> unit -> t) =
      fun ~hash:(x3591 : HashAlgorithmIdentifier.t) ->
        fun ?length:(x3592 : float option) ->
          fun () ->
            let x3593 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x3593 "hash"
              (HashAlgorithmIdentifier.t_to_js x3591);
            (match x3592 with
             | Some x3594 ->
                 Ojs.set_prop_ascii x3593 "length" (Ojs.float_to_js x3594)
             | None -> ());
            t_of_js x3593
    let cast_from = Obj.magic
  end
module HkdfParams =
  struct
    type t = [ `Algorithm  | `HkdfParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3596 : Ojs.t) -> t_of_js x3596
    and t_0_to_js : t_0 -> Ojs.t = fun (x3595 : t) -> t_to_js x3595
    type tags = [ `Algorithm  | `HkdfParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `HkdfParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3599 : Ojs.t) -> intf_of_js __tags_of_js x3599
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3597 : __tags intf) -> intf_to_js __tags_to_js x3597
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x3601 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3601) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x3603 : 'tags this) ->
        fun (x3604 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3603) "hash"
            (HashAlgorithmIdentifier.t_to_js x3604)
    let (get_info : 'tags this -> BufferSource.t) =
      fun (x3606 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3606) "info")
    let (set_info : 'tags this -> BufferSource.t -> unit) =
      fun (x3608 : 'tags this) ->
        fun (x3609 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3608) "info"
            (BufferSource.t_to_js x3609)
    let (get_salt : 'tags this -> BufferSource.t) =
      fun (x3611 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3611) "salt")
    let (set_salt : 'tags this -> BufferSource.t -> unit) =
      fun (x3613 : 'tags this) ->
        fun (x3614 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3613) "salt"
            (BufferSource.t_to_js x3614)
    let (create :
      hash:HashAlgorithmIdentifier.t ->
        info:BufferSource.t -> salt:BufferSource.t -> unit -> t)
      =
      fun ~hash:(x3616 : HashAlgorithmIdentifier.t) ->
        fun ~info:(x3617 : BufferSource.t) ->
          fun ~salt:(x3618 : BufferSource.t) ->
            fun () ->
              let x3619 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x3619 "hash"
                (HashAlgorithmIdentifier.t_to_js x3616);
              Ojs.set_prop_ascii x3619 "info" (BufferSource.t_to_js x3617);
              Ojs.set_prop_ascii x3619 "salt" (BufferSource.t_to_js x3618);
              t_of_js x3619
    let cast_from = Obj.magic
  end
module EcdsaParams =
  struct
    type t = [ `Algorithm  | `EcdsaParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3621 : Ojs.t) -> t_of_js x3621
    and t_0_to_js : t_0 -> Ojs.t = fun (x3620 : t) -> t_to_js x3620
    type tags = [ `Algorithm  | `EcdsaParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EcdsaParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3624 : Ojs.t) -> intf_of_js __tags_of_js x3624
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3622 : __tags intf) -> intf_to_js __tags_to_js x3622
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x3626 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3626) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x3628 : 'tags this) ->
        fun (x3629 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3628) "hash"
            (HashAlgorithmIdentifier.t_to_js x3629)
    let (create : hash:HashAlgorithmIdentifier.t -> unit -> t) =
      fun ~hash:(x3631 : HashAlgorithmIdentifier.t) ->
        fun () ->
          let x3632 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3632 "hash"
            (HashAlgorithmIdentifier.t_to_js x3631);
          t_of_js x3632
    let cast_from = Obj.magic
  end
module KeyUsage =
  struct
    type t =
      [ `L_s182_sign  | `L_s204_unwrapKey  | `L_s208_verify 
      | `L_s216_wrapKey  | `L_s56_decrypt  | `L_s59_deriveBits 
      | `L_s60_deriveKey  | `L_s66_encrypt ]
    let rec t_of_js : Ojs.t -> t =
      fun (x3634 : Ojs.t) ->
        let x3635 = x3634 in
        match Ojs.string_of_js x3635 with
        | "sign" -> `L_s182_sign
        | "unwrapKey" -> `L_s204_unwrapKey
        | "verify" -> `L_s208_verify
        | "wrapKey" -> `L_s216_wrapKey
        | "decrypt" -> `L_s56_decrypt
        | "deriveBits" -> `L_s59_deriveBits
        | "deriveKey" -> `L_s60_deriveKey
        | "encrypt" -> `L_s66_encrypt
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x3633 :
          [ `L_s182_sign  | `L_s204_unwrapKey  | `L_s208_verify 
          | `L_s216_wrapKey  | `L_s56_decrypt  | `L_s59_deriveBits 
          | `L_s60_deriveKey  | `L_s66_encrypt ])
        ->
        match x3633 with
        | `L_s182_sign -> Ojs.string_to_js "sign"
        | `L_s204_unwrapKey -> Ojs.string_to_js "unwrapKey"
        | `L_s208_verify -> Ojs.string_to_js "verify"
        | `L_s216_wrapKey -> Ojs.string_to_js "wrapKey"
        | `L_s56_decrypt -> Ojs.string_to_js "decrypt"
        | `L_s59_deriveBits -> Ojs.string_to_js "deriveBits"
        | `L_s60_deriveKey -> Ojs.string_to_js "deriveKey"
        | `L_s66_encrypt -> Ojs.string_to_js "encrypt"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3637 : Ojs.t) -> t_of_js x3637
    and t_0_to_js : t_0 -> Ojs.t = fun (x3636 : t) -> t_to_js x3636
  end
module KeyType =
  struct
    type t = [ `L_s157_private  | `L_s160_public  | `L_s178_secret ]
    let rec t_of_js : Ojs.t -> t =
      fun (x3639 : Ojs.t) ->
        let x3640 = x3639 in
        match Ojs.string_of_js x3640 with
        | "private" -> `L_s157_private
        | "public" -> `L_s160_public
        | "secret" -> `L_s178_secret
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x3638 : [ `L_s157_private  | `L_s160_public  | `L_s178_secret ])
        ->
        match x3638 with
        | `L_s157_private -> Ojs.string_to_js "private"
        | `L_s160_public -> Ojs.string_to_js "public"
        | `L_s178_secret -> Ojs.string_to_js "secret"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3642 : Ojs.t) -> t_of_js x3642
    and t_0_to_js : t_0 -> Ojs.t = fun (x3641 : t) -> t_to_js x3641
  end
module KeyAlgorithm =
  struct
    type t = [ `KeyAlgorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3644 : Ojs.t) -> t_of_js x3644
    and t_0_to_js : t_0 -> Ojs.t = fun (x3643 : t) -> t_to_js x3643
    type tags = [ `KeyAlgorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `KeyAlgorithm ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3647 : Ojs.t) -> intf_of_js __tags_of_js x3647
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3645 : __tags intf) -> intf_to_js __tags_to_js x3645
    let (get_name : 'tags this -> string) =
      fun (x3649 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3649) "name")
    let (set_name : 'tags this -> string -> unit) =
      fun (x3651 : 'tags this) ->
        fun (x3652 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3651) "name"
            (Ojs.string_to_js x3652)
    let (create : name:string -> unit -> t) =
      fun ~name:(x3654 : string) ->
        fun () ->
          let x3655 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3655 "name" (Ojs.string_to_js x3654);
          t_of_js x3655
    let cast_from = Obj.magic
  end
module CryptoKey =
  struct
    type t = [ `CryptoKey ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3657 : Ojs.t) -> t_of_js x3657
    and t_0_to_js : t_0 -> Ojs.t = fun (x3656 : t) -> t_to_js x3656
    type tags = [ `CryptoKey ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CryptoKey ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3660 : Ojs.t) -> intf_of_js __tags_of_js x3660
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3658 : __tags intf) -> intf_to_js __tags_to_js x3658
    let (get_algorithm : 'tags this -> KeyAlgorithm.t) =
      fun (x3662 : 'tags this) ->
        KeyAlgorithm.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3662) "algorithm")
    let (get_extractable : 'tags this -> bool) =
      fun (x3664 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3664) "extractable")
    let (get_type : 'tags this -> KeyType.t) =
      fun (x3666 : 'tags this) ->
        KeyType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3666) "type")
    let (get_usages : 'tags this -> KeyUsage.t list) =
      fun (x3668 : 'tags this) ->
        Ojs.list_of_js KeyUsage.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3668) "usages")
    let (create :
      algorithm:KeyAlgorithm.t ->
        extractable:bool ->
          type_:KeyType.t -> usages:KeyUsage.t list -> unit -> t)
      =
      fun ~algorithm:(x3671 : KeyAlgorithm.t) ->
        fun ~extractable:(x3672 : bool) ->
          fun ~type_:(x3673 : KeyType.t) ->
            fun ~usages:(x3674 : KeyUsage.t list) ->
              fun () ->
                let x3675 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x3675 "algorithm"
                  (KeyAlgorithm.t_to_js x3671);
                Ojs.set_prop_ascii x3675 "extractable" (Ojs.bool_to_js x3672);
                Ojs.set_prop_ascii x3675 "type" (KeyType.t_to_js x3673);
                Ojs.set_prop_ascii x3675 "usages"
                  (Ojs.list_to_js KeyUsage.t_to_js x3674);
                t_of_js x3675
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CryptoKey")
             "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CryptoKey") [||])
  end
module EcdhKeyDeriveParams =
  struct
    type t = [ `Algorithm  | `EcdhKeyDeriveParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3678 : Ojs.t) -> t_of_js x3678
    and t_0_to_js : t_0 -> Ojs.t = fun (x3677 : t) -> t_to_js x3677
    type tags = [ `Algorithm  | `EcdhKeyDeriveParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EcdhKeyDeriveParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3681 : Ojs.t) -> intf_of_js __tags_of_js x3681
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3679 : __tags intf) -> intf_to_js __tags_to_js x3679
    let (get_public : 'tags this -> CryptoKey.t) =
      fun (x3683 : 'tags this) ->
        CryptoKey.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3683) "public")
    let (set_public : 'tags this -> CryptoKey.t -> unit) =
      fun (x3685 : 'tags this) ->
        fun (x3686 : CryptoKey.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3685) "public"
            (CryptoKey.t_to_js x3686)
    let (create : public:CryptoKey.t -> unit -> t) =
      fun ~public:(x3688 : CryptoKey.t) ->
        fun () ->
          let x3689 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3689 "public" (CryptoKey.t_to_js x3688);
          t_of_js x3689
    let cast_from = Obj.magic
  end
module NamedCurve =
  struct
    type t = string
    let rec t_of_js : Ojs.t -> t =
      fun (x3691 : Ojs.t) -> Ojs.string_of_js x3691
    and t_to_js : t -> Ojs.t = fun (x3690 : string) -> Ojs.string_to_js x3690
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3693 : Ojs.t) -> t_of_js x3693
    and t_0_to_js : t_0 -> Ojs.t = fun (x3692 : t) -> t_to_js x3692
  end
module EcKeyImportParams =
  struct
    type t = [ `Algorithm  | `EcKeyImportParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3695 : Ojs.t) -> t_of_js x3695
    and t_0_to_js : t_0 -> Ojs.t = fun (x3694 : t) -> t_to_js x3694
    type tags = [ `Algorithm  | `EcKeyImportParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EcKeyImportParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3698 : Ojs.t) -> intf_of_js __tags_of_js x3698
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3696 : __tags intf) -> intf_to_js __tags_to_js x3696
    let (get_namedCurve : 'tags this -> NamedCurve.t) =
      fun (x3700 : 'tags this) ->
        NamedCurve.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3700) "namedCurve")
    let (set_namedCurve : 'tags this -> NamedCurve.t -> unit) =
      fun (x3702 : 'tags this) ->
        fun (x3703 : NamedCurve.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3702) "namedCurve"
            (NamedCurve.t_to_js x3703)
    let (create : namedCurve:NamedCurve.t -> unit -> t) =
      fun ~namedCurve:(x3705 : NamedCurve.t) ->
        fun () ->
          let x3706 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3706 "namedCurve" (NamedCurve.t_to_js x3705);
          t_of_js x3706
    let cast_from = Obj.magic
  end
module EcKeyGenParams =
  struct
    type t = [ `Algorithm  | `EcKeyGenParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3708 : Ojs.t) -> t_of_js x3708
    and t_0_to_js : t_0 -> Ojs.t = fun (x3707 : t) -> t_to_js x3707
    type tags = [ `Algorithm  | `EcKeyGenParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EcKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3711 : Ojs.t) -> intf_of_js __tags_of_js x3711
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3709 : __tags intf) -> intf_to_js __tags_to_js x3709
    let (get_namedCurve : 'tags this -> NamedCurve.t) =
      fun (x3713 : 'tags this) ->
        NamedCurve.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3713) "namedCurve")
    let (set_namedCurve : 'tags this -> NamedCurve.t -> unit) =
      fun (x3715 : 'tags this) ->
        fun (x3716 : NamedCurve.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3715) "namedCurve"
            (NamedCurve.t_to_js x3716)
    let (create : namedCurve:NamedCurve.t -> unit -> t) =
      fun ~namedCurve:(x3718 : NamedCurve.t) ->
        fun () ->
          let x3719 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3719 "namedCurve" (NamedCurve.t_to_js x3718);
          t_of_js x3719
    let cast_from = Obj.magic
  end
module CryptoKeyPair =
  struct
    type t = [ `CryptoKeyPair ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3721 : Ojs.t) -> t_of_js x3721
    and t_0_to_js : t_0 -> Ojs.t = fun (x3720 : t) -> t_to_js x3720
    type tags = [ `CryptoKeyPair ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CryptoKeyPair ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3724 : Ojs.t) -> intf_of_js __tags_of_js x3724
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3722 : __tags intf) -> intf_to_js __tags_to_js x3722
    let (get_privateKey : 'tags this -> CryptoKey.t) =
      fun (x3726 : 'tags this) ->
        CryptoKey.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3726) "privateKey")
    let (set_privateKey : 'tags this -> CryptoKey.t -> unit) =
      fun (x3728 : 'tags this) ->
        fun (x3729 : CryptoKey.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3728) "privateKey"
            (CryptoKey.t_to_js x3729)
    let (get_publicKey : 'tags this -> CryptoKey.t) =
      fun (x3731 : 'tags this) ->
        CryptoKey.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3731) "publicKey")
    let (set_publicKey : 'tags this -> CryptoKey.t -> unit) =
      fun (x3733 : 'tags this) ->
        fun (x3734 : CryptoKey.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3733) "publicKey"
            (CryptoKey.t_to_js x3734)
    let (create :
      privateKey:CryptoKey.t -> publicKey:CryptoKey.t -> unit -> t) =
      fun ~privateKey:(x3736 : CryptoKey.t) ->
        fun ~publicKey:(x3737 : CryptoKey.t) ->
          fun () ->
            let x3738 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x3738 "privateKey" (CryptoKey.t_to_js x3736);
            Ojs.set_prop_ascii x3738 "publicKey" (CryptoKey.t_to_js x3737);
            t_of_js x3738
    let cast_from = Obj.magic
  end
module AesKeyGenParams =
  struct
    type t = [ `AesKeyGenParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3740 : Ojs.t) -> t_of_js x3740
    and t_0_to_js : t_0 -> Ojs.t = fun (x3739 : t) -> t_to_js x3739
    type tags = [ `AesKeyGenParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3743 : Ojs.t) -> intf_of_js __tags_of_js x3743
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3741 : __tags intf) -> intf_to_js __tags_to_js x3741
    let (get_length : 'tags this -> float) =
      fun (x3745 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3745) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x3747 : 'tags this) ->
        fun (x3748 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3747) "length"
            (Ojs.float_to_js x3748)
    let (create : length:float -> unit -> t) =
      fun ~length:(x3750 : float) ->
        fun () ->
          let x3751 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3751 "length" (Ojs.float_to_js x3750);
          t_of_js x3751
    let cast_from = Obj.magic
  end
module AesKeyAlgorithm =
  struct
    type t = [ `AesKeyAlgorithm  | `KeyAlgorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3753 : Ojs.t) -> t_of_js x3753
    and t_0_to_js : t_0 -> Ojs.t = fun (x3752 : t) -> t_to_js x3752
    type tags = [ `AesKeyAlgorithm  | `KeyAlgorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesKeyAlgorithm ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3756 : Ojs.t) -> intf_of_js __tags_of_js x3756
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3754 : __tags intf) -> intf_to_js __tags_to_js x3754
    let (get_length : 'tags this -> float) =
      fun (x3758 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3758) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x3760 : 'tags this) ->
        fun (x3761 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3760) "length"
            (Ojs.float_to_js x3761)
    let (create : length:float -> unit -> t) =
      fun ~length:(x3763 : float) ->
        fun () ->
          let x3764 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3764 "length" (Ojs.float_to_js x3763);
          t_of_js x3764
    let cast_from = Obj.magic
  end
module AesGcmParams =
  struct
    type t = [ `AesGcmParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3766 : Ojs.t) -> t_of_js x3766
    and t_0_to_js : t_0 -> Ojs.t = fun (x3765 : t) -> t_to_js x3765
    type tags = [ `AesGcmParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesGcmParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3769 : Ojs.t) -> intf_of_js __tags_of_js x3769
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3767 : __tags intf) -> intf_to_js __tags_to_js x3767
    let (get_additionalData : 'tags this -> BufferSource.t option) =
      fun (x3771 : 'tags this) ->
        Ojs.option_of_js BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3771) "additionalData")
    let (set_additionalData : 'tags this -> BufferSource.t -> unit) =
      fun (x3774 : 'tags this) ->
        fun (x3775 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3774) "additionalData"
            (BufferSource.t_to_js x3775)
    let (get_iv : 'tags this -> BufferSource.t) =
      fun (x3777 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3777) "iv")
    let (set_iv : 'tags this -> BufferSource.t -> unit) =
      fun (x3779 : 'tags this) ->
        fun (x3780 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3779) "iv"
            (BufferSource.t_to_js x3780)
    let (get_tagLength : 'tags this -> float option) =
      fun (x3782 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3782) "tagLength")
    let (set_tagLength : 'tags this -> float -> unit) =
      fun (x3785 : 'tags this) ->
        fun (x3786 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3785) "tagLength"
            (Ojs.float_to_js x3786)
    let (create :
      ?additionalData:BufferSource.t ->
        iv:BufferSource.t -> ?tagLength:float -> unit -> t)
      =
      fun ?additionalData:(x3788 : BufferSource.t option) ->
        fun ~iv:(x3789 : BufferSource.t) ->
          fun ?tagLength:(x3790 : float option) ->
            fun () ->
              let x3791 = Ojs.empty_obj () in
              (match x3788 with
               | Some x3793 ->
                   Ojs.set_prop_ascii x3791 "additionalData"
                     (BufferSource.t_to_js x3793)
               | None -> ());
              Ojs.set_prop_ascii x3791 "iv" (BufferSource.t_to_js x3789);
              (match x3790 with
               | Some x3792 ->
                   Ojs.set_prop_ascii x3791 "tagLength"
                     (Ojs.float_to_js x3792)
               | None -> ());
              t_of_js x3791
    let cast_from = Obj.magic
  end
module AesDerivedKeyParams =
  struct
    type t = [ `AesDerivedKeyParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3795 : Ojs.t) -> t_of_js x3795
    and t_0_to_js : t_0 -> Ojs.t = fun (x3794 : t) -> t_to_js x3794
    type tags = [ `AesDerivedKeyParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesDerivedKeyParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3798 : Ojs.t) -> intf_of_js __tags_of_js x3798
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3796 : __tags intf) -> intf_to_js __tags_to_js x3796
    let (get_length : 'tags this -> float) =
      fun (x3800 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3800) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x3802 : 'tags this) ->
        fun (x3803 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3802) "length"
            (Ojs.float_to_js x3803)
    let (create : length:float -> unit -> t) =
      fun ~length:(x3805 : float) ->
        fun () ->
          let x3806 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3806 "length" (Ojs.float_to_js x3805);
          t_of_js x3806
    let cast_from = Obj.magic
  end
module AesCtrParams =
  struct
    type t = [ `AesCtrParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3808 : Ojs.t) -> t_of_js x3808
    and t_0_to_js : t_0 -> Ojs.t = fun (x3807 : t) -> t_to_js x3807
    type tags = [ `AesCtrParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesCtrParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3811 : Ojs.t) -> intf_of_js __tags_of_js x3811
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3809 : __tags intf) -> intf_to_js __tags_to_js x3809
    let (get_counter : 'tags this -> BufferSource.t) =
      fun (x3813 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3813) "counter")
    let (set_counter : 'tags this -> BufferSource.t -> unit) =
      fun (x3815 : 'tags this) ->
        fun (x3816 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3815) "counter"
            (BufferSource.t_to_js x3816)
    let (get_length : 'tags this -> float) =
      fun (x3818 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3818) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x3820 : 'tags this) ->
        fun (x3821 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3820) "length"
            (Ojs.float_to_js x3821)
    let (create : counter:BufferSource.t -> length:float -> unit -> t) =
      fun ~counter:(x3823 : BufferSource.t) ->
        fun ~length:(x3824 : float) ->
          fun () ->
            let x3825 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x3825 "counter" (BufferSource.t_to_js x3823);
            Ojs.set_prop_ascii x3825 "length" (Ojs.float_to_js x3824);
            t_of_js x3825
    let cast_from = Obj.magic
  end
module AesCbcParams =
  struct
    type t = [ `AesCbcParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3827 : Ojs.t) -> t_of_js x3827
    and t_0_to_js : t_0 -> Ojs.t = fun (x3826 : t) -> t_to_js x3826
    type tags = [ `AesCbcParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesCbcParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3830 : Ojs.t) -> intf_of_js __tags_of_js x3830
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3828 : __tags intf) -> intf_to_js __tags_to_js x3828
    let (get_iv : 'tags this -> BufferSource.t) =
      fun (x3832 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3832) "iv")
    let (set_iv : 'tags this -> BufferSource.t -> unit) =
      fun (x3834 : 'tags this) ->
        fun (x3835 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3834) "iv"
            (BufferSource.t_to_js x3835)
    let (create : iv:BufferSource.t -> unit -> t) =
      fun ~iv:(x3837 : BufferSource.t) ->
        fun () ->
          let x3838 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3838 "iv" (BufferSource.t_to_js x3837);
          t_of_js x3838
    let cast_from = Obj.magic
  end
module SubtleCrypto =
  struct
    type t = [ `SubtleCrypto ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3840 : Ojs.t) -> t_of_js x3840
    and t_0_to_js : t_0 -> Ojs.t = fun (x3839 : t) -> t_to_js x3839
    type tags = [ `SubtleCrypto ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `SubtleCrypto ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3843 : Ojs.t) -> intf_of_js __tags_of_js x3843
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3841 : __tags intf) -> intf_to_js __tags_to_js x3841
    let (decrypt :
      'tags this ->
        algorithm:[ `U1 of AlgorithmIdentifier.t  | `U2 of RsaOaepParams.t 
                  | `U3 of AesCtrParams.t  | `U4 of AesCbcParams.t 
                  | `U5 of AesGcmParams.t ]
          -> key:CryptoKey.t -> data:BufferSource.t -> any Promise.t_1)
      =
      fun (x3853 : 'tags this) ->
        fun
          ~algorithm:(x3845 :
                       [ `U1 of AlgorithmIdentifier.t 
                       | `U2 of RsaOaepParams.t  | `U3 of AesCtrParams.t 
                       | `U4 of AesCbcParams.t  | `U5 of AesGcmParams.t ])
          ->
          fun ~key:(x3851 : CryptoKey.t) ->
            fun ~data:(x3852 : BufferSource.t) ->
              Promise.t_1_of_js any_of_js
                (Ojs.call (this_to_js Obj.magic x3853) "decrypt"
                   [|((match x3845 with
                       | `U1 x3846 -> AlgorithmIdentifier.t_to_js x3846
                       | `U2 x3847 -> RsaOaepParams.t_to_js x3847
                       | `U3 x3848 -> AesCtrParams.t_to_js x3848
                       | `U4 x3849 -> AesCbcParams.t_to_js x3849
                       | `U5 x3850 -> AesGcmParams.t_to_js x3850));(CryptoKey.t_to_js
                                                                    x3851);(
                     BufferSource.t_to_js x3852)|])
    let (deriveBits :
      'tags this ->
        algorithm:[ `U1 of AlgorithmIdentifier.t 
                  | `U2 of EcdhKeyDeriveParams.t  | `U3 of HkdfParams.t 
                  | `U4 of Pbkdf2Params.t ]
          ->
          baseKey:CryptoKey.t -> length:float -> ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x3863 : 'tags this) ->
        fun
          ~algorithm:(x3856 :
                       [ `U1 of AlgorithmIdentifier.t 
                       | `U2 of EcdhKeyDeriveParams.t  | `U3 of HkdfParams.t 
                       | `U4 of Pbkdf2Params.t ])
          ->
          fun ~baseKey:(x3861 : CryptoKey.t) ->
            fun ~length:(x3862 : float) ->
              Promise.t_1_of_js ArrayBuffer.t_0_of_js
                (Ojs.call (this_to_js Obj.magic x3863) "deriveBits"
                   [|((match x3856 with
                       | `U1 x3857 -> AlgorithmIdentifier.t_to_js x3857
                       | `U2 x3858 -> EcdhKeyDeriveParams.t_to_js x3858
                       | `U3 x3859 -> HkdfParams.t_to_js x3859
                       | `U4 x3860 -> Pbkdf2Params.t_to_js x3860));(CryptoKey.t_to_js
                                                                    x3861);(
                     Ojs.float_to_js x3862)|])
    let (deriveKey :
      'tags this ->
        algorithm:[ `U1 of AlgorithmIdentifier.t 
                  | `U2 of EcdhKeyDeriveParams.t  | `U3 of HkdfParams.t 
                  | `U4 of Pbkdf2Params.t ]
          ->
          baseKey:CryptoKey.t ->
            derivedKeyType:[ `U1 of AlgorithmIdentifier.t 
                           | `U2 of AesDerivedKeyParams.t 
                           | `U3 of HmacImportParams.t 
                           | `U4 of HkdfParams.t  | `U5 of Pbkdf2Params.t ]
              ->
              extractable:bool ->
                keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x3881 : 'tags this) ->
        fun
          ~algorithm:(x3866 :
                       [ `U1 of AlgorithmIdentifier.t 
                       | `U2 of EcdhKeyDeriveParams.t  | `U3 of HkdfParams.t 
                       | `U4 of Pbkdf2Params.t ])
          ->
          fun ~baseKey:(x3871 : CryptoKey.t) ->
            fun
              ~derivedKeyType:(x3872 :
                                [ `U1 of AlgorithmIdentifier.t 
                                | `U2 of AesDerivedKeyParams.t 
                                | `U3 of HmacImportParams.t 
                                | `U4 of HkdfParams.t 
                                | `U5 of Pbkdf2Params.t ])
              ->
              fun ~extractable:(x3878 : bool) ->
                fun ~keyUsages:(x3879 : KeyUsage.t list) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x3881) "deriveKey"
                       [|((match x3866 with
                           | `U1 x3867 -> AlgorithmIdentifier.t_to_js x3867
                           | `U2 x3868 -> EcdhKeyDeriveParams.t_to_js x3868
                           | `U3 x3869 -> HkdfParams.t_to_js x3869
                           | `U4 x3870 -> Pbkdf2Params.t_to_js x3870));(
                         CryptoKey.t_to_js x3871);((match x3872 with
                                                    | `U1 x3873 ->
                                                        AlgorithmIdentifier.t_to_js
                                                          x3873
                                                    | `U2 x3874 ->
                                                        AesDerivedKeyParams.t_to_js
                                                          x3874
                                                    | `U3 x3875 ->
                                                        HmacImportParams.t_to_js
                                                          x3875
                                                    | `U4 x3876 ->
                                                        HkdfParams.t_to_js
                                                          x3876
                                                    | `U5 x3877 ->
                                                        Pbkdf2Params.t_to_js
                                                          x3877));(Ojs.bool_to_js
                                                                    x3878);(
                         Ojs.list_to_js KeyUsage.t_to_js x3879)|])
    let (digest :
      'tags this ->
        algorithm:AlgorithmIdentifier.t ->
          data:BufferSource.t -> ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x3886 : 'tags this) ->
        fun ~algorithm:(x3884 : AlgorithmIdentifier.t) ->
          fun ~data:(x3885 : BufferSource.t) ->
            Promise.t_1_of_js ArrayBuffer.t_0_of_js
              (Ojs.call (this_to_js Obj.magic x3886) "digest"
                 [|(AlgorithmIdentifier.t_to_js x3884);(BufferSource.t_to_js
                                                          x3885)|])
    let (encrypt :
      'tags this ->
        algorithm:[ `U1 of AlgorithmIdentifier.t  | `U2 of RsaOaepParams.t 
                  | `U3 of AesCtrParams.t  | `U4 of AesCbcParams.t 
                  | `U5 of AesGcmParams.t ]
          -> key:CryptoKey.t -> data:BufferSource.t -> any Promise.t_1)
      =
      fun (x3897 : 'tags this) ->
        fun
          ~algorithm:(x3889 :
                       [ `U1 of AlgorithmIdentifier.t 
                       | `U2 of RsaOaepParams.t  | `U3 of AesCtrParams.t 
                       | `U4 of AesCbcParams.t  | `U5 of AesGcmParams.t ])
          ->
          fun ~key:(x3895 : CryptoKey.t) ->
            fun ~data:(x3896 : BufferSource.t) ->
              Promise.t_1_of_js any_of_js
                (Ojs.call (this_to_js Obj.magic x3897) "encrypt"
                   [|((match x3889 with
                       | `U1 x3890 -> AlgorithmIdentifier.t_to_js x3890
                       | `U2 x3891 -> RsaOaepParams.t_to_js x3891
                       | `U3 x3892 -> AesCtrParams.t_to_js x3892
                       | `U4 x3893 -> AesCbcParams.t_to_js x3893
                       | `U5 x3894 -> AesGcmParams.t_to_js x3894));(CryptoKey.t_to_js
                                                                    x3895);(
                     BufferSource.t_to_js x3896)|])
    let (exportKey :
      'tags this ->
        format:[ `L_s99_jwk ] -> key:CryptoKey.t -> JsonWebKey.t Promise.t_1)
      =
      fun (x3902 : 'tags this) ->
        fun ~format:(x3900 : [ `L_s99_jwk ]) ->
          fun ~key:(x3901 : CryptoKey.t) ->
            Promise.t_1_of_js JsonWebKey.t_of_js
              (Ojs.call (this_to_js Obj.magic x3902) "exportKey"
                 [|((match x3900 with | `L_s99_jwk -> Ojs.string_to_js "jwk"));(
                   CryptoKey.t_to_js x3901)|])
    let (exportKey' :
      'tags this ->
        format:(KeyFormat.t, [ `L_s99_jwk ]) Exclude.t_2 ->
          key:CryptoKey.t -> ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x3909 : 'tags this) ->
        fun ~format:(x3905 : (KeyFormat.t, [ `L_s99_jwk ]) Exclude.t_2) ->
          fun ~key:(x3908 : CryptoKey.t) ->
            Promise.t_1_of_js ArrayBuffer.t_0_of_js
              (Ojs.call (this_to_js Obj.magic x3909) "exportKey"
                 [|(Exclude.t_2_to_js KeyFormat.t_to_js
                      (fun (x3907 : [ `L_s99_jwk ]) ->
                         match x3907 with
                         | `L_s99_jwk -> Ojs.string_to_js "jwk") x3905);(
                   CryptoKey.t_to_js x3908)|])
    let (generateKey :
      'tags this ->
        algorithm:[ `U1 of RsaHashedKeyGenParams.t 
                  | `U2 of EcKeyGenParams.t ]
          ->
          extractable:bool ->
            keyUsages:KeyUsage.t list -> CryptoKeyPair.t Promise.t_1)
      =
      fun (x3918 : 'tags this) ->
        fun
          ~algorithm:(x3912 :
                       [ `U1 of RsaHashedKeyGenParams.t 
                       | `U2 of EcKeyGenParams.t ])
          ->
          fun ~extractable:(x3915 : bool) ->
            fun ~keyUsages:(x3916 : KeyUsage.t list) ->
              Promise.t_1_of_js CryptoKeyPair.t_of_js
                (Ojs.call (this_to_js Obj.magic x3918) "generateKey"
                   [|((match x3912 with
                       | `U1 x3913 -> RsaHashedKeyGenParams.t_to_js x3913
                       | `U2 x3914 -> EcKeyGenParams.t_to_js x3914));(
                     Ojs.bool_to_js x3915);(Ojs.list_to_js KeyUsage.t_to_js
                                              x3916)|])
    let (generateKey' :
      'tags this ->
        algorithm:[ `U1 of AesKeyGenParams.t  | `U2 of HmacKeyGenParams.t 
                  | `U3 of Pbkdf2Params.t ]
          ->
          extractable:bool ->
            keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x3928 : 'tags this) ->
        fun
          ~algorithm:(x3921 :
                       [ `U1 of AesKeyGenParams.t 
                       | `U2 of HmacKeyGenParams.t  | `U3 of Pbkdf2Params.t ])
          ->
          fun ~extractable:(x3925 : bool) ->
            fun ~keyUsages:(x3926 : KeyUsage.t list) ->
              Promise.t_1_of_js CryptoKey.t_of_js
                (Ojs.call (this_to_js Obj.magic x3928) "generateKey"
                   [|((match x3921 with
                       | `U1 x3922 -> AesKeyGenParams.t_to_js x3922
                       | `U2 x3923 -> HmacKeyGenParams.t_to_js x3923
                       | `U3 x3924 -> Pbkdf2Params.t_to_js x3924));(Ojs.bool_to_js
                                                                    x3925);(
                     Ojs.list_to_js KeyUsage.t_to_js x3926)|])
    let (generateKey'' :
      'tags this ->
        algorithm:AlgorithmIdentifier.t ->
          extractable:bool ->
            keyUsages:KeyUsage.t list ->
              (CryptoKey.t, CryptoKeyPair.t) union2 Promise.t_1)
      =
      fun (x3935 : 'tags this) ->
        fun ~algorithm:(x3931 : AlgorithmIdentifier.t) ->
          fun ~extractable:(x3932 : bool) ->
            fun ~keyUsages:(x3933 : KeyUsage.t list) ->
              Promise.t_1_of_js
                (fun (x3937 : Ojs.t) ->
                   union2_of_js CryptoKey.t_of_js CryptoKeyPair.t_of_js x3937)
                (Ojs.call (this_to_js Obj.magic x3935) "generateKey"
                   [|(AlgorithmIdentifier.t_to_js x3931);(Ojs.bool_to_js
                                                            x3932);(Ojs.list_to_js
                                                                    KeyUsage.t_to_js
                                                                    x3933)|])
    let (importKey :
      'tags this ->
        format:[ `L_s99_jwk ] ->
          keyData:JsonWebKey.t ->
            algorithm:[ `U1 of AlgorithmIdentifier.t 
                      | `U2 of RsaHashedImportParams.t 
                      | `U3 of EcKeyImportParams.t 
                      | `U4 of HmacImportParams.t 
                      | `U5 of AesKeyAlgorithm.t ]
              ->
              extractable:bool ->
                keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x3951 : 'tags this) ->
        fun ~format:(x3940 : [ `L_s99_jwk ]) ->
          fun ~keyData:(x3941 : JsonWebKey.t) ->
            fun
              ~algorithm:(x3942 :
                           [ `U1 of AlgorithmIdentifier.t 
                           | `U2 of RsaHashedImportParams.t 
                           | `U3 of EcKeyImportParams.t 
                           | `U4 of HmacImportParams.t 
                           | `U5 of AesKeyAlgorithm.t ])
              ->
              fun ~extractable:(x3948 : bool) ->
                fun ~keyUsages:(x3949 : KeyUsage.t list) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x3951) "importKey"
                       [|((match x3940 with
                           | `L_s99_jwk -> Ojs.string_to_js "jwk"));(
                         JsonWebKey.t_to_js x3941);((match x3942 with
                                                     | `U1 x3943 ->
                                                         AlgorithmIdentifier.t_to_js
                                                           x3943
                                                     | `U2 x3944 ->
                                                         RsaHashedImportParams.t_to_js
                                                           x3944
                                                     | `U3 x3945 ->
                                                         EcKeyImportParams.t_to_js
                                                           x3945
                                                     | `U4 x3946 ->
                                                         HmacImportParams.t_to_js
                                                           x3946
                                                     | `U5 x3947 ->
                                                         AesKeyAlgorithm.t_to_js
                                                           x3947));(Ojs.bool_to_js
                                                                    x3948);(
                         Ojs.list_to_js KeyUsage.t_to_js x3949)|])
    let (importKey' :
      'tags this ->
        format:(KeyFormat.t, [ `L_s99_jwk ]) Exclude.t_2 ->
          keyData:BufferSource.t ->
            algorithm:[ `U1 of AlgorithmIdentifier.t 
                      | `U2 of RsaHashedImportParams.t 
                      | `U3 of EcKeyImportParams.t 
                      | `U4 of HmacImportParams.t 
                      | `U5 of AesKeyAlgorithm.t ]
              ->
              extractable:bool ->
                keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x3967 : 'tags this) ->
        fun ~format:(x3954 : (KeyFormat.t, [ `L_s99_jwk ]) Exclude.t_2) ->
          fun ~keyData:(x3957 : BufferSource.t) ->
            fun
              ~algorithm:(x3958 :
                           [ `U1 of AlgorithmIdentifier.t 
                           | `U2 of RsaHashedImportParams.t 
                           | `U3 of EcKeyImportParams.t 
                           | `U4 of HmacImportParams.t 
                           | `U5 of AesKeyAlgorithm.t ])
              ->
              fun ~extractable:(x3964 : bool) ->
                fun ~keyUsages:(x3965 : KeyUsage.t list) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x3967) "importKey"
                       [|(Exclude.t_2_to_js KeyFormat.t_to_js
                            (fun (x3956 : [ `L_s99_jwk ]) ->
                               match x3956 with
                               | `L_s99_jwk -> Ojs.string_to_js "jwk") x3954);(
                         BufferSource.t_to_js x3957);((match x3958 with
                                                       | `U1 x3959 ->
                                                           AlgorithmIdentifier.t_to_js
                                                             x3959
                                                       | `U2 x3960 ->
                                                           RsaHashedImportParams.t_to_js
                                                             x3960
                                                       | `U3 x3961 ->
                                                           EcKeyImportParams.t_to_js
                                                             x3961
                                                       | `U4 x3962 ->
                                                           HmacImportParams.t_to_js
                                                             x3962
                                                       | `U5 x3963 ->
                                                           AesKeyAlgorithm.t_to_js
                                                             x3963));(
                         Ojs.bool_to_js x3964);(Ojs.list_to_js
                                                  KeyUsage.t_to_js x3965)|])
    let (sign :
      'tags this ->
        algorithm:[ `U1 of AlgorithmIdentifier.t  | `U2 of RsaPssParams.t 
                  | `U3 of EcdsaParams.t ]
          ->
          key:CryptoKey.t ->
            data:BufferSource.t -> ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x3976 : 'tags this) ->
        fun
          ~algorithm:(x3970 :
                       [ `U1 of AlgorithmIdentifier.t 
                       | `U2 of RsaPssParams.t  | `U3 of EcdsaParams.t ])
          ->
          fun ~key:(x3974 : CryptoKey.t) ->
            fun ~data:(x3975 : BufferSource.t) ->
              Promise.t_1_of_js ArrayBuffer.t_0_of_js
                (Ojs.call (this_to_js Obj.magic x3976) "sign"
                   [|((match x3970 with
                       | `U1 x3971 -> AlgorithmIdentifier.t_to_js x3971
                       | `U2 x3972 -> RsaPssParams.t_to_js x3972
                       | `U3 x3973 -> EcdsaParams.t_to_js x3973));(CryptoKey.t_to_js
                                                                    x3974);(
                     BufferSource.t_to_js x3975)|])
    let (unwrapKey :
      'tags this ->
        format:KeyFormat.t ->
          wrappedKey:BufferSource.t ->
            unwrappingKey:CryptoKey.t ->
              unwrapAlgorithm:[ `U1 of AlgorithmIdentifier.t 
                              | `U2 of RsaOaepParams.t 
                              | `U3 of AesCtrParams.t 
                              | `U4 of AesCbcParams.t 
                              | `U5 of AesGcmParams.t ]
                ->
                unwrappedKeyAlgorithm:[ `U1 of AlgorithmIdentifier.t 
                                      | `U2 of RsaHashedImportParams.t 
                                      | `U3 of EcKeyImportParams.t 
                                      | `U4 of HmacImportParams.t 
                                      | `U5 of AesKeyAlgorithm.t ]
                  ->
                  extractable:bool ->
                    keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x3997 : 'tags this) ->
        fun ~format:(x3979 : KeyFormat.t) ->
          fun ~wrappedKey:(x3980 : BufferSource.t) ->
            fun ~unwrappingKey:(x3981 : CryptoKey.t) ->
              fun
                ~unwrapAlgorithm:(x3982 :
                                   [ `U1 of AlgorithmIdentifier.t 
                                   | `U2 of RsaOaepParams.t 
                                   | `U3 of AesCtrParams.t 
                                   | `U4 of AesCbcParams.t 
                                   | `U5 of AesGcmParams.t ])
                ->
                fun
                  ~unwrappedKeyAlgorithm:(x3988 :
                                           [ `U1 of AlgorithmIdentifier.t 
                                           | `U2 of RsaHashedImportParams.t 
                                           | `U3 of EcKeyImportParams.t 
                                           | `U4 of HmacImportParams.t 
                                           | `U5 of AesKeyAlgorithm.t ])
                  ->
                  fun ~extractable:(x3994 : bool) ->
                    fun ~keyUsages:(x3995 : KeyUsage.t list) ->
                      Promise.t_1_of_js CryptoKey.t_of_js
                        (Ojs.call (this_to_js Obj.magic x3997) "unwrapKey"
                           [|(KeyFormat.t_to_js x3979);(BufferSource.t_to_js
                                                          x3980);(CryptoKey.t_to_js
                                                                    x3981);((
                             match x3982 with
                             | `U1 x3983 -> AlgorithmIdentifier.t_to_js x3983
                             | `U2 x3984 -> RsaOaepParams.t_to_js x3984
                             | `U3 x3985 -> AesCtrParams.t_to_js x3985
                             | `U4 x3986 -> AesCbcParams.t_to_js x3986
                             | `U5 x3987 -> AesGcmParams.t_to_js x3987));((
                             match x3988 with
                             | `U1 x3989 -> AlgorithmIdentifier.t_to_js x3989
                             | `U2 x3990 ->
                                 RsaHashedImportParams.t_to_js x3990
                             | `U3 x3991 -> EcKeyImportParams.t_to_js x3991
                             | `U4 x3992 -> HmacImportParams.t_to_js x3992
                             | `U5 x3993 -> AesKeyAlgorithm.t_to_js x3993));(
                             Ojs.bool_to_js x3994);(Ojs.list_to_js
                                                      KeyUsage.t_to_js x3995)|])
    let (verify :
      'tags this ->
        algorithm:[ `U1 of AlgorithmIdentifier.t  | `U2 of RsaPssParams.t 
                  | `U3 of EcdsaParams.t ]
          ->
          key:CryptoKey.t ->
            signature:BufferSource.t ->
              data:BufferSource.t -> bool Promise.t_1)
      =
      fun (x4007 : 'tags this) ->
        fun
          ~algorithm:(x4000 :
                       [ `U1 of AlgorithmIdentifier.t 
                       | `U2 of RsaPssParams.t  | `U3 of EcdsaParams.t ])
          ->
          fun ~key:(x4004 : CryptoKey.t) ->
            fun ~signature:(x4005 : BufferSource.t) ->
              fun ~data:(x4006 : BufferSource.t) ->
                Promise.t_1_of_js Ojs.bool_of_js
                  (Ojs.call (this_to_js Obj.magic x4007) "verify"
                     [|((match x4000 with
                         | `U1 x4001 -> AlgorithmIdentifier.t_to_js x4001
                         | `U2 x4002 -> RsaPssParams.t_to_js x4002
                         | `U3 x4003 -> EcdsaParams.t_to_js x4003));(
                       CryptoKey.t_to_js x4004);(BufferSource.t_to_js x4005);(
                       BufferSource.t_to_js x4006)|])
    let (wrapKey :
      'tags this ->
        format:KeyFormat.t ->
          key:CryptoKey.t ->
            wrappingKey:CryptoKey.t ->
              wrapAlgorithm:[ `U1 of AlgorithmIdentifier.t 
                            | `U2 of RsaOaepParams.t 
                            | `U3 of AesCtrParams.t  | `U4 of AesCbcParams.t 
                            | `U5 of AesGcmParams.t ]
                -> ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x4019 : 'tags this) ->
        fun ~format:(x4010 : KeyFormat.t) ->
          fun ~key:(x4011 : CryptoKey.t) ->
            fun ~wrappingKey:(x4012 : CryptoKey.t) ->
              fun
                ~wrapAlgorithm:(x4013 :
                                 [ `U1 of AlgorithmIdentifier.t 
                                 | `U2 of RsaOaepParams.t 
                                 | `U3 of AesCtrParams.t 
                                 | `U4 of AesCbcParams.t 
                                 | `U5 of AesGcmParams.t ])
                ->
                Promise.t_1_of_js ArrayBuffer.t_0_of_js
                  (Ojs.call (this_to_js Obj.magic x4019) "wrapKey"
                     [|(KeyFormat.t_to_js x4010);(CryptoKey.t_to_js x4011);(
                       CryptoKey.t_to_js x4012);((match x4013 with
                                                  | `U1 x4014 ->
                                                      AlgorithmIdentifier.t_to_js
                                                        x4014
                                                  | `U2 x4015 ->
                                                      RsaOaepParams.t_to_js
                                                        x4015
                                                  | `U3 x4016 ->
                                                      AesCtrParams.t_to_js
                                                        x4016
                                                  | `U4 x4017 ->
                                                      AesCbcParams.t_to_js
                                                        x4017
                                                  | `U5 x4018 ->
                                                      AesGcmParams.t_to_js
                                                        x4018))|])
    let (deriveKey' :
      'tags this ->
        algorithm:[ `U1 of AlgorithmIdentifier.t 
                  | `U2 of EcdhKeyDeriveParams.t  | `U3 of HkdfParams.t 
                  | `U4 of Pbkdf2Params.t ]
          ->
          baseKey:CryptoKey.t ->
            derivedKeyType:[ `U1 of AlgorithmIdentifier.t 
                           | `U2 of AesDerivedKeyParams.t 
                           | `U3 of HmacImportParams.t 
                           | `U4 of HkdfParams.t  | `U5 of Pbkdf2Params.t ]
              ->
              extractable:bool ->
                keyUsages:KeyUsage.t Iterable.t_1 -> CryptoKey.t Promise.t_1)
      =
      fun (x4037 : 'tags this) ->
        fun
          ~algorithm:(x4022 :
                       [ `U1 of AlgorithmIdentifier.t 
                       | `U2 of EcdhKeyDeriveParams.t  | `U3 of HkdfParams.t 
                       | `U4 of Pbkdf2Params.t ])
          ->
          fun ~baseKey:(x4027 : CryptoKey.t) ->
            fun
              ~derivedKeyType:(x4028 :
                                [ `U1 of AlgorithmIdentifier.t 
                                | `U2 of AesDerivedKeyParams.t 
                                | `U3 of HmacImportParams.t 
                                | `U4 of HkdfParams.t 
                                | `U5 of Pbkdf2Params.t ])
              ->
              fun ~extractable:(x4034 : bool) ->
                fun ~keyUsages:(x4035 : KeyUsage.t Iterable.t_1) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x4037) "deriveKey"
                       [|((match x4022 with
                           | `U1 x4023 -> AlgorithmIdentifier.t_to_js x4023
                           | `U2 x4024 -> EcdhKeyDeriveParams.t_to_js x4024
                           | `U3 x4025 -> HkdfParams.t_to_js x4025
                           | `U4 x4026 -> Pbkdf2Params.t_to_js x4026));(
                         CryptoKey.t_to_js x4027);((match x4028 with
                                                    | `U1 x4029 ->
                                                        AlgorithmIdentifier.t_to_js
                                                          x4029
                                                    | `U2 x4030 ->
                                                        AesDerivedKeyParams.t_to_js
                                                          x4030
                                                    | `U3 x4031 ->
                                                        HmacImportParams.t_to_js
                                                          x4031
                                                    | `U4 x4032 ->
                                                        HkdfParams.t_to_js
                                                          x4032
                                                    | `U5 x4033 ->
                                                        Pbkdf2Params.t_to_js
                                                          x4033));(Ojs.bool_to_js
                                                                    x4034);(
                         Iterable.t_1_to_js KeyUsage.t_to_js x4035)|])
    let (generateKey''' :
      'tags this ->
        algorithm:[ `U1 of RsaHashedKeyGenParams.t 
                  | `U2 of EcKeyGenParams.t ]
          ->
          extractable:bool ->
            keyUsages:KeyUsage.t list -> CryptoKeyPair.t Promise.t_1)
      =
      fun (x4046 : 'tags this) ->
        fun
          ~algorithm:(x4040 :
                       [ `U1 of RsaHashedKeyGenParams.t 
                       | `U2 of EcKeyGenParams.t ])
          ->
          fun ~extractable:(x4043 : bool) ->
            fun ~keyUsages:(x4044 : KeyUsage.t list) ->
              Promise.t_1_of_js CryptoKeyPair.t_of_js
                (Ojs.call (this_to_js Obj.magic x4046) "generateKey"
                   [|((match x4040 with
                       | `U1 x4041 -> RsaHashedKeyGenParams.t_to_js x4041
                       | `U2 x4042 -> EcKeyGenParams.t_to_js x4042));(
                     Ojs.bool_to_js x4043);(Ojs.list_to_js KeyUsage.t_to_js
                                              x4044)|])
    let (generateKey'''' :
      'tags this ->
        algorithm:[ `U1 of AesKeyGenParams.t  | `U2 of HmacKeyGenParams.t 
                  | `U3 of Pbkdf2Params.t ]
          ->
          extractable:bool ->
            keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x4056 : 'tags this) ->
        fun
          ~algorithm:(x4049 :
                       [ `U1 of AesKeyGenParams.t 
                       | `U2 of HmacKeyGenParams.t  | `U3 of Pbkdf2Params.t ])
          ->
          fun ~extractable:(x4053 : bool) ->
            fun ~keyUsages:(x4054 : KeyUsage.t list) ->
              Promise.t_1_of_js CryptoKey.t_of_js
                (Ojs.call (this_to_js Obj.magic x4056) "generateKey"
                   [|((match x4049 with
                       | `U1 x4050 -> AesKeyGenParams.t_to_js x4050
                       | `U2 x4051 -> HmacKeyGenParams.t_to_js x4051
                       | `U3 x4052 -> Pbkdf2Params.t_to_js x4052));(Ojs.bool_to_js
                                                                    x4053);(
                     Ojs.list_to_js KeyUsage.t_to_js x4054)|])
    let (generateKey''''' :
      'tags this ->
        algorithm:AlgorithmIdentifier.t ->
          extractable:bool ->
            keyUsages:KeyUsage.t Iterable.t_1 ->
              (CryptoKey.t, CryptoKeyPair.t) union2 Promise.t_1)
      =
      fun (x4063 : 'tags this) ->
        fun ~algorithm:(x4059 : AlgorithmIdentifier.t) ->
          fun ~extractable:(x4060 : bool) ->
            fun ~keyUsages:(x4061 : KeyUsage.t Iterable.t_1) ->
              Promise.t_1_of_js
                (fun (x4065 : Ojs.t) ->
                   union2_of_js CryptoKey.t_of_js CryptoKeyPair.t_of_js x4065)
                (Ojs.call (this_to_js Obj.magic x4063) "generateKey"
                   [|(AlgorithmIdentifier.t_to_js x4059);(Ojs.bool_to_js
                                                            x4060);(Iterable.t_1_to_js
                                                                    KeyUsage.t_to_js
                                                                    x4061)|])
    let (importKey'' :
      'tags this ->
        format:[ `L_s99_jwk ] ->
          keyData:JsonWebKey.t ->
            algorithm:[ `U1 of AlgorithmIdentifier.t 
                      | `U2 of RsaHashedImportParams.t 
                      | `U3 of EcKeyImportParams.t 
                      | `U4 of HmacImportParams.t 
                      | `U5 of AesKeyAlgorithm.t ]
              ->
              extractable:bool ->
                keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x4079 : 'tags this) ->
        fun ~format:(x4068 : [ `L_s99_jwk ]) ->
          fun ~keyData:(x4069 : JsonWebKey.t) ->
            fun
              ~algorithm:(x4070 :
                           [ `U1 of AlgorithmIdentifier.t 
                           | `U2 of RsaHashedImportParams.t 
                           | `U3 of EcKeyImportParams.t 
                           | `U4 of HmacImportParams.t 
                           | `U5 of AesKeyAlgorithm.t ])
              ->
              fun ~extractable:(x4076 : bool) ->
                fun ~keyUsages:(x4077 : KeyUsage.t list) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x4079) "importKey"
                       [|((match x4068 with
                           | `L_s99_jwk -> Ojs.string_to_js "jwk"));(
                         JsonWebKey.t_to_js x4069);((match x4070 with
                                                     | `U1 x4071 ->
                                                         AlgorithmIdentifier.t_to_js
                                                           x4071
                                                     | `U2 x4072 ->
                                                         RsaHashedImportParams.t_to_js
                                                           x4072
                                                     | `U3 x4073 ->
                                                         EcKeyImportParams.t_to_js
                                                           x4073
                                                     | `U4 x4074 ->
                                                         HmacImportParams.t_to_js
                                                           x4074
                                                     | `U5 x4075 ->
                                                         AesKeyAlgorithm.t_to_js
                                                           x4075));(Ojs.bool_to_js
                                                                    x4076);(
                         Ojs.list_to_js KeyUsage.t_to_js x4077)|])
    let (importKey''' :
      'tags this ->
        format:(KeyFormat.t, [ `L_s99_jwk ]) Exclude.t_2 ->
          keyData:BufferSource.t ->
            algorithm:[ `U1 of AlgorithmIdentifier.t 
                      | `U2 of RsaHashedImportParams.t 
                      | `U3 of EcKeyImportParams.t 
                      | `U4 of HmacImportParams.t 
                      | `U5 of AesKeyAlgorithm.t ]
              ->
              extractable:bool ->
                keyUsages:KeyUsage.t Iterable.t_1 -> CryptoKey.t Promise.t_1)
      =
      fun (x4095 : 'tags this) ->
        fun ~format:(x4082 : (KeyFormat.t, [ `L_s99_jwk ]) Exclude.t_2) ->
          fun ~keyData:(x4085 : BufferSource.t) ->
            fun
              ~algorithm:(x4086 :
                           [ `U1 of AlgorithmIdentifier.t 
                           | `U2 of RsaHashedImportParams.t 
                           | `U3 of EcKeyImportParams.t 
                           | `U4 of HmacImportParams.t 
                           | `U5 of AesKeyAlgorithm.t ])
              ->
              fun ~extractable:(x4092 : bool) ->
                fun ~keyUsages:(x4093 : KeyUsage.t Iterable.t_1) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x4095) "importKey"
                       [|(Exclude.t_2_to_js KeyFormat.t_to_js
                            (fun (x4084 : [ `L_s99_jwk ]) ->
                               match x4084 with
                               | `L_s99_jwk -> Ojs.string_to_js "jwk") x4082);(
                         BufferSource.t_to_js x4085);((match x4086 with
                                                       | `U1 x4087 ->
                                                           AlgorithmIdentifier.t_to_js
                                                             x4087
                                                       | `U2 x4088 ->
                                                           RsaHashedImportParams.t_to_js
                                                             x4088
                                                       | `U3 x4089 ->
                                                           EcKeyImportParams.t_to_js
                                                             x4089
                                                       | `U4 x4090 ->
                                                           HmacImportParams.t_to_js
                                                             x4090
                                                       | `U5 x4091 ->
                                                           AesKeyAlgorithm.t_to_js
                                                             x4091));(
                         Ojs.bool_to_js x4092);(Iterable.t_1_to_js
                                                  KeyUsage.t_to_js x4093)|])
    let (unwrapKey' :
      'tags this ->
        format:KeyFormat.t ->
          wrappedKey:BufferSource.t ->
            unwrappingKey:CryptoKey.t ->
              unwrapAlgorithm:[ `U1 of AlgorithmIdentifier.t 
                              | `U2 of RsaOaepParams.t 
                              | `U3 of AesCtrParams.t 
                              | `U4 of AesCbcParams.t 
                              | `U5 of AesGcmParams.t ]
                ->
                unwrappedKeyAlgorithm:[ `U1 of AlgorithmIdentifier.t 
                                      | `U2 of RsaHashedImportParams.t 
                                      | `U3 of EcKeyImportParams.t 
                                      | `U4 of HmacImportParams.t 
                                      | `U5 of AesKeyAlgorithm.t ]
                  ->
                  extractable:bool ->
                    keyUsages:KeyUsage.t Iterable.t_1 ->
                      CryptoKey.t Promise.t_1)
      =
      fun (x4116 : 'tags this) ->
        fun ~format:(x4098 : KeyFormat.t) ->
          fun ~wrappedKey:(x4099 : BufferSource.t) ->
            fun ~unwrappingKey:(x4100 : CryptoKey.t) ->
              fun
                ~unwrapAlgorithm:(x4101 :
                                   [ `U1 of AlgorithmIdentifier.t 
                                   | `U2 of RsaOaepParams.t 
                                   | `U3 of AesCtrParams.t 
                                   | `U4 of AesCbcParams.t 
                                   | `U5 of AesGcmParams.t ])
                ->
                fun
                  ~unwrappedKeyAlgorithm:(x4107 :
                                           [ `U1 of AlgorithmIdentifier.t 
                                           | `U2 of RsaHashedImportParams.t 
                                           | `U3 of EcKeyImportParams.t 
                                           | `U4 of HmacImportParams.t 
                                           | `U5 of AesKeyAlgorithm.t ])
                  ->
                  fun ~extractable:(x4113 : bool) ->
                    fun ~keyUsages:(x4114 : KeyUsage.t Iterable.t_1) ->
                      Promise.t_1_of_js CryptoKey.t_of_js
                        (Ojs.call (this_to_js Obj.magic x4116) "unwrapKey"
                           [|(KeyFormat.t_to_js x4098);(BufferSource.t_to_js
                                                          x4099);(CryptoKey.t_to_js
                                                                    x4100);((
                             match x4101 with
                             | `U1 x4102 -> AlgorithmIdentifier.t_to_js x4102
                             | `U2 x4103 -> RsaOaepParams.t_to_js x4103
                             | `U3 x4104 -> AesCtrParams.t_to_js x4104
                             | `U4 x4105 -> AesCbcParams.t_to_js x4105
                             | `U5 x4106 -> AesGcmParams.t_to_js x4106));((
                             match x4107 with
                             | `U1 x4108 -> AlgorithmIdentifier.t_to_js x4108
                             | `U2 x4109 ->
                                 RsaHashedImportParams.t_to_js x4109
                             | `U3 x4110 -> EcKeyImportParams.t_to_js x4110
                             | `U4 x4111 -> HmacImportParams.t_to_js x4111
                             | `U5 x4112 -> AesKeyAlgorithm.t_to_js x4112));(
                             Ojs.bool_to_js x4113);(Iterable.t_1_to_js
                                                      KeyUsage.t_to_js x4114)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SubtleCrypto")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "SubtleCrypto") [||])
  end
module CryptoStatic =
  struct
    let (subtle : unit -> SubtleCrypto.t) =
      fun () ->
        SubtleCrypto.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "crypto")
             "subtle")
    let (getRandomValues : 'T -> 'T) =
      fun (x4119 : 'T) ->
        Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "crypto")
             "getRandomValues" [|(Obj.magic x4119)|])
    let (randomUUID : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "crypto") "randomUUID"
             [||])
  end
module ConsoleStatic =
  struct
    let (assert_ : ?condition:bool -> data:any list -> unit -> unit) =
      fun ?condition:(x4120 : bool option) ->
        fun ~data:(x4121 : any list) ->
          fun () ->
            ignore
              (let x4125 = Ojs.get_prop_ascii Ojs.global "console" in
               Ojs.call (Ojs.get_prop_ascii x4125 "assert") "apply"
                 [|x4125;((let x4122 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x4120 with
                            | Some x4124 ->
                                ignore
                                  (Ojs.call x4122 "push"
                                     [|(Ojs.bool_to_js x4124)|])
                            | None -> ());
                           List.iter
                             (fun (x4123 : any) ->
                                ignore
                                  (Ojs.call x4122 "push"
                                     [|(any_to_js x4123)|])) x4121;
                           x4122))|])
    let (clear : unit -> unit) =
      fun () ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "console") "clear" [||])
    let (count : ?label:string -> unit -> unit) =
      fun ?label:(x4126 : string option) ->
        fun () ->
          ignore
            (let x4129 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x4129 "count") "apply"
               [|x4129;((let x4127 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x4126 with
                          | Some x4128 ->
                              ignore
                                (Ojs.call x4127 "push"
                                   [|(Ojs.string_to_js x4128)|])
                          | None -> ());
                         x4127))|])
    let (countReset : ?label:string -> unit -> unit) =
      fun ?label:(x4130 : string option) ->
        fun () ->
          ignore
            (let x4133 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x4133 "countReset") "apply"
               [|x4133;((let x4131 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x4130 with
                          | Some x4132 ->
                              ignore
                                (Ojs.call x4131 "push"
                                   [|(Ojs.string_to_js x4132)|])
                          | None -> ());
                         x4131))|])
    let (debug : any list -> unit) =
      fun (x4134 : any list) ->
        ignore
          (let x4137 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x4137 "debug") "apply"
             [|x4137;((let x4135 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x4136 : any) ->
                            ignore
                              (Ojs.call x4135 "push" [|(any_to_js x4136)|]))
                         x4134;
                       x4135))|])
    let (dir : ?item:any -> ?options:any -> unit -> unit) =
      fun ?item:(x4138 : any option) ->
        fun ?options:(x4139 : any option) ->
          fun () ->
            ignore
              (let x4143 = Ojs.get_prop_ascii Ojs.global "console" in
               Ojs.call (Ojs.get_prop_ascii x4143 "dir") "apply"
                 [|x4143;((let x4140 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x4138 with
                            | Some x4142 ->
                                ignore
                                  (Ojs.call x4140 "push"
                                     [|(any_to_js x4142)|])
                            | None -> ());
                           (match x4139 with
                            | Some x4141 ->
                                ignore
                                  (Ojs.call x4140 "push"
                                     [|(any_to_js x4141)|])
                            | None -> ());
                           x4140))|])
    let (dirxml : any list -> unit) =
      fun (x4144 : any list) ->
        ignore
          (let x4147 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x4147 "dirxml") "apply"
             [|x4147;((let x4145 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x4146 : any) ->
                            ignore
                              (Ojs.call x4145 "push" [|(any_to_js x4146)|]))
                         x4144;
                       x4145))|])
    let (error : any list -> unit) =
      fun (x4148 : any list) ->
        ignore
          (let x4151 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x4151 "error") "apply"
             [|x4151;((let x4149 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x4150 : any) ->
                            ignore
                              (Ojs.call x4149 "push" [|(any_to_js x4150)|]))
                         x4148;
                       x4149))|])
    let (group : any list -> unit) =
      fun (x4152 : any list) ->
        ignore
          (let x4155 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x4155 "group") "apply"
             [|x4155;((let x4153 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x4154 : any) ->
                            ignore
                              (Ojs.call x4153 "push" [|(any_to_js x4154)|]))
                         x4152;
                       x4153))|])
    let (groupCollapsed : any list -> unit) =
      fun (x4156 : any list) ->
        ignore
          (let x4159 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x4159 "groupCollapsed") "apply"
             [|x4159;((let x4157 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x4158 : any) ->
                            ignore
                              (Ojs.call x4157 "push" [|(any_to_js x4158)|]))
                         x4156;
                       x4157))|])
    let (groupEnd : unit -> unit) =
      fun () ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "console") "groupEnd" [||])
    let (info : any list -> unit) =
      fun (x4160 : any list) ->
        ignore
          (let x4163 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x4163 "info") "apply"
             [|x4163;((let x4161 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x4162 : any) ->
                            ignore
                              (Ojs.call x4161 "push" [|(any_to_js x4162)|]))
                         x4160;
                       x4161))|])
    let (log : any list -> unit) =
      fun (x4164 : any list) ->
        ignore
          (let x4167 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x4167 "log") "apply"
             [|x4167;((let x4165 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x4166 : any) ->
                            ignore
                              (Ojs.call x4165 "push" [|(any_to_js x4166)|]))
                         x4164;
                       x4165))|])
    let (table : ?tabularData:any -> ?properties:string list -> unit -> unit)
      =
      fun ?tabularData:(x4168 : any option) ->
        fun ?properties:(x4169 : string list option) ->
          fun () ->
            ignore
              (let x4174 = Ojs.get_prop_ascii Ojs.global "console" in
               Ojs.call (Ojs.get_prop_ascii x4174 "table") "apply"
                 [|x4174;((let x4170 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x4168 with
                            | Some x4173 ->
                                ignore
                                  (Ojs.call x4170 "push"
                                     [|(any_to_js x4173)|])
                            | None -> ());
                           (match x4169 with
                            | Some x4171 ->
                                ignore
                                  (Ojs.call x4170 "push"
                                     [|(Ojs.list_to_js Ojs.string_to_js x4171)|])
                            | None -> ());
                           x4170))|])
    let (time : ?label:string -> unit -> unit) =
      fun ?label:(x4175 : string option) ->
        fun () ->
          ignore
            (let x4178 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x4178 "time") "apply"
               [|x4178;((let x4176 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x4175 with
                          | Some x4177 ->
                              ignore
                                (Ojs.call x4176 "push"
                                   [|(Ojs.string_to_js x4177)|])
                          | None -> ());
                         x4176))|])
    let (timeEnd : ?label:string -> unit -> unit) =
      fun ?label:(x4179 : string option) ->
        fun () ->
          ignore
            (let x4182 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x4182 "timeEnd") "apply"
               [|x4182;((let x4180 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x4179 with
                          | Some x4181 ->
                              ignore
                                (Ojs.call x4180 "push"
                                   [|(Ojs.string_to_js x4181)|])
                          | None -> ());
                         x4180))|])
    let (timeLog : ?label:string -> data:any list -> unit -> unit) =
      fun ?label:(x4183 : string option) ->
        fun ~data:(x4184 : any list) ->
          fun () ->
            ignore
              (let x4188 = Ojs.get_prop_ascii Ojs.global "console" in
               Ojs.call (Ojs.get_prop_ascii x4188 "timeLog") "apply"
                 [|x4188;((let x4185 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x4183 with
                            | Some x4187 ->
                                ignore
                                  (Ojs.call x4185 "push"
                                     [|(Ojs.string_to_js x4187)|])
                            | None -> ());
                           List.iter
                             (fun (x4186 : any) ->
                                ignore
                                  (Ojs.call x4185 "push"
                                     [|(any_to_js x4186)|])) x4184;
                           x4185))|])
    let (timeStamp : ?label:string -> unit -> unit) =
      fun ?label:(x4189 : string option) ->
        fun () ->
          ignore
            (let x4192 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x4192 "timeStamp") "apply"
               [|x4192;((let x4190 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x4189 with
                          | Some x4191 ->
                              ignore
                                (Ojs.call x4190 "push"
                                   [|(Ojs.string_to_js x4191)|])
                          | None -> ());
                         x4190))|])
    let (trace : any list -> unit) =
      fun (x4193 : any list) ->
        ignore
          (let x4196 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x4196 "trace") "apply"
             [|x4196;((let x4194 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x4195 : any) ->
                            ignore
                              (Ojs.call x4194 "push" [|(any_to_js x4195)|]))
                         x4193;
                       x4194))|])
    let (warn : any list -> unit) =
      fun (x4197 : any list) ->
        ignore
          (let x4200 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x4200 "warn") "apply"
             [|x4200;((let x4198 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x4199 : any) ->
                            ignore
                              (Ojs.call x4198 "push" [|(any_to_js x4199)|]))
                         x4197;
                       x4198))|])
  end
module CacheQueryOptions =
  struct
    type t = [ `CacheQueryOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4202 : Ojs.t) -> t_of_js x4202
    and t_0_to_js : t_0 -> Ojs.t = fun (x4201 : t) -> t_to_js x4201
    type tags = [ `CacheQueryOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CacheQueryOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4205 : Ojs.t) -> intf_of_js __tags_of_js x4205
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4203 : __tags intf) -> intf_to_js __tags_to_js x4203
    let (get_ignoreMethod : 'tags this -> bool option) =
      fun (x4207 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4207) "ignoreMethod")
    let (set_ignoreMethod : 'tags this -> bool -> unit) =
      fun (x4210 : 'tags this) ->
        fun (x4211 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4210) "ignoreMethod"
            (Ojs.bool_to_js x4211)
    let (get_ignoreSearch : 'tags this -> bool option) =
      fun (x4213 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4213) "ignoreSearch")
    let (set_ignoreSearch : 'tags this -> bool -> unit) =
      fun (x4216 : 'tags this) ->
        fun (x4217 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4216) "ignoreSearch"
            (Ojs.bool_to_js x4217)
    let (get_ignoreVary : 'tags this -> bool option) =
      fun (x4219 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4219) "ignoreVary")
    let (set_ignoreVary : 'tags this -> bool -> unit) =
      fun (x4222 : 'tags this) ->
        fun (x4223 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4222) "ignoreVary"
            (Ojs.bool_to_js x4223)
    let (create :
      ?ignoreMethod:bool ->
        ?ignoreSearch:bool -> ?ignoreVary:bool -> unit -> t)
      =
      fun ?ignoreMethod:(x4225 : bool option) ->
        fun ?ignoreSearch:(x4226 : bool option) ->
          fun ?ignoreVary:(x4227 : bool option) ->
            fun () ->
              let x4228 = Ojs.empty_obj () in
              (match x4225 with
               | Some x4231 ->
                   Ojs.set_prop_ascii x4228 "ignoreMethod"
                     (Ojs.bool_to_js x4231)
               | None -> ());
              (match x4226 with
               | Some x4230 ->
                   Ojs.set_prop_ascii x4228 "ignoreSearch"
                     (Ojs.bool_to_js x4230)
               | None -> ());
              (match x4227 with
               | Some x4229 ->
                   Ojs.set_prop_ascii x4228 "ignoreVary"
                     (Ojs.bool_to_js x4229)
               | None -> ());
              t_of_js x4228
    let cast_from = Obj.magic
  end
module MultiCacheQueryOptions =
  struct
    type t = [ `CacheQueryOptions  | `MultiCacheQueryOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4233 : Ojs.t) -> t_of_js x4233
    and t_0_to_js : t_0 -> Ojs.t = fun (x4232 : t) -> t_to_js x4232
    type tags = [ `CacheQueryOptions  | `MultiCacheQueryOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MultiCacheQueryOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4236 : Ojs.t) -> intf_of_js __tags_of_js x4236
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4234 : __tags intf) -> intf_to_js __tags_to_js x4234
    let (get_cacheName : 'tags this -> string option) =
      fun (x4238 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4238) "cacheName")
    let (set_cacheName : 'tags this -> string -> unit) =
      fun (x4241 : 'tags this) ->
        fun (x4242 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4241) "cacheName"
            (Ojs.string_to_js x4242)
    let (create : ?cacheName:string -> unit -> t) =
      fun ?cacheName:(x4244 : string option) ->
        fun () ->
          let x4245 = Ojs.empty_obj () in
          (match x4244 with
           | Some x4246 ->
               Ojs.set_prop_ascii x4245 "cacheName" (Ojs.string_to_js x4246)
           | None -> ());
          t_of_js x4245
    let cast_from = Obj.magic
  end
module URLSearchParams =
  struct
    type t =
      [ `URLSearchParams  | (string * string) IterableIterator.tags_1] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4248 : Ojs.t) -> t_of_js x4248
    and t_0_to_js : t_0 -> Ojs.t = fun (x4247 : t) -> t_to_js x4247
    type tags =
      [ `URLSearchParams  | (string * string) IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `URLSearchParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4251 : Ojs.t) -> intf_of_js __tags_of_js x4251
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4249 : __tags intf) -> intf_to_js __tags_to_js x4249
    let (append : 'tags this -> name:string -> value:string -> unit) =
      fun (x4255 : 'tags this) ->
        fun ~name:(x4253 : string) ->
          fun ~value:(x4254 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x4255) "append"
                 [|(Ojs.string_to_js x4253);(Ojs.string_to_js x4254)|])
    let (delete : 'tags this -> name:string -> unit) =
      fun (x4258 : 'tags this) ->
        fun ~name:(x4257 : string) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x4258) "delete"
               [|(Ojs.string_to_js x4257)|])
    let (get_ : 'tags this -> name:string -> string option) =
      fun (x4261 : 'tags this) ->
        fun ~name:(x4260 : string) ->
          Ojs.option_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x4261) "get"
               [|(Ojs.string_to_js x4260)|])
    let (getAll : 'tags this -> name:string -> string list) =
      fun (x4265 : 'tags this) ->
        fun ~name:(x4264 : string) ->
          Ojs.list_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x4265) "getAll"
               [|(Ojs.string_to_js x4264)|])
    let (has : 'tags this -> name:string -> bool) =
      fun (x4269 : 'tags this) ->
        fun ~name:(x4268 : string) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x4269) "has"
               [|(Ojs.string_to_js x4268)|])
    let (set_ : 'tags this -> name:string -> value:string -> unit) =
      fun (x4273 : 'tags this) ->
        fun ~name:(x4271 : string) ->
          fun ~value:(x4272 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x4273) "set"
                 [|(Ojs.string_to_js x4271);(Ojs.string_to_js x4272)|])
    let (sort : 'tags this -> unit) =
      fun (x4275 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x4275) "sort" [||])
    let (toString : 'tags this -> string) =
      fun (x4277 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4277) "toString" [||])
    let (forEach :
      'tags this ->
        callbackfn:(value:string -> key:string -> parent:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x4286 : 'tags this) ->
        fun
          ~callbackfn:(x4279 :
                        value:string -> key:string -> parent:t -> unit)
          ->
          fun ?thisArg:(x4280 : any option) ->
            fun () ->
              ignore
                (let x4288 = this_to_js Obj.magic x4286 in
                 Ojs.call (Ojs.get_prop_ascii x4288 "forEach") "apply"
                   [|x4288;((let x4281 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4281 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4283 : Ojs.t) ->
                                          fun (x4284 : Ojs.t) ->
                                            fun (x4285 : Ojs.t) ->
                                              x4279
                                                ~value:(Ojs.string_of_js
                                                          x4283)
                                                ~key:(Ojs.string_of_js x4284)
                                                ~parent:(t_of_js x4285)))|]);
                             (match x4280 with
                              | Some x4282 ->
                                  ignore
                                    (Ojs.call x4281 "push"
                                       [|(any_to_js x4282)|])
                              | None -> ());
                             x4281))|])
    let (entries : 'tags this -> (string * string) IterableIterator.t_1) =
      fun (x4289 : 'tags this) ->
        IterableIterator.t_1_of_js
          (fun (x4291 : Ojs.t) ->
             let x4292 = x4291 in
             ((Ojs.string_of_js (Ojs.array_get x4292 0)),
               (Ojs.string_of_js (Ojs.array_get x4292 1))))
          (Ojs.call (this_to_js Obj.magic x4289) "entries" [||])
    let (keys : 'tags this -> string IterableIterator.t_1) =
      fun (x4293 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4293) "keys" [||])
    let (values : 'tags this -> string IterableIterator.t_1) =
      fun (x4296 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4296) "values" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "URLSearchParams") "prototype")
    let (create :
      ?init:[ `U1 of string list list  | `U2 of (string, string) Record.t_2 
            | `U3 of string  | `U4 of t ]
        -> unit -> t)
      =
      fun
        ?init:(x4299 :
                [ `U1 of string list list 
                | `U2 of (string, string) Record.t_2  | `U3 of string 
                | `U4 of t ] option)
        ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr
               (Ojs.get_prop_ascii Ojs.global "URLSearchParams")
               (let x4300 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x4299 with
                 | Some x4301 ->
                     ignore
                       (Ojs.call x4300 "push"
                          [|((match x4301 with
                              | `U1 x4302 ->
                                  Ojs.list_to_js
                                    (fun (x4303 : string list) ->
                                       Ojs.list_to_js Ojs.string_to_js x4303)
                                    x4302
                              | `U2 x4305 ->
                                  Record.t_2_to_js Ojs.string_to_js
                                    Ojs.string_to_js x4305
                              | `U3 x4308 -> Ojs.string_to_js x4308
                              | `U4 x4309 -> t_to_js x4309))|])
                 | None -> ());
                x4300))
    let (toString' : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "URLSearchParams")
             "toString" [||])
  end
module URL =
  struct
    type t = [ `URL ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4311 : Ojs.t) -> t_of_js x4311
    and t_0_to_js : t_0 -> Ojs.t = fun (x4310 : t) -> t_to_js x4310
    type tags = [ `URL ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `URL ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4314 : Ojs.t) -> intf_of_js __tags_of_js x4314
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4312 : __tags intf) -> intf_to_js __tags_to_js x4312
    let (get_hash : 'tags this -> string) =
      fun (x4316 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4316) "hash")
    let (set_hash : 'tags this -> string -> unit) =
      fun (x4318 : 'tags this) ->
        fun (x4319 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4318) "hash"
            (Ojs.string_to_js x4319)
    let (get_host : 'tags this -> string) =
      fun (x4321 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4321) "host")
    let (set_host : 'tags this -> string -> unit) =
      fun (x4323 : 'tags this) ->
        fun (x4324 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4323) "host"
            (Ojs.string_to_js x4324)
    let (get_hostname : 'tags this -> string) =
      fun (x4326 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4326) "hostname")
    let (set_hostname : 'tags this -> string -> unit) =
      fun (x4328 : 'tags this) ->
        fun (x4329 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4328) "hostname"
            (Ojs.string_to_js x4329)
    let (get_href : 'tags this -> string) =
      fun (x4331 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4331) "href")
    let (set_href : 'tags this -> string -> unit) =
      fun (x4333 : 'tags this) ->
        fun (x4334 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4333) "href"
            (Ojs.string_to_js x4334)
    let (toString : 'tags this -> string) =
      fun (x4336 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4336) "toString" [||])
    let (get_origin : 'tags this -> string) =
      fun (x4338 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4338) "origin")
    let (get_password : 'tags this -> string) =
      fun (x4340 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4340) "password")
    let (set_password : 'tags this -> string -> unit) =
      fun (x4342 : 'tags this) ->
        fun (x4343 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4342) "password"
            (Ojs.string_to_js x4343)
    let (get_pathname : 'tags this -> string) =
      fun (x4345 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4345) "pathname")
    let (set_pathname : 'tags this -> string -> unit) =
      fun (x4347 : 'tags this) ->
        fun (x4348 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4347) "pathname"
            (Ojs.string_to_js x4348)
    let (get_port : 'tags this -> string) =
      fun (x4350 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4350) "port")
    let (set_port : 'tags this -> string -> unit) =
      fun (x4352 : 'tags this) ->
        fun (x4353 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4352) "port"
            (Ojs.string_to_js x4353)
    let (get_protocol : 'tags this -> string) =
      fun (x4355 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4355) "protocol")
    let (set_protocol : 'tags this -> string -> unit) =
      fun (x4357 : 'tags this) ->
        fun (x4358 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4357) "protocol"
            (Ojs.string_to_js x4358)
    let (get_search : 'tags this -> string) =
      fun (x4360 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4360) "search")
    let (set_search : 'tags this -> string -> unit) =
      fun (x4362 : 'tags this) ->
        fun (x4363 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4362) "search"
            (Ojs.string_to_js x4363)
    let (get_searchParams : 'tags this -> URLSearchParams.t) =
      fun (x4365 : 'tags this) ->
        URLSearchParams.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4365) "searchParams")
    let (get_username : 'tags this -> string) =
      fun (x4367 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4367) "username")
    let (set_username : 'tags this -> string -> unit) =
      fun (x4369 : 'tags this) ->
        fun (x4370 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4369) "username"
            (Ojs.string_to_js x4370)
    let (toJSON : 'tags this -> string) =
      fun (x4372 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4372) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "URL")
             "prototype")
    let (create :
      url:[ `U1 of string  | `U2 of t ] ->
        ?base:[ `U1 of string  | `U2 of t ] -> unit -> t)
      =
      fun ~url:(x4374 : [ `U1 of string  | `U2 of t ]) ->
        fun ?base:(x4375 : [ `U1 of string  | `U2 of t ] option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "URL")
                 (let x4376 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x4376 "push"
                       [|((match x4374 with
                           | `U1 x4380 -> Ojs.string_to_js x4380
                           | `U2 x4381 -> t_to_js x4381))|]);
                  (match x4375 with
                   | Some x4377 ->
                       ignore
                         (Ojs.call x4376 "push"
                            [|((match x4377 with
                                | `U1 x4378 -> Ojs.string_to_js x4378
                                | `U2 x4379 -> t_to_js x4379))|])
                   | None -> ());
                  x4376))
    let (createObjectURL : Blob.t -> string) =
      fun (x4382 : Blob.t) ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "URL") "createObjectURL"
             [|(Blob.t_to_js x4382)|])
    let (revokeObjectURL : string -> unit) =
      fun (x4383 : string) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "URL") "revokeObjectURL"
             [|(Ojs.string_to_js x4383)|])
  end
module ResponseType =
  struct
    type t =
      [ `L_s139_opaque  | `L_s140_opaqueredirect  | `L_s43_basic 
      | `L_s55_cors  | `L_s57_default  | `L_s68_error ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4385 : Ojs.t) ->
        let x4386 = x4385 in
        match Ojs.string_of_js x4386 with
        | "opaque" -> `L_s139_opaque
        | "opaqueredirect" -> `L_s140_opaqueredirect
        | "basic" -> `L_s43_basic
        | "cors" -> `L_s55_cors
        | "default" -> `L_s57_default
        | "error" -> `L_s68_error
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x4384 :
          [ `L_s139_opaque  | `L_s140_opaqueredirect  | `L_s43_basic 
          | `L_s55_cors  | `L_s57_default  | `L_s68_error ])
        ->
        match x4384 with
        | `L_s139_opaque -> Ojs.string_to_js "opaque"
        | `L_s140_opaqueredirect -> Ojs.string_to_js "opaqueredirect"
        | `L_s43_basic -> Ojs.string_to_js "basic"
        | `L_s55_cors -> Ojs.string_to_js "cors"
        | `L_s57_default -> Ojs.string_to_js "default"
        | `L_s68_error -> Ojs.string_to_js "error"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4388 : Ojs.t) -> t_of_js x4388
    and t_0_to_js : t_0 -> Ojs.t = fun (x4387 : t) -> t_to_js x4387
  end
module rec
  Headers:sig
            type t =
              [ `Headers  | (string * string) IterableIterator.tags_1] intf
            type t_0 = t
            [@@@js.stop ]
            type tags =
              [ `Headers  | (string * string) IterableIterator.tags_1]
            type tags_0 = tags
            [@@@js.start ]
            [@@@js.implem
              type tags =
                [ `Headers  | (string * string) IterableIterator.tags_1]
              type tags_0 = tags]
            type 'tags this = 'tags intf constraint 'tags = [> `Headers ]
            val t_to_js : t -> Ojs.t
            val t_of_js : Ojs.t -> t
            val t_0_to_js : t_0 -> Ojs.t
            val t_0_of_js : Ojs.t -> t_0
            val append : 'tags this -> name:string -> value:string -> unit
            val delete : 'tags this -> name:string -> unit
            val get_ : 'tags this -> name:string -> string option
            val has : 'tags this -> name:string -> bool
            val set_ : 'tags this -> name:string -> value:string -> unit
            val forEach :
              'tags this ->
                callbackfn:(value:string -> key:string -> parent:t -> unit)
                  -> ?thisArg:any -> unit -> unit
            val entries :
              'tags this -> (string * string) IterableIterator.t_1
            val keys : 'tags this -> string IterableIterator.t_1
            val values : 'tags this -> string IterableIterator.t_1
            val cast_from : 'tags this -> t
            val prototype : unit -> t
            val create : ?init:HeadersInit.t -> unit -> t
          end =
  struct
    type t = [ `Headers  | (string * string) IterableIterator.tags_1] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4390 : Ojs.t) -> t_of_js x4390
    and t_0_to_js : t_0 -> Ojs.t = fun (x4389 : t) -> t_to_js x4389
    type tags = [ `Headers  | (string * string) IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Headers ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4393 : Ojs.t) -> intf_of_js __tags_of_js x4393
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4391 : __tags intf) -> intf_to_js __tags_to_js x4391
    let (append : 'tags this -> name:string -> value:string -> unit) =
      fun (x4397 : 'tags this) ->
        fun ~name:(x4395 : string) ->
          fun ~value:(x4396 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x4397) "append"
                 [|(Ojs.string_to_js x4395);(Ojs.string_to_js x4396)|])
    let (delete : 'tags this -> name:string -> unit) =
      fun (x4400 : 'tags this) ->
        fun ~name:(x4399 : string) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x4400) "delete"
               [|(Ojs.string_to_js x4399)|])
    let (get_ : 'tags this -> name:string -> string option) =
      fun (x4403 : 'tags this) ->
        fun ~name:(x4402 : string) ->
          Ojs.option_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x4403) "get"
               [|(Ojs.string_to_js x4402)|])
    let (has : 'tags this -> name:string -> bool) =
      fun (x4407 : 'tags this) ->
        fun ~name:(x4406 : string) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x4407) "has"
               [|(Ojs.string_to_js x4406)|])
    let (set_ : 'tags this -> name:string -> value:string -> unit) =
      fun (x4411 : 'tags this) ->
        fun ~name:(x4409 : string) ->
          fun ~value:(x4410 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x4411) "set"
                 [|(Ojs.string_to_js x4409);(Ojs.string_to_js x4410)|])
    let (forEach :
      'tags this ->
        callbackfn:(value:string -> key:string -> parent:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x4420 : 'tags this) ->
        fun
          ~callbackfn:(x4413 :
                        value:string -> key:string -> parent:t -> unit)
          ->
          fun ?thisArg:(x4414 : any option) ->
            fun () ->
              ignore
                (let x4422 = this_to_js Obj.magic x4420 in
                 Ojs.call (Ojs.get_prop_ascii x4422 "forEach") "apply"
                   [|x4422;((let x4415 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4415 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4417 : Ojs.t) ->
                                          fun (x4418 : Ojs.t) ->
                                            fun (x4419 : Ojs.t) ->
                                              x4413
                                                ~value:(Ojs.string_of_js
                                                          x4417)
                                                ~key:(Ojs.string_of_js x4418)
                                                ~parent:(t_of_js x4419)))|]);
                             (match x4414 with
                              | Some x4416 ->
                                  ignore
                                    (Ojs.call x4415 "push"
                                       [|(any_to_js x4416)|])
                              | None -> ());
                             x4415))|])
    let (entries : 'tags this -> (string * string) IterableIterator.t_1) =
      fun (x4423 : 'tags this) ->
        IterableIterator.t_1_of_js
          (fun (x4425 : Ojs.t) ->
             let x4426 = x4425 in
             ((Ojs.string_of_js (Ojs.array_get x4426 0)),
               (Ojs.string_of_js (Ojs.array_get x4426 1))))
          (Ojs.call (this_to_js Obj.magic x4423) "entries" [||])
    let (keys : 'tags this -> string IterableIterator.t_1) =
      fun (x4427 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4427) "keys" [||])
    let (values : 'tags this -> string IterableIterator.t_1) =
      fun (x4430 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4430) "values" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Headers")
             "prototype")
    let (create : ?init:HeadersInit.t -> unit -> t) =
      fun ?init:(x4433 : HeadersInit.t option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Headers")
               (let x4434 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x4433 with
                 | Some x4435 ->
                     ignore
                       (Ojs.call x4434 "push" [|(HeadersInit.t_to_js x4435)|])
                 | None -> ());
                x4434))
  end
 and
  HeadersInit:sig
                type t =
                  (string list list, Headers.t, (string, string) Record.t_2)
                    union3
                type t_0 = t
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
              end =
  struct
    type t =
      (string list list, Headers.t, (string, string) Record.t_2) union3
    let rec t_of_js : Ojs.t -> t =
      fun (x4444 : Ojs.t) ->
        union3_of_js
          (fun (x4445 : Ojs.t) ->
             Ojs.list_of_js
               (fun (x4446 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x4446)
               x4445) Headers.t_of_js
          (fun (x4449 : Ojs.t) ->
             Record.t_2_of_js Ojs.string_of_js Ojs.string_of_js x4449) x4444
    and t_to_js : t -> Ojs.t =
      fun
        (x4436 :
          (string list list, Headers.t, (string, string) Record.t_2) union3)
        ->
        union3_to_js
          (fun (x4437 : string list list) ->
             Ojs.list_to_js
               (fun (x4438 : string list) ->
                  Ojs.list_to_js Ojs.string_to_js x4438) x4437)
          Headers.t_to_js
          (fun (x4441 : (string, string) Record.t_2) ->
             Record.t_2_to_js Ojs.string_to_js Ojs.string_to_js x4441) x4436
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4453 : Ojs.t) -> t_of_js x4453
    and t_0_to_js : t_0 -> Ojs.t = fun (x4452 : t) -> t_to_js x4452
  end
module ResponseInit =
  struct
    type t = [ `ResponseInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4455 : Ojs.t) -> t_of_js x4455
    and t_0_to_js : t_0 -> Ojs.t = fun (x4454 : t) -> t_to_js x4454
    type tags = [ `ResponseInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ResponseInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4458 : Ojs.t) -> intf_of_js __tags_of_js x4458
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4456 : __tags intf) -> intf_to_js __tags_to_js x4456
    let (get_headers : 'tags this -> HeadersInit.t option) =
      fun (x4460 : 'tags this) ->
        Ojs.option_of_js HeadersInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4460) "headers")
    let (set_headers : 'tags this -> HeadersInit.t -> unit) =
      fun (x4463 : 'tags this) ->
        fun (x4464 : HeadersInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4463) "headers"
            (HeadersInit.t_to_js x4464)
    let (get_status : 'tags this -> float option) =
      fun (x4466 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4466) "status")
    let (set_status : 'tags this -> float -> unit) =
      fun (x4469 : 'tags this) ->
        fun (x4470 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4469) "status"
            (Ojs.float_to_js x4470)
    let (get_statusText : 'tags this -> string option) =
      fun (x4472 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4472) "statusText")
    let (set_statusText : 'tags this -> string -> unit) =
      fun (x4475 : 'tags this) ->
        fun (x4476 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4475) "statusText"
            (Ojs.string_to_js x4476)
    let (create :
      ?headers:HeadersInit.t ->
        ?status:float -> ?statusText:string -> unit -> t)
      =
      fun ?headers:(x4478 : HeadersInit.t option) ->
        fun ?status:(x4479 : float option) ->
          fun ?statusText:(x4480 : string option) ->
            fun () ->
              let x4481 = Ojs.empty_obj () in
              (match x4478 with
               | Some x4484 ->
                   Ojs.set_prop_ascii x4481 "headers"
                     (HeadersInit.t_to_js x4484)
               | None -> ());
              (match x4479 with
               | Some x4483 ->
                   Ojs.set_prop_ascii x4481 "status" (Ojs.float_to_js x4483)
               | None -> ());
              (match x4480 with
               | Some x4482 ->
                   Ojs.set_prop_ascii x4481 "statusText"
                     (Ojs.string_to_js x4482)
               | None -> ());
              t_of_js x4481
    let cast_from = Obj.magic
  end
module FormDataEntryValue =
  struct
    type t = [ `String of string  | `Other of File.t ] Primitive.t
    let rec t_of_js : Ojs.t -> t =
      fun (x4489 : Ojs.t) ->
        Primitive.t_of_js
          (fun (x4490 : Ojs.t) ->
             let x4491 = x4490 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x4491 "dummy") with
             | "String" -> `String (Ojs.string_of_js x4491)
             | "Other" -> `Other (File.t_of_js x4491)
             | _ -> assert false) x4489
    and t_to_js : t -> Ojs.t =
      fun (x4485 : [ `String of string  | `Other of File.t ] Primitive.t) ->
        Primitive.t_to_js
          (fun (x4486 : [ `String of string  | `Other of File.t ]) ->
             match x4486 with
             | `String x4487 -> Ojs.string_to_js x4487
             | `Other x4488 -> File.t_to_js x4488) x4485
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4493 : Ojs.t) -> t_of_js x4493
    and t_0_to_js : t_0 -> Ojs.t = fun (x4492 : t) -> t_to_js x4492
  end
module FormData =
  struct
    type t =
      [ `FormData  | (string * FormDataEntryValue.t) IterableIterator.tags_1]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4495 : Ojs.t) -> t_of_js x4495
    and t_0_to_js : t_0 -> Ojs.t = fun (x4494 : t) -> t_to_js x4494
    type tags =
      [ `FormData  | (string * FormDataEntryValue.t) IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FormData ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4498 : Ojs.t) -> intf_of_js __tags_of_js x4498
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4496 : __tags intf) -> intf_to_js __tags_to_js x4496
    let (append :
      'tags this ->
        name:string ->
          value:[ `U1 of string  | `U2 of Blob.t ] ->
            ?fileName:string -> unit -> unit)
      =
      fun (x4507 : 'tags this) ->
        fun ~name:(x4500 : string) ->
          fun ~value:(x4501 : [ `U1 of string  | `U2 of Blob.t ]) ->
            fun ?fileName:(x4502 : string option) ->
              fun () ->
                ignore
                  (let x4509 = this_to_js Obj.magic x4507 in
                   Ojs.call (Ojs.get_prop_ascii x4509 "append") "apply"
                     [|x4509;((let x4503 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4503 "push"
                                    [|(Ojs.string_to_js x4500)|]);
                               ignore
                                 (Ojs.call x4503 "push"
                                    [|((match x4501 with
                                        | `U1 x4505 -> Ojs.string_to_js x4505
                                        | `U2 x4506 -> Blob.t_to_js x4506))|]);
                               (match x4502 with
                                | Some x4504 ->
                                    ignore
                                      (Ojs.call x4503 "push"
                                         [|(Ojs.string_to_js x4504)|])
                                | None -> ());
                               x4503))|])
    let (delete : 'tags this -> name:string -> unit) =
      fun (x4511 : 'tags this) ->
        fun ~name:(x4510 : string) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x4511) "delete"
               [|(Ojs.string_to_js x4510)|])
    let (get_ : 'tags this -> name:string -> FormDataEntryValue.t option) =
      fun (x4514 : 'tags this) ->
        fun ~name:(x4513 : string) ->
          Ojs.option_of_js FormDataEntryValue.t_of_js
            (Ojs.call (this_to_js Obj.magic x4514) "get"
               [|(Ojs.string_to_js x4513)|])
    let (getAll : 'tags this -> name:string -> FormDataEntryValue.t list) =
      fun (x4518 : 'tags this) ->
        fun ~name:(x4517 : string) ->
          Ojs.list_of_js FormDataEntryValue.t_of_js
            (Ojs.call (this_to_js Obj.magic x4518) "getAll"
               [|(Ojs.string_to_js x4517)|])
    let (has : 'tags this -> name:string -> bool) =
      fun (x4522 : 'tags this) ->
        fun ~name:(x4521 : string) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x4522) "has"
               [|(Ojs.string_to_js x4521)|])
    let (set_ :
      'tags this ->
        name:string ->
          value:[ `U1 of string  | `U2 of Blob.t ] ->
            ?fileName:string -> unit -> unit)
      =
      fun (x4531 : 'tags this) ->
        fun ~name:(x4524 : string) ->
          fun ~value:(x4525 : [ `U1 of string  | `U2 of Blob.t ]) ->
            fun ?fileName:(x4526 : string option) ->
              fun () ->
                ignore
                  (let x4533 = this_to_js Obj.magic x4531 in
                   Ojs.call (Ojs.get_prop_ascii x4533 "set") "apply"
                     [|x4533;((let x4527 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4527 "push"
                                    [|(Ojs.string_to_js x4524)|]);
                               ignore
                                 (Ojs.call x4527 "push"
                                    [|((match x4525 with
                                        | `U1 x4529 -> Ojs.string_to_js x4529
                                        | `U2 x4530 -> Blob.t_to_js x4530))|]);
                               (match x4526 with
                                | Some x4528 ->
                                    ignore
                                      (Ojs.call x4527 "push"
                                         [|(Ojs.string_to_js x4528)|])
                                | None -> ());
                               x4527))|])
    let (forEach :
      'tags this ->
        callbackfn:(value:FormDataEntryValue.t ->
                      key:string -> parent:t -> unit)
          -> ?thisArg:any -> unit -> unit)
      =
      fun (x4541 : 'tags this) ->
        fun
          ~callbackfn:(x4534 :
                        value:FormDataEntryValue.t ->
                          key:string -> parent:t -> unit)
          ->
          fun ?thisArg:(x4535 : any option) ->
            fun () ->
              ignore
                (let x4543 = this_to_js Obj.magic x4541 in
                 Ojs.call (Ojs.get_prop_ascii x4543 "forEach") "apply"
                   [|x4543;((let x4536 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4536 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4538 : Ojs.t) ->
                                          fun (x4539 : Ojs.t) ->
                                            fun (x4540 : Ojs.t) ->
                                              x4534
                                                ~value:(FormDataEntryValue.t_of_js
                                                          x4538)
                                                ~key:(Ojs.string_of_js x4539)
                                                ~parent:(t_of_js x4540)))|]);
                             (match x4535 with
                              | Some x4537 ->
                                  ignore
                                    (Ojs.call x4536 "push"
                                       [|(any_to_js x4537)|])
                              | None -> ());
                             x4536))|])
    let (entries :
      'tags this -> (string * FormDataEntryValue.t) IterableIterator.t_1) =
      fun (x4544 : 'tags this) ->
        IterableIterator.t_1_of_js
          (fun (x4546 : Ojs.t) ->
             let x4547 = x4546 in
             ((Ojs.string_of_js (Ojs.array_get x4547 0)),
               (FormDataEntryValue.t_of_js (Ojs.array_get x4547 1))))
          (Ojs.call (this_to_js Obj.magic x4544) "entries" [||])
    let (keys : 'tags this -> string IterableIterator.t_1) =
      fun (x4548 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4548) "keys" [||])
    let (values : 'tags this -> FormDataEntryValue.t IterableIterator.t_1) =
      fun (x4551 : 'tags this) ->
        IterableIterator.t_1_of_js FormDataEntryValue.t_of_js
          (Ojs.call (this_to_js Obj.magic x4551) "values" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FormData")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FormData") [||])
  end
module XMLHttpRequestBodyInit =
  struct
    type t =
      [ `String of string 
      | `Other of
          (Blob.t, BufferSource.t, FormData.t, URLSearchParams.t) union4 ]
        Primitive.t
    let rec t_of_js : Ojs.t -> t =
      fun (x4562 : Ojs.t) ->
        Primitive.t_of_js
          (fun (x4563 : Ojs.t) ->
             let x4564 = x4563 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x4564 "dummy") with
             | "String" -> `String (Ojs.string_of_js x4564)
             | "Other" ->
                 `Other
                   (union4_of_js Blob.t_of_js BufferSource.t_of_js
                      FormData.t_of_js URLSearchParams.t_of_js x4564)
             | _ -> assert false) x4562
    and t_to_js : t -> Ojs.t =
      fun
        (x4554 :
          [ `String of string 
          | `Other of
              (Blob.t, BufferSource.t, FormData.t, URLSearchParams.t) union4 ]
            Primitive.t)
        ->
        Primitive.t_to_js
          (fun
             (x4555 :
               [ `String of string 
               | `Other of
                   (Blob.t, BufferSource.t, FormData.t, URLSearchParams.t)
                     union4
                   ])
             ->
             match x4555 with
             | `String x4556 -> Ojs.string_to_js x4556
             | `Other x4557 ->
                 union4_to_js Blob.t_to_js BufferSource.t_to_js
                   FormData.t_to_js URLSearchParams.t_to_js x4557) x4554
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4570 : Ojs.t) -> t_of_js x4570
    and t_0_to_js : t_0 -> Ojs.t = fun (x4569 : t) -> t_to_js x4569
  end
module BodyInit =
  struct
    type t = (ReadableStream.t_0, XMLHttpRequestBodyInit.t) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x4574 : Ojs.t) ->
        union2_of_js ReadableStream.t_0_of_js XMLHttpRequestBodyInit.t_of_js
          x4574
    and t_to_js : t -> Ojs.t =
      fun (x4571 : (ReadableStream.t_0, XMLHttpRequestBodyInit.t) union2) ->
        union2_to_js ReadableStream.t_0_to_js XMLHttpRequestBodyInit.t_to_js
          x4571
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4578 : Ojs.t) -> t_of_js x4578
    and t_0_to_js : t_0 -> Ojs.t = fun (x4577 : t) -> t_to_js x4577
  end
module Body =
  struct
    type t = [ `Body ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4580 : Ojs.t) -> t_of_js x4580
    and t_0_to_js : t_0 -> Ojs.t = fun (x4579 : t) -> t_to_js x4579
    type tags = [ `Body ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Body ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4583 : Ojs.t) -> intf_of_js __tags_of_js x4583
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4581 : __tags intf) -> intf_to_js __tags_to_js x4581
    let (get_body : 'tags this -> Uint8Array.t_0 ReadableStream.t option) =
      fun (x4585 : 'tags this) ->
        Ojs.option_of_js
          (fun (x4587 : Ojs.t) ->
             ReadableStream.t_of_js Uint8Array.t_0_of_js x4587)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4585) "body")
    let (get_bodyUsed : 'tags this -> bool) =
      fun (x4589 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4589) "bodyUsed")
    let (arrayBuffer : 'tags this -> ArrayBuffer.t_0 Promise.t_1) =
      fun (x4591 : 'tags this) ->
        Promise.t_1_of_js ArrayBuffer.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x4591) "arrayBuffer" [||])
    let (blob : 'tags this -> Blob.t Promise.t_1) =
      fun (x4594 : 'tags this) ->
        Promise.t_1_of_js Blob.t_of_js
          (Ojs.call (this_to_js Obj.magic x4594) "blob" [||])
    let (formData : 'tags this -> FormData.t Promise.t_1) =
      fun (x4597 : 'tags this) ->
        Promise.t_1_of_js FormData.t_of_js
          (Ojs.call (this_to_js Obj.magic x4597) "formData" [||])
    let (json : 'tags this -> any Promise.t_1) =
      fun (x4600 : 'tags this) ->
        Promise.t_1_of_js any_of_js
          (Ojs.call (this_to_js Obj.magic x4600) "json" [||])
    let (text : 'tags this -> string Promise.t_1) =
      fun (x4603 : 'tags this) ->
        Promise.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4603) "text" [||])
    let cast_from = Obj.magic
  end
module Response =
  struct
    type t = [ `Body  | `Response ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4607 : Ojs.t) -> t_of_js x4607
    and t_0_to_js : t_0 -> Ojs.t = fun (x4606 : t) -> t_to_js x4606
    type tags = [ `Body  | `Response ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Response ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4610 : Ojs.t) -> intf_of_js __tags_of_js x4610
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4608 : __tags intf) -> intf_to_js __tags_to_js x4608
    let (get_headers : 'tags this -> Headers.t) =
      fun (x4612 : 'tags this) ->
        Headers.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4612) "headers")
    let (get_ok : 'tags this -> bool) =
      fun (x4614 : 'tags this) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x4614) "ok")
    let (get_redirected : 'tags this -> bool) =
      fun (x4616 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4616) "redirected")
    let (get_status : 'tags this -> float) =
      fun (x4618 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4618) "status")
    let (get_statusText : 'tags this -> string) =
      fun (x4620 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4620) "statusText")
    let (get_type : 'tags this -> ResponseType.t) =
      fun (x4622 : 'tags this) ->
        ResponseType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4622) "type")
    let (get_url : 'tags this -> string) =
      fun (x4624 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4624) "url")
    let (clone : 'tags this -> t) =
      fun (x4626 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x4626) "clone" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Response")
             "prototype")
    let (create :
      ?body:BodyInit.t option -> ?init:ResponseInit.t -> unit -> t) =
      fun ?body:(x4628 : BodyInit.t option option) ->
        fun ?init:(x4629 : ResponseInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Response")
                 (let x4630 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x4628 with
                   | Some x4632 ->
                       ignore
                         (Ojs.call x4630 "push"
                            [|(Ojs.option_to_js BodyInit.t_to_js x4632)|])
                   | None -> ());
                  (match x4629 with
                   | Some x4631 ->
                       ignore
                         (Ojs.call x4630 "push"
                            [|(ResponseInit.t_to_js x4631)|])
                   | None -> ());
                  x4630))
    let (error : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Response") "error" [||])
    let (redirect :
      url:[ `U1 of string  | `U2 of URL.t ] -> ?status:float -> unit -> t) =
      fun ~url:(x4634 : [ `U1 of string  | `U2 of URL.t ]) ->
        fun ?status:(x4635 : float option) ->
          fun () ->
            t_of_js
              (let x4640 = Ojs.get_prop_ascii Ojs.global "Response" in
               Ojs.call (Ojs.get_prop_ascii x4640 "redirect") "apply"
                 [|x4640;((let x4636 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x4636 "push"
                                [|((match x4634 with
                                    | `U1 x4638 -> Ojs.string_to_js x4638
                                    | `U2 x4639 -> URL.t_to_js x4639))|]);
                           (match x4635 with
                            | Some x4637 ->
                                ignore
                                  (Ojs.call x4636 "push"
                                     [|(Ojs.float_to_js x4637)|])
                            | None -> ());
                           x4636))|])
  end
module RequestRedirect =
  struct
    type t = [ `L_s112_manual  | `L_s68_error  | `L_s77_follow ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4642 : Ojs.t) ->
        let x4643 = x4642 in
        match Ojs.string_of_js x4643 with
        | "manual" -> `L_s112_manual
        | "error" -> `L_s68_error
        | "follow" -> `L_s77_follow
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x4641 : [ `L_s112_manual  | `L_s68_error  | `L_s77_follow ]) ->
        match x4641 with
        | `L_s112_manual -> Ojs.string_to_js "manual"
        | `L_s68_error -> Ojs.string_to_js "error"
        | `L_s77_follow -> Ojs.string_to_js "follow"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4645 : Ojs.t) -> t_of_js x4645
    and t_0_to_js : t_0 -> Ojs.t = fun (x4644 : t) -> t_to_js x4644
  end
module RequestMode =
  struct
    type t =
      [ `L_s121_navigate  | `L_s126_no_cors  | `L_s175_same_origin 
      | `L_s55_cors ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4647 : Ojs.t) ->
        let x4648 = x4647 in
        match Ojs.string_of_js x4648 with
        | "navigate" -> `L_s121_navigate
        | "no-cors" -> `L_s126_no_cors
        | "same-origin" -> `L_s175_same_origin
        | "cors" -> `L_s55_cors
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x4646 :
          [ `L_s121_navigate  | `L_s126_no_cors  | `L_s175_same_origin 
          | `L_s55_cors ])
        ->
        match x4646 with
        | `L_s121_navigate -> Ojs.string_to_js "navigate"
        | `L_s126_no_cors -> Ojs.string_to_js "no-cors"
        | `L_s175_same_origin -> Ojs.string_to_js "same-origin"
        | `L_s55_cors -> Ojs.string_to_js "cors"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4650 : Ojs.t) -> t_of_js x4650
    and t_0_to_js : t_0 -> Ojs.t = fun (x4649 : t) -> t_to_js x4649
  end
module RequestCredentials =
  struct
    type t = [ `L_s136_omit  | `L_s175_same_origin  | `L_s94_include ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4652 : Ojs.t) ->
        let x4653 = x4652 in
        match Ojs.string_of_js x4653 with
        | "omit" -> `L_s136_omit
        | "same-origin" -> `L_s175_same_origin
        | "include" -> `L_s94_include
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x4651 : [ `L_s136_omit  | `L_s175_same_origin  | `L_s94_include ])
        ->
        match x4651 with
        | `L_s136_omit -> Ojs.string_to_js "omit"
        | `L_s175_same_origin -> Ojs.string_to_js "same-origin"
        | `L_s94_include -> Ojs.string_to_js "include"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4655 : Ojs.t) -> t_of_js x4655
    and t_0_to_js : t_0 -> Ojs.t = fun (x4654 : t) -> t_to_js x4654
  end
module RequestCache =
  struct
    type t =
      [ `L_s125_no_cache  | `L_s129_no_store  | `L_s138_only_if_cached 
      | `L_s171_reload  | `L_s57_default  | `L_s79_force_cache ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4657 : Ojs.t) ->
        let x4658 = x4657 in
        match Ojs.string_of_js x4658 with
        | "no-cache" -> `L_s125_no_cache
        | "no-store" -> `L_s129_no_store
        | "only-if-cached" -> `L_s138_only_if_cached
        | "reload" -> `L_s171_reload
        | "default" -> `L_s57_default
        | "force-cache" -> `L_s79_force_cache
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x4656 :
          [ `L_s125_no_cache  | `L_s129_no_store  | `L_s138_only_if_cached 
          | `L_s171_reload  | `L_s57_default  | `L_s79_force_cache ])
        ->
        match x4656 with
        | `L_s125_no_cache -> Ojs.string_to_js "no-cache"
        | `L_s129_no_store -> Ojs.string_to_js "no-store"
        | `L_s138_only_if_cached -> Ojs.string_to_js "only-if-cached"
        | `L_s171_reload -> Ojs.string_to_js "reload"
        | `L_s57_default -> Ojs.string_to_js "default"
        | `L_s79_force_cache -> Ojs.string_to_js "force-cache"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4660 : Ojs.t) -> t_of_js x4660
    and t_0_to_js : t_0 -> Ojs.t = fun (x4659 : t) -> t_to_js x4659
  end
module ReferrerPolicy =
  struct
    type t =
      [ `L_s0  | `L_s127_no_referrer  | `L_s128_no_referrer_when_downgrade 
      | `L_s142_origin  | `L_s143_origin_when_cross_origin 
      | `L_s175_same_origin  | `L_s190_strict_origin 
      | `L_s191_strict_origin_when_cross_origin  | `L_s203_unsafe_url ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4662 : Ojs.t) ->
        let x4663 = x4662 in
        match Ojs.string_of_js x4663 with
        | "" -> `L_s0
        | "no-referrer" -> `L_s127_no_referrer
        | "no-referrer-when-downgrade" -> `L_s128_no_referrer_when_downgrade
        | "origin" -> `L_s142_origin
        | "origin-when-cross-origin" -> `L_s143_origin_when_cross_origin
        | "same-origin" -> `L_s175_same_origin
        | "strict-origin" -> `L_s190_strict_origin
        | "strict-origin-when-cross-origin" ->
            `L_s191_strict_origin_when_cross_origin
        | "unsafe-url" -> `L_s203_unsafe_url
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x4661 :
          [ `L_s0  | `L_s127_no_referrer 
          | `L_s128_no_referrer_when_downgrade  | `L_s142_origin 
          | `L_s143_origin_when_cross_origin  | `L_s175_same_origin 
          | `L_s190_strict_origin  | `L_s191_strict_origin_when_cross_origin 
          | `L_s203_unsafe_url ])
        ->
        match x4661 with
        | `L_s0 -> Ojs.string_to_js ""
        | `L_s127_no_referrer -> Ojs.string_to_js "no-referrer"
        | `L_s128_no_referrer_when_downgrade ->
            Ojs.string_to_js "no-referrer-when-downgrade"
        | `L_s142_origin -> Ojs.string_to_js "origin"
        | `L_s143_origin_when_cross_origin ->
            Ojs.string_to_js "origin-when-cross-origin"
        | `L_s175_same_origin -> Ojs.string_to_js "same-origin"
        | `L_s190_strict_origin -> Ojs.string_to_js "strict-origin"
        | `L_s191_strict_origin_when_cross_origin ->
            Ojs.string_to_js "strict-origin-when-cross-origin"
        | `L_s203_unsafe_url -> Ojs.string_to_js "unsafe-url"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4665 : Ojs.t) -> t_of_js x4665
    and t_0_to_js : t_0 -> Ojs.t = fun (x4664 : t) -> t_to_js x4664
  end
module RequestInit =
  struct
    type t = [ `RequestInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4667 : Ojs.t) -> t_of_js x4667
    and t_0_to_js : t_0 -> Ojs.t = fun (x4666 : t) -> t_to_js x4666
    type tags = [ `RequestInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RequestInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4670 : Ojs.t) -> intf_of_js __tags_of_js x4670
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4668 : __tags intf) -> intf_to_js __tags_to_js x4668
    let (get_body : 'tags this -> BodyInit.t option) =
      fun (x4672 : 'tags this) ->
        Ojs.option_of_js BodyInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4672) "body")
    let (set_body : 'tags this -> BodyInit.t option -> unit) =
      fun (x4675 : 'tags this) ->
        fun (x4676 : BodyInit.t option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4675) "body"
            (Ojs.option_to_js BodyInit.t_to_js x4676)
    let (get_cache : 'tags this -> RequestCache.t option) =
      fun (x4679 : 'tags this) ->
        Ojs.option_of_js RequestCache.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4679) "cache")
    let (set_cache : 'tags this -> RequestCache.t -> unit) =
      fun (x4682 : 'tags this) ->
        fun (x4683 : RequestCache.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4682) "cache"
            (RequestCache.t_to_js x4683)
    let (get_credentials : 'tags this -> RequestCredentials.t option) =
      fun (x4685 : 'tags this) ->
        Ojs.option_of_js RequestCredentials.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4685) "credentials")
    let (set_credentials : 'tags this -> RequestCredentials.t -> unit) =
      fun (x4688 : 'tags this) ->
        fun (x4689 : RequestCredentials.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4688) "credentials"
            (RequestCredentials.t_to_js x4689)
    let (get_headers : 'tags this -> HeadersInit.t option) =
      fun (x4691 : 'tags this) ->
        Ojs.option_of_js HeadersInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4691) "headers")
    let (set_headers : 'tags this -> HeadersInit.t -> unit) =
      fun (x4694 : 'tags this) ->
        fun (x4695 : HeadersInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4694) "headers"
            (HeadersInit.t_to_js x4695)
    let (get_integrity : 'tags this -> string option) =
      fun (x4697 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4697) "integrity")
    let (set_integrity : 'tags this -> string -> unit) =
      fun (x4700 : 'tags this) ->
        fun (x4701 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4700) "integrity"
            (Ojs.string_to_js x4701)
    let (get_keepalive : 'tags this -> bool option) =
      fun (x4703 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4703) "keepalive")
    let (set_keepalive : 'tags this -> bool -> unit) =
      fun (x4706 : 'tags this) ->
        fun (x4707 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4706) "keepalive"
            (Ojs.bool_to_js x4707)
    let (get_method : 'tags this -> string option) =
      fun (x4709 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4709) "method")
    let (set_method : 'tags this -> string -> unit) =
      fun (x4712 : 'tags this) ->
        fun (x4713 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4712) "method"
            (Ojs.string_to_js x4713)
    let (get_mode : 'tags this -> RequestMode.t option) =
      fun (x4715 : 'tags this) ->
        Ojs.option_of_js RequestMode.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4715) "mode")
    let (set_mode : 'tags this -> RequestMode.t -> unit) =
      fun (x4718 : 'tags this) ->
        fun (x4719 : RequestMode.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4718) "mode"
            (RequestMode.t_to_js x4719)
    let (get_redirect : 'tags this -> RequestRedirect.t option) =
      fun (x4721 : 'tags this) ->
        Ojs.option_of_js RequestRedirect.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4721) "redirect")
    let (set_redirect : 'tags this -> RequestRedirect.t -> unit) =
      fun (x4724 : 'tags this) ->
        fun (x4725 : RequestRedirect.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4724) "redirect"
            (RequestRedirect.t_to_js x4725)
    let (get_referrer : 'tags this -> string option) =
      fun (x4727 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4727) "referrer")
    let (set_referrer : 'tags this -> string -> unit) =
      fun (x4730 : 'tags this) ->
        fun (x4731 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4730) "referrer"
            (Ojs.string_to_js x4731)
    let (get_referrerPolicy : 'tags this -> ReferrerPolicy.t option) =
      fun (x4733 : 'tags this) ->
        Ojs.option_of_js ReferrerPolicy.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4733) "referrerPolicy")
    let (set_referrerPolicy : 'tags this -> ReferrerPolicy.t -> unit) =
      fun (x4736 : 'tags this) ->
        fun (x4737 : ReferrerPolicy.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4736) "referrerPolicy"
            (ReferrerPolicy.t_to_js x4737)
    let (get_signal : 'tags this -> AbortSignal.t option) =
      fun (x4739 : 'tags this) ->
        Ojs.option_of_js AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4739) "signal")
    let (set_signal : 'tags this -> AbortSignal.t option -> unit) =
      fun (x4742 : 'tags this) ->
        fun (x4743 : AbortSignal.t option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4742) "signal"
            (Ojs.option_to_js AbortSignal.t_to_js x4743)
    let (get_window : 'tags this -> undefined option) =
      fun (x4746 : 'tags this) ->
        Ojs.option_of_js undefined_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4746) "window")
    let (set_window : 'tags this -> null -> unit) =
      fun (x4749 : 'tags this) ->
        fun (x4750 : null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4749) "window"
            (null_to_js x4750)
    let (create :
      ?body:BodyInit.t ->
        ?cache:RequestCache.t ->
          ?credentials:RequestCredentials.t ->
            ?headers:HeadersInit.t ->
              ?integrity:string ->
                ?keepalive:bool ->
                  ?method_:string ->
                    ?mode:RequestMode.t ->
                      ?redirect:RequestRedirect.t ->
                        ?referrer:string ->
                          ?referrerPolicy:ReferrerPolicy.t ->
                            ?signal:AbortSignal.t ->
                              ?window:never -> unit -> t)
      =
      fun ?body:(x4752 : BodyInit.t option) ->
        fun ?cache:(x4753 : RequestCache.t option) ->
          fun ?credentials:(x4754 : RequestCredentials.t option) ->
            fun ?headers:(x4755 : HeadersInit.t option) ->
              fun ?integrity:(x4756 : string option) ->
                fun ?keepalive:(x4757 : bool option) ->
                  fun ?method_:(x4758 : string option) ->
                    fun ?mode:(x4759 : RequestMode.t option) ->
                      fun ?redirect:(x4760 : RequestRedirect.t option) ->
                        fun ?referrer:(x4761 : string option) ->
                          fun
                            ?referrerPolicy:(x4762 : ReferrerPolicy.t option)
                            ->
                            fun ?signal:(x4763 : AbortSignal.t option) ->
                              fun ?window:(x4764 : never option) ->
                                fun () ->
                                  let x4765 = Ojs.empty_obj () in
                                  (match x4752 with
                                   | Some x4778 ->
                                       Ojs.set_prop_ascii x4765 "body"
                                         (BodyInit.t_to_js x4778)
                                   | None -> ());
                                  (match x4753 with
                                   | Some x4777 ->
                                       Ojs.set_prop_ascii x4765 "cache"
                                         (RequestCache.t_to_js x4777)
                                   | None -> ());
                                  (match x4754 with
                                   | Some x4776 ->
                                       Ojs.set_prop_ascii x4765 "credentials"
                                         (RequestCredentials.t_to_js x4776)
                                   | None -> ());
                                  (match x4755 with
                                   | Some x4775 ->
                                       Ojs.set_prop_ascii x4765 "headers"
                                         (HeadersInit.t_to_js x4775)
                                   | None -> ());
                                  (match x4756 with
                                   | Some x4774 ->
                                       Ojs.set_prop_ascii x4765 "integrity"
                                         (Ojs.string_to_js x4774)
                                   | None -> ());
                                  (match x4757 with
                                   | Some x4773 ->
                                       Ojs.set_prop_ascii x4765 "keepalive"
                                         (Ojs.bool_to_js x4773)
                                   | None -> ());
                                  (match x4758 with
                                   | Some x4772 ->
                                       Ojs.set_prop_ascii x4765 "method"
                                         (Ojs.string_to_js x4772)
                                   | None -> ());
                                  (match x4759 with
                                   | Some x4771 ->
                                       Ojs.set_prop_ascii x4765 "mode"
                                         (RequestMode.t_to_js x4771)
                                   | None -> ());
                                  (match x4760 with
                                   | Some x4770 ->
                                       Ojs.set_prop_ascii x4765 "redirect"
                                         (RequestRedirect.t_to_js x4770)
                                   | None -> ());
                                  (match x4761 with
                                   | Some x4769 ->
                                       Ojs.set_prop_ascii x4765 "referrer"
                                         (Ojs.string_to_js x4769)
                                   | None -> ());
                                  (match x4762 with
                                   | Some x4768 ->
                                       Ojs.set_prop_ascii x4765
                                         "referrerPolicy"
                                         (ReferrerPolicy.t_to_js x4768)
                                   | None -> ());
                                  (match x4763 with
                                   | Some x4767 ->
                                       Ojs.set_prop_ascii x4765 "signal"
                                         (AbortSignal.t_to_js x4767)
                                   | None -> ());
                                  (match x4764 with
                                   | Some x4766 ->
                                       Ojs.set_prop_ascii x4765 "window"
                                         (never_to_js x4766)
                                   | None -> ());
                                  t_of_js x4765
    let cast_from = Obj.magic
  end
module RequestDestination =
  struct
    type t =
      [ `L_s0  | `L_s111_manifest  | `L_s134_object  | `L_s147_paintworklet 
      | `L_s172_report  | `L_s177_script  | `L_s180_sharedworker 
      | `L_s192_style  | `L_s198_track  | `L_s210_video  | `L_s215_worker 
      | `L_s218_xslt  | `L_s38_audio  | `L_s39_audioworklet 
      | `L_s63_document  | `L_s65_embed  | `L_s78_font  | `L_s80_frame 
      | `L_s91_iframe  | `L_s92_image ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4780 : Ojs.t) ->
        let x4781 = x4780 in
        match Ojs.string_of_js x4781 with
        | "" -> `L_s0
        | "manifest" -> `L_s111_manifest
        | "object" -> `L_s134_object
        | "paintworklet" -> `L_s147_paintworklet
        | "report" -> `L_s172_report
        | "script" -> `L_s177_script
        | "sharedworker" -> `L_s180_sharedworker
        | "style" -> `L_s192_style
        | "track" -> `L_s198_track
        | "video" -> `L_s210_video
        | "worker" -> `L_s215_worker
        | "xslt" -> `L_s218_xslt
        | "audio" -> `L_s38_audio
        | "audioworklet" -> `L_s39_audioworklet
        | "document" -> `L_s63_document
        | "embed" -> `L_s65_embed
        | "font" -> `L_s78_font
        | "frame" -> `L_s80_frame
        | "iframe" -> `L_s91_iframe
        | "image" -> `L_s92_image
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x4779 :
          [ `L_s0  | `L_s111_manifest  | `L_s134_object 
          | `L_s147_paintworklet  | `L_s172_report  | `L_s177_script 
          | `L_s180_sharedworker  | `L_s192_style  | `L_s198_track 
          | `L_s210_video  | `L_s215_worker  | `L_s218_xslt  | `L_s38_audio 
          | `L_s39_audioworklet  | `L_s63_document  | `L_s65_embed 
          | `L_s78_font  | `L_s80_frame  | `L_s91_iframe  | `L_s92_image ])
        ->
        match x4779 with
        | `L_s0 -> Ojs.string_to_js ""
        | `L_s111_manifest -> Ojs.string_to_js "manifest"
        | `L_s134_object -> Ojs.string_to_js "object"
        | `L_s147_paintworklet -> Ojs.string_to_js "paintworklet"
        | `L_s172_report -> Ojs.string_to_js "report"
        | `L_s177_script -> Ojs.string_to_js "script"
        | `L_s180_sharedworker -> Ojs.string_to_js "sharedworker"
        | `L_s192_style -> Ojs.string_to_js "style"
        | `L_s198_track -> Ojs.string_to_js "track"
        | `L_s210_video -> Ojs.string_to_js "video"
        | `L_s215_worker -> Ojs.string_to_js "worker"
        | `L_s218_xslt -> Ojs.string_to_js "xslt"
        | `L_s38_audio -> Ojs.string_to_js "audio"
        | `L_s39_audioworklet -> Ojs.string_to_js "audioworklet"
        | `L_s63_document -> Ojs.string_to_js "document"
        | `L_s65_embed -> Ojs.string_to_js "embed"
        | `L_s78_font -> Ojs.string_to_js "font"
        | `L_s80_frame -> Ojs.string_to_js "frame"
        | `L_s91_iframe -> Ojs.string_to_js "iframe"
        | `L_s92_image -> Ojs.string_to_js "image"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4783 : Ojs.t) -> t_of_js x4783
    and t_0_to_js : t_0 -> Ojs.t = fun (x4782 : t) -> t_to_js x4782
  end
module rec
  Request:sig
            type t = [ `Body  | `Request ] intf
            type t_0 = t
            [@@@js.stop ]
            type tags = [ `Body  | `Request ]
            type tags_0 = tags
            [@@@js.start ]
            [@@@js.implem
              type tags = [ `Body  | `Request ]
              type tags_0 = tags]
            type 'tags this = 'tags intf constraint 'tags = [> `Request ]
            val t_to_js : t -> Ojs.t
            val t_of_js : Ojs.t -> t
            val t_0_to_js : t_0 -> Ojs.t
            val t_0_of_js : Ojs.t -> t_0
            val get_cache : 'tags this -> RequestCache.t
            val get_credentials : 'tags this -> RequestCredentials.t
            val get_destination : 'tags this -> RequestDestination.t
            val get_headers : 'tags this -> Headers.t
            val get_integrity : 'tags this -> string
            val get_keepalive : 'tags this -> bool
            val get_method : 'tags this -> string
            val get_mode : 'tags this -> RequestMode.t
            val get_redirect : 'tags this -> RequestRedirect.t
            val get_referrer : 'tags this -> string
            val get_referrerPolicy : 'tags this -> ReferrerPolicy.t
            val get_signal : 'tags this -> AbortSignal.t
            val get_url : 'tags this -> string
            val clone : 'tags this -> t
            val cast_from : 'tags this -> t
            val prototype : unit -> t
            val create :
              input:RequestInfo.t -> ?init:RequestInit.t -> unit -> t
          end =
  struct
    type t = [ `Body  | `Request ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4785 : Ojs.t) -> t_of_js x4785
    and t_0_to_js : t_0 -> Ojs.t = fun (x4784 : t) -> t_to_js x4784
    type tags = [ `Body  | `Request ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Request ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4788 : Ojs.t) -> intf_of_js __tags_of_js x4788
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4786 : __tags intf) -> intf_to_js __tags_to_js x4786
    let (get_cache : 'tags this -> RequestCache.t) =
      fun (x4790 : 'tags this) ->
        RequestCache.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4790) "cache")
    let (get_credentials : 'tags this -> RequestCredentials.t) =
      fun (x4792 : 'tags this) ->
        RequestCredentials.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4792) "credentials")
    let (get_destination : 'tags this -> RequestDestination.t) =
      fun (x4794 : 'tags this) ->
        RequestDestination.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4794) "destination")
    let (get_headers : 'tags this -> Headers.t) =
      fun (x4796 : 'tags this) ->
        Headers.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4796) "headers")
    let (get_integrity : 'tags this -> string) =
      fun (x4798 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4798) "integrity")
    let (get_keepalive : 'tags this -> bool) =
      fun (x4800 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4800) "keepalive")
    let (get_method : 'tags this -> string) =
      fun (x4802 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4802) "method")
    let (get_mode : 'tags this -> RequestMode.t) =
      fun (x4804 : 'tags this) ->
        RequestMode.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4804) "mode")
    let (get_redirect : 'tags this -> RequestRedirect.t) =
      fun (x4806 : 'tags this) ->
        RequestRedirect.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4806) "redirect")
    let (get_referrer : 'tags this -> string) =
      fun (x4808 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4808) "referrer")
    let (get_referrerPolicy : 'tags this -> ReferrerPolicy.t) =
      fun (x4810 : 'tags this) ->
        ReferrerPolicy.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4810) "referrerPolicy")
    let (get_signal : 'tags this -> AbortSignal.t) =
      fun (x4812 : 'tags this) ->
        AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4812) "signal")
    let (get_url : 'tags this -> string) =
      fun (x4814 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4814) "url")
    let (clone : 'tags this -> t) =
      fun (x4816 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x4816) "clone" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Request")
             "prototype")
    let (create : input:RequestInfo.t -> ?init:RequestInit.t -> unit -> t) =
      fun ~input:(x4818 : RequestInfo.t) ->
        fun ?init:(x4819 : RequestInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Request")
                 (let x4820 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x4820 "push" [|(RequestInfo.t_to_js x4818)|]);
                  (match x4819 with
                   | Some x4821 ->
                       ignore
                         (Ojs.call x4820 "push"
                            [|(RequestInit.t_to_js x4821)|])
                   | None -> ());
                  x4820))
  end
 and
  RequestInfo:sig
                type t =
                  [ `String of string  | `Other of Request.t ] Primitive.t
                type t_0 = t
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
              end =
  struct
    type t = [ `String of string  | `Other of Request.t ] Primitive.t
    let rec t_of_js : Ojs.t -> t =
      fun (x4826 : Ojs.t) ->
        Primitive.t_of_js
          (fun (x4827 : Ojs.t) ->
             let x4828 = x4827 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x4828 "dummy") with
             | "String" -> `String (Ojs.string_of_js x4828)
             | "Other" -> `Other (Request.t_of_js x4828)
             | _ -> assert false) x4826
    and t_to_js : t -> Ojs.t =
      fun (x4822 : [ `String of string  | `Other of Request.t ] Primitive.t)
        ->
        Primitive.t_to_js
          (fun (x4823 : [ `String of string  | `Other of Request.t ]) ->
             match x4823 with
             | `String x4824 -> Ojs.string_to_js x4824
             | `Other x4825 -> Request.t_to_js x4825) x4822
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4830 : Ojs.t) -> t_of_js x4830
    and t_0_to_js : t_0 -> Ojs.t = fun (x4829 : t) -> t_to_js x4829
  end
module Cache =
  struct
    type t = [ `Cache ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4832 : Ojs.t) -> t_of_js x4832
    and t_0_to_js : t_0 -> Ojs.t = fun (x4831 : t) -> t_to_js x4831
    type tags = [ `Cache ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Cache ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4835 : Ojs.t) -> intf_of_js __tags_of_js x4835
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4833 : __tags intf) -> intf_to_js __tags_to_js x4833
    let (add : 'tags this -> request:RequestInfo.t -> unit Promise.t_1) =
      fun (x4838 : 'tags this) ->
        fun ~request:(x4837 : RequestInfo.t) ->
          Promise.t_1_of_js Ojs.unit_of_js
            (Ojs.call (this_to_js Obj.magic x4838) "add"
               [|(RequestInfo.t_to_js x4837)|])
    let (addAll :
      'tags this -> requests:RequestInfo.t list -> unit Promise.t_1) =
      fun (x4843 : 'tags this) ->
        fun ~requests:(x4841 : RequestInfo.t list) ->
          Promise.t_1_of_js Ojs.unit_of_js
            (Ojs.call (this_to_js Obj.magic x4843) "addAll"
               [|(Ojs.list_to_js RequestInfo.t_to_js x4841)|])
    let (delete :
      'tags this ->
        request:RequestInfo.t ->
          ?options:CacheQueryOptions.t -> unit -> bool Promise.t_1)
      =
      fun (x4850 : 'tags this) ->
        fun ~request:(x4846 : RequestInfo.t) ->
          fun ?options:(x4847 : CacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js Ojs.bool_of_js
                (let x4852 = this_to_js Obj.magic x4850 in
                 Ojs.call (Ojs.get_prop_ascii x4852 "delete") "apply"
                   [|x4852;((let x4848 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4848 "push"
                                  [|(RequestInfo.t_to_js x4846)|]);
                             (match x4847 with
                              | Some x4849 ->
                                  ignore
                                    (Ojs.call x4848 "push"
                                       [|(CacheQueryOptions.t_to_js x4849)|])
                              | None -> ());
                             x4848))|])
    let (keys :
      'tags this ->
        ?request:RequestInfo.t ->
          ?options:CacheQueryOptions.t -> unit -> Request.t list Promise.t_1)
      =
      fun (x4859 : 'tags this) ->
        fun ?request:(x4854 : RequestInfo.t option) ->
          fun ?options:(x4855 : CacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x4862 : Ojs.t) -> Ojs.list_of_js Request.t_of_js x4862)
                (let x4861 = this_to_js Obj.magic x4859 in
                 Ojs.call (Ojs.get_prop_ascii x4861 "keys") "apply"
                   [|x4861;((let x4856 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4854 with
                              | Some x4858 ->
                                  ignore
                                    (Ojs.call x4856 "push"
                                       [|(RequestInfo.t_to_js x4858)|])
                              | None -> ());
                             (match x4855 with
                              | Some x4857 ->
                                  ignore
                                    (Ojs.call x4856 "push"
                                       [|(CacheQueryOptions.t_to_js x4857)|])
                              | None -> ());
                             x4856))|])
    let (match_ :
      'tags this ->
        request:RequestInfo.t ->
          ?options:CacheQueryOptions.t ->
            unit -> Response.t option Promise.t_1)
      =
      fun (x4868 : 'tags this) ->
        fun ~request:(x4864 : RequestInfo.t) ->
          fun ?options:(x4865 : CacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x4871 : Ojs.t) ->
                   Ojs.option_of_js Response.t_of_js x4871)
                (let x4870 = this_to_js Obj.magic x4868 in
                 Ojs.call (Ojs.get_prop_ascii x4870 "match") "apply"
                   [|x4870;((let x4866 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4866 "push"
                                  [|(RequestInfo.t_to_js x4864)|]);
                             (match x4865 with
                              | Some x4867 ->
                                  ignore
                                    (Ojs.call x4866 "push"
                                       [|(CacheQueryOptions.t_to_js x4867)|])
                              | None -> ());
                             x4866))|])
    let (matchAll :
      'tags this ->
        ?request:RequestInfo.t ->
          ?options:CacheQueryOptions.t -> unit -> Response.t list Promise.t_1)
      =
      fun (x4878 : 'tags this) ->
        fun ?request:(x4873 : RequestInfo.t option) ->
          fun ?options:(x4874 : CacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x4881 : Ojs.t) -> Ojs.list_of_js Response.t_of_js x4881)
                (let x4880 = this_to_js Obj.magic x4878 in
                 Ojs.call (Ojs.get_prop_ascii x4880 "matchAll") "apply"
                   [|x4880;((let x4875 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4873 with
                              | Some x4877 ->
                                  ignore
                                    (Ojs.call x4875 "push"
                                       [|(RequestInfo.t_to_js x4877)|])
                              | None -> ());
                             (match x4874 with
                              | Some x4876 ->
                                  ignore
                                    (Ojs.call x4875 "push"
                                       [|(CacheQueryOptions.t_to_js x4876)|])
                              | None -> ());
                             x4875))|])
    let (put :
      'tags this ->
        request:RequestInfo.t -> response:Response.t -> unit Promise.t_1)
      =
      fun (x4885 : 'tags this) ->
        fun ~request:(x4883 : RequestInfo.t) ->
          fun ~response:(x4884 : Response.t) ->
            Promise.t_1_of_js Ojs.unit_of_js
              (Ojs.call (this_to_js Obj.magic x4885) "put"
                 [|(RequestInfo.t_to_js x4883);(Response.t_to_js x4884)|])
    let (addAll' :
      'tags this -> requests:RequestInfo.t Iterable.t_1 -> unit Promise.t_1)
      =
      fun (x4890 : 'tags this) ->
        fun ~requests:(x4888 : RequestInfo.t Iterable.t_1) ->
          Promise.t_1_of_js Ojs.unit_of_js
            (Ojs.call (this_to_js Obj.magic x4890) "addAll"
               [|(Iterable.t_1_to_js RequestInfo.t_to_js x4888)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Cache")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Cache") [||])
  end
module CachesStatic =
  struct
    let (delete : string -> bool Promise.t_1) =
      fun (x4893 : string) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "caches") "delete"
             [|(Ojs.string_to_js x4893)|])
    let (has : string -> bool Promise.t_1) =
      fun (x4895 : string) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "caches") "has"
             [|(Ojs.string_to_js x4895)|])
    let (keys : unit -> string list Promise.t_1) =
      fun () ->
        Promise.t_1_of_js
          (fun (x4897 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x4897)
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "caches") "keys" [||])
    let (match_ :
      request:RequestInfo.t ->
        ?options:MultiCacheQueryOptions.t ->
          unit -> Response.t option Promise.t_1)
      =
      fun ~request:(x4899 : RequestInfo.t) ->
        fun ?options:(x4900 : MultiCacheQueryOptions.t option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x4904 : Ojs.t) -> Ojs.option_of_js Response.t_of_js x4904)
              (let x4903 = Ojs.get_prop_ascii Ojs.global "caches" in
               Ojs.call (Ojs.get_prop_ascii x4903 "match") "apply"
                 [|x4903;((let x4901 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x4901 "push"
                                [|(RequestInfo.t_to_js x4899)|]);
                           (match x4900 with
                            | Some x4902 ->
                                ignore
                                  (Ojs.call x4901 "push"
                                     [|(MultiCacheQueryOptions.t_to_js x4902)|])
                            | None -> ());
                           x4901))|])
    let (open_ : string -> Cache.t Promise.t_1) =
      fun (x4906 : string) ->
        Promise.t_1_of_js Cache.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "caches") "open"
             [|(Ojs.string_to_js x4906)|])
  end
module XMLHttpRequestResponseType =
  struct
    type t =
      [ `L_s0  | `L_s195_text  | `L_s37_arraybuffer  | `L_s44_blob 
      | `L_s63_document  | `L_s98_json ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4909 : Ojs.t) ->
        let x4910 = x4909 in
        match Ojs.string_of_js x4910 with
        | "" -> `L_s0
        | "text" -> `L_s195_text
        | "arraybuffer" -> `L_s37_arraybuffer
        | "blob" -> `L_s44_blob
        | "document" -> `L_s63_document
        | "json" -> `L_s98_json
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x4908 :
          [ `L_s0  | `L_s195_text  | `L_s37_arraybuffer  | `L_s44_blob 
          | `L_s63_document  | `L_s98_json ])
        ->
        match x4908 with
        | `L_s0 -> Ojs.string_to_js ""
        | `L_s195_text -> Ojs.string_to_js "text"
        | `L_s37_arraybuffer -> Ojs.string_to_js "arraybuffer"
        | `L_s44_blob -> Ojs.string_to_js "blob"
        | `L_s63_document -> Ojs.string_to_js "document"
        | `L_s98_json -> Ojs.string_to_js "json"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4912 : Ojs.t) -> t_of_js x4912
    and t_0_to_js : t_0 -> Ojs.t = fun (x4911 : t) -> t_to_js x4911
  end
module ProgressEventInit =
  struct
    type t = [ `EventInit  | `ProgressEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4914 : Ojs.t) -> t_of_js x4914
    and t_0_to_js : t_0 -> Ojs.t = fun (x4913 : t) -> t_to_js x4913
    type tags = [ `EventInit  | `ProgressEventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ProgressEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4917 : Ojs.t) -> intf_of_js __tags_of_js x4917
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4915 : __tags intf) -> intf_to_js __tags_to_js x4915
    let (get_lengthComputable : 'tags this -> bool option) =
      fun (x4919 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4919) "lengthComputable")
    let (set_lengthComputable : 'tags this -> bool -> unit) =
      fun (x4922 : 'tags this) ->
        fun (x4923 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4922) "lengthComputable"
            (Ojs.bool_to_js x4923)
    let (get_loaded : 'tags this -> float option) =
      fun (x4925 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4925) "loaded")
    let (set_loaded : 'tags this -> float -> unit) =
      fun (x4928 : 'tags this) ->
        fun (x4929 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4928) "loaded"
            (Ojs.float_to_js x4929)
    let (get_total : 'tags this -> float option) =
      fun (x4931 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4931) "total")
    let (set_total : 'tags this -> float -> unit) =
      fun (x4934 : 'tags this) ->
        fun (x4935 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4934) "total"
            (Ojs.float_to_js x4935)
    let (create :
      ?lengthComputable:bool -> ?loaded:float -> ?total:float -> unit -> t) =
      fun ?lengthComputable:(x4937 : bool option) ->
        fun ?loaded:(x4938 : float option) ->
          fun ?total:(x4939 : float option) ->
            fun () ->
              let x4940 = Ojs.empty_obj () in
              (match x4937 with
               | Some x4943 ->
                   Ojs.set_prop_ascii x4940 "lengthComputable"
                     (Ojs.bool_to_js x4943)
               | None -> ());
              (match x4938 with
               | Some x4942 ->
                   Ojs.set_prop_ascii x4940 "loaded" (Ojs.float_to_js x4942)
               | None -> ());
              (match x4939 with
               | Some x4941 ->
                   Ojs.set_prop_ascii x4940 "total" (Ojs.float_to_js x4941)
               | None -> ());
              t_of_js x4940
    let cast_from = Obj.magic
  end
module ProgressEvent =
  struct
    type 'T t = [ `Event  | `ProgressEvent of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x4946 : Ojs.t) -> t_of_js __T_of_js x4946
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x4944 : __T t) -> t_to_js __T_to_js x4944
    type t_0 = EventTarget.t t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x4950 : Ojs.t) -> t_of_js EventTarget.t_of_js x4950
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x4948 : EventTarget.t t) -> t_to_js EventTarget.t_to_js x4948
    type 'T tags = [ `Event  | `ProgressEvent of 'T ]
    type 'T tags_1 = 'T tags
    type tags_0 = EventTarget.t tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `ProgressEvent of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__T_of_js : Ojs.t -> __T) ->
              fun (x4954 : Ojs.t) -> intf_of_js __tags_of_js x4954
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__T_to_js : __T -> Ojs.t) ->
              fun (x4952 : __tags intf) -> intf_to_js __tags_to_js x4952
    let (get_lengthComputable : ('tags, 'T) this -> bool) =
      fun (x4956 : ('tags, 'T) this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4956)
             "lengthComputable")
    let (get_loaded : ('tags, 'T) this -> float) =
      fun (x4959 : ('tags, 'T) this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4959) "loaded")
    let (get_target : ('tags, 'T) this -> 'T option) =
      fun (x4962 : ('tags, 'T) this) ->
        Ojs.option_of_js Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4962) "target")
    let (get_total : ('tags, 'T) this -> float) =
      fun (x4966 : ('tags, 'T) this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4966) "total")
    let (create :
      lengthComputable:bool ->
        loaded:float -> ?target:'T -> total:float -> unit -> 'T t)
      =
      fun ~lengthComputable:(x4969 : bool) ->
        fun ~loaded:(x4970 : float) ->
          fun ?target:(x4971 : 'T option) ->
            fun ~total:(x4972 : float) ->
              fun () ->
                let x4973 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x4973 "lengthComputable"
                  (Ojs.bool_to_js x4969);
                Ojs.set_prop_ascii x4973 "loaded" (Ojs.float_to_js x4970);
                (match x4971 with
                 | Some x4975 ->
                     Ojs.set_prop_ascii x4973 "target" (Obj.magic x4975)
                 | None -> ());
                Ojs.set_prop_ascii x4973 "total" (Ojs.float_to_js x4972);
                t_of_js Obj.magic x4973
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ProgressEvent")
             "prototype")
    let (create' :
      type_:string -> ?eventInitDict:ProgressEventInit.t -> unit -> t_0) =
      fun ~type_:(x4976 : string) ->
        fun ?eventInitDict:(x4977 : ProgressEventInit.t option) ->
          fun () ->
            t_0_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "ProgressEvent")
                 (let x4978 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x4978 "push" [|(Ojs.string_to_js x4976)|]);
                  (match x4977 with
                   | Some x4979 ->
                       ignore
                         (Ojs.call x4978 "push"
                            [|(ProgressEventInit.t_to_js x4979)|])
                   | None -> ());
                  x4978))
  end
module rec
  XMLHttpRequest:sig
                   type t =
                     [ `EventTarget  | `XMLHttpRequest 
                     | `XMLHttpRequestEventTarget ] intf
                   type t_0 = t
                   [@@@js.stop ]
                   type tags =
                     [ `EventTarget  | `XMLHttpRequest 
                     | `XMLHttpRequestEventTarget ]
                   type tags_0 = tags
                   [@@@js.start ]
                   [@@@js.implem
                     type tags =
                       [ `EventTarget  | `XMLHttpRequest 
                       | `XMLHttpRequestEventTarget ]
                     type tags_0 = tags]
                   type 'tags this =
                     'tags intf constraint 'tags = [> `XMLHttpRequest ]
                   val t_to_js : t -> Ojs.t
                   val t_of_js : Ojs.t -> t
                   val t_0_to_js : t_0 -> Ojs.t
                   val t_0_of_js : Ojs.t -> t_0
                   val get_onreadystatechange :
                     'tags this -> (this:t -> ev:Event.t -> any) option
                   val set_onreadystatechange :
                     'tags this ->
                       (this:t -> ev:Event.t -> any) option -> unit
                   val get_readyState : 'tags this -> float
                   val get_response : 'tags this -> any
                   val get_responseText : 'tags this -> string
                   val get_responseType :
                     'tags this -> XMLHttpRequestResponseType.t
                   val set_responseType :
                     'tags this -> XMLHttpRequestResponseType.t -> unit
                   val get_responseURL : 'tags this -> string
                   val get_status : 'tags this -> float
                   val get_statusText : 'tags this -> string
                   val get_timeout : 'tags this -> float
                   val set_timeout : 'tags this -> float -> unit
                   val get_upload : 'tags this -> XMLHttpRequestUpload.t
                   val get_withCredentials : 'tags this -> bool
                   val set_withCredentials : 'tags this -> bool -> unit
                   val abort : 'tags this -> unit
                   val getAllResponseHeaders : 'tags this -> string
                   val getResponseHeader :
                     'tags this -> name:string -> string option
                   val open_ :
                     'tags this ->
                       method_:string ->
                         url:[ `U1 of string  | `U2 of URL.t ] -> unit
                   val open_' :
                     'tags this ->
                       method_:string ->
                         url:[ `U1 of string  | `U2 of URL.t ] ->
                           async:bool ->
                             ?username:string option ->
                               ?password:string option -> unit -> unit
                   val overrideMimeType : 'tags this -> mime:string -> unit
                   val send :
                     'tags this ->
                       ?body:XMLHttpRequestBodyInit.t option -> unit -> unit
                   val setRequestHeader :
                     'tags this -> name:string -> value:string -> unit
                   val get_DONE : 'tags this -> float
                   val get_HEADERS_RECEIVED : 'tags this -> float
                   val get_LOADING : 'tags this -> float
                   val get_OPENED : 'tags this -> float
                   val get_UNSENT : 'tags this -> float
                   val addEventListener :
                     'tags this ->
                       type_:'K ->
                         listener:(this:t -> ev:any -> any) ->
                           ?options:[ `U1 of bool 
                                    | `U2 of AddEventListenerOptions.t ]
                             -> unit -> unit
                   val addEventListener' :
                     'tags this ->
                       type_:string ->
                         listener:EventListenerOrEventListenerObject.t ->
                           ?options:[ `U1 of bool 
                                    | `U2 of AddEventListenerOptions.t ]
                             -> unit -> unit
                   val removeEventListener :
                     'tags this ->
                       type_:'K ->
                         listener:(this:t -> ev:any -> any) ->
                           ?options:[ `U1 of bool 
                                    | `U2 of EventListenerOptions.t ]
                             -> unit -> unit
                   val removeEventListener' :
                     'tags this ->
                       type_:string ->
                         listener:EventListenerOrEventListenerObject.t ->
                           ?options:[ `U1 of bool 
                                    | `U2 of EventListenerOptions.t ]
                             -> unit -> unit
                   val cast_from : 'tags this -> t
                   val prototype : unit -> t
                   val create : unit -> t
                   val done_ : unit -> float
                   val headers_received : unit -> float
                   val loading : unit -> float
                   val opened : unit -> float
                   val unsent : unit -> float
                 end =
  struct
    type t =
      [ `EventTarget  | `XMLHttpRequest  | `XMLHttpRequestEventTarget ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4981 : Ojs.t) -> t_of_js x4981
    and t_0_to_js : t_0 -> Ojs.t = fun (x4980 : t) -> t_to_js x4980
    type tags =
      [ `EventTarget  | `XMLHttpRequest  | `XMLHttpRequestEventTarget ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `XMLHttpRequest ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4984 : Ojs.t) -> intf_of_js __tags_of_js x4984
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4982 : __tags intf) -> intf_to_js __tags_to_js x4982
    let (get_onreadystatechange :
      'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x4986 : 'tags this) ->
        Ojs.option_of_js
          (fun (x4988 : Ojs.t) ->
             fun ~this:(x4989 : t) ->
               fun ~ev:(x4990 : Event.t) ->
                 any_of_js
                   (Ojs.apply x4988 [|(t_to_js x4989);(Event.t_to_js x4990)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4986)
             "onreadystatechange")
    let (set_onreadystatechange :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x4991 : 'tags this) ->
        fun (x4992 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4991)
            "onreadystatechange"
            (Ojs.option_to_js
               (fun (x4993 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x4994 : Ojs.t) ->
                       fun (x4995 : Ojs.t) ->
                         any_to_js
                           (x4993 ~this:(t_of_js x4994)
                              ~ev:(Event.t_of_js x4995)))) x4992)
    let (get_readyState : 'tags this -> float) =
      fun (x4997 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4997) "readyState")
    let (get_response : 'tags this -> any) =
      fun (x4999 : 'tags this) ->
        any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4999) "response")
    let (get_responseText : 'tags this -> string) =
      fun (x5001 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5001) "responseText")
    let (get_responseType : 'tags this -> XMLHttpRequestResponseType.t) =
      fun (x5003 : 'tags this) ->
        XMLHttpRequestResponseType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5003) "responseType")
    let (set_responseType :
      'tags this -> XMLHttpRequestResponseType.t -> unit) =
      fun (x5005 : 'tags this) ->
        fun (x5006 : XMLHttpRequestResponseType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5005) "responseType"
            (XMLHttpRequestResponseType.t_to_js x5006)
    let (get_responseURL : 'tags this -> string) =
      fun (x5008 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5008) "responseURL")
    let (get_status : 'tags this -> float) =
      fun (x5010 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5010) "status")
    let (get_statusText : 'tags this -> string) =
      fun (x5012 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5012) "statusText")
    let (get_timeout : 'tags this -> float) =
      fun (x5014 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5014) "timeout")
    let (set_timeout : 'tags this -> float -> unit) =
      fun (x5016 : 'tags this) ->
        fun (x5017 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5016) "timeout"
            (Ojs.float_to_js x5017)
    let (get_upload : 'tags this -> XMLHttpRequestUpload.t) =
      fun (x5019 : 'tags this) ->
        XMLHttpRequestUpload.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5019) "upload")
    let (get_withCredentials : 'tags this -> bool) =
      fun (x5021 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5021) "withCredentials")
    let (set_withCredentials : 'tags this -> bool -> unit) =
      fun (x5023 : 'tags this) ->
        fun (x5024 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5023) "withCredentials"
            (Ojs.bool_to_js x5024)
    let (abort : 'tags this -> unit) =
      fun (x5026 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x5026) "abort" [||])
    let (getAllResponseHeaders : 'tags this -> string) =
      fun (x5028 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x5028) "getAllResponseHeaders" [||])
    let (getResponseHeader : 'tags this -> name:string -> string option) =
      fun (x5031 : 'tags this) ->
        fun ~name:(x5030 : string) ->
          Ojs.option_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x5031) "getResponseHeader"
               [|(Ojs.string_to_js x5030)|])
    let (open_ :
      'tags this ->
        method_:string -> url:[ `U1 of string  | `U2 of URL.t ] -> unit)
      =
      fun (x5038 : 'tags this) ->
        fun ~method_:(x5034 : string) ->
          fun ~url:(x5035 : [ `U1 of string  | `U2 of URL.t ]) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x5038) "open"
                 [|(Ojs.string_to_js x5034);((match x5035 with
                                              | `U1 x5036 ->
                                                  Ojs.string_to_js x5036
                                              | `U2 x5037 ->
                                                  URL.t_to_js x5037))|])
    let (open_' :
      'tags this ->
        method_:string ->
          url:[ `U1 of string  | `U2 of URL.t ] ->
            async:bool ->
              ?username:string option ->
                ?password:string option -> unit -> unit)
      =
      fun (x5052 : 'tags this) ->
        fun ~method_:(x5040 : string) ->
          fun ~url:(x5041 : [ `U1 of string  | `U2 of URL.t ]) ->
            fun ~async:(x5042 : bool) ->
              fun ?username:(x5043 : string option option) ->
                fun ?password:(x5044 : string option option) ->
                  fun () ->
                    ignore
                      (let x5054 = this_to_js Obj.magic x5052 in
                       Ojs.call (Ojs.get_prop_ascii x5054 "open") "apply"
                         [|x5054;((let x5045 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x5045 "push"
                                        [|(Ojs.string_to_js x5040)|]);
                                   ignore
                                     (Ojs.call x5045 "push"
                                        [|((match x5041 with
                                            | `U1 x5050 ->
                                                Ojs.string_to_js x5050
                                            | `U2 x5051 -> URL.t_to_js x5051))|]);
                                   ignore
                                     (Ojs.call x5045 "push"
                                        [|(Ojs.bool_to_js x5042)|]);
                                   (match x5043 with
                                    | Some x5048 ->
                                        ignore
                                          (Ojs.call x5045 "push"
                                             [|(Ojs.option_to_js
                                                  Ojs.string_to_js x5048)|])
                                    | None -> ());
                                   (match x5044 with
                                    | Some x5046 ->
                                        ignore
                                          (Ojs.call x5045 "push"
                                             [|(Ojs.option_to_js
                                                  Ojs.string_to_js x5046)|])
                                    | None -> ());
                                   x5045))|])
    let (overrideMimeType : 'tags this -> mime:string -> unit) =
      fun (x5056 : 'tags this) ->
        fun ~mime:(x5055 : string) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x5056) "overrideMimeType"
               [|(Ojs.string_to_js x5055)|])
    let (send :
      'tags this -> ?body:XMLHttpRequestBodyInit.t option -> unit -> unit) =
      fun (x5062 : 'tags this) ->
        fun ?body:(x5058 : XMLHttpRequestBodyInit.t option option) ->
          fun () ->
            ignore
              (let x5064 = this_to_js Obj.magic x5062 in
               Ojs.call (Ojs.get_prop_ascii x5064 "send") "apply"
                 [|x5064;((let x5059 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x5058 with
                            | Some x5060 ->
                                ignore
                                  (Ojs.call x5059 "push"
                                     [|(Ojs.option_to_js
                                          XMLHttpRequestBodyInit.t_to_js
                                          x5060)|])
                            | None -> ());
                           x5059))|])
    let (setRequestHeader :
      'tags this -> name:string -> value:string -> unit) =
      fun (x5067 : 'tags this) ->
        fun ~name:(x5065 : string) ->
          fun ~value:(x5066 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x5067) "setRequestHeader"
                 [|(Ojs.string_to_js x5065);(Ojs.string_to_js x5066)|])
    let (get_DONE : 'tags this -> float) =
      fun (x5069 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5069) "DONE")
    let (get_HEADERS_RECEIVED : 'tags this -> float) =
      fun (x5071 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5071) "HEADERS_RECEIVED")
    let (get_LOADING : 'tags this -> float) =
      fun (x5073 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5073) "LOADING")
    let (get_OPENED : 'tags this -> float) =
      fun (x5075 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5075) "OPENED")
    let (get_UNSENT : 'tags this -> float) =
      fun (x5077 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5077) "UNSENT")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5088 : 'tags this) ->
        fun ~type_:(x5079 : 'K) ->
          fun ~listener:(x5080 : this:t -> ev:any -> any) ->
            fun
              ?options:(x5081 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5090 = this_to_js Obj.magic x5088 in
                   Ojs.call (Ojs.get_prop_ascii x5090 "addEventListener")
                     "apply"
                     [|x5090;((let x5082 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5082 "push" [|(Obj.magic x5079)|]);
                               ignore
                                 (Ojs.call x5082 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5086 : Ojs.t) ->
                                            fun (x5087 : Ojs.t) ->
                                              any_to_js
                                                (x5080 ~this:(t_of_js x5086)
                                                   ~ev:(any_of_js x5087))))|]);
                               (match x5081 with
                                | Some x5083 ->
                                    ignore
                                      (Ojs.call x5082 "push"
                                         [|((match x5083 with
                                             | `U1 x5084 ->
                                                 Ojs.bool_to_js x5084
                                             | `U2 x5085 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x5085))|])
                                | None -> ());
                               x5082))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5098 : 'tags this) ->
        fun ~type_:(x5091 : string) ->
          fun ~listener:(x5092 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x5093 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5100 = this_to_js Obj.magic x5098 in
                   Ojs.call (Ojs.get_prop_ascii x5100 "addEventListener")
                     "apply"
                     [|x5100;((let x5094 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5094 "push"
                                    [|(Ojs.string_to_js x5091)|]);
                               ignore
                                 (Ojs.call x5094 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5092)|]);
                               (match x5093 with
                                | Some x5095 ->
                                    ignore
                                      (Ojs.call x5094 "push"
                                         [|((match x5095 with
                                             | `U1 x5096 ->
                                                 Ojs.bool_to_js x5096
                                             | `U2 x5097 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x5097))|])
                                | None -> ());
                               x5094))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5110 : 'tags this) ->
        fun ~type_:(x5101 : 'K) ->
          fun ~listener:(x5102 : this:t -> ev:any -> any) ->
            fun
              ?options:(x5103 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5112 = this_to_js Obj.magic x5110 in
                   Ojs.call (Ojs.get_prop_ascii x5112 "removeEventListener")
                     "apply"
                     [|x5112;((let x5104 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5104 "push" [|(Obj.magic x5101)|]);
                               ignore
                                 (Ojs.call x5104 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5108 : Ojs.t) ->
                                            fun (x5109 : Ojs.t) ->
                                              any_to_js
                                                (x5102 ~this:(t_of_js x5108)
                                                   ~ev:(any_of_js x5109))))|]);
                               (match x5103 with
                                | Some x5105 ->
                                    ignore
                                      (Ojs.call x5104 "push"
                                         [|((match x5105 with
                                             | `U1 x5106 ->
                                                 Ojs.bool_to_js x5106
                                             | `U2 x5107 ->
                                                 EventListenerOptions.t_to_js
                                                   x5107))|])
                                | None -> ());
                               x5104))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5120 : 'tags this) ->
        fun ~type_:(x5113 : string) ->
          fun ~listener:(x5114 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x5115 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5122 = this_to_js Obj.magic x5120 in
                   Ojs.call (Ojs.get_prop_ascii x5122 "removeEventListener")
                     "apply"
                     [|x5122;((let x5116 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5116 "push"
                                    [|(Ojs.string_to_js x5113)|]);
                               ignore
                                 (Ojs.call x5116 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5114)|]);
                               (match x5115 with
                                | Some x5117 ->
                                    ignore
                                      (Ojs.call x5116 "push"
                                         [|((match x5117 with
                                             | `U1 x5118 ->
                                                 Ojs.bool_to_js x5118
                                             | `U2 x5119 ->
                                                 EventListenerOptions.t_to_js
                                                   x5119))|])
                                | None -> ());
                               x5116))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") [||])
    let (done_ : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") "DONE")
    let (headers_received : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest")
             "HEADERS_RECEIVED")
    let (loading : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") "LOADING")
    let (opened : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") "OPENED")
    let (unsent : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") "UNSENT")
  end
 and
  XMLHttpRequestEventTarget:sig
                              type t =
                                [ `EventTarget 
                                | `XMLHttpRequestEventTarget ] intf
                              type t_0 = t
                              [@@@js.stop ]
                              type tags =
                                [ `EventTarget 
                                | `XMLHttpRequestEventTarget ]
                              type tags_0 = tags
                              [@@@js.start ]
                              [@@@js.implem
                                type tags =
                                  [ `EventTarget 
                                  | `XMLHttpRequestEventTarget ]
                                type tags_0 = tags]
                              type 'tags this =
                                'tags intf constraint 'tags =
                                            [> `XMLHttpRequestEventTarget ]
                              val t_to_js : t -> Ojs.t
                              val t_of_js : Ojs.t -> t
                              val t_0_to_js : t_0 -> Ojs.t
                              val t_0_of_js : Ojs.t -> t_0
                              val get_onabort :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option
                              val set_onabort :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option -> unit
                              val get_onerror :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option
                              val set_onerror :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option -> unit
                              val get_onload :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option
                              val set_onload :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option -> unit
                              val get_onloadend :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option
                              val set_onloadend :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option -> unit
                              val get_onloadstart :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option
                              val set_onloadstart :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option -> unit
                              val get_onprogress :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option
                              val set_onprogress :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option -> unit
                              val get_ontimeout :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option
                              val set_ontimeout :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option -> unit
                              val addEventListener :
                                'tags this ->
                                  type_:'K ->
                                    listener:(this:t -> ev:any -> any) ->
                                      ?options:[ `U1 of bool 
                                               | `U2 of
                                                   AddEventListenerOptions.t ]
                                        -> unit -> unit
                              val addEventListener' :
                                'tags this ->
                                  type_:string ->
                                    listener:EventListenerOrEventListenerObject.t
                                      ->
                                      ?options:[ `U1 of bool 
                                               | `U2 of
                                                   AddEventListenerOptions.t ]
                                        -> unit -> unit
                              val removeEventListener :
                                'tags this ->
                                  type_:'K ->
                                    listener:(this:t -> ev:any -> any) ->
                                      ?options:[ `U1 of bool 
                                               | `U2 of
                                                   EventListenerOptions.t ]
                                        -> unit -> unit
                              val removeEventListener' :
                                'tags this ->
                                  type_:string ->
                                    listener:EventListenerOrEventListenerObject.t
                                      ->
                                      ?options:[ `U1 of bool 
                                               | `U2 of
                                                   EventListenerOptions.t ]
                                        -> unit -> unit
                              val cast_from : 'tags this -> t
                              val prototype : unit -> t
                              val create : unit -> t
                            end =
  struct
    type t = [ `EventTarget  | `XMLHttpRequestEventTarget ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5124 : Ojs.t) -> t_of_js x5124
    and t_0_to_js : t_0 -> Ojs.t = fun (x5123 : t) -> t_to_js x5123
    type tags = [ `EventTarget  | `XMLHttpRequestEventTarget ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `XMLHttpRequestEventTarget ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x5127 : Ojs.t) -> intf_of_js __tags_of_js x5127
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x5125 : __tags intf) -> intf_to_js __tags_to_js x5125
    let (get_onabort :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
      =
      fun (x5129 : 'tags this) ->
        Ojs.option_of_js
          (fun (x5131 : Ojs.t) ->
             fun ~this:(x5132 : XMLHttpRequest.t) ->
               fun ~ev:(x5133 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x5131
                      [|(XMLHttpRequest.t_to_js x5132);(ProgressEvent.t_0_to_js
                                                          x5133)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5129) "onabort")
    let (set_onabort :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit)
      =
      fun (x5134 : 'tags this) ->
        fun
          (x5135 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5134) "onabort"
            (Ojs.option_to_js
               (fun
                  (x5136 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x5137 : Ojs.t) ->
                       fun (x5138 : Ojs.t) ->
                         any_to_js
                           (x5136 ~this:(XMLHttpRequest.t_of_js x5137)
                              ~ev:(ProgressEvent.t_0_of_js x5138)))) x5135)
    let (get_onerror :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
      =
      fun (x5140 : 'tags this) ->
        Ojs.option_of_js
          (fun (x5142 : Ojs.t) ->
             fun ~this:(x5143 : XMLHttpRequest.t) ->
               fun ~ev:(x5144 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x5142
                      [|(XMLHttpRequest.t_to_js x5143);(ProgressEvent.t_0_to_js
                                                          x5144)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5140) "onerror")
    let (set_onerror :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit)
      =
      fun (x5145 : 'tags this) ->
        fun
          (x5146 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5145) "onerror"
            (Ojs.option_to_js
               (fun
                  (x5147 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x5148 : Ojs.t) ->
                       fun (x5149 : Ojs.t) ->
                         any_to_js
                           (x5147 ~this:(XMLHttpRequest.t_of_js x5148)
                              ~ev:(ProgressEvent.t_0_of_js x5149)))) x5146)
    let (get_onload :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
      =
      fun (x5151 : 'tags this) ->
        Ojs.option_of_js
          (fun (x5153 : Ojs.t) ->
             fun ~this:(x5154 : XMLHttpRequest.t) ->
               fun ~ev:(x5155 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x5153
                      [|(XMLHttpRequest.t_to_js x5154);(ProgressEvent.t_0_to_js
                                                          x5155)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5151) "onload")
    let (set_onload :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit)
      =
      fun (x5156 : 'tags this) ->
        fun
          (x5157 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5156) "onload"
            (Ojs.option_to_js
               (fun
                  (x5158 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x5159 : Ojs.t) ->
                       fun (x5160 : Ojs.t) ->
                         any_to_js
                           (x5158 ~this:(XMLHttpRequest.t_of_js x5159)
                              ~ev:(ProgressEvent.t_0_of_js x5160)))) x5157)
    let (get_onloadend :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
      =
      fun (x5162 : 'tags this) ->
        Ojs.option_of_js
          (fun (x5164 : Ojs.t) ->
             fun ~this:(x5165 : XMLHttpRequest.t) ->
               fun ~ev:(x5166 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x5164
                      [|(XMLHttpRequest.t_to_js x5165);(ProgressEvent.t_0_to_js
                                                          x5166)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5162) "onloadend")
    let (set_onloadend :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit)
      =
      fun (x5167 : 'tags this) ->
        fun
          (x5168 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5167) "onloadend"
            (Ojs.option_to_js
               (fun
                  (x5169 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x5170 : Ojs.t) ->
                       fun (x5171 : Ojs.t) ->
                         any_to_js
                           (x5169 ~this:(XMLHttpRequest.t_of_js x5170)
                              ~ev:(ProgressEvent.t_0_of_js x5171)))) x5168)
    let (get_onloadstart :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
      =
      fun (x5173 : 'tags this) ->
        Ojs.option_of_js
          (fun (x5175 : Ojs.t) ->
             fun ~this:(x5176 : XMLHttpRequest.t) ->
               fun ~ev:(x5177 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x5175
                      [|(XMLHttpRequest.t_to_js x5176);(ProgressEvent.t_0_to_js
                                                          x5177)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5173) "onloadstart")
    let (set_onloadstart :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit)
      =
      fun (x5178 : 'tags this) ->
        fun
          (x5179 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5178) "onloadstart"
            (Ojs.option_to_js
               (fun
                  (x5180 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x5181 : Ojs.t) ->
                       fun (x5182 : Ojs.t) ->
                         any_to_js
                           (x5180 ~this:(XMLHttpRequest.t_of_js x5181)
                              ~ev:(ProgressEvent.t_0_of_js x5182)))) x5179)
    let (get_onprogress :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
      =
      fun (x5184 : 'tags this) ->
        Ojs.option_of_js
          (fun (x5186 : Ojs.t) ->
             fun ~this:(x5187 : XMLHttpRequest.t) ->
               fun ~ev:(x5188 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x5186
                      [|(XMLHttpRequest.t_to_js x5187);(ProgressEvent.t_0_to_js
                                                          x5188)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5184) "onprogress")
    let (set_onprogress :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit)
      =
      fun (x5189 : 'tags this) ->
        fun
          (x5190 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5189) "onprogress"
            (Ojs.option_to_js
               (fun
                  (x5191 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x5192 : Ojs.t) ->
                       fun (x5193 : Ojs.t) ->
                         any_to_js
                           (x5191 ~this:(XMLHttpRequest.t_of_js x5192)
                              ~ev:(ProgressEvent.t_0_of_js x5193)))) x5190)
    let (get_ontimeout :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
      =
      fun (x5195 : 'tags this) ->
        Ojs.option_of_js
          (fun (x5197 : Ojs.t) ->
             fun ~this:(x5198 : XMLHttpRequest.t) ->
               fun ~ev:(x5199 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x5197
                      [|(XMLHttpRequest.t_to_js x5198);(ProgressEvent.t_0_to_js
                                                          x5199)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5195) "ontimeout")
    let (set_ontimeout :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit)
      =
      fun (x5200 : 'tags this) ->
        fun
          (x5201 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5200) "ontimeout"
            (Ojs.option_to_js
               (fun
                  (x5202 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x5203 : Ojs.t) ->
                       fun (x5204 : Ojs.t) ->
                         any_to_js
                           (x5202 ~this:(XMLHttpRequest.t_of_js x5203)
                              ~ev:(ProgressEvent.t_0_of_js x5204)))) x5201)
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5215 : 'tags this) ->
        fun ~type_:(x5206 : 'K) ->
          fun ~listener:(x5207 : this:t -> ev:any -> any) ->
            fun
              ?options:(x5208 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5217 = this_to_js Obj.magic x5215 in
                   Ojs.call (Ojs.get_prop_ascii x5217 "addEventListener")
                     "apply"
                     [|x5217;((let x5209 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5209 "push" [|(Obj.magic x5206)|]);
                               ignore
                                 (Ojs.call x5209 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5213 : Ojs.t) ->
                                            fun (x5214 : Ojs.t) ->
                                              any_to_js
                                                (x5207 ~this:(t_of_js x5213)
                                                   ~ev:(any_of_js x5214))))|]);
                               (match x5208 with
                                | Some x5210 ->
                                    ignore
                                      (Ojs.call x5209 "push"
                                         [|((match x5210 with
                                             | `U1 x5211 ->
                                                 Ojs.bool_to_js x5211
                                             | `U2 x5212 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x5212))|])
                                | None -> ());
                               x5209))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5225 : 'tags this) ->
        fun ~type_:(x5218 : string) ->
          fun ~listener:(x5219 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x5220 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5227 = this_to_js Obj.magic x5225 in
                   Ojs.call (Ojs.get_prop_ascii x5227 "addEventListener")
                     "apply"
                     [|x5227;((let x5221 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5221 "push"
                                    [|(Ojs.string_to_js x5218)|]);
                               ignore
                                 (Ojs.call x5221 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5219)|]);
                               (match x5220 with
                                | Some x5222 ->
                                    ignore
                                      (Ojs.call x5221 "push"
                                         [|((match x5222 with
                                             | `U1 x5223 ->
                                                 Ojs.bool_to_js x5223
                                             | `U2 x5224 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x5224))|])
                                | None -> ());
                               x5221))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5237 : 'tags this) ->
        fun ~type_:(x5228 : 'K) ->
          fun ~listener:(x5229 : this:t -> ev:any -> any) ->
            fun
              ?options:(x5230 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5239 = this_to_js Obj.magic x5237 in
                   Ojs.call (Ojs.get_prop_ascii x5239 "removeEventListener")
                     "apply"
                     [|x5239;((let x5231 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5231 "push" [|(Obj.magic x5228)|]);
                               ignore
                                 (Ojs.call x5231 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5235 : Ojs.t) ->
                                            fun (x5236 : Ojs.t) ->
                                              any_to_js
                                                (x5229 ~this:(t_of_js x5235)
                                                   ~ev:(any_of_js x5236))))|]);
                               (match x5230 with
                                | Some x5232 ->
                                    ignore
                                      (Ojs.call x5231 "push"
                                         [|((match x5232 with
                                             | `U1 x5233 ->
                                                 Ojs.bool_to_js x5233
                                             | `U2 x5234 ->
                                                 EventListenerOptions.t_to_js
                                                   x5234))|])
                                | None -> ());
                               x5231))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5247 : 'tags this) ->
        fun ~type_:(x5240 : string) ->
          fun ~listener:(x5241 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x5242 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5249 = this_to_js Obj.magic x5247 in
                   Ojs.call (Ojs.get_prop_ascii x5249 "removeEventListener")
                     "apply"
                     [|x5249;((let x5243 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5243 "push"
                                    [|(Ojs.string_to_js x5240)|]);
                               ignore
                                 (Ojs.call x5243 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5241)|]);
                               (match x5242 with
                                | Some x5244 ->
                                    ignore
                                      (Ojs.call x5243 "push"
                                         [|((match x5244 with
                                             | `U1 x5245 ->
                                                 Ojs.bool_to_js x5245
                                             | `U2 x5246 ->
                                                 EventListenerOptions.t_to_js
                                                   x5246))|])
                                | None -> ());
                               x5243))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequestEventTarget")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequestEventTarget") 
             [||])
  end and
       XMLHttpRequestUpload:sig
                              type t =
                                [ `EventTarget  | `XMLHttpRequestEventTarget 
                                | `XMLHttpRequestUpload ] intf
                              type t_0 = t
                              [@@@js.stop ]
                              type tags =
                                [ `EventTarget  | `XMLHttpRequestEventTarget 
                                | `XMLHttpRequestUpload ]
                              type tags_0 = tags
                              [@@@js.start ]
                              [@@@js.implem
                                type tags =
                                  [ `EventTarget 
                                  | `XMLHttpRequestEventTarget 
                                  | `XMLHttpRequestUpload ]
                                type tags_0 = tags]
                              type 'tags this =
                                'tags intf constraint 'tags =
                                            [> `XMLHttpRequestUpload ]
                              val t_to_js : t -> Ojs.t
                              val t_of_js : Ojs.t -> t
                              val t_0_to_js : t_0 -> Ojs.t
                              val t_0_of_js : Ojs.t -> t_0
                              val addEventListener :
                                'tags this ->
                                  type_:'K ->
                                    listener:(this:t -> ev:any -> any) ->
                                      ?options:[ `U1 of bool 
                                               | `U2 of
                                                   AddEventListenerOptions.t ]
                                        -> unit -> unit
                              val addEventListener' :
                                'tags this ->
                                  type_:string ->
                                    listener:EventListenerOrEventListenerObject.t
                                      ->
                                      ?options:[ `U1 of bool 
                                               | `U2 of
                                                   AddEventListenerOptions.t ]
                                        -> unit -> unit
                              val removeEventListener :
                                'tags this ->
                                  type_:'K ->
                                    listener:(this:t -> ev:any -> any) ->
                                      ?options:[ `U1 of bool 
                                               | `U2 of
                                                   EventListenerOptions.t ]
                                        -> unit -> unit
                              val removeEventListener' :
                                'tags this ->
                                  type_:string ->
                                    listener:EventListenerOrEventListenerObject.t
                                      ->
                                      ?options:[ `U1 of bool 
                                               | `U2 of
                                                   EventListenerOptions.t ]
                                        -> unit -> unit
                              val cast_from : 'tags this -> t
                              val prototype : unit -> t
                              val create : unit -> t
                            end =
       struct
         type t =
           [ `EventTarget  | `XMLHttpRequestEventTarget 
           | `XMLHttpRequestUpload ] intf
         let rec t_of_js : Ojs.t -> t = Obj.magic
         and t_to_js : t -> Ojs.t = Obj.magic
         type t_0 = t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x5251 : Ojs.t) -> t_of_js x5251
         and t_0_to_js : t_0 -> Ojs.t = fun (x5250 : t) -> t_to_js x5250
         type tags =
           [ `EventTarget  | `XMLHttpRequestEventTarget 
           | `XMLHttpRequestUpload ]
         type tags_0 = tags
         type 'tags this =
           'tags intf constraint 'tags = [> `XMLHttpRequestUpload ]
         let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
           =
           fun (type __tags) ->
             fun (__tags_of_js : Ojs.t -> __tags) ->
               fun (x5254 : Ojs.t) -> intf_of_js __tags_of_js x5254
         and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
           fun (type __tags) ->
             fun (__tags_to_js : __tags -> Ojs.t) ->
               fun (x5252 : __tags intf) -> intf_to_js __tags_to_js x5252
         let (addEventListener :
           'tags this ->
             type_:'K ->
               listener:(this:t -> ev:any -> any) ->
                 ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                   -> unit -> unit)
           =
           fun (x5265 : 'tags this) ->
             fun ~type_:(x5256 : 'K) ->
               fun ~listener:(x5257 : this:t -> ev:any -> any) ->
                 fun
                   ?options:(x5258 :
                              [ `U1 of bool 
                              | `U2 of AddEventListenerOptions.t ] option)
                   ->
                   fun () ->
                     ignore
                       (let x5267 = this_to_js Obj.magic x5265 in
                        Ojs.call
                          (Ojs.get_prop_ascii x5267 "addEventListener")
                          "apply"
                          [|x5267;((let x5259 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x5259 "push"
                                         [|(Obj.magic x5256)|]);
                                    ignore
                                      (Ojs.call x5259 "push"
                                         [|(Ojs.fun_to_js 2
                                              (fun (x5263 : Ojs.t) ->
                                                 fun (x5264 : Ojs.t) ->
                                                   any_to_js
                                                     (x5257
                                                        ~this:(t_of_js x5263)
                                                        ~ev:(any_of_js x5264))))|]);
                                    (match x5258 with
                                     | Some x5260 ->
                                         ignore
                                           (Ojs.call x5259 "push"
                                              [|((match x5260 with
                                                  | `U1 x5261 ->
                                                      Ojs.bool_to_js x5261
                                                  | `U2 x5262 ->
                                                      AddEventListenerOptions.t_to_js
                                                        x5262))|])
                                     | None -> ());
                                    x5259))|])
         let (addEventListener' :
           'tags this ->
             type_:string ->
               listener:EventListenerOrEventListenerObject.t ->
                 ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                   -> unit -> unit)
           =
           fun (x5275 : 'tags this) ->
             fun ~type_:(x5268 : string) ->
               fun ~listener:(x5269 : EventListenerOrEventListenerObject.t)
                 ->
                 fun
                   ?options:(x5270 :
                              [ `U1 of bool 
                              | `U2 of AddEventListenerOptions.t ] option)
                   ->
                   fun () ->
                     ignore
                       (let x5277 = this_to_js Obj.magic x5275 in
                        Ojs.call
                          (Ojs.get_prop_ascii x5277 "addEventListener")
                          "apply"
                          [|x5277;((let x5271 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x5271 "push"
                                         [|(Ojs.string_to_js x5268)|]);
                                    ignore
                                      (Ojs.call x5271 "push"
                                         [|(EventListenerOrEventListenerObject.t_to_js
                                              x5269)|]);
                                    (match x5270 with
                                     | Some x5272 ->
                                         ignore
                                           (Ojs.call x5271 "push"
                                              [|((match x5272 with
                                                  | `U1 x5273 ->
                                                      Ojs.bool_to_js x5273
                                                  | `U2 x5274 ->
                                                      AddEventListenerOptions.t_to_js
                                                        x5274))|])
                                     | None -> ());
                                    x5271))|])
         let (removeEventListener :
           'tags this ->
             type_:'K ->
               listener:(this:t -> ev:any -> any) ->
                 ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
                   unit -> unit)
           =
           fun (x5287 : 'tags this) ->
             fun ~type_:(x5278 : 'K) ->
               fun ~listener:(x5279 : this:t -> ev:any -> any) ->
                 fun
                   ?options:(x5280 :
                              [ `U1 of bool 
                              | `U2 of EventListenerOptions.t ] option)
                   ->
                   fun () ->
                     ignore
                       (let x5289 = this_to_js Obj.magic x5287 in
                        Ojs.call
                          (Ojs.get_prop_ascii x5289 "removeEventListener")
                          "apply"
                          [|x5289;((let x5281 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x5281 "push"
                                         [|(Obj.magic x5278)|]);
                                    ignore
                                      (Ojs.call x5281 "push"
                                         [|(Ojs.fun_to_js 2
                                              (fun (x5285 : Ojs.t) ->
                                                 fun (x5286 : Ojs.t) ->
                                                   any_to_js
                                                     (x5279
                                                        ~this:(t_of_js x5285)
                                                        ~ev:(any_of_js x5286))))|]);
                                    (match x5280 with
                                     | Some x5282 ->
                                         ignore
                                           (Ojs.call x5281 "push"
                                              [|((match x5282 with
                                                  | `U1 x5283 ->
                                                      Ojs.bool_to_js x5283
                                                  | `U2 x5284 ->
                                                      EventListenerOptions.t_to_js
                                                        x5284))|])
                                     | None -> ());
                                    x5281))|])
         let (removeEventListener' :
           'tags this ->
             type_:string ->
               listener:EventListenerOrEventListenerObject.t ->
                 ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
                   unit -> unit)
           =
           fun (x5297 : 'tags this) ->
             fun ~type_:(x5290 : string) ->
               fun ~listener:(x5291 : EventListenerOrEventListenerObject.t)
                 ->
                 fun
                   ?options:(x5292 :
                              [ `U1 of bool 
                              | `U2 of EventListenerOptions.t ] option)
                   ->
                   fun () ->
                     ignore
                       (let x5299 = this_to_js Obj.magic x5297 in
                        Ojs.call
                          (Ojs.get_prop_ascii x5299 "removeEventListener")
                          "apply"
                          [|x5299;((let x5293 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x5293 "push"
                                         [|(Ojs.string_to_js x5290)|]);
                                    ignore
                                      (Ojs.call x5293 "push"
                                         [|(EventListenerOrEventListenerObject.t_to_js
                                              x5291)|]);
                                    (match x5292 with
                                     | Some x5294 ->
                                         ignore
                                           (Ojs.call x5293 "push"
                                              [|((match x5294 with
                                                  | `U1 x5295 ->
                                                      Ojs.bool_to_js x5295
                                                  | `U2 x5296 ->
                                                      EventListenerOptions.t_to_js
                                                        x5296))|])
                                     | None -> ());
                                    x5293))|])
         let cast_from = Obj.magic
         let (prototype : unit -> t) =
           fun () ->
             t_of_js
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global "XMLHttpRequestUpload")
                  "prototype")
         let (create : unit -> t) =
           fun () ->
             t_of_js
               (Ojs.new_obj
                  (Ojs.get_prop_ascii Ojs.global "XMLHttpRequestUpload") 
                  [||])
       end
module XMLHttpRequestEventTargetEventMap =
  struct
    type t = [ `XMLHttpRequestEventTargetEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5301 : Ojs.t) -> t_of_js x5301
    and t_0_to_js : t_0 -> Ojs.t = fun (x5300 : t) -> t_to_js x5300
    type tags = [ `XMLHttpRequestEventTargetEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `XMLHttpRequestEventTargetEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x5304 : Ojs.t) -> intf_of_js __tags_of_js x5304
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x5302 : __tags intf) -> intf_to_js __tags_to_js x5302
    let (get_abort :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5306 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5306) "abort")
    let (set_abort :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5309 : 'tags this) ->
        fun (x5310 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5309) "abort"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5310)
    let (get_error :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5313 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5313) "error")
    let (set_error :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5316 : 'tags this) ->
        fun (x5317 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5316) "error"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5317)
    let (get_load :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5320 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5320) "load")
    let (set_load :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5323 : 'tags this) ->
        fun (x5324 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5323) "load"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5324)
    let (get_loadend :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5327 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5327) "loadend")
    let (set_loadend :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5330 : 'tags this) ->
        fun (x5331 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5330) "loadend"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5331)
    let (get_loadstart :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5334 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5334) "loadstart")
    let (set_loadstart :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5337 : 'tags this) ->
        fun (x5338 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5337) "loadstart"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5338)
    let (get_progress :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5341 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5341) "progress")
    let (set_progress :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5344 : 'tags this) ->
        fun (x5345 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5344) "progress"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5345)
    let (get_timeout :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5348 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5348) "timeout")
    let (set_timeout :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5351 : 'tags this) ->
        fun (x5352 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5351) "timeout"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5352)
    let (create :
      abort:XMLHttpRequestEventTarget.t ProgressEvent.t ->
        error:XMLHttpRequestEventTarget.t ProgressEvent.t ->
          load:XMLHttpRequestEventTarget.t ProgressEvent.t ->
            loadend:XMLHttpRequestEventTarget.t ProgressEvent.t ->
              loadstart:XMLHttpRequestEventTarget.t ProgressEvent.t ->
                progress:XMLHttpRequestEventTarget.t ProgressEvent.t ->
                  timeout:XMLHttpRequestEventTarget.t ProgressEvent.t ->
                    unit -> t)
      =
      fun ~abort:(x5355 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
        fun ~error:(x5356 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          fun ~load:(x5357 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
            fun
              ~loadend:(x5358 : XMLHttpRequestEventTarget.t ProgressEvent.t)
              ->
              fun
                ~loadstart:(x5359 :
                             XMLHttpRequestEventTarget.t ProgressEvent.t)
                ->
                fun
                  ~progress:(x5360 :
                              XMLHttpRequestEventTarget.t ProgressEvent.t)
                  ->
                  fun
                    ~timeout:(x5361 :
                               XMLHttpRequestEventTarget.t ProgressEvent.t)
                    ->
                    fun () ->
                      let x5362 = Ojs.empty_obj () in
                      Ojs.set_prop_ascii x5362 "abort"
                        (ProgressEvent.t_to_js
                           XMLHttpRequestEventTarget.t_to_js x5355);
                      Ojs.set_prop_ascii x5362 "error"
                        (ProgressEvent.t_to_js
                           XMLHttpRequestEventTarget.t_to_js x5356);
                      Ojs.set_prop_ascii x5362 "load"
                        (ProgressEvent.t_to_js
                           XMLHttpRequestEventTarget.t_to_js x5357);
                      Ojs.set_prop_ascii x5362 "loadend"
                        (ProgressEvent.t_to_js
                           XMLHttpRequestEventTarget.t_to_js x5358);
                      Ojs.set_prop_ascii x5362 "loadstart"
                        (ProgressEvent.t_to_js
                           XMLHttpRequestEventTarget.t_to_js x5359);
                      Ojs.set_prop_ascii x5362 "progress"
                        (ProgressEvent.t_to_js
                           XMLHttpRequestEventTarget.t_to_js x5360);
                      Ojs.set_prop_ascii x5362 "timeout"
                        (ProgressEvent.t_to_js
                           XMLHttpRequestEventTarget.t_to_js x5361);
                      t_of_js x5362
    let cast_from = Obj.magic
  end
module XMLHttpRequestEventMap =
  struct
    type t =
      [ `XMLHttpRequestEventMap  | `XMLHttpRequestEventTargetEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5371 : Ojs.t) -> t_of_js x5371
    and t_0_to_js : t_0 -> Ojs.t = fun (x5370 : t) -> t_to_js x5370
    type tags =
      [ `XMLHttpRequestEventMap  | `XMLHttpRequestEventTargetEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `XMLHttpRequestEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x5374 : Ojs.t) -> intf_of_js __tags_of_js x5374
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x5372 : __tags intf) -> intf_to_js __tags_to_js x5372
    let (get_readystatechange : 'tags this -> Event.t) =
      fun (x5376 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5376) "readystatechange")
    let (set_readystatechange : 'tags this -> Event.t -> unit) =
      fun (x5378 : 'tags this) ->
        fun (x5379 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5378) "readystatechange"
            (Event.t_to_js x5379)
    let (create : readystatechange:Event.t -> unit -> t) =
      fun ~readystatechange:(x5381 : Event.t) ->
        fun () ->
          let x5382 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x5382 "readystatechange" (Event.t_to_js x5381);
          t_of_js x5382
    let cast_from = Obj.magic
  end
module ServiceWorkerState =
  struct
    type t =
      [ `L_s148_parsed  | `L_s168_redundant  | `L_s33_activated 
      | `L_s34_activating  | `L_s96_installed  | `L_s97_installing ]
    let rec t_of_js : Ojs.t -> t =
      fun (x5384 : Ojs.t) ->
        let x5385 = x5384 in
        match Ojs.string_of_js x5385 with
        | "parsed" -> `L_s148_parsed
        | "redundant" -> `L_s168_redundant
        | "activated" -> `L_s33_activated
        | "activating" -> `L_s34_activating
        | "installed" -> `L_s96_installed
        | "installing" -> `L_s97_installing
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x5383 :
          [ `L_s148_parsed  | `L_s168_redundant  | `L_s33_activated 
          | `L_s34_activating  | `L_s96_installed  | `L_s97_installing ])
        ->
        match x5383 with
        | `L_s148_parsed -> Ojs.string_to_js "parsed"
        | `L_s168_redundant -> Ojs.string_to_js "redundant"
        | `L_s33_activated -> Ojs.string_to_js "activated"
        | `L_s34_activating -> Ojs.string_to_js "activating"
        | `L_s96_installed -> Ojs.string_to_js "installed"
        | `L_s97_installing -> Ojs.string_to_js "installing"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5387 : Ojs.t) -> t_of_js x5387
    and t_0_to_js : t_0 -> Ojs.t = fun (x5386 : t) -> t_to_js x5386
  end
module ImageBitmap =
  struct
    type t = [ `ImageBitmap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5389 : Ojs.t) -> t_of_js x5389
    and t_0_to_js : t_0 -> Ojs.t = fun (x5388 : t) -> t_to_js x5388
    type tags = [ `ImageBitmap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImageBitmap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x5392 : Ojs.t) -> intf_of_js __tags_of_js x5392
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x5390 : __tags intf) -> intf_to_js __tags_to_js x5390
    let (get_height : 'tags this -> float) =
      fun (x5394 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5394) "height")
    let (get_width : 'tags this -> float) =
      fun (x5396 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5396) "width")
    let (close : 'tags this -> unit) =
      fun (x5398 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x5398) "close" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ImageBitmap")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "ImageBitmap") [||])
  end
module ErrorEventInit =
  struct
    type t = [ `ErrorEventInit  | `EventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5401 : Ojs.t) -> t_of_js x5401
    and t_0_to_js : t_0 -> Ojs.t = fun (x5400 : t) -> t_to_js x5400
    type tags = [ `ErrorEventInit  | `EventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ErrorEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x5404 : Ojs.t) -> intf_of_js __tags_of_js x5404
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x5402 : __tags intf) -> intf_to_js __tags_to_js x5402
    let (get_colno : 'tags this -> float option) =
      fun (x5406 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5406) "colno")
    let (set_colno : 'tags this -> float -> unit) =
      fun (x5409 : 'tags this) ->
        fun (x5410 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5409) "colno"
            (Ojs.float_to_js x5410)
    let (get_error : 'tags this -> any option) =
      fun (x5412 : 'tags this) ->
        Ojs.option_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5412) "error")
    let (set_error : 'tags this -> any -> unit) =
      fun (x5415 : 'tags this) ->
        fun (x5416 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5415) "error"
            (any_to_js x5416)
    let (get_filename : 'tags this -> string option) =
      fun (x5418 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5418) "filename")
    let (set_filename : 'tags this -> string -> unit) =
      fun (x5421 : 'tags this) ->
        fun (x5422 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5421) "filename"
            (Ojs.string_to_js x5422)
    let (get_lineno : 'tags this -> float option) =
      fun (x5424 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5424) "lineno")
    let (set_lineno : 'tags this -> float -> unit) =
      fun (x5427 : 'tags this) ->
        fun (x5428 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5427) "lineno"
            (Ojs.float_to_js x5428)
    let (get_message : 'tags this -> string option) =
      fun (x5430 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5430) "message")
    let (set_message : 'tags this -> string -> unit) =
      fun (x5433 : 'tags this) ->
        fun (x5434 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5433) "message"
            (Ojs.string_to_js x5434)
    let (create :
      ?colno:float ->
        ?error:any ->
          ?filename:string -> ?lineno:float -> ?message:string -> unit -> t)
      =
      fun ?colno:(x5436 : float option) ->
        fun ?error:(x5437 : any option) ->
          fun ?filename:(x5438 : string option) ->
            fun ?lineno:(x5439 : float option) ->
              fun ?message:(x5440 : string option) ->
                fun () ->
                  let x5441 = Ojs.empty_obj () in
                  (match x5436 with
                   | Some x5446 ->
                       Ojs.set_prop_ascii x5441 "colno"
                         (Ojs.float_to_js x5446)
                   | None -> ());
                  (match x5437 with
                   | Some x5445 ->
                       Ojs.set_prop_ascii x5441 "error" (any_to_js x5445)
                   | None -> ());
                  (match x5438 with
                   | Some x5444 ->
                       Ojs.set_prop_ascii x5441 "filename"
                         (Ojs.string_to_js x5444)
                   | None -> ());
                  (match x5439 with
                   | Some x5443 ->
                       Ojs.set_prop_ascii x5441 "lineno"
                         (Ojs.float_to_js x5443)
                   | None -> ());
                  (match x5440 with
                   | Some x5442 ->
                       Ojs.set_prop_ascii x5441 "message"
                         (Ojs.string_to_js x5442)
                   | None -> ());
                  t_of_js x5441
    let cast_from = Obj.magic
  end
module ErrorEvent =
  struct
    type t = [ `ErrorEvent  | `Event ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5448 : Ojs.t) -> t_of_js x5448
    and t_0_to_js : t_0 -> Ojs.t = fun (x5447 : t) -> t_to_js x5447
    type tags = [ `ErrorEvent  | `Event ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ErrorEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x5451 : Ojs.t) -> intf_of_js __tags_of_js x5451
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x5449 : __tags intf) -> intf_to_js __tags_to_js x5449
    let (get_colno : 'tags this -> float) =
      fun (x5453 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5453) "colno")
    let (get_error : 'tags this -> any) =
      fun (x5455 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x5455) "error")
    let (get_filename : 'tags this -> string) =
      fun (x5457 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5457) "filename")
    let (get_lineno : 'tags this -> float) =
      fun (x5459 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5459) "lineno")
    let (get_message : 'tags this -> string) =
      fun (x5461 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5461) "message")
    let (create :
      colno:float ->
        error:any ->
          filename:string -> lineno:float -> message:string -> unit -> t)
      =
      fun ~colno:(x5463 : float) ->
        fun ~error:(x5464 : any) ->
          fun ~filename:(x5465 : string) ->
            fun ~lineno:(x5466 : float) ->
              fun ~message:(x5467 : string) ->
                fun () ->
                  let x5468 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x5468 "colno" (Ojs.float_to_js x5463);
                  Ojs.set_prop_ascii x5468 "error" (any_to_js x5464);
                  Ojs.set_prop_ascii x5468 "filename"
                    (Ojs.string_to_js x5465);
                  Ojs.set_prop_ascii x5468 "lineno" (Ojs.float_to_js x5466);
                  Ojs.set_prop_ascii x5468 "message" (Ojs.string_to_js x5467);
                  t_of_js x5468
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ErrorEvent")
             "prototype")
    let (create' :
      type_:string -> ?eventInitDict:ErrorEventInit.t -> unit -> t) =
      fun ~type_:(x5469 : string) ->
        fun ?eventInitDict:(x5470 : ErrorEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "ErrorEvent")
                 (let x5471 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x5471 "push" [|(Ojs.string_to_js x5469)|]);
                  (match x5470 with
                   | Some x5472 ->
                       ignore
                         (Ojs.call x5471 "push"
                            [|(ErrorEventInit.t_to_js x5472)|])
                   | None -> ());
                  x5471))
  end
module AbstractWorker =
  struct
    type t = [ `AbstractWorker ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5474 : Ojs.t) -> t_of_js x5474
    and t_0_to_js : t_0 -> Ojs.t = fun (x5473 : t) -> t_to_js x5473
    type tags = [ `AbstractWorker ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AbstractWorker ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x5477 : Ojs.t) -> intf_of_js __tags_of_js x5477
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x5475 : __tags intf) -> intf_to_js __tags_to_js x5475
    let (get_onerror :
      'tags this -> (this:t -> ev:ErrorEvent.t -> any) option) =
      fun (x5479 : 'tags this) ->
        Ojs.option_of_js
          (fun (x5481 : Ojs.t) ->
             fun ~this:(x5482 : t) ->
               fun ~ev:(x5483 : ErrorEvent.t) ->
                 any_of_js
                   (Ojs.apply x5481
                      [|(t_to_js x5482);(ErrorEvent.t_to_js x5483)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5479) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:ErrorEvent.t -> any) option -> unit) =
      fun (x5484 : 'tags this) ->
        fun (x5485 : (this:t -> ev:ErrorEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5484) "onerror"
            (Ojs.option_to_js
               (fun (x5486 : this:t -> ev:ErrorEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x5487 : Ojs.t) ->
                       fun (x5488 : Ojs.t) ->
                         any_to_js
                           (x5486 ~this:(t_of_js x5487)
                              ~ev:(ErrorEvent.t_of_js x5488)))) x5485)
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5499 : 'tags this) ->
        fun ~type_:(x5490 : 'K) ->
          fun ~listener:(x5491 : this:t -> ev:any -> any) ->
            fun
              ?options:(x5492 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5501 = this_to_js Obj.magic x5499 in
                   Ojs.call (Ojs.get_prop_ascii x5501 "addEventListener")
                     "apply"
                     [|x5501;((let x5493 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5493 "push" [|(Obj.magic x5490)|]);
                               ignore
                                 (Ojs.call x5493 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5497 : Ojs.t) ->
                                            fun (x5498 : Ojs.t) ->
                                              any_to_js
                                                (x5491 ~this:(t_of_js x5497)
                                                   ~ev:(any_of_js x5498))))|]);
                               (match x5492 with
                                | Some x5494 ->
                                    ignore
                                      (Ojs.call x5493 "push"
                                         [|((match x5494 with
                                             | `U1 x5495 ->
                                                 Ojs.bool_to_js x5495
                                             | `U2 x5496 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x5496))|])
                                | None -> ());
                               x5493))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5509 : 'tags this) ->
        fun ~type_:(x5502 : string) ->
          fun ~listener:(x5503 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x5504 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5511 = this_to_js Obj.magic x5509 in
                   Ojs.call (Ojs.get_prop_ascii x5511 "addEventListener")
                     "apply"
                     [|x5511;((let x5505 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5505 "push"
                                    [|(Ojs.string_to_js x5502)|]);
                               ignore
                                 (Ojs.call x5505 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5503)|]);
                               (match x5504 with
                                | Some x5506 ->
                                    ignore
                                      (Ojs.call x5505 "push"
                                         [|((match x5506 with
                                             | `U1 x5507 ->
                                                 Ojs.bool_to_js x5507
                                             | `U2 x5508 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x5508))|])
                                | None -> ());
                               x5505))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5521 : 'tags this) ->
        fun ~type_:(x5512 : 'K) ->
          fun ~listener:(x5513 : this:t -> ev:any -> any) ->
            fun
              ?options:(x5514 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5523 = this_to_js Obj.magic x5521 in
                   Ojs.call (Ojs.get_prop_ascii x5523 "removeEventListener")
                     "apply"
                     [|x5523;((let x5515 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5515 "push" [|(Obj.magic x5512)|]);
                               ignore
                                 (Ojs.call x5515 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5519 : Ojs.t) ->
                                            fun (x5520 : Ojs.t) ->
                                              any_to_js
                                                (x5513 ~this:(t_of_js x5519)
                                                   ~ev:(any_of_js x5520))))|]);
                               (match x5514 with
                                | Some x5516 ->
                                    ignore
                                      (Ojs.call x5515 "push"
                                         [|((match x5516 with
                                             | `U1 x5517 ->
                                                 Ojs.bool_to_js x5517
                                             | `U2 x5518 ->
                                                 EventListenerOptions.t_to_js
                                                   x5518))|])
                                | None -> ());
                               x5515))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5531 : 'tags this) ->
        fun ~type_:(x5524 : string) ->
          fun ~listener:(x5525 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x5526 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5533 = this_to_js Obj.magic x5531 in
                   Ojs.call (Ojs.get_prop_ascii x5533 "removeEventListener")
                     "apply"
                     [|x5533;((let x5527 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5527 "push"
                                    [|(Ojs.string_to_js x5524)|]);
                               ignore
                                 (Ojs.call x5527 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5525)|]);
                               (match x5526 with
                                | Some x5528 ->
                                    ignore
                                      (Ojs.call x5527 "push"
                                         [|((match x5528 with
                                             | `U1 x5529 ->
                                                 Ojs.bool_to_js x5529
                                             | `U2 x5530 ->
                                                 EventListenerOptions.t_to_js
                                                   x5530))|])
                                | None -> ());
                               x5527))|])
    let cast_from = Obj.magic
  end
module rec
  MessageEvent:sig
                 type 'T t = [ `Event  | `MessageEvent of 'T ] intf
                 type 'T t_1 = 'T t
                 type t_0 = any t
                 [@@@js.stop ]
                 type 'T tags = [ `Event  | `MessageEvent of 'T ]
                 type 'T tags_1 = 'T tags
                 type tags_0 = any tags
                 [@@@js.start ]
                 [@@@js.implem
                   type 'T tags = [ `Event  | `MessageEvent of 'T ]
                   type 'T tags_1 = 'T tags
                   type tags_0 = any tags]
                 type ('tags, 'T) this =
                   'tags intf constraint 'tags = [> `MessageEvent of 'T ]
                 val t_to_js : ('T -> Ojs.t) -> 'T t -> Ojs.t
                 val t_of_js : (Ojs.t -> 'T) -> Ojs.t -> 'T t
                 val t_1_to_js : ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
                 val t_1_of_js : (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
                 val t_0_to_js : t_0 -> Ojs.t
                 val t_0_of_js : Ojs.t -> t_0
                 val get_data : ('tags, 'T) this -> 'T
                 val get_lastEventId : ('tags, 'T) this -> string
                 val get_origin : ('tags, 'T) this -> string
                 val get_ports : ('tags, 'T) this -> MessagePort.t list
                 val get_source :
                   ('tags, 'T) this -> MessageEventSource.t option
                 val initMessageEvent :
                   ('tags, 'T) this ->
                     type_:string ->
                       ?bubbles:bool ->
                         ?cancelable:bool ->
                           ?data:any ->
                             ?origin:string ->
                               ?lastEventId:string ->
                                 ?source:MessageEventSource.t option ->
                                   ?ports:MessagePort.t list -> unit -> unit
                 val initMessageEvent' :
                   ('tags, 'T) this ->
                     type_:string ->
                       ?bubbles:bool ->
                         ?cancelable:bool ->
                           ?data:any ->
                             ?origin:string ->
                               ?lastEventId:string ->
                                 ?source:MessageEventSource.t option ->
                                   ?ports:MessagePort.t Iterable.t_1 ->
                                     unit -> unit
                 val cast_from : ('tags, 'T) this -> 'T t
                 val prototype : unit -> t_0
                 val create :
                   type_:string ->
                     ?eventInitDict:'T MessageEventInit.t -> unit -> 'T t
               end =
  struct
    type 'T t = [ `Event  | `MessageEvent of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x5536 : Ojs.t) -> t_of_js __T_of_js x5536
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x5534 : __T t) -> t_to_js __T_to_js x5534
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x5540 : Ojs.t) -> t_of_js any_of_js x5540
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x5538 : any t) -> t_to_js any_to_js x5538
    type 'T tags = [ `Event  | `MessageEvent of 'T ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `MessageEvent of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__T_of_js : Ojs.t -> __T) ->
              fun (x5544 : Ojs.t) -> intf_of_js __tags_of_js x5544
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__T_to_js : __T -> Ojs.t) ->
              fun (x5542 : __tags intf) -> intf_to_js __tags_to_js x5542
    let (get_data : ('tags, 'T) this -> 'T) =
      fun (x5546 : ('tags, 'T) this) ->
        Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5546) "data")
    let (get_lastEventId : ('tags, 'T) this -> string) =
      fun (x5549 : ('tags, 'T) this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5549)
             "lastEventId")
    let (get_origin : ('tags, 'T) this -> string) =
      fun (x5552 : ('tags, 'T) this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5552) "origin")
    let (get_ports : ('tags, 'T) this -> MessagePort.t list) =
      fun (x5555 : ('tags, 'T) this) ->
        Ojs.list_of_js MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5555) "ports")
    let (get_source : ('tags, 'T) this -> MessageEventSource.t option) =
      fun (x5559 : ('tags, 'T) this) ->
        Ojs.option_of_js MessageEventSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5559) "source")
    let (initMessageEvent :
      ('tags, 'T) this ->
        type_:string ->
          ?bubbles:bool ->
            ?cancelable:bool ->
              ?data:any ->
                ?origin:string ->
                  ?lastEventId:string ->
                    ?source:MessageEventSource.t option ->
                      ?ports:MessagePort.t list -> unit -> unit)
      =
      fun (x5581 : ('tags, 'T) this) ->
        fun ~type_:(x5563 : string) ->
          fun ?bubbles:(x5564 : bool option) ->
            fun ?cancelable:(x5565 : bool option) ->
              fun ?data:(x5566 : any option) ->
                fun ?origin:(x5567 : string option) ->
                  fun ?lastEventId:(x5568 : string option) ->
                    fun ?source:(x5569 : MessageEventSource.t option option)
                      ->
                      fun ?ports:(x5570 : MessagePort.t list option) ->
                        fun () ->
                          ignore
                            (let x5584 = this_to_js Obj.magic Obj.magic x5581 in
                             Ojs.call
                               (Ojs.get_prop_ascii x5584 "initMessageEvent")
                               "apply"
                               [|x5584;((let x5571 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x5571 "push"
                                              [|(Ojs.string_to_js x5563)|]);
                                         (match x5564 with
                                          | Some x5580 ->
                                              ignore
                                                (Ojs.call x5571 "push"
                                                   [|(Ojs.bool_to_js x5580)|])
                                          | None -> ());
                                         (match x5565 with
                                          | Some x5579 ->
                                              ignore
                                                (Ojs.call x5571 "push"
                                                   [|(Ojs.bool_to_js x5579)|])
                                          | None -> ());
                                         (match x5566 with
                                          | Some x5578 ->
                                              ignore
                                                (Ojs.call x5571 "push"
                                                   [|(any_to_js x5578)|])
                                          | None -> ());
                                         (match x5567 with
                                          | Some x5577 ->
                                              ignore
                                                (Ojs.call x5571 "push"
                                                   [|(Ojs.string_to_js x5577)|])
                                          | None -> ());
                                         (match x5568 with
                                          | Some x5576 ->
                                              ignore
                                                (Ojs.call x5571 "push"
                                                   [|(Ojs.string_to_js x5576)|])
                                          | None -> ());
                                         (match x5569 with
                                          | Some x5574 ->
                                              ignore
                                                (Ojs.call x5571 "push"
                                                   [|(Ojs.option_to_js
                                                        MessageEventSource.t_to_js
                                                        x5574)|])
                                          | None -> ());
                                         (match x5570 with
                                          | Some x5572 ->
                                              ignore
                                                (Ojs.call x5571 "push"
                                                   [|(Ojs.list_to_js
                                                        MessagePort.t_to_js
                                                        x5572)|])
                                          | None -> ());
                                         x5571))|])
    let (initMessageEvent' :
      ('tags, 'T) this ->
        type_:string ->
          ?bubbles:bool ->
            ?cancelable:bool ->
              ?data:any ->
                ?origin:string ->
                  ?lastEventId:string ->
                    ?source:MessageEventSource.t option ->
                      ?ports:MessagePort.t Iterable.t_1 -> unit -> unit)
      =
      fun (x5603 : ('tags, 'T) this) ->
        fun ~type_:(x5585 : string) ->
          fun ?bubbles:(x5586 : bool option) ->
            fun ?cancelable:(x5587 : bool option) ->
              fun ?data:(x5588 : any option) ->
                fun ?origin:(x5589 : string option) ->
                  fun ?lastEventId:(x5590 : string option) ->
                    fun ?source:(x5591 : MessageEventSource.t option option)
                      ->
                      fun ?ports:(x5592 : MessagePort.t Iterable.t_1 option)
                        ->
                        fun () ->
                          ignore
                            (let x5606 = this_to_js Obj.magic Obj.magic x5603 in
                             Ojs.call
                               (Ojs.get_prop_ascii x5606 "initMessageEvent")
                               "apply"
                               [|x5606;((let x5593 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x5593 "push"
                                              [|(Ojs.string_to_js x5585)|]);
                                         (match x5586 with
                                          | Some x5602 ->
                                              ignore
                                                (Ojs.call x5593 "push"
                                                   [|(Ojs.bool_to_js x5602)|])
                                          | None -> ());
                                         (match x5587 with
                                          | Some x5601 ->
                                              ignore
                                                (Ojs.call x5593 "push"
                                                   [|(Ojs.bool_to_js x5601)|])
                                          | None -> ());
                                         (match x5588 with
                                          | Some x5600 ->
                                              ignore
                                                (Ojs.call x5593 "push"
                                                   [|(any_to_js x5600)|])
                                          | None -> ());
                                         (match x5589 with
                                          | Some x5599 ->
                                              ignore
                                                (Ojs.call x5593 "push"
                                                   [|(Ojs.string_to_js x5599)|])
                                          | None -> ());
                                         (match x5590 with
                                          | Some x5598 ->
                                              ignore
                                                (Ojs.call x5593 "push"
                                                   [|(Ojs.string_to_js x5598)|])
                                          | None -> ());
                                         (match x5591 with
                                          | Some x5596 ->
                                              ignore
                                                (Ojs.call x5593 "push"
                                                   [|(Ojs.option_to_js
                                                        MessageEventSource.t_to_js
                                                        x5596)|])
                                          | None -> ());
                                         (match x5592 with
                                          | Some x5594 ->
                                              ignore
                                                (Ojs.call x5593 "push"
                                                   [|(Iterable.t_1_to_js
                                                        MessagePort.t_to_js
                                                        x5594)|])
                                          | None -> ());
                                         x5593))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "MessageEvent")
             "prototype")
    let (create :
      type_:string -> ?eventInitDict:'T MessageEventInit.t -> unit -> 'T t) =
      fun ~type_:(x5607 : string) ->
        fun ?eventInitDict:(x5608 : 'T MessageEventInit.t option) ->
          fun () ->
            t_of_js Obj.magic
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "MessageEvent")
                 (let x5609 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x5609 "push" [|(Ojs.string_to_js x5607)|]);
                  (match x5608 with
                   | Some x5610 ->
                       ignore
                         (Ojs.call x5609 "push"
                            [|(MessageEventInit.t_to_js Obj.magic x5610)|])
                   | None -> ());
                  x5609))
  end
 and
  MessageEventInit:sig
                     type 'T t =
                       [ `EventInit  | `MessageEventInit of 'T ] intf
                     type 'T t_1 = 'T t
                     type t_0 = any t
                     [@@@js.stop ]
                     type 'T tags = [ `EventInit  | `MessageEventInit of 'T ]
                     type 'T tags_1 = 'T tags
                     type tags_0 = any tags
                     [@@@js.start ]
                     [@@@js.implem
                       type 'T tags =
                         [ `EventInit  | `MessageEventInit of 'T ]
                       type 'T tags_1 = 'T tags
                       type tags_0 = any tags]
                     type ('tags, 'T) this =
                       'tags intf constraint 'tags =
                                   [> `MessageEventInit of 'T ]
                     val t_to_js : ('T -> Ojs.t) -> 'T t -> Ojs.t
                     val t_of_js : (Ojs.t -> 'T) -> Ojs.t -> 'T t
                     val t_1_to_js : ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
                     val t_1_of_js : (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
                     val t_0_to_js : t_0 -> Ojs.t
                     val t_0_of_js : Ojs.t -> t_0
                     val get_data : ('tags, 'T) this -> 'T option
                     val set_data : ('tags, 'T) this -> 'T -> unit
                     val get_lastEventId : ('tags, 'T) this -> string option
                     val set_lastEventId : ('tags, 'T) this -> string -> unit
                     val get_origin : ('tags, 'T) this -> string option
                     val set_origin : ('tags, 'T) this -> string -> unit
                     val get_ports :
                       ('tags, 'T) this -> MessagePort.t list option
                     val set_ports :
                       ('tags, 'T) this -> MessagePort.t list -> unit
                     val get_source :
                       ('tags, 'T) this -> MessageEventSource.t option
                     val set_source :
                       ('tags, 'T) this ->
                         MessageEventSource.t option -> unit
                     val create :
                       ?data:'T ->
                         ?lastEventId:string ->
                           ?origin:string ->
                             ?ports:MessagePort.t list ->
                               ?source:MessageEventSource.t -> unit -> 'T t
                     val cast_from : ('tags, 'T) this -> 'T t
                   end =
  struct
    type 'T t = [ `EventInit  | `MessageEventInit of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x5615 : Ojs.t) -> t_of_js __T_of_js x5615
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x5613 : __T t) -> t_to_js __T_to_js x5613
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x5619 : Ojs.t) -> t_of_js any_of_js x5619
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x5617 : any t) -> t_to_js any_to_js x5617
    type 'T tags = [ `EventInit  | `MessageEventInit of 'T ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `MessageEventInit of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__T_of_js : Ojs.t -> __T) ->
              fun (x5623 : Ojs.t) -> intf_of_js __tags_of_js x5623
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__T_to_js : __T -> Ojs.t) ->
              fun (x5621 : __tags intf) -> intf_to_js __tags_to_js x5621
    let (get_data : ('tags, 'T) this -> 'T option) =
      fun (x5625 : ('tags, 'T) this) ->
        Ojs.option_of_js Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5625) "data")
    let (set_data : ('tags, 'T) this -> 'T -> unit) =
      fun (x5629 : ('tags, 'T) this) ->
        fun (x5630 : 'T) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x5629) "data"
            (Obj.magic x5630)
    let (get_lastEventId : ('tags, 'T) this -> string option) =
      fun (x5633 : ('tags, 'T) this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5633)
             "lastEventId")
    let (set_lastEventId : ('tags, 'T) this -> string -> unit) =
      fun (x5637 : ('tags, 'T) this) ->
        fun (x5638 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x5637)
            "lastEventId" (Ojs.string_to_js x5638)
    let (get_origin : ('tags, 'T) this -> string option) =
      fun (x5641 : ('tags, 'T) this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5641) "origin")
    let (set_origin : ('tags, 'T) this -> string -> unit) =
      fun (x5645 : ('tags, 'T) this) ->
        fun (x5646 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x5645) "origin"
            (Ojs.string_to_js x5646)
    let (get_ports : ('tags, 'T) this -> MessagePort.t list option) =
      fun (x5649 : ('tags, 'T) this) ->
        Ojs.option_of_js
          (fun (x5652 : Ojs.t) -> Ojs.list_of_js MessagePort.t_of_js x5652)
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5649) "ports")
    let (set_ports : ('tags, 'T) this -> MessagePort.t list -> unit) =
      fun (x5654 : ('tags, 'T) this) ->
        fun (x5655 : MessagePort.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x5654) "ports"
            (Ojs.list_to_js MessagePort.t_to_js x5655)
    let (get_source : ('tags, 'T) this -> MessageEventSource.t option) =
      fun (x5659 : ('tags, 'T) this) ->
        Ojs.option_of_js MessageEventSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5659) "source")
    let (set_source :
      ('tags, 'T) this -> MessageEventSource.t option -> unit) =
      fun (x5663 : ('tags, 'T) this) ->
        fun (x5664 : MessageEventSource.t option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x5663) "source"
            (Ojs.option_to_js MessageEventSource.t_to_js x5664)
    let (create :
      ?data:'T ->
        ?lastEventId:string ->
          ?origin:string ->
            ?ports:MessagePort.t list ->
              ?source:MessageEventSource.t -> unit -> 'T t)
      =
      fun ?data:(x5668 : 'T option) ->
        fun ?lastEventId:(x5669 : string option) ->
          fun ?origin:(x5670 : string option) ->
            fun ?ports:(x5671 : MessagePort.t list option) ->
              fun ?source:(x5672 : MessageEventSource.t option) ->
                fun () ->
                  let x5673 = Ojs.empty_obj () in
                  (match x5668 with
                   | Some x5680 ->
                       Ojs.set_prop_ascii x5673 "data" (Obj.magic x5680)
                   | None -> ());
                  (match x5669 with
                   | Some x5679 ->
                       Ojs.set_prop_ascii x5673 "lastEventId"
                         (Ojs.string_to_js x5679)
                   | None -> ());
                  (match x5670 with
                   | Some x5678 ->
                       Ojs.set_prop_ascii x5673 "origin"
                         (Ojs.string_to_js x5678)
                   | None -> ());
                  (match x5671 with
                   | Some x5676 ->
                       Ojs.set_prop_ascii x5673 "ports"
                         (Ojs.list_to_js MessagePort.t_to_js x5676)
                   | None -> ());
                  (match x5672 with
                   | Some x5675 ->
                       Ojs.set_prop_ascii x5673 "source"
                         (MessageEventSource.t_to_js x5675)
                   | None -> ());
                  t_of_js Obj.magic x5673
    let cast_from = Obj.magic
  end and
       MessageEventSource:sig
                            type t = (MessagePort.t, ServiceWorker.t) union2
                            type t_0 = t
                            val t_to_js : t -> Ojs.t
                            val t_of_js : Ojs.t -> t
                            val t_0_to_js : t_0 -> Ojs.t
                            val t_0_of_js : Ojs.t -> t_0
                          end =
       struct
         type t = (MessagePort.t, ServiceWorker.t) union2
         let rec t_of_js : Ojs.t -> t =
           fun (x5684 : Ojs.t) ->
             union2_of_js MessagePort.t_of_js ServiceWorker.t_of_js x5684
         and t_to_js : t -> Ojs.t =
           fun (x5681 : (MessagePort.t, ServiceWorker.t) union2) ->
             union2_to_js MessagePort.t_to_js ServiceWorker.t_to_js x5681
         type t_0 = t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x5688 : Ojs.t) -> t_of_js x5688
         and t_0_to_js : t_0 -> Ojs.t = fun (x5687 : t) -> t_to_js x5687
       end and
            MessagePort:sig
                          type t = [ `EventTarget  | `MessagePort ] intf
                          type t_0 = t
                          [@@@js.stop ]
                          type tags = [ `EventTarget  | `MessagePort ]
                          type tags_0 = tags
                          [@@@js.start ]
                          [@@@js.implem
                            type tags = [ `EventTarget  | `MessagePort ]
                            type tags_0 = tags]
                          type 'tags this =
                            'tags intf constraint 'tags = [> `MessagePort ]
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val t_0_to_js : t_0 -> Ojs.t
                          val t_0_of_js : Ojs.t -> t_0
                          val get_onmessage :
                            'tags this ->
                              (this:t -> ev:MessageEvent.t_0 -> any) option
                          val set_onmessage :
                            'tags this ->
                              (this:t -> ev:MessageEvent.t_0 -> any) option
                                -> unit
                          val get_onmessageerror :
                            'tags this ->
                              (this:t -> ev:MessageEvent.t_0 -> any) option
                          val set_onmessageerror :
                            'tags this ->
                              (this:t -> ev:MessageEvent.t_0 -> any) option
                                -> unit
                          val close : 'tags this -> unit
                          val postMessage :
                            'tags this ->
                              message:any ->
                                transfer:Transferable.t list -> unit
                          val postMessage' :
                            'tags this ->
                              message:any ->
                                ?options:StructuredSerializeOptions.t ->
                                  unit -> unit
                          val start : 'tags this -> unit
                          val addEventListener :
                            'tags this ->
                              type_:'K ->
                                listener:(this:t -> ev:any -> any) ->
                                  ?options:[ `U1 of bool 
                                           | `U2 of AddEventListenerOptions.t ]
                                    -> unit -> unit
                          val addEventListener' :
                            'tags this ->
                              type_:string ->
                                listener:EventListenerOrEventListenerObject.t
                                  ->
                                  ?options:[ `U1 of bool 
                                           | `U2 of AddEventListenerOptions.t ]
                                    -> unit -> unit
                          val removeEventListener :
                            'tags this ->
                              type_:'K ->
                                listener:(this:t -> ev:any -> any) ->
                                  ?options:[ `U1 of bool 
                                           | `U2 of EventListenerOptions.t ]
                                    -> unit -> unit
                          val removeEventListener' :
                            'tags this ->
                              type_:string ->
                                listener:EventListenerOrEventListenerObject.t
                                  ->
                                  ?options:[ `U1 of bool 
                                           | `U2 of EventListenerOptions.t ]
                                    -> unit -> unit
                          val cast_from : 'tags this -> t
                          val prototype : unit -> t
                          val create : unit -> t
                        end =
            struct
              type t = [ `EventTarget  | `MessagePort ] intf
              let rec t_of_js : Ojs.t -> t = Obj.magic
              and t_to_js : t -> Ojs.t = Obj.magic
              type t_0 = t
              let rec t_0_of_js : Ojs.t -> t_0 =
                fun (x5690 : Ojs.t) -> t_of_js x5690
              and t_0_to_js : t_0 -> Ojs.t = fun (x5689 : t) -> t_to_js x5689
              type tags = [ `EventTarget  | `MessagePort ]
              type tags_0 = tags
              type 'tags this =
                'tags intf constraint 'tags = [> `MessagePort ]
              let rec this_of_js :
                'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
                fun (type __tags) ->
                  fun (__tags_of_js : Ojs.t -> __tags) ->
                    fun (x5693 : Ojs.t) -> intf_of_js __tags_of_js x5693
              and this_to_js :
                'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
                fun (type __tags) ->
                  fun (__tags_to_js : __tags -> Ojs.t) ->
                    fun (x5691 : __tags intf) ->
                      intf_to_js __tags_to_js x5691
              let (get_onmessage :
                'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option)
                =
                fun (x5695 : 'tags this) ->
                  Ojs.option_of_js
                    (fun (x5697 : Ojs.t) ->
                       fun ~this:(x5698 : t) ->
                         fun ~ev:(x5699 : MessageEvent.t_0) ->
                           any_of_js
                             (Ojs.apply x5697
                                [|(t_to_js x5698);(MessageEvent.t_0_to_js
                                                     x5699)|]))
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x5695)
                       "onmessage")
              let (set_onmessage :
                'tags this ->
                  (this:t -> ev:MessageEvent.t_0 -> any) option -> unit)
                =
                fun (x5700 : 'tags this) ->
                  fun (x5701 : (this:t -> ev:MessageEvent.t_0 -> any) option)
                    ->
                    Ojs.set_prop_ascii (this_to_js Obj.magic x5700)
                      "onmessage"
                      (Ojs.option_to_js
                         (fun (x5702 : this:t -> ev:MessageEvent.t_0 -> any)
                            ->
                            Ojs.fun_to_js 2
                              (fun (x5703 : Ojs.t) ->
                                 fun (x5704 : Ojs.t) ->
                                   any_to_js
                                     (x5702 ~this:(t_of_js x5703)
                                        ~ev:(MessageEvent.t_0_of_js x5704))))
                         x5701)
              let (get_onmessageerror :
                'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option)
                =
                fun (x5706 : 'tags this) ->
                  Ojs.option_of_js
                    (fun (x5708 : Ojs.t) ->
                       fun ~this:(x5709 : t) ->
                         fun ~ev:(x5710 : MessageEvent.t_0) ->
                           any_of_js
                             (Ojs.apply x5708
                                [|(t_to_js x5709);(MessageEvent.t_0_to_js
                                                     x5710)|]))
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x5706)
                       "onmessageerror")
              let (set_onmessageerror :
                'tags this ->
                  (this:t -> ev:MessageEvent.t_0 -> any) option -> unit)
                =
                fun (x5711 : 'tags this) ->
                  fun (x5712 : (this:t -> ev:MessageEvent.t_0 -> any) option)
                    ->
                    Ojs.set_prop_ascii (this_to_js Obj.magic x5711)
                      "onmessageerror"
                      (Ojs.option_to_js
                         (fun (x5713 : this:t -> ev:MessageEvent.t_0 -> any)
                            ->
                            Ojs.fun_to_js 2
                              (fun (x5714 : Ojs.t) ->
                                 fun (x5715 : Ojs.t) ->
                                   any_to_js
                                     (x5713 ~this:(t_of_js x5714)
                                        ~ev:(MessageEvent.t_0_of_js x5715))))
                         x5712)
              let (close : 'tags this -> unit) =
                fun (x5717 : 'tags this) ->
                  ignore (Ojs.call (this_to_js Obj.magic x5717) "close" [||])
              let (postMessage :
                'tags this ->
                  message:any -> transfer:Transferable.t list -> unit)
                =
                fun (x5722 : 'tags this) ->
                  fun ~message:(x5719 : any) ->
                    fun ~transfer:(x5720 : Transferable.t list) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x5722) "postMessage"
                           [|(any_to_js x5719);(Ojs.list_to_js
                                                  Transferable.t_to_js x5720)|])
              let (postMessage' :
                'tags this ->
                  message:any ->
                    ?options:StructuredSerializeOptions.t -> unit -> unit)
                =
                fun (x5728 : 'tags this) ->
                  fun ~message:(x5724 : any) ->
                    fun
                      ?options:(x5725 : StructuredSerializeOptions.t option)
                      ->
                      fun () ->
                        ignore
                          (let x5730 = this_to_js Obj.magic x5728 in
                           Ojs.call (Ojs.get_prop_ascii x5730 "postMessage")
                             "apply"
                             [|x5730;((let x5726 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       ignore
                                         (Ojs.call x5726 "push"
                                            [|(any_to_js x5724)|]);
                                       (match x5725 with
                                        | Some x5727 ->
                                            ignore
                                              (Ojs.call x5726 "push"
                                                 [|(StructuredSerializeOptions.t_to_js
                                                      x5727)|])
                                        | None -> ());
                                       x5726))|])
              let (start : 'tags this -> unit) =
                fun (x5731 : 'tags this) ->
                  ignore (Ojs.call (this_to_js Obj.magic x5731) "start" [||])
              let (addEventListener :
                'tags this ->
                  type_:'K ->
                    listener:(this:t -> ev:any -> any) ->
                      ?options:[ `U1 of bool 
                               | `U2 of AddEventListenerOptions.t ]
                        -> unit -> unit)
                =
                fun (x5742 : 'tags this) ->
                  fun ~type_:(x5733 : 'K) ->
                    fun ~listener:(x5734 : this:t -> ev:any -> any) ->
                      fun
                        ?options:(x5735 :
                                   [ `U1 of bool 
                                   | `U2 of AddEventListenerOptions.t ]
                                     option)
                        ->
                        fun () ->
                          ignore
                            (let x5744 = this_to_js Obj.magic x5742 in
                             Ojs.call
                               (Ojs.get_prop_ascii x5744 "addEventListener")
                               "apply"
                               [|x5744;((let x5736 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x5736 "push"
                                              [|(Obj.magic x5733)|]);
                                         ignore
                                           (Ojs.call x5736 "push"
                                              [|(Ojs.fun_to_js 2
                                                   (fun (x5740 : Ojs.t) ->
                                                      fun (x5741 : Ojs.t) ->
                                                        any_to_js
                                                          (x5734
                                                             ~this:(t_of_js
                                                                    x5740)
                                                             ~ev:(any_of_js
                                                                    x5741))))|]);
                                         (match x5735 with
                                          | Some x5737 ->
                                              ignore
                                                (Ojs.call x5736 "push"
                                                   [|((match x5737 with
                                                       | `U1 x5738 ->
                                                           Ojs.bool_to_js
                                                             x5738
                                                       | `U2 x5739 ->
                                                           AddEventListenerOptions.t_to_js
                                                             x5739))|])
                                          | None -> ());
                                         x5736))|])
              let (addEventListener' :
                'tags this ->
                  type_:string ->
                    listener:EventListenerOrEventListenerObject.t ->
                      ?options:[ `U1 of bool 
                               | `U2 of AddEventListenerOptions.t ]
                        -> unit -> unit)
                =
                fun (x5752 : 'tags this) ->
                  fun ~type_:(x5745 : string) ->
                    fun
                      ~listener:(x5746 :
                                  EventListenerOrEventListenerObject.t)
                      ->
                      fun
                        ?options:(x5747 :
                                   [ `U1 of bool 
                                   | `U2 of AddEventListenerOptions.t ]
                                     option)
                        ->
                        fun () ->
                          ignore
                            (let x5754 = this_to_js Obj.magic x5752 in
                             Ojs.call
                               (Ojs.get_prop_ascii x5754 "addEventListener")
                               "apply"
                               [|x5754;((let x5748 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x5748 "push"
                                              [|(Ojs.string_to_js x5745)|]);
                                         ignore
                                           (Ojs.call x5748 "push"
                                              [|(EventListenerOrEventListenerObject.t_to_js
                                                   x5746)|]);
                                         (match x5747 with
                                          | Some x5749 ->
                                              ignore
                                                (Ojs.call x5748 "push"
                                                   [|((match x5749 with
                                                       | `U1 x5750 ->
                                                           Ojs.bool_to_js
                                                             x5750
                                                       | `U2 x5751 ->
                                                           AddEventListenerOptions.t_to_js
                                                             x5751))|])
                                          | None -> ());
                                         x5748))|])
              let (removeEventListener :
                'tags this ->
                  type_:'K ->
                    listener:(this:t -> ev:any -> any) ->
                      ?options:[ `U1 of bool 
                               | `U2 of EventListenerOptions.t ]
                        -> unit -> unit)
                =
                fun (x5764 : 'tags this) ->
                  fun ~type_:(x5755 : 'K) ->
                    fun ~listener:(x5756 : this:t -> ev:any -> any) ->
                      fun
                        ?options:(x5757 :
                                   [ `U1 of bool 
                                   | `U2 of EventListenerOptions.t ] option)
                        ->
                        fun () ->
                          ignore
                            (let x5766 = this_to_js Obj.magic x5764 in
                             Ojs.call
                               (Ojs.get_prop_ascii x5766
                                  "removeEventListener") "apply"
                               [|x5766;((let x5758 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x5758 "push"
                                              [|(Obj.magic x5755)|]);
                                         ignore
                                           (Ojs.call x5758 "push"
                                              [|(Ojs.fun_to_js 2
                                                   (fun (x5762 : Ojs.t) ->
                                                      fun (x5763 : Ojs.t) ->
                                                        any_to_js
                                                          (x5756
                                                             ~this:(t_of_js
                                                                    x5762)
                                                             ~ev:(any_of_js
                                                                    x5763))))|]);
                                         (match x5757 with
                                          | Some x5759 ->
                                              ignore
                                                (Ojs.call x5758 "push"
                                                   [|((match x5759 with
                                                       | `U1 x5760 ->
                                                           Ojs.bool_to_js
                                                             x5760
                                                       | `U2 x5761 ->
                                                           EventListenerOptions.t_to_js
                                                             x5761))|])
                                          | None -> ());
                                         x5758))|])
              let (removeEventListener' :
                'tags this ->
                  type_:string ->
                    listener:EventListenerOrEventListenerObject.t ->
                      ?options:[ `U1 of bool 
                               | `U2 of EventListenerOptions.t ]
                        -> unit -> unit)
                =
                fun (x5774 : 'tags this) ->
                  fun ~type_:(x5767 : string) ->
                    fun
                      ~listener:(x5768 :
                                  EventListenerOrEventListenerObject.t)
                      ->
                      fun
                        ?options:(x5769 :
                                   [ `U1 of bool 
                                   | `U2 of EventListenerOptions.t ] option)
                        ->
                        fun () ->
                          ignore
                            (let x5776 = this_to_js Obj.magic x5774 in
                             Ojs.call
                               (Ojs.get_prop_ascii x5776
                                  "removeEventListener") "apply"
                               [|x5776;((let x5770 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x5770 "push"
                                              [|(Ojs.string_to_js x5767)|]);
                                         ignore
                                           (Ojs.call x5770 "push"
                                              [|(EventListenerOrEventListenerObject.t_to_js
                                                   x5768)|]);
                                         (match x5769 with
                                          | Some x5771 ->
                                              ignore
                                                (Ojs.call x5770 "push"
                                                   [|((match x5771 with
                                                       | `U1 x5772 ->
                                                           Ojs.bool_to_js
                                                             x5772
                                                       | `U2 x5773 ->
                                                           EventListenerOptions.t_to_js
                                                             x5773))|])
                                          | None -> ());
                                         x5770))|])
              let cast_from = Obj.magic
              let (prototype : unit -> t) =
                fun () ->
                  t_of_js
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "MessagePort")
                       "prototype")
              let (create : unit -> t) =
                fun () ->
                  t_of_js
                    (Ojs.new_obj
                       (Ojs.get_prop_ascii Ojs.global "MessagePort") 
                       [||])
            end and
                 ServiceWorker:sig
                                 type t =
                                   [ `AbstractWorker  | `EventTarget 
                                   | `ServiceWorker ] intf
                                 type t_0 = t
                                 [@@@js.stop ]
                                 type tags =
                                   [ `AbstractWorker  | `EventTarget 
                                   | `ServiceWorker ]
                                 type tags_0 = tags
                                 [@@@js.start ]
                                 [@@@js.implem
                                   type tags =
                                     [ `AbstractWorker  | `EventTarget 
                                     | `ServiceWorker ]
                                   type tags_0 = tags]
                                 type 'tags this =
                                   'tags intf constraint 'tags =
                                               [> `ServiceWorker ]
                                 val t_to_js : t -> Ojs.t
                                 val t_of_js : Ojs.t -> t
                                 val t_0_to_js : t_0 -> Ojs.t
                                 val t_0_of_js : Ojs.t -> t_0
                                 val get_onstatechange :
                                   'tags this ->
                                     (this:t -> ev:Event.t -> any) option
                                 val set_onstatechange :
                                   'tags this ->
                                     (this:t -> ev:Event.t -> any) option ->
                                       unit
                                 val get_scriptURL : 'tags this -> string
                                 val get_state :
                                   'tags this -> ServiceWorkerState.t
                                 val postMessage :
                                   'tags this ->
                                     message:any ->
                                       transfer:Transferable.t list -> unit
                                 val postMessage' :
                                   'tags this ->
                                     message:any ->
                                       ?options:StructuredSerializeOptions.t
                                         -> unit -> unit
                                 val addEventListener :
                                   'tags this ->
                                     type_:'K ->
                                       listener:(this:t -> ev:any -> any) ->
                                         ?options:[ `U1 of bool 
                                                  | `U2 of
                                                      AddEventListenerOptions.t
                                                      ]
                                           -> unit -> unit
                                 val addEventListener' :
                                   'tags this ->
                                     type_:string ->
                                       listener:EventListenerOrEventListenerObject.t
                                         ->
                                         ?options:[ `U1 of bool 
                                                  | `U2 of
                                                      AddEventListenerOptions.t
                                                      ]
                                           -> unit -> unit
                                 val removeEventListener :
                                   'tags this ->
                                     type_:'K ->
                                       listener:(this:t -> ev:any -> any) ->
                                         ?options:[ `U1 of bool 
                                                  | `U2 of
                                                      EventListenerOptions.t ]
                                           -> unit -> unit
                                 val removeEventListener' :
                                   'tags this ->
                                     type_:string ->
                                       listener:EventListenerOrEventListenerObject.t
                                         ->
                                         ?options:[ `U1 of bool 
                                                  | `U2 of
                                                      EventListenerOptions.t ]
                                           -> unit -> unit
                                 val cast_from : 'tags this -> t
                                 val prototype : unit -> t
                                 val create : unit -> t
                               end =
                 struct
                   type t =
                     [ `AbstractWorker  | `EventTarget  | `ServiceWorker ]
                       intf
                   let rec t_of_js : Ojs.t -> t = Obj.magic
                   and t_to_js : t -> Ojs.t = Obj.magic
                   type t_0 = t
                   let rec t_0_of_js : Ojs.t -> t_0 =
                     fun (x5778 : Ojs.t) -> t_of_js x5778
                   and t_0_to_js : t_0 -> Ojs.t =
                     fun (x5777 : t) -> t_to_js x5777
                   type tags =
                     [ `AbstractWorker  | `EventTarget  | `ServiceWorker ]
                   type tags_0 = tags
                   type 'tags this =
                     'tags intf constraint 'tags = [> `ServiceWorker ]
                   let rec this_of_js :
                     'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
                     fun (type __tags) ->
                       fun (__tags_of_js : Ojs.t -> __tags) ->
                         fun (x5781 : Ojs.t) -> intf_of_js __tags_of_js x5781
                   and this_to_js :
                     'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
                     fun (type __tags) ->
                       fun (__tags_to_js : __tags -> Ojs.t) ->
                         fun (x5779 : __tags intf) ->
                           intf_to_js __tags_to_js x5779
                   let (get_onstatechange :
                     'tags this -> (this:t -> ev:Event.t -> any) option) =
                     fun (x5783 : 'tags this) ->
                       Ojs.option_of_js
                         (fun (x5785 : Ojs.t) ->
                            fun ~this:(x5786 : t) ->
                              fun ~ev:(x5787 : Event.t) ->
                                any_of_js
                                  (Ojs.apply x5785
                                     [|(t_to_js x5786);(Event.t_to_js x5787)|]))
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x5783)
                            "onstatechange")
                   let (set_onstatechange :
                     'tags this ->
                       (this:t -> ev:Event.t -> any) option -> unit)
                     =
                     fun (x5788 : 'tags this) ->
                       fun (x5789 : (this:t -> ev:Event.t -> any) option) ->
                         Ojs.set_prop_ascii (this_to_js Obj.magic x5788)
                           "onstatechange"
                           (Ojs.option_to_js
                              (fun (x5790 : this:t -> ev:Event.t -> any) ->
                                 Ojs.fun_to_js 2
                                   (fun (x5791 : Ojs.t) ->
                                      fun (x5792 : Ojs.t) ->
                                        any_to_js
                                          (x5790 ~this:(t_of_js x5791)
                                             ~ev:(Event.t_of_js x5792))))
                              x5789)
                   let (get_scriptURL : 'tags this -> string) =
                     fun (x5794 : 'tags this) ->
                       Ojs.string_of_js
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x5794)
                            "scriptURL")
                   let (get_state : 'tags this -> ServiceWorkerState.t) =
                     fun (x5796 : 'tags this) ->
                       ServiceWorkerState.t_of_js
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x5796)
                            "state")
                   let (postMessage :
                     'tags this ->
                       message:any -> transfer:Transferable.t list -> unit)
                     =
                     fun (x5801 : 'tags this) ->
                       fun ~message:(x5798 : any) ->
                         fun ~transfer:(x5799 : Transferable.t list) ->
                           ignore
                             (Ojs.call (this_to_js Obj.magic x5801)
                                "postMessage"
                                [|(any_to_js x5798);(Ojs.list_to_js
                                                       Transferable.t_to_js
                                                       x5799)|])
                   let (postMessage' :
                     'tags this ->
                       message:any ->
                         ?options:StructuredSerializeOptions.t ->
                           unit -> unit)
                     =
                     fun (x5807 : 'tags this) ->
                       fun ~message:(x5803 : any) ->
                         fun
                           ?options:(x5804 :
                                      StructuredSerializeOptions.t option)
                           ->
                           fun () ->
                             ignore
                               (let x5809 = this_to_js Obj.magic x5807 in
                                Ojs.call
                                  (Ojs.get_prop_ascii x5809 "postMessage")
                                  "apply"
                                  [|x5809;((let x5805 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            ignore
                                              (Ojs.call x5805 "push"
                                                 [|(any_to_js x5803)|]);
                                            (match x5804 with
                                             | Some x5806 ->
                                                 ignore
                                                   (Ojs.call x5805 "push"
                                                      [|(StructuredSerializeOptions.t_to_js
                                                           x5806)|])
                                             | None -> ());
                                            x5805))|])
                   let (addEventListener :
                     'tags this ->
                       type_:'K ->
                         listener:(this:t -> ev:any -> any) ->
                           ?options:[ `U1 of bool 
                                    | `U2 of AddEventListenerOptions.t ]
                             -> unit -> unit)
                     =
                     fun (x5819 : 'tags this) ->
                       fun ~type_:(x5810 : 'K) ->
                         fun ~listener:(x5811 : this:t -> ev:any -> any) ->
                           fun
                             ?options:(x5812 :
                                        [ `U1 of bool 
                                        | `U2 of AddEventListenerOptions.t ]
                                          option)
                             ->
                             fun () ->
                               ignore
                                 (let x5821 = this_to_js Obj.magic x5819 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x5821
                                       "addEventListener") "apply"
                                    [|x5821;((let x5813 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x5813 "push"
                                                   [|(Obj.magic x5810)|]);
                                              ignore
                                                (Ojs.call x5813 "push"
                                                   [|(Ojs.fun_to_js 2
                                                        (fun (x5817 : Ojs.t)
                                                           ->
                                                           fun
                                                             (x5818 : Ojs.t)
                                                             ->
                                                             any_to_js
                                                               (x5811
                                                                  ~this:(
                                                                  t_of_js
                                                                    x5817)
                                                                  ~ev:(
                                                                  any_of_js
                                                                    x5818))))|]);
                                              (match x5812 with
                                               | Some x5814 ->
                                                   ignore
                                                     (Ojs.call x5813 "push"
                                                        [|((match x5814 with
                                                            | `U1 x5815 ->
                                                                Ojs.bool_to_js
                                                                  x5815
                                                            | `U2 x5816 ->
                                                                AddEventListenerOptions.t_to_js
                                                                  x5816))|])
                                               | None -> ());
                                              x5813))|])
                   let (addEventListener' :
                     'tags this ->
                       type_:string ->
                         listener:EventListenerOrEventListenerObject.t ->
                           ?options:[ `U1 of bool 
                                    | `U2 of AddEventListenerOptions.t ]
                             -> unit -> unit)
                     =
                     fun (x5829 : 'tags this) ->
                       fun ~type_:(x5822 : string) ->
                         fun
                           ~listener:(x5823 :
                                       EventListenerOrEventListenerObject.t)
                           ->
                           fun
                             ?options:(x5824 :
                                        [ `U1 of bool 
                                        | `U2 of AddEventListenerOptions.t ]
                                          option)
                             ->
                             fun () ->
                               ignore
                                 (let x5831 = this_to_js Obj.magic x5829 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x5831
                                       "addEventListener") "apply"
                                    [|x5831;((let x5825 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x5825 "push"
                                                   [|(Ojs.string_to_js x5822)|]);
                                              ignore
                                                (Ojs.call x5825 "push"
                                                   [|(EventListenerOrEventListenerObject.t_to_js
                                                        x5823)|]);
                                              (match x5824 with
                                               | Some x5826 ->
                                                   ignore
                                                     (Ojs.call x5825 "push"
                                                        [|((match x5826 with
                                                            | `U1 x5827 ->
                                                                Ojs.bool_to_js
                                                                  x5827
                                                            | `U2 x5828 ->
                                                                AddEventListenerOptions.t_to_js
                                                                  x5828))|])
                                               | None -> ());
                                              x5825))|])
                   let (removeEventListener :
                     'tags this ->
                       type_:'K ->
                         listener:(this:t -> ev:any -> any) ->
                           ?options:[ `U1 of bool 
                                    | `U2 of EventListenerOptions.t ]
                             -> unit -> unit)
                     =
                     fun (x5841 : 'tags this) ->
                       fun ~type_:(x5832 : 'K) ->
                         fun ~listener:(x5833 : this:t -> ev:any -> any) ->
                           fun
                             ?options:(x5834 :
                                        [ `U1 of bool 
                                        | `U2 of EventListenerOptions.t ]
                                          option)
                             ->
                             fun () ->
                               ignore
                                 (let x5843 = this_to_js Obj.magic x5841 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x5843
                                       "removeEventListener") "apply"
                                    [|x5843;((let x5835 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x5835 "push"
                                                   [|(Obj.magic x5832)|]);
                                              ignore
                                                (Ojs.call x5835 "push"
                                                   [|(Ojs.fun_to_js 2
                                                        (fun (x5839 : Ojs.t)
                                                           ->
                                                           fun
                                                             (x5840 : Ojs.t)
                                                             ->
                                                             any_to_js
                                                               (x5833
                                                                  ~this:(
                                                                  t_of_js
                                                                    x5839)
                                                                  ~ev:(
                                                                  any_of_js
                                                                    x5840))))|]);
                                              (match x5834 with
                                               | Some x5836 ->
                                                   ignore
                                                     (Ojs.call x5835 "push"
                                                        [|((match x5836 with
                                                            | `U1 x5837 ->
                                                                Ojs.bool_to_js
                                                                  x5837
                                                            | `U2 x5838 ->
                                                                EventListenerOptions.t_to_js
                                                                  x5838))|])
                                               | None -> ());
                                              x5835))|])
                   let (removeEventListener' :
                     'tags this ->
                       type_:string ->
                         listener:EventListenerOrEventListenerObject.t ->
                           ?options:[ `U1 of bool 
                                    | `U2 of EventListenerOptions.t ]
                             -> unit -> unit)
                     =
                     fun (x5851 : 'tags this) ->
                       fun ~type_:(x5844 : string) ->
                         fun
                           ~listener:(x5845 :
                                       EventListenerOrEventListenerObject.t)
                           ->
                           fun
                             ?options:(x5846 :
                                        [ `U1 of bool 
                                        | `U2 of EventListenerOptions.t ]
                                          option)
                             ->
                             fun () ->
                               ignore
                                 (let x5853 = this_to_js Obj.magic x5851 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x5853
                                       "removeEventListener") "apply"
                                    [|x5853;((let x5847 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x5847 "push"
                                                   [|(Ojs.string_to_js x5844)|]);
                                              ignore
                                                (Ojs.call x5847 "push"
                                                   [|(EventListenerOrEventListenerObject.t_to_js
                                                        x5845)|]);
                                              (match x5846 with
                                               | Some x5848 ->
                                                   ignore
                                                     (Ojs.call x5847 "push"
                                                        [|((match x5848 with
                                                            | `U1 x5849 ->
                                                                Ojs.bool_to_js
                                                                  x5849
                                                            | `U2 x5850 ->
                                                                EventListenerOptions.t_to_js
                                                                  x5850))|])
                                               | None -> ());
                                              x5847))|])
                   let cast_from = Obj.magic
                   let (prototype : unit -> t) =
                     fun () ->
                       t_of_js
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global "ServiceWorker")
                            "prototype")
                   let (create : unit -> t) =
                     fun () ->
                       t_of_js
                         (Ojs.new_obj
                            (Ojs.get_prop_ascii Ojs.global "ServiceWorker")
                            [||])
                 end and
                      StructuredSerializeOptions:sig
                                                   type t =
                                                     [
                                                       `StructuredSerializeOptions
                                                         ]
                                                       intf
                                                   type t_0 = t
                                                   [@@@js.stop ]
                                                   type tags =
                                                     [
                                                       `StructuredSerializeOptions
                                                         ]
                                                   type tags_0 = tags
                                                   [@@@js.start ]
                                                   [@@@js.implem
                                                     type tags =
                                                       [
                                                         `StructuredSerializeOptions
                                                           ]
                                                     type tags_0 = tags]
                                                   type 'tags this =
                                                     'tags intf constraint
                                                                 'tags =
                                                                 [>
                                                                   `StructuredSerializeOptions
                                                                    ]
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                   val get_transfer :
                                                     'tags this ->
                                                       Transferable.t list
                                                         option
                                                   val set_transfer :
                                                     'tags this ->
                                                       Transferable.t list ->
                                                         unit
                                                   val create :
                                                     ?transfer:Transferable.t
                                                       list -> unit -> t
                                                   val cast_from :
                                                     'tags this -> t
                                                 end =
                      struct
                        type t = [ `StructuredSerializeOptions ] intf
                        let rec t_of_js : Ojs.t -> t = Obj.magic
                        and t_to_js : t -> Ojs.t = Obj.magic
                        type t_0 = t
                        let rec t_0_of_js : Ojs.t -> t_0 =
                          fun (x5855 : Ojs.t) -> t_of_js x5855
                        and t_0_to_js : t_0 -> Ojs.t =
                          fun (x5854 : t) -> t_to_js x5854
                        type tags = [ `StructuredSerializeOptions ]
                        type tags_0 = tags
                        type 'tags this =
                          'tags intf constraint 'tags =
                                      [> `StructuredSerializeOptions ]
                        let rec this_of_js :
                          'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
                          fun (type __tags) ->
                            fun (__tags_of_js : Ojs.t -> __tags) ->
                              fun (x5858 : Ojs.t) ->
                                intf_of_js __tags_of_js x5858
                        and this_to_js :
                          'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
                          fun (type __tags) ->
                            fun (__tags_to_js : __tags -> Ojs.t) ->
                              fun (x5856 : __tags intf) ->
                                intf_to_js __tags_to_js x5856
                        let (get_transfer :
                          'tags this -> Transferable.t list option) =
                          fun (x5860 : 'tags this) ->
                            Ojs.option_of_js
                              (fun (x5862 : Ojs.t) ->
                                 Ojs.list_of_js Transferable.t_of_js x5862)
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic x5860) "transfer")
                        let (set_transfer :
                          'tags this -> Transferable.t list -> unit) =
                          fun (x5864 : 'tags this) ->
                            fun (x5865 : Transferable.t list) ->
                              Ojs.set_prop_ascii (this_to_js Obj.magic x5864)
                                "transfer"
                                (Ojs.list_to_js Transferable.t_to_js x5865)
                        let (create :
                          ?transfer:Transferable.t list -> unit -> t) =
                          fun ?transfer:(x5868 : Transferable.t list option)
                            ->
                            fun () ->
                              let x5869 = Ojs.empty_obj () in
                              (match x5868 with
                               | Some x5870 ->
                                   Ojs.set_prop_ascii x5869 "transfer"
                                     (Ojs.list_to_js Transferable.t_to_js
                                        x5870)
                               | None -> ());
                              t_of_js x5869
                        let cast_from = Obj.magic
                      end and
                           Transferable:sig
                                          type t =
                                            (ArrayBuffer.t_0, ImageBitmap.t,
                                              MessagePort.t) union3
                                          type t_0 = t
                                          val t_to_js : t -> Ojs.t
                                          val t_of_js : Ojs.t -> t
                                          val t_0_to_js : t_0 -> Ojs.t
                                          val t_0_of_js : Ojs.t -> t_0
                                        end =
                           struct
                             type t =
                               (ArrayBuffer.t_0, ImageBitmap.t,
                                 MessagePort.t) union3
                             let rec t_of_js : Ojs.t -> t =
                               fun (x5876 : Ojs.t) ->
                                 union3_of_js ArrayBuffer.t_0_of_js
                                   ImageBitmap.t_of_js MessagePort.t_of_js
                                   x5876
                             and t_to_js : t -> Ojs.t =
                               fun
                                 (x5872 :
                                   (ArrayBuffer.t_0, ImageBitmap.t,
                                     MessagePort.t) union3)
                                 ->
                                 union3_to_js ArrayBuffer.t_0_to_js
                                   ImageBitmap.t_to_js MessagePort.t_to_js
                                   x5872
                             type t_0 = t
                             let rec t_0_of_js : Ojs.t -> t_0 =
                               fun (x5881 : Ojs.t) -> t_of_js x5881
                             and t_0_to_js : t_0 -> Ojs.t =
                               fun (x5880 : t) -> t_to_js x5880
                           end
module AbstractWorkerEventMap =
  struct
    type t = [ `AbstractWorkerEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5883 : Ojs.t) -> t_of_js x5883
    and t_0_to_js : t_0 -> Ojs.t = fun (x5882 : t) -> t_to_js x5882
    type tags = [ `AbstractWorkerEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `AbstractWorkerEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x5886 : Ojs.t) -> intf_of_js __tags_of_js x5886
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x5884 : __tags intf) -> intf_to_js __tags_to_js x5884
    let (get_error : 'tags this -> ErrorEvent.t) =
      fun (x5888 : 'tags this) ->
        ErrorEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5888) "error")
    let (set_error : 'tags this -> ErrorEvent.t -> unit) =
      fun (x5890 : 'tags this) ->
        fun (x5891 : ErrorEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5890) "error"
            (ErrorEvent.t_to_js x5891)
    let (create : error:ErrorEvent.t -> unit -> t) =
      fun ~error:(x5893 : ErrorEvent.t) ->
        fun () ->
          let x5894 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x5894 "error" (ErrorEvent.t_to_js x5893);
          t_of_js x5894
    let cast_from = Obj.magic
  end
module WorkerEventMap =
  struct
    type t = [ `AbstractWorkerEventMap  | `WorkerEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5896 : Ojs.t) -> t_of_js x5896
    and t_0_to_js : t_0 -> Ojs.t = fun (x5895 : t) -> t_to_js x5895
    type tags = [ `AbstractWorkerEventMap  | `WorkerEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x5899 : Ojs.t) -> intf_of_js __tags_of_js x5899
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x5897 : __tags intf) -> intf_to_js __tags_to_js x5897
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x5901 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5901) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x5903 : 'tags this) ->
        fun (x5904 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5903) "message"
            (MessageEvent.t_0_to_js x5904)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x5906 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5906) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x5908 : 'tags this) ->
        fun (x5909 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5908) "messageerror"
            (MessageEvent.t_0_to_js x5909)
    let (create :
      message:MessageEvent.t_0 -> messageerror:MessageEvent.t_0 -> unit -> t)
      =
      fun ~message:(x5911 : MessageEvent.t_0) ->
        fun ~messageerror:(x5912 : MessageEvent.t_0) ->
          fun () ->
            let x5913 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x5913 "message" (MessageEvent.t_0_to_js x5911);
            Ojs.set_prop_ascii x5913 "messageerror"
              (MessageEvent.t_0_to_js x5912);
            t_of_js x5913
    let cast_from = Obj.magic
  end
module WorkerType =
  struct
    type t = [ `L_s119_module  | `L_s49_classic ]
    let rec t_of_js : Ojs.t -> t =
      fun (x5915 : Ojs.t) ->
        let x5916 = x5915 in
        match Ojs.string_of_js x5916 with
        | "module" -> `L_s119_module
        | "classic" -> `L_s49_classic
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x5914 : [ `L_s119_module  | `L_s49_classic ]) ->
        match x5914 with
        | `L_s119_module -> Ojs.string_to_js "module"
        | `L_s49_classic -> Ojs.string_to_js "classic"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5918 : Ojs.t) -> t_of_js x5918
    and t_0_to_js : t_0 -> Ojs.t = fun (x5917 : t) -> t_to_js x5917
  end
module WorkerOptions =
  struct
    type t = [ `WorkerOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5920 : Ojs.t) -> t_of_js x5920
    and t_0_to_js : t_0 -> Ojs.t = fun (x5919 : t) -> t_to_js x5919
    type tags = [ `WorkerOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x5923 : Ojs.t) -> intf_of_js __tags_of_js x5923
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x5921 : __tags intf) -> intf_to_js __tags_to_js x5921
    let (get_credentials : 'tags this -> RequestCredentials.t option) =
      fun (x5925 : 'tags this) ->
        Ojs.option_of_js RequestCredentials.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5925) "credentials")
    let (set_credentials : 'tags this -> RequestCredentials.t -> unit) =
      fun (x5928 : 'tags this) ->
        fun (x5929 : RequestCredentials.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5928) "credentials"
            (RequestCredentials.t_to_js x5929)
    let (get_name : 'tags this -> string option) =
      fun (x5931 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5931) "name")
    let (set_name : 'tags this -> string -> unit) =
      fun (x5934 : 'tags this) ->
        fun (x5935 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5934) "name"
            (Ojs.string_to_js x5935)
    let (get_type : 'tags this -> WorkerType.t option) =
      fun (x5937 : 'tags this) ->
        Ojs.option_of_js WorkerType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5937) "type")
    let (set_type : 'tags this -> WorkerType.t -> unit) =
      fun (x5940 : 'tags this) ->
        fun (x5941 : WorkerType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5940) "type"
            (WorkerType.t_to_js x5941)
    let (create :
      ?credentials:RequestCredentials.t ->
        ?name:string -> ?type_:WorkerType.t -> unit -> t)
      =
      fun ?credentials:(x5943 : RequestCredentials.t option) ->
        fun ?name:(x5944 : string option) ->
          fun ?type_:(x5945 : WorkerType.t option) ->
            fun () ->
              let x5946 = Ojs.empty_obj () in
              (match x5943 with
               | Some x5949 ->
                   Ojs.set_prop_ascii x5946 "credentials"
                     (RequestCredentials.t_to_js x5949)
               | None -> ());
              (match x5944 with
               | Some x5948 ->
                   Ojs.set_prop_ascii x5946 "name" (Ojs.string_to_js x5948)
               | None -> ());
              (match x5945 with
               | Some x5947 ->
                   Ojs.set_prop_ascii x5946 "type" (WorkerType.t_to_js x5947)
               | None -> ());
              t_of_js x5946
    let cast_from = Obj.magic
  end
module Worker =
  struct
    type t = [ `AbstractWorker  | `EventTarget  | `Worker ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5951 : Ojs.t) -> t_of_js x5951
    and t_0_to_js : t_0 -> Ojs.t = fun (x5950 : t) -> t_to_js x5950
    type tags = [ `AbstractWorker  | `EventTarget  | `Worker ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Worker ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x5954 : Ojs.t) -> intf_of_js __tags_of_js x5954
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x5952 : __tags intf) -> intf_to_js __tags_to_js x5952
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x5956 : 'tags this) ->
        Ojs.option_of_js
          (fun (x5958 : Ojs.t) ->
             fun ~this:(x5959 : t) ->
               fun ~ev:(x5960 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x5958
                      [|(t_to_js x5959);(MessageEvent.t_0_to_js x5960)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5956) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x5961 : 'tags this) ->
        fun (x5962 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5961) "onmessage"
            (Ojs.option_to_js
               (fun (x5963 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x5964 : Ojs.t) ->
                       fun (x5965 : Ojs.t) ->
                         any_to_js
                           (x5963 ~this:(t_of_js x5964)
                              ~ev:(MessageEvent.t_0_of_js x5965)))) x5962)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x5967 : 'tags this) ->
        Ojs.option_of_js
          (fun (x5969 : Ojs.t) ->
             fun ~this:(x5970 : t) ->
               fun ~ev:(x5971 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x5969
                      [|(t_to_js x5970);(MessageEvent.t_0_to_js x5971)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5967) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x5972 : 'tags this) ->
        fun (x5973 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5972) "onmessageerror"
            (Ojs.option_to_js
               (fun (x5974 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x5975 : Ojs.t) ->
                       fun (x5976 : Ojs.t) ->
                         any_to_js
                           (x5974 ~this:(t_of_js x5975)
                              ~ev:(MessageEvent.t_0_of_js x5976)))) x5973)
    let (postMessage :
      'tags this -> message:any -> transfer:Transferable.t list -> unit) =
      fun (x5981 : 'tags this) ->
        fun ~message:(x5978 : any) ->
          fun ~transfer:(x5979 : Transferable.t list) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x5981) "postMessage"
                 [|(any_to_js x5978);(Ojs.list_to_js Transferable.t_to_js
                                        x5979)|])
    let (postMessage' :
      'tags this ->
        message:any -> ?options:StructuredSerializeOptions.t -> unit -> unit)
      =
      fun (x5987 : 'tags this) ->
        fun ~message:(x5983 : any) ->
          fun ?options:(x5984 : StructuredSerializeOptions.t option) ->
            fun () ->
              ignore
                (let x5989 = this_to_js Obj.magic x5987 in
                 Ojs.call (Ojs.get_prop_ascii x5989 "postMessage") "apply"
                   [|x5989;((let x5985 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5985 "push" [|(any_to_js x5983)|]);
                             (match x5984 with
                              | Some x5986 ->
                                  ignore
                                    (Ojs.call x5985 "push"
                                       [|(StructuredSerializeOptions.t_to_js
                                            x5986)|])
                              | None -> ());
                             x5985))|])
    let (terminate : 'tags this -> unit) =
      fun (x5990 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x5990) "terminate" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x6001 : 'tags this) ->
        fun ~type_:(x5992 : 'K) ->
          fun ~listener:(x5993 : this:t -> ev:any -> any) ->
            fun
              ?options:(x5994 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x6003 = this_to_js Obj.magic x6001 in
                   Ojs.call (Ojs.get_prop_ascii x6003 "addEventListener")
                     "apply"
                     [|x6003;((let x5995 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5995 "push" [|(Obj.magic x5992)|]);
                               ignore
                                 (Ojs.call x5995 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5999 : Ojs.t) ->
                                            fun (x6000 : Ojs.t) ->
                                              any_to_js
                                                (x5993 ~this:(t_of_js x5999)
                                                   ~ev:(any_of_js x6000))))|]);
                               (match x5994 with
                                | Some x5996 ->
                                    ignore
                                      (Ojs.call x5995 "push"
                                         [|((match x5996 with
                                             | `U1 x5997 ->
                                                 Ojs.bool_to_js x5997
                                             | `U2 x5998 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x5998))|])
                                | None -> ());
                               x5995))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x6011 : 'tags this) ->
        fun ~type_:(x6004 : string) ->
          fun ~listener:(x6005 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x6006 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x6013 = this_to_js Obj.magic x6011 in
                   Ojs.call (Ojs.get_prop_ascii x6013 "addEventListener")
                     "apply"
                     [|x6013;((let x6007 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6007 "push"
                                    [|(Ojs.string_to_js x6004)|]);
                               ignore
                                 (Ojs.call x6007 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x6005)|]);
                               (match x6006 with
                                | Some x6008 ->
                                    ignore
                                      (Ojs.call x6007 "push"
                                         [|((match x6008 with
                                             | `U1 x6009 ->
                                                 Ojs.bool_to_js x6009
                                             | `U2 x6010 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x6010))|])
                                | None -> ());
                               x6007))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x6023 : 'tags this) ->
        fun ~type_:(x6014 : 'K) ->
          fun ~listener:(x6015 : this:t -> ev:any -> any) ->
            fun
              ?options:(x6016 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x6025 = this_to_js Obj.magic x6023 in
                   Ojs.call (Ojs.get_prop_ascii x6025 "removeEventListener")
                     "apply"
                     [|x6025;((let x6017 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6017 "push" [|(Obj.magic x6014)|]);
                               ignore
                                 (Ojs.call x6017 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x6021 : Ojs.t) ->
                                            fun (x6022 : Ojs.t) ->
                                              any_to_js
                                                (x6015 ~this:(t_of_js x6021)
                                                   ~ev:(any_of_js x6022))))|]);
                               (match x6016 with
                                | Some x6018 ->
                                    ignore
                                      (Ojs.call x6017 "push"
                                         [|((match x6018 with
                                             | `U1 x6019 ->
                                                 Ojs.bool_to_js x6019
                                             | `U2 x6020 ->
                                                 EventListenerOptions.t_to_js
                                                   x6020))|])
                                | None -> ());
                               x6017))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x6033 : 'tags this) ->
        fun ~type_:(x6026 : string) ->
          fun ~listener:(x6027 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x6028 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x6035 = this_to_js Obj.magic x6033 in
                   Ojs.call (Ojs.get_prop_ascii x6035 "removeEventListener")
                     "apply"
                     [|x6035;((let x6029 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6029 "push"
                                    [|(Ojs.string_to_js x6026)|]);
                               ignore
                                 (Ojs.call x6029 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x6027)|]);
                               (match x6028 with
                                | Some x6030 ->
                                    ignore
                                      (Ojs.call x6029 "push"
                                         [|((match x6030 with
                                             | `U1 x6031 ->
                                                 Ojs.bool_to_js x6031
                                             | `U2 x6032 ->
                                                 EventListenerOptions.t_to_js
                                                   x6032))|])
                                | None -> ());
                               x6029))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Worker")
             "prototype")
    let (create :
      scriptURL:[ `U1 of string  | `U2 of URL.t ] ->
        ?options:WorkerOptions.t -> unit -> t)
      =
      fun ~scriptURL:(x6036 : [ `U1 of string  | `U2 of URL.t ]) ->
        fun ?options:(x6037 : WorkerOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Worker")
                 (let x6038 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x6038 "push"
                       [|((match x6036 with
                           | `U1 x6040 -> Ojs.string_to_js x6040
                           | `U2 x6041 -> URL.t_to_js x6041))|]);
                  (match x6037 with
                   | Some x6039 ->
                       ignore
                         (Ojs.call x6038 "push"
                            [|(WorkerOptions.t_to_js x6039)|])
                   | None -> ());
                  x6038))
  end
module CloseEventInit =
  struct
    type t = [ `CloseEventInit  | `EventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6043 : Ojs.t) -> t_of_js x6043
    and t_0_to_js : t_0 -> Ojs.t = fun (x6042 : t) -> t_to_js x6042
    type tags = [ `CloseEventInit  | `EventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CloseEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6046 : Ojs.t) -> intf_of_js __tags_of_js x6046
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6044 : __tags intf) -> intf_to_js __tags_to_js x6044
    let (get_code : 'tags this -> float option) =
      fun (x6048 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6048) "code")
    let (set_code : 'tags this -> float -> unit) =
      fun (x6051 : 'tags this) ->
        fun (x6052 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6051) "code"
            (Ojs.float_to_js x6052)
    let (get_reason : 'tags this -> string option) =
      fun (x6054 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6054) "reason")
    let (set_reason : 'tags this -> string -> unit) =
      fun (x6057 : 'tags this) ->
        fun (x6058 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6057) "reason"
            (Ojs.string_to_js x6058)
    let (get_wasClean : 'tags this -> bool option) =
      fun (x6060 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6060) "wasClean")
    let (set_wasClean : 'tags this -> bool -> unit) =
      fun (x6063 : 'tags this) ->
        fun (x6064 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6063) "wasClean"
            (Ojs.bool_to_js x6064)
    let (create :
      ?code:float -> ?reason:string -> ?wasClean:bool -> unit -> t) =
      fun ?code:(x6066 : float option) ->
        fun ?reason:(x6067 : string option) ->
          fun ?wasClean:(x6068 : bool option) ->
            fun () ->
              let x6069 = Ojs.empty_obj () in
              (match x6066 with
               | Some x6072 ->
                   Ojs.set_prop_ascii x6069 "code" (Ojs.float_to_js x6072)
               | None -> ());
              (match x6067 with
               | Some x6071 ->
                   Ojs.set_prop_ascii x6069 "reason" (Ojs.string_to_js x6071)
               | None -> ());
              (match x6068 with
               | Some x6070 ->
                   Ojs.set_prop_ascii x6069 "wasClean" (Ojs.bool_to_js x6070)
               | None -> ());
              t_of_js x6069
    let cast_from = Obj.magic
  end
module CloseEvent =
  struct
    type t = [ `CloseEvent  | `Event ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6074 : Ojs.t) -> t_of_js x6074
    and t_0_to_js : t_0 -> Ojs.t = fun (x6073 : t) -> t_to_js x6073
    type tags = [ `CloseEvent  | `Event ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CloseEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6077 : Ojs.t) -> intf_of_js __tags_of_js x6077
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6075 : __tags intf) -> intf_to_js __tags_to_js x6075
    let (get_code : 'tags this -> float) =
      fun (x6079 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6079) "code")
    let (get_reason : 'tags this -> string) =
      fun (x6081 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6081) "reason")
    let (get_wasClean : 'tags this -> bool) =
      fun (x6083 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6083) "wasClean")
    let (create : code:float -> reason:string -> wasClean:bool -> unit -> t)
      =
      fun ~code:(x6085 : float) ->
        fun ~reason:(x6086 : string) ->
          fun ~wasClean:(x6087 : bool) ->
            fun () ->
              let x6088 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x6088 "code" (Ojs.float_to_js x6085);
              Ojs.set_prop_ascii x6088 "reason" (Ojs.string_to_js x6086);
              Ojs.set_prop_ascii x6088 "wasClean" (Ojs.bool_to_js x6087);
              t_of_js x6088
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CloseEvent")
             "prototype")
    let (create' :
      type_:string -> ?eventInitDict:CloseEventInit.t -> unit -> t) =
      fun ~type_:(x6089 : string) ->
        fun ?eventInitDict:(x6090 : CloseEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "CloseEvent")
                 (let x6091 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x6091 "push" [|(Ojs.string_to_js x6089)|]);
                  (match x6090 with
                   | Some x6092 ->
                       ignore
                         (Ojs.call x6091 "push"
                            [|(CloseEventInit.t_to_js x6092)|])
                   | None -> ());
                  x6091))
  end
module WebSocketEventMap =
  struct
    type t = [ `WebSocketEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6094 : Ojs.t) -> t_of_js x6094
    and t_0_to_js : t_0 -> Ojs.t = fun (x6093 : t) -> t_to_js x6093
    type tags = [ `WebSocketEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebSocketEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6097 : Ojs.t) -> intf_of_js __tags_of_js x6097
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6095 : __tags intf) -> intf_to_js __tags_to_js x6095
    let (get_close : 'tags this -> CloseEvent.t) =
      fun (x6099 : 'tags this) ->
        CloseEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6099) "close")
    let (set_close : 'tags this -> CloseEvent.t -> unit) =
      fun (x6101 : 'tags this) ->
        fun (x6102 : CloseEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6101) "close"
            (CloseEvent.t_to_js x6102)
    let (get_error : 'tags this -> Event.t) =
      fun (x6104 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6104) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x6106 : 'tags this) ->
        fun (x6107 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6106) "error"
            (Event.t_to_js x6107)
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x6109 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6109) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x6111 : 'tags this) ->
        fun (x6112 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6111) "message"
            (MessageEvent.t_0_to_js x6112)
    let (get_open : 'tags this -> Event.t) =
      fun (x6114 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6114) "open")
    let (set_open : 'tags this -> Event.t -> unit) =
      fun (x6116 : 'tags this) ->
        fun (x6117 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6116) "open"
            (Event.t_to_js x6117)
    let (create :
      close:CloseEvent.t ->
        error:Event.t ->
          message:MessageEvent.t_0 -> open_:Event.t -> unit -> t)
      =
      fun ~close:(x6119 : CloseEvent.t) ->
        fun ~error:(x6120 : Event.t) ->
          fun ~message:(x6121 : MessageEvent.t_0) ->
            fun ~open_:(x6122 : Event.t) ->
              fun () ->
                let x6123 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x6123 "close" (CloseEvent.t_to_js x6119);
                Ojs.set_prop_ascii x6123 "error" (Event.t_to_js x6120);
                Ojs.set_prop_ascii x6123 "message"
                  (MessageEvent.t_0_to_js x6121);
                Ojs.set_prop_ascii x6123 "open" (Event.t_to_js x6122);
                t_of_js x6123
    let cast_from = Obj.magic
  end
module BinaryType =
  struct
    type t = [ `L_s37_arraybuffer  | `L_s44_blob ]
    let rec t_of_js : Ojs.t -> t =
      fun (x6125 : Ojs.t) ->
        let x6126 = x6125 in
        match Ojs.string_of_js x6126 with
        | "arraybuffer" -> `L_s37_arraybuffer
        | "blob" -> `L_s44_blob
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x6124 : [ `L_s37_arraybuffer  | `L_s44_blob ]) ->
        match x6124 with
        | `L_s37_arraybuffer -> Ojs.string_to_js "arraybuffer"
        | `L_s44_blob -> Ojs.string_to_js "blob"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6128 : Ojs.t) -> t_of_js x6128
    and t_0_to_js : t_0 -> Ojs.t = fun (x6127 : t) -> t_to_js x6127
  end
module WebSocket =
  struct
    type t = [ `EventTarget  | `WebSocket ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6130 : Ojs.t) -> t_of_js x6130
    and t_0_to_js : t_0 -> Ojs.t = fun (x6129 : t) -> t_to_js x6129
    type tags = [ `EventTarget  | `WebSocket ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebSocket ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6133 : Ojs.t) -> intf_of_js __tags_of_js x6133
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6131 : __tags intf) -> intf_to_js __tags_to_js x6131
    let (get_binaryType : 'tags this -> BinaryType.t) =
      fun (x6135 : 'tags this) ->
        BinaryType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6135) "binaryType")
    let (set_binaryType : 'tags this -> BinaryType.t -> unit) =
      fun (x6137 : 'tags this) ->
        fun (x6138 : BinaryType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6137) "binaryType"
            (BinaryType.t_to_js x6138)
    let (get_bufferedAmount : 'tags this -> float) =
      fun (x6140 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6140) "bufferedAmount")
    let (get_extensions : 'tags this -> string) =
      fun (x6142 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6142) "extensions")
    let (get_onclose :
      'tags this -> (this:t -> ev:CloseEvent.t -> any) option) =
      fun (x6144 : 'tags this) ->
        Ojs.option_of_js
          (fun (x6146 : Ojs.t) ->
             fun ~this:(x6147 : t) ->
               fun ~ev:(x6148 : CloseEvent.t) ->
                 any_of_js
                   (Ojs.apply x6146
                      [|(t_to_js x6147);(CloseEvent.t_to_js x6148)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6144) "onclose")
    let (set_onclose :
      'tags this -> (this:t -> ev:CloseEvent.t -> any) option -> unit) =
      fun (x6149 : 'tags this) ->
        fun (x6150 : (this:t -> ev:CloseEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6149) "onclose"
            (Ojs.option_to_js
               (fun (x6151 : this:t -> ev:CloseEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x6152 : Ojs.t) ->
                       fun (x6153 : Ojs.t) ->
                         any_to_js
                           (x6151 ~this:(t_of_js x6152)
                              ~ev:(CloseEvent.t_of_js x6153)))) x6150)
    let (get_onerror : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x6155 : 'tags this) ->
        Ojs.option_of_js
          (fun (x6157 : Ojs.t) ->
             fun ~this:(x6158 : t) ->
               fun ~ev:(x6159 : Event.t) ->
                 any_of_js
                   (Ojs.apply x6157 [|(t_to_js x6158);(Event.t_to_js x6159)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6155) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x6160 : 'tags this) ->
        fun (x6161 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6160) "onerror"
            (Ojs.option_to_js
               (fun (x6162 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x6163 : Ojs.t) ->
                       fun (x6164 : Ojs.t) ->
                         any_to_js
                           (x6162 ~this:(t_of_js x6163)
                              ~ev:(Event.t_of_js x6164)))) x6161)
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x6166 : 'tags this) ->
        Ojs.option_of_js
          (fun (x6168 : Ojs.t) ->
             fun ~this:(x6169 : t) ->
               fun ~ev:(x6170 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x6168
                      [|(t_to_js x6169);(MessageEvent.t_0_to_js x6170)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6166) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x6171 : 'tags this) ->
        fun (x6172 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6171) "onmessage"
            (Ojs.option_to_js
               (fun (x6173 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x6174 : Ojs.t) ->
                       fun (x6175 : Ojs.t) ->
                         any_to_js
                           (x6173 ~this:(t_of_js x6174)
                              ~ev:(MessageEvent.t_0_of_js x6175)))) x6172)
    let (get_onopen : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x6177 : 'tags this) ->
        Ojs.option_of_js
          (fun (x6179 : Ojs.t) ->
             fun ~this:(x6180 : t) ->
               fun ~ev:(x6181 : Event.t) ->
                 any_of_js
                   (Ojs.apply x6179 [|(t_to_js x6180);(Event.t_to_js x6181)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6177) "onopen")
    let (set_onopen :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x6182 : 'tags this) ->
        fun (x6183 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6182) "onopen"
            (Ojs.option_to_js
               (fun (x6184 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x6185 : Ojs.t) ->
                       fun (x6186 : Ojs.t) ->
                         any_to_js
                           (x6184 ~this:(t_of_js x6185)
                              ~ev:(Event.t_of_js x6186)))) x6183)
    let (get_protocol : 'tags this -> string) =
      fun (x6188 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6188) "protocol")
    let (get_readyState : 'tags this -> float) =
      fun (x6190 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6190) "readyState")
    let (get_url : 'tags this -> string) =
      fun (x6192 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6192) "url")
    let (close : 'tags this -> ?code:float -> ?reason:string -> unit -> unit)
      =
      fun (x6199 : 'tags this) ->
        fun ?code:(x6194 : float option) ->
          fun ?reason:(x6195 : string option) ->
            fun () ->
              ignore
                (let x6201 = this_to_js Obj.magic x6199 in
                 Ojs.call (Ojs.get_prop_ascii x6201 "close") "apply"
                   [|x6201;((let x6196 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x6194 with
                              | Some x6198 ->
                                  ignore
                                    (Ojs.call x6196 "push"
                                       [|(Ojs.float_to_js x6198)|])
                              | None -> ());
                             (match x6195 with
                              | Some x6197 ->
                                  ignore
                                    (Ojs.call x6196 "push"
                                       [|(Ojs.string_to_js x6197)|])
                              | None -> ());
                             x6196))|])
    let (send :
      'tags this ->
        data:[ `U1 of string  | `U2 of ArrayBufferLike.t_0  | `U3 of Blob.t 
             | `U4 of ArrayBufferView.t_0 ]
          -> unit)
      =
      fun (x6207 : 'tags this) ->
        fun
          ~data:(x6202 :
                  [ `U1 of string  | `U2 of ArrayBufferLike.t_0 
                  | `U3 of Blob.t  | `U4 of ArrayBufferView.t_0 ])
          ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6207) "send"
               [|((match x6202 with
                   | `U1 x6203 -> Ojs.string_to_js x6203
                   | `U2 x6204 -> ArrayBufferLike.t_0_to_js x6204
                   | `U3 x6205 -> Blob.t_to_js x6205
                   | `U4 x6206 -> ArrayBufferView.t_0_to_js x6206))|])
    let (get_CLOSED : 'tags this -> float) =
      fun (x6209 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6209) "CLOSED")
    let (get_CLOSING : 'tags this -> float) =
      fun (x6211 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6211) "CLOSING")
    let (get_CONNECTING : 'tags this -> float) =
      fun (x6213 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6213) "CONNECTING")
    let (get_OPEN : 'tags this -> float) =
      fun (x6215 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6215) "OPEN")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x6226 : 'tags this) ->
        fun ~type_:(x6217 : 'K) ->
          fun ~listener:(x6218 : this:t -> ev:any -> any) ->
            fun
              ?options:(x6219 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x6228 = this_to_js Obj.magic x6226 in
                   Ojs.call (Ojs.get_prop_ascii x6228 "addEventListener")
                     "apply"
                     [|x6228;((let x6220 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6220 "push" [|(Obj.magic x6217)|]);
                               ignore
                                 (Ojs.call x6220 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x6224 : Ojs.t) ->
                                            fun (x6225 : Ojs.t) ->
                                              any_to_js
                                                (x6218 ~this:(t_of_js x6224)
                                                   ~ev:(any_of_js x6225))))|]);
                               (match x6219 with
                                | Some x6221 ->
                                    ignore
                                      (Ojs.call x6220 "push"
                                         [|((match x6221 with
                                             | `U1 x6222 ->
                                                 Ojs.bool_to_js x6222
                                             | `U2 x6223 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x6223))|])
                                | None -> ());
                               x6220))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x6236 : 'tags this) ->
        fun ~type_:(x6229 : string) ->
          fun ~listener:(x6230 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x6231 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x6238 = this_to_js Obj.magic x6236 in
                   Ojs.call (Ojs.get_prop_ascii x6238 "addEventListener")
                     "apply"
                     [|x6238;((let x6232 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6232 "push"
                                    [|(Ojs.string_to_js x6229)|]);
                               ignore
                                 (Ojs.call x6232 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x6230)|]);
                               (match x6231 with
                                | Some x6233 ->
                                    ignore
                                      (Ojs.call x6232 "push"
                                         [|((match x6233 with
                                             | `U1 x6234 ->
                                                 Ojs.bool_to_js x6234
                                             | `U2 x6235 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x6235))|])
                                | None -> ());
                               x6232))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x6248 : 'tags this) ->
        fun ~type_:(x6239 : 'K) ->
          fun ~listener:(x6240 : this:t -> ev:any -> any) ->
            fun
              ?options:(x6241 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x6250 = this_to_js Obj.magic x6248 in
                   Ojs.call (Ojs.get_prop_ascii x6250 "removeEventListener")
                     "apply"
                     [|x6250;((let x6242 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6242 "push" [|(Obj.magic x6239)|]);
                               ignore
                                 (Ojs.call x6242 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x6246 : Ojs.t) ->
                                            fun (x6247 : Ojs.t) ->
                                              any_to_js
                                                (x6240 ~this:(t_of_js x6246)
                                                   ~ev:(any_of_js x6247))))|]);
                               (match x6241 with
                                | Some x6243 ->
                                    ignore
                                      (Ojs.call x6242 "push"
                                         [|((match x6243 with
                                             | `U1 x6244 ->
                                                 Ojs.bool_to_js x6244
                                             | `U2 x6245 ->
                                                 EventListenerOptions.t_to_js
                                                   x6245))|])
                                | None -> ());
                               x6242))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x6258 : 'tags this) ->
        fun ~type_:(x6251 : string) ->
          fun ~listener:(x6252 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x6253 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x6260 = this_to_js Obj.magic x6258 in
                   Ojs.call (Ojs.get_prop_ascii x6260 "removeEventListener")
                     "apply"
                     [|x6260;((let x6254 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6254 "push"
                                    [|(Ojs.string_to_js x6251)|]);
                               ignore
                                 (Ojs.call x6254 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x6252)|]);
                               (match x6253 with
                                | Some x6255 ->
                                    ignore
                                      (Ojs.call x6254 "push"
                                         [|((match x6255 with
                                             | `U1 x6256 ->
                                                 Ojs.bool_to_js x6256
                                             | `U2 x6257 ->
                                                 EventListenerOptions.t_to_js
                                                   x6257))|])
                                | None -> ());
                               x6254))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "prototype")
    let (create :
      url:[ `U1 of string  | `U2 of URL.t ] ->
        ?protocols:[ `U1 of string  | `U2 of string list ] -> unit -> t)
      =
      fun ~url:(x6261 : [ `U1 of string  | `U2 of URL.t ]) ->
        fun
          ?protocols:(x6262 : [ `U1 of string  | `U2 of string list ] option)
          ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "WebSocket")
                 (let x6263 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x6263 "push"
                       [|((match x6261 with
                           | `U1 x6268 -> Ojs.string_to_js x6268
                           | `U2 x6269 -> URL.t_to_js x6269))|]);
                  (match x6262 with
                   | Some x6264 ->
                       ignore
                         (Ojs.call x6263 "push"
                            [|((match x6264 with
                                | `U1 x6265 -> Ojs.string_to_js x6265
                                | `U2 x6266 ->
                                    Ojs.list_to_js Ojs.string_to_js x6266))|])
                   | None -> ());
                  x6263))
    let (closed : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "CLOSED")
    let (closing : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "CLOSING")
    let (connecting : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "CONNECTING")
    let (open_ : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "OPEN")
  end
module WebGLUniformLocation =
  struct
    type t = [ `WebGLUniformLocation ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6271 : Ojs.t) -> t_of_js x6271
    and t_0_to_js : t_0 -> Ojs.t = fun (x6270 : t) -> t_to_js x6270
    type tags = [ `WebGLUniformLocation ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLUniformLocation ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6274 : Ojs.t) -> intf_of_js __tags_of_js x6274
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6272 : __tags intf) -> intf_to_js __tags_to_js x6272
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLUniformLocation")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLUniformLocation")
             [||])
  end
module PredefinedColorSpace =
  struct
    type t = [ `L_s187_srgb  | `L_s62_display_p3 ]
    let rec t_of_js : Ojs.t -> t =
      fun (x6277 : Ojs.t) ->
        let x6278 = x6277 in
        match Ojs.string_of_js x6278 with
        | "srgb" -> `L_s187_srgb
        | "display-p3" -> `L_s62_display_p3
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x6276 : [ `L_s187_srgb  | `L_s62_display_p3 ]) ->
        match x6276 with
        | `L_s187_srgb -> Ojs.string_to_js "srgb"
        | `L_s62_display_p3 -> Ojs.string_to_js "display-p3"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6280 : Ojs.t) -> t_of_js x6280
    and t_0_to_js : t_0 -> Ojs.t = fun (x6279 : t) -> t_to_js x6279
  end
module ImageDataSettings =
  struct
    type t = [ `ImageDataSettings ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6282 : Ojs.t) -> t_of_js x6282
    and t_0_to_js : t_0 -> Ojs.t = fun (x6281 : t) -> t_to_js x6281
    type tags = [ `ImageDataSettings ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImageDataSettings ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6285 : Ojs.t) -> intf_of_js __tags_of_js x6285
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6283 : __tags intf) -> intf_to_js __tags_to_js x6283
    let (get_colorSpace : 'tags this -> PredefinedColorSpace.t option) =
      fun (x6287 : 'tags this) ->
        Ojs.option_of_js PredefinedColorSpace.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6287) "colorSpace")
    let (set_colorSpace : 'tags this -> PredefinedColorSpace.t -> unit) =
      fun (x6290 : 'tags this) ->
        fun (x6291 : PredefinedColorSpace.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6290) "colorSpace"
            (PredefinedColorSpace.t_to_js x6291)
    let (create : ?colorSpace:PredefinedColorSpace.t -> unit -> t) =
      fun ?colorSpace:(x6293 : PredefinedColorSpace.t option) ->
        fun () ->
          let x6294 = Ojs.empty_obj () in
          (match x6293 with
           | Some x6295 ->
               Ojs.set_prop_ascii x6294 "colorSpace"
                 (PredefinedColorSpace.t_to_js x6295)
           | None -> ());
          t_of_js x6294
    let cast_from = Obj.magic
  end
module ImageData =
  struct
    type t = [ `ImageData ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6297 : Ojs.t) -> t_of_js x6297
    and t_0_to_js : t_0 -> Ojs.t = fun (x6296 : t) -> t_to_js x6296
    type tags = [ `ImageData ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImageData ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6300 : Ojs.t) -> intf_of_js __tags_of_js x6300
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6298 : __tags intf) -> intf_to_js __tags_to_js x6298
    let (get_data : 'tags this -> Uint8ClampedArray.t_0) =
      fun (x6302 : 'tags this) ->
        Uint8ClampedArray.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6302) "data")
    let (get_height : 'tags this -> float) =
      fun (x6304 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6304) "height")
    let (get_width : 'tags this -> float) =
      fun (x6306 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6306) "width")
    let (create :
      data:Uint8ClampedArray.t_0 -> height:float -> width:float -> unit -> t)
      =
      fun ~data:(x6308 : Uint8ClampedArray.t_0) ->
        fun ~height:(x6309 : float) ->
          fun ~width:(x6310 : float) ->
            fun () ->
              let x6311 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x6311 "data"
                (Uint8ClampedArray.t_0_to_js x6308);
              Ojs.set_prop_ascii x6311 "height" (Ojs.float_to_js x6309);
              Ojs.set_prop_ascii x6311 "width" (Ojs.float_to_js x6310);
              t_of_js x6311
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ImageData")
             "prototype")
    let (create' :
      sw:float -> sh:float -> ?settings:ImageDataSettings.t -> unit -> t) =
      fun ~sw:(x6312 : float) ->
        fun ~sh:(x6313 : float) ->
          fun ?settings:(x6314 : ImageDataSettings.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "ImageData")
                   (let x6315 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x6315 "push" [|(Ojs.float_to_js x6312)|]);
                    ignore
                      (Ojs.call x6315 "push" [|(Ojs.float_to_js x6313)|]);
                    (match x6314 with
                     | Some x6316 ->
                         ignore
                           (Ojs.call x6315 "push"
                              [|(ImageDataSettings.t_to_js x6316)|])
                     | None -> ());
                    x6315))
    let (create'' :
      data:Uint8ClampedArray.t_0 ->
        sw:float -> ?sh:float -> ?settings:ImageDataSettings.t -> unit -> t)
      =
      fun ~data:(x6317 : Uint8ClampedArray.t_0) ->
        fun ~sw:(x6318 : float) ->
          fun ?sh:(x6319 : float option) ->
            fun ?settings:(x6320 : ImageDataSettings.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Ojs.global "ImageData")
                     (let x6321 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x6321 "push"
                           [|(Uint8ClampedArray.t_0_to_js x6317)|]);
                      ignore
                        (Ojs.call x6321 "push" [|(Ojs.float_to_js x6318)|]);
                      (match x6319 with
                       | Some x6323 ->
                           ignore
                             (Ojs.call x6321 "push"
                                [|(Ojs.float_to_js x6323)|])
                       | None -> ());
                      (match x6320 with
                       | Some x6322 ->
                           ignore
                             (Ojs.call x6321 "push"
                                [|(ImageDataSettings.t_to_js x6322)|])
                       | None -> ());
                      x6321))
  end
module OffscreenCanvas =
  struct
    type t = [ `EventTarget  | `OffscreenCanvas ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6325 : Ojs.t) -> t_of_js x6325
    and t_0_to_js : t_0 -> Ojs.t = fun (x6324 : t) -> t_to_js x6324
    type tags = [ `EventTarget  | `OffscreenCanvas ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `OffscreenCanvas ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6328 : Ojs.t) -> intf_of_js __tags_of_js x6328
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6326 : __tags intf) -> intf_to_js __tags_to_js x6326
    let cast_from = Obj.magic
  end
module TexImageSource =
  struct
    type t = (ImageBitmap.t, ImageData.t, OffscreenCanvas.t) union3
    let rec t_of_js : Ojs.t -> t =
      fun (x6334 : Ojs.t) ->
        union3_of_js ImageBitmap.t_of_js ImageData.t_of_js
          OffscreenCanvas.t_of_js x6334
    and t_to_js : t -> Ojs.t =
      fun (x6330 : (ImageBitmap.t, ImageData.t, OffscreenCanvas.t) union3) ->
        union3_to_js ImageBitmap.t_to_js ImageData.t_to_js
          OffscreenCanvas.t_to_js x6330
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6339 : Ojs.t) -> t_of_js x6339
    and t_0_to_js : t_0 -> Ojs.t = fun (x6338 : t) -> t_to_js x6338
  end
module GLint =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x6341 : Ojs.t) -> Ojs.float_of_js x6341
    and t_to_js : t -> Ojs.t = fun (x6340 : float) -> Ojs.float_to_js x6340
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6343 : Ojs.t) -> t_of_js x6343
    and t_0_to_js : t_0 -> Ojs.t = fun (x6342 : t) -> t_to_js x6342
  end
module Int32List =
  struct
    type t = (GLint.t list, Int32Array.t_0) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x6348 : Ojs.t) ->
        union2_of_js
          (fun (x6349 : Ojs.t) -> Ojs.list_of_js GLint.t_of_js x6349)
          Int32Array.t_0_of_js x6348
    and t_to_js : t -> Ojs.t =
      fun (x6344 : (GLint.t list, Int32Array.t_0) union2) ->
        union2_to_js
          (fun (x6345 : GLint.t list) -> Ojs.list_to_js GLint.t_to_js x6345)
          Int32Array.t_0_to_js x6344
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6353 : Ojs.t) -> t_of_js x6353
    and t_0_to_js : t_0 -> Ojs.t = fun (x6352 : t) -> t_to_js x6352
  end
module GLsizeiptr =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x6355 : Ojs.t) -> Ojs.float_of_js x6355
    and t_to_js : t -> Ojs.t = fun (x6354 : float) -> Ojs.float_to_js x6354
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6357 : Ojs.t) -> t_of_js x6357
    and t_0_to_js : t_0 -> Ojs.t = fun (x6356 : t) -> t_to_js x6356
  end
module GLboolean =
  struct
    type t = bool
    let rec t_of_js : Ojs.t -> t =
      fun (x6359 : Ojs.t) -> Ojs.bool_of_js x6359
    and t_to_js : t -> Ojs.t = fun (x6358 : bool) -> Ojs.bool_to_js x6358
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6361 : Ojs.t) -> t_of_js x6361
    and t_0_to_js : t_0 -> Ojs.t = fun (x6360 : t) -> t_to_js x6360
  end
module GLfloat =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x6363 : Ojs.t) -> Ojs.float_of_js x6363
    and t_to_js : t -> Ojs.t = fun (x6362 : float) -> Ojs.float_to_js x6362
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6365 : Ojs.t) -> t_of_js x6365
    and t_0_to_js : t_0 -> Ojs.t = fun (x6364 : t) -> t_to_js x6364
  end
module Float32List =
  struct
    type t = (GLfloat.t list, Float32Array.t_0) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x6370 : Ojs.t) ->
        union2_of_js
          (fun (x6371 : Ojs.t) -> Ojs.list_of_js GLfloat.t_of_js x6371)
          Float32Array.t_0_of_js x6370
    and t_to_js : t -> Ojs.t =
      fun (x6366 : (GLfloat.t list, Float32Array.t_0) union2) ->
        union2_to_js
          (fun (x6367 : GLfloat.t list) ->
             Ojs.list_to_js GLfloat.t_to_js x6367) Float32Array.t_0_to_js
          x6366
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6375 : Ojs.t) -> t_of_js x6375
    and t_0_to_js : t_0 -> Ojs.t = fun (x6374 : t) -> t_to_js x6374
  end
module GLsizei =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x6377 : Ojs.t) -> Ojs.float_of_js x6377
    and t_to_js : t -> Ojs.t = fun (x6376 : float) -> Ojs.float_to_js x6376
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6379 : Ojs.t) -> t_of_js x6379
    and t_0_to_js : t_0 -> Ojs.t = fun (x6378 : t) -> t_to_js x6378
  end
module GLintptr =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x6381 : Ojs.t) -> Ojs.float_of_js x6381
    and t_to_js : t -> Ojs.t = fun (x6380 : float) -> Ojs.float_to_js x6380
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6383 : Ojs.t) -> t_of_js x6383
    and t_0_to_js : t_0 -> Ojs.t = fun (x6382 : t) -> t_to_js x6382
  end
module GLenum =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x6385 : Ojs.t) -> Ojs.float_of_js x6385
    and t_to_js : t -> Ojs.t = fun (x6384 : float) -> Ojs.float_to_js x6384
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6387 : Ojs.t) -> t_of_js x6387
    and t_0_to_js : t_0 -> Ojs.t = fun (x6386 : t) -> t_to_js x6386
  end
module WebGLRenderingContextOverloads =
  struct
    type t = [ `WebGLRenderingContextOverloads ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6389 : Ojs.t) -> t_of_js x6389
    and t_0_to_js : t_0 -> Ojs.t = fun (x6388 : t) -> t_to_js x6388
    type tags = [ `WebGLRenderingContextOverloads ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLRenderingContextOverloads ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6392 : Ojs.t) -> intf_of_js __tags_of_js x6392
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6390 : __tags intf) -> intf_to_js __tags_to_js x6390
    let (bufferData :
      'tags this ->
        target:GLenum.t -> size:GLsizeiptr.t -> usage:GLenum.t -> unit)
      =
      fun (x6397 : 'tags this) ->
        fun ~target:(x6394 : GLenum.t) ->
          fun ~size:(x6395 : GLsizeiptr.t) ->
            fun ~usage:(x6396 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6397) "bufferData"
                   [|(GLenum.t_to_js x6394);(GLsizeiptr.t_to_js x6395);(
                     GLenum.t_to_js x6396)|])
    let (bufferData' :
      'tags this ->
        target:GLenum.t ->
          data:BufferSource.t option -> usage:GLenum.t -> unit)
      =
      fun (x6403 : 'tags this) ->
        fun ~target:(x6399 : GLenum.t) ->
          fun ~data:(x6400 : BufferSource.t option) ->
            fun ~usage:(x6402 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6403) "bufferData"
                   [|(GLenum.t_to_js x6399);(Ojs.option_to_js
                                               BufferSource.t_to_js x6400);(
                     GLenum.t_to_js x6402)|])
    let (bufferSubData :
      'tags this ->
        target:GLenum.t -> offset:GLintptr.t -> data:BufferSource.t -> unit)
      =
      fun (x6408 : 'tags this) ->
        fun ~target:(x6405 : GLenum.t) ->
          fun ~offset:(x6406 : GLintptr.t) ->
            fun ~data:(x6407 : BufferSource.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6408) "bufferSubData"
                   [|(GLenum.t_to_js x6405);(GLintptr.t_to_js x6406);(
                     BufferSource.t_to_js x6407)|])
    let (compressedTexImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t -> data:ArrayBufferView.t_0 -> unit)
      =
      fun (x6417 : 'tags this) ->
        fun ~target:(x6410 : GLenum.t) ->
          fun ~level:(x6411 : GLint.t) ->
            fun ~internalformat:(x6412 : GLenum.t) ->
              fun ~width:(x6413 : GLsizei.t) ->
                fun ~height:(x6414 : GLsizei.t) ->
                  fun ~border:(x6415 : GLint.t) ->
                    fun ~data:(x6416 : ArrayBufferView.t_0) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x6417)
                           "compressedTexImage2D"
                           [|(GLenum.t_to_js x6410);(GLint.t_to_js x6411);(
                             GLenum.t_to_js x6412);(GLsizei.t_to_js x6413);(
                             GLsizei.t_to_js x6414);(GLint.t_to_js x6415);(
                             ArrayBufferView.t_0_to_js x6416)|])
    let (compressedTexSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t -> data:ArrayBufferView.t_0 -> unit)
      =
      fun (x6427 : 'tags this) ->
        fun ~target:(x6419 : GLenum.t) ->
          fun ~level:(x6420 : GLint.t) ->
            fun ~xoffset:(x6421 : GLint.t) ->
              fun ~yoffset:(x6422 : GLint.t) ->
                fun ~width:(x6423 : GLsizei.t) ->
                  fun ~height:(x6424 : GLsizei.t) ->
                    fun ~format:(x6425 : GLenum.t) ->
                      fun ~data:(x6426 : ArrayBufferView.t_0) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x6427)
                             "compressedTexSubImage2D"
                             [|(GLenum.t_to_js x6419);(GLint.t_to_js x6420);(
                               GLint.t_to_js x6421);(GLint.t_to_js x6422);(
                               GLsizei.t_to_js x6423);(GLsizei.t_to_js x6424);(
                               GLenum.t_to_js x6425);(ArrayBufferView.t_0_to_js
                                                        x6426)|])
    let (readPixels :
      'tags this ->
        x:GLint.t ->
          y:GLint.t ->
            width:GLsizei.t ->
              height:GLsizei.t ->
                format:GLenum.t ->
                  type_:GLenum.t -> pixels:ArrayBufferView.t_0 option -> unit)
      =
      fun (x6437 : 'tags this) ->
        fun ~x:(x6429 : GLint.t) ->
          fun ~y:(x6430 : GLint.t) ->
            fun ~width:(x6431 : GLsizei.t) ->
              fun ~height:(x6432 : GLsizei.t) ->
                fun ~format:(x6433 : GLenum.t) ->
                  fun ~type_:(x6434 : GLenum.t) ->
                    fun ~pixels:(x6435 : ArrayBufferView.t_0 option) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x6437) "readPixels"
                           [|(GLint.t_to_js x6429);(GLint.t_to_js x6430);(
                             GLsizei.t_to_js x6431);(GLsizei.t_to_js x6432);(
                             GLenum.t_to_js x6433);(GLenum.t_to_js x6434);(
                             Ojs.option_to_js ArrayBufferView.t_0_to_js x6435)|])
    let (texImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        pixels:ArrayBufferView.t_0 option -> unit)
      =
      fun (x6449 : 'tags this) ->
        fun ~target:(x6439 : GLenum.t) ->
          fun ~level:(x6440 : GLint.t) ->
            fun ~internalformat:(x6441 : GLint.t) ->
              fun ~width:(x6442 : GLsizei.t) ->
                fun ~height:(x6443 : GLsizei.t) ->
                  fun ~border:(x6444 : GLint.t) ->
                    fun ~format:(x6445 : GLenum.t) ->
                      fun ~type_:(x6446 : GLenum.t) ->
                        fun ~pixels:(x6447 : ArrayBufferView.t_0 option) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x6449)
                               "texImage2D"
                               [|(GLenum.t_to_js x6439);(GLint.t_to_js x6440);(
                                 GLint.t_to_js x6441);(GLsizei.t_to_js x6442);(
                                 GLsizei.t_to_js x6443);(GLint.t_to_js x6444);(
                                 GLenum.t_to_js x6445);(GLenum.t_to_js x6446);(
                                 Ojs.option_to_js ArrayBufferView.t_0_to_js
                                   x6447)|])
    let (texImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              format:GLenum.t ->
                type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x6457 : 'tags this) ->
        fun ~target:(x6451 : GLenum.t) ->
          fun ~level:(x6452 : GLint.t) ->
            fun ~internalformat:(x6453 : GLint.t) ->
              fun ~format:(x6454 : GLenum.t) ->
                fun ~type_:(x6455 : GLenum.t) ->
                  fun ~source:(x6456 : TexImageSource.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x6457) "texImage2D"
                         [|(GLenum.t_to_js x6451);(GLint.t_to_js x6452);(
                           GLint.t_to_js x6453);(GLenum.t_to_js x6454);(
                           GLenum.t_to_js x6455);(TexImageSource.t_to_js
                                                    x6456)|])
    let (texSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        pixels:ArrayBufferView.t_0 option -> unit)
      =
      fun (x6469 : 'tags this) ->
        fun ~target:(x6459 : GLenum.t) ->
          fun ~level:(x6460 : GLint.t) ->
            fun ~xoffset:(x6461 : GLint.t) ->
              fun ~yoffset:(x6462 : GLint.t) ->
                fun ~width:(x6463 : GLsizei.t) ->
                  fun ~height:(x6464 : GLsizei.t) ->
                    fun ~format:(x6465 : GLenum.t) ->
                      fun ~type_:(x6466 : GLenum.t) ->
                        fun ~pixels:(x6467 : ArrayBufferView.t_0 option) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x6469)
                               "texSubImage2D"
                               [|(GLenum.t_to_js x6459);(GLint.t_to_js x6460);(
                                 GLint.t_to_js x6461);(GLint.t_to_js x6462);(
                                 GLsizei.t_to_js x6463);(GLsizei.t_to_js
                                                           x6464);(GLenum.t_to_js
                                                                    x6465);(
                                 GLenum.t_to_js x6466);(Ojs.option_to_js
                                                          ArrayBufferView.t_0_to_js
                                                          x6467)|])
    let (texSubImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                format:GLenum.t ->
                  type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x6478 : 'tags this) ->
        fun ~target:(x6471 : GLenum.t) ->
          fun ~level:(x6472 : GLint.t) ->
            fun ~xoffset:(x6473 : GLint.t) ->
              fun ~yoffset:(x6474 : GLint.t) ->
                fun ~format:(x6475 : GLenum.t) ->
                  fun ~type_:(x6476 : GLenum.t) ->
                    fun ~source:(x6477 : TexImageSource.t) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x6478)
                           "texSubImage2D"
                           [|(GLenum.t_to_js x6471);(GLint.t_to_js x6472);(
                             GLint.t_to_js x6473);(GLint.t_to_js x6474);(
                             GLenum.t_to_js x6475);(GLenum.t_to_js x6476);(
                             TexImageSource.t_to_js x6477)|])
    let (uniform1fv :
      'tags this ->
        location:WebGLUniformLocation.t option -> v:Float32List.t -> unit)
      =
      fun (x6483 : 'tags this) ->
        fun ~location:(x6480 : WebGLUniformLocation.t option) ->
          fun ~v:(x6482 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6483) "uniform1fv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6480);(
                   Float32List.t_to_js x6482)|])
    let (uniform1iv :
      'tags this ->
        location:WebGLUniformLocation.t option -> v:Int32List.t -> unit)
      =
      fun (x6488 : 'tags this) ->
        fun ~location:(x6485 : WebGLUniformLocation.t option) ->
          fun ~v:(x6487 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6488) "uniform1iv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6485);(
                   Int32List.t_to_js x6487)|])
    let (uniform2fv :
      'tags this ->
        location:WebGLUniformLocation.t option -> v:Float32List.t -> unit)
      =
      fun (x6493 : 'tags this) ->
        fun ~location:(x6490 : WebGLUniformLocation.t option) ->
          fun ~v:(x6492 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6493) "uniform2fv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6490);(
                   Float32List.t_to_js x6492)|])
    let (uniform2iv :
      'tags this ->
        location:WebGLUniformLocation.t option -> v:Int32List.t -> unit)
      =
      fun (x6498 : 'tags this) ->
        fun ~location:(x6495 : WebGLUniformLocation.t option) ->
          fun ~v:(x6497 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6498) "uniform2iv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6495);(
                   Int32List.t_to_js x6497)|])
    let (uniform3fv :
      'tags this ->
        location:WebGLUniformLocation.t option -> v:Float32List.t -> unit)
      =
      fun (x6503 : 'tags this) ->
        fun ~location:(x6500 : WebGLUniformLocation.t option) ->
          fun ~v:(x6502 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6503) "uniform3fv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6500);(
                   Float32List.t_to_js x6502)|])
    let (uniform3iv :
      'tags this ->
        location:WebGLUniformLocation.t option -> v:Int32List.t -> unit)
      =
      fun (x6508 : 'tags this) ->
        fun ~location:(x6505 : WebGLUniformLocation.t option) ->
          fun ~v:(x6507 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6508) "uniform3iv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6505);(
                   Int32List.t_to_js x6507)|])
    let (uniform4fv :
      'tags this ->
        location:WebGLUniformLocation.t option -> v:Float32List.t -> unit)
      =
      fun (x6513 : 'tags this) ->
        fun ~location:(x6510 : WebGLUniformLocation.t option) ->
          fun ~v:(x6512 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6513) "uniform4fv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6510);(
                   Float32List.t_to_js x6512)|])
    let (uniform4iv :
      'tags this ->
        location:WebGLUniformLocation.t option -> v:Int32List.t -> unit)
      =
      fun (x6518 : 'tags this) ->
        fun ~location:(x6515 : WebGLUniformLocation.t option) ->
          fun ~v:(x6517 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6518) "uniform4iv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6515);(
                   Int32List.t_to_js x6517)|])
    let (uniformMatrix2fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t -> value:Float32List.t -> unit)
      =
      fun (x6524 : 'tags this) ->
        fun ~location:(x6520 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x6522 : GLboolean.t) ->
            fun ~value:(x6523 : Float32List.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6524) "uniformMatrix2fv"
                   [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6520);(
                     GLboolean.t_to_js x6522);(Float32List.t_to_js x6523)|])
    let (uniformMatrix3fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t -> value:Float32List.t -> unit)
      =
      fun (x6530 : 'tags this) ->
        fun ~location:(x6526 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x6528 : GLboolean.t) ->
            fun ~value:(x6529 : Float32List.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6530) "uniformMatrix3fv"
                   [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6526);(
                     GLboolean.t_to_js x6528);(Float32List.t_to_js x6529)|])
    let (uniformMatrix4fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t -> value:Float32List.t -> unit)
      =
      fun (x6536 : 'tags this) ->
        fun ~location:(x6532 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x6534 : GLboolean.t) ->
            fun ~value:(x6535 : Float32List.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6536) "uniformMatrix4fv"
                   [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6532);(
                     GLboolean.t_to_js x6534);(Float32List.t_to_js x6535)|])
    let (uniform1fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6542 : 'tags this) ->
        fun ~location:(x6538 : WebGLUniformLocation.t option) ->
          fun ~v:(x6540 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6542) "uniform1fv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6538);(
                   Iterable.t_1_to_js GLfloat.t_to_js x6540)|])
    let (uniform1iv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v:GLint.t Iterable.t_1 -> unit)
      =
      fun (x6548 : 'tags this) ->
        fun ~location:(x6544 : WebGLUniformLocation.t option) ->
          fun ~v:(x6546 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6548) "uniform1iv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6544);(
                   Iterable.t_1_to_js GLint.t_to_js x6546)|])
    let (uniform2fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6554 : 'tags this) ->
        fun ~location:(x6550 : WebGLUniformLocation.t option) ->
          fun ~v:(x6552 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6554) "uniform2fv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6550);(
                   Iterable.t_1_to_js GLfloat.t_to_js x6552)|])
    let (uniform2iv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v:GLint.t Iterable.t_1 -> unit)
      =
      fun (x6560 : 'tags this) ->
        fun ~location:(x6556 : WebGLUniformLocation.t option) ->
          fun ~v:(x6558 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6560) "uniform2iv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6556);(
                   Iterable.t_1_to_js GLint.t_to_js x6558)|])
    let (uniform3fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6566 : 'tags this) ->
        fun ~location:(x6562 : WebGLUniformLocation.t option) ->
          fun ~v:(x6564 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6566) "uniform3fv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6562);(
                   Iterable.t_1_to_js GLfloat.t_to_js x6564)|])
    let (uniform3iv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v:GLint.t Iterable.t_1 -> unit)
      =
      fun (x6572 : 'tags this) ->
        fun ~location:(x6568 : WebGLUniformLocation.t option) ->
          fun ~v:(x6570 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6572) "uniform3iv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6568);(
                   Iterable.t_1_to_js GLint.t_to_js x6570)|])
    let (uniform4fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6578 : 'tags this) ->
        fun ~location:(x6574 : WebGLUniformLocation.t option) ->
          fun ~v:(x6576 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6578) "uniform4fv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6574);(
                   Iterable.t_1_to_js GLfloat.t_to_js x6576)|])
    let (uniform4iv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v:GLint.t Iterable.t_1 -> unit)
      =
      fun (x6584 : 'tags this) ->
        fun ~location:(x6580 : WebGLUniformLocation.t option) ->
          fun ~v:(x6582 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6584) "uniform4iv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6580);(
                   Iterable.t_1_to_js GLint.t_to_js x6582)|])
    let (uniformMatrix2fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t -> value:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6591 : 'tags this) ->
        fun ~location:(x6586 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x6588 : GLboolean.t) ->
            fun ~value:(x6589 : GLfloat.t Iterable.t_1) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6591) "uniformMatrix2fv"
                   [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6586);(
                     GLboolean.t_to_js x6588);(Iterable.t_1_to_js
                                                 GLfloat.t_to_js x6589)|])
    let (uniformMatrix3fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t -> value:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6598 : 'tags this) ->
        fun ~location:(x6593 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x6595 : GLboolean.t) ->
            fun ~value:(x6596 : GLfloat.t Iterable.t_1) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6598) "uniformMatrix3fv"
                   [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6593);(
                     GLboolean.t_to_js x6595);(Iterable.t_1_to_js
                                                 GLfloat.t_to_js x6596)|])
    let (uniformMatrix4fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t -> value:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6605 : 'tags this) ->
        fun ~location:(x6600 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x6602 : GLboolean.t) ->
            fun ~value:(x6603 : GLfloat.t Iterable.t_1) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6605) "uniformMatrix4fv"
                   [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6600);(
                     GLboolean.t_to_js x6602);(Iterable.t_1_to_js
                                                 GLfloat.t_to_js x6603)|])
    let cast_from = Obj.magic
  end
module WebGLShaderPrecisionFormat =
  struct
    type t = [ `WebGLShaderPrecisionFormat ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6608 : Ojs.t) -> t_of_js x6608
    and t_0_to_js : t_0 -> Ojs.t = fun (x6607 : t) -> t_to_js x6607
    type tags = [ `WebGLShaderPrecisionFormat ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLShaderPrecisionFormat ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6611 : Ojs.t) -> intf_of_js __tags_of_js x6611
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6609 : __tags intf) -> intf_to_js __tags_to_js x6609
    let (get_precision : 'tags this -> GLint.t) =
      fun (x6613 : 'tags this) ->
        GLint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6613) "precision")
    let (get_rangeMax : 'tags this -> GLint.t) =
      fun (x6615 : 'tags this) ->
        GLint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6615) "rangeMax")
    let (get_rangeMin : 'tags this -> GLint.t) =
      fun (x6617 : 'tags this) ->
        GLint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6617) "rangeMin")
    let (create :
      precision:GLint.t -> rangeMax:GLint.t -> rangeMin:GLint.t -> unit -> t)
      =
      fun ~precision:(x6619 : GLint.t) ->
        fun ~rangeMax:(x6620 : GLint.t) ->
          fun ~rangeMin:(x6621 : GLint.t) ->
            fun () ->
              let x6622 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x6622 "precision" (GLint.t_to_js x6619);
              Ojs.set_prop_ascii x6622 "rangeMax" (GLint.t_to_js x6620);
              Ojs.set_prop_ascii x6622 "rangeMin" (GLint.t_to_js x6621);
              t_of_js x6622
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLShaderPrecisionFormat")
             "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGLShaderPrecisionFormat")
             [||])
  end
module WebGLRenderbuffer =
  struct
    type t = [ `WebGLRenderbuffer ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6624 : Ojs.t) -> t_of_js x6624
    and t_0_to_js : t_0 -> Ojs.t = fun (x6623 : t) -> t_to_js x6623
    type tags = [ `WebGLRenderbuffer ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLRenderbuffer ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6627 : Ojs.t) -> intf_of_js __tags_of_js x6627
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6625 : __tags intf) -> intf_to_js __tags_to_js x6625
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderbuffer") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLRenderbuffer")
             [||])
  end
module WebGLFramebuffer =
  struct
    type t = [ `WebGLFramebuffer ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6630 : Ojs.t) -> t_of_js x6630
    and t_0_to_js : t_0 -> Ojs.t = fun (x6629 : t) -> t_to_js x6629
    type tags = [ `WebGLFramebuffer ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLFramebuffer ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6633 : Ojs.t) -> intf_of_js __tags_of_js x6633
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6631 : __tags intf) -> intf_to_js __tags_to_js x6631
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLFramebuffer") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLFramebuffer")
             [||])
  end
module WebGLPowerPreference =
  struct
    type t =
      [ `L_s109_low_power  | `L_s57_default  | `L_s87_high_performance ]
    let rec t_of_js : Ojs.t -> t =
      fun (x6636 : Ojs.t) ->
        let x6637 = x6636 in
        match Ojs.string_of_js x6637 with
        | "low-power" -> `L_s109_low_power
        | "default" -> `L_s57_default
        | "high-performance" -> `L_s87_high_performance
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x6635 :
          [ `L_s109_low_power  | `L_s57_default  | `L_s87_high_performance ])
        ->
        match x6635 with
        | `L_s109_low_power -> Ojs.string_to_js "low-power"
        | `L_s57_default -> Ojs.string_to_js "default"
        | `L_s87_high_performance -> Ojs.string_to_js "high-performance"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6639 : Ojs.t) -> t_of_js x6639
    and t_0_to_js : t_0 -> Ojs.t = fun (x6638 : t) -> t_to_js x6638
  end
module WebGLContextAttributes =
  struct
    type t = [ `WebGLContextAttributes ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6641 : Ojs.t) -> t_of_js x6641
    and t_0_to_js : t_0 -> Ojs.t = fun (x6640 : t) -> t_to_js x6640
    type tags = [ `WebGLContextAttributes ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLContextAttributes ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6644 : Ojs.t) -> intf_of_js __tags_of_js x6644
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6642 : __tags intf) -> intf_to_js __tags_to_js x6642
    let (get_alpha : 'tags this -> bool option) =
      fun (x6646 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6646) "alpha")
    let (set_alpha : 'tags this -> bool -> unit) =
      fun (x6649 : 'tags this) ->
        fun (x6650 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6649) "alpha"
            (Ojs.bool_to_js x6650)
    let (get_antialias : 'tags this -> bool option) =
      fun (x6652 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6652) "antialias")
    let (set_antialias : 'tags this -> bool -> unit) =
      fun (x6655 : 'tags this) ->
        fun (x6656 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6655) "antialias"
            (Ojs.bool_to_js x6656)
    let (get_depth : 'tags this -> bool option) =
      fun (x6658 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6658) "depth")
    let (set_depth : 'tags this -> bool -> unit) =
      fun (x6661 : 'tags this) ->
        fun (x6662 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6661) "depth"
            (Ojs.bool_to_js x6662)
    let (get_desynchronized : 'tags this -> bool option) =
      fun (x6664 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6664) "desynchronized")
    let (set_desynchronized : 'tags this -> bool -> unit) =
      fun (x6667 : 'tags this) ->
        fun (x6668 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6667) "desynchronized"
            (Ojs.bool_to_js x6668)
    let (get_failIfMajorPerformanceCaveat : 'tags this -> bool option) =
      fun (x6670 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6670)
             "failIfMajorPerformanceCaveat")
    let (set_failIfMajorPerformanceCaveat : 'tags this -> bool -> unit) =
      fun (x6673 : 'tags this) ->
        fun (x6674 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6673)
            "failIfMajorPerformanceCaveat" (Ojs.bool_to_js x6674)
    let (get_powerPreference : 'tags this -> WebGLPowerPreference.t option) =
      fun (x6676 : 'tags this) ->
        Ojs.option_of_js WebGLPowerPreference.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6676) "powerPreference")
    let (set_powerPreference : 'tags this -> WebGLPowerPreference.t -> unit)
      =
      fun (x6679 : 'tags this) ->
        fun (x6680 : WebGLPowerPreference.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6679) "powerPreference"
            (WebGLPowerPreference.t_to_js x6680)
    let (get_premultipliedAlpha : 'tags this -> bool option) =
      fun (x6682 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6682)
             "premultipliedAlpha")
    let (set_premultipliedAlpha : 'tags this -> bool -> unit) =
      fun (x6685 : 'tags this) ->
        fun (x6686 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6685)
            "premultipliedAlpha" (Ojs.bool_to_js x6686)
    let (get_preserveDrawingBuffer : 'tags this -> bool option) =
      fun (x6688 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6688)
             "preserveDrawingBuffer")
    let (set_preserveDrawingBuffer : 'tags this -> bool -> unit) =
      fun (x6691 : 'tags this) ->
        fun (x6692 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6691)
            "preserveDrawingBuffer" (Ojs.bool_to_js x6692)
    let (get_stencil : 'tags this -> bool option) =
      fun (x6694 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6694) "stencil")
    let (set_stencil : 'tags this -> bool -> unit) =
      fun (x6697 : 'tags this) ->
        fun (x6698 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6697) "stencil"
            (Ojs.bool_to_js x6698)
    let (create :
      ?alpha:bool ->
        ?antialias:bool ->
          ?depth:bool ->
            ?desynchronized:bool ->
              ?failIfMajorPerformanceCaveat:bool ->
                ?powerPreference:WebGLPowerPreference.t ->
                  ?premultipliedAlpha:bool ->
                    ?preserveDrawingBuffer:bool -> ?stencil:bool -> unit -> t)
      =
      fun ?alpha:(x6700 : bool option) ->
        fun ?antialias:(x6701 : bool option) ->
          fun ?depth:(x6702 : bool option) ->
            fun ?desynchronized:(x6703 : bool option) ->
              fun ?failIfMajorPerformanceCaveat:(x6704 : bool option) ->
                fun ?powerPreference:(x6705 : WebGLPowerPreference.t option)
                  ->
                  fun ?premultipliedAlpha:(x6706 : bool option) ->
                    fun ?preserveDrawingBuffer:(x6707 : bool option) ->
                      fun ?stencil:(x6708 : bool option) ->
                        fun () ->
                          let x6709 = Ojs.empty_obj () in
                          (match x6700 with
                           | Some x6718 ->
                               Ojs.set_prop_ascii x6709 "alpha"
                                 (Ojs.bool_to_js x6718)
                           | None -> ());
                          (match x6701 with
                           | Some x6717 ->
                               Ojs.set_prop_ascii x6709 "antialias"
                                 (Ojs.bool_to_js x6717)
                           | None -> ());
                          (match x6702 with
                           | Some x6716 ->
                               Ojs.set_prop_ascii x6709 "depth"
                                 (Ojs.bool_to_js x6716)
                           | None -> ());
                          (match x6703 with
                           | Some x6715 ->
                               Ojs.set_prop_ascii x6709 "desynchronized"
                                 (Ojs.bool_to_js x6715)
                           | None -> ());
                          (match x6704 with
                           | Some x6714 ->
                               Ojs.set_prop_ascii x6709
                                 "failIfMajorPerformanceCaveat"
                                 (Ojs.bool_to_js x6714)
                           | None -> ());
                          (match x6705 with
                           | Some x6713 ->
                               Ojs.set_prop_ascii x6709 "powerPreference"
                                 (WebGLPowerPreference.t_to_js x6713)
                           | None -> ());
                          (match x6706 with
                           | Some x6712 ->
                               Ojs.set_prop_ascii x6709 "premultipliedAlpha"
                                 (Ojs.bool_to_js x6712)
                           | None -> ());
                          (match x6707 with
                           | Some x6711 ->
                               Ojs.set_prop_ascii x6709
                                 "preserveDrawingBuffer"
                                 (Ojs.bool_to_js x6711)
                           | None -> ());
                          (match x6708 with
                           | Some x6710 ->
                               Ojs.set_prop_ascii x6709 "stencil"
                                 (Ojs.bool_to_js x6710)
                           | None -> ());
                          t_of_js x6709
    let cast_from = Obj.magic
  end
module WebGLProgram =
  struct
    type t = [ `WebGLProgram ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6720 : Ojs.t) -> t_of_js x6720
    and t_0_to_js : t_0 -> Ojs.t = fun (x6719 : t) -> t_to_js x6719
    type tags = [ `WebGLProgram ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLProgram ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6723 : Ojs.t) -> intf_of_js __tags_of_js x6723
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6721 : __tags intf) -> intf_to_js __tags_to_js x6721
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLProgram")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLProgram") [||])
  end
module WebGLBuffer =
  struct
    type t = [ `WebGLBuffer ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6726 : Ojs.t) -> t_of_js x6726
    and t_0_to_js : t_0 -> Ojs.t = fun (x6725 : t) -> t_to_js x6725
    type tags = [ `WebGLBuffer ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLBuffer ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6729 : Ojs.t) -> intf_of_js __tags_of_js x6729
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6727 : __tags intf) -> intf_to_js __tags_to_js x6727
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLBuffer")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLBuffer") [||])
  end
module WebGLActiveInfo =
  struct
    type t = [ `WebGLActiveInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6732 : Ojs.t) -> t_of_js x6732
    and t_0_to_js : t_0 -> Ojs.t = fun (x6731 : t) -> t_to_js x6731
    type tags = [ `WebGLActiveInfo ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLActiveInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6735 : Ojs.t) -> intf_of_js __tags_of_js x6735
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6733 : __tags intf) -> intf_to_js __tags_to_js x6733
    let (get_name : 'tags this -> string) =
      fun (x6737 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6737) "name")
    let (get_size : 'tags this -> GLint.t) =
      fun (x6739 : 'tags this) ->
        GLint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6739) "size")
    let (get_type : 'tags this -> GLenum.t) =
      fun (x6741 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6741) "type")
    let (create : name:string -> size:GLint.t -> type_:GLenum.t -> unit -> t)
      =
      fun ~name:(x6743 : string) ->
        fun ~size:(x6744 : GLint.t) ->
          fun ~type_:(x6745 : GLenum.t) ->
            fun () ->
              let x6746 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x6746 "name" (Ojs.string_to_js x6743);
              Ojs.set_prop_ascii x6746 "size" (GLint.t_to_js x6744);
              Ojs.set_prop_ascii x6746 "type" (GLenum.t_to_js x6745);
              t_of_js x6746
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLActiveInfo") "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLActiveInfo") [||])
  end
module WEBGL_lose_context =
  struct
    type t = [ `WEBGL_lose_context ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6748 : Ojs.t) -> t_of_js x6748
    and t_0_to_js : t_0 -> Ojs.t = fun (x6747 : t) -> t_to_js x6747
    type tags = [ `WEBGL_lose_context ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_lose_context ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6751 : Ojs.t) -> intf_of_js __tags_of_js x6751
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6749 : __tags intf) -> intf_to_js __tags_to_js x6749
    let (loseContext : 'tags this -> unit) =
      fun (x6753 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x6753) "loseContext" [||])
    let (restoreContext : 'tags this -> unit) =
      fun (x6755 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x6755) "restoreContext" [||])
    let cast_from = Obj.magic
  end
module WEBGL_draw_buffers =
  struct
    type t = [ `WEBGL_draw_buffers ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6758 : Ojs.t) -> t_of_js x6758
    and t_0_to_js : t_0 -> Ojs.t = fun (x6757 : t) -> t_to_js x6757
    type tags = [ `WEBGL_draw_buffers ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_draw_buffers ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6761 : Ojs.t) -> intf_of_js __tags_of_js x6761
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6759 : __tags intf) -> intf_to_js __tags_to_js x6759
    let (drawBuffersWEBGL : 'tags this -> buffers:GLenum.t list -> unit) =
      fun (x6765 : 'tags this) ->
        fun ~buffers:(x6763 : GLenum.t list) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6765) "drawBuffersWEBGL"
               [|(Ojs.list_to_js GLenum.t_to_js x6763)|])
    let (get_COLOR_ATTACHMENT0_WEBGL : 'tags this -> GLenum.t) =
      fun (x6767 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6767)
             "COLOR_ATTACHMENT0_WEBGL")
    let (get_COLOR_ATTACHMENT10_WEBGL : 'tags this -> GLenum.t) =
      fun (x6769 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6769)
             "COLOR_ATTACHMENT10_WEBGL")
    let (get_COLOR_ATTACHMENT11_WEBGL : 'tags this -> GLenum.t) =
      fun (x6771 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6771)
             "COLOR_ATTACHMENT11_WEBGL")
    let (get_COLOR_ATTACHMENT12_WEBGL : 'tags this -> GLenum.t) =
      fun (x6773 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6773)
             "COLOR_ATTACHMENT12_WEBGL")
    let (get_COLOR_ATTACHMENT13_WEBGL : 'tags this -> GLenum.t) =
      fun (x6775 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6775)
             "COLOR_ATTACHMENT13_WEBGL")
    let (get_COLOR_ATTACHMENT14_WEBGL : 'tags this -> GLenum.t) =
      fun (x6777 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6777)
             "COLOR_ATTACHMENT14_WEBGL")
    let (get_COLOR_ATTACHMENT15_WEBGL : 'tags this -> GLenum.t) =
      fun (x6779 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6779)
             "COLOR_ATTACHMENT15_WEBGL")
    let (get_COLOR_ATTACHMENT1_WEBGL : 'tags this -> GLenum.t) =
      fun (x6781 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6781)
             "COLOR_ATTACHMENT1_WEBGL")
    let (get_COLOR_ATTACHMENT2_WEBGL : 'tags this -> GLenum.t) =
      fun (x6783 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6783)
             "COLOR_ATTACHMENT2_WEBGL")
    let (get_COLOR_ATTACHMENT3_WEBGL : 'tags this -> GLenum.t) =
      fun (x6785 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6785)
             "COLOR_ATTACHMENT3_WEBGL")
    let (get_COLOR_ATTACHMENT4_WEBGL : 'tags this -> GLenum.t) =
      fun (x6787 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6787)
             "COLOR_ATTACHMENT4_WEBGL")
    let (get_COLOR_ATTACHMENT5_WEBGL : 'tags this -> GLenum.t) =
      fun (x6789 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6789)
             "COLOR_ATTACHMENT5_WEBGL")
    let (get_COLOR_ATTACHMENT6_WEBGL : 'tags this -> GLenum.t) =
      fun (x6791 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6791)
             "COLOR_ATTACHMENT6_WEBGL")
    let (get_COLOR_ATTACHMENT7_WEBGL : 'tags this -> GLenum.t) =
      fun (x6793 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6793)
             "COLOR_ATTACHMENT7_WEBGL")
    let (get_COLOR_ATTACHMENT8_WEBGL : 'tags this -> GLenum.t) =
      fun (x6795 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6795)
             "COLOR_ATTACHMENT8_WEBGL")
    let (get_COLOR_ATTACHMENT9_WEBGL : 'tags this -> GLenum.t) =
      fun (x6797 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6797)
             "COLOR_ATTACHMENT9_WEBGL")
    let (get_DRAW_BUFFER0_WEBGL : 'tags this -> GLenum.t) =
      fun (x6799 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6799)
             "DRAW_BUFFER0_WEBGL")
    let (get_DRAW_BUFFER10_WEBGL : 'tags this -> GLenum.t) =
      fun (x6801 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6801)
             "DRAW_BUFFER10_WEBGL")
    let (get_DRAW_BUFFER11_WEBGL : 'tags this -> GLenum.t) =
      fun (x6803 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6803)
             "DRAW_BUFFER11_WEBGL")
    let (get_DRAW_BUFFER12_WEBGL : 'tags this -> GLenum.t) =
      fun (x6805 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6805)
             "DRAW_BUFFER12_WEBGL")
    let (get_DRAW_BUFFER13_WEBGL : 'tags this -> GLenum.t) =
      fun (x6807 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6807)
             "DRAW_BUFFER13_WEBGL")
    let (get_DRAW_BUFFER14_WEBGL : 'tags this -> GLenum.t) =
      fun (x6809 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6809)
             "DRAW_BUFFER14_WEBGL")
    let (get_DRAW_BUFFER15_WEBGL : 'tags this -> GLenum.t) =
      fun (x6811 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6811)
             "DRAW_BUFFER15_WEBGL")
    let (get_DRAW_BUFFER1_WEBGL : 'tags this -> GLenum.t) =
      fun (x6813 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6813)
             "DRAW_BUFFER1_WEBGL")
    let (get_DRAW_BUFFER2_WEBGL : 'tags this -> GLenum.t) =
      fun (x6815 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6815)
             "DRAW_BUFFER2_WEBGL")
    let (get_DRAW_BUFFER3_WEBGL : 'tags this -> GLenum.t) =
      fun (x6817 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6817)
             "DRAW_BUFFER3_WEBGL")
    let (get_DRAW_BUFFER4_WEBGL : 'tags this -> GLenum.t) =
      fun (x6819 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6819)
             "DRAW_BUFFER4_WEBGL")
    let (get_DRAW_BUFFER5_WEBGL : 'tags this -> GLenum.t) =
      fun (x6821 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6821)
             "DRAW_BUFFER5_WEBGL")
    let (get_DRAW_BUFFER6_WEBGL : 'tags this -> GLenum.t) =
      fun (x6823 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6823)
             "DRAW_BUFFER6_WEBGL")
    let (get_DRAW_BUFFER7_WEBGL : 'tags this -> GLenum.t) =
      fun (x6825 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6825)
             "DRAW_BUFFER7_WEBGL")
    let (get_DRAW_BUFFER8_WEBGL : 'tags this -> GLenum.t) =
      fun (x6827 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6827)
             "DRAW_BUFFER8_WEBGL")
    let (get_DRAW_BUFFER9_WEBGL : 'tags this -> GLenum.t) =
      fun (x6829 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6829)
             "DRAW_BUFFER9_WEBGL")
    let (get_MAX_COLOR_ATTACHMENTS_WEBGL : 'tags this -> GLenum.t) =
      fun (x6831 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6831)
             "MAX_COLOR_ATTACHMENTS_WEBGL")
    let (get_MAX_DRAW_BUFFERS_WEBGL : 'tags this -> GLenum.t) =
      fun (x6833 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6833)
             "MAX_DRAW_BUFFERS_WEBGL")
    let (drawBuffersWEBGL' :
      'tags this -> buffers:GLenum.t Iterable.t_1 -> unit) =
      fun (x6837 : 'tags this) ->
        fun ~buffers:(x6835 : GLenum.t Iterable.t_1) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6837) "drawBuffersWEBGL"
               [|(Iterable.t_1_to_js GLenum.t_to_js x6835)|])
    let cast_from = Obj.magic
  end
module WEBGL_depth_texture =
  struct
    type t = [ `WEBGL_depth_texture ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6840 : Ojs.t) -> t_of_js x6840
    and t_0_to_js : t_0 -> Ojs.t = fun (x6839 : t) -> t_to_js x6839
    type tags = [ `WEBGL_depth_texture ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_depth_texture ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6843 : Ojs.t) -> intf_of_js __tags_of_js x6843
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6841 : __tags intf) -> intf_to_js __tags_to_js x6841
    let (get_UNSIGNED_INT_24_8_WEBGL : 'tags this -> GLenum.t) =
      fun (x6845 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6845)
             "UNSIGNED_INT_24_8_WEBGL")
    let (create : unsigned_int_24_8_webgl:GLenum.t -> unit -> t) =
      fun ~unsigned_int_24_8_webgl:(x6847 : GLenum.t) ->
        fun () ->
          let x6848 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x6848 "UNSIGNED_INT_24_8_WEBGL"
            (GLenum.t_to_js x6847);
          t_of_js x6848
    let cast_from = Obj.magic
  end
module WebGLShader =
  struct
    type t = [ `WebGLShader ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6850 : Ojs.t) -> t_of_js x6850
    and t_0_to_js : t_0 -> Ojs.t = fun (x6849 : t) -> t_to_js x6849
    type tags = [ `WebGLShader ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLShader ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6853 : Ojs.t) -> intf_of_js __tags_of_js x6853
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6851 : __tags intf) -> intf_to_js __tags_to_js x6851
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLShader")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLShader") [||])
  end
module WEBGL_debug_shaders =
  struct
    type t = [ `WEBGL_debug_shaders ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6856 : Ojs.t) -> t_of_js x6856
    and t_0_to_js : t_0 -> Ojs.t = fun (x6855 : t) -> t_to_js x6855
    type tags = [ `WEBGL_debug_shaders ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_debug_shaders ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6859 : Ojs.t) -> intf_of_js __tags_of_js x6859
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6857 : __tags intf) -> intf_to_js __tags_to_js x6857
    let (getTranslatedShaderSource :
      'tags this -> shader:WebGLShader.t -> string) =
      fun (x6862 : 'tags this) ->
        fun ~shader:(x6861 : WebGLShader.t) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x6862)
               "getTranslatedShaderSource" [|(WebGLShader.t_to_js x6861)|])
    let cast_from = Obj.magic
  end
module WEBGL_debug_renderer_info =
  struct
    type t = [ `WEBGL_debug_renderer_info ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6865 : Ojs.t) -> t_of_js x6865
    and t_0_to_js : t_0 -> Ojs.t = fun (x6864 : t) -> t_to_js x6864
    type tags = [ `WEBGL_debug_renderer_info ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_debug_renderer_info ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6868 : Ojs.t) -> intf_of_js __tags_of_js x6868
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6866 : __tags intf) -> intf_to_js __tags_to_js x6866
    let (get_UNMASKED_RENDERER_WEBGL : 'tags this -> GLenum.t) =
      fun (x6870 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6870)
             "UNMASKED_RENDERER_WEBGL")
    let (get_UNMASKED_VENDOR_WEBGL : 'tags this -> GLenum.t) =
      fun (x6872 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6872)
             "UNMASKED_VENDOR_WEBGL")
    let (create :
      unmasked_renderer_webgl:GLenum.t ->
        unmasked_vendor_webgl:GLenum.t -> unit -> t)
      =
      fun ~unmasked_renderer_webgl:(x6874 : GLenum.t) ->
        fun ~unmasked_vendor_webgl:(x6875 : GLenum.t) ->
          fun () ->
            let x6876 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x6876 "UNMASKED_RENDERER_WEBGL"
              (GLenum.t_to_js x6874);
            Ojs.set_prop_ascii x6876 "UNMASKED_VENDOR_WEBGL"
              (GLenum.t_to_js x6875);
            t_of_js x6876
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_s3tc_srgb =
  struct
    type t = [ `WEBGL_compressed_texture_s3tc_srgb ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6878 : Ojs.t) -> t_of_js x6878
    and t_0_to_js : t_0 -> Ojs.t = fun (x6877 : t) -> t_to_js x6877
    type tags = [ `WEBGL_compressed_texture_s3tc_srgb ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_s3tc_srgb ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6881 : Ojs.t) -> intf_of_js __tags_of_js x6881
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6879 : __tags intf) -> intf_to_js __tags_to_js x6879
    let (get_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT : 'tags this -> GLenum.t) =
      fun (x6883 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6883)
             "COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT")
    let (get_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT : 'tags this -> GLenum.t) =
      fun (x6885 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6885)
             "COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT")
    let (get_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT : 'tags this -> GLenum.t) =
      fun (x6887 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6887)
             "COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT")
    let (get_COMPRESSED_SRGB_S3TC_DXT1_EXT : 'tags this -> GLenum.t) =
      fun (x6889 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6889)
             "COMPRESSED_SRGB_S3TC_DXT1_EXT")
    let (create :
      compressed_srgb_alpha_s3tc_dxt1_ext:GLenum.t ->
        compressed_srgb_alpha_s3tc_dxt3_ext:GLenum.t ->
          compressed_srgb_alpha_s3tc_dxt5_ext:GLenum.t ->
            compressed_srgb_s3tc_dxt1_ext:GLenum.t -> unit -> t)
      =
      fun ~compressed_srgb_alpha_s3tc_dxt1_ext:(x6891 : GLenum.t) ->
        fun ~compressed_srgb_alpha_s3tc_dxt3_ext:(x6892 : GLenum.t) ->
          fun ~compressed_srgb_alpha_s3tc_dxt5_ext:(x6893 : GLenum.t) ->
            fun ~compressed_srgb_s3tc_dxt1_ext:(x6894 : GLenum.t) ->
              fun () ->
                let x6895 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x6895
                  "COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT"
                  (GLenum.t_to_js x6891);
                Ojs.set_prop_ascii x6895
                  "COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT"
                  (GLenum.t_to_js x6892);
                Ojs.set_prop_ascii x6895
                  "COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT"
                  (GLenum.t_to_js x6893);
                Ojs.set_prop_ascii x6895 "COMPRESSED_SRGB_S3TC_DXT1_EXT"
                  (GLenum.t_to_js x6894);
                t_of_js x6895
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_s3tc =
  struct
    type t = [ `WEBGL_compressed_texture_s3tc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6897 : Ojs.t) -> t_of_js x6897
    and t_0_to_js : t_0 -> Ojs.t = fun (x6896 : t) -> t_to_js x6896
    type tags = [ `WEBGL_compressed_texture_s3tc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_s3tc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6900 : Ojs.t) -> intf_of_js __tags_of_js x6900
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6898 : __tags intf) -> intf_to_js __tags_to_js x6898
    let (get_COMPRESSED_RGBA_S3TC_DXT1_EXT : 'tags this -> GLenum.t) =
      fun (x6902 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6902)
             "COMPRESSED_RGBA_S3TC_DXT1_EXT")
    let (get_COMPRESSED_RGBA_S3TC_DXT3_EXT : 'tags this -> GLenum.t) =
      fun (x6904 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6904)
             "COMPRESSED_RGBA_S3TC_DXT3_EXT")
    let (get_COMPRESSED_RGBA_S3TC_DXT5_EXT : 'tags this -> GLenum.t) =
      fun (x6906 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6906)
             "COMPRESSED_RGBA_S3TC_DXT5_EXT")
    let (get_COMPRESSED_RGB_S3TC_DXT1_EXT : 'tags this -> GLenum.t) =
      fun (x6908 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6908)
             "COMPRESSED_RGB_S3TC_DXT1_EXT")
    let (create :
      compressed_rgba_s3tc_dxt1_ext:GLenum.t ->
        compressed_rgba_s3tc_dxt3_ext:GLenum.t ->
          compressed_rgba_s3tc_dxt5_ext:GLenum.t ->
            compressed_rgb_s3tc_dxt1_ext:GLenum.t -> unit -> t)
      =
      fun ~compressed_rgba_s3tc_dxt1_ext:(x6910 : GLenum.t) ->
        fun ~compressed_rgba_s3tc_dxt3_ext:(x6911 : GLenum.t) ->
          fun ~compressed_rgba_s3tc_dxt5_ext:(x6912 : GLenum.t) ->
            fun ~compressed_rgb_s3tc_dxt1_ext:(x6913 : GLenum.t) ->
              fun () ->
                let x6914 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x6914 "COMPRESSED_RGBA_S3TC_DXT1_EXT"
                  (GLenum.t_to_js x6910);
                Ojs.set_prop_ascii x6914 "COMPRESSED_RGBA_S3TC_DXT3_EXT"
                  (GLenum.t_to_js x6911);
                Ojs.set_prop_ascii x6914 "COMPRESSED_RGBA_S3TC_DXT5_EXT"
                  (GLenum.t_to_js x6912);
                Ojs.set_prop_ascii x6914 "COMPRESSED_RGB_S3TC_DXT1_EXT"
                  (GLenum.t_to_js x6913);
                t_of_js x6914
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_pvrtc =
  struct
    type t = [ `WEBGL_compressed_texture_pvrtc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6916 : Ojs.t) -> t_of_js x6916
    and t_0_to_js : t_0 -> Ojs.t = fun (x6915 : t) -> t_to_js x6915
    type tags = [ `WEBGL_compressed_texture_pvrtc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_pvrtc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6919 : Ojs.t) -> intf_of_js __tags_of_js x6919
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6917 : __tags intf) -> intf_to_js __tags_to_js x6917
    let (get_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG : 'tags this -> GLenum.t) =
      fun (x6921 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6921)
             "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG")
    let (get_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG : 'tags this -> GLenum.t) =
      fun (x6923 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6923)
             "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG")
    let (get_COMPRESSED_RGB_PVRTC_2BPPV1_IMG : 'tags this -> GLenum.t) =
      fun (x6925 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6925)
             "COMPRESSED_RGB_PVRTC_2BPPV1_IMG")
    let (get_COMPRESSED_RGB_PVRTC_4BPPV1_IMG : 'tags this -> GLenum.t) =
      fun (x6927 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6927)
             "COMPRESSED_RGB_PVRTC_4BPPV1_IMG")
    let (create :
      compressed_rgba_pvrtc_2bppv1_img:GLenum.t ->
        compressed_rgba_pvrtc_4bppv1_img:GLenum.t ->
          compressed_rgb_pvrtc_2bppv1_img:GLenum.t ->
            compressed_rgb_pvrtc_4bppv1_img:GLenum.t -> unit -> t)
      =
      fun ~compressed_rgba_pvrtc_2bppv1_img:(x6929 : GLenum.t) ->
        fun ~compressed_rgba_pvrtc_4bppv1_img:(x6930 : GLenum.t) ->
          fun ~compressed_rgb_pvrtc_2bppv1_img:(x6931 : GLenum.t) ->
            fun ~compressed_rgb_pvrtc_4bppv1_img:(x6932 : GLenum.t) ->
              fun () ->
                let x6933 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x6933 "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG"
                  (GLenum.t_to_js x6929);
                Ojs.set_prop_ascii x6933 "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG"
                  (GLenum.t_to_js x6930);
                Ojs.set_prop_ascii x6933 "COMPRESSED_RGB_PVRTC_2BPPV1_IMG"
                  (GLenum.t_to_js x6931);
                Ojs.set_prop_ascii x6933 "COMPRESSED_RGB_PVRTC_4BPPV1_IMG"
                  (GLenum.t_to_js x6932);
                t_of_js x6933
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_etc1 =
  struct
    type t = [ `WEBGL_compressed_texture_etc1 ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6935 : Ojs.t) -> t_of_js x6935
    and t_0_to_js : t_0 -> Ojs.t = fun (x6934 : t) -> t_to_js x6934
    type tags = [ `WEBGL_compressed_texture_etc1 ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_etc1 ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6938 : Ojs.t) -> intf_of_js __tags_of_js x6938
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6936 : __tags intf) -> intf_to_js __tags_to_js x6936
    let (get_COMPRESSED_RGB_ETC1_WEBGL : 'tags this -> GLenum.t) =
      fun (x6940 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6940)
             "COMPRESSED_RGB_ETC1_WEBGL")
    let (create : compressed_rgb_etc1_webgl:GLenum.t -> unit -> t) =
      fun ~compressed_rgb_etc1_webgl:(x6942 : GLenum.t) ->
        fun () ->
          let x6943 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x6943 "COMPRESSED_RGB_ETC1_WEBGL"
            (GLenum.t_to_js x6942);
          t_of_js x6943
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_etc =
  struct
    type t = [ `WEBGL_compressed_texture_etc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6945 : Ojs.t) -> t_of_js x6945
    and t_0_to_js : t_0 -> Ojs.t = fun (x6944 : t) -> t_to_js x6944
    type tags = [ `WEBGL_compressed_texture_etc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_etc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6948 : Ojs.t) -> intf_of_js __tags_of_js x6948
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6946 : __tags intf) -> intf_to_js __tags_to_js x6946
    let (get_COMPRESSED_R11_EAC : 'tags this -> GLenum.t) =
      fun (x6950 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6950)
             "COMPRESSED_R11_EAC")
    let (get_COMPRESSED_RG11_EAC : 'tags this -> GLenum.t) =
      fun (x6952 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6952)
             "COMPRESSED_RG11_EAC")
    let (get_COMPRESSED_RGB8_ETC2 : 'tags this -> GLenum.t) =
      fun (x6954 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6954)
             "COMPRESSED_RGB8_ETC2")
    let (get_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 :
      'tags this -> GLenum.t) =
      fun (x6956 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6956)
             "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2")
    let (get_COMPRESSED_RGBA8_ETC2_EAC : 'tags this -> GLenum.t) =
      fun (x6958 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6958)
             "COMPRESSED_RGBA8_ETC2_EAC")
    let (get_COMPRESSED_SIGNED_R11_EAC : 'tags this -> GLenum.t) =
      fun (x6960 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6960)
             "COMPRESSED_SIGNED_R11_EAC")
    let (get_COMPRESSED_SIGNED_RG11_EAC : 'tags this -> GLenum.t) =
      fun (x6962 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6962)
             "COMPRESSED_SIGNED_RG11_EAC")
    let (get_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : 'tags this -> GLenum.t) =
      fun (x6964 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6964)
             "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC")
    let (get_COMPRESSED_SRGB8_ETC2 : 'tags this -> GLenum.t) =
      fun (x6966 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6966)
             "COMPRESSED_SRGB8_ETC2")
    let (get_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 :
      'tags this -> GLenum.t) =
      fun (x6968 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6968)
             "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2")
    let (create :
      compressed_r11_eac:GLenum.t ->
        compressed_rg11_eac:GLenum.t ->
          compressed_rgb8_etc2:GLenum.t ->
            compressed_rgb8_punchthrough_alpha1_etc2:GLenum.t ->
              compressed_rgba8_etc2_eac:GLenum.t ->
                compressed_signed_r11_eac:GLenum.t ->
                  compressed_signed_rg11_eac:GLenum.t ->
                    compressed_srgb8_alpha8_etc2_eac:GLenum.t ->
                      compressed_srgb8_etc2:GLenum.t ->
                        compressed_srgb8_punchthrough_alpha1_etc2:GLenum.t ->
                          unit -> t)
      =
      fun ~compressed_r11_eac:(x6970 : GLenum.t) ->
        fun ~compressed_rg11_eac:(x6971 : GLenum.t) ->
          fun ~compressed_rgb8_etc2:(x6972 : GLenum.t) ->
            fun ~compressed_rgb8_punchthrough_alpha1_etc2:(x6973 : GLenum.t)
              ->
              fun ~compressed_rgba8_etc2_eac:(x6974 : GLenum.t) ->
                fun ~compressed_signed_r11_eac:(x6975 : GLenum.t) ->
                  fun ~compressed_signed_rg11_eac:(x6976 : GLenum.t) ->
                    fun ~compressed_srgb8_alpha8_etc2_eac:(x6977 : GLenum.t)
                      ->
                      fun ~compressed_srgb8_etc2:(x6978 : GLenum.t) ->
                        fun
                          ~compressed_srgb8_punchthrough_alpha1_etc2:
                          (x6979 : GLenum.t) ->
                          fun () ->
                            let x6980 = Ojs.empty_obj () in
                            Ojs.set_prop_ascii x6980 "COMPRESSED_R11_EAC"
                              (GLenum.t_to_js x6970);
                            Ojs.set_prop_ascii x6980 "COMPRESSED_RG11_EAC"
                              (GLenum.t_to_js x6971);
                            Ojs.set_prop_ascii x6980 "COMPRESSED_RGB8_ETC2"
                              (GLenum.t_to_js x6972);
                            Ojs.set_prop_ascii x6980
                              "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2"
                              (GLenum.t_to_js x6973);
                            Ojs.set_prop_ascii x6980
                              "COMPRESSED_RGBA8_ETC2_EAC"
                              (GLenum.t_to_js x6974);
                            Ojs.set_prop_ascii x6980
                              "COMPRESSED_SIGNED_R11_EAC"
                              (GLenum.t_to_js x6975);
                            Ojs.set_prop_ascii x6980
                              "COMPRESSED_SIGNED_RG11_EAC"
                              (GLenum.t_to_js x6976);
                            Ojs.set_prop_ascii x6980
                              "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC"
                              (GLenum.t_to_js x6977);
                            Ojs.set_prop_ascii x6980 "COMPRESSED_SRGB8_ETC2"
                              (GLenum.t_to_js x6978);
                            Ojs.set_prop_ascii x6980
                              "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2"
                              (GLenum.t_to_js x6979);
                            t_of_js x6980
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_astc =
  struct
    type t = [ `WEBGL_compressed_texture_astc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6982 : Ojs.t) -> t_of_js x6982
    and t_0_to_js : t_0 -> Ojs.t = fun (x6981 : t) -> t_to_js x6981
    type tags = [ `WEBGL_compressed_texture_astc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_astc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6985 : Ojs.t) -> intf_of_js __tags_of_js x6985
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6983 : __tags intf) -> intf_to_js __tags_to_js x6983
    let (getSupportedProfiles : 'tags this -> string list) =
      fun (x6987 : 'tags this) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x6987) "getSupportedProfiles" [||])
    let (get_COMPRESSED_RGBA_ASTC_10x10_KHR : 'tags this -> GLenum.t) =
      fun (x6990 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6990)
             "COMPRESSED_RGBA_ASTC_10x10_KHR")
    let (get_COMPRESSED_RGBA_ASTC_10x5_KHR : 'tags this -> GLenum.t) =
      fun (x6992 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6992)
             "COMPRESSED_RGBA_ASTC_10x5_KHR")
    let (get_COMPRESSED_RGBA_ASTC_10x6_KHR : 'tags this -> GLenum.t) =
      fun (x6994 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6994)
             "COMPRESSED_RGBA_ASTC_10x6_KHR")
    let (get_COMPRESSED_RGBA_ASTC_10x8_KHR : 'tags this -> GLenum.t) =
      fun (x6996 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6996)
             "COMPRESSED_RGBA_ASTC_10x8_KHR")
    let (get_COMPRESSED_RGBA_ASTC_12x10_KHR : 'tags this -> GLenum.t) =
      fun (x6998 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6998)
             "COMPRESSED_RGBA_ASTC_12x10_KHR")
    let (get_COMPRESSED_RGBA_ASTC_12x12_KHR : 'tags this -> GLenum.t) =
      fun (x7000 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7000)
             "COMPRESSED_RGBA_ASTC_12x12_KHR")
    let (get_COMPRESSED_RGBA_ASTC_4x4_KHR : 'tags this -> GLenum.t) =
      fun (x7002 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7002)
             "COMPRESSED_RGBA_ASTC_4x4_KHR")
    let (get_COMPRESSED_RGBA_ASTC_5x4_KHR : 'tags this -> GLenum.t) =
      fun (x7004 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7004)
             "COMPRESSED_RGBA_ASTC_5x4_KHR")
    let (get_COMPRESSED_RGBA_ASTC_5x5_KHR : 'tags this -> GLenum.t) =
      fun (x7006 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7006)
             "COMPRESSED_RGBA_ASTC_5x5_KHR")
    let (get_COMPRESSED_RGBA_ASTC_6x5_KHR : 'tags this -> GLenum.t) =
      fun (x7008 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7008)
             "COMPRESSED_RGBA_ASTC_6x5_KHR")
    let (get_COMPRESSED_RGBA_ASTC_6x6_KHR : 'tags this -> GLenum.t) =
      fun (x7010 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7010)
             "COMPRESSED_RGBA_ASTC_6x6_KHR")
    let (get_COMPRESSED_RGBA_ASTC_8x5_KHR : 'tags this -> GLenum.t) =
      fun (x7012 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7012)
             "COMPRESSED_RGBA_ASTC_8x5_KHR")
    let (get_COMPRESSED_RGBA_ASTC_8x6_KHR : 'tags this -> GLenum.t) =
      fun (x7014 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7014)
             "COMPRESSED_RGBA_ASTC_8x6_KHR")
    let (get_COMPRESSED_RGBA_ASTC_8x8_KHR : 'tags this -> GLenum.t) =
      fun (x7016 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7016)
             "COMPRESSED_RGBA_ASTC_8x8_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : 'tags this -> GLenum.t)
      =
      fun (x7018 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7018)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : 'tags this -> GLenum.t)
      =
      fun (x7020 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7020)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : 'tags this -> GLenum.t)
      =
      fun (x7022 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7022)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : 'tags this -> GLenum.t)
      =
      fun (x7024 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7024)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : 'tags this -> GLenum.t)
      =
      fun (x7026 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7026)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : 'tags this -> GLenum.t)
      =
      fun (x7028 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7028)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : 'tags this -> GLenum.t) =
      fun (x7030 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7030)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : 'tags this -> GLenum.t) =
      fun (x7032 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7032)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : 'tags this -> GLenum.t) =
      fun (x7034 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7034)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : 'tags this -> GLenum.t) =
      fun (x7036 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7036)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : 'tags this -> GLenum.t) =
      fun (x7038 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7038)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : 'tags this -> GLenum.t) =
      fun (x7040 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7040)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : 'tags this -> GLenum.t) =
      fun (x7042 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7042)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : 'tags this -> GLenum.t) =
      fun (x7044 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7044)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR")
    let cast_from = Obj.magic
  end
module WEBGL_color_buffer_float =
  struct
    type t = [ `WEBGL_color_buffer_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7047 : Ojs.t) -> t_of_js x7047
    and t_0_to_js : t_0 -> Ojs.t = fun (x7046 : t) -> t_to_js x7046
    type tags = [ `WEBGL_color_buffer_float ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_color_buffer_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7050 : Ojs.t) -> intf_of_js __tags_of_js x7050
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7048 : __tags intf) -> intf_to_js __tags_to_js x7048
    let (get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT :
      'tags this -> GLenum.t) =
      fun (x7052 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7052)
             "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT")
    let (get_RGBA32F_EXT : 'tags this -> GLenum.t) =
      fun (x7054 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7054) "RGBA32F_EXT")
    let (get_UNSIGNED_NORMALIZED_EXT : 'tags this -> GLenum.t) =
      fun (x7056 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7056)
             "UNSIGNED_NORMALIZED_EXT")
    let (create :
      framebuffer_attachment_component_type_ext:GLenum.t ->
        rgba32f_ext:GLenum.t -> unsigned_normalized_ext:GLenum.t -> unit -> t)
      =
      fun ~framebuffer_attachment_component_type_ext:(x7058 : GLenum.t) ->
        fun ~rgba32f_ext:(x7059 : GLenum.t) ->
          fun ~unsigned_normalized_ext:(x7060 : GLenum.t) ->
            fun () ->
              let x7061 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x7061
                "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT"
                (GLenum.t_to_js x7058);
              Ojs.set_prop_ascii x7061 "RGBA32F_EXT" (GLenum.t_to_js x7059);
              Ojs.set_prop_ascii x7061 "UNSIGNED_NORMALIZED_EXT"
                (GLenum.t_to_js x7060);
              t_of_js x7061
    let cast_from = Obj.magic
  end
module WebGLTexture =
  struct
    type t = [ `WebGLTexture ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7063 : Ojs.t) -> t_of_js x7063
    and t_0_to_js : t_0 -> Ojs.t = fun (x7062 : t) -> t_to_js x7062
    type tags = [ `WebGLTexture ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLTexture ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7066 : Ojs.t) -> intf_of_js __tags_of_js x7066
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7064 : __tags intf) -> intf_to_js __tags_to_js x7064
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLTexture")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLTexture") [||])
  end
module OVR_multiview2 =
  struct
    type t = [ `OVR_multiview2 ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7069 : Ojs.t) -> t_of_js x7069
    and t_0_to_js : t_0 -> Ojs.t = fun (x7068 : t) -> t_to_js x7068
    type tags = [ `OVR_multiview2 ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `OVR_multiview2 ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7072 : Ojs.t) -> intf_of_js __tags_of_js x7072
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7070 : __tags intf) -> intf_to_js __tags_to_js x7070
    let (framebufferTextureMultiviewOVR :
      'tags this ->
        target:GLenum.t ->
          attachment:GLenum.t ->
            texture:WebGLTexture.t option ->
              level:GLint.t ->
                baseViewIndex:GLint.t -> numViews:GLsizei.t -> unit)
      =
      fun (x7081 : 'tags this) ->
        fun ~target:(x7074 : GLenum.t) ->
          fun ~attachment:(x7075 : GLenum.t) ->
            fun ~texture:(x7076 : WebGLTexture.t option) ->
              fun ~level:(x7078 : GLint.t) ->
                fun ~baseViewIndex:(x7079 : GLint.t) ->
                  fun ~numViews:(x7080 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x7081)
                         "framebufferTextureMultiviewOVR"
                         [|(GLenum.t_to_js x7074);(GLenum.t_to_js x7075);(
                           Ojs.option_to_js WebGLTexture.t_to_js x7076);(
                           GLint.t_to_js x7078);(GLint.t_to_js x7079);(
                           GLsizei.t_to_js x7080)|])
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR :
      'tags this -> GLenum.t) =
      fun (x7083 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7083)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR :
      'tags this -> GLenum.t) =
      fun (x7085 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7085)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR")
    let (get_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR :
      'tags this -> GLenum.t) =
      fun (x7087 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7087)
             "FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR")
    let (get_MAX_VIEWS_OVR : 'tags this -> GLenum.t) =
      fun (x7089 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7089) "MAX_VIEWS_OVR")
    let cast_from = Obj.magic
  end
module WebGLVertexArrayObjectOES =
  struct
    type t = [ `WebGLVertexArrayObjectOES ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7092 : Ojs.t) -> t_of_js x7092
    and t_0_to_js : t_0 -> Ojs.t = fun (x7091 : t) -> t_to_js x7091
    type tags = [ `WebGLVertexArrayObjectOES ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLVertexArrayObjectOES ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7095 : Ojs.t) -> intf_of_js __tags_of_js x7095
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7093 : __tags intf) -> intf_to_js __tags_to_js x7093
    let cast_from = Obj.magic
  end
module OES_vertex_array_object =
  struct
    type t = [ `OES_vertex_array_object ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7098 : Ojs.t) -> t_of_js x7098
    and t_0_to_js : t_0 -> Ojs.t = fun (x7097 : t) -> t_to_js x7097
    type tags = [ `OES_vertex_array_object ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_vertex_array_object ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7101 : Ojs.t) -> intf_of_js __tags_of_js x7101
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7099 : __tags intf) -> intf_to_js __tags_to_js x7099
    let (bindVertexArrayOES :
      'tags this -> arrayObject:WebGLVertexArrayObjectOES.t option -> unit) =
      fun (x7105 : 'tags this) ->
        fun ~arrayObject:(x7103 : WebGLVertexArrayObjectOES.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7105) "bindVertexArrayOES"
               [|(Ojs.option_to_js WebGLVertexArrayObjectOES.t_to_js x7103)|])
    let (createVertexArrayOES :
      'tags this -> WebGLVertexArrayObjectOES.t option) =
      fun (x7107 : 'tags this) ->
        Ojs.option_of_js WebGLVertexArrayObjectOES.t_of_js
          (Ojs.call (this_to_js Obj.magic x7107) "createVertexArrayOES" [||])
    let (deleteVertexArrayOES :
      'tags this -> arrayObject:WebGLVertexArrayObjectOES.t option -> unit) =
      fun (x7112 : 'tags this) ->
        fun ~arrayObject:(x7110 : WebGLVertexArrayObjectOES.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7112) "deleteVertexArrayOES"
               [|(Ojs.option_to_js WebGLVertexArrayObjectOES.t_to_js x7110)|])
    let (isVertexArrayOES :
      'tags this ->
        arrayObject:WebGLVertexArrayObjectOES.t option -> GLboolean.t)
      =
      fun (x7116 : 'tags this) ->
        fun ~arrayObject:(x7114 : WebGLVertexArrayObjectOES.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x7116) "isVertexArrayOES"
               [|(Ojs.option_to_js WebGLVertexArrayObjectOES.t_to_js x7114)|])
    let (get_VERTEX_ARRAY_BINDING_OES : 'tags this -> GLenum.t) =
      fun (x7118 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7118)
             "VERTEX_ARRAY_BINDING_OES")
    let cast_from = Obj.magic
  end
module OES_texture_half_float_linear =
  struct
    type t = [ `OES_texture_half_float_linear ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7121 : Ojs.t) -> t_of_js x7121
    and t_0_to_js : t_0 -> Ojs.t = fun (x7120 : t) -> t_to_js x7120
    type tags = [ `OES_texture_half_float_linear ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_texture_half_float_linear ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7124 : Ojs.t) -> intf_of_js __tags_of_js x7124
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7122 : __tags intf) -> intf_to_js __tags_to_js x7122
    let cast_from = Obj.magic
  end
module OES_texture_half_float =
  struct
    type t = [ `OES_texture_half_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7127 : Ojs.t) -> t_of_js x7127
    and t_0_to_js : t_0 -> Ojs.t = fun (x7126 : t) -> t_to_js x7126
    type tags = [ `OES_texture_half_float ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_texture_half_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7130 : Ojs.t) -> intf_of_js __tags_of_js x7130
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7128 : __tags intf) -> intf_to_js __tags_to_js x7128
    let (get_HALF_FLOAT_OES : 'tags this -> GLenum.t) =
      fun (x7132 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7132) "HALF_FLOAT_OES")
    let (create : half_float_oes:GLenum.t -> unit -> t) =
      fun ~half_float_oes:(x7134 : GLenum.t) ->
        fun () ->
          let x7135 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x7135 "HALF_FLOAT_OES" (GLenum.t_to_js x7134);
          t_of_js x7135
    let cast_from = Obj.magic
  end
module OES_texture_float_linear =
  struct
    type t = [ `OES_texture_float_linear ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7137 : Ojs.t) -> t_of_js x7137
    and t_0_to_js : t_0 -> Ojs.t = fun (x7136 : t) -> t_to_js x7136
    type tags = [ `OES_texture_float_linear ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_texture_float_linear ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7140 : Ojs.t) -> intf_of_js __tags_of_js x7140
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7138 : __tags intf) -> intf_to_js __tags_to_js x7138
    let cast_from = Obj.magic
  end
module OES_texture_float =
  struct
    type t = [ `OES_texture_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7143 : Ojs.t) -> t_of_js x7143
    and t_0_to_js : t_0 -> Ojs.t = fun (x7142 : t) -> t_to_js x7142
    type tags = [ `OES_texture_float ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `OES_texture_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7146 : Ojs.t) -> intf_of_js __tags_of_js x7146
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7144 : __tags intf) -> intf_to_js __tags_to_js x7144
    let cast_from = Obj.magic
  end
module OES_standard_derivatives =
  struct
    type t = [ `OES_standard_derivatives ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7149 : Ojs.t) -> t_of_js x7149
    and t_0_to_js : t_0 -> Ojs.t = fun (x7148 : t) -> t_to_js x7148
    type tags = [ `OES_standard_derivatives ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_standard_derivatives ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7152 : Ojs.t) -> intf_of_js __tags_of_js x7152
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7150 : __tags intf) -> intf_to_js __tags_to_js x7150
    let (get_FRAGMENT_SHADER_DERIVATIVE_HINT_OES : 'tags this -> GLenum.t) =
      fun (x7154 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7154)
             "FRAGMENT_SHADER_DERIVATIVE_HINT_OES")
    let (create : fragment_shader_derivative_hint_oes:GLenum.t -> unit -> t)
      =
      fun ~fragment_shader_derivative_hint_oes:(x7156 : GLenum.t) ->
        fun () ->
          let x7157 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x7157 "FRAGMENT_SHADER_DERIVATIVE_HINT_OES"
            (GLenum.t_to_js x7156);
          t_of_js x7157
    let cast_from = Obj.magic
  end
module OES_element_index_uint =
  struct
    type t = [ `OES_element_index_uint ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7159 : Ojs.t) -> t_of_js x7159
    and t_0_to_js : t_0 -> Ojs.t = fun (x7158 : t) -> t_to_js x7158
    type tags = [ `OES_element_index_uint ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_element_index_uint ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7162 : Ojs.t) -> intf_of_js __tags_of_js x7162
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7160 : __tags intf) -> intf_to_js __tags_to_js x7160
    let cast_from = Obj.magic
  end
module KHR_parallel_shader_compile =
  struct
    type t = [ `KHR_parallel_shader_compile ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7165 : Ojs.t) -> t_of_js x7165
    and t_0_to_js : t_0 -> Ojs.t = fun (x7164 : t) -> t_to_js x7164
    type tags = [ `KHR_parallel_shader_compile ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `KHR_parallel_shader_compile ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7168 : Ojs.t) -> intf_of_js __tags_of_js x7168
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7166 : __tags intf) -> intf_to_js __tags_to_js x7166
    let (get_COMPLETION_STATUS_KHR : 'tags this -> GLenum.t) =
      fun (x7170 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7170)
             "COMPLETION_STATUS_KHR")
    let (create : completion_status_khr:GLenum.t -> unit -> t) =
      fun ~completion_status_khr:(x7172 : GLenum.t) ->
        fun () ->
          let x7173 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x7173 "COMPLETION_STATUS_KHR"
            (GLenum.t_to_js x7172);
          t_of_js x7173
    let cast_from = Obj.magic
  end
module GLclampf =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x7175 : Ojs.t) -> Ojs.float_of_js x7175
    and t_to_js : t -> Ojs.t = fun (x7174 : float) -> Ojs.float_to_js x7174
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7177 : Ojs.t) -> t_of_js x7177
    and t_0_to_js : t_0 -> Ojs.t = fun (x7176 : t) -> t_to_js x7176
  end
module GLbitfield =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x7179 : Ojs.t) -> Ojs.float_of_js x7179
    and t_to_js : t -> Ojs.t = fun (x7178 : float) -> Ojs.float_to_js x7178
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7181 : Ojs.t) -> t_of_js x7181
    and t_0_to_js : t_0 -> Ojs.t = fun (x7180 : t) -> t_to_js x7180
  end
module EXT_texture_filter_anisotropic =
  struct
    type t = [ `EXT_texture_filter_anisotropic ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7183 : Ojs.t) -> t_of_js x7183
    and t_0_to_js : t_0 -> Ojs.t = fun (x7182 : t) -> t_to_js x7182
    type tags = [ `EXT_texture_filter_anisotropic ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_texture_filter_anisotropic ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7186 : Ojs.t) -> intf_of_js __tags_of_js x7186
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7184 : __tags intf) -> intf_to_js __tags_to_js x7184
    let (get_MAX_TEXTURE_MAX_ANISOTROPY_EXT : 'tags this -> GLenum.t) =
      fun (x7188 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7188)
             "MAX_TEXTURE_MAX_ANISOTROPY_EXT")
    let (get_TEXTURE_MAX_ANISOTROPY_EXT : 'tags this -> GLenum.t) =
      fun (x7190 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7190)
             "TEXTURE_MAX_ANISOTROPY_EXT")
    let (create :
      max_texture_max_anisotropy_ext:GLenum.t ->
        texture_max_anisotropy_ext:GLenum.t -> unit -> t)
      =
      fun ~max_texture_max_anisotropy_ext:(x7192 : GLenum.t) ->
        fun ~texture_max_anisotropy_ext:(x7193 : GLenum.t) ->
          fun () ->
            let x7194 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x7194 "MAX_TEXTURE_MAX_ANISOTROPY_EXT"
              (GLenum.t_to_js x7192);
            Ojs.set_prop_ascii x7194 "TEXTURE_MAX_ANISOTROPY_EXT"
              (GLenum.t_to_js x7193);
            t_of_js x7194
    let cast_from = Obj.magic
  end
module EXT_shader_texture_lod =
  struct
    type t = [ `EXT_shader_texture_lod ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7196 : Ojs.t) -> t_of_js x7196
    and t_0_to_js : t_0 -> Ojs.t = fun (x7195 : t) -> t_to_js x7195
    type tags = [ `EXT_shader_texture_lod ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_shader_texture_lod ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7199 : Ojs.t) -> intf_of_js __tags_of_js x7199
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7197 : __tags intf) -> intf_to_js __tags_to_js x7197
    let cast_from = Obj.magic
  end
module EXT_sRGB =
  struct
    type t = [ `EXT_sRGB ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7202 : Ojs.t) -> t_of_js x7202
    and t_0_to_js : t_0 -> Ojs.t = fun (x7201 : t) -> t_to_js x7201
    type tags = [ `EXT_sRGB ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EXT_sRGB ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7205 : Ojs.t) -> intf_of_js __tags_of_js x7205
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7203 : __tags intf) -> intf_to_js __tags_to_js x7203
    let (get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT :
      'tags this -> GLenum.t) =
      fun (x7207 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7207)
             "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT")
    let (get_SRGB8_ALPHA8_EXT : 'tags this -> GLenum.t) =
      fun (x7209 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7209) "SRGB8_ALPHA8_EXT")
    let (get_SRGB_ALPHA_EXT : 'tags this -> GLenum.t) =
      fun (x7211 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7211) "SRGB_ALPHA_EXT")
    let (get_SRGB_EXT : 'tags this -> GLenum.t) =
      fun (x7213 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7213) "SRGB_EXT")
    let (create :
      framebuffer_attachment_color_encoding_ext:GLenum.t ->
        srgb8_alpha8_ext:GLenum.t ->
          srgb_alpha_ext:GLenum.t -> srgb_ext:GLenum.t -> unit -> t)
      =
      fun ~framebuffer_attachment_color_encoding_ext:(x7215 : GLenum.t) ->
        fun ~srgb8_alpha8_ext:(x7216 : GLenum.t) ->
          fun ~srgb_alpha_ext:(x7217 : GLenum.t) ->
            fun ~srgb_ext:(x7218 : GLenum.t) ->
              fun () ->
                let x7219 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x7219
                  "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT"
                  (GLenum.t_to_js x7215);
                Ojs.set_prop_ascii x7219 "SRGB8_ALPHA8_EXT"
                  (GLenum.t_to_js x7216);
                Ojs.set_prop_ascii x7219 "SRGB_ALPHA_EXT"
                  (GLenum.t_to_js x7217);
                Ojs.set_prop_ascii x7219 "SRGB_EXT" (GLenum.t_to_js x7218);
                t_of_js x7219
    let cast_from = Obj.magic
  end
module EXT_frag_depth =
  struct
    type t = [ `EXT_frag_depth ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7221 : Ojs.t) -> t_of_js x7221
    and t_0_to_js : t_0 -> Ojs.t = fun (x7220 : t) -> t_to_js x7220
    type tags = [ `EXT_frag_depth ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EXT_frag_depth ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7224 : Ojs.t) -> intf_of_js __tags_of_js x7224
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7222 : __tags intf) -> intf_to_js __tags_to_js x7222
    let cast_from = Obj.magic
  end
module EXT_float_blend =
  struct
    type t = [ `EXT_float_blend ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7227 : Ojs.t) -> t_of_js x7227
    and t_0_to_js : t_0 -> Ojs.t = fun (x7226 : t) -> t_to_js x7226
    type tags = [ `EXT_float_blend ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EXT_float_blend ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7230 : Ojs.t) -> intf_of_js __tags_of_js x7230
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7228 : __tags intf) -> intf_to_js __tags_to_js x7228
    let cast_from = Obj.magic
  end
module EXT_color_buffer_half_float =
  struct
    type t = [ `EXT_color_buffer_half_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7233 : Ojs.t) -> t_of_js x7233
    and t_0_to_js : t_0 -> Ojs.t = fun (x7232 : t) -> t_to_js x7232
    type tags = [ `EXT_color_buffer_half_float ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_color_buffer_half_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7236 : Ojs.t) -> intf_of_js __tags_of_js x7236
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7234 : __tags intf) -> intf_to_js __tags_to_js x7234
    let (get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT :
      'tags this -> GLenum.t) =
      fun (x7238 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7238)
             "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT")
    let (get_RGB16F_EXT : 'tags this -> GLenum.t) =
      fun (x7240 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7240) "RGB16F_EXT")
    let (get_RGBA16F_EXT : 'tags this -> GLenum.t) =
      fun (x7242 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7242) "RGBA16F_EXT")
    let (get_UNSIGNED_NORMALIZED_EXT : 'tags this -> GLenum.t) =
      fun (x7244 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7244)
             "UNSIGNED_NORMALIZED_EXT")
    let (create :
      framebuffer_attachment_component_type_ext:GLenum.t ->
        rgb16f_ext:GLenum.t ->
          rgba16f_ext:GLenum.t ->
            unsigned_normalized_ext:GLenum.t -> unit -> t)
      =
      fun ~framebuffer_attachment_component_type_ext:(x7246 : GLenum.t) ->
        fun ~rgb16f_ext:(x7247 : GLenum.t) ->
          fun ~rgba16f_ext:(x7248 : GLenum.t) ->
            fun ~unsigned_normalized_ext:(x7249 : GLenum.t) ->
              fun () ->
                let x7250 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x7250
                  "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT"
                  (GLenum.t_to_js x7246);
                Ojs.set_prop_ascii x7250 "RGB16F_EXT" (GLenum.t_to_js x7247);
                Ojs.set_prop_ascii x7250 "RGBA16F_EXT" (GLenum.t_to_js x7248);
                Ojs.set_prop_ascii x7250 "UNSIGNED_NORMALIZED_EXT"
                  (GLenum.t_to_js x7249);
                t_of_js x7250
    let cast_from = Obj.magic
  end
module EXT_color_buffer_float =
  struct
    type t = [ `EXT_color_buffer_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7252 : Ojs.t) -> t_of_js x7252
    and t_0_to_js : t_0 -> Ojs.t = fun (x7251 : t) -> t_to_js x7251
    type tags = [ `EXT_color_buffer_float ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_color_buffer_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7255 : Ojs.t) -> intf_of_js __tags_of_js x7255
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7253 : __tags intf) -> intf_to_js __tags_to_js x7253
    let cast_from = Obj.magic
  end
module EXT_blend_minmax =
  struct
    type t = [ `EXT_blend_minmax ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7258 : Ojs.t) -> t_of_js x7258
    and t_0_to_js : t_0 -> Ojs.t = fun (x7257 : t) -> t_to_js x7257
    type tags = [ `EXT_blend_minmax ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EXT_blend_minmax ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7261 : Ojs.t) -> intf_of_js __tags_of_js x7261
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7259 : __tags intf) -> intf_to_js __tags_to_js x7259
    let (get_MAX_EXT : 'tags this -> GLenum.t) =
      fun (x7263 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7263) "MAX_EXT")
    let (get_MIN_EXT : 'tags this -> GLenum.t) =
      fun (x7265 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7265) "MIN_EXT")
    let (create : max_ext:GLenum.t -> min_ext:GLenum.t -> unit -> t) =
      fun ~max_ext:(x7267 : GLenum.t) ->
        fun ~min_ext:(x7268 : GLenum.t) ->
          fun () ->
            let x7269 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x7269 "MAX_EXT" (GLenum.t_to_js x7267);
            Ojs.set_prop_ascii x7269 "MIN_EXT" (GLenum.t_to_js x7268);
            t_of_js x7269
    let cast_from = Obj.magic
  end
module GLuint =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x7271 : Ojs.t) -> Ojs.float_of_js x7271
    and t_to_js : t -> Ojs.t = fun (x7270 : float) -> Ojs.float_to_js x7270
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7273 : Ojs.t) -> t_of_js x7273
    and t_0_to_js : t_0 -> Ojs.t = fun (x7272 : t) -> t_to_js x7272
  end
module ANGLE_instanced_arrays =
  struct
    type t = [ `ANGLE_instanced_arrays ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7275 : Ojs.t) -> t_of_js x7275
    and t_0_to_js : t_0 -> Ojs.t = fun (x7274 : t) -> t_to_js x7274
    type tags = [ `ANGLE_instanced_arrays ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ANGLE_instanced_arrays ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7278 : Ojs.t) -> intf_of_js __tags_of_js x7278
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7276 : __tags intf) -> intf_to_js __tags_to_js x7276
    let (drawArraysInstancedANGLE :
      'tags this ->
        mode:GLenum.t ->
          first:GLint.t -> count:GLsizei.t -> primcount:GLsizei.t -> unit)
      =
      fun (x7284 : 'tags this) ->
        fun ~mode:(x7280 : GLenum.t) ->
          fun ~first:(x7281 : GLint.t) ->
            fun ~count:(x7282 : GLsizei.t) ->
              fun ~primcount:(x7283 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7284)
                     "drawArraysInstancedANGLE"
                     [|(GLenum.t_to_js x7280);(GLint.t_to_js x7281);(
                       GLsizei.t_to_js x7282);(GLsizei.t_to_js x7283)|])
    let (drawElementsInstancedANGLE :
      'tags this ->
        mode:GLenum.t ->
          count:GLsizei.t ->
            type_:GLenum.t ->
              offset:GLintptr.t -> primcount:GLsizei.t -> unit)
      =
      fun (x7291 : 'tags this) ->
        fun ~mode:(x7286 : GLenum.t) ->
          fun ~count:(x7287 : GLsizei.t) ->
            fun ~type_:(x7288 : GLenum.t) ->
              fun ~offset:(x7289 : GLintptr.t) ->
                fun ~primcount:(x7290 : GLsizei.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x7291)
                       "drawElementsInstancedANGLE"
                       [|(GLenum.t_to_js x7286);(GLsizei.t_to_js x7287);(
                         GLenum.t_to_js x7288);(GLintptr.t_to_js x7289);(
                         GLsizei.t_to_js x7290)|])
    let (vertexAttribDivisorANGLE :
      'tags this -> index:GLuint.t -> divisor:GLuint.t -> unit) =
      fun (x7295 : 'tags this) ->
        fun ~index:(x7293 : GLuint.t) ->
          fun ~divisor:(x7294 : GLuint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7295)
                 "vertexAttribDivisorANGLE"
                 [|(GLuint.t_to_js x7293);(GLuint.t_to_js x7294)|])
    let (get_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE : 'tags this -> GLenum.t) =
      fun (x7297 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7297)
             "VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE")
    let cast_from = Obj.magic
  end
module WebGLRenderingContextBase =
  struct
    type t = [ `WebGLRenderingContextBase ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7300 : Ojs.t) -> t_of_js x7300
    and t_0_to_js : t_0 -> Ojs.t = fun (x7299 : t) -> t_to_js x7299
    type tags = [ `WebGLRenderingContextBase ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLRenderingContextBase ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7303 : Ojs.t) -> intf_of_js __tags_of_js x7303
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7301 : __tags intf) -> intf_to_js __tags_to_js x7301
    let (get_drawingBufferHeight : 'tags this -> GLsizei.t) =
      fun (x7305 : 'tags this) ->
        GLsizei.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7305)
             "drawingBufferHeight")
    let (get_drawingBufferWidth : 'tags this -> GLsizei.t) =
      fun (x7307 : 'tags this) ->
        GLsizei.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7307)
             "drawingBufferWidth")
    let (activeTexture : 'tags this -> texture:GLenum.t -> unit) =
      fun (x7310 : 'tags this) ->
        fun ~texture:(x7309 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7310) "activeTexture"
               [|(GLenum.t_to_js x7309)|])
    let (attachShader :
      'tags this -> program:WebGLProgram.t -> shader:WebGLShader.t -> unit) =
      fun (x7314 : 'tags this) ->
        fun ~program:(x7312 : WebGLProgram.t) ->
          fun ~shader:(x7313 : WebGLShader.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7314) "attachShader"
                 [|(WebGLProgram.t_to_js x7312);(WebGLShader.t_to_js x7313)|])
    let (bindAttribLocation :
      'tags this ->
        program:WebGLProgram.t -> index:GLuint.t -> name:string -> unit)
      =
      fun (x7319 : 'tags this) ->
        fun ~program:(x7316 : WebGLProgram.t) ->
          fun ~index:(x7317 : GLuint.t) ->
            fun ~name:(x7318 : string) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7319) "bindAttribLocation"
                   [|(WebGLProgram.t_to_js x7316);(GLuint.t_to_js x7317);(
                     Ojs.string_to_js x7318)|])
    let (bindBuffer :
      'tags this -> target:GLenum.t -> buffer:WebGLBuffer.t option -> unit) =
      fun (x7324 : 'tags this) ->
        fun ~target:(x7321 : GLenum.t) ->
          fun ~buffer:(x7322 : WebGLBuffer.t option) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7324) "bindBuffer"
                 [|(GLenum.t_to_js x7321);(Ojs.option_to_js
                                             WebGLBuffer.t_to_js x7322)|])
    let (bindFramebuffer :
      'tags this ->
        target:GLenum.t -> framebuffer:WebGLFramebuffer.t option -> unit)
      =
      fun (x7329 : 'tags this) ->
        fun ~target:(x7326 : GLenum.t) ->
          fun ~framebuffer:(x7327 : WebGLFramebuffer.t option) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7329) "bindFramebuffer"
                 [|(GLenum.t_to_js x7326);(Ojs.option_to_js
                                             WebGLFramebuffer.t_to_js x7327)|])
    let (bindRenderbuffer :
      'tags this ->
        target:GLenum.t -> renderbuffer:WebGLRenderbuffer.t option -> unit)
      =
      fun (x7334 : 'tags this) ->
        fun ~target:(x7331 : GLenum.t) ->
          fun ~renderbuffer:(x7332 : WebGLRenderbuffer.t option) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7334) "bindRenderbuffer"
                 [|(GLenum.t_to_js x7331);(Ojs.option_to_js
                                             WebGLRenderbuffer.t_to_js x7332)|])
    let (bindTexture :
      'tags this -> target:GLenum.t -> texture:WebGLTexture.t option -> unit)
      =
      fun (x7339 : 'tags this) ->
        fun ~target:(x7336 : GLenum.t) ->
          fun ~texture:(x7337 : WebGLTexture.t option) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7339) "bindTexture"
                 [|(GLenum.t_to_js x7336);(Ojs.option_to_js
                                             WebGLTexture.t_to_js x7337)|])
    let (blendColor :
      'tags this ->
        red:GLclampf.t ->
          green:GLclampf.t -> blue:GLclampf.t -> alpha:GLclampf.t -> unit)
      =
      fun (x7345 : 'tags this) ->
        fun ~red:(x7341 : GLclampf.t) ->
          fun ~green:(x7342 : GLclampf.t) ->
            fun ~blue:(x7343 : GLclampf.t) ->
              fun ~alpha:(x7344 : GLclampf.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7345) "blendColor"
                     [|(GLclampf.t_to_js x7341);(GLclampf.t_to_js x7342);(
                       GLclampf.t_to_js x7343);(GLclampf.t_to_js x7344)|])
    let (blendEquation : 'tags this -> mode:GLenum.t -> unit) =
      fun (x7348 : 'tags this) ->
        fun ~mode:(x7347 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7348) "blendEquation"
               [|(GLenum.t_to_js x7347)|])
    let (blendEquationSeparate :
      'tags this -> modeRGB:GLenum.t -> modeAlpha:GLenum.t -> unit) =
      fun (x7352 : 'tags this) ->
        fun ~modeRGB:(x7350 : GLenum.t) ->
          fun ~modeAlpha:(x7351 : GLenum.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7352) "blendEquationSeparate"
                 [|(GLenum.t_to_js x7350);(GLenum.t_to_js x7351)|])
    let (blendFunc :
      'tags this -> sfactor:GLenum.t -> dfactor:GLenum.t -> unit) =
      fun (x7356 : 'tags this) ->
        fun ~sfactor:(x7354 : GLenum.t) ->
          fun ~dfactor:(x7355 : GLenum.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7356) "blendFunc"
                 [|(GLenum.t_to_js x7354);(GLenum.t_to_js x7355)|])
    let (blendFuncSeparate :
      'tags this ->
        srcRGB:GLenum.t ->
          dstRGB:GLenum.t -> srcAlpha:GLenum.t -> dstAlpha:GLenum.t -> unit)
      =
      fun (x7362 : 'tags this) ->
        fun ~srcRGB:(x7358 : GLenum.t) ->
          fun ~dstRGB:(x7359 : GLenum.t) ->
            fun ~srcAlpha:(x7360 : GLenum.t) ->
              fun ~dstAlpha:(x7361 : GLenum.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7362) "blendFuncSeparate"
                     [|(GLenum.t_to_js x7358);(GLenum.t_to_js x7359);(
                       GLenum.t_to_js x7360);(GLenum.t_to_js x7361)|])
    let (checkFramebufferStatus : 'tags this -> target:GLenum.t -> GLenum.t)
      =
      fun (x7365 : 'tags this) ->
        fun ~target:(x7364 : GLenum.t) ->
          GLenum.t_of_js
            (Ojs.call (this_to_js Obj.magic x7365) "checkFramebufferStatus"
               [|(GLenum.t_to_js x7364)|])
    let (clear : 'tags this -> mask:GLbitfield.t -> unit) =
      fun (x7368 : 'tags this) ->
        fun ~mask:(x7367 : GLbitfield.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7368) "clear"
               [|(GLbitfield.t_to_js x7367)|])
    let (clearColor :
      'tags this ->
        red:GLclampf.t ->
          green:GLclampf.t -> blue:GLclampf.t -> alpha:GLclampf.t -> unit)
      =
      fun (x7374 : 'tags this) ->
        fun ~red:(x7370 : GLclampf.t) ->
          fun ~green:(x7371 : GLclampf.t) ->
            fun ~blue:(x7372 : GLclampf.t) ->
              fun ~alpha:(x7373 : GLclampf.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7374) "clearColor"
                     [|(GLclampf.t_to_js x7370);(GLclampf.t_to_js x7371);(
                       GLclampf.t_to_js x7372);(GLclampf.t_to_js x7373)|])
    let (clearDepth : 'tags this -> depth:GLclampf.t -> unit) =
      fun (x7377 : 'tags this) ->
        fun ~depth:(x7376 : GLclampf.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7377) "clearDepth"
               [|(GLclampf.t_to_js x7376)|])
    let (clearStencil : 'tags this -> s:GLint.t -> unit) =
      fun (x7380 : 'tags this) ->
        fun ~s:(x7379 : GLint.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7380) "clearStencil"
               [|(GLint.t_to_js x7379)|])
    let (colorMask :
      'tags this ->
        red:GLboolean.t ->
          green:GLboolean.t -> blue:GLboolean.t -> alpha:GLboolean.t -> unit)
      =
      fun (x7386 : 'tags this) ->
        fun ~red:(x7382 : GLboolean.t) ->
          fun ~green:(x7383 : GLboolean.t) ->
            fun ~blue:(x7384 : GLboolean.t) ->
              fun ~alpha:(x7385 : GLboolean.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7386) "colorMask"
                     [|(GLboolean.t_to_js x7382);(GLboolean.t_to_js x7383);(
                       GLboolean.t_to_js x7384);(GLboolean.t_to_js x7385)|])
    let (compileShader : 'tags this -> shader:WebGLShader.t -> unit) =
      fun (x7389 : 'tags this) ->
        fun ~shader:(x7388 : WebGLShader.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7389) "compileShader"
               [|(WebGLShader.t_to_js x7388)|])
    let (copyTexImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              x:GLint.t ->
                y:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t -> border:GLint.t -> unit)
      =
      fun (x7399 : 'tags this) ->
        fun ~target:(x7391 : GLenum.t) ->
          fun ~level:(x7392 : GLint.t) ->
            fun ~internalformat:(x7393 : GLenum.t) ->
              fun ~x:(x7394 : GLint.t) ->
                fun ~y:(x7395 : GLint.t) ->
                  fun ~width:(x7396 : GLsizei.t) ->
                    fun ~height:(x7397 : GLsizei.t) ->
                      fun ~border:(x7398 : GLint.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x7399)
                             "copyTexImage2D"
                             [|(GLenum.t_to_js x7391);(GLint.t_to_js x7392);(
                               GLenum.t_to_js x7393);(GLint.t_to_js x7394);(
                               GLint.t_to_js x7395);(GLsizei.t_to_js x7396);(
                               GLsizei.t_to_js x7397);(GLint.t_to_js x7398)|])
    let (copyTexSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                x:GLint.t ->
                  y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x7409 : 'tags this) ->
        fun ~target:(x7401 : GLenum.t) ->
          fun ~level:(x7402 : GLint.t) ->
            fun ~xoffset:(x7403 : GLint.t) ->
              fun ~yoffset:(x7404 : GLint.t) ->
                fun ~x:(x7405 : GLint.t) ->
                  fun ~y:(x7406 : GLint.t) ->
                    fun ~width:(x7407 : GLsizei.t) ->
                      fun ~height:(x7408 : GLsizei.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x7409)
                             "copyTexSubImage2D"
                             [|(GLenum.t_to_js x7401);(GLint.t_to_js x7402);(
                               GLint.t_to_js x7403);(GLint.t_to_js x7404);(
                               GLint.t_to_js x7405);(GLint.t_to_js x7406);(
                               GLsizei.t_to_js x7407);(GLsizei.t_to_js x7408)|])
    let (createBuffer : 'tags this -> WebGLBuffer.t option) =
      fun (x7411 : 'tags this) ->
        Ojs.option_of_js WebGLBuffer.t_of_js
          (Ojs.call (this_to_js Obj.magic x7411) "createBuffer" [||])
    let (createFramebuffer : 'tags this -> WebGLFramebuffer.t option) =
      fun (x7414 : 'tags this) ->
        Ojs.option_of_js WebGLFramebuffer.t_of_js
          (Ojs.call (this_to_js Obj.magic x7414) "createFramebuffer" [||])
    let (createProgram : 'tags this -> WebGLProgram.t option) =
      fun (x7417 : 'tags this) ->
        Ojs.option_of_js WebGLProgram.t_of_js
          (Ojs.call (this_to_js Obj.magic x7417) "createProgram" [||])
    let (createRenderbuffer : 'tags this -> WebGLRenderbuffer.t option) =
      fun (x7420 : 'tags this) ->
        Ojs.option_of_js WebGLRenderbuffer.t_of_js
          (Ojs.call (this_to_js Obj.magic x7420) "createRenderbuffer" [||])
    let (createShader : 'tags this -> type_:GLenum.t -> WebGLShader.t option)
      =
      fun (x7424 : 'tags this) ->
        fun ~type_:(x7423 : GLenum.t) ->
          Ojs.option_of_js WebGLShader.t_of_js
            (Ojs.call (this_to_js Obj.magic x7424) "createShader"
               [|(GLenum.t_to_js x7423)|])
    let (createTexture : 'tags this -> WebGLTexture.t option) =
      fun (x7427 : 'tags this) ->
        Ojs.option_of_js WebGLTexture.t_of_js
          (Ojs.call (this_to_js Obj.magic x7427) "createTexture" [||])
    let (cullFace : 'tags this -> mode:GLenum.t -> unit) =
      fun (x7431 : 'tags this) ->
        fun ~mode:(x7430 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7431) "cullFace"
               [|(GLenum.t_to_js x7430)|])
    let (deleteBuffer : 'tags this -> buffer:WebGLBuffer.t option -> unit) =
      fun (x7435 : 'tags this) ->
        fun ~buffer:(x7433 : WebGLBuffer.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7435) "deleteBuffer"
               [|(Ojs.option_to_js WebGLBuffer.t_to_js x7433)|])
    let (deleteFramebuffer :
      'tags this -> framebuffer:WebGLFramebuffer.t option -> unit) =
      fun (x7439 : 'tags this) ->
        fun ~framebuffer:(x7437 : WebGLFramebuffer.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7439) "deleteFramebuffer"
               [|(Ojs.option_to_js WebGLFramebuffer.t_to_js x7437)|])
    let (deleteProgram : 'tags this -> program:WebGLProgram.t option -> unit)
      =
      fun (x7443 : 'tags this) ->
        fun ~program:(x7441 : WebGLProgram.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7443) "deleteProgram"
               [|(Ojs.option_to_js WebGLProgram.t_to_js x7441)|])
    let (deleteRenderbuffer :
      'tags this -> renderbuffer:WebGLRenderbuffer.t option -> unit) =
      fun (x7447 : 'tags this) ->
        fun ~renderbuffer:(x7445 : WebGLRenderbuffer.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7447) "deleteRenderbuffer"
               [|(Ojs.option_to_js WebGLRenderbuffer.t_to_js x7445)|])
    let (deleteShader : 'tags this -> shader:WebGLShader.t option -> unit) =
      fun (x7451 : 'tags this) ->
        fun ~shader:(x7449 : WebGLShader.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7451) "deleteShader"
               [|(Ojs.option_to_js WebGLShader.t_to_js x7449)|])
    let (deleteTexture : 'tags this -> texture:WebGLTexture.t option -> unit)
      =
      fun (x7455 : 'tags this) ->
        fun ~texture:(x7453 : WebGLTexture.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7455) "deleteTexture"
               [|(Ojs.option_to_js WebGLTexture.t_to_js x7453)|])
    let (depthFunc : 'tags this -> func:GLenum.t -> unit) =
      fun (x7458 : 'tags this) ->
        fun ~func:(x7457 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7458) "depthFunc"
               [|(GLenum.t_to_js x7457)|])
    let (depthMask : 'tags this -> flag:GLboolean.t -> unit) =
      fun (x7461 : 'tags this) ->
        fun ~flag:(x7460 : GLboolean.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7461) "depthMask"
               [|(GLboolean.t_to_js x7460)|])
    let (depthRange :
      'tags this -> zNear:GLclampf.t -> zFar:GLclampf.t -> unit) =
      fun (x7465 : 'tags this) ->
        fun ~zNear:(x7463 : GLclampf.t) ->
          fun ~zFar:(x7464 : GLclampf.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7465) "depthRange"
                 [|(GLclampf.t_to_js x7463);(GLclampf.t_to_js x7464)|])
    let (detachShader :
      'tags this -> program:WebGLProgram.t -> shader:WebGLShader.t -> unit) =
      fun (x7469 : 'tags this) ->
        fun ~program:(x7467 : WebGLProgram.t) ->
          fun ~shader:(x7468 : WebGLShader.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7469) "detachShader"
                 [|(WebGLProgram.t_to_js x7467);(WebGLShader.t_to_js x7468)|])
    let (disable : 'tags this -> cap:GLenum.t -> unit) =
      fun (x7472 : 'tags this) ->
        fun ~cap:(x7471 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7472) "disable"
               [|(GLenum.t_to_js x7471)|])
    let (disableVertexAttribArray : 'tags this -> index:GLuint.t -> unit) =
      fun (x7475 : 'tags this) ->
        fun ~index:(x7474 : GLuint.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7475) "disableVertexAttribArray"
               [|(GLuint.t_to_js x7474)|])
    let (drawArrays :
      'tags this -> mode:GLenum.t -> first:GLint.t -> count:GLsizei.t -> unit)
      =
      fun (x7480 : 'tags this) ->
        fun ~mode:(x7477 : GLenum.t) ->
          fun ~first:(x7478 : GLint.t) ->
            fun ~count:(x7479 : GLsizei.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7480) "drawArrays"
                   [|(GLenum.t_to_js x7477);(GLint.t_to_js x7478);(GLsizei.t_to_js
                                                                    x7479)|])
    let (drawElements :
      'tags this ->
        mode:GLenum.t ->
          count:GLsizei.t -> type_:GLenum.t -> offset:GLintptr.t -> unit)
      =
      fun (x7486 : 'tags this) ->
        fun ~mode:(x7482 : GLenum.t) ->
          fun ~count:(x7483 : GLsizei.t) ->
            fun ~type_:(x7484 : GLenum.t) ->
              fun ~offset:(x7485 : GLintptr.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7486) "drawElements"
                     [|(GLenum.t_to_js x7482);(GLsizei.t_to_js x7483);(
                       GLenum.t_to_js x7484);(GLintptr.t_to_js x7485)|])
    let (enable : 'tags this -> cap:GLenum.t -> unit) =
      fun (x7489 : 'tags this) ->
        fun ~cap:(x7488 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7489) "enable"
               [|(GLenum.t_to_js x7488)|])
    let (enableVertexAttribArray : 'tags this -> index:GLuint.t -> unit) =
      fun (x7492 : 'tags this) ->
        fun ~index:(x7491 : GLuint.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7492) "enableVertexAttribArray"
               [|(GLuint.t_to_js x7491)|])
    let (finish : 'tags this -> unit) =
      fun (x7494 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x7494) "finish" [||])
    let (flush : 'tags this -> unit) =
      fun (x7496 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x7496) "flush" [||])
    let (framebufferRenderbuffer :
      'tags this ->
        target:GLenum.t ->
          attachment:GLenum.t ->
            renderbuffertarget:GLenum.t ->
              renderbuffer:WebGLRenderbuffer.t option -> unit)
      =
      fun (x7503 : 'tags this) ->
        fun ~target:(x7498 : GLenum.t) ->
          fun ~attachment:(x7499 : GLenum.t) ->
            fun ~renderbuffertarget:(x7500 : GLenum.t) ->
              fun ~renderbuffer:(x7501 : WebGLRenderbuffer.t option) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7503)
                     "framebufferRenderbuffer"
                     [|(GLenum.t_to_js x7498);(GLenum.t_to_js x7499);(
                       GLenum.t_to_js x7500);(Ojs.option_to_js
                                                WebGLRenderbuffer.t_to_js
                                                x7501)|])
    let (framebufferTexture2D :
      'tags this ->
        target:GLenum.t ->
          attachment:GLenum.t ->
            textarget:GLenum.t ->
              texture:WebGLTexture.t option -> level:GLint.t -> unit)
      =
      fun (x7511 : 'tags this) ->
        fun ~target:(x7505 : GLenum.t) ->
          fun ~attachment:(x7506 : GLenum.t) ->
            fun ~textarget:(x7507 : GLenum.t) ->
              fun ~texture:(x7508 : WebGLTexture.t option) ->
                fun ~level:(x7510 : GLint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x7511)
                       "framebufferTexture2D"
                       [|(GLenum.t_to_js x7505);(GLenum.t_to_js x7506);(
                         GLenum.t_to_js x7507);(Ojs.option_to_js
                                                  WebGLTexture.t_to_js x7508);(
                         GLint.t_to_js x7510)|])
    let (frontFace : 'tags this -> mode:GLenum.t -> unit) =
      fun (x7514 : 'tags this) ->
        fun ~mode:(x7513 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7514) "frontFace"
               [|(GLenum.t_to_js x7513)|])
    let (generateMipmap : 'tags this -> target:GLenum.t -> unit) =
      fun (x7517 : 'tags this) ->
        fun ~target:(x7516 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7517) "generateMipmap"
               [|(GLenum.t_to_js x7516)|])
    let (getActiveAttrib :
      'tags this ->
        program:WebGLProgram.t -> index:GLuint.t -> WebGLActiveInfo.t option)
      =
      fun (x7521 : 'tags this) ->
        fun ~program:(x7519 : WebGLProgram.t) ->
          fun ~index:(x7520 : GLuint.t) ->
            Ojs.option_of_js WebGLActiveInfo.t_of_js
              (Ojs.call (this_to_js Obj.magic x7521) "getActiveAttrib"
                 [|(WebGLProgram.t_to_js x7519);(GLuint.t_to_js x7520)|])
    let (getActiveUniform :
      'tags this ->
        program:WebGLProgram.t -> index:GLuint.t -> WebGLActiveInfo.t option)
      =
      fun (x7526 : 'tags this) ->
        fun ~program:(x7524 : WebGLProgram.t) ->
          fun ~index:(x7525 : GLuint.t) ->
            Ojs.option_of_js WebGLActiveInfo.t_of_js
              (Ojs.call (this_to_js Obj.magic x7526) "getActiveUniform"
                 [|(WebGLProgram.t_to_js x7524);(GLuint.t_to_js x7525)|])
    let (getAttachedShaders :
      'tags this -> program:WebGLProgram.t -> WebGLShader.t list option) =
      fun (x7530 : 'tags this) ->
        fun ~program:(x7529 : WebGLProgram.t) ->
          Ojs.option_of_js
            (fun (x7532 : Ojs.t) -> Ojs.list_of_js WebGLShader.t_of_js x7532)
            (Ojs.call (this_to_js Obj.magic x7530) "getAttachedShaders"
               [|(WebGLProgram.t_to_js x7529)|])
    let (getAttribLocation :
      'tags this -> program:WebGLProgram.t -> name:string -> GLint.t) =
      fun (x7536 : 'tags this) ->
        fun ~program:(x7534 : WebGLProgram.t) ->
          fun ~name:(x7535 : string) ->
            GLint.t_of_js
              (Ojs.call (this_to_js Obj.magic x7536) "getAttribLocation"
                 [|(WebGLProgram.t_to_js x7534);(Ojs.string_to_js x7535)|])
    let (getBufferParameter :
      'tags this -> target:GLenum.t -> pname:GLenum.t -> any) =
      fun (x7540 : 'tags this) ->
        fun ~target:(x7538 : GLenum.t) ->
          fun ~pname:(x7539 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x7540) "getBufferParameter"
                 [|(GLenum.t_to_js x7538);(GLenum.t_to_js x7539)|])
    let (getContextAttributes :
      'tags this -> WebGLContextAttributes.t option) =
      fun (x7542 : 'tags this) ->
        Ojs.option_of_js WebGLContextAttributes.t_of_js
          (Ojs.call (this_to_js Obj.magic x7542) "getContextAttributes" [||])
    let (getError : 'tags this -> GLenum.t) =
      fun (x7545 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.call (this_to_js Obj.magic x7545) "getError" [||])
    let (getExtension :
      'tags this ->
        extensionName:[ `L_s2_EXT_blend_minmax ] -> EXT_blend_minmax.t option)
      =
      fun (x7548 : 'tags this) ->
        fun ~extensionName:(x7547 : [ `L_s2_EXT_blend_minmax ]) ->
          Ojs.option_of_js EXT_blend_minmax.t_of_js
            (Ojs.call (this_to_js Obj.magic x7548) "getExtension"
               [|((match x7547 with
                   | `L_s2_EXT_blend_minmax ->
                       Ojs.string_to_js "EXT_blend_minmax"))|])
    let (getExtension' :
      'tags this ->
        extensionName:[ `L_s3_EXT_color_buffer_float ] ->
          EXT_color_buffer_float.t option)
      =
      fun (x7552 : 'tags this) ->
        fun ~extensionName:(x7551 : [ `L_s3_EXT_color_buffer_float ]) ->
          Ojs.option_of_js EXT_color_buffer_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x7552) "getExtension"
               [|((match x7551 with
                   | `L_s3_EXT_color_buffer_float ->
                       Ojs.string_to_js "EXT_color_buffer_float"))|])
    let (getExtension'' :
      'tags this ->
        extensionName:[ `L_s4_EXT_color_buffer_half_float ] ->
          EXT_color_buffer_half_float.t option)
      =
      fun (x7556 : 'tags this) ->
        fun ~extensionName:(x7555 : [ `L_s4_EXT_color_buffer_half_float ]) ->
          Ojs.option_of_js EXT_color_buffer_half_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x7556) "getExtension"
               [|((match x7555 with
                   | `L_s4_EXT_color_buffer_half_float ->
                       Ojs.string_to_js "EXT_color_buffer_half_float"))|])
    let (getExtension''' :
      'tags this ->
        extensionName:[ `L_s5_EXT_float_blend ] -> EXT_float_blend.t option)
      =
      fun (x7560 : 'tags this) ->
        fun ~extensionName:(x7559 : [ `L_s5_EXT_float_blend ]) ->
          Ojs.option_of_js EXT_float_blend.t_of_js
            (Ojs.call (this_to_js Obj.magic x7560) "getExtension"
               [|((match x7559 with
                   | `L_s5_EXT_float_blend ->
                       Ojs.string_to_js "EXT_float_blend"))|])
    let (getExtension'''' :
      'tags this ->
        extensionName:[ `L_s9_EXT_texture_filter_anisotropic ] ->
          EXT_texture_filter_anisotropic.t option)
      =
      fun (x7564 : 'tags this) ->
        fun ~extensionName:(x7563 : [ `L_s9_EXT_texture_filter_anisotropic ])
          ->
          Ojs.option_of_js EXT_texture_filter_anisotropic.t_of_js
            (Ojs.call (this_to_js Obj.magic x7564) "getExtension"
               [|((match x7563 with
                   | `L_s9_EXT_texture_filter_anisotropic ->
                       Ojs.string_to_js "EXT_texture_filter_anisotropic"))|])
    let (getExtension''''' :
      'tags this ->
        extensionName:[ `L_s6_EXT_frag_depth ] -> EXT_frag_depth.t option)
      =
      fun (x7568 : 'tags this) ->
        fun ~extensionName:(x7567 : [ `L_s6_EXT_frag_depth ]) ->
          Ojs.option_of_js EXT_frag_depth.t_of_js
            (Ojs.call (this_to_js Obj.magic x7568) "getExtension"
               [|((match x7567 with
                   | `L_s6_EXT_frag_depth ->
                       Ojs.string_to_js "EXT_frag_depth"))|])
    let (getExtension'''''' :
      'tags this ->
        extensionName:[ `L_s8_EXT_shader_texture_lod ] ->
          EXT_shader_texture_lod.t option)
      =
      fun (x7572 : 'tags this) ->
        fun ~extensionName:(x7571 : [ `L_s8_EXT_shader_texture_lod ]) ->
          Ojs.option_of_js EXT_shader_texture_lod.t_of_js
            (Ojs.call (this_to_js Obj.magic x7572) "getExtension"
               [|((match x7571 with
                   | `L_s8_EXT_shader_texture_lod ->
                       Ojs.string_to_js "EXT_shader_texture_lod"))|])
    let (getExtension''''''' :
      'tags this -> extensionName:[ `L_s7_EXT_sRGB ] -> EXT_sRGB.t option) =
      fun (x7576 : 'tags this) ->
        fun ~extensionName:(x7575 : [ `L_s7_EXT_sRGB ]) ->
          Ojs.option_of_js EXT_sRGB.t_of_js
            (Ojs.call (this_to_js Obj.magic x7576) "getExtension"
               [|((match x7575 with
                   | `L_s7_EXT_sRGB -> Ojs.string_to_js "EXT_sRGB"))|])
    let (getExtension'''''''' :
      'tags this ->
        extensionName:[ `L_s10_KHR_parallel_shader_compile ] ->
          KHR_parallel_shader_compile.t option)
      =
      fun (x7580 : 'tags this) ->
        fun ~extensionName:(x7579 : [ `L_s10_KHR_parallel_shader_compile ])
          ->
          Ojs.option_of_js KHR_parallel_shader_compile.t_of_js
            (Ojs.call (this_to_js Obj.magic x7580) "getExtension"
               [|((match x7579 with
                   | `L_s10_KHR_parallel_shader_compile ->
                       Ojs.string_to_js "KHR_parallel_shader_compile"))|])
    let (getExtension''''''''' :
      'tags this ->
        extensionName:[ `L_s17_OES_vertex_array_object ] ->
          OES_vertex_array_object.t option)
      =
      fun (x7584 : 'tags this) ->
        fun ~extensionName:(x7583 : [ `L_s17_OES_vertex_array_object ]) ->
          Ojs.option_of_js OES_vertex_array_object.t_of_js
            (Ojs.call (this_to_js Obj.magic x7584) "getExtension"
               [|((match x7583 with
                   | `L_s17_OES_vertex_array_object ->
                       Ojs.string_to_js "OES_vertex_array_object"))|])
    let (getExtension'''''''''' :
      'tags this ->
        extensionName:[ `L_s18_OVR_multiview2 ] -> OVR_multiview2.t option)
      =
      fun (x7588 : 'tags this) ->
        fun ~extensionName:(x7587 : [ `L_s18_OVR_multiview2 ]) ->
          Ojs.option_of_js OVR_multiview2.t_of_js
            (Ojs.call (this_to_js Obj.magic x7588) "getExtension"
               [|((match x7587 with
                   | `L_s18_OVR_multiview2 ->
                       Ojs.string_to_js "OVR_multiview2"))|])
    let (getExtension''''''''''' :
      'tags this ->
        extensionName:[ `L_s19_WEBGL_color_buffer_float ] ->
          WEBGL_color_buffer_float.t option)
      =
      fun (x7592 : 'tags this) ->
        fun ~extensionName:(x7591 : [ `L_s19_WEBGL_color_buffer_float ]) ->
          Ojs.option_of_js WEBGL_color_buffer_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x7592) "getExtension"
               [|((match x7591 with
                   | `L_s19_WEBGL_color_buffer_float ->
                       Ojs.string_to_js "WEBGL_color_buffer_float"))|])
    let (getExtension'''''''''''' :
      'tags this ->
        extensionName:[ `L_s20_WEBGL_compressed_texture_astc ] ->
          WEBGL_compressed_texture_astc.t option)
      =
      fun (x7596 : 'tags this) ->
        fun ~extensionName:(x7595 : [ `L_s20_WEBGL_compressed_texture_astc ])
          ->
          Ojs.option_of_js WEBGL_compressed_texture_astc.t_of_js
            (Ojs.call (this_to_js Obj.magic x7596) "getExtension"
               [|((match x7595 with
                   | `L_s20_WEBGL_compressed_texture_astc ->
                       Ojs.string_to_js "WEBGL_compressed_texture_astc"))|])
    let (getExtension''''''''''''' :
      'tags this ->
        extensionName:[ `L_s21_WEBGL_compressed_texture_etc ] ->
          WEBGL_compressed_texture_etc.t option)
      =
      fun (x7600 : 'tags this) ->
        fun ~extensionName:(x7599 : [ `L_s21_WEBGL_compressed_texture_etc ])
          ->
          Ojs.option_of_js WEBGL_compressed_texture_etc.t_of_js
            (Ojs.call (this_to_js Obj.magic x7600) "getExtension"
               [|((match x7599 with
                   | `L_s21_WEBGL_compressed_texture_etc ->
                       Ojs.string_to_js "WEBGL_compressed_texture_etc"))|])
    let (getExtension'''''''''''''' :
      'tags this ->
        extensionName:[ `L_s22_WEBGL_compressed_texture_etc1 ] ->
          WEBGL_compressed_texture_etc1.t option)
      =
      fun (x7604 : 'tags this) ->
        fun ~extensionName:(x7603 : [ `L_s22_WEBGL_compressed_texture_etc1 ])
          ->
          Ojs.option_of_js WEBGL_compressed_texture_etc1.t_of_js
            (Ojs.call (this_to_js Obj.magic x7604) "getExtension"
               [|((match x7603 with
                   | `L_s22_WEBGL_compressed_texture_etc1 ->
                       Ojs.string_to_js "WEBGL_compressed_texture_etc1"))|])
    let (getExtension''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s23_WEBGL_compressed_texture_pvrtc ] ->
          WEBGL_compressed_texture_pvrtc.t option)
      =
      fun (x7608 : 'tags this) ->
        fun
          ~extensionName:(x7607 : [ `L_s23_WEBGL_compressed_texture_pvrtc ])
          ->
          Ojs.option_of_js WEBGL_compressed_texture_pvrtc.t_of_js
            (Ojs.call (this_to_js Obj.magic x7608) "getExtension"
               [|((match x7607 with
                   | `L_s23_WEBGL_compressed_texture_pvrtc ->
                       Ojs.string_to_js "WEBGL_compressed_texture_pvrtc"))|])
    let (getExtension'''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s25_WEBGL_compressed_texture_s3tc_srgb ] ->
          WEBGL_compressed_texture_s3tc_srgb.t option)
      =
      fun (x7612 : 'tags this) ->
        fun
          ~extensionName:(x7611 :
                           [ `L_s25_WEBGL_compressed_texture_s3tc_srgb ])
          ->
          Ojs.option_of_js WEBGL_compressed_texture_s3tc_srgb.t_of_js
            (Ojs.call (this_to_js Obj.magic x7612) "getExtension"
               [|((match x7611 with
                   | `L_s25_WEBGL_compressed_texture_s3tc_srgb ->
                       Ojs.string_to_js "WEBGL_compressed_texture_s3tc_srgb"))|])
    let (getExtension''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s27_WEBGL_debug_shaders ] ->
          WEBGL_debug_shaders.t option)
      =
      fun (x7616 : 'tags this) ->
        fun ~extensionName:(x7615 : [ `L_s27_WEBGL_debug_shaders ]) ->
          Ojs.option_of_js WEBGL_debug_shaders.t_of_js
            (Ojs.call (this_to_js Obj.magic x7616) "getExtension"
               [|((match x7615 with
                   | `L_s27_WEBGL_debug_shaders ->
                       Ojs.string_to_js "WEBGL_debug_shaders"))|])
    let (getExtension'''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s29_WEBGL_draw_buffers ] ->
          WEBGL_draw_buffers.t option)
      =
      fun (x7620 : 'tags this) ->
        fun ~extensionName:(x7619 : [ `L_s29_WEBGL_draw_buffers ]) ->
          Ojs.option_of_js WEBGL_draw_buffers.t_of_js
            (Ojs.call (this_to_js Obj.magic x7620) "getExtension"
               [|((match x7619 with
                   | `L_s29_WEBGL_draw_buffers ->
                       Ojs.string_to_js "WEBGL_draw_buffers"))|])
    let (getExtension''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s30_WEBGL_lose_context ] ->
          WEBGL_lose_context.t option)
      =
      fun (x7624 : 'tags this) ->
        fun ~extensionName:(x7623 : [ `L_s30_WEBGL_lose_context ]) ->
          Ojs.option_of_js WEBGL_lose_context.t_of_js
            (Ojs.call (this_to_js Obj.magic x7624) "getExtension"
               [|((match x7623 with
                   | `L_s30_WEBGL_lose_context ->
                       Ojs.string_to_js "WEBGL_lose_context"))|])
    let (getExtension'''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s28_WEBGL_depth_texture ] ->
          WEBGL_depth_texture.t option)
      =
      fun (x7628 : 'tags this) ->
        fun ~extensionName:(x7627 : [ `L_s28_WEBGL_depth_texture ]) ->
          Ojs.option_of_js WEBGL_depth_texture.t_of_js
            (Ojs.call (this_to_js Obj.magic x7628) "getExtension"
               [|((match x7627 with
                   | `L_s28_WEBGL_depth_texture ->
                       Ojs.string_to_js "WEBGL_depth_texture"))|])
    let (getExtension''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s26_WEBGL_debug_renderer_info ] ->
          WEBGL_debug_renderer_info.t option)
      =
      fun (x7632 : 'tags this) ->
        fun ~extensionName:(x7631 : [ `L_s26_WEBGL_debug_renderer_info ]) ->
          Ojs.option_of_js WEBGL_debug_renderer_info.t_of_js
            (Ojs.call (this_to_js Obj.magic x7632) "getExtension"
               [|((match x7631 with
                   | `L_s26_WEBGL_debug_renderer_info ->
                       Ojs.string_to_js "WEBGL_debug_renderer_info"))|])
    let (getExtension'''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s24_WEBGL_compressed_texture_s3tc ] ->
          WEBGL_compressed_texture_s3tc.t option)
      =
      fun (x7636 : 'tags this) ->
        fun ~extensionName:(x7635 : [ `L_s24_WEBGL_compressed_texture_s3tc ])
          ->
          Ojs.option_of_js WEBGL_compressed_texture_s3tc.t_of_js
            (Ojs.call (this_to_js Obj.magic x7636) "getExtension"
               [|((match x7635 with
                   | `L_s24_WEBGL_compressed_texture_s3tc ->
                       Ojs.string_to_js "WEBGL_compressed_texture_s3tc"))|])
    let (getExtension''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s16_OES_texture_half_float_linear ] ->
          OES_texture_half_float_linear.t option)
      =
      fun (x7640 : 'tags this) ->
        fun ~extensionName:(x7639 : [ `L_s16_OES_texture_half_float_linear ])
          ->
          Ojs.option_of_js OES_texture_half_float_linear.t_of_js
            (Ojs.call (this_to_js Obj.magic x7640) "getExtension"
               [|((match x7639 with
                   | `L_s16_OES_texture_half_float_linear ->
                       Ojs.string_to_js "OES_texture_half_float_linear"))|])
    let (getExtension'''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s15_OES_texture_half_float ] ->
          OES_texture_half_float.t option)
      =
      fun (x7644 : 'tags this) ->
        fun ~extensionName:(x7643 : [ `L_s15_OES_texture_half_float ]) ->
          Ojs.option_of_js OES_texture_half_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x7644) "getExtension"
               [|((match x7643 with
                   | `L_s15_OES_texture_half_float ->
                       Ojs.string_to_js "OES_texture_half_float"))|])
    let (getExtension''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s14_OES_texture_float_linear ] ->
          OES_texture_float_linear.t option)
      =
      fun (x7648 : 'tags this) ->
        fun ~extensionName:(x7647 : [ `L_s14_OES_texture_float_linear ]) ->
          Ojs.option_of_js OES_texture_float_linear.t_of_js
            (Ojs.call (this_to_js Obj.magic x7648) "getExtension"
               [|((match x7647 with
                   | `L_s14_OES_texture_float_linear ->
                       Ojs.string_to_js "OES_texture_float_linear"))|])
    let (getExtension'''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s13_OES_texture_float ] ->
          OES_texture_float.t option)
      =
      fun (x7652 : 'tags this) ->
        fun ~extensionName:(x7651 : [ `L_s13_OES_texture_float ]) ->
          Ojs.option_of_js OES_texture_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x7652) "getExtension"
               [|((match x7651 with
                   | `L_s13_OES_texture_float ->
                       Ojs.string_to_js "OES_texture_float"))|])
    let (getExtension''''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s12_OES_standard_derivatives ] ->
          OES_standard_derivatives.t option)
      =
      fun (x7656 : 'tags this) ->
        fun ~extensionName:(x7655 : [ `L_s12_OES_standard_derivatives ]) ->
          Ojs.option_of_js OES_standard_derivatives.t_of_js
            (Ojs.call (this_to_js Obj.magic x7656) "getExtension"
               [|((match x7655 with
                   | `L_s12_OES_standard_derivatives ->
                       Ojs.string_to_js "OES_standard_derivatives"))|])
    let (getExtension'''''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s11_OES_element_index_uint ] ->
          OES_element_index_uint.t option)
      =
      fun (x7660 : 'tags this) ->
        fun ~extensionName:(x7659 : [ `L_s11_OES_element_index_uint ]) ->
          Ojs.option_of_js OES_element_index_uint.t_of_js
            (Ojs.call (this_to_js Obj.magic x7660) "getExtension"
               [|((match x7659 with
                   | `L_s11_OES_element_index_uint ->
                       Ojs.string_to_js "OES_element_index_uint"))|])
    let (getExtension''''''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s1_ANGLE_instanced_arrays ] ->
          ANGLE_instanced_arrays.t option)
      =
      fun (x7664 : 'tags this) ->
        fun ~extensionName:(x7663 : [ `L_s1_ANGLE_instanced_arrays ]) ->
          Ojs.option_of_js ANGLE_instanced_arrays.t_of_js
            (Ojs.call (this_to_js Obj.magic x7664) "getExtension"
               [|((match x7663 with
                   | `L_s1_ANGLE_instanced_arrays ->
                       Ojs.string_to_js "ANGLE_instanced_arrays"))|])
    let (getExtension'''''''''''''''''''''''''''''' :
      'tags this -> name:string -> any) =
      fun (x7668 : 'tags this) ->
        fun ~name:(x7667 : string) ->
          any_of_js
            (Ojs.call (this_to_js Obj.magic x7668) "getExtension"
               [|(Ojs.string_to_js x7667)|])
    let (getFramebufferAttachmentParameter :
      'tags this ->
        target:GLenum.t -> attachment:GLenum.t -> pname:GLenum.t -> any)
      =
      fun (x7673 : 'tags this) ->
        fun ~target:(x7670 : GLenum.t) ->
          fun ~attachment:(x7671 : GLenum.t) ->
            fun ~pname:(x7672 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x7673)
                   "getFramebufferAttachmentParameter"
                   [|(GLenum.t_to_js x7670);(GLenum.t_to_js x7671);(GLenum.t_to_js
                                                                    x7672)|])
    let (getParameter : 'tags this -> pname:GLenum.t -> any) =
      fun (x7676 : 'tags this) ->
        fun ~pname:(x7675 : GLenum.t) ->
          any_of_js
            (Ojs.call (this_to_js Obj.magic x7676) "getParameter"
               [|(GLenum.t_to_js x7675)|])
    let (getProgramInfoLog :
      'tags this -> program:WebGLProgram.t -> string option) =
      fun (x7679 : 'tags this) ->
        fun ~program:(x7678 : WebGLProgram.t) ->
          Ojs.option_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x7679) "getProgramInfoLog"
               [|(WebGLProgram.t_to_js x7678)|])
    let (getProgramParameter :
      'tags this -> program:WebGLProgram.t -> pname:GLenum.t -> any) =
      fun (x7684 : 'tags this) ->
        fun ~program:(x7682 : WebGLProgram.t) ->
          fun ~pname:(x7683 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x7684) "getProgramParameter"
                 [|(WebGLProgram.t_to_js x7682);(GLenum.t_to_js x7683)|])
    let (getRenderbufferParameter :
      'tags this -> target:GLenum.t -> pname:GLenum.t -> any) =
      fun (x7688 : 'tags this) ->
        fun ~target:(x7686 : GLenum.t) ->
          fun ~pname:(x7687 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x7688)
                 "getRenderbufferParameter"
                 [|(GLenum.t_to_js x7686);(GLenum.t_to_js x7687)|])
    let (getShaderInfoLog :
      'tags this -> shader:WebGLShader.t -> string option) =
      fun (x7691 : 'tags this) ->
        fun ~shader:(x7690 : WebGLShader.t) ->
          Ojs.option_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x7691) "getShaderInfoLog"
               [|(WebGLShader.t_to_js x7690)|])
    let (getShaderParameter :
      'tags this -> shader:WebGLShader.t -> pname:GLenum.t -> any) =
      fun (x7696 : 'tags this) ->
        fun ~shader:(x7694 : WebGLShader.t) ->
          fun ~pname:(x7695 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x7696) "getShaderParameter"
                 [|(WebGLShader.t_to_js x7694);(GLenum.t_to_js x7695)|])
    let (getShaderPrecisionFormat :
      'tags this ->
        shadertype:GLenum.t ->
          precisiontype:GLenum.t -> WebGLShaderPrecisionFormat.t option)
      =
      fun (x7700 : 'tags this) ->
        fun ~shadertype:(x7698 : GLenum.t) ->
          fun ~precisiontype:(x7699 : GLenum.t) ->
            Ojs.option_of_js WebGLShaderPrecisionFormat.t_of_js
              (Ojs.call (this_to_js Obj.magic x7700)
                 "getShaderPrecisionFormat"
                 [|(GLenum.t_to_js x7698);(GLenum.t_to_js x7699)|])
    let (getShaderSource :
      'tags this -> shader:WebGLShader.t -> string option) =
      fun (x7704 : 'tags this) ->
        fun ~shader:(x7703 : WebGLShader.t) ->
          Ojs.option_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x7704) "getShaderSource"
               [|(WebGLShader.t_to_js x7703)|])
    let (getSupportedExtensions : 'tags this -> string list option) =
      fun (x7707 : 'tags this) ->
        Ojs.option_of_js
          (fun (x7709 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x7709)
          (Ojs.call (this_to_js Obj.magic x7707) "getSupportedExtensions"
             [||])
    let (getTexParameter :
      'tags this -> target:GLenum.t -> pname:GLenum.t -> any) =
      fun (x7713 : 'tags this) ->
        fun ~target:(x7711 : GLenum.t) ->
          fun ~pname:(x7712 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x7713) "getTexParameter"
                 [|(GLenum.t_to_js x7711);(GLenum.t_to_js x7712)|])
    let (getUniform :
      'tags this ->
        program:WebGLProgram.t -> location:WebGLUniformLocation.t -> any)
      =
      fun (x7717 : 'tags this) ->
        fun ~program:(x7715 : WebGLProgram.t) ->
          fun ~location:(x7716 : WebGLUniformLocation.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x7717) "getUniform"
                 [|(WebGLProgram.t_to_js x7715);(WebGLUniformLocation.t_to_js
                                                   x7716)|])
    let (getUniformLocation :
      'tags this ->
        program:WebGLProgram.t ->
          name:string -> WebGLUniformLocation.t option)
      =
      fun (x7721 : 'tags this) ->
        fun ~program:(x7719 : WebGLProgram.t) ->
          fun ~name:(x7720 : string) ->
            Ojs.option_of_js WebGLUniformLocation.t_of_js
              (Ojs.call (this_to_js Obj.magic x7721) "getUniformLocation"
                 [|(WebGLProgram.t_to_js x7719);(Ojs.string_to_js x7720)|])
    let (getVertexAttrib :
      'tags this -> index:GLuint.t -> pname:GLenum.t -> any) =
      fun (x7726 : 'tags this) ->
        fun ~index:(x7724 : GLuint.t) ->
          fun ~pname:(x7725 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x7726) "getVertexAttrib"
                 [|(GLuint.t_to_js x7724);(GLenum.t_to_js x7725)|])
    let (getVertexAttribOffset :
      'tags this -> index:GLuint.t -> pname:GLenum.t -> GLintptr.t) =
      fun (x7730 : 'tags this) ->
        fun ~index:(x7728 : GLuint.t) ->
          fun ~pname:(x7729 : GLenum.t) ->
            GLintptr.t_of_js
              (Ojs.call (this_to_js Obj.magic x7730) "getVertexAttribOffset"
                 [|(GLuint.t_to_js x7728);(GLenum.t_to_js x7729)|])
    let (hint : 'tags this -> target:GLenum.t -> mode:GLenum.t -> unit) =
      fun (x7734 : 'tags this) ->
        fun ~target:(x7732 : GLenum.t) ->
          fun ~mode:(x7733 : GLenum.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7734) "hint"
                 [|(GLenum.t_to_js x7732);(GLenum.t_to_js x7733)|])
    let (isBuffer : 'tags this -> buffer:WebGLBuffer.t option -> GLboolean.t)
      =
      fun (x7738 : 'tags this) ->
        fun ~buffer:(x7736 : WebGLBuffer.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x7738) "isBuffer"
               [|(Ojs.option_to_js WebGLBuffer.t_to_js x7736)|])
    let (isContextLost : 'tags this -> bool) =
      fun (x7740 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.call (this_to_js Obj.magic x7740) "isContextLost" [||])
    let (isEnabled : 'tags this -> cap:GLenum.t -> GLboolean.t) =
      fun (x7743 : 'tags this) ->
        fun ~cap:(x7742 : GLenum.t) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x7743) "isEnabled"
               [|(GLenum.t_to_js x7742)|])
    let (isFramebuffer :
      'tags this -> framebuffer:WebGLFramebuffer.t option -> GLboolean.t) =
      fun (x7747 : 'tags this) ->
        fun ~framebuffer:(x7745 : WebGLFramebuffer.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x7747) "isFramebuffer"
               [|(Ojs.option_to_js WebGLFramebuffer.t_to_js x7745)|])
    let (isProgram :
      'tags this -> program:WebGLProgram.t option -> GLboolean.t) =
      fun (x7751 : 'tags this) ->
        fun ~program:(x7749 : WebGLProgram.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x7751) "isProgram"
               [|(Ojs.option_to_js WebGLProgram.t_to_js x7749)|])
    let (isRenderbuffer :
      'tags this -> renderbuffer:WebGLRenderbuffer.t option -> GLboolean.t) =
      fun (x7755 : 'tags this) ->
        fun ~renderbuffer:(x7753 : WebGLRenderbuffer.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x7755) "isRenderbuffer"
               [|(Ojs.option_to_js WebGLRenderbuffer.t_to_js x7753)|])
    let (isShader : 'tags this -> shader:WebGLShader.t option -> GLboolean.t)
      =
      fun (x7759 : 'tags this) ->
        fun ~shader:(x7757 : WebGLShader.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x7759) "isShader"
               [|(Ojs.option_to_js WebGLShader.t_to_js x7757)|])
    let (isTexture :
      'tags this -> texture:WebGLTexture.t option -> GLboolean.t) =
      fun (x7763 : 'tags this) ->
        fun ~texture:(x7761 : WebGLTexture.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x7763) "isTexture"
               [|(Ojs.option_to_js WebGLTexture.t_to_js x7761)|])
    let (lineWidth : 'tags this -> width:GLfloat.t -> unit) =
      fun (x7766 : 'tags this) ->
        fun ~width:(x7765 : GLfloat.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7766) "lineWidth"
               [|(GLfloat.t_to_js x7765)|])
    let (linkProgram : 'tags this -> program:WebGLProgram.t -> unit) =
      fun (x7769 : 'tags this) ->
        fun ~program:(x7768 : WebGLProgram.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7769) "linkProgram"
               [|(WebGLProgram.t_to_js x7768)|])
    let (pixelStorei :
      'tags this ->
        pname:GLenum.t ->
          param:[ `U1 of GLint.t  | `U2 of GLboolean.t ] -> unit)
      =
      fun (x7775 : 'tags this) ->
        fun ~pname:(x7771 : GLenum.t) ->
          fun ~param:(x7772 : [ `U1 of GLint.t  | `U2 of GLboolean.t ]) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7775) "pixelStorei"
                 [|(GLenum.t_to_js x7771);((match x7772 with
                                            | `U1 x7773 ->
                                                GLint.t_to_js x7773
                                            | `U2 x7774 ->
                                                GLboolean.t_to_js x7774))|])
    let (polygonOffset :
      'tags this -> factor:GLfloat.t -> units:GLfloat.t -> unit) =
      fun (x7779 : 'tags this) ->
        fun ~factor:(x7777 : GLfloat.t) ->
          fun ~units:(x7778 : GLfloat.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7779) "polygonOffset"
                 [|(GLfloat.t_to_js x7777);(GLfloat.t_to_js x7778)|])
    let (renderbufferStorage :
      'tags this ->
        target:GLenum.t ->
          internalformat:GLenum.t ->
            width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x7785 : 'tags this) ->
        fun ~target:(x7781 : GLenum.t) ->
          fun ~internalformat:(x7782 : GLenum.t) ->
            fun ~width:(x7783 : GLsizei.t) ->
              fun ~height:(x7784 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7785)
                     "renderbufferStorage"
                     [|(GLenum.t_to_js x7781);(GLenum.t_to_js x7782);(
                       GLsizei.t_to_js x7783);(GLsizei.t_to_js x7784)|])
    let (sampleCoverage :
      'tags this -> value:GLclampf.t -> invert:GLboolean.t -> unit) =
      fun (x7789 : 'tags this) ->
        fun ~value:(x7787 : GLclampf.t) ->
          fun ~invert:(x7788 : GLboolean.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7789) "sampleCoverage"
                 [|(GLclampf.t_to_js x7787);(GLboolean.t_to_js x7788)|])
    let (scissor :
      'tags this ->
        x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x7795 : 'tags this) ->
        fun ~x:(x7791 : GLint.t) ->
          fun ~y:(x7792 : GLint.t) ->
            fun ~width:(x7793 : GLsizei.t) ->
              fun ~height:(x7794 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7795) "scissor"
                     [|(GLint.t_to_js x7791);(GLint.t_to_js x7792);(GLsizei.t_to_js
                                                                    x7793);(
                       GLsizei.t_to_js x7794)|])
    let (shaderSource :
      'tags this -> shader:WebGLShader.t -> source:string -> unit) =
      fun (x7799 : 'tags this) ->
        fun ~shader:(x7797 : WebGLShader.t) ->
          fun ~source:(x7798 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7799) "shaderSource"
                 [|(WebGLShader.t_to_js x7797);(Ojs.string_to_js x7798)|])
    let (stencilFunc :
      'tags this -> func:GLenum.t -> ref:GLint.t -> mask:GLuint.t -> unit) =
      fun (x7804 : 'tags this) ->
        fun ~func:(x7801 : GLenum.t) ->
          fun ~ref:(x7802 : GLint.t) ->
            fun ~mask:(x7803 : GLuint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7804) "stencilFunc"
                   [|(GLenum.t_to_js x7801);(GLint.t_to_js x7802);(GLuint.t_to_js
                                                                    x7803)|])
    let (stencilFuncSeparate :
      'tags this ->
        face:GLenum.t ->
          func:GLenum.t -> ref:GLint.t -> mask:GLuint.t -> unit)
      =
      fun (x7810 : 'tags this) ->
        fun ~face:(x7806 : GLenum.t) ->
          fun ~func:(x7807 : GLenum.t) ->
            fun ~ref:(x7808 : GLint.t) ->
              fun ~mask:(x7809 : GLuint.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7810)
                     "stencilFuncSeparate"
                     [|(GLenum.t_to_js x7806);(GLenum.t_to_js x7807);(
                       GLint.t_to_js x7808);(GLuint.t_to_js x7809)|])
    let (stencilMask : 'tags this -> mask:GLuint.t -> unit) =
      fun (x7813 : 'tags this) ->
        fun ~mask:(x7812 : GLuint.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7813) "stencilMask"
               [|(GLuint.t_to_js x7812)|])
    let (stencilMaskSeparate :
      'tags this -> face:GLenum.t -> mask:GLuint.t -> unit) =
      fun (x7817 : 'tags this) ->
        fun ~face:(x7815 : GLenum.t) ->
          fun ~mask:(x7816 : GLuint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7817) "stencilMaskSeparate"
                 [|(GLenum.t_to_js x7815);(GLuint.t_to_js x7816)|])
    let (stencilOp :
      'tags this -> fail:GLenum.t -> zfail:GLenum.t -> zpass:GLenum.t -> unit)
      =
      fun (x7822 : 'tags this) ->
        fun ~fail:(x7819 : GLenum.t) ->
          fun ~zfail:(x7820 : GLenum.t) ->
            fun ~zpass:(x7821 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7822) "stencilOp"
                   [|(GLenum.t_to_js x7819);(GLenum.t_to_js x7820);(GLenum.t_to_js
                                                                    x7821)|])
    let (stencilOpSeparate :
      'tags this ->
        face:GLenum.t ->
          fail:GLenum.t -> zfail:GLenum.t -> zpass:GLenum.t -> unit)
      =
      fun (x7828 : 'tags this) ->
        fun ~face:(x7824 : GLenum.t) ->
          fun ~fail:(x7825 : GLenum.t) ->
            fun ~zfail:(x7826 : GLenum.t) ->
              fun ~zpass:(x7827 : GLenum.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7828) "stencilOpSeparate"
                     [|(GLenum.t_to_js x7824);(GLenum.t_to_js x7825);(
                       GLenum.t_to_js x7826);(GLenum.t_to_js x7827)|])
    let (texParameterf :
      'tags this ->
        target:GLenum.t -> pname:GLenum.t -> param:GLfloat.t -> unit)
      =
      fun (x7833 : 'tags this) ->
        fun ~target:(x7830 : GLenum.t) ->
          fun ~pname:(x7831 : GLenum.t) ->
            fun ~param:(x7832 : GLfloat.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7833) "texParameterf"
                   [|(GLenum.t_to_js x7830);(GLenum.t_to_js x7831);(GLfloat.t_to_js
                                                                    x7832)|])
    let (texParameteri :
      'tags this ->
        target:GLenum.t -> pname:GLenum.t -> param:GLint.t -> unit)
      =
      fun (x7838 : 'tags this) ->
        fun ~target:(x7835 : GLenum.t) ->
          fun ~pname:(x7836 : GLenum.t) ->
            fun ~param:(x7837 : GLint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7838) "texParameteri"
                   [|(GLenum.t_to_js x7835);(GLenum.t_to_js x7836);(GLint.t_to_js
                                                                    x7837)|])
    let (uniform1f :
      'tags this ->
        location:WebGLUniformLocation.t option -> x:GLfloat.t -> unit)
      =
      fun (x7843 : 'tags this) ->
        fun ~location:(x7840 : WebGLUniformLocation.t option) ->
          fun ~x:(x7842 : GLfloat.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7843) "uniform1f"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x7840);(
                   GLfloat.t_to_js x7842)|])
    let (uniform1i :
      'tags this ->
        location:WebGLUniformLocation.t option -> x:GLint.t -> unit)
      =
      fun (x7848 : 'tags this) ->
        fun ~location:(x7845 : WebGLUniformLocation.t option) ->
          fun ~x:(x7847 : GLint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7848) "uniform1i"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x7845);(
                   GLint.t_to_js x7847)|])
    let (uniform2f :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          x:GLfloat.t -> y:GLfloat.t -> unit)
      =
      fun (x7854 : 'tags this) ->
        fun ~location:(x7850 : WebGLUniformLocation.t option) ->
          fun ~x:(x7852 : GLfloat.t) ->
            fun ~y:(x7853 : GLfloat.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7854) "uniform2f"
                   [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x7850);(
                     GLfloat.t_to_js x7852);(GLfloat.t_to_js x7853)|])
    let (uniform2i :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          x:GLint.t -> y:GLint.t -> unit)
      =
      fun (x7860 : 'tags this) ->
        fun ~location:(x7856 : WebGLUniformLocation.t option) ->
          fun ~x:(x7858 : GLint.t) ->
            fun ~y:(x7859 : GLint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7860) "uniform2i"
                   [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x7856);(
                     GLint.t_to_js x7858);(GLint.t_to_js x7859)|])
    let (uniform3f :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> unit)
      =
      fun (x7867 : 'tags this) ->
        fun ~location:(x7862 : WebGLUniformLocation.t option) ->
          fun ~x:(x7864 : GLfloat.t) ->
            fun ~y:(x7865 : GLfloat.t) ->
              fun ~z:(x7866 : GLfloat.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7867) "uniform3f"
                     [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x7862);(
                       GLfloat.t_to_js x7864);(GLfloat.t_to_js x7865);(
                       GLfloat.t_to_js x7866)|])
    let (uniform3i :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          x:GLint.t -> y:GLint.t -> z:GLint.t -> unit)
      =
      fun (x7874 : 'tags this) ->
        fun ~location:(x7869 : WebGLUniformLocation.t option) ->
          fun ~x:(x7871 : GLint.t) ->
            fun ~y:(x7872 : GLint.t) ->
              fun ~z:(x7873 : GLint.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7874) "uniform3i"
                     [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x7869);(
                       GLint.t_to_js x7871);(GLint.t_to_js x7872);(GLint.t_to_js
                                                                    x7873)|])
    let (uniform4f :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> w:GLfloat.t -> unit)
      =
      fun (x7882 : 'tags this) ->
        fun ~location:(x7876 : WebGLUniformLocation.t option) ->
          fun ~x:(x7878 : GLfloat.t) ->
            fun ~y:(x7879 : GLfloat.t) ->
              fun ~z:(x7880 : GLfloat.t) ->
                fun ~w:(x7881 : GLfloat.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x7882) "uniform4f"
                       [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x7876);(
                         GLfloat.t_to_js x7878);(GLfloat.t_to_js x7879);(
                         GLfloat.t_to_js x7880);(GLfloat.t_to_js x7881)|])
    let (uniform4i :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          x:GLint.t -> y:GLint.t -> z:GLint.t -> w:GLint.t -> unit)
      =
      fun (x7890 : 'tags this) ->
        fun ~location:(x7884 : WebGLUniformLocation.t option) ->
          fun ~x:(x7886 : GLint.t) ->
            fun ~y:(x7887 : GLint.t) ->
              fun ~z:(x7888 : GLint.t) ->
                fun ~w:(x7889 : GLint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x7890) "uniform4i"
                       [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x7884);(
                         GLint.t_to_js x7886);(GLint.t_to_js x7887);(
                         GLint.t_to_js x7888);(GLint.t_to_js x7889)|])
    let (useProgram : 'tags this -> program:WebGLProgram.t option -> unit) =
      fun (x7894 : 'tags this) ->
        fun ~program:(x7892 : WebGLProgram.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7894) "useProgram"
               [|(Ojs.option_to_js WebGLProgram.t_to_js x7892)|])
    let (validateProgram : 'tags this -> program:WebGLProgram.t -> unit) =
      fun (x7897 : 'tags this) ->
        fun ~program:(x7896 : WebGLProgram.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7897) "validateProgram"
               [|(WebGLProgram.t_to_js x7896)|])
    let (vertexAttrib1f :
      'tags this -> index:GLuint.t -> x:GLfloat.t -> unit) =
      fun (x7901 : 'tags this) ->
        fun ~index:(x7899 : GLuint.t) ->
          fun ~x:(x7900 : GLfloat.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7901) "vertexAttrib1f"
                 [|(GLuint.t_to_js x7899);(GLfloat.t_to_js x7900)|])
    let (vertexAttrib1fv :
      'tags this -> index:GLuint.t -> values:Float32List.t -> unit) =
      fun (x7905 : 'tags this) ->
        fun ~index:(x7903 : GLuint.t) ->
          fun ~values:(x7904 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7905) "vertexAttrib1fv"
                 [|(GLuint.t_to_js x7903);(Float32List.t_to_js x7904)|])
    let (vertexAttrib2f :
      'tags this -> index:GLuint.t -> x:GLfloat.t -> y:GLfloat.t -> unit) =
      fun (x7910 : 'tags this) ->
        fun ~index:(x7907 : GLuint.t) ->
          fun ~x:(x7908 : GLfloat.t) ->
            fun ~y:(x7909 : GLfloat.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7910) "vertexAttrib2f"
                   [|(GLuint.t_to_js x7907);(GLfloat.t_to_js x7908);(
                     GLfloat.t_to_js x7909)|])
    let (vertexAttrib2fv :
      'tags this -> index:GLuint.t -> values:Float32List.t -> unit) =
      fun (x7914 : 'tags this) ->
        fun ~index:(x7912 : GLuint.t) ->
          fun ~values:(x7913 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7914) "vertexAttrib2fv"
                 [|(GLuint.t_to_js x7912);(Float32List.t_to_js x7913)|])
    let (vertexAttrib3f :
      'tags this ->
        index:GLuint.t -> x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> unit)
      =
      fun (x7920 : 'tags this) ->
        fun ~index:(x7916 : GLuint.t) ->
          fun ~x:(x7917 : GLfloat.t) ->
            fun ~y:(x7918 : GLfloat.t) ->
              fun ~z:(x7919 : GLfloat.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7920) "vertexAttrib3f"
                     [|(GLuint.t_to_js x7916);(GLfloat.t_to_js x7917);(
                       GLfloat.t_to_js x7918);(GLfloat.t_to_js x7919)|])
    let (vertexAttrib3fv :
      'tags this -> index:GLuint.t -> values:Float32List.t -> unit) =
      fun (x7924 : 'tags this) ->
        fun ~index:(x7922 : GLuint.t) ->
          fun ~values:(x7923 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7924) "vertexAttrib3fv"
                 [|(GLuint.t_to_js x7922);(Float32List.t_to_js x7923)|])
    let (vertexAttrib4f :
      'tags this ->
        index:GLuint.t ->
          x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> w:GLfloat.t -> unit)
      =
      fun (x7931 : 'tags this) ->
        fun ~index:(x7926 : GLuint.t) ->
          fun ~x:(x7927 : GLfloat.t) ->
            fun ~y:(x7928 : GLfloat.t) ->
              fun ~z:(x7929 : GLfloat.t) ->
                fun ~w:(x7930 : GLfloat.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x7931) "vertexAttrib4f"
                       [|(GLuint.t_to_js x7926);(GLfloat.t_to_js x7927);(
                         GLfloat.t_to_js x7928);(GLfloat.t_to_js x7929);(
                         GLfloat.t_to_js x7930)|])
    let (vertexAttrib4fv :
      'tags this -> index:GLuint.t -> values:Float32List.t -> unit) =
      fun (x7935 : 'tags this) ->
        fun ~index:(x7933 : GLuint.t) ->
          fun ~values:(x7934 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7935) "vertexAttrib4fv"
                 [|(GLuint.t_to_js x7933);(Float32List.t_to_js x7934)|])
    let (vertexAttribPointer :
      'tags this ->
        index:GLuint.t ->
          size:GLint.t ->
            type_:GLenum.t ->
              normalized:GLboolean.t ->
                stride:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x7943 : 'tags this) ->
        fun ~index:(x7937 : GLuint.t) ->
          fun ~size:(x7938 : GLint.t) ->
            fun ~type_:(x7939 : GLenum.t) ->
              fun ~normalized:(x7940 : GLboolean.t) ->
                fun ~stride:(x7941 : GLsizei.t) ->
                  fun ~offset:(x7942 : GLintptr.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x7943)
                         "vertexAttribPointer"
                         [|(GLuint.t_to_js x7937);(GLint.t_to_js x7938);(
                           GLenum.t_to_js x7939);(GLboolean.t_to_js x7940);(
                           GLsizei.t_to_js x7941);(GLintptr.t_to_js x7942)|])
    let (viewport :
      'tags this ->
        x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x7949 : 'tags this) ->
        fun ~x:(x7945 : GLint.t) ->
          fun ~y:(x7946 : GLint.t) ->
            fun ~width:(x7947 : GLsizei.t) ->
              fun ~height:(x7948 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7949) "viewport"
                     [|(GLint.t_to_js x7945);(GLint.t_to_js x7946);(GLsizei.t_to_js
                                                                    x7947);(
                       GLsizei.t_to_js x7948)|])
    let (get_ACTIVE_ATTRIBUTES : 'tags this -> GLenum.t) =
      fun (x7951 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7951)
             "ACTIVE_ATTRIBUTES")
    let (get_ACTIVE_TEXTURE : 'tags this -> GLenum.t) =
      fun (x7953 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7953) "ACTIVE_TEXTURE")
    let (get_ACTIVE_UNIFORMS : 'tags this -> GLenum.t) =
      fun (x7955 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7955) "ACTIVE_UNIFORMS")
    let (get_ALIASED_LINE_WIDTH_RANGE : 'tags this -> GLenum.t) =
      fun (x7957 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7957)
             "ALIASED_LINE_WIDTH_RANGE")
    let (get_ALIASED_POINT_SIZE_RANGE : 'tags this -> GLenum.t) =
      fun (x7959 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7959)
             "ALIASED_POINT_SIZE_RANGE")
    let (get_ALPHA : 'tags this -> GLenum.t) =
      fun (x7961 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7961) "ALPHA")
    let (get_ALPHA_BITS : 'tags this -> GLenum.t) =
      fun (x7963 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7963) "ALPHA_BITS")
    let (get_ALWAYS : 'tags this -> GLenum.t) =
      fun (x7965 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7965) "ALWAYS")
    let (get_ARRAY_BUFFER : 'tags this -> GLenum.t) =
      fun (x7967 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7967) "ARRAY_BUFFER")
    let (get_ARRAY_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x7969 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7969)
             "ARRAY_BUFFER_BINDING")
    let (get_ATTACHED_SHADERS : 'tags this -> GLenum.t) =
      fun (x7971 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7971) "ATTACHED_SHADERS")
    let (get_BACK : 'tags this -> GLenum.t) =
      fun (x7973 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7973) "BACK")
    let (get_BLEND : 'tags this -> GLenum.t) =
      fun (x7975 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7975) "BLEND")
    let (get_BLEND_COLOR : 'tags this -> GLenum.t) =
      fun (x7977 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7977) "BLEND_COLOR")
    let (get_BLEND_DST_ALPHA : 'tags this -> GLenum.t) =
      fun (x7979 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7979) "BLEND_DST_ALPHA")
    let (get_BLEND_DST_RGB : 'tags this -> GLenum.t) =
      fun (x7981 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7981) "BLEND_DST_RGB")
    let (get_BLEND_EQUATION : 'tags this -> GLenum.t) =
      fun (x7983 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7983) "BLEND_EQUATION")
    let (get_BLEND_EQUATION_ALPHA : 'tags this -> GLenum.t) =
      fun (x7985 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7985)
             "BLEND_EQUATION_ALPHA")
    let (get_BLEND_EQUATION_RGB : 'tags this -> GLenum.t) =
      fun (x7987 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7987)
             "BLEND_EQUATION_RGB")
    let (get_BLEND_SRC_ALPHA : 'tags this -> GLenum.t) =
      fun (x7989 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7989) "BLEND_SRC_ALPHA")
    let (get_BLEND_SRC_RGB : 'tags this -> GLenum.t) =
      fun (x7991 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7991) "BLEND_SRC_RGB")
    let (get_BLUE_BITS : 'tags this -> GLenum.t) =
      fun (x7993 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7993) "BLUE_BITS")
    let (get_BOOL : 'tags this -> GLenum.t) =
      fun (x7995 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7995) "BOOL")
    let (get_BOOL_VEC2 : 'tags this -> GLenum.t) =
      fun (x7997 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7997) "BOOL_VEC2")
    let (get_BOOL_VEC3 : 'tags this -> GLenum.t) =
      fun (x7999 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7999) "BOOL_VEC3")
    let (get_BOOL_VEC4 : 'tags this -> GLenum.t) =
      fun (x8001 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8001) "BOOL_VEC4")
    let (get_BROWSER_DEFAULT_WEBGL : 'tags this -> GLenum.t) =
      fun (x8003 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8003)
             "BROWSER_DEFAULT_WEBGL")
    let (get_BUFFER_SIZE : 'tags this -> GLenum.t) =
      fun (x8005 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8005) "BUFFER_SIZE")
    let (get_BUFFER_USAGE : 'tags this -> GLenum.t) =
      fun (x8007 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8007) "BUFFER_USAGE")
    let (get_BYTE : 'tags this -> GLenum.t) =
      fun (x8009 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8009) "BYTE")
    let (get_CCW : 'tags this -> GLenum.t) =
      fun (x8011 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8011) "CCW")
    let (get_CLAMP_TO_EDGE : 'tags this -> GLenum.t) =
      fun (x8013 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8013) "CLAMP_TO_EDGE")
    let (get_COLOR_ATTACHMENT0 : 'tags this -> GLenum.t) =
      fun (x8015 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8015)
             "COLOR_ATTACHMENT0")
    let (get_COLOR_BUFFER_BIT : 'tags this -> GLenum.t) =
      fun (x8017 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8017) "COLOR_BUFFER_BIT")
    let (get_COLOR_CLEAR_VALUE : 'tags this -> GLenum.t) =
      fun (x8019 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8019)
             "COLOR_CLEAR_VALUE")
    let (get_COLOR_WRITEMASK : 'tags this -> GLenum.t) =
      fun (x8021 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8021) "COLOR_WRITEMASK")
    let (get_COMPILE_STATUS : 'tags this -> GLenum.t) =
      fun (x8023 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8023) "COMPILE_STATUS")
    let (get_COMPRESSED_TEXTURE_FORMATS : 'tags this -> GLenum.t) =
      fun (x8025 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8025)
             "COMPRESSED_TEXTURE_FORMATS")
    let (get_CONSTANT_ALPHA : 'tags this -> GLenum.t) =
      fun (x8027 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8027) "CONSTANT_ALPHA")
    let (get_CONSTANT_COLOR : 'tags this -> GLenum.t) =
      fun (x8029 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8029) "CONSTANT_COLOR")
    let (get_CONTEXT_LOST_WEBGL : 'tags this -> GLenum.t) =
      fun (x8031 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8031)
             "CONTEXT_LOST_WEBGL")
    let (get_CULL_FACE : 'tags this -> GLenum.t) =
      fun (x8033 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8033) "CULL_FACE")
    let (get_CULL_FACE_MODE : 'tags this -> GLenum.t) =
      fun (x8035 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8035) "CULL_FACE_MODE")
    let (get_CURRENT_PROGRAM : 'tags this -> GLenum.t) =
      fun (x8037 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8037) "CURRENT_PROGRAM")
    let (get_CURRENT_VERTEX_ATTRIB : 'tags this -> GLenum.t) =
      fun (x8039 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8039)
             "CURRENT_VERTEX_ATTRIB")
    let (get_CW : 'tags this -> GLenum.t) =
      fun (x8041 : 'tags this) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x8041) "CW")
    let (get_DECR : 'tags this -> GLenum.t) =
      fun (x8043 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8043) "DECR")
    let (get_DECR_WRAP : 'tags this -> GLenum.t) =
      fun (x8045 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8045) "DECR_WRAP")
    let (get_DELETE_STATUS : 'tags this -> GLenum.t) =
      fun (x8047 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8047) "DELETE_STATUS")
    let (get_DEPTH_ATTACHMENT : 'tags this -> GLenum.t) =
      fun (x8049 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8049) "DEPTH_ATTACHMENT")
    let (get_DEPTH_BITS : 'tags this -> GLenum.t) =
      fun (x8051 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8051) "DEPTH_BITS")
    let (get_DEPTH_BUFFER_BIT : 'tags this -> GLenum.t) =
      fun (x8053 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8053) "DEPTH_BUFFER_BIT")
    let (get_DEPTH_CLEAR_VALUE : 'tags this -> GLenum.t) =
      fun (x8055 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8055)
             "DEPTH_CLEAR_VALUE")
    let (get_DEPTH_COMPONENT : 'tags this -> GLenum.t) =
      fun (x8057 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8057) "DEPTH_COMPONENT")
    let (get_DEPTH_COMPONENT16 : 'tags this -> GLenum.t) =
      fun (x8059 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8059)
             "DEPTH_COMPONENT16")
    let (get_DEPTH_FUNC : 'tags this -> GLenum.t) =
      fun (x8061 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8061) "DEPTH_FUNC")
    let (get_DEPTH_RANGE : 'tags this -> GLenum.t) =
      fun (x8063 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8063) "DEPTH_RANGE")
    let (get_DEPTH_STENCIL : 'tags this -> GLenum.t) =
      fun (x8065 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8065) "DEPTH_STENCIL")
    let (get_DEPTH_STENCIL_ATTACHMENT : 'tags this -> GLenum.t) =
      fun (x8067 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8067)
             "DEPTH_STENCIL_ATTACHMENT")
    let (get_DEPTH_TEST : 'tags this -> GLenum.t) =
      fun (x8069 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8069) "DEPTH_TEST")
    let (get_DEPTH_WRITEMASK : 'tags this -> GLenum.t) =
      fun (x8071 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8071) "DEPTH_WRITEMASK")
    let (get_DITHER : 'tags this -> GLenum.t) =
      fun (x8073 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8073) "DITHER")
    let (get_DONT_CARE : 'tags this -> GLenum.t) =
      fun (x8075 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8075) "DONT_CARE")
    let (get_DST_ALPHA : 'tags this -> GLenum.t) =
      fun (x8077 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8077) "DST_ALPHA")
    let (get_DST_COLOR : 'tags this -> GLenum.t) =
      fun (x8079 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8079) "DST_COLOR")
    let (get_DYNAMIC_DRAW : 'tags this -> GLenum.t) =
      fun (x8081 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8081) "DYNAMIC_DRAW")
    let (get_ELEMENT_ARRAY_BUFFER : 'tags this -> GLenum.t) =
      fun (x8083 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8083)
             "ELEMENT_ARRAY_BUFFER")
    let (get_ELEMENT_ARRAY_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x8085 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8085)
             "ELEMENT_ARRAY_BUFFER_BINDING")
    let (get_EQUAL : 'tags this -> GLenum.t) =
      fun (x8087 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8087) "EQUAL")
    let (get_FASTEST : 'tags this -> GLenum.t) =
      fun (x8089 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8089) "FASTEST")
    let (get_FLOAT : 'tags this -> GLenum.t) =
      fun (x8091 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8091) "FLOAT")
    let (get_FLOAT_MAT2 : 'tags this -> GLenum.t) =
      fun (x8093 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8093) "FLOAT_MAT2")
    let (get_FLOAT_MAT3 : 'tags this -> GLenum.t) =
      fun (x8095 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8095) "FLOAT_MAT3")
    let (get_FLOAT_MAT4 : 'tags this -> GLenum.t) =
      fun (x8097 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8097) "FLOAT_MAT4")
    let (get_FLOAT_VEC2 : 'tags this -> GLenum.t) =
      fun (x8099 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8099) "FLOAT_VEC2")
    let (get_FLOAT_VEC3 : 'tags this -> GLenum.t) =
      fun (x8101 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8101) "FLOAT_VEC3")
    let (get_FLOAT_VEC4 : 'tags this -> GLenum.t) =
      fun (x8103 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8103) "FLOAT_VEC4")
    let (get_FRAGMENT_SHADER : 'tags this -> GLenum.t) =
      fun (x8105 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8105) "FRAGMENT_SHADER")
    let (get_FRAMEBUFFER : 'tags this -> GLenum.t) =
      fun (x8107 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8107) "FRAMEBUFFER")
    let (get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME : 'tags this -> GLenum.t) =
      fun (x8109 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8109)
             "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME")
    let (get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE : 'tags this -> GLenum.t) =
      fun (x8111 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8111)
             "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE :
      'tags this -> GLenum.t) =
      fun (x8113 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8113)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL : 'tags this -> GLenum.t) =
      fun (x8115 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8115)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL")
    let (get_FRAMEBUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x8117 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8117)
             "FRAMEBUFFER_BINDING")
    let (get_FRAMEBUFFER_COMPLETE : 'tags this -> GLenum.t) =
      fun (x8119 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8119)
             "FRAMEBUFFER_COMPLETE")
    let (get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT : 'tags this -> GLenum.t) =
      fun (x8121 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8121)
             "FRAMEBUFFER_INCOMPLETE_ATTACHMENT")
    let (get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS : 'tags this -> GLenum.t) =
      fun (x8123 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8123)
             "FRAMEBUFFER_INCOMPLETE_DIMENSIONS")
    let (get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT :
      'tags this -> GLenum.t) =
      fun (x8125 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8125)
             "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT")
    let (get_FRAMEBUFFER_UNSUPPORTED : 'tags this -> GLenum.t) =
      fun (x8127 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8127)
             "FRAMEBUFFER_UNSUPPORTED")
    let (get_FRONT : 'tags this -> GLenum.t) =
      fun (x8129 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8129) "FRONT")
    let (get_FRONT_AND_BACK : 'tags this -> GLenum.t) =
      fun (x8131 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8131) "FRONT_AND_BACK")
    let (get_FRONT_FACE : 'tags this -> GLenum.t) =
      fun (x8133 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8133) "FRONT_FACE")
    let (get_FUNC_ADD : 'tags this -> GLenum.t) =
      fun (x8135 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8135) "FUNC_ADD")
    let (get_FUNC_REVERSE_SUBTRACT : 'tags this -> GLenum.t) =
      fun (x8137 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8137)
             "FUNC_REVERSE_SUBTRACT")
    let (get_FUNC_SUBTRACT : 'tags this -> GLenum.t) =
      fun (x8139 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8139) "FUNC_SUBTRACT")
    let (get_GENERATE_MIPMAP_HINT : 'tags this -> GLenum.t) =
      fun (x8141 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8141)
             "GENERATE_MIPMAP_HINT")
    let (get_GEQUAL : 'tags this -> GLenum.t) =
      fun (x8143 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8143) "GEQUAL")
    let (get_GREATER : 'tags this -> GLenum.t) =
      fun (x8145 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8145) "GREATER")
    let (get_GREEN_BITS : 'tags this -> GLenum.t) =
      fun (x8147 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8147) "GREEN_BITS")
    let (get_HIGH_FLOAT : 'tags this -> GLenum.t) =
      fun (x8149 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8149) "HIGH_FLOAT")
    let (get_HIGH_INT : 'tags this -> GLenum.t) =
      fun (x8151 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8151) "HIGH_INT")
    let (get_IMPLEMENTATION_COLOR_READ_FORMAT : 'tags this -> GLenum.t) =
      fun (x8153 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8153)
             "IMPLEMENTATION_COLOR_READ_FORMAT")
    let (get_IMPLEMENTATION_COLOR_READ_TYPE : 'tags this -> GLenum.t) =
      fun (x8155 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8155)
             "IMPLEMENTATION_COLOR_READ_TYPE")
    let (get_INCR : 'tags this -> GLenum.t) =
      fun (x8157 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8157) "INCR")
    let (get_INCR_WRAP : 'tags this -> GLenum.t) =
      fun (x8159 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8159) "INCR_WRAP")
    let (get_INT : 'tags this -> GLenum.t) =
      fun (x8161 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8161) "INT")
    let (get_INT_VEC2 : 'tags this -> GLenum.t) =
      fun (x8163 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8163) "INT_VEC2")
    let (get_INT_VEC3 : 'tags this -> GLenum.t) =
      fun (x8165 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8165) "INT_VEC3")
    let (get_INT_VEC4 : 'tags this -> GLenum.t) =
      fun (x8167 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8167) "INT_VEC4")
    let (get_INVALID_ENUM : 'tags this -> GLenum.t) =
      fun (x8169 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8169) "INVALID_ENUM")
    let (get_INVALID_FRAMEBUFFER_OPERATION : 'tags this -> GLenum.t) =
      fun (x8171 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8171)
             "INVALID_FRAMEBUFFER_OPERATION")
    let (get_INVALID_OPERATION : 'tags this -> GLenum.t) =
      fun (x8173 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8173)
             "INVALID_OPERATION")
    let (get_INVALID_VALUE : 'tags this -> GLenum.t) =
      fun (x8175 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8175) "INVALID_VALUE")
    let (get_INVERT : 'tags this -> GLenum.t) =
      fun (x8177 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8177) "INVERT")
    let (get_KEEP : 'tags this -> GLenum.t) =
      fun (x8179 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8179) "KEEP")
    let (get_LEQUAL : 'tags this -> GLenum.t) =
      fun (x8181 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8181) "LEQUAL")
    let (get_LESS : 'tags this -> GLenum.t) =
      fun (x8183 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8183) "LESS")
    let (get_LINEAR : 'tags this -> GLenum.t) =
      fun (x8185 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8185) "LINEAR")
    let (get_LINEAR_MIPMAP_LINEAR : 'tags this -> GLenum.t) =
      fun (x8187 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8187)
             "LINEAR_MIPMAP_LINEAR")
    let (get_LINEAR_MIPMAP_NEAREST : 'tags this -> GLenum.t) =
      fun (x8189 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8189)
             "LINEAR_MIPMAP_NEAREST")
    let (get_LINES : 'tags this -> GLenum.t) =
      fun (x8191 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8191) "LINES")
    let (get_LINE_LOOP : 'tags this -> GLenum.t) =
      fun (x8193 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8193) "LINE_LOOP")
    let (get_LINE_STRIP : 'tags this -> GLenum.t) =
      fun (x8195 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8195) "LINE_STRIP")
    let (get_LINE_WIDTH : 'tags this -> GLenum.t) =
      fun (x8197 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8197) "LINE_WIDTH")
    let (get_LINK_STATUS : 'tags this -> GLenum.t) =
      fun (x8199 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8199) "LINK_STATUS")
    let (get_LOW_FLOAT : 'tags this -> GLenum.t) =
      fun (x8201 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8201) "LOW_FLOAT")
    let (get_LOW_INT : 'tags this -> GLenum.t) =
      fun (x8203 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8203) "LOW_INT")
    let (get_LUMINANCE : 'tags this -> GLenum.t) =
      fun (x8205 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8205) "LUMINANCE")
    let (get_LUMINANCE_ALPHA : 'tags this -> GLenum.t) =
      fun (x8207 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8207) "LUMINANCE_ALPHA")
    let (get_MAX_COMBINED_TEXTURE_IMAGE_UNITS : 'tags this -> GLenum.t) =
      fun (x8209 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8209)
             "MAX_COMBINED_TEXTURE_IMAGE_UNITS")
    let (get_MAX_CUBE_MAP_TEXTURE_SIZE : 'tags this -> GLenum.t) =
      fun (x8211 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8211)
             "MAX_CUBE_MAP_TEXTURE_SIZE")
    let (get_MAX_FRAGMENT_UNIFORM_VECTORS : 'tags this -> GLenum.t) =
      fun (x8213 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8213)
             "MAX_FRAGMENT_UNIFORM_VECTORS")
    let (get_MAX_RENDERBUFFER_SIZE : 'tags this -> GLenum.t) =
      fun (x8215 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8215)
             "MAX_RENDERBUFFER_SIZE")
    let (get_MAX_TEXTURE_IMAGE_UNITS : 'tags this -> GLenum.t) =
      fun (x8217 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8217)
             "MAX_TEXTURE_IMAGE_UNITS")
    let (get_MAX_TEXTURE_SIZE : 'tags this -> GLenum.t) =
      fun (x8219 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8219) "MAX_TEXTURE_SIZE")
    let (get_MAX_VARYING_VECTORS : 'tags this -> GLenum.t) =
      fun (x8221 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8221)
             "MAX_VARYING_VECTORS")
    let (get_MAX_VERTEX_ATTRIBS : 'tags this -> GLenum.t) =
      fun (x8223 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8223)
             "MAX_VERTEX_ATTRIBS")
    let (get_MAX_VERTEX_TEXTURE_IMAGE_UNITS : 'tags this -> GLenum.t) =
      fun (x8225 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8225)
             "MAX_VERTEX_TEXTURE_IMAGE_UNITS")
    let (get_MAX_VERTEX_UNIFORM_VECTORS : 'tags this -> GLenum.t) =
      fun (x8227 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8227)
             "MAX_VERTEX_UNIFORM_VECTORS")
    let (get_MAX_VIEWPORT_DIMS : 'tags this -> GLenum.t) =
      fun (x8229 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8229)
             "MAX_VIEWPORT_DIMS")
    let (get_MEDIUM_FLOAT : 'tags this -> GLenum.t) =
      fun (x8231 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8231) "MEDIUM_FLOAT")
    let (get_MEDIUM_INT : 'tags this -> GLenum.t) =
      fun (x8233 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8233) "MEDIUM_INT")
    let (get_MIRRORED_REPEAT : 'tags this -> GLenum.t) =
      fun (x8235 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8235) "MIRRORED_REPEAT")
    let (get_NEAREST : 'tags this -> GLenum.t) =
      fun (x8237 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8237) "NEAREST")
    let (get_NEAREST_MIPMAP_LINEAR : 'tags this -> GLenum.t) =
      fun (x8239 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8239)
             "NEAREST_MIPMAP_LINEAR")
    let (get_NEAREST_MIPMAP_NEAREST : 'tags this -> GLenum.t) =
      fun (x8241 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8241)
             "NEAREST_MIPMAP_NEAREST")
    let (get_NEVER : 'tags this -> GLenum.t) =
      fun (x8243 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8243) "NEVER")
    let (get_NICEST : 'tags this -> GLenum.t) =
      fun (x8245 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8245) "NICEST")
    let (get_NONE : 'tags this -> GLenum.t) =
      fun (x8247 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8247) "NONE")
    let (get_NOTEQUAL : 'tags this -> GLenum.t) =
      fun (x8249 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8249) "NOTEQUAL")
    let (get_NO_ERROR : 'tags this -> GLenum.t) =
      fun (x8251 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8251) "NO_ERROR")
    let (get_ONE : 'tags this -> GLenum.t) =
      fun (x8253 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8253) "ONE")
    let (get_ONE_MINUS_CONSTANT_ALPHA : 'tags this -> GLenum.t) =
      fun (x8255 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8255)
             "ONE_MINUS_CONSTANT_ALPHA")
    let (get_ONE_MINUS_CONSTANT_COLOR : 'tags this -> GLenum.t) =
      fun (x8257 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8257)
             "ONE_MINUS_CONSTANT_COLOR")
    let (get_ONE_MINUS_DST_ALPHA : 'tags this -> GLenum.t) =
      fun (x8259 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8259)
             "ONE_MINUS_DST_ALPHA")
    let (get_ONE_MINUS_DST_COLOR : 'tags this -> GLenum.t) =
      fun (x8261 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8261)
             "ONE_MINUS_DST_COLOR")
    let (get_ONE_MINUS_SRC_ALPHA : 'tags this -> GLenum.t) =
      fun (x8263 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8263)
             "ONE_MINUS_SRC_ALPHA")
    let (get_ONE_MINUS_SRC_COLOR : 'tags this -> GLenum.t) =
      fun (x8265 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8265)
             "ONE_MINUS_SRC_COLOR")
    let (get_OUT_OF_MEMORY : 'tags this -> GLenum.t) =
      fun (x8267 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8267) "OUT_OF_MEMORY")
    let (get_PACK_ALIGNMENT : 'tags this -> GLenum.t) =
      fun (x8269 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8269) "PACK_ALIGNMENT")
    let (get_POINTS : 'tags this -> GLenum.t) =
      fun (x8271 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8271) "POINTS")
    let (get_POLYGON_OFFSET_FACTOR : 'tags this -> GLenum.t) =
      fun (x8273 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8273)
             "POLYGON_OFFSET_FACTOR")
    let (get_POLYGON_OFFSET_FILL : 'tags this -> GLenum.t) =
      fun (x8275 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8275)
             "POLYGON_OFFSET_FILL")
    let (get_POLYGON_OFFSET_UNITS : 'tags this -> GLenum.t) =
      fun (x8277 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8277)
             "POLYGON_OFFSET_UNITS")
    let (get_RED_BITS : 'tags this -> GLenum.t) =
      fun (x8279 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8279) "RED_BITS")
    let (get_RENDERBUFFER : 'tags this -> GLenum.t) =
      fun (x8281 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8281) "RENDERBUFFER")
    let (get_RENDERBUFFER_ALPHA_SIZE : 'tags this -> GLenum.t) =
      fun (x8283 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8283)
             "RENDERBUFFER_ALPHA_SIZE")
    let (get_RENDERBUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x8285 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8285)
             "RENDERBUFFER_BINDING")
    let (get_RENDERBUFFER_BLUE_SIZE : 'tags this -> GLenum.t) =
      fun (x8287 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8287)
             "RENDERBUFFER_BLUE_SIZE")
    let (get_RENDERBUFFER_DEPTH_SIZE : 'tags this -> GLenum.t) =
      fun (x8289 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8289)
             "RENDERBUFFER_DEPTH_SIZE")
    let (get_RENDERBUFFER_GREEN_SIZE : 'tags this -> GLenum.t) =
      fun (x8291 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8291)
             "RENDERBUFFER_GREEN_SIZE")
    let (get_RENDERBUFFER_HEIGHT : 'tags this -> GLenum.t) =
      fun (x8293 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8293)
             "RENDERBUFFER_HEIGHT")
    let (get_RENDERBUFFER_INTERNAL_FORMAT : 'tags this -> GLenum.t) =
      fun (x8295 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8295)
             "RENDERBUFFER_INTERNAL_FORMAT")
    let (get_RENDERBUFFER_RED_SIZE : 'tags this -> GLenum.t) =
      fun (x8297 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8297)
             "RENDERBUFFER_RED_SIZE")
    let (get_RENDERBUFFER_STENCIL_SIZE : 'tags this -> GLenum.t) =
      fun (x8299 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8299)
             "RENDERBUFFER_STENCIL_SIZE")
    let (get_RENDERBUFFER_WIDTH : 'tags this -> GLenum.t) =
      fun (x8301 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8301)
             "RENDERBUFFER_WIDTH")
    let (get_RENDERER : 'tags this -> GLenum.t) =
      fun (x8303 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8303) "RENDERER")
    let (get_REPEAT : 'tags this -> GLenum.t) =
      fun (x8305 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8305) "REPEAT")
    let (get_REPLACE : 'tags this -> GLenum.t) =
      fun (x8307 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8307) "REPLACE")
    let (get_RGB : 'tags this -> GLenum.t) =
      fun (x8309 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8309) "RGB")
    let (get_RGB565 : 'tags this -> GLenum.t) =
      fun (x8311 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8311) "RGB565")
    let (get_RGB5_A1 : 'tags this -> GLenum.t) =
      fun (x8313 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8313) "RGB5_A1")
    let (get_RGBA : 'tags this -> GLenum.t) =
      fun (x8315 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8315) "RGBA")
    let (get_RGBA4 : 'tags this -> GLenum.t) =
      fun (x8317 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8317) "RGBA4")
    let (get_SAMPLER_2D : 'tags this -> GLenum.t) =
      fun (x8319 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8319) "SAMPLER_2D")
    let (get_SAMPLER_CUBE : 'tags this -> GLenum.t) =
      fun (x8321 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8321) "SAMPLER_CUBE")
    let (get_SAMPLES : 'tags this -> GLenum.t) =
      fun (x8323 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8323) "SAMPLES")
    let (get_SAMPLE_ALPHA_TO_COVERAGE : 'tags this -> GLenum.t) =
      fun (x8325 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8325)
             "SAMPLE_ALPHA_TO_COVERAGE")
    let (get_SAMPLE_BUFFERS : 'tags this -> GLenum.t) =
      fun (x8327 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8327) "SAMPLE_BUFFERS")
    let (get_SAMPLE_COVERAGE : 'tags this -> GLenum.t) =
      fun (x8329 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8329) "SAMPLE_COVERAGE")
    let (get_SAMPLE_COVERAGE_INVERT : 'tags this -> GLenum.t) =
      fun (x8331 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8331)
             "SAMPLE_COVERAGE_INVERT")
    let (get_SAMPLE_COVERAGE_VALUE : 'tags this -> GLenum.t) =
      fun (x8333 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8333)
             "SAMPLE_COVERAGE_VALUE")
    let (get_SCISSOR_BOX : 'tags this -> GLenum.t) =
      fun (x8335 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8335) "SCISSOR_BOX")
    let (get_SCISSOR_TEST : 'tags this -> GLenum.t) =
      fun (x8337 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8337) "SCISSOR_TEST")
    let (get_SHADER_TYPE : 'tags this -> GLenum.t) =
      fun (x8339 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8339) "SHADER_TYPE")
    let (get_SHADING_LANGUAGE_VERSION : 'tags this -> GLenum.t) =
      fun (x8341 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8341)
             "SHADING_LANGUAGE_VERSION")
    let (get_SHORT : 'tags this -> GLenum.t) =
      fun (x8343 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8343) "SHORT")
    let (get_SRC_ALPHA : 'tags this -> GLenum.t) =
      fun (x8345 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8345) "SRC_ALPHA")
    let (get_SRC_ALPHA_SATURATE : 'tags this -> GLenum.t) =
      fun (x8347 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8347)
             "SRC_ALPHA_SATURATE")
    let (get_SRC_COLOR : 'tags this -> GLenum.t) =
      fun (x8349 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8349) "SRC_COLOR")
    let (get_STATIC_DRAW : 'tags this -> GLenum.t) =
      fun (x8351 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8351) "STATIC_DRAW")
    let (get_STENCIL_ATTACHMENT : 'tags this -> GLenum.t) =
      fun (x8353 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8353)
             "STENCIL_ATTACHMENT")
    let (get_STENCIL_BACK_FAIL : 'tags this -> GLenum.t) =
      fun (x8355 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8355)
             "STENCIL_BACK_FAIL")
    let (get_STENCIL_BACK_FUNC : 'tags this -> GLenum.t) =
      fun (x8357 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8357)
             "STENCIL_BACK_FUNC")
    let (get_STENCIL_BACK_PASS_DEPTH_FAIL : 'tags this -> GLenum.t) =
      fun (x8359 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8359)
             "STENCIL_BACK_PASS_DEPTH_FAIL")
    let (get_STENCIL_BACK_PASS_DEPTH_PASS : 'tags this -> GLenum.t) =
      fun (x8361 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8361)
             "STENCIL_BACK_PASS_DEPTH_PASS")
    let (get_STENCIL_BACK_REF : 'tags this -> GLenum.t) =
      fun (x8363 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8363) "STENCIL_BACK_REF")
    let (get_STENCIL_BACK_VALUE_MASK : 'tags this -> GLenum.t) =
      fun (x8365 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8365)
             "STENCIL_BACK_VALUE_MASK")
    let (get_STENCIL_BACK_WRITEMASK : 'tags this -> GLenum.t) =
      fun (x8367 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8367)
             "STENCIL_BACK_WRITEMASK")
    let (get_STENCIL_BITS : 'tags this -> GLenum.t) =
      fun (x8369 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8369) "STENCIL_BITS")
    let (get_STENCIL_BUFFER_BIT : 'tags this -> GLenum.t) =
      fun (x8371 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8371)
             "STENCIL_BUFFER_BIT")
    let (get_STENCIL_CLEAR_VALUE : 'tags this -> GLenum.t) =
      fun (x8373 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8373)
             "STENCIL_CLEAR_VALUE")
    let (get_STENCIL_FAIL : 'tags this -> GLenum.t) =
      fun (x8375 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8375) "STENCIL_FAIL")
    let (get_STENCIL_FUNC : 'tags this -> GLenum.t) =
      fun (x8377 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8377) "STENCIL_FUNC")
    let (get_STENCIL_INDEX8 : 'tags this -> GLenum.t) =
      fun (x8379 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8379) "STENCIL_INDEX8")
    let (get_STENCIL_PASS_DEPTH_FAIL : 'tags this -> GLenum.t) =
      fun (x8381 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8381)
             "STENCIL_PASS_DEPTH_FAIL")
    let (get_STENCIL_PASS_DEPTH_PASS : 'tags this -> GLenum.t) =
      fun (x8383 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8383)
             "STENCIL_PASS_DEPTH_PASS")
    let (get_STENCIL_REF : 'tags this -> GLenum.t) =
      fun (x8385 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8385) "STENCIL_REF")
    let (get_STENCIL_TEST : 'tags this -> GLenum.t) =
      fun (x8387 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8387) "STENCIL_TEST")
    let (get_STENCIL_VALUE_MASK : 'tags this -> GLenum.t) =
      fun (x8389 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8389)
             "STENCIL_VALUE_MASK")
    let (get_STENCIL_WRITEMASK : 'tags this -> GLenum.t) =
      fun (x8391 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8391)
             "STENCIL_WRITEMASK")
    let (get_STREAM_DRAW : 'tags this -> GLenum.t) =
      fun (x8393 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8393) "STREAM_DRAW")
    let (get_SUBPIXEL_BITS : 'tags this -> GLenum.t) =
      fun (x8395 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8395) "SUBPIXEL_BITS")
    let (get_TEXTURE : 'tags this -> GLenum.t) =
      fun (x8397 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8397) "TEXTURE")
    let (get_TEXTURE0 : 'tags this -> GLenum.t) =
      fun (x8399 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8399) "TEXTURE0")
    let (get_TEXTURE1 : 'tags this -> GLenum.t) =
      fun (x8401 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8401) "TEXTURE1")
    let (get_TEXTURE10 : 'tags this -> GLenum.t) =
      fun (x8403 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8403) "TEXTURE10")
    let (get_TEXTURE11 : 'tags this -> GLenum.t) =
      fun (x8405 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8405) "TEXTURE11")
    let (get_TEXTURE12 : 'tags this -> GLenum.t) =
      fun (x8407 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8407) "TEXTURE12")
    let (get_TEXTURE13 : 'tags this -> GLenum.t) =
      fun (x8409 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8409) "TEXTURE13")
    let (get_TEXTURE14 : 'tags this -> GLenum.t) =
      fun (x8411 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8411) "TEXTURE14")
    let (get_TEXTURE15 : 'tags this -> GLenum.t) =
      fun (x8413 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8413) "TEXTURE15")
    let (get_TEXTURE16 : 'tags this -> GLenum.t) =
      fun (x8415 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8415) "TEXTURE16")
    let (get_TEXTURE17 : 'tags this -> GLenum.t) =
      fun (x8417 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8417) "TEXTURE17")
    let (get_TEXTURE18 : 'tags this -> GLenum.t) =
      fun (x8419 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8419) "TEXTURE18")
    let (get_TEXTURE19 : 'tags this -> GLenum.t) =
      fun (x8421 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8421) "TEXTURE19")
    let (get_TEXTURE2 : 'tags this -> GLenum.t) =
      fun (x8423 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8423) "TEXTURE2")
    let (get_TEXTURE20 : 'tags this -> GLenum.t) =
      fun (x8425 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8425) "TEXTURE20")
    let (get_TEXTURE21 : 'tags this -> GLenum.t) =
      fun (x8427 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8427) "TEXTURE21")
    let (get_TEXTURE22 : 'tags this -> GLenum.t) =
      fun (x8429 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8429) "TEXTURE22")
    let (get_TEXTURE23 : 'tags this -> GLenum.t) =
      fun (x8431 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8431) "TEXTURE23")
    let (get_TEXTURE24 : 'tags this -> GLenum.t) =
      fun (x8433 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8433) "TEXTURE24")
    let (get_TEXTURE25 : 'tags this -> GLenum.t) =
      fun (x8435 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8435) "TEXTURE25")
    let (get_TEXTURE26 : 'tags this -> GLenum.t) =
      fun (x8437 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8437) "TEXTURE26")
    let (get_TEXTURE27 : 'tags this -> GLenum.t) =
      fun (x8439 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8439) "TEXTURE27")
    let (get_TEXTURE28 : 'tags this -> GLenum.t) =
      fun (x8441 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8441) "TEXTURE28")
    let (get_TEXTURE29 : 'tags this -> GLenum.t) =
      fun (x8443 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8443) "TEXTURE29")
    let (get_TEXTURE3 : 'tags this -> GLenum.t) =
      fun (x8445 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8445) "TEXTURE3")
    let (get_TEXTURE30 : 'tags this -> GLenum.t) =
      fun (x8447 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8447) "TEXTURE30")
    let (get_TEXTURE31 : 'tags this -> GLenum.t) =
      fun (x8449 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8449) "TEXTURE31")
    let (get_TEXTURE4 : 'tags this -> GLenum.t) =
      fun (x8451 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8451) "TEXTURE4")
    let (get_TEXTURE5 : 'tags this -> GLenum.t) =
      fun (x8453 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8453) "TEXTURE5")
    let (get_TEXTURE6 : 'tags this -> GLenum.t) =
      fun (x8455 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8455) "TEXTURE6")
    let (get_TEXTURE7 : 'tags this -> GLenum.t) =
      fun (x8457 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8457) "TEXTURE7")
    let (get_TEXTURE8 : 'tags this -> GLenum.t) =
      fun (x8459 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8459) "TEXTURE8")
    let (get_TEXTURE9 : 'tags this -> GLenum.t) =
      fun (x8461 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8461) "TEXTURE9")
    let (get_TEXTURE_2D : 'tags this -> GLenum.t) =
      fun (x8463 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8463) "TEXTURE_2D")
    let (get_TEXTURE_BINDING_2D : 'tags this -> GLenum.t) =
      fun (x8465 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8465)
             "TEXTURE_BINDING_2D")
    let (get_TEXTURE_BINDING_CUBE_MAP : 'tags this -> GLenum.t) =
      fun (x8467 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8467)
             "TEXTURE_BINDING_CUBE_MAP")
    let (get_TEXTURE_CUBE_MAP : 'tags this -> GLenum.t) =
      fun (x8469 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8469) "TEXTURE_CUBE_MAP")
    let (get_TEXTURE_CUBE_MAP_NEGATIVE_X : 'tags this -> GLenum.t) =
      fun (x8471 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8471)
             "TEXTURE_CUBE_MAP_NEGATIVE_X")
    let (get_TEXTURE_CUBE_MAP_NEGATIVE_Y : 'tags this -> GLenum.t) =
      fun (x8473 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8473)
             "TEXTURE_CUBE_MAP_NEGATIVE_Y")
    let (get_TEXTURE_CUBE_MAP_NEGATIVE_Z : 'tags this -> GLenum.t) =
      fun (x8475 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8475)
             "TEXTURE_CUBE_MAP_NEGATIVE_Z")
    let (get_TEXTURE_CUBE_MAP_POSITIVE_X : 'tags this -> GLenum.t) =
      fun (x8477 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8477)
             "TEXTURE_CUBE_MAP_POSITIVE_X")
    let (get_TEXTURE_CUBE_MAP_POSITIVE_Y : 'tags this -> GLenum.t) =
      fun (x8479 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8479)
             "TEXTURE_CUBE_MAP_POSITIVE_Y")
    let (get_TEXTURE_CUBE_MAP_POSITIVE_Z : 'tags this -> GLenum.t) =
      fun (x8481 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8481)
             "TEXTURE_CUBE_MAP_POSITIVE_Z")
    let (get_TEXTURE_MAG_FILTER : 'tags this -> GLenum.t) =
      fun (x8483 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8483)
             "TEXTURE_MAG_FILTER")
    let (get_TEXTURE_MIN_FILTER : 'tags this -> GLenum.t) =
      fun (x8485 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8485)
             "TEXTURE_MIN_FILTER")
    let (get_TEXTURE_WRAP_S : 'tags this -> GLenum.t) =
      fun (x8487 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8487) "TEXTURE_WRAP_S")
    let (get_TEXTURE_WRAP_T : 'tags this -> GLenum.t) =
      fun (x8489 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8489) "TEXTURE_WRAP_T")
    let (get_TRIANGLES : 'tags this -> GLenum.t) =
      fun (x8491 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8491) "TRIANGLES")
    let (get_TRIANGLE_FAN : 'tags this -> GLenum.t) =
      fun (x8493 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8493) "TRIANGLE_FAN")
    let (get_TRIANGLE_STRIP : 'tags this -> GLenum.t) =
      fun (x8495 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8495) "TRIANGLE_STRIP")
    let (get_UNPACK_ALIGNMENT : 'tags this -> GLenum.t) =
      fun (x8497 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8497) "UNPACK_ALIGNMENT")
    let (get_UNPACK_COLORSPACE_CONVERSION_WEBGL : 'tags this -> GLenum.t) =
      fun (x8499 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8499)
             "UNPACK_COLORSPACE_CONVERSION_WEBGL")
    let (get_UNPACK_FLIP_Y_WEBGL : 'tags this -> GLenum.t) =
      fun (x8501 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8501)
             "UNPACK_FLIP_Y_WEBGL")
    let (get_UNPACK_PREMULTIPLY_ALPHA_WEBGL : 'tags this -> GLenum.t) =
      fun (x8503 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8503)
             "UNPACK_PREMULTIPLY_ALPHA_WEBGL")
    let (get_UNSIGNED_BYTE : 'tags this -> GLenum.t) =
      fun (x8505 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8505) "UNSIGNED_BYTE")
    let (get_UNSIGNED_INT : 'tags this -> GLenum.t) =
      fun (x8507 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8507) "UNSIGNED_INT")
    let (get_UNSIGNED_SHORT : 'tags this -> GLenum.t) =
      fun (x8509 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8509) "UNSIGNED_SHORT")
    let (get_UNSIGNED_SHORT_4_4_4_4 : 'tags this -> GLenum.t) =
      fun (x8511 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8511)
             "UNSIGNED_SHORT_4_4_4_4")
    let (get_UNSIGNED_SHORT_5_5_5_1 : 'tags this -> GLenum.t) =
      fun (x8513 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8513)
             "UNSIGNED_SHORT_5_5_5_1")
    let (get_UNSIGNED_SHORT_5_6_5 : 'tags this -> GLenum.t) =
      fun (x8515 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8515)
             "UNSIGNED_SHORT_5_6_5")
    let (get_VALIDATE_STATUS : 'tags this -> GLenum.t) =
      fun (x8517 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8517) "VALIDATE_STATUS")
    let (get_VENDOR : 'tags this -> GLenum.t) =
      fun (x8519 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8519) "VENDOR")
    let (get_VERSION : 'tags this -> GLenum.t) =
      fun (x8521 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8521) "VERSION")
    let (get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x8523 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8523)
             "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING")
    let (get_VERTEX_ATTRIB_ARRAY_ENABLED : 'tags this -> GLenum.t) =
      fun (x8525 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8525)
             "VERTEX_ATTRIB_ARRAY_ENABLED")
    let (get_VERTEX_ATTRIB_ARRAY_NORMALIZED : 'tags this -> GLenum.t) =
      fun (x8527 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8527)
             "VERTEX_ATTRIB_ARRAY_NORMALIZED")
    let (get_VERTEX_ATTRIB_ARRAY_POINTER : 'tags this -> GLenum.t) =
      fun (x8529 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8529)
             "VERTEX_ATTRIB_ARRAY_POINTER")
    let (get_VERTEX_ATTRIB_ARRAY_SIZE : 'tags this -> GLenum.t) =
      fun (x8531 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8531)
             "VERTEX_ATTRIB_ARRAY_SIZE")
    let (get_VERTEX_ATTRIB_ARRAY_STRIDE : 'tags this -> GLenum.t) =
      fun (x8533 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8533)
             "VERTEX_ATTRIB_ARRAY_STRIDE")
    let (get_VERTEX_ATTRIB_ARRAY_TYPE : 'tags this -> GLenum.t) =
      fun (x8535 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8535)
             "VERTEX_ATTRIB_ARRAY_TYPE")
    let (get_VERTEX_SHADER : 'tags this -> GLenum.t) =
      fun (x8537 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8537) "VERTEX_SHADER")
    let (get_VIEWPORT : 'tags this -> GLenum.t) =
      fun (x8539 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8539) "VIEWPORT")
    let (get_ZERO : 'tags this -> GLenum.t) =
      fun (x8541 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8541) "ZERO")
    let (vertexAttrib1fv' :
      'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x8546 : 'tags this) ->
        fun ~index:(x8543 : GLuint.t) ->
          fun ~values:(x8544 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x8546) "vertexAttrib1fv"
                 [|(GLuint.t_to_js x8543);(Iterable.t_1_to_js GLfloat.t_to_js
                                             x8544)|])
    let (vertexAttrib2fv' :
      'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x8551 : 'tags this) ->
        fun ~index:(x8548 : GLuint.t) ->
          fun ~values:(x8549 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x8551) "vertexAttrib2fv"
                 [|(GLuint.t_to_js x8548);(Iterable.t_1_to_js GLfloat.t_to_js
                                             x8549)|])
    let (vertexAttrib3fv' :
      'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x8556 : 'tags this) ->
        fun ~index:(x8553 : GLuint.t) ->
          fun ~values:(x8554 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x8556) "vertexAttrib3fv"
                 [|(GLuint.t_to_js x8553);(Iterable.t_1_to_js GLfloat.t_to_js
                                             x8554)|])
    let (vertexAttrib4fv' :
      'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x8561 : 'tags this) ->
        fun ~index:(x8558 : GLuint.t) ->
          fun ~values:(x8559 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x8561) "vertexAttrib4fv"
                 [|(GLuint.t_to_js x8558);(Iterable.t_1_to_js GLfloat.t_to_js
                                             x8559)|])
    let cast_from = Obj.magic
  end
module WebGLRenderingContext =
  struct
    type t =
      [ `WebGLRenderingContext  | `WebGLRenderingContextBase 
      | `WebGLRenderingContextOverloads ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8564 : Ojs.t) -> t_of_js x8564
    and t_0_to_js : t_0 -> Ojs.t = fun (x8563 : t) -> t_to_js x8563
    type tags =
      [ `WebGLRenderingContext  | `WebGLRenderingContextBase 
      | `WebGLRenderingContextOverloads ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLRenderingContext ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x8567 : Ojs.t) -> intf_of_js __tags_of_js x8567
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x8565 : __tags intf) -> intf_to_js __tags_to_js x8565
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") 
             [||])
    let (active_attributes : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ACTIVE_ATTRIBUTES")
    let (active_texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ACTIVE_TEXTURE")
    let (active_uniforms : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ACTIVE_UNIFORMS")
    let (aliased_line_width_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ALIASED_LINE_WIDTH_RANGE")
    let (aliased_point_size_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ALIASED_POINT_SIZE_RANGE")
    let (alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "ALPHA")
    let (alpha_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ALPHA_BITS")
    let (always : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "ALWAYS")
    let (array_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ARRAY_BUFFER")
    let (array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ARRAY_BUFFER_BINDING")
    let (attached_shaders : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ATTACHED_SHADERS")
    let (back : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "BACK")
    let (blend : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "BLEND")
    let (blend_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_COLOR")
    let (blend_dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_DST_ALPHA")
    let (blend_dst_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_DST_RGB")
    let (blend_equation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_EQUATION")
    let (blend_equation_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_EQUATION_ALPHA")
    let (blend_equation_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_EQUATION_RGB")
    let (blend_src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_SRC_ALPHA")
    let (blend_src_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_SRC_RGB")
    let (blue_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLUE_BITS")
    let (bool : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "BOOL")
    let (bool_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BOOL_VEC2")
    let (bool_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BOOL_VEC3")
    let (bool_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BOOL_VEC4")
    let (browser_default_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BROWSER_DEFAULT_WEBGL")
    let (buffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BUFFER_SIZE")
    let (buffer_usage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BUFFER_USAGE")
    let (byte : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "BYTE")
    let (ccw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "CCW")
    let (clamp_to_edge : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CLAMP_TO_EDGE")
    let (color_attachment0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COLOR_ATTACHMENT0")
    let (color_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COLOR_BUFFER_BIT")
    let (color_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COLOR_CLEAR_VALUE")
    let (color_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COLOR_WRITEMASK")
    let (compile_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COMPILE_STATUS")
    let (compressed_texture_formats : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COMPRESSED_TEXTURE_FORMATS")
    let (constant_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CONSTANT_ALPHA")
    let (constant_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CONSTANT_COLOR")
    let (context_lost_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CONTEXT_LOST_WEBGL")
    let (cull_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CULL_FACE")
    let (cull_face_mode : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CULL_FACE_MODE")
    let (current_program : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CURRENT_PROGRAM")
    let (current_vertex_attrib : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CURRENT_VERTEX_ATTRIB")
    let (cw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "CW")
    let (decr : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "DECR")
    let (decr_wrap : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DECR_WRAP")
    let (delete_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DELETE_STATUS")
    let (depth_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_ATTACHMENT")
    let (depth_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_BITS")
    let (depth_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_BUFFER_BIT")
    let (depth_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_CLEAR_VALUE")
    let (depth_component : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_COMPONENT")
    let (depth_component16 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_COMPONENT16")
    let (depth_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_FUNC")
    let (depth_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_RANGE")
    let (depth_stencil : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_STENCIL")
    let (depth_stencil_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_STENCIL_ATTACHMENT")
    let (depth_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_TEST")
    let (depth_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_WRITEMASK")
    let (dither : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "DITHER")
    let (dont_care : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DONT_CARE")
    let (dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DST_ALPHA")
    let (dst_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DST_COLOR")
    let (dynamic_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DYNAMIC_DRAW")
    let (element_array_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ELEMENT_ARRAY_BUFFER")
    let (element_array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ELEMENT_ARRAY_BUFFER_BINDING")
    let (equal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "EQUAL")
    let (fastest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FASTEST")
    let (float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "FLOAT")
    let (float_mat2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_MAT2")
    let (float_mat3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_MAT3")
    let (float_mat4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_MAT4")
    let (float_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_VEC2")
    let (float_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_VEC3")
    let (float_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_VEC4")
    let (fragment_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAGMENT_SHADER")
    let (framebuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER")
    let (framebuffer_attachment_object_name : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME")
    let (framebuffer_attachment_object_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE")
    let (framebuffer_attachment_texture_cube_map_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE")
    let (framebuffer_attachment_texture_level : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL")
    let (framebuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_BINDING")
    let (framebuffer_complete : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_COMPLETE")
    let (framebuffer_incomplete_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_INCOMPLETE_ATTACHMENT")
    let (framebuffer_incomplete_dimensions : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_INCOMPLETE_DIMENSIONS")
    let (framebuffer_incomplete_missing_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT")
    let (framebuffer_unsupported : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_UNSUPPORTED")
    let (front : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "FRONT")
    let (front_and_back : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRONT_AND_BACK")
    let (front_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRONT_FACE")
    let (func_add : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FUNC_ADD")
    let (func_reverse_subtract : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FUNC_REVERSE_SUBTRACT")
    let (func_subtract : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FUNC_SUBTRACT")
    let (generate_mipmap_hint : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "GENERATE_MIPMAP_HINT")
    let (gequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "GEQUAL")
    let (greater : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "GREATER")
    let (green_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "GREEN_BITS")
    let (high_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "HIGH_FLOAT")
    let (high_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "HIGH_INT")
    let (implementation_color_read_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "IMPLEMENTATION_COLOR_READ_FORMAT")
    let (implementation_color_read_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "IMPLEMENTATION_COLOR_READ_TYPE")
    let (incr : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "INCR")
    let (incr_wrap : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INCR_WRAP")
    let (int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "INT")
    let (int_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INT_VEC2")
    let (int_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INT_VEC3")
    let (int_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INT_VEC4")
    let (invalid_enum : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INVALID_ENUM")
    let (invalid_framebuffer_operation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INVALID_FRAMEBUFFER_OPERATION")
    let (invalid_operation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INVALID_OPERATION")
    let (invalid_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INVALID_VALUE")
    let (invert : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "INVERT")
    let (keep : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "KEEP")
    let (lequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "LEQUAL")
    let (less : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "LESS")
    let (linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "LINEAR")
    let (linear_mipmap_linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINEAR_MIPMAP_LINEAR")
    let (linear_mipmap_nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINEAR_MIPMAP_NEAREST")
    let (lines : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "LINES")
    let (line_loop : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINE_LOOP")
    let (line_strip : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINE_STRIP")
    let (line_width : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINE_WIDTH")
    let (link_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINK_STATUS")
    let (low_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LOW_FLOAT")
    let (low_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LOW_INT")
    let (luminance : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LUMINANCE")
    let (luminance_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LUMINANCE_ALPHA")
    let (max_combined_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_COMBINED_TEXTURE_IMAGE_UNITS")
    let (max_cube_map_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_CUBE_MAP_TEXTURE_SIZE")
    let (max_fragment_uniform_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_FRAGMENT_UNIFORM_VECTORS")
    let (max_renderbuffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_RENDERBUFFER_SIZE")
    let (max_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_TEXTURE_IMAGE_UNITS")
    let (max_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_TEXTURE_SIZE")
    let (max_varying_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VARYING_VECTORS")
    let (max_vertex_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VERTEX_ATTRIBS")
    let (max_vertex_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VERTEX_TEXTURE_IMAGE_UNITS")
    let (max_vertex_uniform_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VERTEX_UNIFORM_VECTORS")
    let (max_viewport_dims : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VIEWPORT_DIMS")
    let (medium_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MEDIUM_FLOAT")
    let (medium_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MEDIUM_INT")
    let (mirrored_repeat : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MIRRORED_REPEAT")
    let (nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NEAREST")
    let (nearest_mipmap_linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NEAREST_MIPMAP_LINEAR")
    let (nearest_mipmap_nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NEAREST_MIPMAP_NEAREST")
    let (never : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "NEVER")
    let (nicest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "NICEST")
    let (none : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "NONE")
    let (notequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NOTEQUAL")
    let (no_error : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NO_ERROR")
    let (one : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "ONE")
    let (one_minus_constant_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_CONSTANT_ALPHA")
    let (one_minus_constant_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_CONSTANT_COLOR")
    let (one_minus_dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_DST_ALPHA")
    let (one_minus_dst_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_DST_COLOR")
    let (one_minus_src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_SRC_ALPHA")
    let (one_minus_src_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_SRC_COLOR")
    let (out_of_memory : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "OUT_OF_MEMORY")
    let (pack_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "PACK_ALIGNMENT")
    let (points : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "POINTS")
    let (polygon_offset_factor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "POLYGON_OFFSET_FACTOR")
    let (polygon_offset_fill : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "POLYGON_OFFSET_FILL")
    let (polygon_offset_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "POLYGON_OFFSET_UNITS")
    let (red_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RED_BITS")
    let (renderbuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER")
    let (renderbuffer_alpha_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_ALPHA_SIZE")
    let (renderbuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_BINDING")
    let (renderbuffer_blue_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_BLUE_SIZE")
    let (renderbuffer_depth_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_DEPTH_SIZE")
    let (renderbuffer_green_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_GREEN_SIZE")
    let (renderbuffer_height : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_HEIGHT")
    let (renderbuffer_internal_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_INTERNAL_FORMAT")
    let (renderbuffer_red_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_RED_SIZE")
    let (renderbuffer_stencil_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_STENCIL_SIZE")
    let (renderbuffer_width : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_WIDTH")
    let (renderer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERER")
    let (repeat : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "REPEAT")
    let (replace : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "REPLACE")
    let (rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "RGB")
    let (rgb565 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "RGB565")
    let (rgb5_a1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RGB5_A1")
    let (rgba : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "RGBA")
    let (rgba4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "RGBA4")
    let (sampler_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLER_2D")
    let (sampler_cube : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLER_CUBE")
    let (samples : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLES")
    let (sample_alpha_to_coverage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_ALPHA_TO_COVERAGE")
    let (sample_buffers : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_BUFFERS")
    let (sample_coverage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_COVERAGE")
    let (sample_coverage_invert : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_COVERAGE_INVERT")
    let (sample_coverage_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_COVERAGE_VALUE")
    let (scissor_box : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SCISSOR_BOX")
    let (scissor_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SCISSOR_TEST")
    let (shader_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SHADER_TYPE")
    let (shading_language_version : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SHADING_LANGUAGE_VERSION")
    let (short : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "SHORT")
    let (src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SRC_ALPHA")
    let (src_alpha_saturate : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SRC_ALPHA_SATURATE")
    let (src_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SRC_COLOR")
    let (static_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STATIC_DRAW")
    let (stencil_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_ATTACHMENT")
    let (stencil_back_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_FAIL")
    let (stencil_back_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_FUNC")
    let (stencil_back_pass_depth_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_PASS_DEPTH_FAIL")
    let (stencil_back_pass_depth_pass : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_PASS_DEPTH_PASS")
    let (stencil_back_ref : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_REF")
    let (stencil_back_value_mask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_VALUE_MASK")
    let (stencil_back_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_WRITEMASK")
    let (stencil_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BITS")
    let (stencil_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BUFFER_BIT")
    let (stencil_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_CLEAR_VALUE")
    let (stencil_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_FAIL")
    let (stencil_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_FUNC")
    let (stencil_index8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_INDEX8")
    let (stencil_pass_depth_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_PASS_DEPTH_FAIL")
    let (stencil_pass_depth_pass : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_PASS_DEPTH_PASS")
    let (stencil_ref : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_REF")
    let (stencil_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_TEST")
    let (stencil_value_mask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_VALUE_MASK")
    let (stencil_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_WRITEMASK")
    let (stream_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STREAM_DRAW")
    let (subpixel_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SUBPIXEL_BITS")
    let (texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE")
    let (texture0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE0")
    let (texture1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE1")
    let (texture10 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE10")
    let (texture11 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE11")
    let (texture12 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE12")
    let (texture13 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE13")
    let (texture14 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE14")
    let (texture15 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE15")
    let (texture16 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE16")
    let (texture17 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE17")
    let (texture18 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE18")
    let (texture19 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE19")
    let (texture2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE2")
    let (texture20 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE20")
    let (texture21 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE21")
    let (texture22 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE22")
    let (texture23 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE23")
    let (texture24 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE24")
    let (texture25 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE25")
    let (texture26 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE26")
    let (texture27 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE27")
    let (texture28 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE28")
    let (texture29 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE29")
    let (texture3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE3")
    let (texture30 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE30")
    let (texture31 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE31")
    let (texture4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE4")
    let (texture5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE5")
    let (texture6 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE6")
    let (texture7 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE7")
    let (texture8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE8")
    let (texture9 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE9")
    let (texture_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_2D")
    let (texture_binding_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_BINDING_2D")
    let (texture_binding_cube_map : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_BINDING_CUBE_MAP")
    let (texture_cube_map : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP")
    let (texture_cube_map_negative_x : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_X")
    let (texture_cube_map_negative_y : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_Y")
    let (texture_cube_map_negative_z : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_Z")
    let (texture_cube_map_positive_x : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_X")
    let (texture_cube_map_positive_y : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_Y")
    let (texture_cube_map_positive_z : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_Z")
    let (texture_mag_filter : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_MAG_FILTER")
    let (texture_min_filter : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_MIN_FILTER")
    let (texture_wrap_s : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_WRAP_S")
    let (texture_wrap_t : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_WRAP_T")
    let (triangles : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TRIANGLES")
    let (triangle_fan : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TRIANGLE_FAN")
    let (triangle_strip : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TRIANGLE_STRIP")
    let (unpack_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNPACK_ALIGNMENT")
    let (unpack_colorspace_conversion_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNPACK_COLORSPACE_CONVERSION_WEBGL")
    let (unpack_flip_y_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNPACK_FLIP_Y_WEBGL")
    let (unpack_premultiply_alpha_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNPACK_PREMULTIPLY_ALPHA_WEBGL")
    let (unsigned_byte : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_BYTE")
    let (unsigned_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_INT")
    let (unsigned_short : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_SHORT")
    let (unsigned_short_4_4_4_4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_SHORT_4_4_4_4")
    let (unsigned_short_5_5_5_1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_SHORT_5_5_5_1")
    let (unsigned_short_5_6_5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_SHORT_5_6_5")
    let (validate_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VALIDATE_STATUS")
    let (vendor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "VENDOR")
    let (version : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERSION")
    let (vertex_attrib_array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING")
    let (vertex_attrib_array_enabled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_ENABLED")
    let (vertex_attrib_array_normalized : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_NORMALIZED")
    let (vertex_attrib_array_pointer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_POINTER")
    let (vertex_attrib_array_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_SIZE")
    let (vertex_attrib_array_stride : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_STRIDE")
    let (vertex_attrib_array_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_TYPE")
    let (vertex_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_SHADER")
    let (viewport : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VIEWPORT")
    let (zero : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "ZERO")
  end
module WebGLContextEventInit =
  struct
    type t = [ `EventInit  | `WebGLContextEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8570 : Ojs.t) -> t_of_js x8570
    and t_0_to_js : t_0 -> Ojs.t = fun (x8569 : t) -> t_to_js x8569
    type tags = [ `EventInit  | `WebGLContextEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLContextEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x8573 : Ojs.t) -> intf_of_js __tags_of_js x8573
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x8571 : __tags intf) -> intf_to_js __tags_to_js x8571
    let (get_statusMessage : 'tags this -> string option) =
      fun (x8575 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8575) "statusMessage")
    let (set_statusMessage : 'tags this -> string -> unit) =
      fun (x8578 : 'tags this) ->
        fun (x8579 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8578) "statusMessage"
            (Ojs.string_to_js x8579)
    let (create : ?statusMessage:string -> unit -> t) =
      fun ?statusMessage:(x8581 : string option) ->
        fun () ->
          let x8582 = Ojs.empty_obj () in
          (match x8581 with
           | Some x8583 ->
               Ojs.set_prop_ascii x8582 "statusMessage"
                 (Ojs.string_to_js x8583)
           | None -> ());
          t_of_js x8582
    let cast_from = Obj.magic
  end
module WebGLContextEvent =
  struct
    type t = [ `Event  | `WebGLContextEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8585 : Ojs.t) -> t_of_js x8585
    and t_0_to_js : t_0 -> Ojs.t = fun (x8584 : t) -> t_to_js x8584
    type tags = [ `Event  | `WebGLContextEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLContextEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x8588 : Ojs.t) -> intf_of_js __tags_of_js x8588
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x8586 : __tags intf) -> intf_to_js __tags_to_js x8586
    let (get_statusMessage : 'tags this -> string) =
      fun (x8590 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8590) "statusMessage")
    let (create : statusMessage:string -> unit -> t) =
      fun ~statusMessage:(x8592 : string) ->
        fun () ->
          let x8593 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x8593 "statusMessage" (Ojs.string_to_js x8592);
          t_of_js x8593
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLContextEvent") "prototype")
    let (create' :
      type_:string -> ?eventInit:WebGLContextEventInit.t -> unit -> t) =
      fun ~type_:(x8594 : string) ->
        fun ?eventInit:(x8595 : WebGLContextEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "WebGLContextEvent")
                 (let x8596 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x8596 "push" [|(Ojs.string_to_js x8594)|]);
                  (match x8595 with
                   | Some x8597 ->
                       ignore
                         (Ojs.call x8596 "push"
                            [|(WebGLContextEventInit.t_to_js x8597)|])
                   | None -> ());
                  x8596))
  end
module WebGL2RenderingContextOverloads =
  struct
    type t = [ `WebGL2RenderingContextOverloads ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8599 : Ojs.t) -> t_of_js x8599
    and t_0_to_js : t_0 -> Ojs.t = fun (x8598 : t) -> t_to_js x8598
    type tags = [ `WebGL2RenderingContextOverloads ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGL2RenderingContextOverloads ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x8602 : Ojs.t) -> intf_of_js __tags_of_js x8602
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x8600 : __tags intf) -> intf_to_js __tags_to_js x8600
    let (bufferData :
      'tags this ->
        target:GLenum.t -> size:GLsizeiptr.t -> usage:GLenum.t -> unit)
      =
      fun (x8607 : 'tags this) ->
        fun ~target:(x8604 : GLenum.t) ->
          fun ~size:(x8605 : GLsizeiptr.t) ->
            fun ~usage:(x8606 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x8607) "bufferData"
                   [|(GLenum.t_to_js x8604);(GLsizeiptr.t_to_js x8605);(
                     GLenum.t_to_js x8606)|])
    let (bufferData' :
      'tags this ->
        target:GLenum.t ->
          srcData:BufferSource.t option -> usage:GLenum.t -> unit)
      =
      fun (x8613 : 'tags this) ->
        fun ~target:(x8609 : GLenum.t) ->
          fun ~srcData:(x8610 : BufferSource.t option) ->
            fun ~usage:(x8612 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x8613) "bufferData"
                   [|(GLenum.t_to_js x8609);(Ojs.option_to_js
                                               BufferSource.t_to_js x8610);(
                     GLenum.t_to_js x8612)|])
    let (bufferData'' :
      'tags this ->
        target:GLenum.t ->
          srcData:ArrayBufferView.t_0 ->
            usage:GLenum.t ->
              srcOffset:GLuint.t -> ?length:GLuint.t -> unit -> unit)
      =
      fun (x8622 : 'tags this) ->
        fun ~target:(x8615 : GLenum.t) ->
          fun ~srcData:(x8616 : ArrayBufferView.t_0) ->
            fun ~usage:(x8617 : GLenum.t) ->
              fun ~srcOffset:(x8618 : GLuint.t) ->
                fun ?length:(x8619 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8624 = this_to_js Obj.magic x8622 in
                       Ojs.call (Ojs.get_prop_ascii x8624 "bufferData")
                         "apply"
                         [|x8624;((let x8620 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8620 "push"
                                        [|(GLenum.t_to_js x8615)|]);
                                   ignore
                                     (Ojs.call x8620 "push"
                                        [|(ArrayBufferView.t_0_to_js x8616)|]);
                                   ignore
                                     (Ojs.call x8620 "push"
                                        [|(GLenum.t_to_js x8617)|]);
                                   ignore
                                     (Ojs.call x8620 "push"
                                        [|(GLuint.t_to_js x8618)|]);
                                   (match x8619 with
                                    | Some x8621 ->
                                        ignore
                                          (Ojs.call x8620 "push"
                                             [|(GLuint.t_to_js x8621)|])
                                    | None -> ());
                                   x8620))|])
    let (bufferSubData :
      'tags this ->
        target:GLenum.t ->
          dstByteOffset:GLintptr.t -> srcData:BufferSource.t -> unit)
      =
      fun (x8628 : 'tags this) ->
        fun ~target:(x8625 : GLenum.t) ->
          fun ~dstByteOffset:(x8626 : GLintptr.t) ->
            fun ~srcData:(x8627 : BufferSource.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x8628) "bufferSubData"
                   [|(GLenum.t_to_js x8625);(GLintptr.t_to_js x8626);(
                     BufferSource.t_to_js x8627)|])
    let (bufferSubData' :
      'tags this ->
        target:GLenum.t ->
          dstByteOffset:GLintptr.t ->
            srcData:ArrayBufferView.t_0 ->
              srcOffset:GLuint.t -> ?length:GLuint.t -> unit -> unit)
      =
      fun (x8637 : 'tags this) ->
        fun ~target:(x8630 : GLenum.t) ->
          fun ~dstByteOffset:(x8631 : GLintptr.t) ->
            fun ~srcData:(x8632 : ArrayBufferView.t_0) ->
              fun ~srcOffset:(x8633 : GLuint.t) ->
                fun ?length:(x8634 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8639 = this_to_js Obj.magic x8637 in
                       Ojs.call (Ojs.get_prop_ascii x8639 "bufferSubData")
                         "apply"
                         [|x8639;((let x8635 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8635 "push"
                                        [|(GLenum.t_to_js x8630)|]);
                                   ignore
                                     (Ojs.call x8635 "push"
                                        [|(GLintptr.t_to_js x8631)|]);
                                   ignore
                                     (Ojs.call x8635 "push"
                                        [|(ArrayBufferView.t_0_to_js x8632)|]);
                                   ignore
                                     (Ojs.call x8635 "push"
                                        [|(GLuint.t_to_js x8633)|]);
                                   (match x8634 with
                                    | Some x8636 ->
                                        ignore
                                          (Ojs.call x8635 "push"
                                             [|(GLuint.t_to_js x8636)|])
                                    | None -> ());
                                   x8635))|])
    let (compressedTexImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    imageSize:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x8648 : 'tags this) ->
        fun ~target:(x8640 : GLenum.t) ->
          fun ~level:(x8641 : GLint.t) ->
            fun ~internalformat:(x8642 : GLenum.t) ->
              fun ~width:(x8643 : GLsizei.t) ->
                fun ~height:(x8644 : GLsizei.t) ->
                  fun ~border:(x8645 : GLint.t) ->
                    fun ~imageSize:(x8646 : GLsizei.t) ->
                      fun ~offset:(x8647 : GLintptr.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x8648)
                             "compressedTexImage2D"
                             [|(GLenum.t_to_js x8640);(GLint.t_to_js x8641);(
                               GLenum.t_to_js x8642);(GLsizei.t_to_js x8643);(
                               GLsizei.t_to_js x8644);(GLint.t_to_js x8645);(
                               GLsizei.t_to_js x8646);(GLintptr.t_to_js x8647)|])
    let (compressedTexImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    srcData:ArrayBufferView.t_0 ->
                      ?srcOffset:GLuint.t ->
                        ?srcLengthOverride:GLuint.t -> unit -> unit)
      =
      fun (x8662 : 'tags this) ->
        fun ~target:(x8650 : GLenum.t) ->
          fun ~level:(x8651 : GLint.t) ->
            fun ~internalformat:(x8652 : GLenum.t) ->
              fun ~width:(x8653 : GLsizei.t) ->
                fun ~height:(x8654 : GLsizei.t) ->
                  fun ~border:(x8655 : GLint.t) ->
                    fun ~srcData:(x8656 : ArrayBufferView.t_0) ->
                      fun ?srcOffset:(x8657 : GLuint.t option) ->
                        fun ?srcLengthOverride:(x8658 : GLuint.t option) ->
                          fun () ->
                            ignore
                              (let x8664 = this_to_js Obj.magic x8662 in
                               Ojs.call
                                 (Ojs.get_prop_ascii x8664
                                    "compressedTexImage2D") "apply"
                                 [|x8664;((let x8659 =
                                             Ojs.new_obj
                                               (Ojs.get_prop_ascii Ojs.global
                                                  "Array") [||] in
                                           ignore
                                             (Ojs.call x8659 "push"
                                                [|(GLenum.t_to_js x8650)|]);
                                           ignore
                                             (Ojs.call x8659 "push"
                                                [|(GLint.t_to_js x8651)|]);
                                           ignore
                                             (Ojs.call x8659 "push"
                                                [|(GLenum.t_to_js x8652)|]);
                                           ignore
                                             (Ojs.call x8659 "push"
                                                [|(GLsizei.t_to_js x8653)|]);
                                           ignore
                                             (Ojs.call x8659 "push"
                                                [|(GLsizei.t_to_js x8654)|]);
                                           ignore
                                             (Ojs.call x8659 "push"
                                                [|(GLint.t_to_js x8655)|]);
                                           ignore
                                             (Ojs.call x8659 "push"
                                                [|(ArrayBufferView.t_0_to_js
                                                     x8656)|]);
                                           (match x8657 with
                                            | Some x8661 ->
                                                ignore
                                                  (Ojs.call x8659 "push"
                                                     [|(GLuint.t_to_js x8661)|])
                                            | None -> ());
                                           (match x8658 with
                                            | Some x8660 ->
                                                ignore
                                                  (Ojs.call x8659 "push"
                                                     [|(GLuint.t_to_js x8660)|])
                                            | None -> ());
                                           x8659))|])
    let (compressedTexSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      imageSize:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x8674 : 'tags this) ->
        fun ~target:(x8665 : GLenum.t) ->
          fun ~level:(x8666 : GLint.t) ->
            fun ~xoffset:(x8667 : GLint.t) ->
              fun ~yoffset:(x8668 : GLint.t) ->
                fun ~width:(x8669 : GLsizei.t) ->
                  fun ~height:(x8670 : GLsizei.t) ->
                    fun ~format:(x8671 : GLenum.t) ->
                      fun ~imageSize:(x8672 : GLsizei.t) ->
                        fun ~offset:(x8673 : GLintptr.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8674)
                               "compressedTexSubImage2D"
                               [|(GLenum.t_to_js x8665);(GLint.t_to_js x8666);(
                                 GLint.t_to_js x8667);(GLint.t_to_js x8668);(
                                 GLsizei.t_to_js x8669);(GLsizei.t_to_js
                                                           x8670);(GLenum.t_to_js
                                                                    x8671);(
                                 GLsizei.t_to_js x8672);(GLintptr.t_to_js
                                                           x8673)|])
    let (compressedTexSubImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      srcData:ArrayBufferView.t_0 ->
                        ?srcOffset:GLuint.t ->
                          ?srcLengthOverride:GLuint.t -> unit -> unit)
      =
      fun (x8689 : 'tags this) ->
        fun ~target:(x8676 : GLenum.t) ->
          fun ~level:(x8677 : GLint.t) ->
            fun ~xoffset:(x8678 : GLint.t) ->
              fun ~yoffset:(x8679 : GLint.t) ->
                fun ~width:(x8680 : GLsizei.t) ->
                  fun ~height:(x8681 : GLsizei.t) ->
                    fun ~format:(x8682 : GLenum.t) ->
                      fun ~srcData:(x8683 : ArrayBufferView.t_0) ->
                        fun ?srcOffset:(x8684 : GLuint.t option) ->
                          fun ?srcLengthOverride:(x8685 : GLuint.t option) ->
                            fun () ->
                              ignore
                                (let x8691 = this_to_js Obj.magic x8689 in
                                 Ojs.call
                                   (Ojs.get_prop_ascii x8691
                                      "compressedTexSubImage2D") "apply"
                                   [|x8691;((let x8686 =
                                               Ojs.new_obj
                                                 (Ojs.get_prop_ascii
                                                    Ojs.global "Array") 
                                                 [||] in
                                             ignore
                                               (Ojs.call x8686 "push"
                                                  [|(GLenum.t_to_js x8676)|]);
                                             ignore
                                               (Ojs.call x8686 "push"
                                                  [|(GLint.t_to_js x8677)|]);
                                             ignore
                                               (Ojs.call x8686 "push"
                                                  [|(GLint.t_to_js x8678)|]);
                                             ignore
                                               (Ojs.call x8686 "push"
                                                  [|(GLint.t_to_js x8679)|]);
                                             ignore
                                               (Ojs.call x8686 "push"
                                                  [|(GLsizei.t_to_js x8680)|]);
                                             ignore
                                               (Ojs.call x8686 "push"
                                                  [|(GLsizei.t_to_js x8681)|]);
                                             ignore
                                               (Ojs.call x8686 "push"
                                                  [|(GLenum.t_to_js x8682)|]);
                                             ignore
                                               (Ojs.call x8686 "push"
                                                  [|(ArrayBufferView.t_0_to_js
                                                       x8683)|]);
                                             (match x8684 with
                                              | Some x8688 ->
                                                  ignore
                                                    (Ojs.call x8686 "push"
                                                       [|(GLuint.t_to_js
                                                            x8688)|])
                                              | None -> ());
                                             (match x8685 with
                                              | Some x8687 ->
                                                  ignore
                                                    (Ojs.call x8686 "push"
                                                       [|(GLuint.t_to_js
                                                            x8687)|])
                                              | None -> ());
                                             x8686))|])
    let (readPixels :
      'tags this ->
        x:GLint.t ->
          y:GLint.t ->
            width:GLsizei.t ->
              height:GLsizei.t ->
                format:GLenum.t ->
                  type_:GLenum.t ->
                    dstData:ArrayBufferView.t_0 option -> unit)
      =
      fun (x8700 : 'tags this) ->
        fun ~x:(x8692 : GLint.t) ->
          fun ~y:(x8693 : GLint.t) ->
            fun ~width:(x8694 : GLsizei.t) ->
              fun ~height:(x8695 : GLsizei.t) ->
                fun ~format:(x8696 : GLenum.t) ->
                  fun ~type_:(x8697 : GLenum.t) ->
                    fun ~dstData:(x8698 : ArrayBufferView.t_0 option) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x8700) "readPixels"
                           [|(GLint.t_to_js x8692);(GLint.t_to_js x8693);(
                             GLsizei.t_to_js x8694);(GLsizei.t_to_js x8695);(
                             GLenum.t_to_js x8696);(GLenum.t_to_js x8697);(
                             Ojs.option_to_js ArrayBufferView.t_0_to_js x8698)|])
    let (readPixels' :
      'tags this ->
        x:GLint.t ->
          y:GLint.t ->
            width:GLsizei.t ->
              height:GLsizei.t ->
                format:GLenum.t ->
                  type_:GLenum.t -> offset:GLintptr.t -> unit)
      =
      fun (x8709 : 'tags this) ->
        fun ~x:(x8702 : GLint.t) ->
          fun ~y:(x8703 : GLint.t) ->
            fun ~width:(x8704 : GLsizei.t) ->
              fun ~height:(x8705 : GLsizei.t) ->
                fun ~format:(x8706 : GLenum.t) ->
                  fun ~type_:(x8707 : GLenum.t) ->
                    fun ~offset:(x8708 : GLintptr.t) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x8709) "readPixels"
                           [|(GLint.t_to_js x8702);(GLint.t_to_js x8703);(
                             GLsizei.t_to_js x8704);(GLsizei.t_to_js x8705);(
                             GLenum.t_to_js x8706);(GLenum.t_to_js x8707);(
                             GLintptr.t_to_js x8708)|])
    let (readPixels'' :
      'tags this ->
        x:GLint.t ->
          y:GLint.t ->
            width:GLsizei.t ->
              height:GLsizei.t ->
                format:GLenum.t ->
                  type_:GLenum.t ->
                    dstData:ArrayBufferView.t_0 -> dstOffset:GLuint.t -> unit)
      =
      fun (x8719 : 'tags this) ->
        fun ~x:(x8711 : GLint.t) ->
          fun ~y:(x8712 : GLint.t) ->
            fun ~width:(x8713 : GLsizei.t) ->
              fun ~height:(x8714 : GLsizei.t) ->
                fun ~format:(x8715 : GLenum.t) ->
                  fun ~type_:(x8716 : GLenum.t) ->
                    fun ~dstData:(x8717 : ArrayBufferView.t_0) ->
                      fun ~dstOffset:(x8718 : GLuint.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x8719) "readPixels"
                             [|(GLint.t_to_js x8711);(GLint.t_to_js x8712);(
                               GLsizei.t_to_js x8713);(GLsizei.t_to_js x8714);(
                               GLenum.t_to_js x8715);(GLenum.t_to_js x8716);(
                               ArrayBufferView.t_0_to_js x8717);(GLuint.t_to_js
                                                                   x8718)|])
    let (texImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        pixels:ArrayBufferView.t_0 option -> unit)
      =
      fun (x8731 : 'tags this) ->
        fun ~target:(x8721 : GLenum.t) ->
          fun ~level:(x8722 : GLint.t) ->
            fun ~internalformat:(x8723 : GLint.t) ->
              fun ~width:(x8724 : GLsizei.t) ->
                fun ~height:(x8725 : GLsizei.t) ->
                  fun ~border:(x8726 : GLint.t) ->
                    fun ~format:(x8727 : GLenum.t) ->
                      fun ~type_:(x8728 : GLenum.t) ->
                        fun ~pixels:(x8729 : ArrayBufferView.t_0 option) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8731)
                               "texImage2D"
                               [|(GLenum.t_to_js x8721);(GLint.t_to_js x8722);(
                                 GLint.t_to_js x8723);(GLsizei.t_to_js x8724);(
                                 GLsizei.t_to_js x8725);(GLint.t_to_js x8726);(
                                 GLenum.t_to_js x8727);(GLenum.t_to_js x8728);(
                                 Ojs.option_to_js ArrayBufferView.t_0_to_js
                                   x8729)|])
    let (texImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              format:GLenum.t ->
                type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x8739 : 'tags this) ->
        fun ~target:(x8733 : GLenum.t) ->
          fun ~level:(x8734 : GLint.t) ->
            fun ~internalformat:(x8735 : GLint.t) ->
              fun ~format:(x8736 : GLenum.t) ->
                fun ~type_:(x8737 : GLenum.t) ->
                  fun ~source:(x8738 : TexImageSource.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x8739) "texImage2D"
                         [|(GLenum.t_to_js x8733);(GLint.t_to_js x8734);(
                           GLint.t_to_js x8735);(GLenum.t_to_js x8736);(
                           GLenum.t_to_js x8737);(TexImageSource.t_to_js
                                                    x8738)|])
    let (texImage2D'' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t -> pboOffset:GLintptr.t -> unit)
      =
      fun (x8750 : 'tags this) ->
        fun ~target:(x8741 : GLenum.t) ->
          fun ~level:(x8742 : GLint.t) ->
            fun ~internalformat:(x8743 : GLint.t) ->
              fun ~width:(x8744 : GLsizei.t) ->
                fun ~height:(x8745 : GLsizei.t) ->
                  fun ~border:(x8746 : GLint.t) ->
                    fun ~format:(x8747 : GLenum.t) ->
                      fun ~type_:(x8748 : GLenum.t) ->
                        fun ~pboOffset:(x8749 : GLintptr.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8750)
                               "texImage2D"
                               [|(GLenum.t_to_js x8741);(GLint.t_to_js x8742);(
                                 GLint.t_to_js x8743);(GLsizei.t_to_js x8744);(
                                 GLsizei.t_to_js x8745);(GLint.t_to_js x8746);(
                                 GLenum.t_to_js x8747);(GLenum.t_to_js x8748);(
                                 GLintptr.t_to_js x8749)|])
    let (texImage2D''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x8761 : 'tags this) ->
        fun ~target:(x8752 : GLenum.t) ->
          fun ~level:(x8753 : GLint.t) ->
            fun ~internalformat:(x8754 : GLint.t) ->
              fun ~width:(x8755 : GLsizei.t) ->
                fun ~height:(x8756 : GLsizei.t) ->
                  fun ~border:(x8757 : GLint.t) ->
                    fun ~format:(x8758 : GLenum.t) ->
                      fun ~type_:(x8759 : GLenum.t) ->
                        fun ~source:(x8760 : TexImageSource.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8761)
                               "texImage2D"
                               [|(GLenum.t_to_js x8752);(GLint.t_to_js x8753);(
                                 GLint.t_to_js x8754);(GLsizei.t_to_js x8755);(
                                 GLsizei.t_to_js x8756);(GLint.t_to_js x8757);(
                                 GLenum.t_to_js x8758);(GLenum.t_to_js x8759);(
                                 TexImageSource.t_to_js x8760)|])
    let (texImage2D'''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        srcData:ArrayBufferView.t_0 ->
                          srcOffset:GLuint.t -> unit)
      =
      fun (x8773 : 'tags this) ->
        fun ~target:(x8763 : GLenum.t) ->
          fun ~level:(x8764 : GLint.t) ->
            fun ~internalformat:(x8765 : GLint.t) ->
              fun ~width:(x8766 : GLsizei.t) ->
                fun ~height:(x8767 : GLsizei.t) ->
                  fun ~border:(x8768 : GLint.t) ->
                    fun ~format:(x8769 : GLenum.t) ->
                      fun ~type_:(x8770 : GLenum.t) ->
                        fun ~srcData:(x8771 : ArrayBufferView.t_0) ->
                          fun ~srcOffset:(x8772 : GLuint.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x8773)
                                 "texImage2D"
                                 [|(GLenum.t_to_js x8763);(GLint.t_to_js
                                                             x8764);(
                                   GLint.t_to_js x8765);(GLsizei.t_to_js
                                                           x8766);(GLsizei.t_to_js
                                                                    x8767);(
                                   GLint.t_to_js x8768);(GLenum.t_to_js x8769);(
                                   GLenum.t_to_js x8770);(ArrayBufferView.t_0_to_js
                                                            x8771);(GLuint.t_to_js
                                                                    x8772)|])
    let (texSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        pixels:ArrayBufferView.t_0 option -> unit)
      =
      fun (x8785 : 'tags this) ->
        fun ~target:(x8775 : GLenum.t) ->
          fun ~level:(x8776 : GLint.t) ->
            fun ~xoffset:(x8777 : GLint.t) ->
              fun ~yoffset:(x8778 : GLint.t) ->
                fun ~width:(x8779 : GLsizei.t) ->
                  fun ~height:(x8780 : GLsizei.t) ->
                    fun ~format:(x8781 : GLenum.t) ->
                      fun ~type_:(x8782 : GLenum.t) ->
                        fun ~pixels:(x8783 : ArrayBufferView.t_0 option) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8785)
                               "texSubImage2D"
                               [|(GLenum.t_to_js x8775);(GLint.t_to_js x8776);(
                                 GLint.t_to_js x8777);(GLint.t_to_js x8778);(
                                 GLsizei.t_to_js x8779);(GLsizei.t_to_js
                                                           x8780);(GLenum.t_to_js
                                                                    x8781);(
                                 GLenum.t_to_js x8782);(Ojs.option_to_js
                                                          ArrayBufferView.t_0_to_js
                                                          x8783)|])
    let (texSubImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                format:GLenum.t ->
                  type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x8794 : 'tags this) ->
        fun ~target:(x8787 : GLenum.t) ->
          fun ~level:(x8788 : GLint.t) ->
            fun ~xoffset:(x8789 : GLint.t) ->
              fun ~yoffset:(x8790 : GLint.t) ->
                fun ~format:(x8791 : GLenum.t) ->
                  fun ~type_:(x8792 : GLenum.t) ->
                    fun ~source:(x8793 : TexImageSource.t) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x8794)
                           "texSubImage2D"
                           [|(GLenum.t_to_js x8787);(GLint.t_to_js x8788);(
                             GLint.t_to_js x8789);(GLint.t_to_js x8790);(
                             GLenum.t_to_js x8791);(GLenum.t_to_js x8792);(
                             TexImageSource.t_to_js x8793)|])
    let (texSubImage2D'' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t -> pboOffset:GLintptr.t -> unit)
      =
      fun (x8805 : 'tags this) ->
        fun ~target:(x8796 : GLenum.t) ->
          fun ~level:(x8797 : GLint.t) ->
            fun ~xoffset:(x8798 : GLint.t) ->
              fun ~yoffset:(x8799 : GLint.t) ->
                fun ~width:(x8800 : GLsizei.t) ->
                  fun ~height:(x8801 : GLsizei.t) ->
                    fun ~format:(x8802 : GLenum.t) ->
                      fun ~type_:(x8803 : GLenum.t) ->
                        fun ~pboOffset:(x8804 : GLintptr.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8805)
                               "texSubImage2D"
                               [|(GLenum.t_to_js x8796);(GLint.t_to_js x8797);(
                                 GLint.t_to_js x8798);(GLint.t_to_js x8799);(
                                 GLsizei.t_to_js x8800);(GLsizei.t_to_js
                                                           x8801);(GLenum.t_to_js
                                                                    x8802);(
                                 GLenum.t_to_js x8803);(GLintptr.t_to_js
                                                          x8804)|])
    let (texSubImage2D''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x8816 : 'tags this) ->
        fun ~target:(x8807 : GLenum.t) ->
          fun ~level:(x8808 : GLint.t) ->
            fun ~xoffset:(x8809 : GLint.t) ->
              fun ~yoffset:(x8810 : GLint.t) ->
                fun ~width:(x8811 : GLsizei.t) ->
                  fun ~height:(x8812 : GLsizei.t) ->
                    fun ~format:(x8813 : GLenum.t) ->
                      fun ~type_:(x8814 : GLenum.t) ->
                        fun ~source:(x8815 : TexImageSource.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8816)
                               "texSubImage2D"
                               [|(GLenum.t_to_js x8807);(GLint.t_to_js x8808);(
                                 GLint.t_to_js x8809);(GLint.t_to_js x8810);(
                                 GLsizei.t_to_js x8811);(GLsizei.t_to_js
                                                           x8812);(GLenum.t_to_js
                                                                    x8813);(
                                 GLenum.t_to_js x8814);(TexImageSource.t_to_js
                                                          x8815)|])
    let (texSubImage2D'''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        srcData:ArrayBufferView.t_0 ->
                          srcOffset:GLuint.t -> unit)
      =
      fun (x8828 : 'tags this) ->
        fun ~target:(x8818 : GLenum.t) ->
          fun ~level:(x8819 : GLint.t) ->
            fun ~xoffset:(x8820 : GLint.t) ->
              fun ~yoffset:(x8821 : GLint.t) ->
                fun ~width:(x8822 : GLsizei.t) ->
                  fun ~height:(x8823 : GLsizei.t) ->
                    fun ~format:(x8824 : GLenum.t) ->
                      fun ~type_:(x8825 : GLenum.t) ->
                        fun ~srcData:(x8826 : ArrayBufferView.t_0) ->
                          fun ~srcOffset:(x8827 : GLuint.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x8828)
                                 "texSubImage2D"
                                 [|(GLenum.t_to_js x8818);(GLint.t_to_js
                                                             x8819);(
                                   GLint.t_to_js x8820);(GLint.t_to_js x8821);(
                                   GLsizei.t_to_js x8822);(GLsizei.t_to_js
                                                             x8823);(
                                   GLenum.t_to_js x8824);(GLenum.t_to_js
                                                            x8825);(ArrayBufferView.t_0_to_js
                                                                    x8826);(
                                   GLuint.t_to_js x8827)|])
    let (uniform1fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Float32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8838 : 'tags this) ->
        fun ~location:(x8830 : WebGLUniformLocation.t option) ->
          fun ~data:(x8831 : Float32List.t) ->
            fun ?srcOffset:(x8832 : GLuint.t option) ->
              fun ?srcLength:(x8833 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8840 = this_to_js Obj.magic x8838 in
                     Ojs.call (Ojs.get_prop_ascii x8840 "uniform1fv") "apply"
                       [|x8840;((let x8834 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8834 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8830)|]);
                                 ignore
                                   (Ojs.call x8834 "push"
                                      [|(Float32List.t_to_js x8831)|]);
                                 (match x8832 with
                                  | Some x8836 ->
                                      ignore
                                        (Ojs.call x8834 "push"
                                           [|(GLuint.t_to_js x8836)|])
                                  | None -> ());
                                 (match x8833 with
                                  | Some x8835 ->
                                      ignore
                                        (Ojs.call x8834 "push"
                                           [|(GLuint.t_to_js x8835)|])
                                  | None -> ());
                                 x8834))|])
    let (uniform1iv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Int32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8849 : 'tags this) ->
        fun ~location:(x8841 : WebGLUniformLocation.t option) ->
          fun ~data:(x8842 : Int32List.t) ->
            fun ?srcOffset:(x8843 : GLuint.t option) ->
              fun ?srcLength:(x8844 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8851 = this_to_js Obj.magic x8849 in
                     Ojs.call (Ojs.get_prop_ascii x8851 "uniform1iv") "apply"
                       [|x8851;((let x8845 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8845 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8841)|]);
                                 ignore
                                   (Ojs.call x8845 "push"
                                      [|(Int32List.t_to_js x8842)|]);
                                 (match x8843 with
                                  | Some x8847 ->
                                      ignore
                                        (Ojs.call x8845 "push"
                                           [|(GLuint.t_to_js x8847)|])
                                  | None -> ());
                                 (match x8844 with
                                  | Some x8846 ->
                                      ignore
                                        (Ojs.call x8845 "push"
                                           [|(GLuint.t_to_js x8846)|])
                                  | None -> ());
                                 x8845))|])
    let (uniform2fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Float32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8860 : 'tags this) ->
        fun ~location:(x8852 : WebGLUniformLocation.t option) ->
          fun ~data:(x8853 : Float32List.t) ->
            fun ?srcOffset:(x8854 : GLuint.t option) ->
              fun ?srcLength:(x8855 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8862 = this_to_js Obj.magic x8860 in
                     Ojs.call (Ojs.get_prop_ascii x8862 "uniform2fv") "apply"
                       [|x8862;((let x8856 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8856 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8852)|]);
                                 ignore
                                   (Ojs.call x8856 "push"
                                      [|(Float32List.t_to_js x8853)|]);
                                 (match x8854 with
                                  | Some x8858 ->
                                      ignore
                                        (Ojs.call x8856 "push"
                                           [|(GLuint.t_to_js x8858)|])
                                  | None -> ());
                                 (match x8855 with
                                  | Some x8857 ->
                                      ignore
                                        (Ojs.call x8856 "push"
                                           [|(GLuint.t_to_js x8857)|])
                                  | None -> ());
                                 x8856))|])
    let (uniform2iv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Int32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8871 : 'tags this) ->
        fun ~location:(x8863 : WebGLUniformLocation.t option) ->
          fun ~data:(x8864 : Int32List.t) ->
            fun ?srcOffset:(x8865 : GLuint.t option) ->
              fun ?srcLength:(x8866 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8873 = this_to_js Obj.magic x8871 in
                     Ojs.call (Ojs.get_prop_ascii x8873 "uniform2iv") "apply"
                       [|x8873;((let x8867 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8867 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8863)|]);
                                 ignore
                                   (Ojs.call x8867 "push"
                                      [|(Int32List.t_to_js x8864)|]);
                                 (match x8865 with
                                  | Some x8869 ->
                                      ignore
                                        (Ojs.call x8867 "push"
                                           [|(GLuint.t_to_js x8869)|])
                                  | None -> ());
                                 (match x8866 with
                                  | Some x8868 ->
                                      ignore
                                        (Ojs.call x8867 "push"
                                           [|(GLuint.t_to_js x8868)|])
                                  | None -> ());
                                 x8867))|])
    let (uniform3fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Float32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8882 : 'tags this) ->
        fun ~location:(x8874 : WebGLUniformLocation.t option) ->
          fun ~data:(x8875 : Float32List.t) ->
            fun ?srcOffset:(x8876 : GLuint.t option) ->
              fun ?srcLength:(x8877 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8884 = this_to_js Obj.magic x8882 in
                     Ojs.call (Ojs.get_prop_ascii x8884 "uniform3fv") "apply"
                       [|x8884;((let x8878 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8878 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8874)|]);
                                 ignore
                                   (Ojs.call x8878 "push"
                                      [|(Float32List.t_to_js x8875)|]);
                                 (match x8876 with
                                  | Some x8880 ->
                                      ignore
                                        (Ojs.call x8878 "push"
                                           [|(GLuint.t_to_js x8880)|])
                                  | None -> ());
                                 (match x8877 with
                                  | Some x8879 ->
                                      ignore
                                        (Ojs.call x8878 "push"
                                           [|(GLuint.t_to_js x8879)|])
                                  | None -> ());
                                 x8878))|])
    let (uniform3iv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Int32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8893 : 'tags this) ->
        fun ~location:(x8885 : WebGLUniformLocation.t option) ->
          fun ~data:(x8886 : Int32List.t) ->
            fun ?srcOffset:(x8887 : GLuint.t option) ->
              fun ?srcLength:(x8888 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8895 = this_to_js Obj.magic x8893 in
                     Ojs.call (Ojs.get_prop_ascii x8895 "uniform3iv") "apply"
                       [|x8895;((let x8889 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8889 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8885)|]);
                                 ignore
                                   (Ojs.call x8889 "push"
                                      [|(Int32List.t_to_js x8886)|]);
                                 (match x8887 with
                                  | Some x8891 ->
                                      ignore
                                        (Ojs.call x8889 "push"
                                           [|(GLuint.t_to_js x8891)|])
                                  | None -> ());
                                 (match x8888 with
                                  | Some x8890 ->
                                      ignore
                                        (Ojs.call x8889 "push"
                                           [|(GLuint.t_to_js x8890)|])
                                  | None -> ());
                                 x8889))|])
    let (uniform4fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Float32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8904 : 'tags this) ->
        fun ~location:(x8896 : WebGLUniformLocation.t option) ->
          fun ~data:(x8897 : Float32List.t) ->
            fun ?srcOffset:(x8898 : GLuint.t option) ->
              fun ?srcLength:(x8899 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8906 = this_to_js Obj.magic x8904 in
                     Ojs.call (Ojs.get_prop_ascii x8906 "uniform4fv") "apply"
                       [|x8906;((let x8900 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8900 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8896)|]);
                                 ignore
                                   (Ojs.call x8900 "push"
                                      [|(Float32List.t_to_js x8897)|]);
                                 (match x8898 with
                                  | Some x8902 ->
                                      ignore
                                        (Ojs.call x8900 "push"
                                           [|(GLuint.t_to_js x8902)|])
                                  | None -> ());
                                 (match x8899 with
                                  | Some x8901 ->
                                      ignore
                                        (Ojs.call x8900 "push"
                                           [|(GLuint.t_to_js x8901)|])
                                  | None -> ());
                                 x8900))|])
    let (uniform4iv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Int32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8915 : 'tags this) ->
        fun ~location:(x8907 : WebGLUniformLocation.t option) ->
          fun ~data:(x8908 : Int32List.t) ->
            fun ?srcOffset:(x8909 : GLuint.t option) ->
              fun ?srcLength:(x8910 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8917 = this_to_js Obj.magic x8915 in
                     Ojs.call (Ojs.get_prop_ascii x8917 "uniform4iv") "apply"
                       [|x8917;((let x8911 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8911 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8907)|]);
                                 ignore
                                   (Ojs.call x8911 "push"
                                      [|(Int32List.t_to_js x8908)|]);
                                 (match x8909 with
                                  | Some x8913 ->
                                      ignore
                                        (Ojs.call x8911 "push"
                                           [|(GLuint.t_to_js x8913)|])
                                  | None -> ());
                                 (match x8910 with
                                  | Some x8912 ->
                                      ignore
                                        (Ojs.call x8911 "push"
                                           [|(GLuint.t_to_js x8912)|])
                                  | None -> ());
                                 x8911))|])
    let (uniformMatrix2fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8927 : 'tags this) ->
        fun ~location:(x8918 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x8919 : GLboolean.t) ->
            fun ~data:(x8920 : Float32List.t) ->
              fun ?srcOffset:(x8921 : GLuint.t option) ->
                fun ?srcLength:(x8922 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8929 = this_to_js Obj.magic x8927 in
                       Ojs.call (Ojs.get_prop_ascii x8929 "uniformMatrix2fv")
                         "apply"
                         [|x8929;((let x8923 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8923 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8918)|]);
                                   ignore
                                     (Ojs.call x8923 "push"
                                        [|(GLboolean.t_to_js x8919)|]);
                                   ignore
                                     (Ojs.call x8923 "push"
                                        [|(Float32List.t_to_js x8920)|]);
                                   (match x8921 with
                                    | Some x8925 ->
                                        ignore
                                          (Ojs.call x8923 "push"
                                             [|(GLuint.t_to_js x8925)|])
                                    | None -> ());
                                   (match x8922 with
                                    | Some x8924 ->
                                        ignore
                                          (Ojs.call x8923 "push"
                                             [|(GLuint.t_to_js x8924)|])
                                    | None -> ());
                                   x8923))|])
    let (uniformMatrix3fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8939 : 'tags this) ->
        fun ~location:(x8930 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x8931 : GLboolean.t) ->
            fun ~data:(x8932 : Float32List.t) ->
              fun ?srcOffset:(x8933 : GLuint.t option) ->
                fun ?srcLength:(x8934 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8941 = this_to_js Obj.magic x8939 in
                       Ojs.call (Ojs.get_prop_ascii x8941 "uniformMatrix3fv")
                         "apply"
                         [|x8941;((let x8935 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8935 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8930)|]);
                                   ignore
                                     (Ojs.call x8935 "push"
                                        [|(GLboolean.t_to_js x8931)|]);
                                   ignore
                                     (Ojs.call x8935 "push"
                                        [|(Float32List.t_to_js x8932)|]);
                                   (match x8933 with
                                    | Some x8937 ->
                                        ignore
                                          (Ojs.call x8935 "push"
                                             [|(GLuint.t_to_js x8937)|])
                                    | None -> ());
                                   (match x8934 with
                                    | Some x8936 ->
                                        ignore
                                          (Ojs.call x8935 "push"
                                             [|(GLuint.t_to_js x8936)|])
                                    | None -> ());
                                   x8935))|])
    let (uniformMatrix4fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8951 : 'tags this) ->
        fun ~location:(x8942 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x8943 : GLboolean.t) ->
            fun ~data:(x8944 : Float32List.t) ->
              fun ?srcOffset:(x8945 : GLuint.t option) ->
                fun ?srcLength:(x8946 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8953 = this_to_js Obj.magic x8951 in
                       Ojs.call (Ojs.get_prop_ascii x8953 "uniformMatrix4fv")
                         "apply"
                         [|x8953;((let x8947 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8947 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8942)|]);
                                   ignore
                                     (Ojs.call x8947 "push"
                                        [|(GLboolean.t_to_js x8943)|]);
                                   ignore
                                     (Ojs.call x8947 "push"
                                        [|(Float32List.t_to_js x8944)|]);
                                   (match x8945 with
                                    | Some x8949 ->
                                        ignore
                                          (Ojs.call x8947 "push"
                                             [|(GLuint.t_to_js x8949)|])
                                    | None -> ());
                                   (match x8946 with
                                    | Some x8948 ->
                                        ignore
                                          (Ojs.call x8947 "push"
                                             [|(GLuint.t_to_js x8948)|])
                                    | None -> ());
                                   x8947))|])
    let (uniform1fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLfloat.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8963 : 'tags this) ->
        fun ~location:(x8954 : WebGLUniformLocation.t option) ->
          fun ~data:(x8955 : GLfloat.t Iterable.t_1) ->
            fun ?srcOffset:(x8956 : GLuint.t option) ->
              fun ?srcLength:(x8957 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8965 = this_to_js Obj.magic x8963 in
                     Ojs.call (Ojs.get_prop_ascii x8965 "uniform1fv") "apply"
                       [|x8965;((let x8958 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8958 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8954)|]);
                                 ignore
                                   (Ojs.call x8958 "push"
                                      [|(Iterable.t_1_to_js GLfloat.t_to_js
                                           x8955)|]);
                                 (match x8956 with
                                  | Some x8960 ->
                                      ignore
                                        (Ojs.call x8958 "push"
                                           [|(GLuint.t_to_js x8960)|])
                                  | None -> ());
                                 (match x8957 with
                                  | Some x8959 ->
                                      ignore
                                        (Ojs.call x8958 "push"
                                           [|(GLuint.t_to_js x8959)|])
                                  | None -> ());
                                 x8958))|])
    let (uniform1iv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8975 : 'tags this) ->
        fun ~location:(x8966 : WebGLUniformLocation.t option) ->
          fun ~data:(x8967 : GLint.t Iterable.t_1) ->
            fun ?srcOffset:(x8968 : GLuint.t option) ->
              fun ?srcLength:(x8969 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8977 = this_to_js Obj.magic x8975 in
                     Ojs.call (Ojs.get_prop_ascii x8977 "uniform1iv") "apply"
                       [|x8977;((let x8970 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8970 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8966)|]);
                                 ignore
                                   (Ojs.call x8970 "push"
                                      [|(Iterable.t_1_to_js GLint.t_to_js
                                           x8967)|]);
                                 (match x8968 with
                                  | Some x8972 ->
                                      ignore
                                        (Ojs.call x8970 "push"
                                           [|(GLuint.t_to_js x8972)|])
                                  | None -> ());
                                 (match x8969 with
                                  | Some x8971 ->
                                      ignore
                                        (Ojs.call x8970 "push"
                                           [|(GLuint.t_to_js x8971)|])
                                  | None -> ());
                                 x8970))|])
    let (uniform2fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLfloat.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8987 : 'tags this) ->
        fun ~location:(x8978 : WebGLUniformLocation.t option) ->
          fun ~data:(x8979 : GLfloat.t Iterable.t_1) ->
            fun ?srcOffset:(x8980 : GLuint.t option) ->
              fun ?srcLength:(x8981 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8989 = this_to_js Obj.magic x8987 in
                     Ojs.call (Ojs.get_prop_ascii x8989 "uniform2fv") "apply"
                       [|x8989;((let x8982 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8982 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8978)|]);
                                 ignore
                                   (Ojs.call x8982 "push"
                                      [|(Iterable.t_1_to_js GLfloat.t_to_js
                                           x8979)|]);
                                 (match x8980 with
                                  | Some x8984 ->
                                      ignore
                                        (Ojs.call x8982 "push"
                                           [|(GLuint.t_to_js x8984)|])
                                  | None -> ());
                                 (match x8981 with
                                  | Some x8983 ->
                                      ignore
                                        (Ojs.call x8982 "push"
                                           [|(GLuint.t_to_js x8983)|])
                                  | None -> ());
                                 x8982))|])
    let (uniform2iv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8999 : 'tags this) ->
        fun ~location:(x8990 : WebGLUniformLocation.t option) ->
          fun ~data:(x8991 : GLint.t Iterable.t_1) ->
            fun ?srcOffset:(x8992 : GLuint.t option) ->
              fun ?srcLength:(x8993 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9001 = this_to_js Obj.magic x8999 in
                     Ojs.call (Ojs.get_prop_ascii x9001 "uniform2iv") "apply"
                       [|x9001;((let x8994 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8994 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8990)|]);
                                 ignore
                                   (Ojs.call x8994 "push"
                                      [|(Iterable.t_1_to_js GLint.t_to_js
                                           x8991)|]);
                                 (match x8992 with
                                  | Some x8996 ->
                                      ignore
                                        (Ojs.call x8994 "push"
                                           [|(GLuint.t_to_js x8996)|])
                                  | None -> ());
                                 (match x8993 with
                                  | Some x8995 ->
                                      ignore
                                        (Ojs.call x8994 "push"
                                           [|(GLuint.t_to_js x8995)|])
                                  | None -> ());
                                 x8994))|])
    let (uniform3fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLfloat.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9011 : 'tags this) ->
        fun ~location:(x9002 : WebGLUniformLocation.t option) ->
          fun ~data:(x9003 : GLfloat.t Iterable.t_1) ->
            fun ?srcOffset:(x9004 : GLuint.t option) ->
              fun ?srcLength:(x9005 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9013 = this_to_js Obj.magic x9011 in
                     Ojs.call (Ojs.get_prop_ascii x9013 "uniform3fv") "apply"
                       [|x9013;((let x9006 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9006 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x9002)|]);
                                 ignore
                                   (Ojs.call x9006 "push"
                                      [|(Iterable.t_1_to_js GLfloat.t_to_js
                                           x9003)|]);
                                 (match x9004 with
                                  | Some x9008 ->
                                      ignore
                                        (Ojs.call x9006 "push"
                                           [|(GLuint.t_to_js x9008)|])
                                  | None -> ());
                                 (match x9005 with
                                  | Some x9007 ->
                                      ignore
                                        (Ojs.call x9006 "push"
                                           [|(GLuint.t_to_js x9007)|])
                                  | None -> ());
                                 x9006))|])
    let (uniform3iv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9023 : 'tags this) ->
        fun ~location:(x9014 : WebGLUniformLocation.t option) ->
          fun ~data:(x9015 : GLint.t Iterable.t_1) ->
            fun ?srcOffset:(x9016 : GLuint.t option) ->
              fun ?srcLength:(x9017 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9025 = this_to_js Obj.magic x9023 in
                     Ojs.call (Ojs.get_prop_ascii x9025 "uniform3iv") "apply"
                       [|x9025;((let x9018 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9018 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x9014)|]);
                                 ignore
                                   (Ojs.call x9018 "push"
                                      [|(Iterable.t_1_to_js GLint.t_to_js
                                           x9015)|]);
                                 (match x9016 with
                                  | Some x9020 ->
                                      ignore
                                        (Ojs.call x9018 "push"
                                           [|(GLuint.t_to_js x9020)|])
                                  | None -> ());
                                 (match x9017 with
                                  | Some x9019 ->
                                      ignore
                                        (Ojs.call x9018 "push"
                                           [|(GLuint.t_to_js x9019)|])
                                  | None -> ());
                                 x9018))|])
    let (uniform4fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLfloat.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9035 : 'tags this) ->
        fun ~location:(x9026 : WebGLUniformLocation.t option) ->
          fun ~data:(x9027 : GLfloat.t Iterable.t_1) ->
            fun ?srcOffset:(x9028 : GLuint.t option) ->
              fun ?srcLength:(x9029 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9037 = this_to_js Obj.magic x9035 in
                     Ojs.call (Ojs.get_prop_ascii x9037 "uniform4fv") "apply"
                       [|x9037;((let x9030 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9030 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x9026)|]);
                                 ignore
                                   (Ojs.call x9030 "push"
                                      [|(Iterable.t_1_to_js GLfloat.t_to_js
                                           x9027)|]);
                                 (match x9028 with
                                  | Some x9032 ->
                                      ignore
                                        (Ojs.call x9030 "push"
                                           [|(GLuint.t_to_js x9032)|])
                                  | None -> ());
                                 (match x9029 with
                                  | Some x9031 ->
                                      ignore
                                        (Ojs.call x9030 "push"
                                           [|(GLuint.t_to_js x9031)|])
                                  | None -> ());
                                 x9030))|])
    let (uniform4iv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9047 : 'tags this) ->
        fun ~location:(x9038 : WebGLUniformLocation.t option) ->
          fun ~data:(x9039 : GLint.t Iterable.t_1) ->
            fun ?srcOffset:(x9040 : GLuint.t option) ->
              fun ?srcLength:(x9041 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9049 = this_to_js Obj.magic x9047 in
                     Ojs.call (Ojs.get_prop_ascii x9049 "uniform4iv") "apply"
                       [|x9049;((let x9042 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9042 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x9038)|]);
                                 ignore
                                   (Ojs.call x9042 "push"
                                      [|(Iterable.t_1_to_js GLint.t_to_js
                                           x9039)|]);
                                 (match x9040 with
                                  | Some x9044 ->
                                      ignore
                                        (Ojs.call x9042 "push"
                                           [|(GLuint.t_to_js x9044)|])
                                  | None -> ());
                                 (match x9041 with
                                  | Some x9043 ->
                                      ignore
                                        (Ojs.call x9042 "push"
                                           [|(GLuint.t_to_js x9043)|])
                                  | None -> ());
                                 x9042))|])
    let (uniformMatrix2fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9060 : 'tags this) ->
        fun ~location:(x9050 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x9051 : GLboolean.t) ->
            fun ~data:(x9052 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x9053 : GLuint.t option) ->
                fun ?srcLength:(x9054 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9062 = this_to_js Obj.magic x9060 in
                       Ojs.call (Ojs.get_prop_ascii x9062 "uniformMatrix2fv")
                         "apply"
                         [|x9062;((let x9055 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9055 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9050)|]);
                                   ignore
                                     (Ojs.call x9055 "push"
                                        [|(GLboolean.t_to_js x9051)|]);
                                   ignore
                                     (Ojs.call x9055 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x9052)|]);
                                   (match x9053 with
                                    | Some x9057 ->
                                        ignore
                                          (Ojs.call x9055 "push"
                                             [|(GLuint.t_to_js x9057)|])
                                    | None -> ());
                                   (match x9054 with
                                    | Some x9056 ->
                                        ignore
                                          (Ojs.call x9055 "push"
                                             [|(GLuint.t_to_js x9056)|])
                                    | None -> ());
                                   x9055))|])
    let (uniformMatrix3fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9073 : 'tags this) ->
        fun ~location:(x9063 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x9064 : GLboolean.t) ->
            fun ~data:(x9065 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x9066 : GLuint.t option) ->
                fun ?srcLength:(x9067 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9075 = this_to_js Obj.magic x9073 in
                       Ojs.call (Ojs.get_prop_ascii x9075 "uniformMatrix3fv")
                         "apply"
                         [|x9075;((let x9068 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9068 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9063)|]);
                                   ignore
                                     (Ojs.call x9068 "push"
                                        [|(GLboolean.t_to_js x9064)|]);
                                   ignore
                                     (Ojs.call x9068 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x9065)|]);
                                   (match x9066 with
                                    | Some x9070 ->
                                        ignore
                                          (Ojs.call x9068 "push"
                                             [|(GLuint.t_to_js x9070)|])
                                    | None -> ());
                                   (match x9067 with
                                    | Some x9069 ->
                                        ignore
                                          (Ojs.call x9068 "push"
                                             [|(GLuint.t_to_js x9069)|])
                                    | None -> ());
                                   x9068))|])
    let (uniformMatrix4fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9086 : 'tags this) ->
        fun ~location:(x9076 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x9077 : GLboolean.t) ->
            fun ~data:(x9078 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x9079 : GLuint.t option) ->
                fun ?srcLength:(x9080 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9088 = this_to_js Obj.magic x9086 in
                       Ojs.call (Ojs.get_prop_ascii x9088 "uniformMatrix4fv")
                         "apply"
                         [|x9088;((let x9081 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9081 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9076)|]);
                                   ignore
                                     (Ojs.call x9081 "push"
                                        [|(GLboolean.t_to_js x9077)|]);
                                   ignore
                                     (Ojs.call x9081 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x9078)|]);
                                   (match x9079 with
                                    | Some x9083 ->
                                        ignore
                                          (Ojs.call x9081 "push"
                                             [|(GLuint.t_to_js x9083)|])
                                    | None -> ());
                                   (match x9080 with
                                    | Some x9082 ->
                                        ignore
                                          (Ojs.call x9081 "push"
                                             [|(GLuint.t_to_js x9082)|])
                                    | None -> ());
                                   x9081))|])
    let cast_from = Obj.magic
  end
module WebGLVertexArrayObject =
  struct
    type t = [ `WebGLVertexArrayObject ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9090 : Ojs.t) -> t_of_js x9090
    and t_0_to_js : t_0 -> Ojs.t = fun (x9089 : t) -> t_to_js x9089
    type tags = [ `WebGLVertexArrayObject ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLVertexArrayObject ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x9093 : Ojs.t) -> intf_of_js __tags_of_js x9093
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x9091 : __tags intf) -> intf_to_js __tags_to_js x9091
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLVertexArrayObject")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGLVertexArrayObject") 
             [||])
  end
module WebGLTransformFeedback =
  struct
    type t = [ `WebGLTransformFeedback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9096 : Ojs.t) -> t_of_js x9096
    and t_0_to_js : t_0 -> Ojs.t = fun (x9095 : t) -> t_to_js x9095
    type tags = [ `WebGLTransformFeedback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLTransformFeedback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x9099 : Ojs.t) -> intf_of_js __tags_of_js x9099
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x9097 : __tags intf) -> intf_to_js __tags_to_js x9097
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLTransformFeedback")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGLTransformFeedback") 
             [||])
  end
module WebGLSync =
  struct
    type t = [ `WebGLSync ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9102 : Ojs.t) -> t_of_js x9102
    and t_0_to_js : t_0 -> Ojs.t = fun (x9101 : t) -> t_to_js x9101
    type tags = [ `WebGLSync ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLSync ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x9105 : Ojs.t) -> intf_of_js __tags_of_js x9105
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x9103 : __tags intf) -> intf_to_js __tags_to_js x9103
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLSync")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLSync") [||])
  end
module WebGLSampler =
  struct
    type t = [ `WebGLSampler ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9108 : Ojs.t) -> t_of_js x9108
    and t_0_to_js : t_0 -> Ojs.t = fun (x9107 : t) -> t_to_js x9107
    type tags = [ `WebGLSampler ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLSampler ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x9111 : Ojs.t) -> intf_of_js __tags_of_js x9111
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x9109 : __tags intf) -> intf_to_js __tags_to_js x9109
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLSampler")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLSampler") [||])
  end
module WebGLQuery =
  struct
    type t = [ `WebGLQuery ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9114 : Ojs.t) -> t_of_js x9114
    and t_0_to_js : t_0 -> Ojs.t = fun (x9113 : t) -> t_to_js x9113
    type tags = [ `WebGLQuery ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLQuery ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x9117 : Ojs.t) -> intf_of_js __tags_of_js x9117
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x9115 : __tags intf) -> intf_to_js __tags_to_js x9115
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLQuery")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLQuery") [||])
  end
module Uint32List =
  struct
    type t = (GLuint.t list, Uint32Array.t_0) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x9123 : Ojs.t) ->
        union2_of_js
          (fun (x9124 : Ojs.t) -> Ojs.list_of_js GLuint.t_of_js x9124)
          Uint32Array.t_0_of_js x9123
    and t_to_js : t -> Ojs.t =
      fun (x9119 : (GLuint.t list, Uint32Array.t_0) union2) ->
        union2_to_js
          (fun (x9120 : GLuint.t list) -> Ojs.list_to_js GLuint.t_to_js x9120)
          Uint32Array.t_0_to_js x9119
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9128 : Ojs.t) -> t_of_js x9128
    and t_0_to_js : t_0 -> Ojs.t = fun (x9127 : t) -> t_to_js x9127
  end
module GLuint64 =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x9130 : Ojs.t) -> Ojs.float_of_js x9130
    and t_to_js : t -> Ojs.t = fun (x9129 : float) -> Ojs.float_to_js x9129
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9132 : Ojs.t) -> t_of_js x9132
    and t_0_to_js : t_0 -> Ojs.t = fun (x9131 : t) -> t_to_js x9131
  end
module GLint64 =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x9134 : Ojs.t) -> Ojs.float_of_js x9134
    and t_to_js : t -> Ojs.t = fun (x9133 : float) -> Ojs.float_to_js x9133
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9136 : Ojs.t) -> t_of_js x9136
    and t_0_to_js : t_0 -> Ojs.t = fun (x9135 : t) -> t_to_js x9135
  end
module WebGL2RenderingContextBase =
  struct
    type t = [ `WebGL2RenderingContextBase ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9138 : Ojs.t) -> t_of_js x9138
    and t_0_to_js : t_0 -> Ojs.t = fun (x9137 : t) -> t_to_js x9137
    type tags = [ `WebGL2RenderingContextBase ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGL2RenderingContextBase ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x9141 : Ojs.t) -> intf_of_js __tags_of_js x9141
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x9139 : __tags intf) -> intf_to_js __tags_to_js x9139
    let (beginQuery :
      'tags this -> target:GLenum.t -> query:WebGLQuery.t -> unit) =
      fun (x9145 : 'tags this) ->
        fun ~target:(x9143 : GLenum.t) ->
          fun ~query:(x9144 : WebGLQuery.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9145) "beginQuery"
                 [|(GLenum.t_to_js x9143);(WebGLQuery.t_to_js x9144)|])
    let (beginTransformFeedback :
      'tags this -> primitiveMode:GLenum.t -> unit) =
      fun (x9148 : 'tags this) ->
        fun ~primitiveMode:(x9147 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9148) "beginTransformFeedback"
               [|(GLenum.t_to_js x9147)|])
    let (bindBufferBase :
      'tags this ->
        target:GLenum.t ->
          index:GLuint.t -> buffer:WebGLBuffer.t option -> unit)
      =
      fun (x9154 : 'tags this) ->
        fun ~target:(x9150 : GLenum.t) ->
          fun ~index:(x9151 : GLuint.t) ->
            fun ~buffer:(x9152 : WebGLBuffer.t option) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x9154) "bindBufferBase"
                   [|(GLenum.t_to_js x9150);(GLuint.t_to_js x9151);(Ojs.option_to_js
                                                                    WebGLBuffer.t_to_js
                                                                    x9152)|])
    let (bindBufferRange :
      'tags this ->
        target:GLenum.t ->
          index:GLuint.t ->
            buffer:WebGLBuffer.t option ->
              offset:GLintptr.t -> size:GLsizeiptr.t -> unit)
      =
      fun (x9162 : 'tags this) ->
        fun ~target:(x9156 : GLenum.t) ->
          fun ~index:(x9157 : GLuint.t) ->
            fun ~buffer:(x9158 : WebGLBuffer.t option) ->
              fun ~offset:(x9160 : GLintptr.t) ->
                fun ~size:(x9161 : GLsizeiptr.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9162) "bindBufferRange"
                       [|(GLenum.t_to_js x9156);(GLuint.t_to_js x9157);(
                         Ojs.option_to_js WebGLBuffer.t_to_js x9158);(
                         GLintptr.t_to_js x9160);(GLsizeiptr.t_to_js x9161)|])
    let (bindSampler :
      'tags this -> unit:GLuint.t -> sampler:WebGLSampler.t option -> unit) =
      fun (x9167 : 'tags this) ->
        fun ~unit:(x9164 : GLuint.t) ->
          fun ~sampler:(x9165 : WebGLSampler.t option) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9167) "bindSampler"
                 [|(GLuint.t_to_js x9164);(Ojs.option_to_js
                                             WebGLSampler.t_to_js x9165)|])
    let (bindTransformFeedback :
      'tags this ->
        target:GLenum.t -> tf:WebGLTransformFeedback.t option -> unit)
      =
      fun (x9172 : 'tags this) ->
        fun ~target:(x9169 : GLenum.t) ->
          fun ~tf:(x9170 : WebGLTransformFeedback.t option) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9172) "bindTransformFeedback"
                 [|(GLenum.t_to_js x9169);(Ojs.option_to_js
                                             WebGLTransformFeedback.t_to_js
                                             x9170)|])
    let (bindVertexArray :
      'tags this -> array:WebGLVertexArrayObject.t option -> unit) =
      fun (x9176 : 'tags this) ->
        fun ~array:(x9174 : WebGLVertexArrayObject.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9176) "bindVertexArray"
               [|(Ojs.option_to_js WebGLVertexArrayObject.t_to_js x9174)|])
    let (blitFramebuffer :
      'tags this ->
        srcX0:GLint.t ->
          srcY0:GLint.t ->
            srcX1:GLint.t ->
              srcY1:GLint.t ->
                dstX0:GLint.t ->
                  dstY0:GLint.t ->
                    dstX1:GLint.t ->
                      dstY1:GLint.t ->
                        mask:GLbitfield.t -> filter:GLenum.t -> unit)
      =
      fun (x9188 : 'tags this) ->
        fun ~srcX0:(x9178 : GLint.t) ->
          fun ~srcY0:(x9179 : GLint.t) ->
            fun ~srcX1:(x9180 : GLint.t) ->
              fun ~srcY1:(x9181 : GLint.t) ->
                fun ~dstX0:(x9182 : GLint.t) ->
                  fun ~dstY0:(x9183 : GLint.t) ->
                    fun ~dstX1:(x9184 : GLint.t) ->
                      fun ~dstY1:(x9185 : GLint.t) ->
                        fun ~mask:(x9186 : GLbitfield.t) ->
                          fun ~filter:(x9187 : GLenum.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x9188)
                                 "blitFramebuffer"
                                 [|(GLint.t_to_js x9178);(GLint.t_to_js x9179);(
                                   GLint.t_to_js x9180);(GLint.t_to_js x9181);(
                                   GLint.t_to_js x9182);(GLint.t_to_js x9183);(
                                   GLint.t_to_js x9184);(GLint.t_to_js x9185);(
                                   GLbitfield.t_to_js x9186);(GLenum.t_to_js
                                                                x9187)|])
    let (clearBufferfi :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t -> depth:GLfloat.t -> stencil:GLint.t -> unit)
      =
      fun (x9194 : 'tags this) ->
        fun ~buffer:(x9190 : GLenum.t) ->
          fun ~drawbuffer:(x9191 : GLint.t) ->
            fun ~depth:(x9192 : GLfloat.t) ->
              fun ~stencil:(x9193 : GLint.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x9194) "clearBufferfi"
                     [|(GLenum.t_to_js x9190);(GLint.t_to_js x9191);(
                       GLfloat.t_to_js x9192);(GLint.t_to_js x9193)|])
    let (clearBufferfv :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:Float32List.t -> ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x9202 : 'tags this) ->
        fun ~buffer:(x9196 : GLenum.t) ->
          fun ~drawbuffer:(x9197 : GLint.t) ->
            fun ~values:(x9198 : Float32List.t) ->
              fun ?srcOffset:(x9199 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9204 = this_to_js Obj.magic x9202 in
                     Ojs.call (Ojs.get_prop_ascii x9204 "clearBufferfv")
                       "apply"
                       [|x9204;((let x9200 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9200 "push"
                                      [|(GLenum.t_to_js x9196)|]);
                                 ignore
                                   (Ojs.call x9200 "push"
                                      [|(GLint.t_to_js x9197)|]);
                                 ignore
                                   (Ojs.call x9200 "push"
                                      [|(Float32List.t_to_js x9198)|]);
                                 (match x9199 with
                                  | Some x9201 ->
                                      ignore
                                        (Ojs.call x9200 "push"
                                           [|(GLuint.t_to_js x9201)|])
                                  | None -> ());
                                 x9200))|])
    let (clearBufferiv :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:Int32List.t -> ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x9211 : 'tags this) ->
        fun ~buffer:(x9205 : GLenum.t) ->
          fun ~drawbuffer:(x9206 : GLint.t) ->
            fun ~values:(x9207 : Int32List.t) ->
              fun ?srcOffset:(x9208 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9213 = this_to_js Obj.magic x9211 in
                     Ojs.call (Ojs.get_prop_ascii x9213 "clearBufferiv")
                       "apply"
                       [|x9213;((let x9209 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9209 "push"
                                      [|(GLenum.t_to_js x9205)|]);
                                 ignore
                                   (Ojs.call x9209 "push"
                                      [|(GLint.t_to_js x9206)|]);
                                 ignore
                                   (Ojs.call x9209 "push"
                                      [|(Int32List.t_to_js x9207)|]);
                                 (match x9208 with
                                  | Some x9210 ->
                                      ignore
                                        (Ojs.call x9209 "push"
                                           [|(GLuint.t_to_js x9210)|])
                                  | None -> ());
                                 x9209))|])
    let (clearBufferuiv :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:Uint32List.t -> ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x9220 : 'tags this) ->
        fun ~buffer:(x9214 : GLenum.t) ->
          fun ~drawbuffer:(x9215 : GLint.t) ->
            fun ~values:(x9216 : Uint32List.t) ->
              fun ?srcOffset:(x9217 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9222 = this_to_js Obj.magic x9220 in
                     Ojs.call (Ojs.get_prop_ascii x9222 "clearBufferuiv")
                       "apply"
                       [|x9222;((let x9218 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9218 "push"
                                      [|(GLenum.t_to_js x9214)|]);
                                 ignore
                                   (Ojs.call x9218 "push"
                                      [|(GLint.t_to_js x9215)|]);
                                 ignore
                                   (Ojs.call x9218 "push"
                                      [|(Uint32List.t_to_js x9216)|]);
                                 (match x9217 with
                                  | Some x9219 ->
                                      ignore
                                        (Ojs.call x9218 "push"
                                           [|(GLuint.t_to_js x9219)|])
                                  | None -> ());
                                 x9218))|])
    let (clientWaitSync :
      'tags this ->
        sync:WebGLSync.t ->
          flags:GLbitfield.t -> timeout:GLuint64.t -> GLenum.t)
      =
      fun (x9226 : 'tags this) ->
        fun ~sync:(x9223 : WebGLSync.t) ->
          fun ~flags:(x9224 : GLbitfield.t) ->
            fun ~timeout:(x9225 : GLuint64.t) ->
              GLenum.t_of_js
                (Ojs.call (this_to_js Obj.magic x9226) "clientWaitSync"
                   [|(WebGLSync.t_to_js x9223);(GLbitfield.t_to_js x9224);(
                     GLuint64.t_to_js x9225)|])
    let (compressedTexImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      imageSize:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x9237 : 'tags this) ->
        fun ~target:(x9228 : GLenum.t) ->
          fun ~level:(x9229 : GLint.t) ->
            fun ~internalformat:(x9230 : GLenum.t) ->
              fun ~width:(x9231 : GLsizei.t) ->
                fun ~height:(x9232 : GLsizei.t) ->
                  fun ~depth:(x9233 : GLsizei.t) ->
                    fun ~border:(x9234 : GLint.t) ->
                      fun ~imageSize:(x9235 : GLsizei.t) ->
                        fun ~offset:(x9236 : GLintptr.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x9237)
                               "compressedTexImage3D"
                               [|(GLenum.t_to_js x9228);(GLint.t_to_js x9229);(
                                 GLenum.t_to_js x9230);(GLsizei.t_to_js x9231);(
                                 GLsizei.t_to_js x9232);(GLsizei.t_to_js
                                                           x9233);(GLint.t_to_js
                                                                    x9234);(
                                 GLsizei.t_to_js x9235);(GLintptr.t_to_js
                                                           x9236)|])
    let (compressedTexImage3D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      srcData:ArrayBufferView.t_0 ->
                        ?srcOffset:GLuint.t ->
                          ?srcLengthOverride:GLuint.t -> unit -> unit)
      =
      fun (x9252 : 'tags this) ->
        fun ~target:(x9239 : GLenum.t) ->
          fun ~level:(x9240 : GLint.t) ->
            fun ~internalformat:(x9241 : GLenum.t) ->
              fun ~width:(x9242 : GLsizei.t) ->
                fun ~height:(x9243 : GLsizei.t) ->
                  fun ~depth:(x9244 : GLsizei.t) ->
                    fun ~border:(x9245 : GLint.t) ->
                      fun ~srcData:(x9246 : ArrayBufferView.t_0) ->
                        fun ?srcOffset:(x9247 : GLuint.t option) ->
                          fun ?srcLengthOverride:(x9248 : GLuint.t option) ->
                            fun () ->
                              ignore
                                (let x9254 = this_to_js Obj.magic x9252 in
                                 Ojs.call
                                   (Ojs.get_prop_ascii x9254
                                      "compressedTexImage3D") "apply"
                                   [|x9254;((let x9249 =
                                               Ojs.new_obj
                                                 (Ojs.get_prop_ascii
                                                    Ojs.global "Array") 
                                                 [||] in
                                             ignore
                                               (Ojs.call x9249 "push"
                                                  [|(GLenum.t_to_js x9239)|]);
                                             ignore
                                               (Ojs.call x9249 "push"
                                                  [|(GLint.t_to_js x9240)|]);
                                             ignore
                                               (Ojs.call x9249 "push"
                                                  [|(GLenum.t_to_js x9241)|]);
                                             ignore
                                               (Ojs.call x9249 "push"
                                                  [|(GLsizei.t_to_js x9242)|]);
                                             ignore
                                               (Ojs.call x9249 "push"
                                                  [|(GLsizei.t_to_js x9243)|]);
                                             ignore
                                               (Ojs.call x9249 "push"
                                                  [|(GLsizei.t_to_js x9244)|]);
                                             ignore
                                               (Ojs.call x9249 "push"
                                                  [|(GLint.t_to_js x9245)|]);
                                             ignore
                                               (Ojs.call x9249 "push"
                                                  [|(ArrayBufferView.t_0_to_js
                                                       x9246)|]);
                                             (match x9247 with
                                              | Some x9251 ->
                                                  ignore
                                                    (Ojs.call x9249 "push"
                                                       [|(GLuint.t_to_js
                                                            x9251)|])
                                              | None -> ());
                                             (match x9248 with
                                              | Some x9250 ->
                                                  ignore
                                                    (Ojs.call x9249 "push"
                                                       [|(GLuint.t_to_js
                                                            x9250)|])
                                              | None -> ());
                                             x9249))|])
    let (compressedTexSubImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          imageSize:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x9266 : 'tags this) ->
        fun ~target:(x9255 : GLenum.t) ->
          fun ~level:(x9256 : GLint.t) ->
            fun ~xoffset:(x9257 : GLint.t) ->
              fun ~yoffset:(x9258 : GLint.t) ->
                fun ~zoffset:(x9259 : GLint.t) ->
                  fun ~width:(x9260 : GLsizei.t) ->
                    fun ~height:(x9261 : GLsizei.t) ->
                      fun ~depth:(x9262 : GLsizei.t) ->
                        fun ~format:(x9263 : GLenum.t) ->
                          fun ~imageSize:(x9264 : GLsizei.t) ->
                            fun ~offset:(x9265 : GLintptr.t) ->
                              ignore
                                (Ojs.call (this_to_js Obj.magic x9266)
                                   "compressedTexSubImage3D"
                                   [|(GLenum.t_to_js x9255);(GLint.t_to_js
                                                               x9256);(
                                     GLint.t_to_js x9257);(GLint.t_to_js
                                                             x9258);(
                                     GLint.t_to_js x9259);(GLsizei.t_to_js
                                                             x9260);(
                                     GLsizei.t_to_js x9261);(GLsizei.t_to_js
                                                               x9262);(
                                     GLenum.t_to_js x9263);(GLsizei.t_to_js
                                                              x9264);(
                                     GLintptr.t_to_js x9265)|])
    let (compressedTexSubImage3D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          srcData:ArrayBufferView.t_0 ->
                            ?srcOffset:GLuint.t ->
                              ?srcLengthOverride:GLuint.t -> unit -> unit)
      =
      fun (x9283 : 'tags this) ->
        fun ~target:(x9268 : GLenum.t) ->
          fun ~level:(x9269 : GLint.t) ->
            fun ~xoffset:(x9270 : GLint.t) ->
              fun ~yoffset:(x9271 : GLint.t) ->
                fun ~zoffset:(x9272 : GLint.t) ->
                  fun ~width:(x9273 : GLsizei.t) ->
                    fun ~height:(x9274 : GLsizei.t) ->
                      fun ~depth:(x9275 : GLsizei.t) ->
                        fun ~format:(x9276 : GLenum.t) ->
                          fun ~srcData:(x9277 : ArrayBufferView.t_0) ->
                            fun ?srcOffset:(x9278 : GLuint.t option) ->
                              fun
                                ?srcLengthOverride:(x9279 : GLuint.t option)
                                ->
                                fun () ->
                                  ignore
                                    (let x9285 = this_to_js Obj.magic x9283 in
                                     Ojs.call
                                       (Ojs.get_prop_ascii x9285
                                          "compressedTexSubImage3D") "apply"
                                       [|x9285;((let x9280 =
                                                   Ojs.new_obj
                                                     (Ojs.get_prop_ascii
                                                        Ojs.global "Array")
                                                     [||] in
                                                 ignore
                                                   (Ojs.call x9280 "push"
                                                      [|(GLenum.t_to_js x9268)|]);
                                                 ignore
                                                   (Ojs.call x9280 "push"
                                                      [|(GLint.t_to_js x9269)|]);
                                                 ignore
                                                   (Ojs.call x9280 "push"
                                                      [|(GLint.t_to_js x9270)|]);
                                                 ignore
                                                   (Ojs.call x9280 "push"
                                                      [|(GLint.t_to_js x9271)|]);
                                                 ignore
                                                   (Ojs.call x9280 "push"
                                                      [|(GLint.t_to_js x9272)|]);
                                                 ignore
                                                   (Ojs.call x9280 "push"
                                                      [|(GLsizei.t_to_js
                                                           x9273)|]);
                                                 ignore
                                                   (Ojs.call x9280 "push"
                                                      [|(GLsizei.t_to_js
                                                           x9274)|]);
                                                 ignore
                                                   (Ojs.call x9280 "push"
                                                      [|(GLsizei.t_to_js
                                                           x9275)|]);
                                                 ignore
                                                   (Ojs.call x9280 "push"
                                                      [|(GLenum.t_to_js x9276)|]);
                                                 ignore
                                                   (Ojs.call x9280 "push"
                                                      [|(ArrayBufferView.t_0_to_js
                                                           x9277)|]);
                                                 (match x9278 with
                                                  | Some x9282 ->
                                                      ignore
                                                        (Ojs.call x9280
                                                           "push"
                                                           [|(GLuint.t_to_js
                                                                x9282)|])
                                                  | None -> ());
                                                 (match x9279 with
                                                  | Some x9281 ->
                                                      ignore
                                                        (Ojs.call x9280
                                                           "push"
                                                           [|(GLuint.t_to_js
                                                                x9281)|])
                                                  | None -> ());
                                                 x9280))|])
    let (copyBufferSubData :
      'tags this ->
        readTarget:GLenum.t ->
          writeTarget:GLenum.t ->
            readOffset:GLintptr.t ->
              writeOffset:GLintptr.t -> size:GLsizeiptr.t -> unit)
      =
      fun (x9291 : 'tags this) ->
        fun ~readTarget:(x9286 : GLenum.t) ->
          fun ~writeTarget:(x9287 : GLenum.t) ->
            fun ~readOffset:(x9288 : GLintptr.t) ->
              fun ~writeOffset:(x9289 : GLintptr.t) ->
                fun ~size:(x9290 : GLsizeiptr.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9291)
                       "copyBufferSubData"
                       [|(GLenum.t_to_js x9286);(GLenum.t_to_js x9287);(
                         GLintptr.t_to_js x9288);(GLintptr.t_to_js x9289);(
                         GLsizeiptr.t_to_js x9290)|])
    let (copyTexSubImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  x:GLint.t ->
                    y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x9302 : 'tags this) ->
        fun ~target:(x9293 : GLenum.t) ->
          fun ~level:(x9294 : GLint.t) ->
            fun ~xoffset:(x9295 : GLint.t) ->
              fun ~yoffset:(x9296 : GLint.t) ->
                fun ~zoffset:(x9297 : GLint.t) ->
                  fun ~x:(x9298 : GLint.t) ->
                    fun ~y:(x9299 : GLint.t) ->
                      fun ~width:(x9300 : GLsizei.t) ->
                        fun ~height:(x9301 : GLsizei.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x9302)
                               "copyTexSubImage3D"
                               [|(GLenum.t_to_js x9293);(GLint.t_to_js x9294);(
                                 GLint.t_to_js x9295);(GLint.t_to_js x9296);(
                                 GLint.t_to_js x9297);(GLint.t_to_js x9298);(
                                 GLint.t_to_js x9299);(GLsizei.t_to_js x9300);(
                                 GLsizei.t_to_js x9301)|])
    let (createQuery : 'tags this -> WebGLQuery.t option) =
      fun (x9304 : 'tags this) ->
        Ojs.option_of_js WebGLQuery.t_of_js
          (Ojs.call (this_to_js Obj.magic x9304) "createQuery" [||])
    let (createSampler : 'tags this -> WebGLSampler.t option) =
      fun (x9307 : 'tags this) ->
        Ojs.option_of_js WebGLSampler.t_of_js
          (Ojs.call (this_to_js Obj.magic x9307) "createSampler" [||])
    let (createTransformFeedback :
      'tags this -> WebGLTransformFeedback.t option) =
      fun (x9310 : 'tags this) ->
        Ojs.option_of_js WebGLTransformFeedback.t_of_js
          (Ojs.call (this_to_js Obj.magic x9310) "createTransformFeedback"
             [||])
    let (createVertexArray : 'tags this -> WebGLVertexArrayObject.t option) =
      fun (x9313 : 'tags this) ->
        Ojs.option_of_js WebGLVertexArrayObject.t_of_js
          (Ojs.call (this_to_js Obj.magic x9313) "createVertexArray" [||])
    let (deleteQuery : 'tags this -> query:WebGLQuery.t option -> unit) =
      fun (x9318 : 'tags this) ->
        fun ~query:(x9316 : WebGLQuery.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9318) "deleteQuery"
               [|(Ojs.option_to_js WebGLQuery.t_to_js x9316)|])
    let (deleteSampler : 'tags this -> sampler:WebGLSampler.t option -> unit)
      =
      fun (x9322 : 'tags this) ->
        fun ~sampler:(x9320 : WebGLSampler.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9322) "deleteSampler"
               [|(Ojs.option_to_js WebGLSampler.t_to_js x9320)|])
    let (deleteSync : 'tags this -> sync:WebGLSync.t option -> unit) =
      fun (x9326 : 'tags this) ->
        fun ~sync:(x9324 : WebGLSync.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9326) "deleteSync"
               [|(Ojs.option_to_js WebGLSync.t_to_js x9324)|])
    let (deleteTransformFeedback :
      'tags this -> tf:WebGLTransformFeedback.t option -> unit) =
      fun (x9330 : 'tags this) ->
        fun ~tf:(x9328 : WebGLTransformFeedback.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9330) "deleteTransformFeedback"
               [|(Ojs.option_to_js WebGLTransformFeedback.t_to_js x9328)|])
    let (deleteVertexArray :
      'tags this -> vertexArray:WebGLVertexArrayObject.t option -> unit) =
      fun (x9334 : 'tags this) ->
        fun ~vertexArray:(x9332 : WebGLVertexArrayObject.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9334) "deleteVertexArray"
               [|(Ojs.option_to_js WebGLVertexArrayObject.t_to_js x9332)|])
    let (drawArraysInstanced :
      'tags this ->
        mode:GLenum.t ->
          first:GLint.t -> count:GLsizei.t -> instanceCount:GLsizei.t -> unit)
      =
      fun (x9340 : 'tags this) ->
        fun ~mode:(x9336 : GLenum.t) ->
          fun ~first:(x9337 : GLint.t) ->
            fun ~count:(x9338 : GLsizei.t) ->
              fun ~instanceCount:(x9339 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x9340)
                     "drawArraysInstanced"
                     [|(GLenum.t_to_js x9336);(GLint.t_to_js x9337);(
                       GLsizei.t_to_js x9338);(GLsizei.t_to_js x9339)|])
    let (drawBuffers : 'tags this -> buffers:GLenum.t list -> unit) =
      fun (x9344 : 'tags this) ->
        fun ~buffers:(x9342 : GLenum.t list) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9344) "drawBuffers"
               [|(Ojs.list_to_js GLenum.t_to_js x9342)|])
    let (drawElementsInstanced :
      'tags this ->
        mode:GLenum.t ->
          count:GLsizei.t ->
            type_:GLenum.t ->
              offset:GLintptr.t -> instanceCount:GLsizei.t -> unit)
      =
      fun (x9351 : 'tags this) ->
        fun ~mode:(x9346 : GLenum.t) ->
          fun ~count:(x9347 : GLsizei.t) ->
            fun ~type_:(x9348 : GLenum.t) ->
              fun ~offset:(x9349 : GLintptr.t) ->
                fun ~instanceCount:(x9350 : GLsizei.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9351)
                       "drawElementsInstanced"
                       [|(GLenum.t_to_js x9346);(GLsizei.t_to_js x9347);(
                         GLenum.t_to_js x9348);(GLintptr.t_to_js x9349);(
                         GLsizei.t_to_js x9350)|])
    let (drawRangeElements :
      'tags this ->
        mode:GLenum.t ->
          start:GLuint.t ->
            end_:GLuint.t ->
              count:GLsizei.t -> type_:GLenum.t -> offset:GLintptr.t -> unit)
      =
      fun (x9359 : 'tags this) ->
        fun ~mode:(x9353 : GLenum.t) ->
          fun ~start:(x9354 : GLuint.t) ->
            fun ~end_:(x9355 : GLuint.t) ->
              fun ~count:(x9356 : GLsizei.t) ->
                fun ~type_:(x9357 : GLenum.t) ->
                  fun ~offset:(x9358 : GLintptr.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x9359)
                         "drawRangeElements"
                         [|(GLenum.t_to_js x9353);(GLuint.t_to_js x9354);(
                           GLuint.t_to_js x9355);(GLsizei.t_to_js x9356);(
                           GLenum.t_to_js x9357);(GLintptr.t_to_js x9358)|])
    let (endQuery : 'tags this -> target:GLenum.t -> unit) =
      fun (x9362 : 'tags this) ->
        fun ~target:(x9361 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9362) "endQuery"
               [|(GLenum.t_to_js x9361)|])
    let (endTransformFeedback : 'tags this -> unit) =
      fun (x9364 : 'tags this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic x9364) "endTransformFeedback" [||])
    let (fenceSync :
      'tags this ->
        condition:GLenum.t -> flags:GLbitfield.t -> WebGLSync.t option)
      =
      fun (x9368 : 'tags this) ->
        fun ~condition:(x9366 : GLenum.t) ->
          fun ~flags:(x9367 : GLbitfield.t) ->
            Ojs.option_of_js WebGLSync.t_of_js
              (Ojs.call (this_to_js Obj.magic x9368) "fenceSync"
                 [|(GLenum.t_to_js x9366);(GLbitfield.t_to_js x9367)|])
    let (framebufferTextureLayer :
      'tags this ->
        target:GLenum.t ->
          attachment:GLenum.t ->
            texture:WebGLTexture.t option ->
              level:GLint.t -> layer:GLint.t -> unit)
      =
      fun (x9377 : 'tags this) ->
        fun ~target:(x9371 : GLenum.t) ->
          fun ~attachment:(x9372 : GLenum.t) ->
            fun ~texture:(x9373 : WebGLTexture.t option) ->
              fun ~level:(x9375 : GLint.t) ->
                fun ~layer:(x9376 : GLint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9377)
                       "framebufferTextureLayer"
                       [|(GLenum.t_to_js x9371);(GLenum.t_to_js x9372);(
                         Ojs.option_to_js WebGLTexture.t_to_js x9373);(
                         GLint.t_to_js x9375);(GLint.t_to_js x9376)|])
    let (getActiveUniformBlockName :
      'tags this ->
        program:WebGLProgram.t -> uniformBlockIndex:GLuint.t -> string option)
      =
      fun (x9381 : 'tags this) ->
        fun ~program:(x9379 : WebGLProgram.t) ->
          fun ~uniformBlockIndex:(x9380 : GLuint.t) ->
            Ojs.option_of_js Ojs.string_of_js
              (Ojs.call (this_to_js Obj.magic x9381)
                 "getActiveUniformBlockName"
                 [|(WebGLProgram.t_to_js x9379);(GLuint.t_to_js x9380)|])
    let (getActiveUniformBlockParameter :
      'tags this ->
        program:WebGLProgram.t ->
          uniformBlockIndex:GLuint.t -> pname:GLenum.t -> any)
      =
      fun (x9387 : 'tags this) ->
        fun ~program:(x9384 : WebGLProgram.t) ->
          fun ~uniformBlockIndex:(x9385 : GLuint.t) ->
            fun ~pname:(x9386 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x9387)
                   "getActiveUniformBlockParameter"
                   [|(WebGLProgram.t_to_js x9384);(GLuint.t_to_js x9385);(
                     GLenum.t_to_js x9386)|])
    let (getActiveUniforms :
      'tags this ->
        program:WebGLProgram.t ->
          uniformIndices:GLuint.t list -> pname:GLenum.t -> any)
      =
      fun (x9393 : 'tags this) ->
        fun ~program:(x9389 : WebGLProgram.t) ->
          fun ~uniformIndices:(x9390 : GLuint.t list) ->
            fun ~pname:(x9392 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x9393) "getActiveUniforms"
                   [|(WebGLProgram.t_to_js x9389);(Ojs.list_to_js
                                                     GLuint.t_to_js x9390);(
                     GLenum.t_to_js x9392)|])
    let (getBufferSubData :
      'tags this ->
        target:GLenum.t ->
          srcByteOffset:GLintptr.t ->
            dstBuffer:ArrayBufferView.t_0 ->
              ?dstOffset:GLuint.t -> ?length:GLuint.t -> unit -> unit)
      =
      fun (x9403 : 'tags this) ->
        fun ~target:(x9395 : GLenum.t) ->
          fun ~srcByteOffset:(x9396 : GLintptr.t) ->
            fun ~dstBuffer:(x9397 : ArrayBufferView.t_0) ->
              fun ?dstOffset:(x9398 : GLuint.t option) ->
                fun ?length:(x9399 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9405 = this_to_js Obj.magic x9403 in
                       Ojs.call (Ojs.get_prop_ascii x9405 "getBufferSubData")
                         "apply"
                         [|x9405;((let x9400 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9400 "push"
                                        [|(GLenum.t_to_js x9395)|]);
                                   ignore
                                     (Ojs.call x9400 "push"
                                        [|(GLintptr.t_to_js x9396)|]);
                                   ignore
                                     (Ojs.call x9400 "push"
                                        [|(ArrayBufferView.t_0_to_js x9397)|]);
                                   (match x9398 with
                                    | Some x9402 ->
                                        ignore
                                          (Ojs.call x9400 "push"
                                             [|(GLuint.t_to_js x9402)|])
                                    | None -> ());
                                   (match x9399 with
                                    | Some x9401 ->
                                        ignore
                                          (Ojs.call x9400 "push"
                                             [|(GLuint.t_to_js x9401)|])
                                    | None -> ());
                                   x9400))|])
    let (getFragDataLocation :
      'tags this -> program:WebGLProgram.t -> name:string -> GLint.t) =
      fun (x9408 : 'tags this) ->
        fun ~program:(x9406 : WebGLProgram.t) ->
          fun ~name:(x9407 : string) ->
            GLint.t_of_js
              (Ojs.call (this_to_js Obj.magic x9408) "getFragDataLocation"
                 [|(WebGLProgram.t_to_js x9406);(Ojs.string_to_js x9407)|])
    let (getIndexedParameter :
      'tags this -> target:GLenum.t -> index:GLuint.t -> any) =
      fun (x9412 : 'tags this) ->
        fun ~target:(x9410 : GLenum.t) ->
          fun ~index:(x9411 : GLuint.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x9412) "getIndexedParameter"
                 [|(GLenum.t_to_js x9410);(GLuint.t_to_js x9411)|])
    let (getInternalformatParameter :
      'tags this ->
        target:GLenum.t -> internalformat:GLenum.t -> pname:GLenum.t -> any)
      =
      fun (x9417 : 'tags this) ->
        fun ~target:(x9414 : GLenum.t) ->
          fun ~internalformat:(x9415 : GLenum.t) ->
            fun ~pname:(x9416 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x9417)
                   "getInternalformatParameter"
                   [|(GLenum.t_to_js x9414);(GLenum.t_to_js x9415);(GLenum.t_to_js
                                                                    x9416)|])
    let (getQuery :
      'tags this -> target:GLenum.t -> pname:GLenum.t -> WebGLQuery.t option)
      =
      fun (x9421 : 'tags this) ->
        fun ~target:(x9419 : GLenum.t) ->
          fun ~pname:(x9420 : GLenum.t) ->
            Ojs.option_of_js WebGLQuery.t_of_js
              (Ojs.call (this_to_js Obj.magic x9421) "getQuery"
                 [|(GLenum.t_to_js x9419);(GLenum.t_to_js x9420)|])
    let (getQueryParameter :
      'tags this -> query:WebGLQuery.t -> pname:GLenum.t -> any) =
      fun (x9426 : 'tags this) ->
        fun ~query:(x9424 : WebGLQuery.t) ->
          fun ~pname:(x9425 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x9426) "getQueryParameter"
                 [|(WebGLQuery.t_to_js x9424);(GLenum.t_to_js x9425)|])
    let (getSamplerParameter :
      'tags this -> sampler:WebGLSampler.t -> pname:GLenum.t -> any) =
      fun (x9430 : 'tags this) ->
        fun ~sampler:(x9428 : WebGLSampler.t) ->
          fun ~pname:(x9429 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x9430) "getSamplerParameter"
                 [|(WebGLSampler.t_to_js x9428);(GLenum.t_to_js x9429)|])
    let (getSyncParameter :
      'tags this -> sync:WebGLSync.t -> pname:GLenum.t -> any) =
      fun (x9434 : 'tags this) ->
        fun ~sync:(x9432 : WebGLSync.t) ->
          fun ~pname:(x9433 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x9434) "getSyncParameter"
                 [|(WebGLSync.t_to_js x9432);(GLenum.t_to_js x9433)|])
    let (getTransformFeedbackVarying :
      'tags this ->
        program:WebGLProgram.t -> index:GLuint.t -> WebGLActiveInfo.t option)
      =
      fun (x9438 : 'tags this) ->
        fun ~program:(x9436 : WebGLProgram.t) ->
          fun ~index:(x9437 : GLuint.t) ->
            Ojs.option_of_js WebGLActiveInfo.t_of_js
              (Ojs.call (this_to_js Obj.magic x9438)
                 "getTransformFeedbackVarying"
                 [|(WebGLProgram.t_to_js x9436);(GLuint.t_to_js x9437)|])
    let (getUniformBlockIndex :
      'tags this ->
        program:WebGLProgram.t -> uniformBlockName:string -> GLuint.t)
      =
      fun (x9443 : 'tags this) ->
        fun ~program:(x9441 : WebGLProgram.t) ->
          fun ~uniformBlockName:(x9442 : string) ->
            GLuint.t_of_js
              (Ojs.call (this_to_js Obj.magic x9443) "getUniformBlockIndex"
                 [|(WebGLProgram.t_to_js x9441);(Ojs.string_to_js x9442)|])
    let (getUniformIndices :
      'tags this ->
        program:WebGLProgram.t ->
          uniformNames:string list -> GLuint.t list option)
      =
      fun (x9448 : 'tags this) ->
        fun ~program:(x9445 : WebGLProgram.t) ->
          fun ~uniformNames:(x9446 : string list) ->
            Ojs.option_of_js
              (fun (x9450 : Ojs.t) -> Ojs.list_of_js GLuint.t_of_js x9450)
              (Ojs.call (this_to_js Obj.magic x9448) "getUniformIndices"
                 [|(WebGLProgram.t_to_js x9445);(Ojs.list_to_js
                                                   Ojs.string_to_js x9446)|])
    let (invalidateFramebuffer :
      'tags this -> target:GLenum.t -> attachments:GLenum.t list -> unit) =
      fun (x9455 : 'tags this) ->
        fun ~target:(x9452 : GLenum.t) ->
          fun ~attachments:(x9453 : GLenum.t list) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9455) "invalidateFramebuffer"
                 [|(GLenum.t_to_js x9452);(Ojs.list_to_js GLenum.t_to_js
                                             x9453)|])
    let (invalidateSubFramebuffer :
      'tags this ->
        target:GLenum.t ->
          attachments:GLenum.t list ->
            x:GLint.t ->
              y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x9464 : 'tags this) ->
        fun ~target:(x9457 : GLenum.t) ->
          fun ~attachments:(x9458 : GLenum.t list) ->
            fun ~x:(x9460 : GLint.t) ->
              fun ~y:(x9461 : GLint.t) ->
                fun ~width:(x9462 : GLsizei.t) ->
                  fun ~height:(x9463 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x9464)
                         "invalidateSubFramebuffer"
                         [|(GLenum.t_to_js x9457);(Ojs.list_to_js
                                                     GLenum.t_to_js x9458);(
                           GLint.t_to_js x9460);(GLint.t_to_js x9461);(
                           GLsizei.t_to_js x9462);(GLsizei.t_to_js x9463)|])
    let (isQuery : 'tags this -> query:WebGLQuery.t option -> GLboolean.t) =
      fun (x9468 : 'tags this) ->
        fun ~query:(x9466 : WebGLQuery.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x9468) "isQuery"
               [|(Ojs.option_to_js WebGLQuery.t_to_js x9466)|])
    let (isSampler :
      'tags this -> sampler:WebGLSampler.t option -> GLboolean.t) =
      fun (x9472 : 'tags this) ->
        fun ~sampler:(x9470 : WebGLSampler.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x9472) "isSampler"
               [|(Ojs.option_to_js WebGLSampler.t_to_js x9470)|])
    let (isSync : 'tags this -> sync:WebGLSync.t option -> GLboolean.t) =
      fun (x9476 : 'tags this) ->
        fun ~sync:(x9474 : WebGLSync.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x9476) "isSync"
               [|(Ojs.option_to_js WebGLSync.t_to_js x9474)|])
    let (isTransformFeedback :
      'tags this -> tf:WebGLTransformFeedback.t option -> GLboolean.t) =
      fun (x9480 : 'tags this) ->
        fun ~tf:(x9478 : WebGLTransformFeedback.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x9480) "isTransformFeedback"
               [|(Ojs.option_to_js WebGLTransformFeedback.t_to_js x9478)|])
    let (isVertexArray :
      'tags this ->
        vertexArray:WebGLVertexArrayObject.t option -> GLboolean.t)
      =
      fun (x9484 : 'tags this) ->
        fun ~vertexArray:(x9482 : WebGLVertexArrayObject.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x9484) "isVertexArray"
               [|(Ojs.option_to_js WebGLVertexArrayObject.t_to_js x9482)|])
    let (pauseTransformFeedback : 'tags this -> unit) =
      fun (x9486 : 'tags this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic x9486) "pauseTransformFeedback"
             [||])
    let (readBuffer : 'tags this -> src:GLenum.t -> unit) =
      fun (x9489 : 'tags this) ->
        fun ~src:(x9488 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9489) "readBuffer"
               [|(GLenum.t_to_js x9488)|])
    let (renderbufferStorageMultisample :
      'tags this ->
        target:GLenum.t ->
          samples:GLsizei.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x9496 : 'tags this) ->
        fun ~target:(x9491 : GLenum.t) ->
          fun ~samples:(x9492 : GLsizei.t) ->
            fun ~internalformat:(x9493 : GLenum.t) ->
              fun ~width:(x9494 : GLsizei.t) ->
                fun ~height:(x9495 : GLsizei.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9496)
                       "renderbufferStorageMultisample"
                       [|(GLenum.t_to_js x9491);(GLsizei.t_to_js x9492);(
                         GLenum.t_to_js x9493);(GLsizei.t_to_js x9494);(
                         GLsizei.t_to_js x9495)|])
    let (resumeTransformFeedback : 'tags this -> unit) =
      fun (x9498 : 'tags this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic x9498) "resumeTransformFeedback"
             [||])
    let (samplerParameterf :
      'tags this ->
        sampler:WebGLSampler.t -> pname:GLenum.t -> param:GLfloat.t -> unit)
      =
      fun (x9503 : 'tags this) ->
        fun ~sampler:(x9500 : WebGLSampler.t) ->
          fun ~pname:(x9501 : GLenum.t) ->
            fun ~param:(x9502 : GLfloat.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x9503) "samplerParameterf"
                   [|(WebGLSampler.t_to_js x9500);(GLenum.t_to_js x9501);(
                     GLfloat.t_to_js x9502)|])
    let (samplerParameteri :
      'tags this ->
        sampler:WebGLSampler.t -> pname:GLenum.t -> param:GLint.t -> unit)
      =
      fun (x9508 : 'tags this) ->
        fun ~sampler:(x9505 : WebGLSampler.t) ->
          fun ~pname:(x9506 : GLenum.t) ->
            fun ~param:(x9507 : GLint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x9508) "samplerParameteri"
                   [|(WebGLSampler.t_to_js x9505);(GLenum.t_to_js x9506);(
                     GLint.t_to_js x9507)|])
    let (texImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      format:GLenum.t ->
                        type_:GLenum.t -> pboOffset:GLintptr.t -> unit)
      =
      fun (x9520 : 'tags this) ->
        fun ~target:(x9510 : GLenum.t) ->
          fun ~level:(x9511 : GLint.t) ->
            fun ~internalformat:(x9512 : GLint.t) ->
              fun ~width:(x9513 : GLsizei.t) ->
                fun ~height:(x9514 : GLsizei.t) ->
                  fun ~depth:(x9515 : GLsizei.t) ->
                    fun ~border:(x9516 : GLint.t) ->
                      fun ~format:(x9517 : GLenum.t) ->
                        fun ~type_:(x9518 : GLenum.t) ->
                          fun ~pboOffset:(x9519 : GLintptr.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x9520)
                                 "texImage3D"
                                 [|(GLenum.t_to_js x9510);(GLint.t_to_js
                                                             x9511);(
                                   GLint.t_to_js x9512);(GLsizei.t_to_js
                                                           x9513);(GLsizei.t_to_js
                                                                    x9514);(
                                   GLsizei.t_to_js x9515);(GLint.t_to_js
                                                             x9516);(
                                   GLenum.t_to_js x9517);(GLenum.t_to_js
                                                            x9518);(GLintptr.t_to_js
                                                                    x9519)|])
    let (texImage3D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      format:GLenum.t ->
                        type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x9532 : 'tags this) ->
        fun ~target:(x9522 : GLenum.t) ->
          fun ~level:(x9523 : GLint.t) ->
            fun ~internalformat:(x9524 : GLint.t) ->
              fun ~width:(x9525 : GLsizei.t) ->
                fun ~height:(x9526 : GLsizei.t) ->
                  fun ~depth:(x9527 : GLsizei.t) ->
                    fun ~border:(x9528 : GLint.t) ->
                      fun ~format:(x9529 : GLenum.t) ->
                        fun ~type_:(x9530 : GLenum.t) ->
                          fun ~source:(x9531 : TexImageSource.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x9532)
                                 "texImage3D"
                                 [|(GLenum.t_to_js x9522);(GLint.t_to_js
                                                             x9523);(
                                   GLint.t_to_js x9524);(GLsizei.t_to_js
                                                           x9525);(GLsizei.t_to_js
                                                                    x9526);(
                                   GLsizei.t_to_js x9527);(GLint.t_to_js
                                                             x9528);(
                                   GLenum.t_to_js x9529);(GLenum.t_to_js
                                                            x9530);(TexImageSource.t_to_js
                                                                    x9531)|])
    let (texImage3D'' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      format:GLenum.t ->
                        type_:GLenum.t ->
                          srcData:ArrayBufferView.t_0 option -> unit)
      =
      fun (x9545 : 'tags this) ->
        fun ~target:(x9534 : GLenum.t) ->
          fun ~level:(x9535 : GLint.t) ->
            fun ~internalformat:(x9536 : GLint.t) ->
              fun ~width:(x9537 : GLsizei.t) ->
                fun ~height:(x9538 : GLsizei.t) ->
                  fun ~depth:(x9539 : GLsizei.t) ->
                    fun ~border:(x9540 : GLint.t) ->
                      fun ~format:(x9541 : GLenum.t) ->
                        fun ~type_:(x9542 : GLenum.t) ->
                          fun ~srcData:(x9543 : ArrayBufferView.t_0 option)
                            ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x9545)
                                 "texImage3D"
                                 [|(GLenum.t_to_js x9534);(GLint.t_to_js
                                                             x9535);(
                                   GLint.t_to_js x9536);(GLsizei.t_to_js
                                                           x9537);(GLsizei.t_to_js
                                                                    x9538);(
                                   GLsizei.t_to_js x9539);(GLint.t_to_js
                                                             x9540);(
                                   GLenum.t_to_js x9541);(GLenum.t_to_js
                                                            x9542);(Ojs.option_to_js
                                                                    ArrayBufferView.t_0_to_js
                                                                    x9543)|])
    let (texImage3D''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      format:GLenum.t ->
                        type_:GLenum.t ->
                          srcData:ArrayBufferView.t_0 ->
                            srcOffset:GLuint.t -> unit)
      =
      fun (x9558 : 'tags this) ->
        fun ~target:(x9547 : GLenum.t) ->
          fun ~level:(x9548 : GLint.t) ->
            fun ~internalformat:(x9549 : GLint.t) ->
              fun ~width:(x9550 : GLsizei.t) ->
                fun ~height:(x9551 : GLsizei.t) ->
                  fun ~depth:(x9552 : GLsizei.t) ->
                    fun ~border:(x9553 : GLint.t) ->
                      fun ~format:(x9554 : GLenum.t) ->
                        fun ~type_:(x9555 : GLenum.t) ->
                          fun ~srcData:(x9556 : ArrayBufferView.t_0) ->
                            fun ~srcOffset:(x9557 : GLuint.t) ->
                              ignore
                                (Ojs.call (this_to_js Obj.magic x9558)
                                   "texImage3D"
                                   [|(GLenum.t_to_js x9547);(GLint.t_to_js
                                                               x9548);(
                                     GLint.t_to_js x9549);(GLsizei.t_to_js
                                                             x9550);(
                                     GLsizei.t_to_js x9551);(GLsizei.t_to_js
                                                               x9552);(
                                     GLint.t_to_js x9553);(GLenum.t_to_js
                                                             x9554);(
                                     GLenum.t_to_js x9555);(ArrayBufferView.t_0_to_js
                                                              x9556);(
                                     GLuint.t_to_js x9557)|])
    let (texStorage2D :
      'tags this ->
        target:GLenum.t ->
          levels:GLsizei.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x9565 : 'tags this) ->
        fun ~target:(x9560 : GLenum.t) ->
          fun ~levels:(x9561 : GLsizei.t) ->
            fun ~internalformat:(x9562 : GLenum.t) ->
              fun ~width:(x9563 : GLsizei.t) ->
                fun ~height:(x9564 : GLsizei.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9565) "texStorage2D"
                       [|(GLenum.t_to_js x9560);(GLsizei.t_to_js x9561);(
                         GLenum.t_to_js x9562);(GLsizei.t_to_js x9563);(
                         GLsizei.t_to_js x9564)|])
    let (texStorage3D :
      'tags this ->
        target:GLenum.t ->
          levels:GLsizei.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t -> height:GLsizei.t -> depth:GLsizei.t -> unit)
      =
      fun (x9573 : 'tags this) ->
        fun ~target:(x9567 : GLenum.t) ->
          fun ~levels:(x9568 : GLsizei.t) ->
            fun ~internalformat:(x9569 : GLenum.t) ->
              fun ~width:(x9570 : GLsizei.t) ->
                fun ~height:(x9571 : GLsizei.t) ->
                  fun ~depth:(x9572 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x9573) "texStorage3D"
                         [|(GLenum.t_to_js x9567);(GLsizei.t_to_js x9568);(
                           GLenum.t_to_js x9569);(GLsizei.t_to_js x9570);(
                           GLsizei.t_to_js x9571);(GLsizei.t_to_js x9572)|])
    let (texSubImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          type_:GLenum.t -> pboOffset:GLintptr.t -> unit)
      =
      fun (x9586 : 'tags this) ->
        fun ~target:(x9575 : GLenum.t) ->
          fun ~level:(x9576 : GLint.t) ->
            fun ~xoffset:(x9577 : GLint.t) ->
              fun ~yoffset:(x9578 : GLint.t) ->
                fun ~zoffset:(x9579 : GLint.t) ->
                  fun ~width:(x9580 : GLsizei.t) ->
                    fun ~height:(x9581 : GLsizei.t) ->
                      fun ~depth:(x9582 : GLsizei.t) ->
                        fun ~format:(x9583 : GLenum.t) ->
                          fun ~type_:(x9584 : GLenum.t) ->
                            fun ~pboOffset:(x9585 : GLintptr.t) ->
                              ignore
                                (Ojs.call (this_to_js Obj.magic x9586)
                                   "texSubImage3D"
                                   [|(GLenum.t_to_js x9575);(GLint.t_to_js
                                                               x9576);(
                                     GLint.t_to_js x9577);(GLint.t_to_js
                                                             x9578);(
                                     GLint.t_to_js x9579);(GLsizei.t_to_js
                                                             x9580);(
                                     GLsizei.t_to_js x9581);(GLsizei.t_to_js
                                                               x9582);(
                                     GLenum.t_to_js x9583);(GLenum.t_to_js
                                                              x9584);(
                                     GLintptr.t_to_js x9585)|])
    let (texSubImage3D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x9599 : 'tags this) ->
        fun ~target:(x9588 : GLenum.t) ->
          fun ~level:(x9589 : GLint.t) ->
            fun ~xoffset:(x9590 : GLint.t) ->
              fun ~yoffset:(x9591 : GLint.t) ->
                fun ~zoffset:(x9592 : GLint.t) ->
                  fun ~width:(x9593 : GLsizei.t) ->
                    fun ~height:(x9594 : GLsizei.t) ->
                      fun ~depth:(x9595 : GLsizei.t) ->
                        fun ~format:(x9596 : GLenum.t) ->
                          fun ~type_:(x9597 : GLenum.t) ->
                            fun ~source:(x9598 : TexImageSource.t) ->
                              ignore
                                (Ojs.call (this_to_js Obj.magic x9599)
                                   "texSubImage3D"
                                   [|(GLenum.t_to_js x9588);(GLint.t_to_js
                                                               x9589);(
                                     GLint.t_to_js x9590);(GLint.t_to_js
                                                             x9591);(
                                     GLint.t_to_js x9592);(GLsizei.t_to_js
                                                             x9593);(
                                     GLsizei.t_to_js x9594);(GLsizei.t_to_js
                                                               x9595);(
                                     GLenum.t_to_js x9596);(GLenum.t_to_js
                                                              x9597);(
                                     TexImageSource.t_to_js x9598)|])
    let (texSubImage3D'' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          type_:GLenum.t ->
                            srcData:ArrayBufferView.t_0 option ->
                              ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x9616 : 'tags this) ->
        fun ~target:(x9601 : GLenum.t) ->
          fun ~level:(x9602 : GLint.t) ->
            fun ~xoffset:(x9603 : GLint.t) ->
              fun ~yoffset:(x9604 : GLint.t) ->
                fun ~zoffset:(x9605 : GLint.t) ->
                  fun ~width:(x9606 : GLsizei.t) ->
                    fun ~height:(x9607 : GLsizei.t) ->
                      fun ~depth:(x9608 : GLsizei.t) ->
                        fun ~format:(x9609 : GLenum.t) ->
                          fun ~type_:(x9610 : GLenum.t) ->
                            fun ~srcData:(x9611 : ArrayBufferView.t_0 option)
                              ->
                              fun ?srcOffset:(x9612 : GLuint.t option) ->
                                fun () ->
                                  ignore
                                    (let x9618 = this_to_js Obj.magic x9616 in
                                     Ojs.call
                                       (Ojs.get_prop_ascii x9618
                                          "texSubImage3D") "apply"
                                       [|x9618;((let x9613 =
                                                   Ojs.new_obj
                                                     (Ojs.get_prop_ascii
                                                        Ojs.global "Array")
                                                     [||] in
                                                 ignore
                                                   (Ojs.call x9613 "push"
                                                      [|(GLenum.t_to_js x9601)|]);
                                                 ignore
                                                   (Ojs.call x9613 "push"
                                                      [|(GLint.t_to_js x9602)|]);
                                                 ignore
                                                   (Ojs.call x9613 "push"
                                                      [|(GLint.t_to_js x9603)|]);
                                                 ignore
                                                   (Ojs.call x9613 "push"
                                                      [|(GLint.t_to_js x9604)|]);
                                                 ignore
                                                   (Ojs.call x9613 "push"
                                                      [|(GLint.t_to_js x9605)|]);
                                                 ignore
                                                   (Ojs.call x9613 "push"
                                                      [|(GLsizei.t_to_js
                                                           x9606)|]);
                                                 ignore
                                                   (Ojs.call x9613 "push"
                                                      [|(GLsizei.t_to_js
                                                           x9607)|]);
                                                 ignore
                                                   (Ojs.call x9613 "push"
                                                      [|(GLsizei.t_to_js
                                                           x9608)|]);
                                                 ignore
                                                   (Ojs.call x9613 "push"
                                                      [|(GLenum.t_to_js x9609)|]);
                                                 ignore
                                                   (Ojs.call x9613 "push"
                                                      [|(GLenum.t_to_js x9610)|]);
                                                 ignore
                                                   (Ojs.call x9613 "push"
                                                      [|(Ojs.option_to_js
                                                           ArrayBufferView.t_0_to_js
                                                           x9611)|]);
                                                 (match x9612 with
                                                  | Some x9614 ->
                                                      ignore
                                                        (Ojs.call x9613
                                                           "push"
                                                           [|(GLuint.t_to_js
                                                                x9614)|])
                                                  | None -> ());
                                                 x9613))|])
    let (transformFeedbackVaryings :
      'tags this ->
        program:WebGLProgram.t ->
          varyings:string list -> bufferMode:GLenum.t -> unit)
      =
      fun (x9623 : 'tags this) ->
        fun ~program:(x9619 : WebGLProgram.t) ->
          fun ~varyings:(x9620 : string list) ->
            fun ~bufferMode:(x9622 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x9623)
                   "transformFeedbackVaryings"
                   [|(WebGLProgram.t_to_js x9619);(Ojs.list_to_js
                                                     Ojs.string_to_js x9620);(
                     GLenum.t_to_js x9622)|])
    let (uniform1ui :
      'tags this ->
        location:WebGLUniformLocation.t option -> v0:GLuint.t -> unit)
      =
      fun (x9628 : 'tags this) ->
        fun ~location:(x9625 : WebGLUniformLocation.t option) ->
          fun ~v0:(x9627 : GLuint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9628) "uniform1ui"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x9625);(
                   GLuint.t_to_js x9627)|])
    let (uniform1uiv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Uint32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9638 : 'tags this) ->
        fun ~location:(x9630 : WebGLUniformLocation.t option) ->
          fun ~data:(x9631 : Uint32List.t) ->
            fun ?srcOffset:(x9632 : GLuint.t option) ->
              fun ?srcLength:(x9633 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9640 = this_to_js Obj.magic x9638 in
                     Ojs.call (Ojs.get_prop_ascii x9640 "uniform1uiv")
                       "apply"
                       [|x9640;((let x9634 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9634 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x9630)|]);
                                 ignore
                                   (Ojs.call x9634 "push"
                                      [|(Uint32List.t_to_js x9631)|]);
                                 (match x9632 with
                                  | Some x9636 ->
                                      ignore
                                        (Ojs.call x9634 "push"
                                           [|(GLuint.t_to_js x9636)|])
                                  | None -> ());
                                 (match x9633 with
                                  | Some x9635 ->
                                      ignore
                                        (Ojs.call x9634 "push"
                                           [|(GLuint.t_to_js x9635)|])
                                  | None -> ());
                                 x9634))|])
    let (uniform2ui :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v0:GLuint.t -> v1:GLuint.t -> unit)
      =
      fun (x9645 : 'tags this) ->
        fun ~location:(x9641 : WebGLUniformLocation.t option) ->
          fun ~v0:(x9643 : GLuint.t) ->
            fun ~v1:(x9644 : GLuint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x9645) "uniform2ui"
                   [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x9641);(
                     GLuint.t_to_js x9643);(GLuint.t_to_js x9644)|])
    let (uniform2uiv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Uint32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9655 : 'tags this) ->
        fun ~location:(x9647 : WebGLUniformLocation.t option) ->
          fun ~data:(x9648 : Uint32List.t) ->
            fun ?srcOffset:(x9649 : GLuint.t option) ->
              fun ?srcLength:(x9650 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9657 = this_to_js Obj.magic x9655 in
                     Ojs.call (Ojs.get_prop_ascii x9657 "uniform2uiv")
                       "apply"
                       [|x9657;((let x9651 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9651 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x9647)|]);
                                 ignore
                                   (Ojs.call x9651 "push"
                                      [|(Uint32List.t_to_js x9648)|]);
                                 (match x9649 with
                                  | Some x9653 ->
                                      ignore
                                        (Ojs.call x9651 "push"
                                           [|(GLuint.t_to_js x9653)|])
                                  | None -> ());
                                 (match x9650 with
                                  | Some x9652 ->
                                      ignore
                                        (Ojs.call x9651 "push"
                                           [|(GLuint.t_to_js x9652)|])
                                  | None -> ());
                                 x9651))|])
    let (uniform3ui :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v0:GLuint.t -> v1:GLuint.t -> v2:GLuint.t -> unit)
      =
      fun (x9663 : 'tags this) ->
        fun ~location:(x9658 : WebGLUniformLocation.t option) ->
          fun ~v0:(x9660 : GLuint.t) ->
            fun ~v1:(x9661 : GLuint.t) ->
              fun ~v2:(x9662 : GLuint.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x9663) "uniform3ui"
                     [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x9658);(
                       GLuint.t_to_js x9660);(GLuint.t_to_js x9661);(
                       GLuint.t_to_js x9662)|])
    let (uniform3uiv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Uint32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9673 : 'tags this) ->
        fun ~location:(x9665 : WebGLUniformLocation.t option) ->
          fun ~data:(x9666 : Uint32List.t) ->
            fun ?srcOffset:(x9667 : GLuint.t option) ->
              fun ?srcLength:(x9668 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9675 = this_to_js Obj.magic x9673 in
                     Ojs.call (Ojs.get_prop_ascii x9675 "uniform3uiv")
                       "apply"
                       [|x9675;((let x9669 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9669 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x9665)|]);
                                 ignore
                                   (Ojs.call x9669 "push"
                                      [|(Uint32List.t_to_js x9666)|]);
                                 (match x9667 with
                                  | Some x9671 ->
                                      ignore
                                        (Ojs.call x9669 "push"
                                           [|(GLuint.t_to_js x9671)|])
                                  | None -> ());
                                 (match x9668 with
                                  | Some x9670 ->
                                      ignore
                                        (Ojs.call x9669 "push"
                                           [|(GLuint.t_to_js x9670)|])
                                  | None -> ());
                                 x9669))|])
    let (uniform4ui :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v0:GLuint.t -> v1:GLuint.t -> v2:GLuint.t -> v3:GLuint.t -> unit)
      =
      fun (x9682 : 'tags this) ->
        fun ~location:(x9676 : WebGLUniformLocation.t option) ->
          fun ~v0:(x9678 : GLuint.t) ->
            fun ~v1:(x9679 : GLuint.t) ->
              fun ~v2:(x9680 : GLuint.t) ->
                fun ~v3:(x9681 : GLuint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9682) "uniform4ui"
                       [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x9676);(
                         GLuint.t_to_js x9678);(GLuint.t_to_js x9679);(
                         GLuint.t_to_js x9680);(GLuint.t_to_js x9681)|])
    let (uniform4uiv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Uint32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9692 : 'tags this) ->
        fun ~location:(x9684 : WebGLUniformLocation.t option) ->
          fun ~data:(x9685 : Uint32List.t) ->
            fun ?srcOffset:(x9686 : GLuint.t option) ->
              fun ?srcLength:(x9687 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9694 = this_to_js Obj.magic x9692 in
                     Ojs.call (Ojs.get_prop_ascii x9694 "uniform4uiv")
                       "apply"
                       [|x9694;((let x9688 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9688 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x9684)|]);
                                 ignore
                                   (Ojs.call x9688 "push"
                                      [|(Uint32List.t_to_js x9685)|]);
                                 (match x9686 with
                                  | Some x9690 ->
                                      ignore
                                        (Ojs.call x9688 "push"
                                           [|(GLuint.t_to_js x9690)|])
                                  | None -> ());
                                 (match x9687 with
                                  | Some x9689 ->
                                      ignore
                                        (Ojs.call x9688 "push"
                                           [|(GLuint.t_to_js x9689)|])
                                  | None -> ());
                                 x9688))|])
    let (uniformBlockBinding :
      'tags this ->
        program:WebGLProgram.t ->
          uniformBlockIndex:GLuint.t -> uniformBlockBinding:GLuint.t -> unit)
      =
      fun (x9698 : 'tags this) ->
        fun ~program:(x9695 : WebGLProgram.t) ->
          fun ~uniformBlockIndex:(x9696 : GLuint.t) ->
            fun ~uniformBlockBinding:(x9697 : GLuint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x9698) "uniformBlockBinding"
                   [|(WebGLProgram.t_to_js x9695);(GLuint.t_to_js x9696);(
                     GLuint.t_to_js x9697)|])
    let (uniformMatrix2x3fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9709 : 'tags this) ->
        fun ~location:(x9700 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x9701 : GLboolean.t) ->
            fun ~data:(x9702 : Float32List.t) ->
              fun ?srcOffset:(x9703 : GLuint.t option) ->
                fun ?srcLength:(x9704 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9711 = this_to_js Obj.magic x9709 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9711 "uniformMatrix2x3fv")
                         "apply"
                         [|x9711;((let x9705 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9705 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9700)|]);
                                   ignore
                                     (Ojs.call x9705 "push"
                                        [|(GLboolean.t_to_js x9701)|]);
                                   ignore
                                     (Ojs.call x9705 "push"
                                        [|(Float32List.t_to_js x9702)|]);
                                   (match x9703 with
                                    | Some x9707 ->
                                        ignore
                                          (Ojs.call x9705 "push"
                                             [|(GLuint.t_to_js x9707)|])
                                    | None -> ());
                                   (match x9704 with
                                    | Some x9706 ->
                                        ignore
                                          (Ojs.call x9705 "push"
                                             [|(GLuint.t_to_js x9706)|])
                                    | None -> ());
                                   x9705))|])
    let (uniformMatrix2x4fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9721 : 'tags this) ->
        fun ~location:(x9712 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x9713 : GLboolean.t) ->
            fun ~data:(x9714 : Float32List.t) ->
              fun ?srcOffset:(x9715 : GLuint.t option) ->
                fun ?srcLength:(x9716 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9723 = this_to_js Obj.magic x9721 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9723 "uniformMatrix2x4fv")
                         "apply"
                         [|x9723;((let x9717 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9717 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9712)|]);
                                   ignore
                                     (Ojs.call x9717 "push"
                                        [|(GLboolean.t_to_js x9713)|]);
                                   ignore
                                     (Ojs.call x9717 "push"
                                        [|(Float32List.t_to_js x9714)|]);
                                   (match x9715 with
                                    | Some x9719 ->
                                        ignore
                                          (Ojs.call x9717 "push"
                                             [|(GLuint.t_to_js x9719)|])
                                    | None -> ());
                                   (match x9716 with
                                    | Some x9718 ->
                                        ignore
                                          (Ojs.call x9717 "push"
                                             [|(GLuint.t_to_js x9718)|])
                                    | None -> ());
                                   x9717))|])
    let (uniformMatrix3x2fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9733 : 'tags this) ->
        fun ~location:(x9724 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x9725 : GLboolean.t) ->
            fun ~data:(x9726 : Float32List.t) ->
              fun ?srcOffset:(x9727 : GLuint.t option) ->
                fun ?srcLength:(x9728 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9735 = this_to_js Obj.magic x9733 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9735 "uniformMatrix3x2fv")
                         "apply"
                         [|x9735;((let x9729 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9729 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9724)|]);
                                   ignore
                                     (Ojs.call x9729 "push"
                                        [|(GLboolean.t_to_js x9725)|]);
                                   ignore
                                     (Ojs.call x9729 "push"
                                        [|(Float32List.t_to_js x9726)|]);
                                   (match x9727 with
                                    | Some x9731 ->
                                        ignore
                                          (Ojs.call x9729 "push"
                                             [|(GLuint.t_to_js x9731)|])
                                    | None -> ());
                                   (match x9728 with
                                    | Some x9730 ->
                                        ignore
                                          (Ojs.call x9729 "push"
                                             [|(GLuint.t_to_js x9730)|])
                                    | None -> ());
                                   x9729))|])
    let (uniformMatrix3x4fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9745 : 'tags this) ->
        fun ~location:(x9736 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x9737 : GLboolean.t) ->
            fun ~data:(x9738 : Float32List.t) ->
              fun ?srcOffset:(x9739 : GLuint.t option) ->
                fun ?srcLength:(x9740 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9747 = this_to_js Obj.magic x9745 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9747 "uniformMatrix3x4fv")
                         "apply"
                         [|x9747;((let x9741 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9741 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9736)|]);
                                   ignore
                                     (Ojs.call x9741 "push"
                                        [|(GLboolean.t_to_js x9737)|]);
                                   ignore
                                     (Ojs.call x9741 "push"
                                        [|(Float32List.t_to_js x9738)|]);
                                   (match x9739 with
                                    | Some x9743 ->
                                        ignore
                                          (Ojs.call x9741 "push"
                                             [|(GLuint.t_to_js x9743)|])
                                    | None -> ());
                                   (match x9740 with
                                    | Some x9742 ->
                                        ignore
                                          (Ojs.call x9741 "push"
                                             [|(GLuint.t_to_js x9742)|])
                                    | None -> ());
                                   x9741))|])
    let (uniformMatrix4x2fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9757 : 'tags this) ->
        fun ~location:(x9748 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x9749 : GLboolean.t) ->
            fun ~data:(x9750 : Float32List.t) ->
              fun ?srcOffset:(x9751 : GLuint.t option) ->
                fun ?srcLength:(x9752 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9759 = this_to_js Obj.magic x9757 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9759 "uniformMatrix4x2fv")
                         "apply"
                         [|x9759;((let x9753 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9753 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9748)|]);
                                   ignore
                                     (Ojs.call x9753 "push"
                                        [|(GLboolean.t_to_js x9749)|]);
                                   ignore
                                     (Ojs.call x9753 "push"
                                        [|(Float32List.t_to_js x9750)|]);
                                   (match x9751 with
                                    | Some x9755 ->
                                        ignore
                                          (Ojs.call x9753 "push"
                                             [|(GLuint.t_to_js x9755)|])
                                    | None -> ());
                                   (match x9752 with
                                    | Some x9754 ->
                                        ignore
                                          (Ojs.call x9753 "push"
                                             [|(GLuint.t_to_js x9754)|])
                                    | None -> ());
                                   x9753))|])
    let (uniformMatrix4x3fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9769 : 'tags this) ->
        fun ~location:(x9760 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x9761 : GLboolean.t) ->
            fun ~data:(x9762 : Float32List.t) ->
              fun ?srcOffset:(x9763 : GLuint.t option) ->
                fun ?srcLength:(x9764 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9771 = this_to_js Obj.magic x9769 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9771 "uniformMatrix4x3fv")
                         "apply"
                         [|x9771;((let x9765 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9765 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9760)|]);
                                   ignore
                                     (Ojs.call x9765 "push"
                                        [|(GLboolean.t_to_js x9761)|]);
                                   ignore
                                     (Ojs.call x9765 "push"
                                        [|(Float32List.t_to_js x9762)|]);
                                   (match x9763 with
                                    | Some x9767 ->
                                        ignore
                                          (Ojs.call x9765 "push"
                                             [|(GLuint.t_to_js x9767)|])
                                    | None -> ());
                                   (match x9764 with
                                    | Some x9766 ->
                                        ignore
                                          (Ojs.call x9765 "push"
                                             [|(GLuint.t_to_js x9766)|])
                                    | None -> ());
                                   x9765))|])
    let (vertexAttribDivisor :
      'tags this -> index:GLuint.t -> divisor:GLuint.t -> unit) =
      fun (x9774 : 'tags this) ->
        fun ~index:(x9772 : GLuint.t) ->
          fun ~divisor:(x9773 : GLuint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9774) "vertexAttribDivisor"
                 [|(GLuint.t_to_js x9772);(GLuint.t_to_js x9773)|])
    let (vertexAttribI4i :
      'tags this ->
        index:GLuint.t ->
          x:GLint.t -> y:GLint.t -> z:GLint.t -> w:GLint.t -> unit)
      =
      fun (x9781 : 'tags this) ->
        fun ~index:(x9776 : GLuint.t) ->
          fun ~x:(x9777 : GLint.t) ->
            fun ~y:(x9778 : GLint.t) ->
              fun ~z:(x9779 : GLint.t) ->
                fun ~w:(x9780 : GLint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9781) "vertexAttribI4i"
                       [|(GLuint.t_to_js x9776);(GLint.t_to_js x9777);(
                         GLint.t_to_js x9778);(GLint.t_to_js x9779);(
                         GLint.t_to_js x9780)|])
    let (vertexAttribI4iv :
      'tags this -> index:GLuint.t -> values:Int32List.t -> unit) =
      fun (x9785 : 'tags this) ->
        fun ~index:(x9783 : GLuint.t) ->
          fun ~values:(x9784 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9785) "vertexAttribI4iv"
                 [|(GLuint.t_to_js x9783);(Int32List.t_to_js x9784)|])
    let (vertexAttribI4ui :
      'tags this ->
        index:GLuint.t ->
          x:GLuint.t -> y:GLuint.t -> z:GLuint.t -> w:GLuint.t -> unit)
      =
      fun (x9792 : 'tags this) ->
        fun ~index:(x9787 : GLuint.t) ->
          fun ~x:(x9788 : GLuint.t) ->
            fun ~y:(x9789 : GLuint.t) ->
              fun ~z:(x9790 : GLuint.t) ->
                fun ~w:(x9791 : GLuint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9792) "vertexAttribI4ui"
                       [|(GLuint.t_to_js x9787);(GLuint.t_to_js x9788);(
                         GLuint.t_to_js x9789);(GLuint.t_to_js x9790);(
                         GLuint.t_to_js x9791)|])
    let (vertexAttribI4uiv :
      'tags this -> index:GLuint.t -> values:Uint32List.t -> unit) =
      fun (x9796 : 'tags this) ->
        fun ~index:(x9794 : GLuint.t) ->
          fun ~values:(x9795 : Uint32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9796) "vertexAttribI4uiv"
                 [|(GLuint.t_to_js x9794);(Uint32List.t_to_js x9795)|])
    let (vertexAttribIPointer :
      'tags this ->
        index:GLuint.t ->
          size:GLint.t ->
            type_:GLenum.t -> stride:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x9803 : 'tags this) ->
        fun ~index:(x9798 : GLuint.t) ->
          fun ~size:(x9799 : GLint.t) ->
            fun ~type_:(x9800 : GLenum.t) ->
              fun ~stride:(x9801 : GLsizei.t) ->
                fun ~offset:(x9802 : GLintptr.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9803)
                       "vertexAttribIPointer"
                       [|(GLuint.t_to_js x9798);(GLint.t_to_js x9799);(
                         GLenum.t_to_js x9800);(GLsizei.t_to_js x9801);(
                         GLintptr.t_to_js x9802)|])
    let (waitSync :
      'tags this ->
        sync:WebGLSync.t -> flags:GLbitfield.t -> timeout:GLint64.t -> unit)
      =
      fun (x9808 : 'tags this) ->
        fun ~sync:(x9805 : WebGLSync.t) ->
          fun ~flags:(x9806 : GLbitfield.t) ->
            fun ~timeout:(x9807 : GLint64.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x9808) "waitSync"
                   [|(WebGLSync.t_to_js x9805);(GLbitfield.t_to_js x9806);(
                     GLint64.t_to_js x9807)|])
    let (get_ACTIVE_UNIFORM_BLOCKS : 'tags this -> GLenum.t) =
      fun (x9810 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9810)
             "ACTIVE_UNIFORM_BLOCKS")
    let (get_ALREADY_SIGNALED : 'tags this -> GLenum.t) =
      fun (x9812 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9812) "ALREADY_SIGNALED")
    let (get_ANY_SAMPLES_PASSED : 'tags this -> GLenum.t) =
      fun (x9814 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9814)
             "ANY_SAMPLES_PASSED")
    let (get_ANY_SAMPLES_PASSED_CONSERVATIVE : 'tags this -> GLenum.t) =
      fun (x9816 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9816)
             "ANY_SAMPLES_PASSED_CONSERVATIVE")
    let (get_COLOR : 'tags this -> GLenum.t) =
      fun (x9818 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9818) "COLOR")
    let (get_COLOR_ATTACHMENT1 : 'tags this -> GLenum.t) =
      fun (x9820 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9820)
             "COLOR_ATTACHMENT1")
    let (get_COLOR_ATTACHMENT10 : 'tags this -> GLenum.t) =
      fun (x9822 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9822)
             "COLOR_ATTACHMENT10")
    let (get_COLOR_ATTACHMENT11 : 'tags this -> GLenum.t) =
      fun (x9824 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9824)
             "COLOR_ATTACHMENT11")
    let (get_COLOR_ATTACHMENT12 : 'tags this -> GLenum.t) =
      fun (x9826 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9826)
             "COLOR_ATTACHMENT12")
    let (get_COLOR_ATTACHMENT13 : 'tags this -> GLenum.t) =
      fun (x9828 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9828)
             "COLOR_ATTACHMENT13")
    let (get_COLOR_ATTACHMENT14 : 'tags this -> GLenum.t) =
      fun (x9830 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9830)
             "COLOR_ATTACHMENT14")
    let (get_COLOR_ATTACHMENT15 : 'tags this -> GLenum.t) =
      fun (x9832 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9832)
             "COLOR_ATTACHMENT15")
    let (get_COLOR_ATTACHMENT2 : 'tags this -> GLenum.t) =
      fun (x9834 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9834)
             "COLOR_ATTACHMENT2")
    let (get_COLOR_ATTACHMENT3 : 'tags this -> GLenum.t) =
      fun (x9836 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9836)
             "COLOR_ATTACHMENT3")
    let (get_COLOR_ATTACHMENT4 : 'tags this -> GLenum.t) =
      fun (x9838 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9838)
             "COLOR_ATTACHMENT4")
    let (get_COLOR_ATTACHMENT5 : 'tags this -> GLenum.t) =
      fun (x9840 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9840)
             "COLOR_ATTACHMENT5")
    let (get_COLOR_ATTACHMENT6 : 'tags this -> GLenum.t) =
      fun (x9842 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9842)
             "COLOR_ATTACHMENT6")
    let (get_COLOR_ATTACHMENT7 : 'tags this -> GLenum.t) =
      fun (x9844 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9844)
             "COLOR_ATTACHMENT7")
    let (get_COLOR_ATTACHMENT8 : 'tags this -> GLenum.t) =
      fun (x9846 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9846)
             "COLOR_ATTACHMENT8")
    let (get_COLOR_ATTACHMENT9 : 'tags this -> GLenum.t) =
      fun (x9848 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9848)
             "COLOR_ATTACHMENT9")
    let (get_COMPARE_REF_TO_TEXTURE : 'tags this -> GLenum.t) =
      fun (x9850 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9850)
             "COMPARE_REF_TO_TEXTURE")
    let (get_CONDITION_SATISFIED : 'tags this -> GLenum.t) =
      fun (x9852 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9852)
             "CONDITION_SATISFIED")
    let (get_COPY_READ_BUFFER : 'tags this -> GLenum.t) =
      fun (x9854 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9854) "COPY_READ_BUFFER")
    let (get_COPY_READ_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x9856 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9856)
             "COPY_READ_BUFFER_BINDING")
    let (get_COPY_WRITE_BUFFER : 'tags this -> GLenum.t) =
      fun (x9858 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9858)
             "COPY_WRITE_BUFFER")
    let (get_COPY_WRITE_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x9860 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9860)
             "COPY_WRITE_BUFFER_BINDING")
    let (get_CURRENT_QUERY : 'tags this -> GLenum.t) =
      fun (x9862 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9862) "CURRENT_QUERY")
    let (get_DEPTH : 'tags this -> GLenum.t) =
      fun (x9864 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9864) "DEPTH")
    let (get_DEPTH24_STENCIL8 : 'tags this -> GLenum.t) =
      fun (x9866 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9866) "DEPTH24_STENCIL8")
    let (get_DEPTH32F_STENCIL8 : 'tags this -> GLenum.t) =
      fun (x9868 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9868)
             "DEPTH32F_STENCIL8")
    let (get_DEPTH_COMPONENT24 : 'tags this -> GLenum.t) =
      fun (x9870 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9870)
             "DEPTH_COMPONENT24")
    let (get_DEPTH_COMPONENT32F : 'tags this -> GLenum.t) =
      fun (x9872 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9872)
             "DEPTH_COMPONENT32F")
    let (get_DRAW_BUFFER0 : 'tags this -> GLenum.t) =
      fun (x9874 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9874) "DRAW_BUFFER0")
    let (get_DRAW_BUFFER1 : 'tags this -> GLenum.t) =
      fun (x9876 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9876) "DRAW_BUFFER1")
    let (get_DRAW_BUFFER10 : 'tags this -> GLenum.t) =
      fun (x9878 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9878) "DRAW_BUFFER10")
    let (get_DRAW_BUFFER11 : 'tags this -> GLenum.t) =
      fun (x9880 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9880) "DRAW_BUFFER11")
    let (get_DRAW_BUFFER12 : 'tags this -> GLenum.t) =
      fun (x9882 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9882) "DRAW_BUFFER12")
    let (get_DRAW_BUFFER13 : 'tags this -> GLenum.t) =
      fun (x9884 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9884) "DRAW_BUFFER13")
    let (get_DRAW_BUFFER14 : 'tags this -> GLenum.t) =
      fun (x9886 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9886) "DRAW_BUFFER14")
    let (get_DRAW_BUFFER15 : 'tags this -> GLenum.t) =
      fun (x9888 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9888) "DRAW_BUFFER15")
    let (get_DRAW_BUFFER2 : 'tags this -> GLenum.t) =
      fun (x9890 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9890) "DRAW_BUFFER2")
    let (get_DRAW_BUFFER3 : 'tags this -> GLenum.t) =
      fun (x9892 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9892) "DRAW_BUFFER3")
    let (get_DRAW_BUFFER4 : 'tags this -> GLenum.t) =
      fun (x9894 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9894) "DRAW_BUFFER4")
    let (get_DRAW_BUFFER5 : 'tags this -> GLenum.t) =
      fun (x9896 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9896) "DRAW_BUFFER5")
    let (get_DRAW_BUFFER6 : 'tags this -> GLenum.t) =
      fun (x9898 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9898) "DRAW_BUFFER6")
    let (get_DRAW_BUFFER7 : 'tags this -> GLenum.t) =
      fun (x9900 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9900) "DRAW_BUFFER7")
    let (get_DRAW_BUFFER8 : 'tags this -> GLenum.t) =
      fun (x9902 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9902) "DRAW_BUFFER8")
    let (get_DRAW_BUFFER9 : 'tags this -> GLenum.t) =
      fun (x9904 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9904) "DRAW_BUFFER9")
    let (get_DRAW_FRAMEBUFFER : 'tags this -> GLenum.t) =
      fun (x9906 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9906) "DRAW_FRAMEBUFFER")
    let (get_DRAW_FRAMEBUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x9908 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9908)
             "DRAW_FRAMEBUFFER_BINDING")
    let (get_DYNAMIC_COPY : 'tags this -> GLenum.t) =
      fun (x9910 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9910) "DYNAMIC_COPY")
    let (get_DYNAMIC_READ : 'tags this -> GLenum.t) =
      fun (x9912 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9912) "DYNAMIC_READ")
    let (get_FLOAT_32_UNSIGNED_INT_24_8_REV : 'tags this -> GLenum.t) =
      fun (x9914 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9914)
             "FLOAT_32_UNSIGNED_INT_24_8_REV")
    let (get_FLOAT_MAT2x3 : 'tags this -> GLenum.t) =
      fun (x9916 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9916) "FLOAT_MAT2x3")
    let (get_FLOAT_MAT2x4 : 'tags this -> GLenum.t) =
      fun (x9918 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9918) "FLOAT_MAT2x4")
    let (get_FLOAT_MAT3x2 : 'tags this -> GLenum.t) =
      fun (x9920 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9920) "FLOAT_MAT3x2")
    let (get_FLOAT_MAT3x4 : 'tags this -> GLenum.t) =
      fun (x9922 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9922) "FLOAT_MAT3x4")
    let (get_FLOAT_MAT4x2 : 'tags this -> GLenum.t) =
      fun (x9924 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9924) "FLOAT_MAT4x2")
    let (get_FLOAT_MAT4x3 : 'tags this -> GLenum.t) =
      fun (x9926 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9926) "FLOAT_MAT4x3")
    let (get_FRAGMENT_SHADER_DERIVATIVE_HINT : 'tags this -> GLenum.t) =
      fun (x9928 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9928)
             "FRAGMENT_SHADER_DERIVATIVE_HINT")
    let (get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE : 'tags this -> GLenum.t) =
      fun (x9930 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9930)
             "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE : 'tags this -> GLenum.t) =
      fun (x9932 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9932)
             "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING : 'tags this -> GLenum.t)
      =
      fun (x9934 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9934)
             "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING")
    let (get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE : 'tags this -> GLenum.t)
      =
      fun (x9936 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9936)
             "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE")
    let (get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE : 'tags this -> GLenum.t) =
      fun (x9938 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9938)
             "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE : 'tags this -> GLenum.t) =
      fun (x9940 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9940)
             "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_RED_SIZE : 'tags this -> GLenum.t) =
      fun (x9942 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9942)
             "FRAMEBUFFER_ATTACHMENT_RED_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE : 'tags this -> GLenum.t) =
      fun (x9944 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9944)
             "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER : 'tags this -> GLenum.t) =
      fun (x9946 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9946)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER")
    let (get_FRAMEBUFFER_DEFAULT : 'tags this -> GLenum.t) =
      fun (x9948 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9948)
             "FRAMEBUFFER_DEFAULT")
    let (get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE : 'tags this -> GLenum.t) =
      fun (x9950 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9950)
             "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE")
    let (get_HALF_FLOAT : 'tags this -> GLenum.t) =
      fun (x9952 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9952) "HALF_FLOAT")
    let (get_INTERLEAVED_ATTRIBS : 'tags this -> GLenum.t) =
      fun (x9954 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9954)
             "INTERLEAVED_ATTRIBS")
    let (get_INT_2_10_10_10_REV : 'tags this -> GLenum.t) =
      fun (x9956 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9956)
             "INT_2_10_10_10_REV")
    let (get_INT_SAMPLER_2D : 'tags this -> GLenum.t) =
      fun (x9958 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9958) "INT_SAMPLER_2D")
    let (get_INT_SAMPLER_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x9960 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9960)
             "INT_SAMPLER_2D_ARRAY")
    let (get_INT_SAMPLER_3D : 'tags this -> GLenum.t) =
      fun (x9962 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9962) "INT_SAMPLER_3D")
    let (get_INT_SAMPLER_CUBE : 'tags this -> GLenum.t) =
      fun (x9964 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9964) "INT_SAMPLER_CUBE")
    let (get_INVALID_INDEX : 'tags this -> GLenum.t) =
      fun (x9966 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9966) "INVALID_INDEX")
    let (get_MAX : 'tags this -> GLenum.t) =
      fun (x9968 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9968) "MAX")
    let (get_MAX_3D_TEXTURE_SIZE : 'tags this -> GLenum.t) =
      fun (x9970 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9970)
             "MAX_3D_TEXTURE_SIZE")
    let (get_MAX_ARRAY_TEXTURE_LAYERS : 'tags this -> GLenum.t) =
      fun (x9972 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9972)
             "MAX_ARRAY_TEXTURE_LAYERS")
    let (get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL : 'tags this -> GLenum.t) =
      fun (x9974 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9974)
             "MAX_CLIENT_WAIT_TIMEOUT_WEBGL")
    let (get_MAX_COLOR_ATTACHMENTS : 'tags this -> GLenum.t) =
      fun (x9976 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9976)
             "MAX_COLOR_ATTACHMENTS")
    let (get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS :
      'tags this -> GLenum.t) =
      fun (x9978 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9978)
             "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS")
    let (get_MAX_COMBINED_UNIFORM_BLOCKS : 'tags this -> GLenum.t) =
      fun (x9980 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9980)
             "MAX_COMBINED_UNIFORM_BLOCKS")
    let (get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS : 'tags this -> GLenum.t)
      =
      fun (x9982 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9982)
             "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS")
    let (get_MAX_DRAW_BUFFERS : 'tags this -> GLenum.t) =
      fun (x9984 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9984) "MAX_DRAW_BUFFERS")
    let (get_MAX_ELEMENTS_INDICES : 'tags this -> GLenum.t) =
      fun (x9986 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9986)
             "MAX_ELEMENTS_INDICES")
    let (get_MAX_ELEMENTS_VERTICES : 'tags this -> GLenum.t) =
      fun (x9988 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9988)
             "MAX_ELEMENTS_VERTICES")
    let (get_MAX_ELEMENT_INDEX : 'tags this -> GLenum.t) =
      fun (x9990 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9990)
             "MAX_ELEMENT_INDEX")
    let (get_MAX_FRAGMENT_INPUT_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x9992 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9992)
             "MAX_FRAGMENT_INPUT_COMPONENTS")
    let (get_MAX_FRAGMENT_UNIFORM_BLOCKS : 'tags this -> GLenum.t) =
      fun (x9994 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9994)
             "MAX_FRAGMENT_UNIFORM_BLOCKS")
    let (get_MAX_FRAGMENT_UNIFORM_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x9996 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9996)
             "MAX_FRAGMENT_UNIFORM_COMPONENTS")
    let (get_MAX_PROGRAM_TEXEL_OFFSET : 'tags this -> GLenum.t) =
      fun (x9998 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9998)
             "MAX_PROGRAM_TEXEL_OFFSET")
    let (get_MAX_SAMPLES : 'tags this -> GLenum.t) =
      fun (x10000 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10000) "MAX_SAMPLES")
    let (get_MAX_SERVER_WAIT_TIMEOUT : 'tags this -> GLenum.t) =
      fun (x10002 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10002)
             "MAX_SERVER_WAIT_TIMEOUT")
    let (get_MAX_TEXTURE_LOD_BIAS : 'tags this -> GLenum.t) =
      fun (x10004 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10004)
             "MAX_TEXTURE_LOD_BIAS")
    let (get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS :
      'tags this -> GLenum.t) =
      fun (x10006 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10006)
             "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS")
    let (get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS :
      'tags this -> GLenum.t) =
      fun (x10008 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10008)
             "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS")
    let (get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS :
      'tags this -> GLenum.t) =
      fun (x10010 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10010)
             "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS")
    let (get_MAX_UNIFORM_BLOCK_SIZE : 'tags this -> GLenum.t) =
      fun (x10012 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10012)
             "MAX_UNIFORM_BLOCK_SIZE")
    let (get_MAX_UNIFORM_BUFFER_BINDINGS : 'tags this -> GLenum.t) =
      fun (x10014 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10014)
             "MAX_UNIFORM_BUFFER_BINDINGS")
    let (get_MAX_VARYING_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x10016 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10016)
             "MAX_VARYING_COMPONENTS")
    let (get_MAX_VERTEX_OUTPUT_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x10018 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10018)
             "MAX_VERTEX_OUTPUT_COMPONENTS")
    let (get_MAX_VERTEX_UNIFORM_BLOCKS : 'tags this -> GLenum.t) =
      fun (x10020 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10020)
             "MAX_VERTEX_UNIFORM_BLOCKS")
    let (get_MAX_VERTEX_UNIFORM_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x10022 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10022)
             "MAX_VERTEX_UNIFORM_COMPONENTS")
    let (get_MIN : 'tags this -> GLenum.t) =
      fun (x10024 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10024) "MIN")
    let (get_MIN_PROGRAM_TEXEL_OFFSET : 'tags this -> GLenum.t) =
      fun (x10026 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10026)
             "MIN_PROGRAM_TEXEL_OFFSET")
    let (get_OBJECT_TYPE : 'tags this -> GLenum.t) =
      fun (x10028 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10028) "OBJECT_TYPE")
    let (get_PACK_ROW_LENGTH : 'tags this -> GLenum.t) =
      fun (x10030 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10030) "PACK_ROW_LENGTH")
    let (get_PACK_SKIP_PIXELS : 'tags this -> GLenum.t) =
      fun (x10032 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10032)
             "PACK_SKIP_PIXELS")
    let (get_PACK_SKIP_ROWS : 'tags this -> GLenum.t) =
      fun (x10034 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10034) "PACK_SKIP_ROWS")
    let (get_PIXEL_PACK_BUFFER : 'tags this -> GLenum.t) =
      fun (x10036 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10036)
             "PIXEL_PACK_BUFFER")
    let (get_PIXEL_PACK_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x10038 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10038)
             "PIXEL_PACK_BUFFER_BINDING")
    let (get_PIXEL_UNPACK_BUFFER : 'tags this -> GLenum.t) =
      fun (x10040 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10040)
             "PIXEL_UNPACK_BUFFER")
    let (get_PIXEL_UNPACK_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x10042 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10042)
             "PIXEL_UNPACK_BUFFER_BINDING")
    let (get_QUERY_RESULT : 'tags this -> GLenum.t) =
      fun (x10044 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10044) "QUERY_RESULT")
    let (get_QUERY_RESULT_AVAILABLE : 'tags this -> GLenum.t) =
      fun (x10046 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10046)
             "QUERY_RESULT_AVAILABLE")
    let (get_R11F_G11F_B10F : 'tags this -> GLenum.t) =
      fun (x10048 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10048) "R11F_G11F_B10F")
    let (get_R16F : 'tags this -> GLenum.t) =
      fun (x10050 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10050) "R16F")
    let (get_R16I : 'tags this -> GLenum.t) =
      fun (x10052 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10052) "R16I")
    let (get_R16UI : 'tags this -> GLenum.t) =
      fun (x10054 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10054) "R16UI")
    let (get_R32F : 'tags this -> GLenum.t) =
      fun (x10056 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10056) "R32F")
    let (get_R32I : 'tags this -> GLenum.t) =
      fun (x10058 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10058) "R32I")
    let (get_R32UI : 'tags this -> GLenum.t) =
      fun (x10060 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10060) "R32UI")
    let (get_R8 : 'tags this -> GLenum.t) =
      fun (x10062 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10062) "R8")
    let (get_R8I : 'tags this -> GLenum.t) =
      fun (x10064 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10064) "R8I")
    let (get_R8UI : 'tags this -> GLenum.t) =
      fun (x10066 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10066) "R8UI")
    let (get_R8_SNORM : 'tags this -> GLenum.t) =
      fun (x10068 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10068) "R8_SNORM")
    let (get_RASTERIZER_DISCARD : 'tags this -> GLenum.t) =
      fun (x10070 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10070)
             "RASTERIZER_DISCARD")
    let (get_READ_BUFFER : 'tags this -> GLenum.t) =
      fun (x10072 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10072) "READ_BUFFER")
    let (get_READ_FRAMEBUFFER : 'tags this -> GLenum.t) =
      fun (x10074 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10074)
             "READ_FRAMEBUFFER")
    let (get_READ_FRAMEBUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x10076 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10076)
             "READ_FRAMEBUFFER_BINDING")
    let (get_RED : 'tags this -> GLenum.t) =
      fun (x10078 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10078) "RED")
    let (get_RED_INTEGER : 'tags this -> GLenum.t) =
      fun (x10080 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10080) "RED_INTEGER")
    let (get_RENDERBUFFER_SAMPLES : 'tags this -> GLenum.t) =
      fun (x10082 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10082)
             "RENDERBUFFER_SAMPLES")
    let (get_RG : 'tags this -> GLenum.t) =
      fun (x10084 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10084) "RG")
    let (get_RG16F : 'tags this -> GLenum.t) =
      fun (x10086 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10086) "RG16F")
    let (get_RG16I : 'tags this -> GLenum.t) =
      fun (x10088 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10088) "RG16I")
    let (get_RG16UI : 'tags this -> GLenum.t) =
      fun (x10090 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10090) "RG16UI")
    let (get_RG32F : 'tags this -> GLenum.t) =
      fun (x10092 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10092) "RG32F")
    let (get_RG32I : 'tags this -> GLenum.t) =
      fun (x10094 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10094) "RG32I")
    let (get_RG32UI : 'tags this -> GLenum.t) =
      fun (x10096 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10096) "RG32UI")
    let (get_RG8 : 'tags this -> GLenum.t) =
      fun (x10098 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10098) "RG8")
    let (get_RG8I : 'tags this -> GLenum.t) =
      fun (x10100 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10100) "RG8I")
    let (get_RG8UI : 'tags this -> GLenum.t) =
      fun (x10102 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10102) "RG8UI")
    let (get_RG8_SNORM : 'tags this -> GLenum.t) =
      fun (x10104 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10104) "RG8_SNORM")
    let (get_RGB10_A2 : 'tags this -> GLenum.t) =
      fun (x10106 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10106) "RGB10_A2")
    let (get_RGB10_A2UI : 'tags this -> GLenum.t) =
      fun (x10108 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10108) "RGB10_A2UI")
    let (get_RGB16F : 'tags this -> GLenum.t) =
      fun (x10110 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10110) "RGB16F")
    let (get_RGB16I : 'tags this -> GLenum.t) =
      fun (x10112 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10112) "RGB16I")
    let (get_RGB16UI : 'tags this -> GLenum.t) =
      fun (x10114 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10114) "RGB16UI")
    let (get_RGB32F : 'tags this -> GLenum.t) =
      fun (x10116 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10116) "RGB32F")
    let (get_RGB32I : 'tags this -> GLenum.t) =
      fun (x10118 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10118) "RGB32I")
    let (get_RGB32UI : 'tags this -> GLenum.t) =
      fun (x10120 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10120) "RGB32UI")
    let (get_RGB8 : 'tags this -> GLenum.t) =
      fun (x10122 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10122) "RGB8")
    let (get_RGB8I : 'tags this -> GLenum.t) =
      fun (x10124 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10124) "RGB8I")
    let (get_RGB8UI : 'tags this -> GLenum.t) =
      fun (x10126 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10126) "RGB8UI")
    let (get_RGB8_SNORM : 'tags this -> GLenum.t) =
      fun (x10128 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10128) "RGB8_SNORM")
    let (get_RGB9_E5 : 'tags this -> GLenum.t) =
      fun (x10130 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10130) "RGB9_E5")
    let (get_RGBA16F : 'tags this -> GLenum.t) =
      fun (x10132 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10132) "RGBA16F")
    let (get_RGBA16I : 'tags this -> GLenum.t) =
      fun (x10134 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10134) "RGBA16I")
    let (get_RGBA16UI : 'tags this -> GLenum.t) =
      fun (x10136 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10136) "RGBA16UI")
    let (get_RGBA32F : 'tags this -> GLenum.t) =
      fun (x10138 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10138) "RGBA32F")
    let (get_RGBA32I : 'tags this -> GLenum.t) =
      fun (x10140 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10140) "RGBA32I")
    let (get_RGBA32UI : 'tags this -> GLenum.t) =
      fun (x10142 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10142) "RGBA32UI")
    let (get_RGBA8 : 'tags this -> GLenum.t) =
      fun (x10144 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10144) "RGBA8")
    let (get_RGBA8I : 'tags this -> GLenum.t) =
      fun (x10146 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10146) "RGBA8I")
    let (get_RGBA8UI : 'tags this -> GLenum.t) =
      fun (x10148 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10148) "RGBA8UI")
    let (get_RGBA8_SNORM : 'tags this -> GLenum.t) =
      fun (x10150 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10150) "RGBA8_SNORM")
    let (get_RGBA_INTEGER : 'tags this -> GLenum.t) =
      fun (x10152 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10152) "RGBA_INTEGER")
    let (get_RGB_INTEGER : 'tags this -> GLenum.t) =
      fun (x10154 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10154) "RGB_INTEGER")
    let (get_RG_INTEGER : 'tags this -> GLenum.t) =
      fun (x10156 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10156) "RG_INTEGER")
    let (get_SAMPLER_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x10158 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10158)
             "SAMPLER_2D_ARRAY")
    let (get_SAMPLER_2D_ARRAY_SHADOW : 'tags this -> GLenum.t) =
      fun (x10160 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10160)
             "SAMPLER_2D_ARRAY_SHADOW")
    let (get_SAMPLER_2D_SHADOW : 'tags this -> GLenum.t) =
      fun (x10162 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10162)
             "SAMPLER_2D_SHADOW")
    let (get_SAMPLER_3D : 'tags this -> GLenum.t) =
      fun (x10164 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10164) "SAMPLER_3D")
    let (get_SAMPLER_BINDING : 'tags this -> GLenum.t) =
      fun (x10166 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10166) "SAMPLER_BINDING")
    let (get_SAMPLER_CUBE_SHADOW : 'tags this -> GLenum.t) =
      fun (x10168 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10168)
             "SAMPLER_CUBE_SHADOW")
    let (get_SEPARATE_ATTRIBS : 'tags this -> GLenum.t) =
      fun (x10170 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10170)
             "SEPARATE_ATTRIBS")
    let (get_SIGNALED : 'tags this -> GLenum.t) =
      fun (x10172 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10172) "SIGNALED")
    let (get_SIGNED_NORMALIZED : 'tags this -> GLenum.t) =
      fun (x10174 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10174)
             "SIGNED_NORMALIZED")
    let (get_SRGB : 'tags this -> GLenum.t) =
      fun (x10176 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10176) "SRGB")
    let (get_SRGB8 : 'tags this -> GLenum.t) =
      fun (x10178 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10178) "SRGB8")
    let (get_SRGB8_ALPHA8 : 'tags this -> GLenum.t) =
      fun (x10180 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10180) "SRGB8_ALPHA8")
    let (get_STATIC_COPY : 'tags this -> GLenum.t) =
      fun (x10182 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10182) "STATIC_COPY")
    let (get_STATIC_READ : 'tags this -> GLenum.t) =
      fun (x10184 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10184) "STATIC_READ")
    let (get_STENCIL : 'tags this -> GLenum.t) =
      fun (x10186 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10186) "STENCIL")
    let (get_STREAM_COPY : 'tags this -> GLenum.t) =
      fun (x10188 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10188) "STREAM_COPY")
    let (get_STREAM_READ : 'tags this -> GLenum.t) =
      fun (x10190 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10190) "STREAM_READ")
    let (get_SYNC_CONDITION : 'tags this -> GLenum.t) =
      fun (x10192 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10192) "SYNC_CONDITION")
    let (get_SYNC_FENCE : 'tags this -> GLenum.t) =
      fun (x10194 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10194) "SYNC_FENCE")
    let (get_SYNC_FLAGS : 'tags this -> GLenum.t) =
      fun (x10196 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10196) "SYNC_FLAGS")
    let (get_SYNC_FLUSH_COMMANDS_BIT : 'tags this -> GLenum.t) =
      fun (x10198 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10198)
             "SYNC_FLUSH_COMMANDS_BIT")
    let (get_SYNC_GPU_COMMANDS_COMPLETE : 'tags this -> GLenum.t) =
      fun (x10200 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10200)
             "SYNC_GPU_COMMANDS_COMPLETE")
    let (get_SYNC_STATUS : 'tags this -> GLenum.t) =
      fun (x10202 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10202) "SYNC_STATUS")
    let (get_TEXTURE_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x10204 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10204)
             "TEXTURE_2D_ARRAY")
    let (get_TEXTURE_3D : 'tags this -> GLenum.t) =
      fun (x10206 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10206) "TEXTURE_3D")
    let (get_TEXTURE_BASE_LEVEL : 'tags this -> GLenum.t) =
      fun (x10208 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10208)
             "TEXTURE_BASE_LEVEL")
    let (get_TEXTURE_BINDING_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x10210 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10210)
             "TEXTURE_BINDING_2D_ARRAY")
    let (get_TEXTURE_BINDING_3D : 'tags this -> GLenum.t) =
      fun (x10212 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10212)
             "TEXTURE_BINDING_3D")
    let (get_TEXTURE_COMPARE_FUNC : 'tags this -> GLenum.t) =
      fun (x10214 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10214)
             "TEXTURE_COMPARE_FUNC")
    let (get_TEXTURE_COMPARE_MODE : 'tags this -> GLenum.t) =
      fun (x10216 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10216)
             "TEXTURE_COMPARE_MODE")
    let (get_TEXTURE_IMMUTABLE_FORMAT : 'tags this -> GLenum.t) =
      fun (x10218 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10218)
             "TEXTURE_IMMUTABLE_FORMAT")
    let (get_TEXTURE_IMMUTABLE_LEVELS : 'tags this -> GLenum.t) =
      fun (x10220 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10220)
             "TEXTURE_IMMUTABLE_LEVELS")
    let (get_TEXTURE_MAX_LEVEL : 'tags this -> GLenum.t) =
      fun (x10222 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10222)
             "TEXTURE_MAX_LEVEL")
    let (get_TEXTURE_MAX_LOD : 'tags this -> GLenum.t) =
      fun (x10224 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10224) "TEXTURE_MAX_LOD")
    let (get_TEXTURE_MIN_LOD : 'tags this -> GLenum.t) =
      fun (x10226 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10226) "TEXTURE_MIN_LOD")
    let (get_TEXTURE_WRAP_R : 'tags this -> GLenum.t) =
      fun (x10228 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10228) "TEXTURE_WRAP_R")
    let (get_TIMEOUT_EXPIRED : 'tags this -> GLenum.t) =
      fun (x10230 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10230) "TIMEOUT_EXPIRED")
    let (get_TIMEOUT_IGNORED : 'tags this -> GLint64.t) =
      fun (x10232 : 'tags this) ->
        GLint64.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10232) "TIMEOUT_IGNORED")
    let (get_TRANSFORM_FEEDBACK : 'tags this -> GLenum.t) =
      fun (x10234 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10234)
             "TRANSFORM_FEEDBACK")
    let (get_TRANSFORM_FEEDBACK_ACTIVE : 'tags this -> GLenum.t) =
      fun (x10236 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10236)
             "TRANSFORM_FEEDBACK_ACTIVE")
    let (get_TRANSFORM_FEEDBACK_BINDING : 'tags this -> GLenum.t) =
      fun (x10238 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10238)
             "TRANSFORM_FEEDBACK_BINDING")
    let (get_TRANSFORM_FEEDBACK_BUFFER : 'tags this -> GLenum.t) =
      fun (x10240 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10240)
             "TRANSFORM_FEEDBACK_BUFFER")
    let (get_TRANSFORM_FEEDBACK_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x10242 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10242)
             "TRANSFORM_FEEDBACK_BUFFER_BINDING")
    let (get_TRANSFORM_FEEDBACK_BUFFER_MODE : 'tags this -> GLenum.t) =
      fun (x10244 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10244)
             "TRANSFORM_FEEDBACK_BUFFER_MODE")
    let (get_TRANSFORM_FEEDBACK_BUFFER_SIZE : 'tags this -> GLenum.t) =
      fun (x10246 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10246)
             "TRANSFORM_FEEDBACK_BUFFER_SIZE")
    let (get_TRANSFORM_FEEDBACK_BUFFER_START : 'tags this -> GLenum.t) =
      fun (x10248 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10248)
             "TRANSFORM_FEEDBACK_BUFFER_START")
    let (get_TRANSFORM_FEEDBACK_PAUSED : 'tags this -> GLenum.t) =
      fun (x10250 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10250)
             "TRANSFORM_FEEDBACK_PAUSED")
    let (get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN : 'tags this -> GLenum.t)
      =
      fun (x10252 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10252)
             "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN")
    let (get_TRANSFORM_FEEDBACK_VARYINGS : 'tags this -> GLenum.t) =
      fun (x10254 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10254)
             "TRANSFORM_FEEDBACK_VARYINGS")
    let (get_UNIFORM_ARRAY_STRIDE : 'tags this -> GLenum.t) =
      fun (x10256 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10256)
             "UNIFORM_ARRAY_STRIDE")
    let (get_UNIFORM_BLOCK_ACTIVE_UNIFORMS : 'tags this -> GLenum.t) =
      fun (x10258 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10258)
             "UNIFORM_BLOCK_ACTIVE_UNIFORMS")
    let (get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES : 'tags this -> GLenum.t) =
      fun (x10260 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10260)
             "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES")
    let (get_UNIFORM_BLOCK_BINDING : 'tags this -> GLenum.t) =
      fun (x10262 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10262)
             "UNIFORM_BLOCK_BINDING")
    let (get_UNIFORM_BLOCK_DATA_SIZE : 'tags this -> GLenum.t) =
      fun (x10264 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10264)
             "UNIFORM_BLOCK_DATA_SIZE")
    let (get_UNIFORM_BLOCK_INDEX : 'tags this -> GLenum.t) =
      fun (x10266 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10266)
             "UNIFORM_BLOCK_INDEX")
    let (get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER :
      'tags this -> GLenum.t) =
      fun (x10268 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10268)
             "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER")
    let (get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER :
      'tags this -> GLenum.t) =
      fun (x10270 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10270)
             "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER")
    let (get_UNIFORM_BUFFER : 'tags this -> GLenum.t) =
      fun (x10272 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10272) "UNIFORM_BUFFER")
    let (get_UNIFORM_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x10274 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10274)
             "UNIFORM_BUFFER_BINDING")
    let (get_UNIFORM_BUFFER_OFFSET_ALIGNMENT : 'tags this -> GLenum.t) =
      fun (x10276 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10276)
             "UNIFORM_BUFFER_OFFSET_ALIGNMENT")
    let (get_UNIFORM_BUFFER_SIZE : 'tags this -> GLenum.t) =
      fun (x10278 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10278)
             "UNIFORM_BUFFER_SIZE")
    let (get_UNIFORM_BUFFER_START : 'tags this -> GLenum.t) =
      fun (x10280 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10280)
             "UNIFORM_BUFFER_START")
    let (get_UNIFORM_IS_ROW_MAJOR : 'tags this -> GLenum.t) =
      fun (x10282 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10282)
             "UNIFORM_IS_ROW_MAJOR")
    let (get_UNIFORM_MATRIX_STRIDE : 'tags this -> GLenum.t) =
      fun (x10284 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10284)
             "UNIFORM_MATRIX_STRIDE")
    let (get_UNIFORM_OFFSET : 'tags this -> GLenum.t) =
      fun (x10286 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10286) "UNIFORM_OFFSET")
    let (get_UNIFORM_SIZE : 'tags this -> GLenum.t) =
      fun (x10288 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10288) "UNIFORM_SIZE")
    let (get_UNIFORM_TYPE : 'tags this -> GLenum.t) =
      fun (x10290 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10290) "UNIFORM_TYPE")
    let (get_UNPACK_IMAGE_HEIGHT : 'tags this -> GLenum.t) =
      fun (x10292 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10292)
             "UNPACK_IMAGE_HEIGHT")
    let (get_UNPACK_ROW_LENGTH : 'tags this -> GLenum.t) =
      fun (x10294 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10294)
             "UNPACK_ROW_LENGTH")
    let (get_UNPACK_SKIP_IMAGES : 'tags this -> GLenum.t) =
      fun (x10296 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10296)
             "UNPACK_SKIP_IMAGES")
    let (get_UNPACK_SKIP_PIXELS : 'tags this -> GLenum.t) =
      fun (x10298 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10298)
             "UNPACK_SKIP_PIXELS")
    let (get_UNPACK_SKIP_ROWS : 'tags this -> GLenum.t) =
      fun (x10300 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10300)
             "UNPACK_SKIP_ROWS")
    let (get_UNSIGNALED : 'tags this -> GLenum.t) =
      fun (x10302 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10302) "UNSIGNALED")
    let (get_UNSIGNED_INT_10F_11F_11F_REV : 'tags this -> GLenum.t) =
      fun (x10304 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10304)
             "UNSIGNED_INT_10F_11F_11F_REV")
    let (get_UNSIGNED_INT_24_8 : 'tags this -> GLenum.t) =
      fun (x10306 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10306)
             "UNSIGNED_INT_24_8")
    let (get_UNSIGNED_INT_2_10_10_10_REV : 'tags this -> GLenum.t) =
      fun (x10308 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10308)
             "UNSIGNED_INT_2_10_10_10_REV")
    let (get_UNSIGNED_INT_5_9_9_9_REV : 'tags this -> GLenum.t) =
      fun (x10310 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10310)
             "UNSIGNED_INT_5_9_9_9_REV")
    let (get_UNSIGNED_INT_SAMPLER_2D : 'tags this -> GLenum.t) =
      fun (x10312 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10312)
             "UNSIGNED_INT_SAMPLER_2D")
    let (get_UNSIGNED_INT_SAMPLER_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x10314 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10314)
             "UNSIGNED_INT_SAMPLER_2D_ARRAY")
    let (get_UNSIGNED_INT_SAMPLER_3D : 'tags this -> GLenum.t) =
      fun (x10316 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10316)
             "UNSIGNED_INT_SAMPLER_3D")
    let (get_UNSIGNED_INT_SAMPLER_CUBE : 'tags this -> GLenum.t) =
      fun (x10318 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10318)
             "UNSIGNED_INT_SAMPLER_CUBE")
    let (get_UNSIGNED_INT_VEC2 : 'tags this -> GLenum.t) =
      fun (x10320 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10320)
             "UNSIGNED_INT_VEC2")
    let (get_UNSIGNED_INT_VEC3 : 'tags this -> GLenum.t) =
      fun (x10322 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10322)
             "UNSIGNED_INT_VEC3")
    let (get_UNSIGNED_INT_VEC4 : 'tags this -> GLenum.t) =
      fun (x10324 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10324)
             "UNSIGNED_INT_VEC4")
    let (get_UNSIGNED_NORMALIZED : 'tags this -> GLenum.t) =
      fun (x10326 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10326)
             "UNSIGNED_NORMALIZED")
    let (get_VERTEX_ARRAY_BINDING : 'tags this -> GLenum.t) =
      fun (x10328 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10328)
             "VERTEX_ARRAY_BINDING")
    let (get_VERTEX_ATTRIB_ARRAY_DIVISOR : 'tags this -> GLenum.t) =
      fun (x10330 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10330)
             "VERTEX_ATTRIB_ARRAY_DIVISOR")
    let (get_VERTEX_ATTRIB_ARRAY_INTEGER : 'tags this -> GLenum.t) =
      fun (x10332 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10332)
             "VERTEX_ATTRIB_ARRAY_INTEGER")
    let (get_WAIT_FAILED : 'tags this -> GLenum.t) =
      fun (x10334 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10334) "WAIT_FAILED")
    let (clearBufferfv' :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x10343 : 'tags this) ->
        fun ~buffer:(x10336 : GLenum.t) ->
          fun ~drawbuffer:(x10337 : GLint.t) ->
            fun ~values:(x10338 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x10339 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x10345 = this_to_js Obj.magic x10343 in
                     Ojs.call (Ojs.get_prop_ascii x10345 "clearBufferfv")
                       "apply"
                       [|x10345;((let x10340 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x10340 "push"
                                       [|(GLenum.t_to_js x10336)|]);
                                  ignore
                                    (Ojs.call x10340 "push"
                                       [|(GLint.t_to_js x10337)|]);
                                  ignore
                                    (Ojs.call x10340 "push"
                                       [|(Iterable.t_1_to_js GLfloat.t_to_js
                                            x10338)|]);
                                  (match x10339 with
                                   | Some x10341 ->
                                       ignore
                                         (Ojs.call x10340 "push"
                                            [|(GLuint.t_to_js x10341)|])
                                   | None -> ());
                                  x10340))|])
    let (clearBufferiv' :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:GLint.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x10353 : 'tags this) ->
        fun ~buffer:(x10346 : GLenum.t) ->
          fun ~drawbuffer:(x10347 : GLint.t) ->
            fun ~values:(x10348 : GLint.t Iterable.t_1) ->
              fun ?srcOffset:(x10349 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x10355 = this_to_js Obj.magic x10353 in
                     Ojs.call (Ojs.get_prop_ascii x10355 "clearBufferiv")
                       "apply"
                       [|x10355;((let x10350 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x10350 "push"
                                       [|(GLenum.t_to_js x10346)|]);
                                  ignore
                                    (Ojs.call x10350 "push"
                                       [|(GLint.t_to_js x10347)|]);
                                  ignore
                                    (Ojs.call x10350 "push"
                                       [|(Iterable.t_1_to_js GLint.t_to_js
                                            x10348)|]);
                                  (match x10349 with
                                   | Some x10351 ->
                                       ignore
                                         (Ojs.call x10350 "push"
                                            [|(GLuint.t_to_js x10351)|])
                                   | None -> ());
                                  x10350))|])
    let (clearBufferuiv' :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:GLuint.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x10363 : 'tags this) ->
        fun ~buffer:(x10356 : GLenum.t) ->
          fun ~drawbuffer:(x10357 : GLint.t) ->
            fun ~values:(x10358 : GLuint.t Iterable.t_1) ->
              fun ?srcOffset:(x10359 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x10365 = this_to_js Obj.magic x10363 in
                     Ojs.call (Ojs.get_prop_ascii x10365 "clearBufferuiv")
                       "apply"
                       [|x10365;((let x10360 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x10360 "push"
                                       [|(GLenum.t_to_js x10356)|]);
                                  ignore
                                    (Ojs.call x10360 "push"
                                       [|(GLint.t_to_js x10357)|]);
                                  ignore
                                    (Ojs.call x10360 "push"
                                       [|(Iterable.t_1_to_js GLuint.t_to_js
                                            x10358)|]);
                                  (match x10359 with
                                   | Some x10361 ->
                                       ignore
                                         (Ojs.call x10360 "push"
                                            [|(GLuint.t_to_js x10361)|])
                                   | None -> ());
                                  x10360))|])
    let (drawBuffers' : 'tags this -> buffers:GLenum.t Iterable.t_1 -> unit)
      =
      fun (x10368 : 'tags this) ->
        fun ~buffers:(x10366 : GLenum.t Iterable.t_1) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x10368) "drawBuffers"
               [|(Iterable.t_1_to_js GLenum.t_to_js x10366)|])
    let (getActiveUniforms' :
      'tags this ->
        program:WebGLProgram.t ->
          uniformIndices:GLuint.t Iterable.t_1 -> pname:GLenum.t -> any)
      =
      fun (x10374 : 'tags this) ->
        fun ~program:(x10370 : WebGLProgram.t) ->
          fun ~uniformIndices:(x10371 : GLuint.t Iterable.t_1) ->
            fun ~pname:(x10373 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x10374) "getActiveUniforms"
                   [|(WebGLProgram.t_to_js x10370);(Iterable.t_1_to_js
                                                      GLuint.t_to_js x10371);(
                     GLenum.t_to_js x10373)|])
    let (getUniformIndices' :
      'tags this ->
        program:WebGLProgram.t ->
          uniformNames:string Iterable.t_1 -> GLuint.t Iterable.t_1 option)
      =
      fun (x10379 : 'tags this) ->
        fun ~program:(x10376 : WebGLProgram.t) ->
          fun ~uniformNames:(x10377 : string Iterable.t_1) ->
            Ojs.option_of_js
              (fun (x10381 : Ojs.t) ->
                 Iterable.t_1_of_js GLuint.t_of_js x10381)
              (Ojs.call (this_to_js Obj.magic x10379) "getUniformIndices"
                 [|(WebGLProgram.t_to_js x10376);(Iterable.t_1_to_js
                                                    Ojs.string_to_js x10377)|])
    let (invalidateFramebuffer' :
      'tags this ->
        target:GLenum.t -> attachments:GLenum.t Iterable.t_1 -> unit)
      =
      fun (x10386 : 'tags this) ->
        fun ~target:(x10383 : GLenum.t) ->
          fun ~attachments:(x10384 : GLenum.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10386) "invalidateFramebuffer"
                 [|(GLenum.t_to_js x10383);(Iterable.t_1_to_js GLenum.t_to_js
                                              x10384)|])
    let (invalidateSubFramebuffer' :
      'tags this ->
        target:GLenum.t ->
          attachments:GLenum.t Iterable.t_1 ->
            x:GLint.t ->
              y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x10395 : 'tags this) ->
        fun ~target:(x10388 : GLenum.t) ->
          fun ~attachments:(x10389 : GLenum.t Iterable.t_1) ->
            fun ~x:(x10391 : GLint.t) ->
              fun ~y:(x10392 : GLint.t) ->
                fun ~width:(x10393 : GLsizei.t) ->
                  fun ~height:(x10394 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x10395)
                         "invalidateSubFramebuffer"
                         [|(GLenum.t_to_js x10388);(Iterable.t_1_to_js
                                                      GLenum.t_to_js x10389);(
                           GLint.t_to_js x10391);(GLint.t_to_js x10392);(
                           GLsizei.t_to_js x10393);(GLsizei.t_to_js x10394)|])
    let (transformFeedbackVaryings' :
      'tags this ->
        program:WebGLProgram.t ->
          varyings:string Iterable.t_1 -> bufferMode:GLenum.t -> unit)
      =
      fun (x10401 : 'tags this) ->
        fun ~program:(x10397 : WebGLProgram.t) ->
          fun ~varyings:(x10398 : string Iterable.t_1) ->
            fun ~bufferMode:(x10400 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x10401)
                   "transformFeedbackVaryings"
                   [|(WebGLProgram.t_to_js x10397);(Iterable.t_1_to_js
                                                      Ojs.string_to_js x10398);(
                     GLenum.t_to_js x10400)|])
    let (uniform1uiv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLuint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x10412 : 'tags this) ->
        fun ~location:(x10403 : WebGLUniformLocation.t option) ->
          fun ~data:(x10404 : GLuint.t Iterable.t_1) ->
            fun ?srcOffset:(x10405 : GLuint.t option) ->
              fun ?srcLength:(x10406 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x10414 = this_to_js Obj.magic x10412 in
                     Ojs.call (Ojs.get_prop_ascii x10414 "uniform1uiv")
                       "apply"
                       [|x10414;((let x10407 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x10407 "push"
                                       [|(Ojs.option_to_js
                                            WebGLUniformLocation.t_to_js
                                            x10403)|]);
                                  ignore
                                    (Ojs.call x10407 "push"
                                       [|(Iterable.t_1_to_js GLuint.t_to_js
                                            x10404)|]);
                                  (match x10405 with
                                   | Some x10409 ->
                                       ignore
                                         (Ojs.call x10407 "push"
                                            [|(GLuint.t_to_js x10409)|])
                                   | None -> ());
                                  (match x10406 with
                                   | Some x10408 ->
                                       ignore
                                         (Ojs.call x10407 "push"
                                            [|(GLuint.t_to_js x10408)|])
                                   | None -> ());
                                  x10407))|])
    let (uniform2uiv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLuint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x10424 : 'tags this) ->
        fun ~location:(x10415 : WebGLUniformLocation.t option) ->
          fun ~data:(x10416 : GLuint.t Iterable.t_1) ->
            fun ?srcOffset:(x10417 : GLuint.t option) ->
              fun ?srcLength:(x10418 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x10426 = this_to_js Obj.magic x10424 in
                     Ojs.call (Ojs.get_prop_ascii x10426 "uniform2uiv")
                       "apply"
                       [|x10426;((let x10419 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x10419 "push"
                                       [|(Ojs.option_to_js
                                            WebGLUniformLocation.t_to_js
                                            x10415)|]);
                                  ignore
                                    (Ojs.call x10419 "push"
                                       [|(Iterable.t_1_to_js GLuint.t_to_js
                                            x10416)|]);
                                  (match x10417 with
                                   | Some x10421 ->
                                       ignore
                                         (Ojs.call x10419 "push"
                                            [|(GLuint.t_to_js x10421)|])
                                   | None -> ());
                                  (match x10418 with
                                   | Some x10420 ->
                                       ignore
                                         (Ojs.call x10419 "push"
                                            [|(GLuint.t_to_js x10420)|])
                                   | None -> ());
                                  x10419))|])
    let (uniform3uiv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLuint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x10436 : 'tags this) ->
        fun ~location:(x10427 : WebGLUniformLocation.t option) ->
          fun ~data:(x10428 : GLuint.t Iterable.t_1) ->
            fun ?srcOffset:(x10429 : GLuint.t option) ->
              fun ?srcLength:(x10430 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x10438 = this_to_js Obj.magic x10436 in
                     Ojs.call (Ojs.get_prop_ascii x10438 "uniform3uiv")
                       "apply"
                       [|x10438;((let x10431 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x10431 "push"
                                       [|(Ojs.option_to_js
                                            WebGLUniformLocation.t_to_js
                                            x10427)|]);
                                  ignore
                                    (Ojs.call x10431 "push"
                                       [|(Iterable.t_1_to_js GLuint.t_to_js
                                            x10428)|]);
                                  (match x10429 with
                                   | Some x10433 ->
                                       ignore
                                         (Ojs.call x10431 "push"
                                            [|(GLuint.t_to_js x10433)|])
                                   | None -> ());
                                  (match x10430 with
                                   | Some x10432 ->
                                       ignore
                                         (Ojs.call x10431 "push"
                                            [|(GLuint.t_to_js x10432)|])
                                   | None -> ());
                                  x10431))|])
    let (uniform4uiv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLuint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x10448 : 'tags this) ->
        fun ~location:(x10439 : WebGLUniformLocation.t option) ->
          fun ~data:(x10440 : GLuint.t Iterable.t_1) ->
            fun ?srcOffset:(x10441 : GLuint.t option) ->
              fun ?srcLength:(x10442 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x10450 = this_to_js Obj.magic x10448 in
                     Ojs.call (Ojs.get_prop_ascii x10450 "uniform4uiv")
                       "apply"
                       [|x10450;((let x10443 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x10443 "push"
                                       [|(Ojs.option_to_js
                                            WebGLUniformLocation.t_to_js
                                            x10439)|]);
                                  ignore
                                    (Ojs.call x10443 "push"
                                       [|(Iterable.t_1_to_js GLuint.t_to_js
                                            x10440)|]);
                                  (match x10441 with
                                   | Some x10445 ->
                                       ignore
                                         (Ojs.call x10443 "push"
                                            [|(GLuint.t_to_js x10445)|])
                                   | None -> ());
                                  (match x10442 with
                                   | Some x10444 ->
                                       ignore
                                         (Ojs.call x10443 "push"
                                            [|(GLuint.t_to_js x10444)|])
                                   | None -> ());
                                  x10443))|])
    let (uniformMatrix2x3fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x10461 : 'tags this) ->
        fun ~location:(x10451 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x10452 : GLboolean.t) ->
            fun ~data:(x10453 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x10454 : GLuint.t option) ->
                fun ?srcLength:(x10455 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x10463 = this_to_js Obj.magic x10461 in
                       Ojs.call
                         (Ojs.get_prop_ascii x10463 "uniformMatrix2x3fv")
                         "apply"
                         [|x10463;((let x10456 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x10456 "push"
                                         [|(Ojs.option_to_js
                                              WebGLUniformLocation.t_to_js
                                              x10451)|]);
                                    ignore
                                      (Ojs.call x10456 "push"
                                         [|(GLboolean.t_to_js x10452)|]);
                                    ignore
                                      (Ojs.call x10456 "push"
                                         [|(Iterable.t_1_to_js
                                              GLfloat.t_to_js x10453)|]);
                                    (match x10454 with
                                     | Some x10458 ->
                                         ignore
                                           (Ojs.call x10456 "push"
                                              [|(GLuint.t_to_js x10458)|])
                                     | None -> ());
                                    (match x10455 with
                                     | Some x10457 ->
                                         ignore
                                           (Ojs.call x10456 "push"
                                              [|(GLuint.t_to_js x10457)|])
                                     | None -> ());
                                    x10456))|])
    let (uniformMatrix2x4fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x10474 : 'tags this) ->
        fun ~location:(x10464 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x10465 : GLboolean.t) ->
            fun ~data:(x10466 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x10467 : GLuint.t option) ->
                fun ?srcLength:(x10468 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x10476 = this_to_js Obj.magic x10474 in
                       Ojs.call
                         (Ojs.get_prop_ascii x10476 "uniformMatrix2x4fv")
                         "apply"
                         [|x10476;((let x10469 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x10469 "push"
                                         [|(Ojs.option_to_js
                                              WebGLUniformLocation.t_to_js
                                              x10464)|]);
                                    ignore
                                      (Ojs.call x10469 "push"
                                         [|(GLboolean.t_to_js x10465)|]);
                                    ignore
                                      (Ojs.call x10469 "push"
                                         [|(Iterable.t_1_to_js
                                              GLfloat.t_to_js x10466)|]);
                                    (match x10467 with
                                     | Some x10471 ->
                                         ignore
                                           (Ojs.call x10469 "push"
                                              [|(GLuint.t_to_js x10471)|])
                                     | None -> ());
                                    (match x10468 with
                                     | Some x10470 ->
                                         ignore
                                           (Ojs.call x10469 "push"
                                              [|(GLuint.t_to_js x10470)|])
                                     | None -> ());
                                    x10469))|])
    let (uniformMatrix3x2fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x10487 : 'tags this) ->
        fun ~location:(x10477 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x10478 : GLboolean.t) ->
            fun ~data:(x10479 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x10480 : GLuint.t option) ->
                fun ?srcLength:(x10481 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x10489 = this_to_js Obj.magic x10487 in
                       Ojs.call
                         (Ojs.get_prop_ascii x10489 "uniformMatrix3x2fv")
                         "apply"
                         [|x10489;((let x10482 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x10482 "push"
                                         [|(Ojs.option_to_js
                                              WebGLUniformLocation.t_to_js
                                              x10477)|]);
                                    ignore
                                      (Ojs.call x10482 "push"
                                         [|(GLboolean.t_to_js x10478)|]);
                                    ignore
                                      (Ojs.call x10482 "push"
                                         [|(Iterable.t_1_to_js
                                              GLfloat.t_to_js x10479)|]);
                                    (match x10480 with
                                     | Some x10484 ->
                                         ignore
                                           (Ojs.call x10482 "push"
                                              [|(GLuint.t_to_js x10484)|])
                                     | None -> ());
                                    (match x10481 with
                                     | Some x10483 ->
                                         ignore
                                           (Ojs.call x10482 "push"
                                              [|(GLuint.t_to_js x10483)|])
                                     | None -> ());
                                    x10482))|])
    let (uniformMatrix3x4fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x10500 : 'tags this) ->
        fun ~location:(x10490 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x10491 : GLboolean.t) ->
            fun ~data:(x10492 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x10493 : GLuint.t option) ->
                fun ?srcLength:(x10494 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x10502 = this_to_js Obj.magic x10500 in
                       Ojs.call
                         (Ojs.get_prop_ascii x10502 "uniformMatrix3x4fv")
                         "apply"
                         [|x10502;((let x10495 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x10495 "push"
                                         [|(Ojs.option_to_js
                                              WebGLUniformLocation.t_to_js
                                              x10490)|]);
                                    ignore
                                      (Ojs.call x10495 "push"
                                         [|(GLboolean.t_to_js x10491)|]);
                                    ignore
                                      (Ojs.call x10495 "push"
                                         [|(Iterable.t_1_to_js
                                              GLfloat.t_to_js x10492)|]);
                                    (match x10493 with
                                     | Some x10497 ->
                                         ignore
                                           (Ojs.call x10495 "push"
                                              [|(GLuint.t_to_js x10497)|])
                                     | None -> ());
                                    (match x10494 with
                                     | Some x10496 ->
                                         ignore
                                           (Ojs.call x10495 "push"
                                              [|(GLuint.t_to_js x10496)|])
                                     | None -> ());
                                    x10495))|])
    let (uniformMatrix4x2fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x10513 : 'tags this) ->
        fun ~location:(x10503 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x10504 : GLboolean.t) ->
            fun ~data:(x10505 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x10506 : GLuint.t option) ->
                fun ?srcLength:(x10507 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x10515 = this_to_js Obj.magic x10513 in
                       Ojs.call
                         (Ojs.get_prop_ascii x10515 "uniformMatrix4x2fv")
                         "apply"
                         [|x10515;((let x10508 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x10508 "push"
                                         [|(Ojs.option_to_js
                                              WebGLUniformLocation.t_to_js
                                              x10503)|]);
                                    ignore
                                      (Ojs.call x10508 "push"
                                         [|(GLboolean.t_to_js x10504)|]);
                                    ignore
                                      (Ojs.call x10508 "push"
                                         [|(Iterable.t_1_to_js
                                              GLfloat.t_to_js x10505)|]);
                                    (match x10506 with
                                     | Some x10510 ->
                                         ignore
                                           (Ojs.call x10508 "push"
                                              [|(GLuint.t_to_js x10510)|])
                                     | None -> ());
                                    (match x10507 with
                                     | Some x10509 ->
                                         ignore
                                           (Ojs.call x10508 "push"
                                              [|(GLuint.t_to_js x10509)|])
                                     | None -> ());
                                    x10508))|])
    let (uniformMatrix4x3fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x10526 : 'tags this) ->
        fun ~location:(x10516 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x10517 : GLboolean.t) ->
            fun ~data:(x10518 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x10519 : GLuint.t option) ->
                fun ?srcLength:(x10520 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x10528 = this_to_js Obj.magic x10526 in
                       Ojs.call
                         (Ojs.get_prop_ascii x10528 "uniformMatrix4x3fv")
                         "apply"
                         [|x10528;((let x10521 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x10521 "push"
                                         [|(Ojs.option_to_js
                                              WebGLUniformLocation.t_to_js
                                              x10516)|]);
                                    ignore
                                      (Ojs.call x10521 "push"
                                         [|(GLboolean.t_to_js x10517)|]);
                                    ignore
                                      (Ojs.call x10521 "push"
                                         [|(Iterable.t_1_to_js
                                              GLfloat.t_to_js x10518)|]);
                                    (match x10519 with
                                     | Some x10523 ->
                                         ignore
                                           (Ojs.call x10521 "push"
                                              [|(GLuint.t_to_js x10523)|])
                                     | None -> ());
                                    (match x10520 with
                                     | Some x10522 ->
                                         ignore
                                           (Ojs.call x10521 "push"
                                              [|(GLuint.t_to_js x10522)|])
                                     | None -> ());
                                    x10521))|])
    let (vertexAttribI4iv' :
      'tags this -> index:GLuint.t -> values:GLint.t Iterable.t_1 -> unit) =
      fun (x10532 : 'tags this) ->
        fun ~index:(x10529 : GLuint.t) ->
          fun ~values:(x10530 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10532) "vertexAttribI4iv"
                 [|(GLuint.t_to_js x10529);(Iterable.t_1_to_js GLint.t_to_js
                                              x10530)|])
    let (vertexAttribI4uiv' :
      'tags this -> index:GLuint.t -> values:GLuint.t Iterable.t_1 -> unit) =
      fun (x10537 : 'tags this) ->
        fun ~index:(x10534 : GLuint.t) ->
          fun ~values:(x10535 : GLuint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10537) "vertexAttribI4uiv"
                 [|(GLuint.t_to_js x10534);(Iterable.t_1_to_js GLuint.t_to_js
                                              x10535)|])
    let cast_from = Obj.magic
  end
module WebGL2RenderingContext =
  struct
    type t =
      [ `WebGL2RenderingContext  | `WebGL2RenderingContextBase 
      | `WebGL2RenderingContextOverloads  | `WebGLRenderingContextBase ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10540 : Ojs.t) -> t_of_js x10540
    and t_0_to_js : t_0 -> Ojs.t = fun (x10539 : t) -> t_to_js x10539
    type tags =
      [ `WebGL2RenderingContext  | `WebGL2RenderingContextBase 
      | `WebGL2RenderingContextOverloads  | `WebGLRenderingContextBase ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGL2RenderingContext ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x10543 : Ojs.t) -> intf_of_js __tags_of_js x10543
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x10541 : __tags intf) -> intf_to_js __tags_to_js x10541
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") 
             [||])
    let (active_uniform_blocks : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ACTIVE_UNIFORM_BLOCKS")
    let (already_signaled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALREADY_SIGNALED")
    let (any_samples_passed : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ANY_SAMPLES_PASSED")
    let (any_samples_passed_conservative : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ANY_SAMPLES_PASSED_CONSERVATIVE")
    let (color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "COLOR")
    let (color_attachment1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT1")
    let (color_attachment10 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT10")
    let (color_attachment11 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT11")
    let (color_attachment12 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT12")
    let (color_attachment13 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT13")
    let (color_attachment14 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT14")
    let (color_attachment15 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT15")
    let (color_attachment2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT2")
    let (color_attachment3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT3")
    let (color_attachment4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT4")
    let (color_attachment5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT5")
    let (color_attachment6 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT6")
    let (color_attachment7 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT7")
    let (color_attachment8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT8")
    let (color_attachment9 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT9")
    let (compare_ref_to_texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COMPARE_REF_TO_TEXTURE")
    let (condition_satisfied : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CONDITION_SATISFIED")
    let (copy_read_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COPY_READ_BUFFER")
    let (copy_read_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COPY_READ_BUFFER_BINDING")
    let (copy_write_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COPY_WRITE_BUFFER")
    let (copy_write_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COPY_WRITE_BUFFER_BINDING")
    let (current_query : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CURRENT_QUERY")
    let (depth : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "DEPTH")
    let (depth24_stencil8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH24_STENCIL8")
    let (depth32f_stencil8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH32F_STENCIL8")
    let (depth_component24 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_COMPONENT24")
    let (depth_component32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_COMPONENT32F")
    let (draw_buffer0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER0")
    let (draw_buffer1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER1")
    let (draw_buffer10 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER10")
    let (draw_buffer11 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER11")
    let (draw_buffer12 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER12")
    let (draw_buffer13 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER13")
    let (draw_buffer14 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER14")
    let (draw_buffer15 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER15")
    let (draw_buffer2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER2")
    let (draw_buffer3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER3")
    let (draw_buffer4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER4")
    let (draw_buffer5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER5")
    let (draw_buffer6 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER6")
    let (draw_buffer7 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER7")
    let (draw_buffer8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER8")
    let (draw_buffer9 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER9")
    let (draw_framebuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_FRAMEBUFFER")
    let (draw_framebuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_FRAMEBUFFER_BINDING")
    let (dynamic_copy : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DYNAMIC_COPY")
    let (dynamic_read : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DYNAMIC_READ")
    let (float_32_unsigned_int_24_8_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_32_UNSIGNED_INT_24_8_REV")
    let (fLOAT_MAT2x3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT2x3")
    let (fLOAT_MAT2x4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT2x4")
    let (fLOAT_MAT3x2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT3x2")
    let (fLOAT_MAT3x4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT3x4")
    let (fLOAT_MAT4x2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT4x2")
    let (fLOAT_MAT4x3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT4x3")
    let (fragment_shader_derivative_hint : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAGMENT_SHADER_DERIVATIVE_HINT")
    let (framebuffer_attachment_alpha_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE")
    let (framebuffer_attachment_blue_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE")
    let (framebuffer_attachment_color_encoding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING")
    let (framebuffer_attachment_component_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE")
    let (framebuffer_attachment_depth_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE")
    let (framebuffer_attachment_green_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE")
    let (framebuffer_attachment_red_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_RED_SIZE")
    let (framebuffer_attachment_stencil_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE")
    let (framebuffer_attachment_texture_layer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER")
    let (framebuffer_default : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_DEFAULT")
    let (framebuffer_incomplete_multisample : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE")
    let (half_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "HALF_FLOAT")
    let (interleaved_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INTERLEAVED_ATTRIBS")
    let (int_2_10_10_10_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_2_10_10_10_REV")
    let (int_sampler_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_SAMPLER_2D")
    let (int_sampler_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_SAMPLER_2D_ARRAY")
    let (int_sampler_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_SAMPLER_3D")
    let (int_sampler_cube : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_SAMPLER_CUBE")
    let (invalid_index : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_INDEX")
    let (max : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "MAX")
    let (max_3d_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_3D_TEXTURE_SIZE")
    let (max_array_texture_layers : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_ARRAY_TEXTURE_LAYERS")
    let (max_client_wait_timeout_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_CLIENT_WAIT_TIMEOUT_WEBGL")
    let (max_color_attachments : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COLOR_ATTACHMENTS")
    let (max_combined_fragment_uniform_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS")
    let (max_combined_uniform_blocks : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COMBINED_UNIFORM_BLOCKS")
    let (max_combined_vertex_uniform_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS")
    let (max_draw_buffers : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_DRAW_BUFFERS")
    let (max_elements_indices : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_ELEMENTS_INDICES")
    let (max_elements_vertices : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_ELEMENTS_VERTICES")
    let (max_element_index : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_ELEMENT_INDEX")
    let (max_fragment_input_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_FRAGMENT_INPUT_COMPONENTS")
    let (max_fragment_uniform_blocks : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_FRAGMENT_UNIFORM_BLOCKS")
    let (max_fragment_uniform_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_FRAGMENT_UNIFORM_COMPONENTS")
    let (max_program_texel_offset : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_PROGRAM_TEXEL_OFFSET")
    let (max_samples : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_SAMPLES")
    let (max_server_wait_timeout : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_SERVER_WAIT_TIMEOUT")
    let (max_texture_lod_bias : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TEXTURE_LOD_BIAS")
    let (max_transform_feedback_interleaved_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS")
    let (max_transform_feedback_separate_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS")
    let (max_transform_feedback_separate_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS")
    let (max_uniform_block_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_UNIFORM_BLOCK_SIZE")
    let (max_uniform_buffer_bindings : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_UNIFORM_BUFFER_BINDINGS")
    let (max_varying_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VARYING_COMPONENTS")
    let (max_vertex_output_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_OUTPUT_COMPONENTS")
    let (max_vertex_uniform_blocks : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_UNIFORM_BLOCKS")
    let (max_vertex_uniform_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_UNIFORM_COMPONENTS")
    let (min : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "MIN")
    let (min_program_texel_offset : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MIN_PROGRAM_TEXEL_OFFSET")
    let (object_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "OBJECT_TYPE")
    let (pack_row_length : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PACK_ROW_LENGTH")
    let (pack_skip_pixels : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PACK_SKIP_PIXELS")
    let (pack_skip_rows : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PACK_SKIP_ROWS")
    let (pixel_pack_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PIXEL_PACK_BUFFER")
    let (pixel_pack_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PIXEL_PACK_BUFFER_BINDING")
    let (pixel_unpack_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PIXEL_UNPACK_BUFFER")
    let (pixel_unpack_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PIXEL_UNPACK_BUFFER_BINDING")
    let (query_result : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "QUERY_RESULT")
    let (query_result_available : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "QUERY_RESULT_AVAILABLE")
    let (r11f_g11f_b10f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "R11F_G11F_B10F")
    let (r16f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R16F")
    let (r16i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R16I")
    let (r16ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R16UI")
    let (r32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R32F")
    let (r32i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R32I")
    let (r32ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R32UI")
    let (r8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R8")
    let (r8i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R8I")
    let (r8ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R8UI")
    let (r8_snorm : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "R8_SNORM")
    let (rasterizer_discard : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RASTERIZER_DISCARD")
    let (read_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "READ_BUFFER")
    let (read_framebuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "READ_FRAMEBUFFER")
    let (read_framebuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "READ_FRAMEBUFFER_BINDING")
    let (red : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RED")
    let (red_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RED_INTEGER")
    let (renderbuffer_samples : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_SAMPLES")
    let (rg : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG")
    let (rg16f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG16F")
    let (rg16i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG16I")
    let (rg16ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RG16UI")
    let (rg32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG32F")
    let (rg32i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG32I")
    let (rg32ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RG32UI")
    let (rg8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG8")
    let (rg8i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG8I")
    let (rg8ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG8UI")
    let (rg8_snorm : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RG8_SNORM")
    let (rgb10_a2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB10_A2")
    let (rgb10_a2ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB10_A2UI")
    let (rgb16f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB16F")
    let (rgb16i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB16I")
    let (rgb16ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB16UI")
    let (rgb32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB32F")
    let (rgb32i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB32I")
    let (rgb32ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB32UI")
    let (rgb8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGB8")
    let (rgb8i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGB8I")
    let (rgb8ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB8UI")
    let (rgb8_snorm : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB8_SNORM")
    let (rgb9_e5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB9_E5")
    let (rgba16f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA16F")
    let (rgba16i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA16I")
    let (rgba16ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA16UI")
    let (rgba32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA32F")
    let (rgba32i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA32I")
    let (rgba32ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA32UI")
    let (rgba8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGBA8")
    let (rgba8i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA8I")
    let (rgba8ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA8UI")
    let (rgba8_snorm : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA8_SNORM")
    let (rgba_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA_INTEGER")
    let (rgb_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB_INTEGER")
    let (rg_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RG_INTEGER")
    let (sampler_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_2D_ARRAY")
    let (sampler_2d_array_shadow : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_2D_ARRAY_SHADOW")
    let (sampler_2d_shadow : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_2D_SHADOW")
    let (sampler_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_3D")
    let (sampler_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_BINDING")
    let (sampler_cube_shadow : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_CUBE_SHADOW")
    let (separate_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SEPARATE_ATTRIBS")
    let (signaled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SIGNALED")
    let (signed_normalized : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SIGNED_NORMALIZED")
    let (srgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "SRGB")
    let (srgb8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "SRGB8")
    let (srgb8_alpha8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SRGB8_ALPHA8")
    let (static_copy : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STATIC_COPY")
    let (static_read : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STATIC_READ")
    let (stencil : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL")
    let (stream_copy : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STREAM_COPY")
    let (stream_read : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STREAM_READ")
    let (sync_condition : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_CONDITION")
    let (sync_fence : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_FENCE")
    let (sync_flags : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_FLAGS")
    let (sync_flush_commands_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_FLUSH_COMMANDS_BIT")
    let (sync_gpu_commands_complete : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_GPU_COMMANDS_COMPLETE")
    let (sync_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_STATUS")
    let (texture_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_2D_ARRAY")
    let (texture_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_3D")
    let (texture_base_level : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BASE_LEVEL")
    let (texture_binding_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BINDING_2D_ARRAY")
    let (texture_binding_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BINDING_3D")
    let (texture_compare_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_COMPARE_FUNC")
    let (texture_compare_mode : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_COMPARE_MODE")
    let (texture_immutable_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_IMMUTABLE_FORMAT")
    let (texture_immutable_levels : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_IMMUTABLE_LEVELS")
    let (texture_max_level : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MAX_LEVEL")
    let (texture_max_lod : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MAX_LOD")
    let (texture_min_lod : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MIN_LOD")
    let (texture_wrap_r : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_WRAP_R")
    let (timeout_expired : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TIMEOUT_EXPIRED")
    let (timeout_ignored : unit -> GLint64.t) =
      fun () ->
        GLint64.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TIMEOUT_IGNORED")
    let (transform_feedback : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK")
    let (transform_feedback_active : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_ACTIVE")
    let (transform_feedback_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BINDING")
    let (transform_feedback_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER")
    let (transform_feedback_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER_BINDING")
    let (transform_feedback_buffer_mode : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER_MODE")
    let (transform_feedback_buffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER_SIZE")
    let (transform_feedback_buffer_start : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER_START")
    let (transform_feedback_paused : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_PAUSED")
    let (transform_feedback_primitives_written : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN")
    let (transform_feedback_varyings : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_VARYINGS")
    let (uniform_array_stride : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_ARRAY_STRIDE")
    let (uniform_block_active_uniforms : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_ACTIVE_UNIFORMS")
    let (uniform_block_active_uniform_indices : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES")
    let (uniform_block_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_BINDING")
    let (uniform_block_data_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_DATA_SIZE")
    let (uniform_block_index : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_INDEX")
    let (uniform_block_referenced_by_fragment_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER")
    let (uniform_block_referenced_by_vertex_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER")
    let (uniform_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER")
    let (uniform_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER_BINDING")
    let (uniform_buffer_offset_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER_OFFSET_ALIGNMENT")
    let (uniform_buffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER_SIZE")
    let (uniform_buffer_start : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER_START")
    let (uniform_is_row_major : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_IS_ROW_MAJOR")
    let (uniform_matrix_stride : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_MATRIX_STRIDE")
    let (uniform_offset : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_OFFSET")
    let (uniform_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_SIZE")
    let (uniform_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_TYPE")
    let (unpack_image_height : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_IMAGE_HEIGHT")
    let (unpack_row_length : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_ROW_LENGTH")
    let (unpack_skip_images : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_SKIP_IMAGES")
    let (unpack_skip_pixels : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_SKIP_PIXELS")
    let (unpack_skip_rows : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_SKIP_ROWS")
    let (unsignaled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNALED")
    let (unsigned_int_10f_11f_11f_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_10F_11F_11F_REV")
    let (unsigned_int_24_8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_24_8")
    let (unsigned_int_2_10_10_10_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_2_10_10_10_REV")
    let (unsigned_int_5_9_9_9_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_5_9_9_9_REV")
    let (unsigned_int_sampler_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_SAMPLER_2D")
    let (unsigned_int_sampler_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_SAMPLER_2D_ARRAY")
    let (unsigned_int_sampler_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_SAMPLER_3D")
    let (unsigned_int_sampler_cube : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_SAMPLER_CUBE")
    let (unsigned_int_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_VEC2")
    let (unsigned_int_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_VEC3")
    let (unsigned_int_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_VEC4")
    let (unsigned_normalized : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_NORMALIZED")
    let (vertex_array_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ARRAY_BINDING")
    let (vertex_attrib_array_divisor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_DIVISOR")
    let (vertex_attrib_array_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_INTEGER")
    let (wait_failed : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "WAIT_FAILED")
    let (active_attributes : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ACTIVE_ATTRIBUTES")
    let (active_texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ACTIVE_TEXTURE")
    let (active_uniforms : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ACTIVE_UNIFORMS")
    let (aliased_line_width_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALIASED_LINE_WIDTH_RANGE")
    let (aliased_point_size_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALIASED_POINT_SIZE_RANGE")
    let (alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "ALPHA")
    let (alpha_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALPHA_BITS")
    let (always : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALWAYS")
    let (array_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ARRAY_BUFFER")
    let (array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ARRAY_BUFFER_BINDING")
    let (attached_shaders : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ATTACHED_SHADERS")
    let (back : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "BACK")
    let (blend : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "BLEND")
    let (blend_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_COLOR")
    let (blend_dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_DST_ALPHA")
    let (blend_dst_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_DST_RGB")
    let (blend_equation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_EQUATION")
    let (blend_equation_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_EQUATION_ALPHA")
    let (blend_equation_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_EQUATION_RGB")
    let (blend_src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_SRC_ALPHA")
    let (blend_src_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_SRC_RGB")
    let (blue_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLUE_BITS")
    let (bool : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "BOOL")
    let (bool_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BOOL_VEC2")
    let (bool_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BOOL_VEC3")
    let (bool_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BOOL_VEC4")
    let (browser_default_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BROWSER_DEFAULT_WEBGL")
    let (buffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BUFFER_SIZE")
    let (buffer_usage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BUFFER_USAGE")
    let (byte : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "BYTE")
    let (ccw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "CCW")
    let (clamp_to_edge : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CLAMP_TO_EDGE")
    let (color_attachment0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT0")
    let (color_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_BUFFER_BIT")
    let (color_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_CLEAR_VALUE")
    let (color_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_WRITEMASK")
    let (compile_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COMPILE_STATUS")
    let (compressed_texture_formats : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COMPRESSED_TEXTURE_FORMATS")
    let (constant_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CONSTANT_ALPHA")
    let (constant_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CONSTANT_COLOR")
    let (context_lost_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CONTEXT_LOST_WEBGL")
    let (cull_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CULL_FACE")
    let (cull_face_mode : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CULL_FACE_MODE")
    let (current_program : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CURRENT_PROGRAM")
    let (current_vertex_attrib : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CURRENT_VERTEX_ATTRIB")
    let (cw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "CW")
    let (decr : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "DECR")
    let (decr_wrap : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DECR_WRAP")
    let (delete_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DELETE_STATUS")
    let (depth_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_ATTACHMENT")
    let (depth_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_BITS")
    let (depth_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_BUFFER_BIT")
    let (depth_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_CLEAR_VALUE")
    let (depth_component : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_COMPONENT")
    let (depth_component16 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_COMPONENT16")
    let (depth_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_FUNC")
    let (depth_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_RANGE")
    let (depth_stencil : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_STENCIL")
    let (depth_stencil_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_STENCIL_ATTACHMENT")
    let (depth_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_TEST")
    let (depth_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_WRITEMASK")
    let (dither : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DITHER")
    let (dont_care : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DONT_CARE")
    let (dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DST_ALPHA")
    let (dst_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DST_COLOR")
    let (dynamic_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DYNAMIC_DRAW")
    let (element_array_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ELEMENT_ARRAY_BUFFER")
    let (element_array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ELEMENT_ARRAY_BUFFER_BINDING")
    let (equal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "EQUAL")
    let (fastest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FASTEST")
    let (float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "FLOAT")
    let (float_mat2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT2")
    let (float_mat3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT3")
    let (float_mat4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT4")
    let (float_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_VEC2")
    let (float_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_VEC3")
    let (float_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_VEC4")
    let (fragment_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAGMENT_SHADER")
    let (framebuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER")
    let (framebuffer_attachment_object_name : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME")
    let (framebuffer_attachment_object_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE")
    let (framebuffer_attachment_texture_cube_map_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE")
    let (framebuffer_attachment_texture_level : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL")
    let (framebuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_BINDING")
    let (framebuffer_complete : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_COMPLETE")
    let (framebuffer_incomplete_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_INCOMPLETE_ATTACHMENT")
    let (framebuffer_incomplete_dimensions : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_INCOMPLETE_DIMENSIONS")
    let (framebuffer_incomplete_missing_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT")
    let (framebuffer_unsupported : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_UNSUPPORTED")
    let (front : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "FRONT")
    let (front_and_back : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRONT_AND_BACK")
    let (front_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRONT_FACE")
    let (func_add : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FUNC_ADD")
    let (func_reverse_subtract : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FUNC_REVERSE_SUBTRACT")
    let (func_subtract : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FUNC_SUBTRACT")
    let (generate_mipmap_hint : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "GENERATE_MIPMAP_HINT")
    let (gequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "GEQUAL")
    let (greater : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "GREATER")
    let (green_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "GREEN_BITS")
    let (high_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "HIGH_FLOAT")
    let (high_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "HIGH_INT")
    let (implementation_color_read_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "IMPLEMENTATION_COLOR_READ_FORMAT")
    let (implementation_color_read_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "IMPLEMENTATION_COLOR_READ_TYPE")
    let (incr : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "INCR")
    let (incr_wrap : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INCR_WRAP")
    let (int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "INT")
    let (int_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_VEC2")
    let (int_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_VEC3")
    let (int_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_VEC4")
    let (invalid_enum : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_ENUM")
    let (invalid_framebuffer_operation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_FRAMEBUFFER_OPERATION")
    let (invalid_operation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_OPERATION")
    let (invalid_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_VALUE")
    let (invert : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVERT")
    let (keep : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "KEEP")
    let (lequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LEQUAL")
    let (less : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "LESS")
    let (linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINEAR")
    let (linear_mipmap_linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINEAR_MIPMAP_LINEAR")
    let (linear_mipmap_nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINEAR_MIPMAP_NEAREST")
    let (lines : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "LINES")
    let (line_loop : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINE_LOOP")
    let (line_strip : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINE_STRIP")
    let (line_width : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINE_WIDTH")
    let (link_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINK_STATUS")
    let (low_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LOW_FLOAT")
    let (low_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LOW_INT")
    let (luminance : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LUMINANCE")
    let (luminance_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LUMINANCE_ALPHA")
    let (max_combined_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COMBINED_TEXTURE_IMAGE_UNITS")
    let (max_cube_map_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_CUBE_MAP_TEXTURE_SIZE")
    let (max_fragment_uniform_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_FRAGMENT_UNIFORM_VECTORS")
    let (max_renderbuffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_RENDERBUFFER_SIZE")
    let (max_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TEXTURE_IMAGE_UNITS")
    let (max_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TEXTURE_SIZE")
    let (max_varying_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VARYING_VECTORS")
    let (max_vertex_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_ATTRIBS")
    let (max_vertex_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_TEXTURE_IMAGE_UNITS")
    let (max_vertex_uniform_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_UNIFORM_VECTORS")
    let (max_viewport_dims : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VIEWPORT_DIMS")
    let (medium_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MEDIUM_FLOAT")
    let (medium_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MEDIUM_INT")
    let (mirrored_repeat : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MIRRORED_REPEAT")
    let (nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NEAREST")
    let (nearest_mipmap_linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NEAREST_MIPMAP_LINEAR")
    let (nearest_mipmap_nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NEAREST_MIPMAP_NEAREST")
    let (never : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "NEVER")
    let (nicest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NICEST")
    let (none : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "NONE")
    let (notequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NOTEQUAL")
    let (no_error : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NO_ERROR")
    let (one : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "ONE")
    let (one_minus_constant_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_CONSTANT_ALPHA")
    let (one_minus_constant_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_CONSTANT_COLOR")
    let (one_minus_dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_DST_ALPHA")
    let (one_minus_dst_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_DST_COLOR")
    let (one_minus_src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_SRC_ALPHA")
    let (one_minus_src_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_SRC_COLOR")
    let (out_of_memory : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "OUT_OF_MEMORY")
    let (pack_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PACK_ALIGNMENT")
    let (points : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "POINTS")
    let (polygon_offset_factor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "POLYGON_OFFSET_FACTOR")
    let (polygon_offset_fill : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "POLYGON_OFFSET_FILL")
    let (polygon_offset_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "POLYGON_OFFSET_UNITS")
    let (red_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RED_BITS")
    let (renderbuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER")
    let (renderbuffer_alpha_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_ALPHA_SIZE")
    let (renderbuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_BINDING")
    let (renderbuffer_blue_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_BLUE_SIZE")
    let (renderbuffer_depth_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_DEPTH_SIZE")
    let (renderbuffer_green_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_GREEN_SIZE")
    let (renderbuffer_height : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_HEIGHT")
    let (renderbuffer_internal_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_INTERNAL_FORMAT")
    let (renderbuffer_red_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_RED_SIZE")
    let (renderbuffer_stencil_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_STENCIL_SIZE")
    let (renderbuffer_width : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_WIDTH")
    let (renderer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERER")
    let (repeat : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "REPEAT")
    let (replace : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "REPLACE")
    let (rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGB")
    let (rgb565 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB565")
    let (rgb5_a1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB5_A1")
    let (rgba : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGBA")
    let (rgba4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGBA4")
    let (sampler_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_2D")
    let (sampler_cube : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_CUBE")
    let (samples : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLES")
    let (sample_alpha_to_coverage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_ALPHA_TO_COVERAGE")
    let (sample_buffers : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_BUFFERS")
    let (sample_coverage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_COVERAGE")
    let (sample_coverage_invert : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_COVERAGE_INVERT")
    let (sample_coverage_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_COVERAGE_VALUE")
    let (scissor_box : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SCISSOR_BOX")
    let (scissor_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SCISSOR_TEST")
    let (shader_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SHADER_TYPE")
    let (shading_language_version : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SHADING_LANGUAGE_VERSION")
    let (short : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "SHORT")
    let (src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SRC_ALPHA")
    let (src_alpha_saturate : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SRC_ALPHA_SATURATE")
    let (src_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SRC_COLOR")
    let (static_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STATIC_DRAW")
    let (stencil_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_ATTACHMENT")
    let (stencil_back_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_FAIL")
    let (stencil_back_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_FUNC")
    let (stencil_back_pass_depth_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_PASS_DEPTH_FAIL")
    let (stencil_back_pass_depth_pass : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_PASS_DEPTH_PASS")
    let (stencil_back_ref : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_REF")
    let (stencil_back_value_mask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_VALUE_MASK")
    let (stencil_back_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_WRITEMASK")
    let (stencil_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BITS")
    let (stencil_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BUFFER_BIT")
    let (stencil_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_CLEAR_VALUE")
    let (stencil_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_FAIL")
    let (stencil_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_FUNC")
    let (stencil_index8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_INDEX8")
    let (stencil_pass_depth_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_PASS_DEPTH_FAIL")
    let (stencil_pass_depth_pass : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_PASS_DEPTH_PASS")
    let (stencil_ref : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_REF")
    let (stencil_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_TEST")
    let (stencil_value_mask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_VALUE_MASK")
    let (stencil_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_WRITEMASK")
    let (stream_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STREAM_DRAW")
    let (subpixel_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SUBPIXEL_BITS")
    let (texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE")
    let (texture0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE0")
    let (texture1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE1")
    let (texture10 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE10")
    let (texture11 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE11")
    let (texture12 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE12")
    let (texture13 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE13")
    let (texture14 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE14")
    let (texture15 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE15")
    let (texture16 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE16")
    let (texture17 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE17")
    let (texture18 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE18")
    let (texture19 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE19")
    let (texture2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE2")
    let (texture20 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE20")
    let (texture21 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE21")
    let (texture22 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE22")
    let (texture23 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE23")
    let (texture24 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE24")
    let (texture25 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE25")
    let (texture26 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE26")
    let (texture27 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE27")
    let (texture28 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE28")
    let (texture29 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE29")
    let (texture3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE3")
    let (texture30 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE30")
    let (texture31 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE31")
    let (texture4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE4")
    let (texture5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE5")
    let (texture6 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE6")
    let (texture7 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE7")
    let (texture8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE8")
    let (texture9 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE9")
    let (texture_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_2D")
    let (texture_binding_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BINDING_2D")
    let (texture_binding_cube_map : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BINDING_CUBE_MAP")
    let (texture_cube_map : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP")
    let (texture_cube_map_negative_x : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_X")
    let (texture_cube_map_negative_y : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_Y")
    let (texture_cube_map_negative_z : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_Z")
    let (texture_cube_map_positive_x : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_X")
    let (texture_cube_map_positive_y : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_Y")
    let (texture_cube_map_positive_z : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_Z")
    let (texture_mag_filter : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MAG_FILTER")
    let (texture_min_filter : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MIN_FILTER")
    let (texture_wrap_s : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_WRAP_S")
    let (texture_wrap_t : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_WRAP_T")
    let (triangles : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRIANGLES")
    let (triangle_fan : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRIANGLE_FAN")
    let (triangle_strip : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRIANGLE_STRIP")
    let (unpack_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_ALIGNMENT")
    let (unpack_colorspace_conversion_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_COLORSPACE_CONVERSION_WEBGL")
    let (unpack_flip_y_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_FLIP_Y_WEBGL")
    let (unpack_premultiply_alpha_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_PREMULTIPLY_ALPHA_WEBGL")
    let (unsigned_byte : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_BYTE")
    let (unsigned_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT")
    let (unsigned_short : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_SHORT")
    let (unsigned_short_4_4_4_4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_SHORT_4_4_4_4")
    let (unsigned_short_5_5_5_1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_SHORT_5_5_5_1")
    let (unsigned_short_5_6_5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_SHORT_5_6_5")
    let (validate_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VALIDATE_STATUS")
    let (vendor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VENDOR")
    let (version : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERSION")
    let (vertex_attrib_array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING")
    let (vertex_attrib_array_enabled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_ENABLED")
    let (vertex_attrib_array_normalized : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_NORMALIZED")
    let (vertex_attrib_array_pointer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_POINTER")
    let (vertex_attrib_array_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_SIZE")
    let (vertex_attrib_array_stride : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_STRIDE")
    let (vertex_attrib_array_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_TYPE")
    let (vertex_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_SHADER")
    let (viewport : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VIEWPORT")
    let (zero : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "ZERO")
  end
module WebAssembly =
  struct
    module ImportExportKind =
      struct
        type t =
          [ `L_s115_memory  | `L_s194_table  | `L_s81_function 
          | `L_s83_global ]
        let rec t_of_js : Ojs.t -> t =
          fun (x10546 : Ojs.t) ->
            let x10547 = x10546 in
            match Ojs.string_of_js x10547 with
            | "memory" -> `L_s115_memory
            | "table" -> `L_s194_table
            | "function" -> `L_s81_function
            | "global" -> `L_s83_global
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x10545 :
              [ `L_s115_memory  | `L_s194_table  | `L_s81_function 
              | `L_s83_global ])
            ->
            match x10545 with
            | `L_s115_memory -> Ojs.string_to_js "memory"
            | `L_s194_table -> Ojs.string_to_js "table"
            | `L_s81_function -> Ojs.string_to_js "function"
            | `L_s83_global -> Ojs.string_to_js "global"
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10549 : Ojs.t) -> t_of_js x10549
        and t_0_to_js : t_0 -> Ojs.t = fun (x10548 : t) -> t_to_js x10548
      end
    module ModuleImportDescriptor =
      struct
        type t = [ `WebAssembly_ModuleImportDescriptor ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10551 : Ojs.t) -> t_of_js x10551
        and t_0_to_js : t_0 -> Ojs.t = fun (x10550 : t) -> t_to_js x10550
        type tags = [ `WebAssembly_ModuleImportDescriptor ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags =
                      [> `WebAssembly_ModuleImportDescriptor ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10554 : Ojs.t) -> intf_of_js __tags_of_js x10554
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10552 : __tags intf) -> intf_to_js __tags_to_js x10552
        let (get_kind : 'tags this -> ImportExportKind.t) =
          fun (x10556 : 'tags this) ->
            ImportExportKind.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10556) "kind")
        let (set_kind : 'tags this -> ImportExportKind.t -> unit) =
          fun (x10558 : 'tags this) ->
            fun (x10559 : ImportExportKind.t) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10558) "kind"
                (ImportExportKind.t_to_js x10559)
        let (get_module : 'tags this -> string) =
          fun (x10561 : 'tags this) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10561) "module")
        let (set_module : 'tags this -> string -> unit) =
          fun (x10563 : 'tags this) ->
            fun (x10564 : string) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10563) "module"
                (Ojs.string_to_js x10564)
        let (get_name : 'tags this -> string) =
          fun (x10566 : 'tags this) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10566) "name")
        let (set_name : 'tags this -> string -> unit) =
          fun (x10568 : 'tags this) ->
            fun (x10569 : string) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10568) "name"
                (Ojs.string_to_js x10569)
        let (create :
          kind:ImportExportKind.t ->
            module_:string -> name:string -> unit -> t)
          =
          fun ~kind:(x10571 : ImportExportKind.t) ->
            fun ~module_:(x10572 : string) ->
              fun ~name:(x10573 : string) ->
                fun () ->
                  let x10574 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x10574 "kind"
                    (ImportExportKind.t_to_js x10571);
                  Ojs.set_prop_ascii x10574 "module"
                    (Ojs.string_to_js x10572);
                  Ojs.set_prop_ascii x10574 "name" (Ojs.string_to_js x10573);
                  t_of_js x10574
        let cast_from = Obj.magic
      end
    module ModuleExportDescriptor =
      struct
        type t = [ `WebAssembly_ModuleExportDescriptor ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10576 : Ojs.t) -> t_of_js x10576
        and t_0_to_js : t_0 -> Ojs.t = fun (x10575 : t) -> t_to_js x10575
        type tags = [ `WebAssembly_ModuleExportDescriptor ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags =
                      [> `WebAssembly_ModuleExportDescriptor ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10579 : Ojs.t) -> intf_of_js __tags_of_js x10579
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10577 : __tags intf) -> intf_to_js __tags_to_js x10577
        let (get_kind : 'tags this -> ImportExportKind.t) =
          fun (x10581 : 'tags this) ->
            ImportExportKind.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10581) "kind")
        let (set_kind : 'tags this -> ImportExportKind.t -> unit) =
          fun (x10583 : 'tags this) ->
            fun (x10584 : ImportExportKind.t) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10583) "kind"
                (ImportExportKind.t_to_js x10584)
        let (get_name : 'tags this -> string) =
          fun (x10586 : 'tags this) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10586) "name")
        let (set_name : 'tags this -> string -> unit) =
          fun (x10588 : 'tags this) ->
            fun (x10589 : string) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10588) "name"
                (Ojs.string_to_js x10589)
        let (create : kind:ImportExportKind.t -> name:string -> unit -> t) =
          fun ~kind:(x10591 : ImportExportKind.t) ->
            fun ~name:(x10592 : string) ->
              fun () ->
                let x10593 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x10593 "kind"
                  (ImportExportKind.t_to_js x10591);
                Ojs.set_prop_ascii x10593 "name" (Ojs.string_to_js x10592);
                t_of_js x10593
        let cast_from = Obj.magic
      end
    module Module =
      struct
        type t = [ `WebAssembly_Module ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10595 : Ojs.t) -> t_of_js x10595
        and t_0_to_js : t_0 -> Ojs.t = fun (x10594 : t) -> t_to_js x10594
        type tags = [ `WebAssembly_Module ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_Module ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10598 : Ojs.t) -> intf_of_js __tags_of_js x10598
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10596 : __tags intf) -> intf_to_js __tags_to_js x10596
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Module")
                 "prototype")
        let (create : BufferSource.t -> t) =
          fun (x10600 : BufferSource.t) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Module")
                 [|(BufferSource.t_to_js x10600)|])
        let (customSections :
          moduleObject:t -> sectionName:string -> ArrayBuffer.t_0 list) =
          fun ~moduleObject:(x10601 : t) ->
            fun ~sectionName:(x10602 : string) ->
              Ojs.list_of_js ArrayBuffer.t_0_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Module")
                   "customSections"
                   [|(t_to_js x10601);(Ojs.string_to_js x10602)|])
        let (exports : t -> ModuleExportDescriptor.t list) =
          fun (x10604 : t) ->
            Ojs.list_of_js ModuleExportDescriptor.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Module")
                 "exports" [|(t_to_js x10604)|])
        let (imports : t -> ModuleImportDescriptor.t list) =
          fun (x10606 : t) ->
            Ojs.list_of_js ModuleImportDescriptor.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Module")
                 "imports" [|(t_to_js x10606)|])
      end
    module TableKind =
      struct
        type t = [ `L_s36_anyfunc  | `L_s71_externref ]
        let rec t_of_js : Ojs.t -> t =
          fun (x10609 : Ojs.t) ->
            let x10610 = x10609 in
            match Ojs.string_of_js x10610 with
            | "anyfunc" -> `L_s36_anyfunc
            | "externref" -> `L_s71_externref
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x10608 : [ `L_s36_anyfunc  | `L_s71_externref ]) ->
            match x10608 with
            | `L_s36_anyfunc -> Ojs.string_to_js "anyfunc"
            | `L_s71_externref -> Ojs.string_to_js "externref"
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10612 : Ojs.t) -> t_of_js x10612
        and t_0_to_js : t_0 -> Ojs.t = fun (x10611 : t) -> t_to_js x10611
      end
    module TableDescriptor =
      struct
        type t = [ `WebAssembly_TableDescriptor ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10614 : Ojs.t) -> t_of_js x10614
        and t_0_to_js : t_0 -> Ojs.t = fun (x10613 : t) -> t_to_js x10613
        type tags = [ `WebAssembly_TableDescriptor ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_TableDescriptor ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10617 : Ojs.t) -> intf_of_js __tags_of_js x10617
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10615 : __tags intf) -> intf_to_js __tags_to_js x10615
        let (get_element : 'tags this -> TableKind.t) =
          fun (x10619 : 'tags this) ->
            TableKind.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10619) "element")
        let (set_element : 'tags this -> TableKind.t -> unit) =
          fun (x10621 : 'tags this) ->
            fun (x10622 : TableKind.t) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10621) "element"
                (TableKind.t_to_js x10622)
        let (get_initial : 'tags this -> float) =
          fun (x10624 : 'tags this) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10624) "initial")
        let (set_initial : 'tags this -> float -> unit) =
          fun (x10626 : 'tags this) ->
            fun (x10627 : float) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10626) "initial"
                (Ojs.float_to_js x10627)
        let (get_maximum : 'tags this -> float option) =
          fun (x10629 : 'tags this) ->
            Ojs.option_of_js Ojs.float_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10629) "maximum")
        let (set_maximum : 'tags this -> float -> unit) =
          fun (x10632 : 'tags this) ->
            fun (x10633 : float) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10632) "maximum"
                (Ojs.float_to_js x10633)
        let (create :
          element:TableKind.t -> initial:float -> ?maximum:float -> unit -> t)
          =
          fun ~element:(x10635 : TableKind.t) ->
            fun ~initial:(x10636 : float) ->
              fun ?maximum:(x10637 : float option) ->
                fun () ->
                  let x10638 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x10638 "element"
                    (TableKind.t_to_js x10635);
                  Ojs.set_prop_ascii x10638 "initial"
                    (Ojs.float_to_js x10636);
                  (match x10637 with
                   | Some x10639 ->
                       Ojs.set_prop_ascii x10638 "maximum"
                         (Ojs.float_to_js x10639)
                   | None -> ());
                  t_of_js x10638
        let cast_from = Obj.magic
      end
    module Table =
      struct
        type t = [ `WebAssembly_Table ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10641 : Ojs.t) -> t_of_js x10641
        and t_0_to_js : t_0 -> Ojs.t = fun (x10640 : t) -> t_to_js x10640
        type tags = [ `WebAssembly_Table ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_Table ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10644 : Ojs.t) -> intf_of_js __tags_of_js x10644
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10642 : __tags intf) -> intf_to_js __tags_to_js x10642
        let (get_length : 'tags this -> float) =
          fun (x10646 : 'tags this) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10646) "length")
        let (get_ : 'tags this -> index:float -> any) =
          fun (x10649 : 'tags this) ->
            fun ~index:(x10648 : float) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x10649) "get"
                   [|(Ojs.float_to_js x10648)|])
        let (grow : 'tags this -> delta:float -> ?value:any -> unit -> float)
          =
          fun (x10655 : 'tags this) ->
            fun ~delta:(x10651 : float) ->
              fun ?value:(x10652 : any option) ->
                fun () ->
                  Ojs.float_of_js
                    (let x10657 = this_to_js Obj.magic x10655 in
                     Ojs.call (Ojs.get_prop_ascii x10657 "grow") "apply"
                       [|x10657;((let x10653 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x10653 "push"
                                       [|(Ojs.float_to_js x10651)|]);
                                  (match x10652 with
                                   | Some x10654 ->
                                       ignore
                                         (Ojs.call x10653 "push"
                                            [|(any_to_js x10654)|])
                                   | None -> ());
                                  x10653))|])
        let (set_ : 'tags this -> index:float -> ?value:any -> unit -> unit)
          =
          fun (x10662 : 'tags this) ->
            fun ~index:(x10658 : float) ->
              fun ?value:(x10659 : any option) ->
                fun () ->
                  ignore
                    (let x10664 = this_to_js Obj.magic x10662 in
                     Ojs.call (Ojs.get_prop_ascii x10664 "set") "apply"
                       [|x10664;((let x10660 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x10660 "push"
                                       [|(Ojs.float_to_js x10658)|]);
                                  (match x10659 with
                                   | Some x10661 ->
                                       ignore
                                         (Ojs.call x10660 "push"
                                            [|(any_to_js x10661)|])
                                   | None -> ());
                                  x10660))|])
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Table")
                 "prototype")
        let (create :
          descriptor:TableDescriptor.t -> ?value:any -> unit -> t) =
          fun ~descriptor:(x10665 : TableDescriptor.t) ->
            fun ?value:(x10666 : any option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Table")
                     (let x10667 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x10667 "push"
                           [|(TableDescriptor.t_to_js x10665)|]);
                      (match x10666 with
                       | Some x10668 ->
                           ignore
                             (Ojs.call x10667 "push" [|(any_to_js x10668)|])
                       | None -> ());
                      x10667))
      end
    module MemoryDescriptor =
      struct
        type t = [ `WebAssembly_MemoryDescriptor ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10670 : Ojs.t) -> t_of_js x10670
        and t_0_to_js : t_0 -> Ojs.t = fun (x10669 : t) -> t_to_js x10669
        type tags = [ `WebAssembly_MemoryDescriptor ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_MemoryDescriptor ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10673 : Ojs.t) -> intf_of_js __tags_of_js x10673
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10671 : __tags intf) -> intf_to_js __tags_to_js x10671
        let (get_initial : 'tags this -> float) =
          fun (x10675 : 'tags this) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10675) "initial")
        let (set_initial : 'tags this -> float -> unit) =
          fun (x10677 : 'tags this) ->
            fun (x10678 : float) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10677) "initial"
                (Ojs.float_to_js x10678)
        let (get_maximum : 'tags this -> float option) =
          fun (x10680 : 'tags this) ->
            Ojs.option_of_js Ojs.float_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10680) "maximum")
        let (set_maximum : 'tags this -> float -> unit) =
          fun (x10683 : 'tags this) ->
            fun (x10684 : float) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10683) "maximum"
                (Ojs.float_to_js x10684)
        let (get_shared : 'tags this -> bool option) =
          fun (x10686 : 'tags this) ->
            Ojs.option_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10686) "shared")
        let (set_shared : 'tags this -> bool -> unit) =
          fun (x10689 : 'tags this) ->
            fun (x10690 : bool) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10689) "shared"
                (Ojs.bool_to_js x10690)
        let (create :
          initial:float -> ?maximum:float -> ?shared:bool -> unit -> t) =
          fun ~initial:(x10692 : float) ->
            fun ?maximum:(x10693 : float option) ->
              fun ?shared:(x10694 : bool option) ->
                fun () ->
                  let x10695 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x10695 "initial"
                    (Ojs.float_to_js x10692);
                  (match x10693 with
                   | Some x10697 ->
                       Ojs.set_prop_ascii x10695 "maximum"
                         (Ojs.float_to_js x10697)
                   | None -> ());
                  (match x10694 with
                   | Some x10696 ->
                       Ojs.set_prop_ascii x10695 "shared"
                         (Ojs.bool_to_js x10696)
                   | None -> ());
                  t_of_js x10695
        let cast_from = Obj.magic
      end
    module Memory =
      struct
        type t = [ `WebAssembly_Memory ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10699 : Ojs.t) -> t_of_js x10699
        and t_0_to_js : t_0 -> Ojs.t = fun (x10698 : t) -> t_to_js x10698
        type tags = [ `WebAssembly_Memory ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_Memory ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10702 : Ojs.t) -> intf_of_js __tags_of_js x10702
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10700 : __tags intf) -> intf_to_js __tags_to_js x10700
        let (get_buffer : 'tags this -> ArrayBuffer.t_0) =
          fun (x10704 : 'tags this) ->
            ArrayBuffer.t_0_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10704) "buffer")
        let (grow : 'tags this -> delta:float -> float) =
          fun (x10707 : 'tags this) ->
            fun ~delta:(x10706 : float) ->
              Ojs.float_of_js
                (Ojs.call (this_to_js Obj.magic x10707) "grow"
                   [|(Ojs.float_to_js x10706)|])
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Memory")
                 "prototype")
        let (create : MemoryDescriptor.t -> t) =
          fun (x10709 : MemoryDescriptor.t) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Memory")
                 [|(MemoryDescriptor.t_to_js x10709)|])
      end
    module ValueType =
      struct
        type t =
          [ `L_s207_v128  | `L_s36_anyfunc  | `L_s71_externref  | `L_s72_f32 
          | `L_s73_f64  | `L_s89_i32  | `L_s90_i64 ]
        let rec t_of_js : Ojs.t -> t =
          fun (x10711 : Ojs.t) ->
            let x10712 = x10711 in
            match Ojs.string_of_js x10712 with
            | "v128" -> `L_s207_v128
            | "anyfunc" -> `L_s36_anyfunc
            | "externref" -> `L_s71_externref
            | "f32" -> `L_s72_f32
            | "f64" -> `L_s73_f64
            | "i32" -> `L_s89_i32
            | "i64" -> `L_s90_i64
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x10710 :
              [ `L_s207_v128  | `L_s36_anyfunc  | `L_s71_externref 
              | `L_s72_f32  | `L_s73_f64  | `L_s89_i32  | `L_s90_i64 ])
            ->
            match x10710 with
            | `L_s207_v128 -> Ojs.string_to_js "v128"
            | `L_s36_anyfunc -> Ojs.string_to_js "anyfunc"
            | `L_s71_externref -> Ojs.string_to_js "externref"
            | `L_s72_f32 -> Ojs.string_to_js "f32"
            | `L_s73_f64 -> Ojs.string_to_js "f64"
            | `L_s89_i32 -> Ojs.string_to_js "i32"
            | `L_s90_i64 -> Ojs.string_to_js "i64"
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10714 : Ojs.t) -> t_of_js x10714
        and t_0_to_js : t_0 -> Ojs.t = fun (x10713 : t) -> t_to_js x10713
      end
    module GlobalDescriptor =
      struct
        type t = [ `WebAssembly_GlobalDescriptor ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10716 : Ojs.t) -> t_of_js x10716
        and t_0_to_js : t_0 -> Ojs.t = fun (x10715 : t) -> t_to_js x10715
        type tags = [ `WebAssembly_GlobalDescriptor ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_GlobalDescriptor ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10719 : Ojs.t) -> intf_of_js __tags_of_js x10719
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10717 : __tags intf) -> intf_to_js __tags_to_js x10717
        let (get_mutable : 'tags this -> bool option) =
          fun (x10721 : 'tags this) ->
            Ojs.option_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10721) "mutable")
        let (set_mutable : 'tags this -> bool -> unit) =
          fun (x10724 : 'tags this) ->
            fun (x10725 : bool) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10724) "mutable"
                (Ojs.bool_to_js x10725)
        let (get_value : 'tags this -> ValueType.t) =
          fun (x10727 : 'tags this) ->
            ValueType.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10727) "value")
        let (set_value : 'tags this -> ValueType.t -> unit) =
          fun (x10729 : 'tags this) ->
            fun (x10730 : ValueType.t) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10729) "value"
                (ValueType.t_to_js x10730)
        let (create : ?mutable_:bool -> value:ValueType.t -> unit -> t) =
          fun ?mutable_:(x10732 : bool option) ->
            fun ~value:(x10733 : ValueType.t) ->
              fun () ->
                let x10734 = Ojs.empty_obj () in
                (match x10732 with
                 | Some x10735 ->
                     Ojs.set_prop_ascii x10734 "mutable"
                       (Ojs.bool_to_js x10735)
                 | None -> ());
                Ojs.set_prop_ascii x10734 "value" (ValueType.t_to_js x10733);
                t_of_js x10734
        let cast_from = Obj.magic
      end
    module Global =
      struct
        type t = [ `WebAssembly_Global ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10737 : Ojs.t) -> t_of_js x10737
        and t_0_to_js : t_0 -> Ojs.t = fun (x10736 : t) -> t_to_js x10736
        type tags = [ `WebAssembly_Global ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_Global ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10740 : Ojs.t) -> intf_of_js __tags_of_js x10740
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10738 : __tags intf) -> intf_to_js __tags_to_js x10738
        let (get_value : 'tags this -> any) =
          fun (x10742 : 'tags this) ->
            any_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10742) "value")
        let (set_value : 'tags this -> any -> unit) =
          fun (x10744 : 'tags this) ->
            fun (x10745 : any) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10744) "value"
                (any_to_js x10745)
        let (valueOf : 'tags this -> any) =
          fun (x10747 : 'tags this) ->
            any_of_js (Ojs.call (this_to_js Obj.magic x10747) "valueOf" [||])
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Global")
                 "prototype")
        let (create : descriptor:GlobalDescriptor.t -> ?v:any -> unit -> t) =
          fun ~descriptor:(x10749 : GlobalDescriptor.t) ->
            fun ?v:(x10750 : any option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                        "Global")
                     (let x10751 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x10751 "push"
                           [|(GlobalDescriptor.t_to_js x10749)|]);
                      (match x10750 with
                       | Some x10752 ->
                           ignore
                             (Ojs.call x10751 "push" [|(any_to_js x10752)|])
                       | None -> ());
                      x10751))
      end
    module ExportValue =
      struct
        type t = (untyped_function, Global.t, Memory.t, Table.t) union4
        let rec t_of_js : Ojs.t -> t =
          fun (x10758 : Ojs.t) ->
            union4_of_js untyped_function_of_js Global.t_of_js Memory.t_of_js
              Table.t_of_js x10758
        and t_to_js : t -> Ojs.t =
          fun
            (x10753 : (untyped_function, Global.t, Memory.t, Table.t) union4)
            ->
            union4_to_js untyped_function_to_js Global.t_to_js Memory.t_to_js
              Table.t_to_js x10753
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10764 : Ojs.t) -> t_of_js x10764
        and t_0_to_js : t_0 -> Ojs.t = fun (x10763 : t) -> t_to_js x10763
      end
    module ImportValue =
      struct
        type t = [ `Number of float  | `Other of ExportValue.t ] Primitive.t
        let rec t_of_js : Ojs.t -> t =
          fun (x10769 : Ojs.t) ->
            Primitive.t_of_js
              (fun (x10770 : Ojs.t) ->
                 let x10771 = x10770 in
                 match Ojs.string_of_js (Ojs.get_prop_ascii x10771 "dummy")
                 with
                 | "Number" -> `Number (Ojs.float_of_js x10771)
                 | "Other" -> `Other (ExportValue.t_of_js x10771)
                 | _ -> assert false) x10769
        and t_to_js : t -> Ojs.t =
          fun
            (x10765 :
              [ `Number of float  | `Other of ExportValue.t ] Primitive.t)
            ->
            Primitive.t_to_js
              (fun (x10766 : [ `Number of float  | `Other of ExportValue.t ])
                 ->
                 match x10766 with
                 | `Number x10767 -> Ojs.float_to_js x10767
                 | `Other x10768 -> ExportValue.t_to_js x10768) x10765
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10773 : Ojs.t) -> t_of_js x10773
        and t_0_to_js : t_0 -> Ojs.t = fun (x10772 : t) -> t_to_js x10772
      end
    module ModuleImports =
      struct
        type t = (string, ImportValue.t) Record.t_2
        let rec t_of_js : Ojs.t -> t =
          fun (x10777 : Ojs.t) ->
            Record.t_2_of_js Ojs.string_of_js ImportValue.t_of_js x10777
        and t_to_js : t -> Ojs.t =
          fun (x10774 : (string, ImportValue.t) Record.t_2) ->
            Record.t_2_to_js Ojs.string_to_js ImportValue.t_to_js x10774
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10781 : Ojs.t) -> t_of_js x10781
        and t_0_to_js : t_0 -> Ojs.t = fun (x10780 : t) -> t_to_js x10780
      end
    module Imports =
      struct
        type t = (string, ModuleImports.t) Record.t_2
        let rec t_of_js : Ojs.t -> t =
          fun (x10785 : Ojs.t) ->
            Record.t_2_of_js Ojs.string_of_js ModuleImports.t_of_js x10785
        and t_to_js : t -> Ojs.t =
          fun (x10782 : (string, ModuleImports.t) Record.t_2) ->
            Record.t_2_to_js Ojs.string_to_js ModuleImports.t_to_js x10782
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10789 : Ojs.t) -> t_of_js x10789
        and t_0_to_js : t_0 -> Ojs.t = fun (x10788 : t) -> t_to_js x10788
      end
    module Exports =
      struct
        type t = (string, ExportValue.t) Record.t_2
        let rec t_of_js : Ojs.t -> t =
          fun (x10793 : Ojs.t) ->
            Record.t_2_of_js Ojs.string_of_js ExportValue.t_of_js x10793
        and t_to_js : t -> Ojs.t =
          fun (x10790 : (string, ExportValue.t) Record.t_2) ->
            Record.t_2_to_js Ojs.string_to_js ExportValue.t_to_js x10790
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10797 : Ojs.t) -> t_of_js x10797
        and t_0_to_js : t_0 -> Ojs.t = fun (x10796 : t) -> t_to_js x10796
      end
    module Instance =
      struct
        type t = [ `WebAssembly_Instance ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10799 : Ojs.t) -> t_of_js x10799
        and t_0_to_js : t_0 -> Ojs.t = fun (x10798 : t) -> t_to_js x10798
        type tags = [ `WebAssembly_Instance ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_Instance ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10802 : Ojs.t) -> intf_of_js __tags_of_js x10802
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10800 : __tags intf) -> intf_to_js __tags_to_js x10800
        let (get_exports : 'tags this -> Exports.t) =
          fun (x10804 : 'tags this) ->
            Exports.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10804) "exports")
        let (create : exports:Exports.t -> unit -> t) =
          fun ~exports:(x10806 : Exports.t) ->
            fun () ->
              let x10807 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x10807 "exports" (Exports.t_to_js x10806);
              t_of_js x10807
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Instance")
                 "prototype")
        let (create' :
          module_:Module.t -> ?importObject:Imports.t -> unit -> t) =
          fun ~module_:(x10808 : Module.t) ->
            fun ?importObject:(x10809 : Imports.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                        "Instance")
                     (let x10810 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x10810 "push" [|(Module.t_to_js x10808)|]);
                      (match x10809 with
                       | Some x10811 ->
                           ignore
                             (Ojs.call x10810 "push"
                                [|(Imports.t_to_js x10811)|])
                       | None -> ());
                      x10810))
      end
    module WebAssemblyInstantiatedSource =
      struct
        type t = [ `WebAssembly_WebAssemblyInstantiatedSource ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10813 : Ojs.t) -> t_of_js x10813
        and t_0_to_js : t_0 -> Ojs.t = fun (x10812 : t) -> t_to_js x10812
        type tags = [ `WebAssembly_WebAssemblyInstantiatedSource ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags =
                      [> `WebAssembly_WebAssemblyInstantiatedSource ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10816 : Ojs.t) -> intf_of_js __tags_of_js x10816
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10814 : __tags intf) -> intf_to_js __tags_to_js x10814
        let (get_instance : 'tags this -> Instance.t) =
          fun (x10818 : 'tags this) ->
            Instance.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10818) "instance")
        let (set_instance : 'tags this -> Instance.t -> unit) =
          fun (x10820 : 'tags this) ->
            fun (x10821 : Instance.t) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10820) "instance"
                (Instance.t_to_js x10821)
        let (get_module : 'tags this -> Module.t) =
          fun (x10823 : 'tags this) ->
            Module.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10823) "module")
        let (set_module : 'tags this -> Module.t -> unit) =
          fun (x10825 : 'tags this) ->
            fun (x10826 : Module.t) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10825) "module"
                (Module.t_to_js x10826)
        let (create : instance:Instance.t -> module_:Module.t -> unit -> t) =
          fun ~instance:(x10828 : Instance.t) ->
            fun ~module_:(x10829 : Module.t) ->
              fun () ->
                let x10830 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x10830 "instance"
                  (Instance.t_to_js x10828);
                Ojs.set_prop_ascii x10830 "module" (Module.t_to_js x10829);
                t_of_js x10830
        let cast_from = Obj.magic
      end
    module RuntimeError =
      struct
        type t = [ `WebAssembly_RuntimeError ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10832 : Ojs.t) -> t_of_js x10832
        and t_0_to_js : t_0 -> Ojs.t = fun (x10831 : t) -> t_to_js x10831
        type tags = [ `WebAssembly_RuntimeError ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_RuntimeError ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10835 : Ojs.t) -> intf_of_js __tags_of_js x10835
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10833 : __tags intf) -> intf_to_js __tags_to_js x10833
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                    "RuntimeError") "prototype")
        let (create : ?message:string -> unit -> t) =
          fun ?message:(x10837 : string option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                      "RuntimeError")
                   (let x10838 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x10837 with
                     | Some x10839 ->
                         ignore
                           (Ojs.call x10838 "push"
                              [|(Ojs.string_to_js x10839)|])
                     | None -> ());
                    x10838))
        let (invoke : ?message:string -> unit -> t) =
          fun ?message:(x10840 : string option) ->
            fun () ->
              t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                      "RuntimeError") "apply"
                   [|Ojs.null;((let x10841 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x10840 with
                                 | Some x10842 ->
                                     ignore
                                       (Ojs.call x10841 "push"
                                          [|(Ojs.string_to_js x10842)|])
                                 | None -> ());
                                x10841))|])
      end
    module LinkError =
      struct
        type t = [ `WebAssembly_LinkError ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10844 : Ojs.t) -> t_of_js x10844
        and t_0_to_js : t_0 -> Ojs.t = fun (x10843 : t) -> t_to_js x10843
        type tags = [ `WebAssembly_LinkError ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_LinkError ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10847 : Ojs.t) -> intf_of_js __tags_of_js x10847
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10845 : __tags intf) -> intf_to_js __tags_to_js x10845
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "LinkError")
                 "prototype")
        let (create : ?message:string -> unit -> t) =
          fun ?message:(x10849 : string option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                      "LinkError")
                   (let x10850 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x10849 with
                     | Some x10851 ->
                         ignore
                           (Ojs.call x10850 "push"
                              [|(Ojs.string_to_js x10851)|])
                     | None -> ());
                    x10850))
        let (invoke : ?message:string -> unit -> t) =
          fun ?message:(x10852 : string option) ->
            fun () ->
              t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                      "LinkError") "apply"
                   [|Ojs.null;((let x10853 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x10852 with
                                 | Some x10854 ->
                                     ignore
                                       (Ojs.call x10853 "push"
                                          [|(Ojs.string_to_js x10854)|])
                                 | None -> ());
                                x10853))|])
      end
    module CompileError =
      struct
        type t = [ `WebAssembly_CompileError ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10856 : Ojs.t) -> t_of_js x10856
        and t_0_to_js : t_0 -> Ojs.t = fun (x10855 : t) -> t_to_js x10855
        type tags = [ `WebAssembly_CompileError ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_CompileError ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10859 : Ojs.t) -> intf_of_js __tags_of_js x10859
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10857 : __tags intf) -> intf_to_js __tags_to_js x10857
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                    "CompileError") "prototype")
        let (create : ?message:string -> unit -> t) =
          fun ?message:(x10861 : string option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                      "CompileError")
                   (let x10862 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x10861 with
                     | Some x10863 ->
                         ignore
                           (Ojs.call x10862 "push"
                              [|(Ojs.string_to_js x10863)|])
                     | None -> ());
                    x10862))
        let (invoke : ?message:string -> unit -> t) =
          fun ?message:(x10864 : string option) ->
            fun () ->
              t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                      "CompileError") "apply"
                   [|Ojs.null;((let x10865 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x10864 with
                                 | Some x10866 ->
                                     ignore
                                       (Ojs.call x10865 "push"
                                          [|(Ojs.string_to_js x10866)|])
                                 | None -> ());
                                x10865))|])
      end
    let (compile : BufferSource.t -> Module.t Promise.t_1) =
      fun (x10867 : BufferSource.t) ->
        Promise.t_1_of_js Module.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "WebAssembly") "compile"
             [|(BufferSource.t_to_js x10867)|])
    let (compileStreaming :
      (Response.t, Response.t PromiseLike.t_1) union2 -> Module.t Promise.t_1)
      =
      fun (x10869 : (Response.t, Response.t PromiseLike.t_1) union2) ->
        Promise.t_1_of_js Module.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "WebAssembly")
             "compileStreaming"
             [|(union2_to_js Response.t_to_js
                  (fun (x10871 : Response.t PromiseLike.t_1) ->
                     PromiseLike.t_1_to_js Response.t_to_js x10871) x10869)|])
    let (instantiate :
      bytes:BufferSource.t ->
        ?importObject:Imports.t ->
          unit -> WebAssemblyInstantiatedSource.t Promise.t_1)
      =
      fun ~bytes:(x10874 : BufferSource.t) ->
        fun ?importObject:(x10875 : Imports.t option) ->
          fun () ->
            Promise.t_1_of_js WebAssemblyInstantiatedSource.t_of_js
              (let x10878 = Ojs.get_prop_ascii Ojs.global "WebAssembly" in
               Ojs.call (Ojs.get_prop_ascii x10878 "instantiate") "apply"
                 [|x10878;((let x10876 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x10876 "push"
                                 [|(BufferSource.t_to_js x10874)|]);
                            (match x10875 with
                             | Some x10877 ->
                                 ignore
                                   (Ojs.call x10876 "push"
                                      [|(Imports.t_to_js x10877)|])
                             | None -> ());
                            x10876))|])
    let (instantiate' :
      moduleObject:Module.t ->
        ?importObject:Imports.t -> unit -> Instance.t Promise.t_1)
      =
      fun ~moduleObject:(x10880 : Module.t) ->
        fun ?importObject:(x10881 : Imports.t option) ->
          fun () ->
            Promise.t_1_of_js Instance.t_of_js
              (let x10884 = Ojs.get_prop_ascii Ojs.global "WebAssembly" in
               Ojs.call (Ojs.get_prop_ascii x10884 "instantiate") "apply"
                 [|x10884;((let x10882 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x10882 "push"
                                 [|(Module.t_to_js x10880)|]);
                            (match x10881 with
                             | Some x10883 ->
                                 ignore
                                   (Ojs.call x10882 "push"
                                      [|(Imports.t_to_js x10883)|])
                             | None -> ());
                            x10882))|])
    let (instantiateStreaming :
      source:(Response.t, Response.t PromiseLike.t_1) union2 ->
        ?importObject:Imports.t ->
          unit -> WebAssemblyInstantiatedSource.t Promise.t_1)
      =
      fun ~source:(x10886 : (Response.t, Response.t PromiseLike.t_1) union2)
        ->
        fun ?importObject:(x10887 : Imports.t option) ->
          fun () ->
            Promise.t_1_of_js WebAssemblyInstantiatedSource.t_of_js
              (let x10893 = Ojs.get_prop_ascii Ojs.global "WebAssembly" in
               Ojs.call (Ojs.get_prop_ascii x10893 "instantiateStreaming")
                 "apply"
                 [|x10893;((let x10888 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x10888 "push"
                                 [|(union2_to_js Response.t_to_js
                                      (fun
                                         (x10891 :
                                           Response.t PromiseLike.t_1)
                                         ->
                                         PromiseLike.t_1_to_js
                                           Response.t_to_js x10891) x10886)|]);
                            (match x10887 with
                             | Some x10889 ->
                                 ignore
                                   (Ojs.call x10888 "push"
                                      [|(Imports.t_to_js x10889)|])
                             | None -> ());
                            x10888))|])
    let (validate : BufferSource.t -> bool) =
      fun (x10895 : BufferSource.t) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "WebAssembly") "validate"
             [|(BufferSource.t_to_js x10895)|])
  end
module WEBGL_multi_draw =
  struct
    type t = [ `WEBGL_multi_draw ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10897 : Ojs.t) -> t_of_js x10897
    and t_0_to_js : t_0 -> Ojs.t = fun (x10896 : t) -> t_to_js x10896
    type tags = [ `WEBGL_multi_draw ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_multi_draw ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x10900 : Ojs.t) -> intf_of_js __tags_of_js x10900
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x10898 : __tags intf) -> intf_to_js __tags_to_js x10898
    let (multiDrawArraysInstancedWEBGL :
      'tags this ->
        mode:GLenum.t ->
          firstsList:[ `U1 of Int32Array.t_0  | `U2 of GLint.t list ] ->
            firstsOffset:GLuint.t ->
              countsList:[ `U1 of Int32Array.t_0  | `U2 of GLsizei.t list ]
                ->
                countsOffset:GLuint.t ->
                  instanceCountsList:[ `U1 of Int32Array.t_0 
                                     | `U2 of GLsizei.t list ]
                    ->
                    instanceCountsOffset:GLuint.t ->
                      drawcount:GLsizei.t -> unit)
      =
      fun (x10919 : 'tags this) ->
        fun ~mode:(x10902 : GLenum.t) ->
          fun
            ~firstsList:(x10903 :
                          [ `U1 of Int32Array.t_0  | `U2 of GLint.t list ])
            ->
            fun ~firstsOffset:(x10907 : GLuint.t) ->
              fun
                ~countsList:(x10908 :
                              [ `U1 of Int32Array.t_0 
                              | `U2 of GLsizei.t list ])
                ->
                fun ~countsOffset:(x10912 : GLuint.t) ->
                  fun
                    ~instanceCountsList:(x10913 :
                                          [ `U1 of Int32Array.t_0 
                                          | `U2 of GLsizei.t list ])
                    ->
                    fun ~instanceCountsOffset:(x10917 : GLuint.t) ->
                      fun ~drawcount:(x10918 : GLsizei.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x10919)
                             "multiDrawArraysInstancedWEBGL"
                             [|(GLenum.t_to_js x10902);((match x10903 with
                                                         | `U1 x10904 ->
                                                             Int32Array.t_0_to_js
                                                               x10904
                                                         | `U2 x10905 ->
                                                             Ojs.list_to_js
                                                               GLint.t_to_js
                                                               x10905));(
                               GLuint.t_to_js x10907);((match x10908 with
                                                        | `U1 x10909 ->
                                                            Int32Array.t_0_to_js
                                                              x10909
                                                        | `U2 x10910 ->
                                                            Ojs.list_to_js
                                                              GLsizei.t_to_js
                                                              x10910));(
                               GLuint.t_to_js x10912);((match x10913 with
                                                        | `U1 x10914 ->
                                                            Int32Array.t_0_to_js
                                                              x10914
                                                        | `U2 x10915 ->
                                                            Ojs.list_to_js
                                                              GLsizei.t_to_js
                                                              x10915));(
                               GLuint.t_to_js x10917);(GLsizei.t_to_js x10918)|])
    let (multiDrawArraysWEBGL :
      'tags this ->
        mode:GLenum.t ->
          firstsList:[ `U1 of Int32Array.t_0  | `U2 of GLint.t list ] ->
            firstsOffset:GLuint.t ->
              countsList:[ `U1 of Int32Array.t_0  | `U2 of GLsizei.t list ]
                -> countsOffset:GLuint.t -> drawcount:GLsizei.t -> unit)
      =
      fun (x10933 : 'tags this) ->
        fun ~mode:(x10921 : GLenum.t) ->
          fun
            ~firstsList:(x10922 :
                          [ `U1 of Int32Array.t_0  | `U2 of GLint.t list ])
            ->
            fun ~firstsOffset:(x10926 : GLuint.t) ->
              fun
                ~countsList:(x10927 :
                              [ `U1 of Int32Array.t_0 
                              | `U2 of GLsizei.t list ])
                ->
                fun ~countsOffset:(x10931 : GLuint.t) ->
                  fun ~drawcount:(x10932 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x10933)
                         "multiDrawArraysWEBGL"
                         [|(GLenum.t_to_js x10921);((match x10922 with
                                                     | `U1 x10923 ->
                                                         Int32Array.t_0_to_js
                                                           x10923
                                                     | `U2 x10924 ->
                                                         Ojs.list_to_js
                                                           GLint.t_to_js
                                                           x10924));(
                           GLuint.t_to_js x10926);((match x10927 with
                                                    | `U1 x10928 ->
                                                        Int32Array.t_0_to_js
                                                          x10928
                                                    | `U2 x10929 ->
                                                        Ojs.list_to_js
                                                          GLsizei.t_to_js
                                                          x10929));(GLuint.t_to_js
                                                                    x10931);(
                           GLsizei.t_to_js x10932)|])
    let (multiDrawElementsInstancedWEBGL :
      'tags this ->
        mode:GLenum.t ->
          countsList:[ `U1 of Int32Array.t_0  | `U2 of GLint.t list ] ->
            countsOffset:GLuint.t ->
              type_:GLenum.t ->
                offsetsList:[ `U1 of Int32Array.t_0 
                            | `U2 of GLsizei.t list ]
                  ->
                  offsetsOffset:GLuint.t ->
                    instanceCountsList:[ `U1 of Int32Array.t_0 
                                       | `U2 of GLsizei.t list ]
                      ->
                      instanceCountsOffset:GLuint.t ->
                        drawcount:GLsizei.t -> unit)
      =
      fun (x10953 : 'tags this) ->
        fun ~mode:(x10935 : GLenum.t) ->
          fun
            ~countsList:(x10936 :
                          [ `U1 of Int32Array.t_0  | `U2 of GLint.t list ])
            ->
            fun ~countsOffset:(x10940 : GLuint.t) ->
              fun ~type_:(x10941 : GLenum.t) ->
                fun
                  ~offsetsList:(x10942 :
                                 [ `U1 of Int32Array.t_0 
                                 | `U2 of GLsizei.t list ])
                  ->
                  fun ~offsetsOffset:(x10946 : GLuint.t) ->
                    fun
                      ~instanceCountsList:(x10947 :
                                            [ `U1 of Int32Array.t_0 
                                            | `U2 of GLsizei.t list ])
                      ->
                      fun ~instanceCountsOffset:(x10951 : GLuint.t) ->
                        fun ~drawcount:(x10952 : GLsizei.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x10953)
                               "multiDrawElementsInstancedWEBGL"
                               [|(GLenum.t_to_js x10935);((match x10936 with
                                                           | `U1 x10937 ->
                                                               Int32Array.t_0_to_js
                                                                 x10937
                                                           | `U2 x10938 ->
                                                               Ojs.list_to_js
                                                                 GLint.t_to_js
                                                                 x10938));(
                                 GLuint.t_to_js x10940);(GLenum.t_to_js
                                                           x10941);((
                                 match x10942 with
                                 | `U1 x10943 -> Int32Array.t_0_to_js x10943
                                 | `U2 x10944 ->
                                     Ojs.list_to_js GLsizei.t_to_js x10944));(
                                 GLuint.t_to_js x10946);((match x10947 with
                                                          | `U1 x10948 ->
                                                              Int32Array.t_0_to_js
                                                                x10948
                                                          | `U2 x10949 ->
                                                              Ojs.list_to_js
                                                                GLsizei.t_to_js
                                                                x10949));(
                                 GLuint.t_to_js x10951);(GLsizei.t_to_js
                                                           x10952)|])
    let (multiDrawElementsWEBGL :
      'tags this ->
        mode:GLenum.t ->
          countsList:[ `U1 of Int32Array.t_0  | `U2 of GLint.t list ] ->
            countsOffset:GLuint.t ->
              type_:GLenum.t ->
                offsetsList:[ `U1 of Int32Array.t_0 
                            | `U2 of GLsizei.t list ]
                  -> offsetsOffset:GLuint.t -> drawcount:GLsizei.t -> unit)
      =
      fun (x10968 : 'tags this) ->
        fun ~mode:(x10955 : GLenum.t) ->
          fun
            ~countsList:(x10956 :
                          [ `U1 of Int32Array.t_0  | `U2 of GLint.t list ])
            ->
            fun ~countsOffset:(x10960 : GLuint.t) ->
              fun ~type_:(x10961 : GLenum.t) ->
                fun
                  ~offsetsList:(x10962 :
                                 [ `U1 of Int32Array.t_0 
                                 | `U2 of GLsizei.t list ])
                  ->
                  fun ~offsetsOffset:(x10966 : GLuint.t) ->
                    fun ~drawcount:(x10967 : GLsizei.t) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x10968)
                           "multiDrawElementsWEBGL"
                           [|(GLenum.t_to_js x10955);((match x10956 with
                                                       | `U1 x10957 ->
                                                           Int32Array.t_0_to_js
                                                             x10957
                                                       | `U2 x10958 ->
                                                           Ojs.list_to_js
                                                             GLint.t_to_js
                                                             x10958));(
                             GLuint.t_to_js x10960);(GLenum.t_to_js x10961);((
                             match x10962 with
                             | `U1 x10963 -> Int32Array.t_0_to_js x10963
                             | `U2 x10964 ->
                                 Ojs.list_to_js GLsizei.t_to_js x10964));(
                             GLuint.t_to_js x10966);(GLsizei.t_to_js x10967)|])
    let (multiDrawArraysInstancedWEBGL' :
      'tags this ->
        mode:GLenum.t ->
          firstsList:[ `U1 of Int32Array.t_0  | `U2 of GLint.t Iterable.t_1 ]
            ->
            firstsOffset:GLuint.t ->
              countsList:[ `U1 of Int32Array.t_0 
                         | `U2 of GLsizei.t Iterable.t_1 ]
                ->
                countsOffset:GLuint.t ->
                  instanceCountsList:[ `U1 of Int32Array.t_0 
                                     | `U2 of GLsizei.t Iterable.t_1 ]
                    ->
                    instanceCountsOffset:GLuint.t ->
                      drawcount:GLsizei.t -> unit)
      =
      fun (x10987 : 'tags this) ->
        fun ~mode:(x10970 : GLenum.t) ->
          fun
            ~firstsList:(x10971 :
                          [ `U1 of Int32Array.t_0 
                          | `U2 of GLint.t Iterable.t_1 ])
            ->
            fun ~firstsOffset:(x10975 : GLuint.t) ->
              fun
                ~countsList:(x10976 :
                              [ `U1 of Int32Array.t_0 
                              | `U2 of GLsizei.t Iterable.t_1 ])
                ->
                fun ~countsOffset:(x10980 : GLuint.t) ->
                  fun
                    ~instanceCountsList:(x10981 :
                                          [ `U1 of Int32Array.t_0 
                                          | `U2 of GLsizei.t Iterable.t_1 ])
                    ->
                    fun ~instanceCountsOffset:(x10985 : GLuint.t) ->
                      fun ~drawcount:(x10986 : GLsizei.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x10987)
                             "multiDrawArraysInstancedWEBGL"
                             [|(GLenum.t_to_js x10970);((match x10971 with
                                                         | `U1 x10972 ->
                                                             Int32Array.t_0_to_js
                                                               x10972
                                                         | `U2 x10973 ->
                                                             Iterable.t_1_to_js
                                                               GLint.t_to_js
                                                               x10973));(
                               GLuint.t_to_js x10975);((match x10976 with
                                                        | `U1 x10977 ->
                                                            Int32Array.t_0_to_js
                                                              x10977
                                                        | `U2 x10978 ->
                                                            Iterable.t_1_to_js
                                                              GLsizei.t_to_js
                                                              x10978));(
                               GLuint.t_to_js x10980);((match x10981 with
                                                        | `U1 x10982 ->
                                                            Int32Array.t_0_to_js
                                                              x10982
                                                        | `U2 x10983 ->
                                                            Iterable.t_1_to_js
                                                              GLsizei.t_to_js
                                                              x10983));(
                               GLuint.t_to_js x10985);(GLsizei.t_to_js x10986)|])
    let (multiDrawArraysWEBGL' :
      'tags this ->
        mode:GLenum.t ->
          firstsList:[ `U1 of Int32Array.t_0  | `U2 of GLint.t Iterable.t_1 ]
            ->
            firstsOffset:GLuint.t ->
              countsList:[ `U1 of Int32Array.t_0 
                         | `U2 of GLsizei.t Iterable.t_1 ]
                -> countsOffset:GLuint.t -> drawcount:GLsizei.t -> unit)
      =
      fun (x11001 : 'tags this) ->
        fun ~mode:(x10989 : GLenum.t) ->
          fun
            ~firstsList:(x10990 :
                          [ `U1 of Int32Array.t_0 
                          | `U2 of GLint.t Iterable.t_1 ])
            ->
            fun ~firstsOffset:(x10994 : GLuint.t) ->
              fun
                ~countsList:(x10995 :
                              [ `U1 of Int32Array.t_0 
                              | `U2 of GLsizei.t Iterable.t_1 ])
                ->
                fun ~countsOffset:(x10999 : GLuint.t) ->
                  fun ~drawcount:(x11000 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x11001)
                         "multiDrawArraysWEBGL"
                         [|(GLenum.t_to_js x10989);((match x10990 with
                                                     | `U1 x10991 ->
                                                         Int32Array.t_0_to_js
                                                           x10991
                                                     | `U2 x10992 ->
                                                         Iterable.t_1_to_js
                                                           GLint.t_to_js
                                                           x10992));(
                           GLuint.t_to_js x10994);((match x10995 with
                                                    | `U1 x10996 ->
                                                        Int32Array.t_0_to_js
                                                          x10996
                                                    | `U2 x10997 ->
                                                        Iterable.t_1_to_js
                                                          GLsizei.t_to_js
                                                          x10997));(GLuint.t_to_js
                                                                    x10999);(
                           GLsizei.t_to_js x11000)|])
    let (multiDrawElementsInstancedWEBGL' :
      'tags this ->
        mode:GLenum.t ->
          countsList:[ `U1 of Int32Array.t_0  | `U2 of GLint.t Iterable.t_1 ]
            ->
            countsOffset:GLuint.t ->
              type_:GLenum.t ->
                offsetsList:[ `U1 of Int32Array.t_0 
                            | `U2 of GLsizei.t Iterable.t_1 ]
                  ->
                  offsetsOffset:GLuint.t ->
                    instanceCountsList:[ `U1 of Int32Array.t_0 
                                       | `U2 of GLsizei.t Iterable.t_1 ]
                      ->
                      instanceCountsOffset:GLuint.t ->
                        drawcount:GLsizei.t -> unit)
      =
      fun (x11021 : 'tags this) ->
        fun ~mode:(x11003 : GLenum.t) ->
          fun
            ~countsList:(x11004 :
                          [ `U1 of Int32Array.t_0 
                          | `U2 of GLint.t Iterable.t_1 ])
            ->
            fun ~countsOffset:(x11008 : GLuint.t) ->
              fun ~type_:(x11009 : GLenum.t) ->
                fun
                  ~offsetsList:(x11010 :
                                 [ `U1 of Int32Array.t_0 
                                 | `U2 of GLsizei.t Iterable.t_1 ])
                  ->
                  fun ~offsetsOffset:(x11014 : GLuint.t) ->
                    fun
                      ~instanceCountsList:(x11015 :
                                            [ `U1 of Int32Array.t_0 
                                            | `U2 of GLsizei.t Iterable.t_1 ])
                      ->
                      fun ~instanceCountsOffset:(x11019 : GLuint.t) ->
                        fun ~drawcount:(x11020 : GLsizei.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x11021)
                               "multiDrawElementsInstancedWEBGL"
                               [|(GLenum.t_to_js x11003);((match x11004 with
                                                           | `U1 x11005 ->
                                                               Int32Array.t_0_to_js
                                                                 x11005
                                                           | `U2 x11006 ->
                                                               Iterable.t_1_to_js
                                                                 GLint.t_to_js
                                                                 x11006));(
                                 GLuint.t_to_js x11008);(GLenum.t_to_js
                                                           x11009);((
                                 match x11010 with
                                 | `U1 x11011 -> Int32Array.t_0_to_js x11011
                                 | `U2 x11012 ->
                                     Iterable.t_1_to_js GLsizei.t_to_js
                                       x11012));(GLuint.t_to_js x11014);((
                                 match x11015 with
                                 | `U1 x11016 -> Int32Array.t_0_to_js x11016
                                 | `U2 x11017 ->
                                     Iterable.t_1_to_js GLsizei.t_to_js
                                       x11017));(GLuint.t_to_js x11019);(
                                 GLsizei.t_to_js x11020)|])
    let (multiDrawElementsWEBGL' :
      'tags this ->
        mode:GLenum.t ->
          countsList:[ `U1 of Int32Array.t_0  | `U2 of GLint.t Iterable.t_1 ]
            ->
            countsOffset:GLuint.t ->
              type_:GLenum.t ->
                offsetsList:[ `U1 of Int32Array.t_0 
                            | `U2 of GLsizei.t Iterable.t_1 ]
                  -> offsetsOffset:GLuint.t -> drawcount:GLsizei.t -> unit)
      =
      fun (x11036 : 'tags this) ->
        fun ~mode:(x11023 : GLenum.t) ->
          fun
            ~countsList:(x11024 :
                          [ `U1 of Int32Array.t_0 
                          | `U2 of GLint.t Iterable.t_1 ])
            ->
            fun ~countsOffset:(x11028 : GLuint.t) ->
              fun ~type_:(x11029 : GLenum.t) ->
                fun
                  ~offsetsList:(x11030 :
                                 [ `U1 of Int32Array.t_0 
                                 | `U2 of GLsizei.t Iterable.t_1 ])
                  ->
                  fun ~offsetsOffset:(x11034 : GLuint.t) ->
                    fun ~drawcount:(x11035 : GLsizei.t) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x11036)
                           "multiDrawElementsWEBGL"
                           [|(GLenum.t_to_js x11023);((match x11024 with
                                                       | `U1 x11025 ->
                                                           Int32Array.t_0_to_js
                                                             x11025
                                                       | `U2 x11026 ->
                                                           Iterable.t_1_to_js
                                                             GLint.t_to_js
                                                             x11026));(
                             GLuint.t_to_js x11028);(GLenum.t_to_js x11029);((
                             match x11030 with
                             | `U1 x11031 -> Int32Array.t_0_to_js x11031
                             | `U2 x11032 ->
                                 Iterable.t_1_to_js GLsizei.t_to_js x11032));(
                             GLuint.t_to_js x11034);(GLsizei.t_to_js x11035)|])
    let cast_from = Obj.magic
  end
module TransformStreamDefaultController =
  struct
    type 'O t = [ `TransformStreamDefaultController of 'O ] intf
    let rec t_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t =
      fun _O -> Obj.magic
    and t_to_js : 'O . ('O -> Ojs.t) -> 'O t -> Ojs.t = fun _O -> Obj.magic
    type 'O t_1 = 'O t
    let rec t_1_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t_1 =
      fun (type __O) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x11040 : Ojs.t) -> t_of_js __O_of_js x11040
    and t_1_to_js : 'O . ('O -> Ojs.t) -> 'O t_1 -> Ojs.t =
      fun (type __O) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x11038 : __O t) -> t_to_js __O_to_js x11038
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x11044 : Ojs.t) -> t_of_js any_of_js x11044
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x11042 : any t) -> t_to_js any_to_js x11042
    type 'O tags = [ `TransformStreamDefaultController of 'O ]
    type 'O tags_1 = 'O tags
    type tags_0 = any tags
    type ('tags, 'O) this =
      'tags intf constraint 'tags =
                  [> `TransformStreamDefaultController of 'O ]
    let rec this_of_js :
      'tags 'O .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'O) this
      =
      fun (type __tags) ->
        fun (type __O) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__O_of_js : Ojs.t -> __O) ->
              fun (x11048 : Ojs.t) -> intf_of_js __tags_of_js x11048
    and this_to_js :
      'tags 'O .
        ('tags -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'O) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __O) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__O_to_js : __O -> Ojs.t) ->
              fun (x11046 : __tags intf) -> intf_to_js __tags_to_js x11046
    let (get_desiredSize : ('tags, 'O) this -> float option) =
      fun (x11050 : ('tags, 'O) this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x11050)
             "desiredSize")
    let (enqueue : ('tags, 'O) this -> ?chunk:'O -> unit -> unit) =
      fun (x11057 : ('tags, 'O) this) ->
        fun ?chunk:(x11054 : 'O option) ->
          fun () ->
            ignore
              (let x11060 = this_to_js Obj.magic Obj.magic x11057 in
               Ojs.call (Ojs.get_prop_ascii x11060 "enqueue") "apply"
                 [|x11060;((let x11055 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x11054 with
                             | Some x11056 ->
                                 ignore
                                   (Ojs.call x11055 "push"
                                      [|(Obj.magic x11056)|])
                             | None -> ());
                            x11055))|])
    let (error : ('tags, 'O) this -> ?reason:any -> unit -> unit) =
      fun (x11064 : ('tags, 'O) this) ->
        fun ?reason:(x11061 : any option) ->
          fun () ->
            ignore
              (let x11067 = this_to_js Obj.magic Obj.magic x11064 in
               Ojs.call (Ojs.get_prop_ascii x11067 "error") "apply"
                 [|x11067;((let x11062 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x11061 with
                             | Some x11063 ->
                                 ignore
                                   (Ojs.call x11062 "push"
                                      [|(any_to_js x11063)|])
                             | None -> ());
                            x11062))|])
    let (terminate : ('tags, 'O) this -> unit) =
      fun (x11068 : ('tags, 'O) this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic Obj.magic x11068) "terminate" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global
                "TransformStreamDefaultController") "prototype")
    let (create : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global
                "TransformStreamDefaultController") [||])
  end
module TransformerTransformCallback =
  struct
    type ('I, 'O) t = [ `TransformerTransformCallback of ('I * 'O) ] intf
    let rec t_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t =
      fun _I -> fun _O -> Obj.magic
    and t_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t -> Ojs.t =
      fun _I -> fun _O -> Obj.magic
    type ('I, 'O) t_2 = ('I, 'O) t
    let rec t_2_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t_2 =
      fun (type __I) ->
        fun (type __O) ->
          fun (__I_of_js : Ojs.t -> __I) ->
            fun (__O_of_js : Ojs.t -> __O) ->
              fun (x11074 : Ojs.t) -> t_of_js __I_of_js __O_of_js x11074
    and t_2_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t_2 -> Ojs.t =
      fun (type __I) ->
        fun (type __O) ->
          fun (__I_to_js : __I -> Ojs.t) ->
            fun (__O_to_js : __O -> Ojs.t) ->
              fun (x11071 : (__I, __O) t) ->
                t_to_js __I_to_js __O_to_js x11071
    type ('I, 'O) tags = [ `TransformerTransformCallback of ('I * 'O) ]
    type ('I, 'O) tags_2 = ('I, 'O) tags
    type ('tags, 'I, 'O) this =
      'tags intf constraint 'tags =
                  [> `TransformerTransformCallback of ('I * 'O) ]
    let rec this_of_js :
      'tags 'I 'O .
        (Ojs.t -> 'tags) ->
          (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'I, 'O) this
      =
      fun (type __tags) ->
        fun (type __I) ->
          fun (type __O) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (__I_of_js : Ojs.t -> __I) ->
                fun (__O_of_js : Ojs.t -> __O) ->
                  fun (x11079 : Ojs.t) -> intf_of_js __tags_of_js x11079
    and this_to_js :
      'tags 'I 'O .
        ('tags -> Ojs.t) ->
          ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'I, 'O) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __I) ->
          fun (type __O) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (__I_to_js : __I -> Ojs.t) ->
                fun (__O_to_js : __O -> Ojs.t) ->
                  fun (x11077 : __tags intf) ->
                    intf_to_js __tags_to_js x11077
    let (apply :
      ('tags, 'I, 'O) this ->
        chunk:'I ->
          controller:'O TransformStreamDefaultController.t ->
            (unit, unit PromiseLike.t_1) union2)
      =
      fun (x11084 : ('tags, 'I, 'O) this) ->
        fun ~chunk:(x11081 : 'I) ->
          fun ~controller:(x11082 : 'O TransformStreamDefaultController.t) ->
            union2_of_js Ojs.unit_of_js
              (fun (x11089 : Ojs.t) ->
                 PromiseLike.t_1_of_js Ojs.unit_of_js x11089)
              (Ojs.apply (this_to_js Obj.magic Obj.magic Obj.magic x11084)
                 [|(Obj.magic x11081);(TransformStreamDefaultController.t_to_js
                                         Obj.magic x11082)|])
    let cast_from = Obj.magic
  end
module TransformerStartCallback =
  struct
    type 'O t = [ `TransformerStartCallback of 'O ] intf
    let rec t_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t =
      fun _O -> Obj.magic
    and t_to_js : 'O . ('O -> Ojs.t) -> 'O t -> Ojs.t = fun _O -> Obj.magic
    type 'O t_1 = 'O t
    let rec t_1_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t_1 =
      fun (type __O) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x11093 : Ojs.t) -> t_of_js __O_of_js x11093
    and t_1_to_js : 'O . ('O -> Ojs.t) -> 'O t_1 -> Ojs.t =
      fun (type __O) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x11091 : __O t) -> t_to_js __O_to_js x11091
    type 'O tags = [ `TransformerStartCallback of 'O ]
    type 'O tags_1 = 'O tags
    type ('tags, 'O) this =
      'tags intf constraint 'tags = [> `TransformerStartCallback of 'O ]
    let rec this_of_js :
      'tags 'O .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'O) this
      =
      fun (type __tags) ->
        fun (type __O) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__O_of_js : Ojs.t -> __O) ->
              fun (x11097 : Ojs.t) -> intf_of_js __tags_of_js x11097
    and this_to_js :
      'tags 'O .
        ('tags -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'O) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __O) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__O_to_js : __O -> Ojs.t) ->
              fun (x11095 : __tags intf) -> intf_to_js __tags_to_js x11095
    let (apply :
      ('tags, 'O) this ->
        controller:'O TransformStreamDefaultController.t -> any)
      =
      fun (x11101 : ('tags, 'O) this) ->
        fun ~controller:(x11099 : 'O TransformStreamDefaultController.t) ->
          any_of_js
            (Ojs.apply (this_to_js Obj.magic Obj.magic x11101)
               [|(TransformStreamDefaultController.t_to_js Obj.magic x11099)|])
    let cast_from = Obj.magic
  end
module TransformerFlushCallback =
  struct
    type 'O t = [ `TransformerFlushCallback of 'O ] intf
    let rec t_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t =
      fun _O -> Obj.magic
    and t_to_js : 'O . ('O -> Ojs.t) -> 'O t -> Ojs.t = fun _O -> Obj.magic
    type 'O t_1 = 'O t
    let rec t_1_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t_1 =
      fun (type __O) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x11106 : Ojs.t) -> t_of_js __O_of_js x11106
    and t_1_to_js : 'O . ('O -> Ojs.t) -> 'O t_1 -> Ojs.t =
      fun (type __O) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x11104 : __O t) -> t_to_js __O_to_js x11104
    type 'O tags = [ `TransformerFlushCallback of 'O ]
    type 'O tags_1 = 'O tags
    type ('tags, 'O) this =
      'tags intf constraint 'tags = [> `TransformerFlushCallback of 'O ]
    let rec this_of_js :
      'tags 'O .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'O) this
      =
      fun (type __tags) ->
        fun (type __O) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__O_of_js : Ojs.t -> __O) ->
              fun (x11110 : Ojs.t) -> intf_of_js __tags_of_js x11110
    and this_to_js :
      'tags 'O .
        ('tags -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'O) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __O) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__O_to_js : __O -> Ojs.t) ->
              fun (x11108 : __tags intf) -> intf_to_js __tags_to_js x11108
    let (apply :
      ('tags, 'O) this ->
        controller:'O TransformStreamDefaultController.t ->
          (unit, unit PromiseLike.t_1) union2)
      =
      fun (x11114 : ('tags, 'O) this) ->
        fun ~controller:(x11112 : 'O TransformStreamDefaultController.t) ->
          union2_of_js Ojs.unit_of_js
            (fun (x11118 : Ojs.t) ->
               PromiseLike.t_1_of_js Ojs.unit_of_js x11118)
            (Ojs.apply (this_to_js Obj.magic Obj.magic x11114)
               [|(TransformStreamDefaultController.t_to_js Obj.magic x11112)|])
    let cast_from = Obj.magic
  end
module Transformer =
  struct
    type ('I, 'O) t = [ `Transformer of ('I * 'O) ] intf
    let rec t_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t =
      fun _I -> fun _O -> Obj.magic
    and t_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t -> Ojs.t =
      fun _I -> fun _O -> Obj.magic
    type ('I, 'O) t_2 = ('I, 'O) t
    let rec t_2_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t_2 =
      fun (type __I) ->
        fun (type __O) ->
          fun (__I_of_js : Ojs.t -> __I) ->
            fun (__O_of_js : Ojs.t -> __O) ->
              fun (x11123 : Ojs.t) -> t_of_js __I_of_js __O_of_js x11123
    and t_2_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t_2 -> Ojs.t =
      fun (type __I) ->
        fun (type __O) ->
          fun (__I_to_js : __I -> Ojs.t) ->
            fun (__O_to_js : __O -> Ojs.t) ->
              fun (x11120 : (__I, __O) t) ->
                t_to_js __I_to_js __O_to_js x11120
    type 'I t_1 = ('I, any) t
    let rec t_1_of_js : 'I . (Ojs.t -> 'I) -> Ojs.t -> 'I t_1 =
      fun (type __I) ->
        fun (__I_of_js : Ojs.t -> __I) ->
          fun (x11129 : Ojs.t) -> t_of_js __I_of_js any_of_js x11129
    and t_1_to_js : 'I . ('I -> Ojs.t) -> 'I t_1 -> Ojs.t =
      fun (type __I) ->
        fun (__I_to_js : __I -> Ojs.t) ->
          fun (x11126 : (__I, any) t) -> t_to_js __I_to_js any_to_js x11126
    type t_0 = (any, any) t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x11135 : Ojs.t) -> t_of_js any_of_js any_of_js x11135
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x11132 : (any, any) t) -> t_to_js any_to_js any_to_js x11132
    type ('I, 'O) tags = [ `Transformer of ('I * 'O) ]
    type ('I, 'O) tags_2 = ('I, 'O) tags
    type 'I tags_1 = ('I, any) tags
    type tags_0 = (any, any) tags
    type ('tags, 'I, 'O) this =
      'tags intf constraint 'tags = [> `Transformer of ('I * 'O) ]
    let rec this_of_js :
      'tags 'I 'O .
        (Ojs.t -> 'tags) ->
          (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'I, 'O) this
      =
      fun (type __tags) ->
        fun (type __I) ->
          fun (type __O) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (__I_of_js : Ojs.t -> __I) ->
                fun (__O_of_js : Ojs.t -> __O) ->
                  fun (x11140 : Ojs.t) -> intf_of_js __tags_of_js x11140
    and this_to_js :
      'tags 'I 'O .
        ('tags -> Ojs.t) ->
          ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'I, 'O) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __I) ->
          fun (type __O) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (__I_to_js : __I -> Ojs.t) ->
                fun (__O_to_js : __O -> Ojs.t) ->
                  fun (x11138 : __tags intf) ->
                    intf_to_js __tags_to_js x11138
    let (get_flush :
      ('tags, 'I, 'O) this -> 'O TransformerFlushCallback.t option) =
      fun (x11142 : ('tags, 'I, 'O) this) ->
        Ojs.option_of_js
          (fun (x11146 : Ojs.t) ->
             TransformerFlushCallback.t_of_js Obj.magic x11146)
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x11142) "flush")
    let (set_flush :
      ('tags, 'I, 'O) this -> 'O TransformerFlushCallback.t -> unit) =
      fun (x11148 : ('tags, 'I, 'O) this) ->
        fun (x11149 : 'O TransformerFlushCallback.t) ->
          Ojs.set_prop_ascii
            (this_to_js Obj.magic Obj.magic Obj.magic x11148) "flush"
            (TransformerFlushCallback.t_to_js Obj.magic x11149)
    let (get_readableType : ('tags, 'I, 'O) this -> undefined) =
      fun (x11154 : ('tags, 'I, 'O) this) ->
        undefined_of_js
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x11154) "readableType")
    let (set_readableType : ('tags, 'I, 'O) this -> undefined -> unit) =
      fun (x11158 : ('tags, 'I, 'O) this) ->
        fun (x11159 : undefined) ->
          Ojs.set_prop_ascii
            (this_to_js Obj.magic Obj.magic Obj.magic x11158) "readableType"
            (undefined_to_js x11159)
    let (get_start :
      ('tags, 'I, 'O) this -> 'O TransformerStartCallback.t option) =
      fun (x11163 : ('tags, 'I, 'O) this) ->
        Ojs.option_of_js
          (fun (x11167 : Ojs.t) ->
             TransformerStartCallback.t_of_js Obj.magic x11167)
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x11163) "start")
    let (set_start :
      ('tags, 'I, 'O) this -> 'O TransformerStartCallback.t -> unit) =
      fun (x11169 : ('tags, 'I, 'O) this) ->
        fun (x11170 : 'O TransformerStartCallback.t) ->
          Ojs.set_prop_ascii
            (this_to_js Obj.magic Obj.magic Obj.magic x11169) "start"
            (TransformerStartCallback.t_to_js Obj.magic x11170)
    let (get_transform :
      ('tags, 'I, 'O) this -> ('I, 'O) TransformerTransformCallback.t option)
      =
      fun (x11175 : ('tags, 'I, 'O) this) ->
        Ojs.option_of_js
          (fun (x11179 : Ojs.t) ->
             TransformerTransformCallback.t_of_js Obj.magic Obj.magic x11179)
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x11175) "transform")
    let (set_transform :
      ('tags, 'I, 'O) this -> ('I, 'O) TransformerTransformCallback.t -> unit)
      =
      fun (x11182 : ('tags, 'I, 'O) this) ->
        fun (x11183 : ('I, 'O) TransformerTransformCallback.t) ->
          Ojs.set_prop_ascii
            (this_to_js Obj.magic Obj.magic Obj.magic x11182) "transform"
            (TransformerTransformCallback.t_to_js Obj.magic Obj.magic x11183)
    let (get_writableType : ('tags, 'I, 'O) this -> undefined) =
      fun (x11189 : ('tags, 'I, 'O) this) ->
        undefined_of_js
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x11189) "writableType")
    let (set_writableType : ('tags, 'I, 'O) this -> undefined -> unit) =
      fun (x11193 : ('tags, 'I, 'O) this) ->
        fun (x11194 : undefined) ->
          Ojs.set_prop_ascii
            (this_to_js Obj.magic Obj.magic Obj.magic x11193) "writableType"
            (undefined_to_js x11194)
    let (create :
      ?flush:'O TransformerFlushCallback.t ->
        ?readableType:never ->
          ?start:'O TransformerStartCallback.t ->
            ?transform:('I, 'O) TransformerTransformCallback.t ->
              ?writableType:never -> unit -> ('I, 'O) t)
      =
      fun ?flush:(x11198 : 'O TransformerFlushCallback.t option) ->
        fun ?readableType:(x11199 : never option) ->
          fun ?start:(x11200 : 'O TransformerStartCallback.t option) ->
            fun
              ?transform:(x11201 :
                           ('I, 'O) TransformerTransformCallback.t option)
              ->
              fun ?writableType:(x11202 : never option) ->
                fun () ->
                  let x11203 = Ojs.empty_obj () in
                  (match x11198 with
                   | Some x11213 ->
                       Ojs.set_prop_ascii x11203 "flush"
                         (TransformerFlushCallback.t_to_js Obj.magic x11213)
                   | None -> ());
                  (match x11199 with
                   | Some x11212 ->
                       Ojs.set_prop_ascii x11203 "readableType"
                         (never_to_js x11212)
                   | None -> ());
                  (match x11200 with
                   | Some x11210 ->
                       Ojs.set_prop_ascii x11203 "start"
                         (TransformerStartCallback.t_to_js Obj.magic x11210)
                   | None -> ());
                  (match x11201 with
                   | Some x11207 ->
                       Ojs.set_prop_ascii x11203 "transform"
                         (TransformerTransformCallback.t_to_js Obj.magic
                            Obj.magic x11207)
                   | None -> ());
                  (match x11202 with
                   | Some x11206 ->
                       Ojs.set_prop_ascii x11203 "writableType"
                         (never_to_js x11206)
                   | None -> ());
                  t_of_js Obj.magic Obj.magic x11203
    let cast_from = Obj.magic
  end
module TransformStream =
  struct
    type ('I, 'O) t = [ `TransformStream of ('I * 'O) ] intf
    let rec t_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t =
      fun _I -> fun _O -> Obj.magic
    and t_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t -> Ojs.t =
      fun _I -> fun _O -> Obj.magic
    type ('I, 'O) t_2 = ('I, 'O) t
    let rec t_2_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t_2 =
      fun (type __I) ->
        fun (type __O) ->
          fun (__I_of_js : Ojs.t -> __I) ->
            fun (__O_of_js : Ojs.t -> __O) ->
              fun (x11218 : Ojs.t) -> t_of_js __I_of_js __O_of_js x11218
    and t_2_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t_2 -> Ojs.t =
      fun (type __I) ->
        fun (type __O) ->
          fun (__I_to_js : __I -> Ojs.t) ->
            fun (__O_to_js : __O -> Ojs.t) ->
              fun (x11215 : (__I, __O) t) ->
                t_to_js __I_to_js __O_to_js x11215
    type 'I t_1 = ('I, any) t
    let rec t_1_of_js : 'I . (Ojs.t -> 'I) -> Ojs.t -> 'I t_1 =
      fun (type __I) ->
        fun (__I_of_js : Ojs.t -> __I) ->
          fun (x11224 : Ojs.t) -> t_of_js __I_of_js any_of_js x11224
    and t_1_to_js : 'I . ('I -> Ojs.t) -> 'I t_1 -> Ojs.t =
      fun (type __I) ->
        fun (__I_to_js : __I -> Ojs.t) ->
          fun (x11221 : (__I, any) t) -> t_to_js __I_to_js any_to_js x11221
    type t_0 = (any, any) t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x11230 : Ojs.t) -> t_of_js any_of_js any_of_js x11230
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x11227 : (any, any) t) -> t_to_js any_to_js any_to_js x11227
    type ('I, 'O) tags = [ `TransformStream of ('I * 'O) ]
    type ('I, 'O) tags_2 = ('I, 'O) tags
    type 'I tags_1 = ('I, any) tags
    type tags_0 = (any, any) tags
    type ('tags, 'I, 'O) this =
      'tags intf constraint 'tags = [> `TransformStream of ('I * 'O) ]
    let rec this_of_js :
      'tags 'I 'O .
        (Ojs.t -> 'tags) ->
          (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'I, 'O) this
      =
      fun (type __tags) ->
        fun (type __I) ->
          fun (type __O) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (__I_of_js : Ojs.t -> __I) ->
                fun (__O_of_js : Ojs.t -> __O) ->
                  fun (x11235 : Ojs.t) -> intf_of_js __tags_of_js x11235
    and this_to_js :
      'tags 'I 'O .
        ('tags -> Ojs.t) ->
          ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'I, 'O) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __I) ->
          fun (type __O) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (__I_to_js : __I -> Ojs.t) ->
                fun (__O_to_js : __O -> Ojs.t) ->
                  fun (x11233 : __tags intf) ->
                    intf_to_js __tags_to_js x11233
    let (get_readable : ('tags, 'I, 'O) this -> 'O ReadableStream.t) =
      fun (x11237 : ('tags, 'I, 'O) this) ->
        ReadableStream.t_of_js Obj.magic
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x11237) "readable")
    let (get_writable : ('tags, 'I, 'O) this -> 'I WritableStream.t) =
      fun (x11242 : ('tags, 'I, 'O) this) ->
        WritableStream.t_of_js Obj.magic
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x11242) "writable")
    let (create :
      readable:'O ReadableStream.t ->
        writable:'I WritableStream.t -> unit -> ('I, 'O) t)
      =
      fun ~readable:(x11247 : 'O ReadableStream.t) ->
        fun ~writable:(x11248 : 'I WritableStream.t) ->
          fun () ->
            let x11249 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x11249 "readable"
              (ReadableStream.t_to_js Obj.magic x11247);
            Ojs.set_prop_ascii x11249 "writable"
              (WritableStream.t_to_js Obj.magic x11248);
            t_of_js Obj.magic Obj.magic x11249
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "TransformStream") "prototype")
    let (create' :
      ?transformer:('I, 'O) Transformer.t ->
        ?writableStrategy:'I QueuingStrategy.t ->
          ?readableStrategy:'O QueuingStrategy.t -> unit -> ('I, 'O) t)
      =
      fun ?transformer:(x11254 : ('I, 'O) Transformer.t option) ->
        fun ?writableStrategy:(x11255 : 'I QueuingStrategy.t option) ->
          fun ?readableStrategy:(x11256 : 'O QueuingStrategy.t option) ->
            fun () ->
              t_of_js Obj.magic Obj.magic
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii Ojs.global "TransformStream")
                   (let x11257 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x11254 with
                     | Some x11262 ->
                         ignore
                           (Ojs.call x11257 "push"
                              [|(Transformer.t_to_js Obj.magic Obj.magic
                                   x11262)|])
                     | None -> ());
                    (match x11255 with
                     | Some x11260 ->
                         ignore
                           (Ojs.call x11257 "push"
                              [|(QueuingStrategy.t_to_js Obj.magic x11260)|])
                     | None -> ());
                    (match x11256 with
                     | Some x11258 ->
                         ignore
                           (Ojs.call x11257 "push"
                              [|(QueuingStrategy.t_to_js Obj.magic x11258)|])
                     | None -> ());
                    x11257))
  end
module TextMetrics =
  struct
    type t = [ `TextMetrics ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11268 : Ojs.t) -> t_of_js x11268
    and t_0_to_js : t_0 -> Ojs.t = fun (x11267 : t) -> t_to_js x11267
    type tags = [ `TextMetrics ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextMetrics ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11271 : Ojs.t) -> intf_of_js __tags_of_js x11271
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11269 : __tags intf) -> intf_to_js __tags_to_js x11269
    let (get_actualBoundingBoxAscent : 'tags this -> float) =
      fun (x11273 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11273)
             "actualBoundingBoxAscent")
    let (get_actualBoundingBoxDescent : 'tags this -> float) =
      fun (x11275 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11275)
             "actualBoundingBoxDescent")
    let (get_actualBoundingBoxLeft : 'tags this -> float) =
      fun (x11277 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11277)
             "actualBoundingBoxLeft")
    let (get_actualBoundingBoxRight : 'tags this -> float) =
      fun (x11279 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11279)
             "actualBoundingBoxRight")
    let (get_fontBoundingBoxAscent : 'tags this -> float) =
      fun (x11281 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11281)
             "fontBoundingBoxAscent")
    let (get_fontBoundingBoxDescent : 'tags this -> float) =
      fun (x11283 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11283)
             "fontBoundingBoxDescent")
    let (get_width : 'tags this -> float) =
      fun (x11285 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11285) "width")
    let (create :
      actualBoundingBoxAscent:float ->
        actualBoundingBoxDescent:float ->
          actualBoundingBoxLeft:float ->
            actualBoundingBoxRight:float ->
              fontBoundingBoxAscent:float ->
                fontBoundingBoxDescent:float -> width:float -> unit -> t)
      =
      fun ~actualBoundingBoxAscent:(x11287 : float) ->
        fun ~actualBoundingBoxDescent:(x11288 : float) ->
          fun ~actualBoundingBoxLeft:(x11289 : float) ->
            fun ~actualBoundingBoxRight:(x11290 : float) ->
              fun ~fontBoundingBoxAscent:(x11291 : float) ->
                fun ~fontBoundingBoxDescent:(x11292 : float) ->
                  fun ~width:(x11293 : float) ->
                    fun () ->
                      let x11294 = Ojs.empty_obj () in
                      Ojs.set_prop_ascii x11294 "actualBoundingBoxAscent"
                        (Ojs.float_to_js x11287);
                      Ojs.set_prop_ascii x11294 "actualBoundingBoxDescent"
                        (Ojs.float_to_js x11288);
                      Ojs.set_prop_ascii x11294 "actualBoundingBoxLeft"
                        (Ojs.float_to_js x11289);
                      Ojs.set_prop_ascii x11294 "actualBoundingBoxRight"
                        (Ojs.float_to_js x11290);
                      Ojs.set_prop_ascii x11294 "fontBoundingBoxAscent"
                        (Ojs.float_to_js x11291);
                      Ojs.set_prop_ascii x11294 "fontBoundingBoxDescent"
                        (Ojs.float_to_js x11292);
                      Ojs.set_prop_ascii x11294 "width"
                        (Ojs.float_to_js x11293);
                      t_of_js x11294
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "TextMetrics")
             "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "TextMetrics") [||])
  end
module TextEncoderCommon =
  struct
    type t = [ `TextEncoderCommon ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11296 : Ojs.t) -> t_of_js x11296
    and t_0_to_js : t_0 -> Ojs.t = fun (x11295 : t) -> t_to_js x11295
    type tags = [ `TextEncoderCommon ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextEncoderCommon ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11299 : Ojs.t) -> intf_of_js __tags_of_js x11299
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11297 : __tags intf) -> intf_to_js __tags_to_js x11297
    let (get_encoding : 'tags this -> string) =
      fun (x11301 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11301) "encoding")
    let (create : encoding:string -> unit -> t) =
      fun ~encoding:(x11303 : string) ->
        fun () ->
          let x11304 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x11304 "encoding" (Ojs.string_to_js x11303);
          t_of_js x11304
    let cast_from = Obj.magic
  end
module GenericTransformStream =
  struct
    type t = [ `GenericTransformStream ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11306 : Ojs.t) -> t_of_js x11306
    and t_0_to_js : t_0 -> Ojs.t = fun (x11305 : t) -> t_to_js x11305
    type tags = [ `GenericTransformStream ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `GenericTransformStream ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11309 : Ojs.t) -> intf_of_js __tags_of_js x11309
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11307 : __tags intf) -> intf_to_js __tags_to_js x11307
    let (get_readable : 'tags this -> ReadableStream.t_0) =
      fun (x11311 : 'tags this) ->
        ReadableStream.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11311) "readable")
    let (get_writable : 'tags this -> WritableStream.t_0) =
      fun (x11313 : 'tags this) ->
        WritableStream.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11313) "writable")
    let (create :
      readable:ReadableStream.t_0 -> writable:WritableStream.t_0 -> unit -> t)
      =
      fun ~readable:(x11315 : ReadableStream.t_0) ->
        fun ~writable:(x11316 : WritableStream.t_0) ->
          fun () ->
            let x11317 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x11317 "readable"
              (ReadableStream.t_0_to_js x11315);
            Ojs.set_prop_ascii x11317 "writable"
              (WritableStream.t_0_to_js x11316);
            t_of_js x11317
    let cast_from = Obj.magic
  end
module TextEncoderStream =
  struct
    type t =
      [ `GenericTransformStream  | `TextEncoderCommon  | `TextEncoderStream ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11319 : Ojs.t) -> t_of_js x11319
    and t_0_to_js : t_0 -> Ojs.t = fun (x11318 : t) -> t_to_js x11318
    type tags =
      [ `GenericTransformStream  | `TextEncoderCommon  | `TextEncoderStream ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextEncoderStream ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11322 : Ojs.t) -> intf_of_js __tags_of_js x11322
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11320 : __tags intf) -> intf_to_js __tags_to_js x11320
    let (get_readable : 'tags this -> Uint8Array.t_0 ReadableStream.t) =
      fun (x11324 : 'tags this) ->
        ReadableStream.t_of_js Uint8Array.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11324) "readable")
    let (get_writable : 'tags this -> string WritableStream.t) =
      fun (x11327 : 'tags this) ->
        WritableStream.t_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11327) "writable")
    let (create :
      readable:Uint8Array.t_0 ReadableStream.t ->
        writable:string WritableStream.t -> unit -> t)
      =
      fun ~readable:(x11330 : Uint8Array.t_0 ReadableStream.t) ->
        fun ~writable:(x11331 : string WritableStream.t) ->
          fun () ->
            let x11332 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x11332 "readable"
              (ReadableStream.t_to_js Uint8Array.t_0_to_js x11330);
            Ojs.set_prop_ascii x11332 "writable"
              (WritableStream.t_to_js Ojs.string_to_js x11331);
            t_of_js x11332
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "TextEncoderStream") "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "TextEncoderStream")
             [||])
  end
module TextEncoderEncodeIntoResult =
  struct
    type t = [ `TextEncoderEncodeIntoResult ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11336 : Ojs.t) -> t_of_js x11336
    and t_0_to_js : t_0 -> Ojs.t = fun (x11335 : t) -> t_to_js x11335
    type tags = [ `TextEncoderEncodeIntoResult ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `TextEncoderEncodeIntoResult ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11339 : Ojs.t) -> intf_of_js __tags_of_js x11339
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11337 : __tags intf) -> intf_to_js __tags_to_js x11337
    let (get_read : 'tags this -> float option) =
      fun (x11341 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11341) "read")
    let (set_read : 'tags this -> float -> unit) =
      fun (x11344 : 'tags this) ->
        fun (x11345 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11344) "read"
            (Ojs.float_to_js x11345)
    let (get_written : 'tags this -> float option) =
      fun (x11347 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11347) "written")
    let (set_written : 'tags this -> float -> unit) =
      fun (x11350 : 'tags this) ->
        fun (x11351 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11350) "written"
            (Ojs.float_to_js x11351)
    let (create : ?read:float -> ?written:float -> unit -> t) =
      fun ?read:(x11353 : float option) ->
        fun ?written:(x11354 : float option) ->
          fun () ->
            let x11355 = Ojs.empty_obj () in
            (match x11353 with
             | Some x11357 ->
                 Ojs.set_prop_ascii x11355 "read" (Ojs.float_to_js x11357)
             | None -> ());
            (match x11354 with
             | Some x11356 ->
                 Ojs.set_prop_ascii x11355 "written" (Ojs.float_to_js x11356)
             | None -> ());
            t_of_js x11355
    let cast_from = Obj.magic
  end
module TextEncoder =
  struct
    type t = [ `TextEncoder  | `TextEncoderCommon ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11359 : Ojs.t) -> t_of_js x11359
    and t_0_to_js : t_0 -> Ojs.t = fun (x11358 : t) -> t_to_js x11358
    type tags = [ `TextEncoder  | `TextEncoderCommon ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextEncoder ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11362 : Ojs.t) -> intf_of_js __tags_of_js x11362
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11360 : __tags intf) -> intf_to_js __tags_to_js x11360
    let (encode : 'tags this -> ?input:string -> unit -> Uint8Array.t_0) =
      fun (x11367 : 'tags this) ->
        fun ?input:(x11364 : string option) ->
          fun () ->
            Uint8Array.t_0_of_js
              (let x11369 = this_to_js Obj.magic x11367 in
               Ojs.call (Ojs.get_prop_ascii x11369 "encode") "apply"
                 [|x11369;((let x11365 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x11364 with
                             | Some x11366 ->
                                 ignore
                                   (Ojs.call x11365 "push"
                                      [|(Ojs.string_to_js x11366)|])
                             | None -> ());
                            x11365))|])
    let (encodeInto :
      'tags this ->
        source:string ->
          destination:Uint8Array.t_0 -> TextEncoderEncodeIntoResult.t)
      =
      fun (x11372 : 'tags this) ->
        fun ~source:(x11370 : string) ->
          fun ~destination:(x11371 : Uint8Array.t_0) ->
            TextEncoderEncodeIntoResult.t_of_js
              (Ojs.call (this_to_js Obj.magic x11372) "encodeInto"
                 [|(Ojs.string_to_js x11370);(Uint8Array.t_0_to_js x11371)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "TextEncoder")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "TextEncoder") [||])
  end
module TextDecoderOptions =
  struct
    type t = [ `TextDecoderOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11375 : Ojs.t) -> t_of_js x11375
    and t_0_to_js : t_0 -> Ojs.t = fun (x11374 : t) -> t_to_js x11374
    type tags = [ `TextDecoderOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecoderOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11378 : Ojs.t) -> intf_of_js __tags_of_js x11378
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11376 : __tags intf) -> intf_to_js __tags_to_js x11376
    let (get_fatal : 'tags this -> bool option) =
      fun (x11380 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11380) "fatal")
    let (set_fatal : 'tags this -> bool -> unit) =
      fun (x11383 : 'tags this) ->
        fun (x11384 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11383) "fatal"
            (Ojs.bool_to_js x11384)
    let (get_ignoreBOM : 'tags this -> bool option) =
      fun (x11386 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11386) "ignoreBOM")
    let (set_ignoreBOM : 'tags this -> bool -> unit) =
      fun (x11389 : 'tags this) ->
        fun (x11390 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11389) "ignoreBOM"
            (Ojs.bool_to_js x11390)
    let (create : ?fatal:bool -> ?ignoreBOM:bool -> unit -> t) =
      fun ?fatal:(x11392 : bool option) ->
        fun ?ignoreBOM:(x11393 : bool option) ->
          fun () ->
            let x11394 = Ojs.empty_obj () in
            (match x11392 with
             | Some x11396 ->
                 Ojs.set_prop_ascii x11394 "fatal" (Ojs.bool_to_js x11396)
             | None -> ());
            (match x11393 with
             | Some x11395 ->
                 Ojs.set_prop_ascii x11394 "ignoreBOM"
                   (Ojs.bool_to_js x11395)
             | None -> ());
            t_of_js x11394
    let cast_from = Obj.magic
  end
module TextDecoderCommon =
  struct
    type t = [ `TextDecoderCommon ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11398 : Ojs.t) -> t_of_js x11398
    and t_0_to_js : t_0 -> Ojs.t = fun (x11397 : t) -> t_to_js x11397
    type tags = [ `TextDecoderCommon ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecoderCommon ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11401 : Ojs.t) -> intf_of_js __tags_of_js x11401
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11399 : __tags intf) -> intf_to_js __tags_to_js x11399
    let (get_encoding : 'tags this -> string) =
      fun (x11403 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11403) "encoding")
    let (get_fatal : 'tags this -> bool) =
      fun (x11405 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11405) "fatal")
    let (get_ignoreBOM : 'tags this -> bool) =
      fun (x11407 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11407) "ignoreBOM")
    let (create :
      encoding:string -> fatal:bool -> ignoreBOM:bool -> unit -> t) =
      fun ~encoding:(x11409 : string) ->
        fun ~fatal:(x11410 : bool) ->
          fun ~ignoreBOM:(x11411 : bool) ->
            fun () ->
              let x11412 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x11412 "encoding" (Ojs.string_to_js x11409);
              Ojs.set_prop_ascii x11412 "fatal" (Ojs.bool_to_js x11410);
              Ojs.set_prop_ascii x11412 "ignoreBOM" (Ojs.bool_to_js x11411);
              t_of_js x11412
    let cast_from = Obj.magic
  end
module TextDecoderStream =
  struct
    type t =
      [ `GenericTransformStream  | `TextDecoderCommon  | `TextDecoderStream ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11414 : Ojs.t) -> t_of_js x11414
    and t_0_to_js : t_0 -> Ojs.t = fun (x11413 : t) -> t_to_js x11413
    type tags =
      [ `GenericTransformStream  | `TextDecoderCommon  | `TextDecoderStream ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecoderStream ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11417 : Ojs.t) -> intf_of_js __tags_of_js x11417
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11415 : __tags intf) -> intf_to_js __tags_to_js x11415
    let (get_readable : 'tags this -> string ReadableStream.t) =
      fun (x11419 : 'tags this) ->
        ReadableStream.t_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11419) "readable")
    let (get_writable : 'tags this -> BufferSource.t WritableStream.t) =
      fun (x11422 : 'tags this) ->
        WritableStream.t_of_js BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11422) "writable")
    let (create :
      readable:string ReadableStream.t ->
        writable:BufferSource.t WritableStream.t -> unit -> t)
      =
      fun ~readable:(x11425 : string ReadableStream.t) ->
        fun ~writable:(x11426 : BufferSource.t WritableStream.t) ->
          fun () ->
            let x11427 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x11427 "readable"
              (ReadableStream.t_to_js Ojs.string_to_js x11425);
            Ojs.set_prop_ascii x11427 "writable"
              (WritableStream.t_to_js BufferSource.t_to_js x11426);
            t_of_js x11427
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "TextDecoderStream") "prototype")
    let (create' :
      ?label:string -> ?options:TextDecoderOptions.t -> unit -> t) =
      fun ?label:(x11430 : string option) ->
        fun ?options:(x11431 : TextDecoderOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "TextDecoderStream")
                 (let x11432 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x11430 with
                   | Some x11434 ->
                       ignore
                         (Ojs.call x11432 "push"
                            [|(Ojs.string_to_js x11434)|])
                   | None -> ());
                  (match x11431 with
                   | Some x11433 ->
                       ignore
                         (Ojs.call x11432 "push"
                            [|(TextDecoderOptions.t_to_js x11433)|])
                   | None -> ());
                  x11432))
  end
module TextDecodeOptions =
  struct
    type t = [ `TextDecodeOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11436 : Ojs.t) -> t_of_js x11436
    and t_0_to_js : t_0 -> Ojs.t = fun (x11435 : t) -> t_to_js x11435
    type tags = [ `TextDecodeOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecodeOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11439 : Ojs.t) -> intf_of_js __tags_of_js x11439
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11437 : __tags intf) -> intf_to_js __tags_to_js x11437
    let (get_stream : 'tags this -> bool option) =
      fun (x11441 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11441) "stream")
    let (set_stream : 'tags this -> bool -> unit) =
      fun (x11444 : 'tags this) ->
        fun (x11445 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11444) "stream"
            (Ojs.bool_to_js x11445)
    let (create : ?stream:bool -> unit -> t) =
      fun ?stream:(x11447 : bool option) ->
        fun () ->
          let x11448 = Ojs.empty_obj () in
          (match x11447 with
           | Some x11449 ->
               Ojs.set_prop_ascii x11448 "stream" (Ojs.bool_to_js x11449)
           | None -> ());
          t_of_js x11448
    let cast_from = Obj.magic
  end
module TextDecoder =
  struct
    type t = [ `TextDecoder  | `TextDecoderCommon ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11451 : Ojs.t) -> t_of_js x11451
    and t_0_to_js : t_0 -> Ojs.t = fun (x11450 : t) -> t_to_js x11450
    type tags = [ `TextDecoder  | `TextDecoderCommon ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecoder ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11454 : Ojs.t) -> intf_of_js __tags_of_js x11454
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11452 : __tags intf) -> intf_to_js __tags_to_js x11452
    let (decode :
      'tags this ->
        ?input:BufferSource.t ->
          ?options:TextDecodeOptions.t -> unit -> string)
      =
      fun (x11461 : 'tags this) ->
        fun ?input:(x11456 : BufferSource.t option) ->
          fun ?options:(x11457 : TextDecodeOptions.t option) ->
            fun () ->
              Ojs.string_of_js
                (let x11463 = this_to_js Obj.magic x11461 in
                 Ojs.call (Ojs.get_prop_ascii x11463 "decode") "apply"
                   [|x11463;((let x11458 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x11456 with
                               | Some x11460 ->
                                   ignore
                                     (Ojs.call x11458 "push"
                                        [|(BufferSource.t_to_js x11460)|])
                               | None -> ());
                              (match x11457 with
                               | Some x11459 ->
                                   ignore
                                     (Ojs.call x11458 "push"
                                        [|(TextDecodeOptions.t_to_js x11459)|])
                               | None -> ());
                              x11458))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "TextDecoder")
             "prototype")
    let (create :
      ?label:string -> ?options:TextDecoderOptions.t -> unit -> t) =
      fun ?label:(x11464 : string option) ->
        fun ?options:(x11465 : TextDecoderOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "TextDecoder")
                 (let x11466 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x11464 with
                   | Some x11468 ->
                       ignore
                         (Ojs.call x11466 "push"
                            [|(Ojs.string_to_js x11468)|])
                   | None -> ());
                  (match x11465 with
                   | Some x11467 ->
                       ignore
                         (Ojs.call x11466 "push"
                            [|(TextDecoderOptions.t_to_js x11467)|])
                   | None -> ());
                  x11466))
  end
module PromiseRejectionEventInit =
  struct
    type t = [ `EventInit  | `PromiseRejectionEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11470 : Ojs.t) -> t_of_js x11470
    and t_0_to_js : t_0 -> Ojs.t = fun (x11469 : t) -> t_to_js x11469
    type tags = [ `EventInit  | `PromiseRejectionEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PromiseRejectionEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11473 : Ojs.t) -> intf_of_js __tags_of_js x11473
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11471 : __tags intf) -> intf_to_js __tags_to_js x11471
    let (get_promise : 'tags this -> any Promise.t_1) =
      fun (x11475 : 'tags this) ->
        Promise.t_1_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11475) "promise")
    let (set_promise : 'tags this -> any Promise.t_1 -> unit) =
      fun (x11478 : 'tags this) ->
        fun (x11479 : any Promise.t_1) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11478) "promise"
            (Promise.t_1_to_js any_to_js x11479)
    let (get_reason : 'tags this -> any option) =
      fun (x11482 : 'tags this) ->
        Ojs.option_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11482) "reason")
    let (set_reason : 'tags this -> any -> unit) =
      fun (x11485 : 'tags this) ->
        fun (x11486 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11485) "reason"
            (any_to_js x11486)
    let (create : promise:any Promise.t_1 -> ?reason:any -> unit -> t) =
      fun ~promise:(x11488 : any Promise.t_1) ->
        fun ?reason:(x11489 : any option) ->
          fun () ->
            let x11490 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x11490 "promise"
              (Promise.t_1_to_js any_to_js x11488);
            (match x11489 with
             | Some x11491 ->
                 Ojs.set_prop_ascii x11490 "reason" (any_to_js x11491)
             | None -> ());
            t_of_js x11490
    let cast_from = Obj.magic
  end
module PromiseRejectionEvent =
  struct
    type t = [ `Event  | `PromiseRejectionEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11494 : Ojs.t) -> t_of_js x11494
    and t_0_to_js : t_0 -> Ojs.t = fun (x11493 : t) -> t_to_js x11493
    type tags = [ `Event  | `PromiseRejectionEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PromiseRejectionEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11497 : Ojs.t) -> intf_of_js __tags_of_js x11497
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11495 : __tags intf) -> intf_to_js __tags_to_js x11495
    let (get_promise : 'tags this -> any Promise.t_1) =
      fun (x11499 : 'tags this) ->
        Promise.t_1_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11499) "promise")
    let (get_reason : 'tags this -> any) =
      fun (x11502 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x11502) "reason")
    let (create : promise:any Promise.t_1 -> reason:any -> unit -> t) =
      fun ~promise:(x11504 : any Promise.t_1) ->
        fun ~reason:(x11505 : any) ->
          fun () ->
            let x11506 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x11506 "promise"
              (Promise.t_1_to_js any_to_js x11504);
            Ojs.set_prop_ascii x11506 "reason" (any_to_js x11505);
            t_of_js x11506
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PromiseRejectionEvent")
             "prototype")
    let (create' :
      type_:string -> eventInitDict:PromiseRejectionEventInit.t -> t) =
      fun ~type_:(x11508 : string) ->
        fun ~eventInitDict:(x11509 : PromiseRejectionEventInit.t) ->
          t_of_js
            (Ojs.new_obj
               (Ojs.get_prop_ascii Ojs.global "PromiseRejectionEvent")
               [|(Ojs.string_to_js x11508);(PromiseRejectionEventInit.t_to_js
                                              x11509)|])
  end
module WorkerGlobalScopeEventMap =
  struct
    type t = [ `WorkerGlobalScopeEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11511 : Ojs.t) -> t_of_js x11511
    and t_0_to_js : t_0 -> Ojs.t = fun (x11510 : t) -> t_to_js x11510
    type tags = [ `WorkerGlobalScopeEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WorkerGlobalScopeEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11514 : Ojs.t) -> intf_of_js __tags_of_js x11514
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11512 : __tags intf) -> intf_to_js __tags_to_js x11512
    let (get_error : 'tags this -> ErrorEvent.t) =
      fun (x11516 : 'tags this) ->
        ErrorEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11516) "error")
    let (set_error : 'tags this -> ErrorEvent.t -> unit) =
      fun (x11518 : 'tags this) ->
        fun (x11519 : ErrorEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11518) "error"
            (ErrorEvent.t_to_js x11519)
    let (get_languagechange : 'tags this -> Event.t) =
      fun (x11521 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11521) "languagechange")
    let (set_languagechange : 'tags this -> Event.t -> unit) =
      fun (x11523 : 'tags this) ->
        fun (x11524 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11523) "languagechange"
            (Event.t_to_js x11524)
    let (get_offline : 'tags this -> Event.t) =
      fun (x11526 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11526) "offline")
    let (set_offline : 'tags this -> Event.t -> unit) =
      fun (x11528 : 'tags this) ->
        fun (x11529 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11528) "offline"
            (Event.t_to_js x11529)
    let (get_online : 'tags this -> Event.t) =
      fun (x11531 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11531) "online")
    let (set_online : 'tags this -> Event.t -> unit) =
      fun (x11533 : 'tags this) ->
        fun (x11534 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11533) "online"
            (Event.t_to_js x11534)
    let (get_rejectionhandled : 'tags this -> PromiseRejectionEvent.t) =
      fun (x11536 : 'tags this) ->
        PromiseRejectionEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11536)
             "rejectionhandled")
    let (set_rejectionhandled :
      'tags this -> PromiseRejectionEvent.t -> unit) =
      fun (x11538 : 'tags this) ->
        fun (x11539 : PromiseRejectionEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11538) "rejectionhandled"
            (PromiseRejectionEvent.t_to_js x11539)
    let (get_unhandledrejection : 'tags this -> PromiseRejectionEvent.t) =
      fun (x11541 : 'tags this) ->
        PromiseRejectionEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11541)
             "unhandledrejection")
    let (set_unhandledrejection :
      'tags this -> PromiseRejectionEvent.t -> unit) =
      fun (x11543 : 'tags this) ->
        fun (x11544 : PromiseRejectionEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11543)
            "unhandledrejection" (PromiseRejectionEvent.t_to_js x11544)
    let (create :
      error:ErrorEvent.t ->
        languagechange:Event.t ->
          offline:Event.t ->
            online:Event.t ->
              rejectionhandled:PromiseRejectionEvent.t ->
                unhandledrejection:PromiseRejectionEvent.t -> unit -> t)
      =
      fun ~error:(x11546 : ErrorEvent.t) ->
        fun ~languagechange:(x11547 : Event.t) ->
          fun ~offline:(x11548 : Event.t) ->
            fun ~online:(x11549 : Event.t) ->
              fun ~rejectionhandled:(x11550 : PromiseRejectionEvent.t) ->
                fun ~unhandledrejection:(x11551 : PromiseRejectionEvent.t) ->
                  fun () ->
                    let x11552 = Ojs.empty_obj () in
                    Ojs.set_prop_ascii x11552 "error"
                      (ErrorEvent.t_to_js x11546);
                    Ojs.set_prop_ascii x11552 "languagechange"
                      (Event.t_to_js x11547);
                    Ojs.set_prop_ascii x11552 "offline"
                      (Event.t_to_js x11548);
                    Ojs.set_prop_ascii x11552 "online" (Event.t_to_js x11549);
                    Ojs.set_prop_ascii x11552 "rejectionhandled"
                      (PromiseRejectionEvent.t_to_js x11550);
                    Ojs.set_prop_ascii x11552 "unhandledrejection"
                      (PromiseRejectionEvent.t_to_js x11551);
                    t_of_js x11552
    let cast_from = Obj.magic
  end
module SharedWorkerGlobalScopeEventMap =
  struct
    type t =
      [ `SharedWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11554 : Ojs.t) -> t_of_js x11554
    and t_0_to_js : t_0 -> Ojs.t = fun (x11553 : t) -> t_to_js x11553
    type tags =
      [ `SharedWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `SharedWorkerGlobalScopeEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11557 : Ojs.t) -> intf_of_js __tags_of_js x11557
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11555 : __tags intf) -> intf_to_js __tags_to_js x11555
    let (get_connect : 'tags this -> MessageEvent.t_0) =
      fun (x11559 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11559) "connect")
    let (set_connect : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x11561 : 'tags this) ->
        fun (x11562 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11561) "connect"
            (MessageEvent.t_0_to_js x11562)
    let (create : connect:MessageEvent.t_0 -> unit -> t) =
      fun ~connect:(x11564 : MessageEvent.t_0) ->
        fun () ->
          let x11565 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x11565 "connect" (MessageEvent.t_0_to_js x11564);
          t_of_js x11565
    let cast_from = Obj.magic
  end
module WorkerNavigator =
  struct
    type t =
      [ `NavigatorConcurrentHardware  | `NavigatorID  | `NavigatorLanguage 
      | `NavigatorNetworkInformation  | `NavigatorOnLine 
      | `NavigatorStorage  | `WorkerNavigator ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11567 : Ojs.t) -> t_of_js x11567
    and t_0_to_js : t_0 -> Ojs.t = fun (x11566 : t) -> t_to_js x11566
    type tags =
      [ `NavigatorConcurrentHardware  | `NavigatorID  | `NavigatorLanguage 
      | `NavigatorNetworkInformation  | `NavigatorOnLine 
      | `NavigatorStorage  | `WorkerNavigator ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerNavigator ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11570 : Ojs.t) -> intf_of_js __tags_of_js x11570
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11568 : __tags intf) -> intf_to_js __tags_to_js x11568
    let (get_mediaCapabilities : 'tags this -> MediaCapabilities.t) =
      fun (x11572 : 'tags this) ->
        MediaCapabilities.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11572)
             "mediaCapabilities")
    let (create : mediaCapabilities:MediaCapabilities.t -> unit -> t) =
      fun ~mediaCapabilities:(x11574 : MediaCapabilities.t) ->
        fun () ->
          let x11575 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x11575 "mediaCapabilities"
            (MediaCapabilities.t_to_js x11574);
          t_of_js x11575
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WorkerNavigator") "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WorkerNavigator") [||])
  end
module WorkerLocation =
  struct
    type t = [ `WorkerLocation ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11577 : Ojs.t) -> t_of_js x11577
    and t_0_to_js : t_0 -> Ojs.t = fun (x11576 : t) -> t_to_js x11576
    type tags = [ `WorkerLocation ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerLocation ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11580 : Ojs.t) -> intf_of_js __tags_of_js x11580
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11578 : __tags intf) -> intf_to_js __tags_to_js x11578
    let (get_hash : 'tags this -> string) =
      fun (x11582 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11582) "hash")
    let (get_host : 'tags this -> string) =
      fun (x11584 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11584) "host")
    let (get_hostname : 'tags this -> string) =
      fun (x11586 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11586) "hostname")
    let (get_href : 'tags this -> string) =
      fun (x11588 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11588) "href")
    let (toString : 'tags this -> string) =
      fun (x11590 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x11590) "toString" [||])
    let (get_origin : 'tags this -> string) =
      fun (x11592 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11592) "origin")
    let (get_pathname : 'tags this -> string) =
      fun (x11594 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11594) "pathname")
    let (get_port : 'tags this -> string) =
      fun (x11596 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11596) "port")
    let (get_protocol : 'tags this -> string) =
      fun (x11598 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11598) "protocol")
    let (get_search : 'tags this -> string) =
      fun (x11600 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11600) "search")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WorkerLocation") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WorkerLocation") [||])
  end
module VoidFunction =
  struct
    type t = [ `VoidFunction ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11603 : Ojs.t) -> t_of_js x11603
    and t_0_to_js : t_0 -> Ojs.t = fun (x11602 : t) -> t_to_js x11602
    type tags = [ `VoidFunction ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `VoidFunction ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11606 : Ojs.t) -> intf_of_js __tags_of_js x11606
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11604 : __tags intf) -> intf_to_js __tags_to_js x11604
    let (apply : 'tags this -> unit) =
      fun (x11608 : 'tags this) ->
        ignore (Ojs.apply (this_to_js Obj.magic x11608) [||])
    let cast_from = Obj.magic
  end
module TimerHandler =
  struct
    type t = [ `String of string  | `Other of untyped_function ] Primitive.t
    let rec t_of_js : Ojs.t -> t =
      fun (x11614 : Ojs.t) ->
        Primitive.t_of_js
          (fun (x11615 : Ojs.t) ->
             let x11616 = x11615 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x11616 "dummy") with
             | "String" -> `String (Ojs.string_of_js x11616)
             | "Other" -> `Other (untyped_function_of_js x11616)
             | _ -> assert false) x11614
    and t_to_js : t -> Ojs.t =
      fun
        (x11610 :
          [ `String of string  | `Other of untyped_function ] Primitive.t)
        ->
        Primitive.t_to_js
          (fun (x11611 : [ `String of string  | `Other of untyped_function ])
             ->
             match x11611 with
             | `String x11612 -> Ojs.string_to_js x11612
             | `Other x11613 -> untyped_function_to_js x11613) x11610
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11618 : Ojs.t) -> t_of_js x11618
    and t_0_to_js : t_0 -> Ojs.t = fun (x11617 : t) -> t_to_js x11617
  end
module CanvasImageSource =
  struct
    type t = (ImageBitmap.t, OffscreenCanvas.t) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x11622 : Ojs.t) ->
        union2_of_js ImageBitmap.t_of_js OffscreenCanvas.t_of_js x11622
    and t_to_js : t -> Ojs.t =
      fun (x11619 : (ImageBitmap.t, OffscreenCanvas.t) union2) ->
        union2_to_js ImageBitmap.t_to_js OffscreenCanvas.t_to_js x11619
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11626 : Ojs.t) -> t_of_js x11626
    and t_0_to_js : t_0 -> Ojs.t = fun (x11625 : t) -> t_to_js x11625
  end
module ImageBitmapSource =
  struct
    type t = (Blob.t, CanvasImageSource.t, ImageData.t) union3
    let rec t_of_js : Ojs.t -> t =
      fun (x11631 : Ojs.t) ->
        union3_of_js Blob.t_of_js CanvasImageSource.t_of_js ImageData.t_of_js
          x11631
    and t_to_js : t -> Ojs.t =
      fun (x11627 : (Blob.t, CanvasImageSource.t, ImageData.t) union3) ->
        union3_to_js Blob.t_to_js CanvasImageSource.t_to_js ImageData.t_to_js
          x11627
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11636 : Ojs.t) -> t_of_js x11636
    and t_0_to_js : t_0 -> Ojs.t = fun (x11635 : t) -> t_to_js x11635
  end
module ResizeQuality =
  struct
    type t =
      [ `L_s108_low  | `L_s114_medium  | `L_s151_pixelated  | `L_s86_high ]
    let rec t_of_js : Ojs.t -> t =
      fun (x11638 : Ojs.t) ->
        let x11639 = x11638 in
        match Ojs.string_of_js x11639 with
        | "low" -> `L_s108_low
        | "medium" -> `L_s114_medium
        | "pixelated" -> `L_s151_pixelated
        | "high" -> `L_s86_high
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x11637 :
          [ `L_s108_low  | `L_s114_medium  | `L_s151_pixelated 
          | `L_s86_high ])
        ->
        match x11637 with
        | `L_s108_low -> Ojs.string_to_js "low"
        | `L_s114_medium -> Ojs.string_to_js "medium"
        | `L_s151_pixelated -> Ojs.string_to_js "pixelated"
        | `L_s86_high -> Ojs.string_to_js "high"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11641 : Ojs.t) -> t_of_js x11641
    and t_0_to_js : t_0 -> Ojs.t = fun (x11640 : t) -> t_to_js x11640
  end
module PremultiplyAlpha =
  struct
    type t = [ `L_s130_none  | `L_s154_premultiply  | `L_s57_default ]
    let rec t_of_js : Ojs.t -> t =
      fun (x11643 : Ojs.t) ->
        let x11644 = x11643 in
        match Ojs.string_of_js x11644 with
        | "none" -> `L_s130_none
        | "premultiply" -> `L_s154_premultiply
        | "default" -> `L_s57_default
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x11642 : [ `L_s130_none  | `L_s154_premultiply  | `L_s57_default ])
        ->
        match x11642 with
        | `L_s130_none -> Ojs.string_to_js "none"
        | `L_s154_premultiply -> Ojs.string_to_js "premultiply"
        | `L_s57_default -> Ojs.string_to_js "default"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11646 : Ojs.t) -> t_of_js x11646
    and t_0_to_js : t_0 -> Ojs.t = fun (x11645 : t) -> t_to_js x11645
  end
module ImageOrientation =
  struct
    type t = [ `L_s130_none  | `L_s76_flipY ]
    let rec t_of_js : Ojs.t -> t =
      fun (x11648 : Ojs.t) ->
        let x11649 = x11648 in
        match Ojs.string_of_js x11649 with
        | "none" -> `L_s130_none
        | "flipY" -> `L_s76_flipY
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x11647 : [ `L_s130_none  | `L_s76_flipY ]) ->
        match x11647 with
        | `L_s130_none -> Ojs.string_to_js "none"
        | `L_s76_flipY -> Ojs.string_to_js "flipY"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11651 : Ojs.t) -> t_of_js x11651
    and t_0_to_js : t_0 -> Ojs.t = fun (x11650 : t) -> t_to_js x11650
  end
module ColorSpaceConversion =
  struct
    type t = [ `L_s130_none  | `L_s57_default ]
    let rec t_of_js : Ojs.t -> t =
      fun (x11653 : Ojs.t) ->
        let x11654 = x11653 in
        match Ojs.string_of_js x11654 with
        | "none" -> `L_s130_none
        | "default" -> `L_s57_default
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x11652 : [ `L_s130_none  | `L_s57_default ]) ->
        match x11652 with
        | `L_s130_none -> Ojs.string_to_js "none"
        | `L_s57_default -> Ojs.string_to_js "default"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11656 : Ojs.t) -> t_of_js x11656
    and t_0_to_js : t_0 -> Ojs.t = fun (x11655 : t) -> t_to_js x11655
  end
module ImageBitmapOptions =
  struct
    type t = [ `ImageBitmapOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11658 : Ojs.t) -> t_of_js x11658
    and t_0_to_js : t_0 -> Ojs.t = fun (x11657 : t) -> t_to_js x11657
    type tags = [ `ImageBitmapOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImageBitmapOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11661 : Ojs.t) -> intf_of_js __tags_of_js x11661
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11659 : __tags intf) -> intf_to_js __tags_to_js x11659
    let (get_colorSpaceConversion :
      'tags this -> ColorSpaceConversion.t option) =
      fun (x11663 : 'tags this) ->
        Ojs.option_of_js ColorSpaceConversion.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11663)
             "colorSpaceConversion")
    let (set_colorSpaceConversion :
      'tags this -> ColorSpaceConversion.t -> unit) =
      fun (x11666 : 'tags this) ->
        fun (x11667 : ColorSpaceConversion.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11666)
            "colorSpaceConversion" (ColorSpaceConversion.t_to_js x11667)
    let (get_imageOrientation : 'tags this -> ImageOrientation.t option) =
      fun (x11669 : 'tags this) ->
        Ojs.option_of_js ImageOrientation.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11669)
             "imageOrientation")
    let (set_imageOrientation : 'tags this -> ImageOrientation.t -> unit) =
      fun (x11672 : 'tags this) ->
        fun (x11673 : ImageOrientation.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11672) "imageOrientation"
            (ImageOrientation.t_to_js x11673)
    let (get_premultiplyAlpha : 'tags this -> PremultiplyAlpha.t option) =
      fun (x11675 : 'tags this) ->
        Ojs.option_of_js PremultiplyAlpha.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11675)
             "premultiplyAlpha")
    let (set_premultiplyAlpha : 'tags this -> PremultiplyAlpha.t -> unit) =
      fun (x11678 : 'tags this) ->
        fun (x11679 : PremultiplyAlpha.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11678) "premultiplyAlpha"
            (PremultiplyAlpha.t_to_js x11679)
    let (get_resizeHeight : 'tags this -> float option) =
      fun (x11681 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11681) "resizeHeight")
    let (set_resizeHeight : 'tags this -> float -> unit) =
      fun (x11684 : 'tags this) ->
        fun (x11685 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11684) "resizeHeight"
            (Ojs.float_to_js x11685)
    let (get_resizeQuality : 'tags this -> ResizeQuality.t option) =
      fun (x11687 : 'tags this) ->
        Ojs.option_of_js ResizeQuality.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11687) "resizeQuality")
    let (set_resizeQuality : 'tags this -> ResizeQuality.t -> unit) =
      fun (x11690 : 'tags this) ->
        fun (x11691 : ResizeQuality.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11690) "resizeQuality"
            (ResizeQuality.t_to_js x11691)
    let (get_resizeWidth : 'tags this -> float option) =
      fun (x11693 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11693) "resizeWidth")
    let (set_resizeWidth : 'tags this -> float -> unit) =
      fun (x11696 : 'tags this) ->
        fun (x11697 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11696) "resizeWidth"
            (Ojs.float_to_js x11697)
    let (create :
      ?colorSpaceConversion:ColorSpaceConversion.t ->
        ?imageOrientation:ImageOrientation.t ->
          ?premultiplyAlpha:PremultiplyAlpha.t ->
            ?resizeHeight:float ->
              ?resizeQuality:ResizeQuality.t ->
                ?resizeWidth:float -> unit -> t)
      =
      fun ?colorSpaceConversion:(x11699 : ColorSpaceConversion.t option) ->
        fun ?imageOrientation:(x11700 : ImageOrientation.t option) ->
          fun ?premultiplyAlpha:(x11701 : PremultiplyAlpha.t option) ->
            fun ?resizeHeight:(x11702 : float option) ->
              fun ?resizeQuality:(x11703 : ResizeQuality.t option) ->
                fun ?resizeWidth:(x11704 : float option) ->
                  fun () ->
                    let x11705 = Ojs.empty_obj () in
                    (match x11699 with
                     | Some x11711 ->
                         Ojs.set_prop_ascii x11705 "colorSpaceConversion"
                           (ColorSpaceConversion.t_to_js x11711)
                     | None -> ());
                    (match x11700 with
                     | Some x11710 ->
                         Ojs.set_prop_ascii x11705 "imageOrientation"
                           (ImageOrientation.t_to_js x11710)
                     | None -> ());
                    (match x11701 with
                     | Some x11709 ->
                         Ojs.set_prop_ascii x11705 "premultiplyAlpha"
                           (PremultiplyAlpha.t_to_js x11709)
                     | None -> ());
                    (match x11702 with
                     | Some x11708 ->
                         Ojs.set_prop_ascii x11705 "resizeHeight"
                           (Ojs.float_to_js x11708)
                     | None -> ());
                    (match x11703 with
                     | Some x11707 ->
                         Ojs.set_prop_ascii x11705 "resizeQuality"
                           (ResizeQuality.t_to_js x11707)
                     | None -> ());
                    (match x11704 with
                     | Some x11706 ->
                         Ojs.set_prop_ascii x11705 "resizeWidth"
                           (Ojs.float_to_js x11706)
                     | None -> ());
                    t_of_js x11705
    let cast_from = Obj.magic
  end
module IDBFactory =
  struct
    type t = [ `IDBFactory ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11713 : Ojs.t) -> t_of_js x11713
    and t_0_to_js : t_0 -> Ojs.t = fun (x11712 : t) -> t_to_js x11712
    type tags = [ `IDBFactory ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBFactory ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11716 : Ojs.t) -> intf_of_js __tags_of_js x11716
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11714 : __tags intf) -> intf_to_js __tags_to_js x11714
    let (cmp : 'tags this -> first:any -> second:any -> float) =
      fun (x11720 : 'tags this) ->
        fun ~first:(x11718 : any) ->
          fun ~second:(x11719 : any) ->
            Ojs.float_of_js
              (Ojs.call (this_to_js Obj.magic x11720) "cmp"
                 [|(any_to_js x11718);(any_to_js x11719)|])
    let (databases : 'tags this -> IDBDatabaseInfo.t list Promise.t_1) =
      fun (x11722 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x11724 : Ojs.t) ->
             Ojs.list_of_js IDBDatabaseInfo.t_of_js x11724)
          (Ojs.call (this_to_js Obj.magic x11722) "databases" [||])
    let (deleteDatabase : 'tags this -> name:string -> IDBOpenDBRequest.t) =
      fun (x11727 : 'tags this) ->
        fun ~name:(x11726 : string) ->
          IDBOpenDBRequest.t_of_js
            (Ojs.call (this_to_js Obj.magic x11727) "deleteDatabase"
               [|(Ojs.string_to_js x11726)|])
    let (open_ :
      'tags this ->
        name:string -> ?version:float -> unit -> IDBOpenDBRequest.t)
      =
      fun (x11733 : 'tags this) ->
        fun ~name:(x11729 : string) ->
          fun ?version:(x11730 : float option) ->
            fun () ->
              IDBOpenDBRequest.t_of_js
                (let x11735 = this_to_js Obj.magic x11733 in
                 Ojs.call (Ojs.get_prop_ascii x11735 "open") "apply"
                   [|x11735;((let x11731 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x11731 "push"
                                   [|(Ojs.string_to_js x11729)|]);
                              (match x11730 with
                               | Some x11732 ->
                                   ignore
                                     (Ojs.call x11731 "push"
                                        [|(Ojs.float_to_js x11732)|])
                               | None -> ());
                              x11731))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "IDBFactory")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBFactory") [||])
  end
module Crypto =
  struct
    type t = [ `Crypto ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11737 : Ojs.t) -> t_of_js x11737
    and t_0_to_js : t_0 -> Ojs.t = fun (x11736 : t) -> t_to_js x11736
    type tags = [ `Crypto ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Crypto ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11740 : Ojs.t) -> intf_of_js __tags_of_js x11740
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11738 : __tags intf) -> intf_to_js __tags_to_js x11738
    let (get_subtle : 'tags this -> SubtleCrypto.t) =
      fun (x11742 : 'tags this) ->
        SubtleCrypto.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11742) "subtle")
    let (getRandomValues : 'tags this -> array:'T -> 'T) =
      fun (x11745 : 'tags this) ->
        fun ~array:(x11744 : 'T) ->
          Obj.magic
            (Ojs.call (this_to_js Obj.magic x11745) "getRandomValues"
               [|(Obj.magic x11744)|])
    let (randomUUID : 'tags this -> string) =
      fun (x11747 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x11747) "randomUUID" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Crypto")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Crypto") [||])
  end
module CacheStorage =
  struct
    type t = [ `CacheStorage ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11750 : Ojs.t) -> t_of_js x11750
    and t_0_to_js : t_0 -> Ojs.t = fun (x11749 : t) -> t_to_js x11749
    type tags = [ `CacheStorage ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CacheStorage ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11753 : Ojs.t) -> intf_of_js __tags_of_js x11753
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11751 : __tags intf) -> intf_to_js __tags_to_js x11751
    let (delete : 'tags this -> cacheName:string -> bool Promise.t_1) =
      fun (x11756 : 'tags this) ->
        fun ~cacheName:(x11755 : string) ->
          Promise.t_1_of_js Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x11756) "delete"
               [|(Ojs.string_to_js x11755)|])
    let (has : 'tags this -> cacheName:string -> bool Promise.t_1) =
      fun (x11760 : 'tags this) ->
        fun ~cacheName:(x11759 : string) ->
          Promise.t_1_of_js Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x11760) "has"
               [|(Ojs.string_to_js x11759)|])
    let (keys : 'tags this -> string list Promise.t_1) =
      fun (x11763 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x11765 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x11765)
          (Ojs.call (this_to_js Obj.magic x11763) "keys" [||])
    let (match_ :
      'tags this ->
        request:RequestInfo.t ->
          ?options:MultiCacheQueryOptions.t ->
            unit -> Response.t option Promise.t_1)
      =
      fun (x11771 : 'tags this) ->
        fun ~request:(x11767 : RequestInfo.t) ->
          fun ?options:(x11768 : MultiCacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x11774 : Ojs.t) ->
                   Ojs.option_of_js Response.t_of_js x11774)
                (let x11773 = this_to_js Obj.magic x11771 in
                 Ojs.call (Ojs.get_prop_ascii x11773 "match") "apply"
                   [|x11773;((let x11769 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x11769 "push"
                                   [|(RequestInfo.t_to_js x11767)|]);
                              (match x11768 with
                               | Some x11770 ->
                                   ignore
                                     (Ojs.call x11769 "push"
                                        [|(MultiCacheQueryOptions.t_to_js
                                             x11770)|])
                               | None -> ());
                              x11769))|])
    let (open_ : 'tags this -> cacheName:string -> Cache.t Promise.t_1) =
      fun (x11777 : 'tags this) ->
        fun ~cacheName:(x11776 : string) ->
          Promise.t_1_of_js Cache.t_of_js
            (Ojs.call (this_to_js Obj.magic x11777) "open"
               [|(Ojs.string_to_js x11776)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CacheStorage")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CacheStorage") [||])
  end
module WindowOrWorkerGlobalScope =
  struct
    type t = [ `WindowOrWorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11781 : Ojs.t) -> t_of_js x11781
    and t_0_to_js : t_0 -> Ojs.t = fun (x11780 : t) -> t_to_js x11780
    type tags = [ `WindowOrWorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WindowOrWorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11784 : Ojs.t) -> intf_of_js __tags_of_js x11784
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11782 : __tags intf) -> intf_to_js __tags_to_js x11782
    let (get_caches : 'tags this -> CacheStorage.t) =
      fun (x11786 : 'tags this) ->
        CacheStorage.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11786) "caches")
    let (get_crossOriginIsolated : 'tags this -> bool) =
      fun (x11788 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11788)
             "crossOriginIsolated")
    let (get_crypto : 'tags this -> Crypto.t) =
      fun (x11790 : 'tags this) ->
        Crypto.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11790) "crypto")
    let (get_indexedDB : 'tags this -> IDBFactory.t) =
      fun (x11792 : 'tags this) ->
        IDBFactory.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11792) "indexedDB")
    let (get_isSecureContext : 'tags this -> bool) =
      fun (x11794 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11794) "isSecureContext")
    let (get_origin : 'tags this -> string) =
      fun (x11796 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11796) "origin")
    let (get_performance : 'tags this -> Performance.t) =
      fun (x11798 : 'tags this) ->
        Performance.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11798) "performance")
    let (atob : 'tags this -> data:string -> string) =
      fun (x11801 : 'tags this) ->
        fun ~data:(x11800 : string) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x11801) "atob"
               [|(Ojs.string_to_js x11800)|])
    let (btoa : 'tags this -> data:string -> string) =
      fun (x11804 : 'tags this) ->
        fun ~data:(x11803 : string) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x11804) "btoa"
               [|(Ojs.string_to_js x11803)|])
    let (clearInterval : 'tags this -> ?id:float -> unit -> unit) =
      fun (x11809 : 'tags this) ->
        fun ?id:(x11806 : float option) ->
          fun () ->
            ignore
              (let x11811 = this_to_js Obj.magic x11809 in
               Ojs.call (Ojs.get_prop_ascii x11811 "clearInterval") "apply"
                 [|x11811;((let x11807 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x11806 with
                             | Some x11808 ->
                                 ignore
                                   (Ojs.call x11807 "push"
                                      [|(Ojs.float_to_js x11808)|])
                             | None -> ());
                            x11807))|])
    let (clearTimeout : 'tags this -> ?id:float -> unit -> unit) =
      fun (x11815 : 'tags this) ->
        fun ?id:(x11812 : float option) ->
          fun () ->
            ignore
              (let x11817 = this_to_js Obj.magic x11815 in
               Ojs.call (Ojs.get_prop_ascii x11817 "clearTimeout") "apply"
                 [|x11817;((let x11813 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x11812 with
                             | Some x11814 ->
                                 ignore
                                   (Ojs.call x11813 "push"
                                      [|(Ojs.float_to_js x11814)|])
                             | None -> ());
                            x11813))|])
    let (createImageBitmap :
      'tags this ->
        image:ImageBitmapSource.t ->
          ?options:ImageBitmapOptions.t -> unit -> ImageBitmap.t Promise.t_1)
      =
      fun (x11822 : 'tags this) ->
        fun ~image:(x11818 : ImageBitmapSource.t) ->
          fun ?options:(x11819 : ImageBitmapOptions.t option) ->
            fun () ->
              Promise.t_1_of_js ImageBitmap.t_of_js
                (let x11824 = this_to_js Obj.magic x11822 in
                 Ojs.call (Ojs.get_prop_ascii x11824 "createImageBitmap")
                   "apply"
                   [|x11824;((let x11820 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x11820 "push"
                                   [|(ImageBitmapSource.t_to_js x11818)|]);
                              (match x11819 with
                               | Some x11821 ->
                                   ignore
                                     (Ojs.call x11820 "push"
                                        [|(ImageBitmapOptions.t_to_js x11821)|])
                               | None -> ());
                              x11820))|])
    let (createImageBitmap' :
      'tags this ->
        image:ImageBitmapSource.t ->
          sx:float ->
            sy:float ->
              sw:float ->
                sh:float ->
                  ?options:ImageBitmapOptions.t ->
                    unit -> ImageBitmap.t Promise.t_1)
      =
      fun (x11834 : 'tags this) ->
        fun ~image:(x11826 : ImageBitmapSource.t) ->
          fun ~sx:(x11827 : float) ->
            fun ~sy:(x11828 : float) ->
              fun ~sw:(x11829 : float) ->
                fun ~sh:(x11830 : float) ->
                  fun ?options:(x11831 : ImageBitmapOptions.t option) ->
                    fun () ->
                      Promise.t_1_of_js ImageBitmap.t_of_js
                        (let x11836 = this_to_js Obj.magic x11834 in
                         Ojs.call
                           (Ojs.get_prop_ascii x11836 "createImageBitmap")
                           "apply"
                           [|x11836;((let x11832 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x11832 "push"
                                           [|(ImageBitmapSource.t_to_js
                                                x11826)|]);
                                      ignore
                                        (Ojs.call x11832 "push"
                                           [|(Ojs.float_to_js x11827)|]);
                                      ignore
                                        (Ojs.call x11832 "push"
                                           [|(Ojs.float_to_js x11828)|]);
                                      ignore
                                        (Ojs.call x11832 "push"
                                           [|(Ojs.float_to_js x11829)|]);
                                      ignore
                                        (Ojs.call x11832 "push"
                                           [|(Ojs.float_to_js x11830)|]);
                                      (match x11831 with
                                       | Some x11833 ->
                                           ignore
                                             (Ojs.call x11832 "push"
                                                [|(ImageBitmapOptions.t_to_js
                                                     x11833)|])
                                       | None -> ());
                                      x11832))|])
    let (fetch :
      'tags this ->
        input:RequestInfo.t ->
          ?init:RequestInit.t -> unit -> Response.t Promise.t_1)
      =
      fun (x11842 : 'tags this) ->
        fun ~input:(x11838 : RequestInfo.t) ->
          fun ?init:(x11839 : RequestInit.t option) ->
            fun () ->
              Promise.t_1_of_js Response.t_of_js
                (let x11844 = this_to_js Obj.magic x11842 in
                 Ojs.call (Ojs.get_prop_ascii x11844 "fetch") "apply"
                   [|x11844;((let x11840 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x11840 "push"
                                   [|(RequestInfo.t_to_js x11838)|]);
                              (match x11839 with
                               | Some x11841 ->
                                   ignore
                                     (Ojs.call x11840 "push"
                                        [|(RequestInit.t_to_js x11841)|])
                               | None -> ());
                              x11840))|])
    let (queueMicrotask : 'tags this -> callback:VoidFunction.t -> unit) =
      fun (x11847 : 'tags this) ->
        fun ~callback:(x11846 : VoidFunction.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11847) "queueMicrotask"
               [|(VoidFunction.t_to_js x11846)|])
    let (reportError : 'tags this -> e:any -> unit) =
      fun (x11850 : 'tags this) ->
        fun ~e:(x11849 : any) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11850) "reportError"
               [|(any_to_js x11849)|])
    let (setInterval :
      'tags this ->
        handler:TimerHandler.t ->
          ?timeout:float -> arguments:any list -> unit -> float)
      =
      fun (x11858 : 'tags this) ->
        fun ~handler:(x11852 : TimerHandler.t) ->
          fun ?timeout:(x11853 : float option) ->
            fun ~arguments:(x11854 : any list) ->
              fun () ->
                Ojs.float_of_js
                  (let x11860 = this_to_js Obj.magic x11858 in
                   Ojs.call (Ojs.get_prop_ascii x11860 "setInterval") "apply"
                     [|x11860;((let x11855 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11855 "push"
                                     [|(TimerHandler.t_to_js x11852)|]);
                                (match x11853 with
                                 | Some x11857 ->
                                     ignore
                                       (Ojs.call x11855 "push"
                                          [|(Ojs.float_to_js x11857)|])
                                 | None -> ());
                                List.iter
                                  (fun (x11856 : any) ->
                                     ignore
                                       (Ojs.call x11855 "push"
                                          [|(any_to_js x11856)|])) x11854;
                                x11855))|])
    let (setTimeout :
      'tags this ->
        handler:TimerHandler.t ->
          ?timeout:float -> arguments:any list -> unit -> float)
      =
      fun (x11867 : 'tags this) ->
        fun ~handler:(x11861 : TimerHandler.t) ->
          fun ?timeout:(x11862 : float option) ->
            fun ~arguments:(x11863 : any list) ->
              fun () ->
                Ojs.float_of_js
                  (let x11869 = this_to_js Obj.magic x11867 in
                   Ojs.call (Ojs.get_prop_ascii x11869 "setTimeout") "apply"
                     [|x11869;((let x11864 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11864 "push"
                                     [|(TimerHandler.t_to_js x11861)|]);
                                (match x11862 with
                                 | Some x11866 ->
                                     ignore
                                       (Ojs.call x11864 "push"
                                          [|(Ojs.float_to_js x11866)|])
                                 | None -> ());
                                List.iter
                                  (fun (x11865 : any) ->
                                     ignore
                                       (Ojs.call x11864 "push"
                                          [|(any_to_js x11865)|])) x11863;
                                x11864))|])
    let cast_from = Obj.magic
  end
module FontFaceSource =
  struct
    type t = [ `FontFaceSource ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11871 : Ojs.t) -> t_of_js x11871
    and t_0_to_js : t_0 -> Ojs.t = fun (x11870 : t) -> t_to_js x11870
    type tags = [ `FontFaceSource ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFaceSource ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11874 : Ojs.t) -> intf_of_js __tags_of_js x11874
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11872 : __tags intf) -> intf_to_js __tags_to_js x11872
    let (get_fonts : 'tags this -> FontFaceSet.t) =
      fun (x11876 : 'tags this) ->
        FontFaceSet.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11876) "fonts")
    let (create : fonts:FontFaceSet.t -> unit -> t) =
      fun ~fonts:(x11878 : FontFaceSet.t) ->
        fun () ->
          let x11879 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x11879 "fonts" (FontFaceSet.t_to_js x11878);
          t_of_js x11879
    let cast_from = Obj.magic
  end
module WorkerGlobalScope =
  struct
    type t =
      [ `EventTarget  | `FontFaceSource  | `WindowOrWorkerGlobalScope 
      | `WorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11881 : Ojs.t) -> t_of_js x11881
    and t_0_to_js : t_0 -> Ojs.t = fun (x11880 : t) -> t_to_js x11880
    type tags =
      [ `EventTarget  | `FontFaceSource  | `WindowOrWorkerGlobalScope 
      | `WorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11884 : Ojs.t) -> intf_of_js __tags_of_js x11884
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11882 : __tags intf) -> intf_to_js __tags_to_js x11882
    let (get_location : 'tags this -> WorkerLocation.t) =
      fun (x11886 : 'tags this) ->
        WorkerLocation.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11886) "location")
    let (get_navigator : 'tags this -> WorkerNavigator.t) =
      fun (x11888 : 'tags this) ->
        WorkerNavigator.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11888) "navigator")
    let (get_onerror :
      'tags this -> (this:t -> ev:ErrorEvent.t -> any) option) =
      fun (x11890 : 'tags this) ->
        Ojs.option_of_js
          (fun (x11892 : Ojs.t) ->
             fun ~this:(x11893 : t) ->
               fun ~ev:(x11894 : ErrorEvent.t) ->
                 any_of_js
                   (Ojs.apply x11892
                      [|(t_to_js x11893);(ErrorEvent.t_to_js x11894)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11890) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:ErrorEvent.t -> any) option -> unit) =
      fun (x11895 : 'tags this) ->
        fun (x11896 : (this:t -> ev:ErrorEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11895) "onerror"
            (Ojs.option_to_js
               (fun (x11897 : this:t -> ev:ErrorEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11898 : Ojs.t) ->
                       fun (x11899 : Ojs.t) ->
                         any_to_js
                           (x11897 ~this:(t_of_js x11898)
                              ~ev:(ErrorEvent.t_of_js x11899)))) x11896)
    let (get_onlanguagechange :
      'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x11901 : 'tags this) ->
        Ojs.option_of_js
          (fun (x11903 : Ojs.t) ->
             fun ~this:(x11904 : t) ->
               fun ~ev:(x11905 : Event.t) ->
                 any_of_js
                   (Ojs.apply x11903
                      [|(t_to_js x11904);(Event.t_to_js x11905)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11901)
             "onlanguagechange")
    let (set_onlanguagechange :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x11906 : 'tags this) ->
        fun (x11907 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11906) "onlanguagechange"
            (Ojs.option_to_js
               (fun (x11908 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11909 : Ojs.t) ->
                       fun (x11910 : Ojs.t) ->
                         any_to_js
                           (x11908 ~this:(t_of_js x11909)
                              ~ev:(Event.t_of_js x11910)))) x11907)
    let (get_onoffline : 'tags this -> (this:t -> ev:Event.t -> any) option)
      =
      fun (x11912 : 'tags this) ->
        Ojs.option_of_js
          (fun (x11914 : Ojs.t) ->
             fun ~this:(x11915 : t) ->
               fun ~ev:(x11916 : Event.t) ->
                 any_of_js
                   (Ojs.apply x11914
                      [|(t_to_js x11915);(Event.t_to_js x11916)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11912) "onoffline")
    let (set_onoffline :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x11917 : 'tags this) ->
        fun (x11918 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11917) "onoffline"
            (Ojs.option_to_js
               (fun (x11919 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11920 : Ojs.t) ->
                       fun (x11921 : Ojs.t) ->
                         any_to_js
                           (x11919 ~this:(t_of_js x11920)
                              ~ev:(Event.t_of_js x11921)))) x11918)
    let (get_ononline : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x11923 : 'tags this) ->
        Ojs.option_of_js
          (fun (x11925 : Ojs.t) ->
             fun ~this:(x11926 : t) ->
               fun ~ev:(x11927 : Event.t) ->
                 any_of_js
                   (Ojs.apply x11925
                      [|(t_to_js x11926);(Event.t_to_js x11927)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11923) "ononline")
    let (set_ononline :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x11928 : 'tags this) ->
        fun (x11929 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11928) "ononline"
            (Ojs.option_to_js
               (fun (x11930 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11931 : Ojs.t) ->
                       fun (x11932 : Ojs.t) ->
                         any_to_js
                           (x11930 ~this:(t_of_js x11931)
                              ~ev:(Event.t_of_js x11932)))) x11929)
    let (get_onrejectionhandled :
      'tags this -> (this:t -> ev:PromiseRejectionEvent.t -> any) option) =
      fun (x11934 : 'tags this) ->
        Ojs.option_of_js
          (fun (x11936 : Ojs.t) ->
             fun ~this:(x11937 : t) ->
               fun ~ev:(x11938 : PromiseRejectionEvent.t) ->
                 any_of_js
                   (Ojs.apply x11936
                      [|(t_to_js x11937);(PromiseRejectionEvent.t_to_js
                                            x11938)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11934)
             "onrejectionhandled")
    let (set_onrejectionhandled :
      'tags this ->
        (this:t -> ev:PromiseRejectionEvent.t -> any) option -> unit)
      =
      fun (x11939 : 'tags this) ->
        fun (x11940 : (this:t -> ev:PromiseRejectionEvent.t -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11939)
            "onrejectionhandled"
            (Ojs.option_to_js
               (fun (x11941 : this:t -> ev:PromiseRejectionEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11942 : Ojs.t) ->
                       fun (x11943 : Ojs.t) ->
                         any_to_js
                           (x11941 ~this:(t_of_js x11942)
                              ~ev:(PromiseRejectionEvent.t_of_js x11943))))
               x11940)
    let (get_onunhandledrejection :
      'tags this -> (this:t -> ev:PromiseRejectionEvent.t -> any) option) =
      fun (x11945 : 'tags this) ->
        Ojs.option_of_js
          (fun (x11947 : Ojs.t) ->
             fun ~this:(x11948 : t) ->
               fun ~ev:(x11949 : PromiseRejectionEvent.t) ->
                 any_of_js
                   (Ojs.apply x11947
                      [|(t_to_js x11948);(PromiseRejectionEvent.t_to_js
                                            x11949)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11945)
             "onunhandledrejection")
    let (set_onunhandledrejection :
      'tags this ->
        (this:t -> ev:PromiseRejectionEvent.t -> any) option -> unit)
      =
      fun (x11950 : 'tags this) ->
        fun (x11951 : (this:t -> ev:PromiseRejectionEvent.t -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11950)
            "onunhandledrejection"
            (Ojs.option_to_js
               (fun (x11952 : this:t -> ev:PromiseRejectionEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11953 : Ojs.t) ->
                       fun (x11954 : Ojs.t) ->
                         any_to_js
                           (x11952 ~this:(t_of_js x11953)
                              ~ev:(PromiseRejectionEvent.t_of_js x11954))))
               x11951)
    let (get_self : 'tags this -> (t, any) intersection2) =
      fun (x11956 : 'tags this) ->
        intersection2_of_js t_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11956) "self")
    let (importScripts :
      'tags this -> urls:[ `U1 of string  | `U2 of URL.t ] list -> unit) =
      fun (x11965 : 'tags this) ->
        fun ~urls:(x11960 : [ `U1 of string  | `U2 of URL.t ] list) ->
          ignore
            (let x11967 = this_to_js Obj.magic x11965 in
             Ojs.call (Ojs.get_prop_ascii x11967 "importScripts") "apply"
               [|x11967;((let x11961 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x11962 : [ `U1 of string  | `U2 of URL.t ])
                               ->
                               ignore
                                 (Ojs.call x11961 "push"
                                    [|((match x11962 with
                                        | `U1 x11963 ->
                                            Ojs.string_to_js x11963
                                        | `U2 x11964 -> URL.t_to_js x11964))|]))
                            x11960;
                          x11961))|])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x11977 : 'tags this) ->
        fun ~type_:(x11968 : 'K) ->
          fun ~listener:(x11969 : this:t -> ev:any -> any) ->
            fun
              ?options:(x11970 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x11979 = this_to_js Obj.magic x11977 in
                   Ojs.call (Ojs.get_prop_ascii x11979 "addEventListener")
                     "apply"
                     [|x11979;((let x11971 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11971 "push"
                                     [|(Obj.magic x11968)|]);
                                ignore
                                  (Ojs.call x11971 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x11975 : Ojs.t) ->
                                             fun (x11976 : Ojs.t) ->
                                               any_to_js
                                                 (x11969
                                                    ~this:(t_of_js x11975)
                                                    ~ev:(any_of_js x11976))))|]);
                                (match x11970 with
                                 | Some x11972 ->
                                     ignore
                                       (Ojs.call x11971 "push"
                                          [|((match x11972 with
                                              | `U1 x11973 ->
                                                  Ojs.bool_to_js x11973
                                              | `U2 x11974 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x11974))|])
                                 | None -> ());
                                x11971))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x11987 : 'tags this) ->
        fun ~type_:(x11980 : string) ->
          fun ~listener:(x11981 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x11982 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x11989 = this_to_js Obj.magic x11987 in
                   Ojs.call (Ojs.get_prop_ascii x11989 "addEventListener")
                     "apply"
                     [|x11989;((let x11983 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11983 "push"
                                     [|(Ojs.string_to_js x11980)|]);
                                ignore
                                  (Ojs.call x11983 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x11981)|]);
                                (match x11982 with
                                 | Some x11984 ->
                                     ignore
                                       (Ojs.call x11983 "push"
                                          [|((match x11984 with
                                              | `U1 x11985 ->
                                                  Ojs.bool_to_js x11985
                                              | `U2 x11986 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x11986))|])
                                 | None -> ());
                                x11983))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x11999 : 'tags this) ->
        fun ~type_:(x11990 : 'K) ->
          fun ~listener:(x11991 : this:t -> ev:any -> any) ->
            fun
              ?options:(x11992 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12001 = this_to_js Obj.magic x11999 in
                   Ojs.call (Ojs.get_prop_ascii x12001 "removeEventListener")
                     "apply"
                     [|x12001;((let x11993 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11993 "push"
                                     [|(Obj.magic x11990)|]);
                                ignore
                                  (Ojs.call x11993 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x11997 : Ojs.t) ->
                                             fun (x11998 : Ojs.t) ->
                                               any_to_js
                                                 (x11991
                                                    ~this:(t_of_js x11997)
                                                    ~ev:(any_of_js x11998))))|]);
                                (match x11992 with
                                 | Some x11994 ->
                                     ignore
                                       (Ojs.call x11993 "push"
                                          [|((match x11994 with
                                              | `U1 x11995 ->
                                                  Ojs.bool_to_js x11995
                                              | `U2 x11996 ->
                                                  EventListenerOptions.t_to_js
                                                    x11996))|])
                                 | None -> ());
                                x11993))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12009 : 'tags this) ->
        fun ~type_:(x12002 : string) ->
          fun ~listener:(x12003 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x12004 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12011 = this_to_js Obj.magic x12009 in
                   Ojs.call (Ojs.get_prop_ascii x12011 "removeEventListener")
                     "apply"
                     [|x12011;((let x12005 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12005 "push"
                                     [|(Ojs.string_to_js x12002)|]);
                                ignore
                                  (Ojs.call x12005 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12003)|]);
                                (match x12004 with
                                 | Some x12006 ->
                                     ignore
                                       (Ojs.call x12005 "push"
                                          [|((match x12006 with
                                              | `U1 x12007 ->
                                                  Ojs.bool_to_js x12007
                                              | `U2 x12008 ->
                                                  EventListenerOptions.t_to_js
                                                    x12008))|])
                                 | None -> ());
                                x12005))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WorkerGlobalScope") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WorkerGlobalScope")
             [||])
  end
module SharedWorkerGlobalScope =
  struct
    type t =
      [ `EventTarget  | `FontFaceSource  | `SharedWorkerGlobalScope 
      | `WindowOrWorkerGlobalScope  | `WorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12013 : Ojs.t) -> t_of_js x12013
    and t_0_to_js : t_0 -> Ojs.t = fun (x12012 : t) -> t_to_js x12012
    type tags =
      [ `EventTarget  | `FontFaceSource  | `SharedWorkerGlobalScope 
      | `WindowOrWorkerGlobalScope  | `WorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `SharedWorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12016 : Ojs.t) -> intf_of_js __tags_of_js x12016
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12014 : __tags intf) -> intf_to_js __tags_to_js x12014
    let (get_name : 'tags this -> string) =
      fun (x12018 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12018) "name")
    let (get_onconnect :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x12020 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12022 : Ojs.t) ->
             fun ~this:(x12023 : t) ->
               fun ~ev:(x12024 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x12022
                      [|(t_to_js x12023);(MessageEvent.t_0_to_js x12024)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12020) "onconnect")
    let (set_onconnect :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x12025 : 'tags this) ->
        fun (x12026 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12025) "onconnect"
            (Ojs.option_to_js
               (fun (x12027 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12028 : Ojs.t) ->
                       fun (x12029 : Ojs.t) ->
                         any_to_js
                           (x12027 ~this:(t_of_js x12028)
                              ~ev:(MessageEvent.t_0_of_js x12029)))) x12026)
    let (close : 'tags this -> unit) =
      fun (x12031 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x12031) "close" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12042 : 'tags this) ->
        fun ~type_:(x12033 : 'K) ->
          fun ~listener:(x12034 : this:t -> ev:any -> any) ->
            fun
              ?options:(x12035 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12044 = this_to_js Obj.magic x12042 in
                   Ojs.call (Ojs.get_prop_ascii x12044 "addEventListener")
                     "apply"
                     [|x12044;((let x12036 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12036 "push"
                                     [|(Obj.magic x12033)|]);
                                ignore
                                  (Ojs.call x12036 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12040 : Ojs.t) ->
                                             fun (x12041 : Ojs.t) ->
                                               any_to_js
                                                 (x12034
                                                    ~this:(t_of_js x12040)
                                                    ~ev:(any_of_js x12041))))|]);
                                (match x12035 with
                                 | Some x12037 ->
                                     ignore
                                       (Ojs.call x12036 "push"
                                          [|((match x12037 with
                                              | `U1 x12038 ->
                                                  Ojs.bool_to_js x12038
                                              | `U2 x12039 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x12039))|])
                                 | None -> ());
                                x12036))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12052 : 'tags this) ->
        fun ~type_:(x12045 : string) ->
          fun ~listener:(x12046 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x12047 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12054 = this_to_js Obj.magic x12052 in
                   Ojs.call (Ojs.get_prop_ascii x12054 "addEventListener")
                     "apply"
                     [|x12054;((let x12048 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12048 "push"
                                     [|(Ojs.string_to_js x12045)|]);
                                ignore
                                  (Ojs.call x12048 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12046)|]);
                                (match x12047 with
                                 | Some x12049 ->
                                     ignore
                                       (Ojs.call x12048 "push"
                                          [|((match x12049 with
                                              | `U1 x12050 ->
                                                  Ojs.bool_to_js x12050
                                              | `U2 x12051 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x12051))|])
                                 | None -> ());
                                x12048))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12064 : 'tags this) ->
        fun ~type_:(x12055 : 'K) ->
          fun ~listener:(x12056 : this:t -> ev:any -> any) ->
            fun
              ?options:(x12057 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12066 = this_to_js Obj.magic x12064 in
                   Ojs.call (Ojs.get_prop_ascii x12066 "removeEventListener")
                     "apply"
                     [|x12066;((let x12058 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12058 "push"
                                     [|(Obj.magic x12055)|]);
                                ignore
                                  (Ojs.call x12058 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12062 : Ojs.t) ->
                                             fun (x12063 : Ojs.t) ->
                                               any_to_js
                                                 (x12056
                                                    ~this:(t_of_js x12062)
                                                    ~ev:(any_of_js x12063))))|]);
                                (match x12057 with
                                 | Some x12059 ->
                                     ignore
                                       (Ojs.call x12058 "push"
                                          [|((match x12059 with
                                              | `U1 x12060 ->
                                                  Ojs.bool_to_js x12060
                                              | `U2 x12061 ->
                                                  EventListenerOptions.t_to_js
                                                    x12061))|])
                                 | None -> ());
                                x12058))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12074 : 'tags this) ->
        fun ~type_:(x12067 : string) ->
          fun ~listener:(x12068 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x12069 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12076 = this_to_js Obj.magic x12074 in
                   Ojs.call (Ojs.get_prop_ascii x12076 "removeEventListener")
                     "apply"
                     [|x12076;((let x12070 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12070 "push"
                                     [|(Ojs.string_to_js x12067)|]);
                                ignore
                                  (Ojs.call x12070 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12068)|]);
                                (match x12069 with
                                 | Some x12071 ->
                                     ignore
                                       (Ojs.call x12070 "push"
                                          [|((match x12071 with
                                              | `U1 x12072 ->
                                                  Ojs.bool_to_js x12072
                                              | `U2 x12073 ->
                                                  EventListenerOptions.t_to_js
                                                    x12073))|])
                                 | None -> ());
                                x12070))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "SharedWorkerGlobalScope")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "SharedWorkerGlobalScope") 
             [||])
  end
module ServiceWorkerRegistrationEventMap =
  struct
    type t = [ `ServiceWorkerRegistrationEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12078 : Ojs.t) -> t_of_js x12078
    and t_0_to_js : t_0 -> Ojs.t = fun (x12077 : t) -> t_to_js x12077
    type tags = [ `ServiceWorkerRegistrationEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerRegistrationEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12081 : Ojs.t) -> intf_of_js __tags_of_js x12081
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12079 : __tags intf) -> intf_to_js __tags_to_js x12079
    let (get_updatefound : 'tags this -> Event.t) =
      fun (x12083 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12083) "updatefound")
    let (set_updatefound : 'tags this -> Event.t -> unit) =
      fun (x12085 : 'tags this) ->
        fun (x12086 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12085) "updatefound"
            (Event.t_to_js x12086)
    let (create : updatefound:Event.t -> unit -> t) =
      fun ~updatefound:(x12088 : Event.t) ->
        fun () ->
          let x12089 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x12089 "updatefound" (Event.t_to_js x12088);
          t_of_js x12089
    let cast_from = Obj.magic
  end
module PushMessageData =
  struct
    type t = [ `PushMessageData ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12091 : Ojs.t) -> t_of_js x12091
    and t_0_to_js : t_0 -> Ojs.t = fun (x12090 : t) -> t_to_js x12090
    type tags = [ `PushMessageData ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushMessageData ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12094 : Ojs.t) -> intf_of_js __tags_of_js x12094
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12092 : __tags intf) -> intf_to_js __tags_to_js x12092
    let (arrayBuffer : 'tags this -> ArrayBuffer.t_0) =
      fun (x12096 : 'tags this) ->
        ArrayBuffer.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x12096) "arrayBuffer" [||])
    let (blob : 'tags this -> Blob.t) =
      fun (x12098 : 'tags this) ->
        Blob.t_of_js (Ojs.call (this_to_js Obj.magic x12098) "blob" [||])
    let (json : 'tags this -> any) =
      fun (x12100 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x12100) "json" [||])
    let (text : 'tags this -> string) =
      fun (x12102 : 'tags this) ->
        Ojs.string_of_js (Ojs.call (this_to_js Obj.magic x12102) "text" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PushMessageData") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PushMessageData") [||])
  end
module PushMessageDataInit =
  struct
    type t = [ `String of string  | `Other of BufferSource.t ] Primitive.t
    let rec t_of_js : Ojs.t -> t =
      fun (x12108 : Ojs.t) ->
        Primitive.t_of_js
          (fun (x12109 : Ojs.t) ->
             let x12110 = x12109 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x12110 "dummy") with
             | "String" -> `String (Ojs.string_of_js x12110)
             | "Other" -> `Other (BufferSource.t_of_js x12110)
             | _ -> assert false) x12108
    and t_to_js : t -> Ojs.t =
      fun
        (x12104 :
          [ `String of string  | `Other of BufferSource.t ] Primitive.t)
        ->
        Primitive.t_to_js
          (fun (x12105 : [ `String of string  | `Other of BufferSource.t ])
             ->
             match x12105 with
             | `String x12106 -> Ojs.string_to_js x12106
             | `Other x12107 -> BufferSource.t_to_js x12107) x12104
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12112 : Ojs.t) -> t_of_js x12112
    and t_0_to_js : t_0 -> Ojs.t = fun (x12111 : t) -> t_to_js x12111
  end
module ExtendableEventInit =
  struct
    type t = [ `EventInit  | `ExtendableEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12114 : Ojs.t) -> t_of_js x12114
    and t_0_to_js : t_0 -> Ojs.t = fun (x12113 : t) -> t_to_js x12113
    type tags = [ `EventInit  | `ExtendableEventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ExtendableEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12117 : Ojs.t) -> intf_of_js __tags_of_js x12117
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12115 : __tags intf) -> intf_to_js __tags_to_js x12115
    let cast_from = Obj.magic
  end
module PushEventInit =
  struct
    type t = [ `EventInit  | `ExtendableEventInit  | `PushEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12120 : Ojs.t) -> t_of_js x12120
    and t_0_to_js : t_0 -> Ojs.t = fun (x12119 : t) -> t_to_js x12119
    type tags = [ `EventInit  | `ExtendableEventInit  | `PushEventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12123 : Ojs.t) -> intf_of_js __tags_of_js x12123
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12121 : __tags intf) -> intf_to_js __tags_to_js x12121
    let (get_data : 'tags this -> PushMessageDataInit.t option) =
      fun (x12125 : 'tags this) ->
        Ojs.option_of_js PushMessageDataInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12125) "data")
    let (set_data : 'tags this -> PushMessageDataInit.t -> unit) =
      fun (x12128 : 'tags this) ->
        fun (x12129 : PushMessageDataInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12128) "data"
            (PushMessageDataInit.t_to_js x12129)
    let (create : ?data:PushMessageDataInit.t -> unit -> t) =
      fun ?data:(x12131 : PushMessageDataInit.t option) ->
        fun () ->
          let x12132 = Ojs.empty_obj () in
          (match x12131 with
           | Some x12133 ->
               Ojs.set_prop_ascii x12132 "data"
                 (PushMessageDataInit.t_to_js x12133)
           | None -> ());
          t_of_js x12132
    let cast_from = Obj.magic
  end
module ExtendableEvent =
  struct
    type t = [ `Event  | `ExtendableEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12135 : Ojs.t) -> t_of_js x12135
    and t_0_to_js : t_0 -> Ojs.t = fun (x12134 : t) -> t_to_js x12134
    type tags = [ `Event  | `ExtendableEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ExtendableEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12138 : Ojs.t) -> intf_of_js __tags_of_js x12138
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12136 : __tags intf) -> intf_to_js __tags_to_js x12136
    let (waitUntil : 'tags this -> f:any -> unit) =
      fun (x12141 : 'tags this) ->
        fun ~f:(x12140 : any) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x12141) "waitUntil"
               [|(any_to_js x12140)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ExtendableEvent") "prototype")
    let (create :
      type_:string -> ?eventInitDict:ExtendableEventInit.t -> unit -> t) =
      fun ~type_:(x12143 : string) ->
        fun ?eventInitDict:(x12144 : ExtendableEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "ExtendableEvent")
                 (let x12145 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x12145 "push" [|(Ojs.string_to_js x12143)|]);
                  (match x12144 with
                   | Some x12146 ->
                       ignore
                         (Ojs.call x12145 "push"
                            [|(ExtendableEventInit.t_to_js x12146)|])
                   | None -> ());
                  x12145))
  end
module PushEvent =
  struct
    type t = [ `Event  | `ExtendableEvent  | `PushEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12148 : Ojs.t) -> t_of_js x12148
    and t_0_to_js : t_0 -> Ojs.t = fun (x12147 : t) -> t_to_js x12147
    type tags = [ `Event  | `ExtendableEvent  | `PushEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12151 : Ojs.t) -> intf_of_js __tags_of_js x12151
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12149 : __tags intf) -> intf_to_js __tags_to_js x12149
    let (get_data : 'tags this -> PushMessageData.t option) =
      fun (x12153 : 'tags this) ->
        Ojs.option_of_js PushMessageData.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12153) "data")
    let (create : ?data:PushMessageData.t -> unit -> t) =
      fun ?data:(x12156 : PushMessageData.t option) ->
        fun () ->
          let x12157 = Ojs.empty_obj () in
          (match x12156 with
           | Some x12158 ->
               Ojs.set_prop_ascii x12157 "data"
                 (PushMessageData.t_to_js x12158)
           | None -> ());
          t_of_js x12157
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "PushEvent")
             "prototype")
    let (create' :
      type_:string -> ?eventInitDict:PushEventInit.t -> unit -> t) =
      fun ~type_:(x12159 : string) ->
        fun ?eventInitDict:(x12160 : PushEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "PushEvent")
                 (let x12161 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x12161 "push" [|(Ojs.string_to_js x12159)|]);
                  (match x12160 with
                   | Some x12162 ->
                       ignore
                         (Ojs.call x12161 "push"
                            [|(PushEventInit.t_to_js x12162)|])
                   | None -> ());
                  x12161))
  end
module NotificationPermission =
  struct
    type t = [ `L_s57_default  | `L_s58_denied  | `L_s84_granted ]
    let rec t_of_js : Ojs.t -> t =
      fun (x12164 : Ojs.t) ->
        let x12165 = x12164 in
        match Ojs.string_of_js x12165 with
        | "default" -> `L_s57_default
        | "denied" -> `L_s58_denied
        | "granted" -> `L_s84_granted
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x12163 : [ `L_s57_default  | `L_s58_denied  | `L_s84_granted ]) ->
        match x12163 with
        | `L_s57_default -> Ojs.string_to_js "default"
        | `L_s58_denied -> Ojs.string_to_js "denied"
        | `L_s84_granted -> Ojs.string_to_js "granted"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12167 : Ojs.t) -> t_of_js x12167
    and t_0_to_js : t_0 -> Ojs.t = fun (x12166 : t) -> t_to_js x12166
  end
module VibratePattern =
  struct
    type t = [ `Number of float  | `Other of float list ] Primitive.t
    let rec t_of_js : Ojs.t -> t =
      fun (x12173 : Ojs.t) ->
        Primitive.t_of_js
          (fun (x12174 : Ojs.t) ->
             let x12175 = x12174 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x12175 "dummy") with
             | "Number" -> `Number (Ojs.float_of_js x12175)
             | "Other" -> `Other (Ojs.list_of_js Ojs.float_of_js x12175)
             | _ -> assert false) x12173
    and t_to_js : t -> Ojs.t =
      fun (x12168 : [ `Number of float  | `Other of float list ] Primitive.t)
        ->
        Primitive.t_to_js
          (fun (x12169 : [ `Number of float  | `Other of float list ]) ->
             match x12169 with
             | `Number x12170 -> Ojs.float_to_js x12170
             | `Other x12171 -> Ojs.list_to_js Ojs.float_to_js x12171) x12168
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12178 : Ojs.t) -> t_of_js x12178
    and t_0_to_js : t_0 -> Ojs.t = fun (x12177 : t) -> t_to_js x12177
  end
module NotificationAction =
  struct
    type t = [ `NotificationAction ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12180 : Ojs.t) -> t_of_js x12180
    and t_0_to_js : t_0 -> Ojs.t = fun (x12179 : t) -> t_to_js x12179
    type tags = [ `NotificationAction ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NotificationAction ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12183 : Ojs.t) -> intf_of_js __tags_of_js x12183
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12181 : __tags intf) -> intf_to_js __tags_to_js x12181
    let (get_action : 'tags this -> string) =
      fun (x12185 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12185) "action")
    let (set_action : 'tags this -> string -> unit) =
      fun (x12187 : 'tags this) ->
        fun (x12188 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12187) "action"
            (Ojs.string_to_js x12188)
    let (get_icon : 'tags this -> string option) =
      fun (x12190 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12190) "icon")
    let (set_icon : 'tags this -> string -> unit) =
      fun (x12193 : 'tags this) ->
        fun (x12194 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12193) "icon"
            (Ojs.string_to_js x12194)
    let (get_title : 'tags this -> string) =
      fun (x12196 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12196) "title")
    let (set_title : 'tags this -> string -> unit) =
      fun (x12198 : 'tags this) ->
        fun (x12199 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12198) "title"
            (Ojs.string_to_js x12199)
    let (create : action:string -> ?icon:string -> title:string -> unit -> t)
      =
      fun ~action:(x12201 : string) ->
        fun ?icon:(x12202 : string option) ->
          fun ~title:(x12203 : string) ->
            fun () ->
              let x12204 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x12204 "action" (Ojs.string_to_js x12201);
              (match x12202 with
               | Some x12205 ->
                   Ojs.set_prop_ascii x12204 "icon" (Ojs.string_to_js x12205)
               | None -> ());
              Ojs.set_prop_ascii x12204 "title" (Ojs.string_to_js x12203);
              t_of_js x12204
    let cast_from = Obj.magic
  end
module NotificationDirection =
  struct
    type t = [ `L_s110_ltr  | `L_s174_rtl  | `L_s41_auto ]
    let rec t_of_js : Ojs.t -> t =
      fun (x12207 : Ojs.t) ->
        let x12208 = x12207 in
        match Ojs.string_of_js x12208 with
        | "ltr" -> `L_s110_ltr
        | "rtl" -> `L_s174_rtl
        | "auto" -> `L_s41_auto
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x12206 : [ `L_s110_ltr  | `L_s174_rtl  | `L_s41_auto ]) ->
        match x12206 with
        | `L_s110_ltr -> Ojs.string_to_js "ltr"
        | `L_s174_rtl -> Ojs.string_to_js "rtl"
        | `L_s41_auto -> Ojs.string_to_js "auto"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12210 : Ojs.t) -> t_of_js x12210
    and t_0_to_js : t_0 -> Ojs.t = fun (x12209 : t) -> t_to_js x12209
  end
module EpochTimeStamp =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x12212 : Ojs.t) -> Ojs.float_of_js x12212
    and t_to_js : t -> Ojs.t = fun (x12211 : float) -> Ojs.float_to_js x12211
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12214 : Ojs.t) -> t_of_js x12214
    and t_0_to_js : t_0 -> Ojs.t = fun (x12213 : t) -> t_to_js x12213
  end
module NotificationOptions =
  struct
    type t = [ `NotificationOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12216 : Ojs.t) -> t_of_js x12216
    and t_0_to_js : t_0 -> Ojs.t = fun (x12215 : t) -> t_to_js x12215
    type tags = [ `NotificationOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NotificationOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12219 : Ojs.t) -> intf_of_js __tags_of_js x12219
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12217 : __tags intf) -> intf_to_js __tags_to_js x12217
    let (get_actions : 'tags this -> NotificationAction.t list option) =
      fun (x12221 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12223 : Ojs.t) ->
             Ojs.list_of_js NotificationAction.t_of_js x12223)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12221) "actions")
    let (set_actions : 'tags this -> NotificationAction.t list -> unit) =
      fun (x12225 : 'tags this) ->
        fun (x12226 : NotificationAction.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12225) "actions"
            (Ojs.list_to_js NotificationAction.t_to_js x12226)
    let (get_badge : 'tags this -> string option) =
      fun (x12229 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12229) "badge")
    let (set_badge : 'tags this -> string -> unit) =
      fun (x12232 : 'tags this) ->
        fun (x12233 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12232) "badge"
            (Ojs.string_to_js x12233)
    let (get_body : 'tags this -> string option) =
      fun (x12235 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12235) "body")
    let (set_body : 'tags this -> string -> unit) =
      fun (x12238 : 'tags this) ->
        fun (x12239 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12238) "body"
            (Ojs.string_to_js x12239)
    let (get_data : 'tags this -> any option) =
      fun (x12241 : 'tags this) ->
        Ojs.option_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12241) "data")
    let (set_data : 'tags this -> any -> unit) =
      fun (x12244 : 'tags this) ->
        fun (x12245 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12244) "data"
            (any_to_js x12245)
    let (get_dir : 'tags this -> NotificationDirection.t option) =
      fun (x12247 : 'tags this) ->
        Ojs.option_of_js NotificationDirection.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12247) "dir")
    let (set_dir : 'tags this -> NotificationDirection.t -> unit) =
      fun (x12250 : 'tags this) ->
        fun (x12251 : NotificationDirection.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12250) "dir"
            (NotificationDirection.t_to_js x12251)
    let (get_icon : 'tags this -> string option) =
      fun (x12253 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12253) "icon")
    let (set_icon : 'tags this -> string -> unit) =
      fun (x12256 : 'tags this) ->
        fun (x12257 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12256) "icon"
            (Ojs.string_to_js x12257)
    let (get_image : 'tags this -> string option) =
      fun (x12259 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12259) "image")
    let (set_image : 'tags this -> string -> unit) =
      fun (x12262 : 'tags this) ->
        fun (x12263 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12262) "image"
            (Ojs.string_to_js x12263)
    let (get_lang : 'tags this -> string option) =
      fun (x12265 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12265) "lang")
    let (set_lang : 'tags this -> string -> unit) =
      fun (x12268 : 'tags this) ->
        fun (x12269 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12268) "lang"
            (Ojs.string_to_js x12269)
    let (get_renotify : 'tags this -> bool option) =
      fun (x12271 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12271) "renotify")
    let (set_renotify : 'tags this -> bool -> unit) =
      fun (x12274 : 'tags this) ->
        fun (x12275 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12274) "renotify"
            (Ojs.bool_to_js x12275)
    let (get_requireInteraction : 'tags this -> bool option) =
      fun (x12277 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12277)
             "requireInteraction")
    let (set_requireInteraction : 'tags this -> bool -> unit) =
      fun (x12280 : 'tags this) ->
        fun (x12281 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12280)
            "requireInteraction" (Ojs.bool_to_js x12281)
    let (get_silent : 'tags this -> bool option) =
      fun (x12283 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12283) "silent")
    let (set_silent : 'tags this -> bool -> unit) =
      fun (x12286 : 'tags this) ->
        fun (x12287 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12286) "silent"
            (Ojs.bool_to_js x12287)
    let (get_tag : 'tags this -> string option) =
      fun (x12289 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12289) "tag")
    let (set_tag : 'tags this -> string -> unit) =
      fun (x12292 : 'tags this) ->
        fun (x12293 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12292) "tag"
            (Ojs.string_to_js x12293)
    let (get_timestamp : 'tags this -> EpochTimeStamp.t option) =
      fun (x12295 : 'tags this) ->
        Ojs.option_of_js EpochTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12295) "timestamp")
    let (set_timestamp : 'tags this -> EpochTimeStamp.t -> unit) =
      fun (x12298 : 'tags this) ->
        fun (x12299 : EpochTimeStamp.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12298) "timestamp"
            (EpochTimeStamp.t_to_js x12299)
    let (get_vibrate : 'tags this -> VibratePattern.t option) =
      fun (x12301 : 'tags this) ->
        Ojs.option_of_js VibratePattern.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12301) "vibrate")
    let (set_vibrate : 'tags this -> VibratePattern.t -> unit) =
      fun (x12304 : 'tags this) ->
        fun (x12305 : VibratePattern.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12304) "vibrate"
            (VibratePattern.t_to_js x12305)
    let (create :
      ?actions:NotificationAction.t list ->
        ?badge:string ->
          ?body:string ->
            ?data:any ->
              ?dir:NotificationDirection.t ->
                ?icon:string ->
                  ?image:string ->
                    ?lang:string ->
                      ?renotify:bool ->
                        ?requireInteraction:bool ->
                          ?silent:bool ->
                            ?tag:string ->
                              ?timestamp:EpochTimeStamp.t ->
                                ?vibrate:VibratePattern.t -> unit -> t)
      =
      fun ?actions:(x12307 : NotificationAction.t list option) ->
        fun ?badge:(x12308 : string option) ->
          fun ?body:(x12309 : string option) ->
            fun ?data:(x12310 : any option) ->
              fun ?dir:(x12311 : NotificationDirection.t option) ->
                fun ?icon:(x12312 : string option) ->
                  fun ?image:(x12313 : string option) ->
                    fun ?lang:(x12314 : string option) ->
                      fun ?renotify:(x12315 : bool option) ->
                        fun ?requireInteraction:(x12316 : bool option) ->
                          fun ?silent:(x12317 : bool option) ->
                            fun ?tag:(x12318 : string option) ->
                              fun
                                ?timestamp:(x12319 : EpochTimeStamp.t option)
                                ->
                                fun
                                  ?vibrate:(x12320 : VibratePattern.t option)
                                  ->
                                  fun () ->
                                    let x12321 = Ojs.empty_obj () in
                                    (match x12307 with
                                     | Some x12335 ->
                                         Ojs.set_prop_ascii x12321 "actions"
                                           (Ojs.list_to_js
                                              NotificationAction.t_to_js
                                              x12335)
                                     | None -> ());
                                    (match x12308 with
                                     | Some x12334 ->
                                         Ojs.set_prop_ascii x12321 "badge"
                                           (Ojs.string_to_js x12334)
                                     | None -> ());
                                    (match x12309 with
                                     | Some x12333 ->
                                         Ojs.set_prop_ascii x12321 "body"
                                           (Ojs.string_to_js x12333)
                                     | None -> ());
                                    (match x12310 with
                                     | Some x12332 ->
                                         Ojs.set_prop_ascii x12321 "data"
                                           (any_to_js x12332)
                                     | None -> ());
                                    (match x12311 with
                                     | Some x12331 ->
                                         Ojs.set_prop_ascii x12321 "dir"
                                           (NotificationDirection.t_to_js
                                              x12331)
                                     | None -> ());
                                    (match x12312 with
                                     | Some x12330 ->
                                         Ojs.set_prop_ascii x12321 "icon"
                                           (Ojs.string_to_js x12330)
                                     | None -> ());
                                    (match x12313 with
                                     | Some x12329 ->
                                         Ojs.set_prop_ascii x12321 "image"
                                           (Ojs.string_to_js x12329)
                                     | None -> ());
                                    (match x12314 with
                                     | Some x12328 ->
                                         Ojs.set_prop_ascii x12321 "lang"
                                           (Ojs.string_to_js x12328)
                                     | None -> ());
                                    (match x12315 with
                                     | Some x12327 ->
                                         Ojs.set_prop_ascii x12321 "renotify"
                                           (Ojs.bool_to_js x12327)
                                     | None -> ());
                                    (match x12316 with
                                     | Some x12326 ->
                                         Ojs.set_prop_ascii x12321
                                           "requireInteraction"
                                           (Ojs.bool_to_js x12326)
                                     | None -> ());
                                    (match x12317 with
                                     | Some x12325 ->
                                         Ojs.set_prop_ascii x12321 "silent"
                                           (Ojs.bool_to_js x12325)
                                     | None -> ());
                                    (match x12318 with
                                     | Some x12324 ->
                                         Ojs.set_prop_ascii x12321 "tag"
                                           (Ojs.string_to_js x12324)
                                     | None -> ());
                                    (match x12319 with
                                     | Some x12323 ->
                                         Ojs.set_prop_ascii x12321
                                           "timestamp"
                                           (EpochTimeStamp.t_to_js x12323)
                                     | None -> ());
                                    (match x12320 with
                                     | Some x12322 ->
                                         Ojs.set_prop_ascii x12321 "vibrate"
                                           (VibratePattern.t_to_js x12322)
                                     | None -> ());
                                    t_of_js x12321
    let cast_from = Obj.magic
  end
module Notification =
  struct
    type t = [ `EventTarget  | `Notification ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12338 : Ojs.t) -> t_of_js x12338
    and t_0_to_js : t_0 -> Ojs.t = fun (x12337 : t) -> t_to_js x12337
    type tags = [ `EventTarget  | `Notification ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Notification ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12341 : Ojs.t) -> intf_of_js __tags_of_js x12341
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12339 : __tags intf) -> intf_to_js __tags_to_js x12339
    let (get_body : 'tags this -> string) =
      fun (x12343 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12343) "body")
    let (get_data : 'tags this -> any) =
      fun (x12345 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x12345) "data")
    let (get_dir : 'tags this -> NotificationDirection.t) =
      fun (x12347 : 'tags this) ->
        NotificationDirection.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12347) "dir")
    let (get_icon : 'tags this -> string) =
      fun (x12349 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12349) "icon")
    let (get_lang : 'tags this -> string) =
      fun (x12351 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12351) "lang")
    let (get_onclick : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x12353 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12355 : Ojs.t) ->
             fun ~this:(x12356 : t) ->
               fun ~ev:(x12357 : Event.t) ->
                 any_of_js
                   (Ojs.apply x12355
                      [|(t_to_js x12356);(Event.t_to_js x12357)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12353) "onclick")
    let (set_onclick :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x12358 : 'tags this) ->
        fun (x12359 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12358) "onclick"
            (Ojs.option_to_js
               (fun (x12360 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12361 : Ojs.t) ->
                       fun (x12362 : Ojs.t) ->
                         any_to_js
                           (x12360 ~this:(t_of_js x12361)
                              ~ev:(Event.t_of_js x12362)))) x12359)
    let (get_onclose : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x12364 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12366 : Ojs.t) ->
             fun ~this:(x12367 : t) ->
               fun ~ev:(x12368 : Event.t) ->
                 any_of_js
                   (Ojs.apply x12366
                      [|(t_to_js x12367);(Event.t_to_js x12368)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12364) "onclose")
    let (set_onclose :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x12369 : 'tags this) ->
        fun (x12370 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12369) "onclose"
            (Ojs.option_to_js
               (fun (x12371 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12372 : Ojs.t) ->
                       fun (x12373 : Ojs.t) ->
                         any_to_js
                           (x12371 ~this:(t_of_js x12372)
                              ~ev:(Event.t_of_js x12373)))) x12370)
    let (get_onerror : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x12375 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12377 : Ojs.t) ->
             fun ~this:(x12378 : t) ->
               fun ~ev:(x12379 : Event.t) ->
                 any_of_js
                   (Ojs.apply x12377
                      [|(t_to_js x12378);(Event.t_to_js x12379)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12375) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x12380 : 'tags this) ->
        fun (x12381 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12380) "onerror"
            (Ojs.option_to_js
               (fun (x12382 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12383 : Ojs.t) ->
                       fun (x12384 : Ojs.t) ->
                         any_to_js
                           (x12382 ~this:(t_of_js x12383)
                              ~ev:(Event.t_of_js x12384)))) x12381)
    let (get_onshow : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x12386 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12388 : Ojs.t) ->
             fun ~this:(x12389 : t) ->
               fun ~ev:(x12390 : Event.t) ->
                 any_of_js
                   (Ojs.apply x12388
                      [|(t_to_js x12389);(Event.t_to_js x12390)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12386) "onshow")
    let (set_onshow :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x12391 : 'tags this) ->
        fun (x12392 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12391) "onshow"
            (Ojs.option_to_js
               (fun (x12393 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12394 : Ojs.t) ->
                       fun (x12395 : Ojs.t) ->
                         any_to_js
                           (x12393 ~this:(t_of_js x12394)
                              ~ev:(Event.t_of_js x12395)))) x12392)
    let (get_tag : 'tags this -> string) =
      fun (x12397 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12397) "tag")
    let (get_title : 'tags this -> string) =
      fun (x12399 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12399) "title")
    let (close : 'tags this -> unit) =
      fun (x12401 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x12401) "close" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12412 : 'tags this) ->
        fun ~type_:(x12403 : 'K) ->
          fun ~listener:(x12404 : this:t -> ev:any -> any) ->
            fun
              ?options:(x12405 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12414 = this_to_js Obj.magic x12412 in
                   Ojs.call (Ojs.get_prop_ascii x12414 "addEventListener")
                     "apply"
                     [|x12414;((let x12406 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12406 "push"
                                     [|(Obj.magic x12403)|]);
                                ignore
                                  (Ojs.call x12406 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12410 : Ojs.t) ->
                                             fun (x12411 : Ojs.t) ->
                                               any_to_js
                                                 (x12404
                                                    ~this:(t_of_js x12410)
                                                    ~ev:(any_of_js x12411))))|]);
                                (match x12405 with
                                 | Some x12407 ->
                                     ignore
                                       (Ojs.call x12406 "push"
                                          [|((match x12407 with
                                              | `U1 x12408 ->
                                                  Ojs.bool_to_js x12408
                                              | `U2 x12409 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x12409))|])
                                 | None -> ());
                                x12406))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12422 : 'tags this) ->
        fun ~type_:(x12415 : string) ->
          fun ~listener:(x12416 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x12417 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12424 = this_to_js Obj.magic x12422 in
                   Ojs.call (Ojs.get_prop_ascii x12424 "addEventListener")
                     "apply"
                     [|x12424;((let x12418 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12418 "push"
                                     [|(Ojs.string_to_js x12415)|]);
                                ignore
                                  (Ojs.call x12418 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12416)|]);
                                (match x12417 with
                                 | Some x12419 ->
                                     ignore
                                       (Ojs.call x12418 "push"
                                          [|((match x12419 with
                                              | `U1 x12420 ->
                                                  Ojs.bool_to_js x12420
                                              | `U2 x12421 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x12421))|])
                                 | None -> ());
                                x12418))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12434 : 'tags this) ->
        fun ~type_:(x12425 : 'K) ->
          fun ~listener:(x12426 : this:t -> ev:any -> any) ->
            fun
              ?options:(x12427 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12436 = this_to_js Obj.magic x12434 in
                   Ojs.call (Ojs.get_prop_ascii x12436 "removeEventListener")
                     "apply"
                     [|x12436;((let x12428 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12428 "push"
                                     [|(Obj.magic x12425)|]);
                                ignore
                                  (Ojs.call x12428 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12432 : Ojs.t) ->
                                             fun (x12433 : Ojs.t) ->
                                               any_to_js
                                                 (x12426
                                                    ~this:(t_of_js x12432)
                                                    ~ev:(any_of_js x12433))))|]);
                                (match x12427 with
                                 | Some x12429 ->
                                     ignore
                                       (Ojs.call x12428 "push"
                                          [|((match x12429 with
                                              | `U1 x12430 ->
                                                  Ojs.bool_to_js x12430
                                              | `U2 x12431 ->
                                                  EventListenerOptions.t_to_js
                                                    x12431))|])
                                 | None -> ());
                                x12428))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12444 : 'tags this) ->
        fun ~type_:(x12437 : string) ->
          fun ~listener:(x12438 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x12439 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12446 = this_to_js Obj.magic x12444 in
                   Ojs.call (Ojs.get_prop_ascii x12446 "removeEventListener")
                     "apply"
                     [|x12446;((let x12440 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12440 "push"
                                     [|(Ojs.string_to_js x12437)|]);
                                ignore
                                  (Ojs.call x12440 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12438)|]);
                                (match x12439 with
                                 | Some x12441 ->
                                     ignore
                                       (Ojs.call x12440 "push"
                                          [|((match x12441 with
                                              | `U1 x12442 ->
                                                  Ojs.bool_to_js x12442
                                              | `U2 x12443 ->
                                                  EventListenerOptions.t_to_js
                                                    x12443))|])
                                 | None -> ());
                                x12440))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Notification")
             "prototype")
    let (create :
      title:string -> ?options:NotificationOptions.t -> unit -> t) =
      fun ~title:(x12447 : string) ->
        fun ?options:(x12448 : NotificationOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Notification")
                 (let x12449 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x12449 "push" [|(Ojs.string_to_js x12447)|]);
                  (match x12448 with
                   | Some x12450 ->
                       ignore
                         (Ojs.call x12449 "push"
                            [|(NotificationOptions.t_to_js x12450)|])
                   | None -> ());
                  x12449))
    let (permission : unit -> NotificationPermission.t) =
      fun () ->
        NotificationPermission.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Notification")
             "permission")
  end
module NotificationEventInit =
  struct
    type t =
      [ `EventInit  | `ExtendableEventInit  | `NotificationEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12452 : Ojs.t) -> t_of_js x12452
    and t_0_to_js : t_0 -> Ojs.t = fun (x12451 : t) -> t_to_js x12451
    type tags =
      [ `EventInit  | `ExtendableEventInit  | `NotificationEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `NotificationEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12455 : Ojs.t) -> intf_of_js __tags_of_js x12455
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12453 : __tags intf) -> intf_to_js __tags_to_js x12453
    let (get_action : 'tags this -> string option) =
      fun (x12457 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12457) "action")
    let (set_action : 'tags this -> string -> unit) =
      fun (x12460 : 'tags this) ->
        fun (x12461 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12460) "action"
            (Ojs.string_to_js x12461)
    let (get_notification : 'tags this -> Notification.t) =
      fun (x12463 : 'tags this) ->
        Notification.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12463) "notification")
    let (set_notification : 'tags this -> Notification.t -> unit) =
      fun (x12465 : 'tags this) ->
        fun (x12466 : Notification.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12465) "notification"
            (Notification.t_to_js x12466)
    let (create : ?action:string -> notification:Notification.t -> unit -> t)
      =
      fun ?action:(x12468 : string option) ->
        fun ~notification:(x12469 : Notification.t) ->
          fun () ->
            let x12470 = Ojs.empty_obj () in
            (match x12468 with
             | Some x12471 ->
                 Ojs.set_prop_ascii x12470 "action" (Ojs.string_to_js x12471)
             | None -> ());
            Ojs.set_prop_ascii x12470 "notification"
              (Notification.t_to_js x12469);
            t_of_js x12470
    let cast_from = Obj.magic
  end
module NotificationEvent =
  struct
    type t = [ `Event  | `ExtendableEvent  | `NotificationEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12473 : Ojs.t) -> t_of_js x12473
    and t_0_to_js : t_0 -> Ojs.t = fun (x12472 : t) -> t_to_js x12472
    type tags = [ `Event  | `ExtendableEvent  | `NotificationEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NotificationEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12476 : Ojs.t) -> intf_of_js __tags_of_js x12476
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12474 : __tags intf) -> intf_to_js __tags_to_js x12474
    let (get_action : 'tags this -> string) =
      fun (x12478 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12478) "action")
    let (get_notification : 'tags this -> Notification.t) =
      fun (x12480 : 'tags this) ->
        Notification.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12480) "notification")
    let (create : action:string -> notification:Notification.t -> unit -> t)
      =
      fun ~action:(x12482 : string) ->
        fun ~notification:(x12483 : Notification.t) ->
          fun () ->
            let x12484 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x12484 "action" (Ojs.string_to_js x12482);
            Ojs.set_prop_ascii x12484 "notification"
              (Notification.t_to_js x12483);
            t_of_js x12484
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "NotificationEvent") "prototype")
    let (create' :
      type_:string -> eventInitDict:NotificationEventInit.t -> t) =
      fun ~type_:(x12485 : string) ->
        fun ~eventInitDict:(x12486 : NotificationEventInit.t) ->
          t_of_js
            (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "NotificationEvent")
               [|(Ojs.string_to_js x12485);(NotificationEventInit.t_to_js
                                              x12486)|])
  end
module FetchEventInit =
  struct
    type t = [ `EventInit  | `ExtendableEventInit  | `FetchEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12488 : Ojs.t) -> t_of_js x12488
    and t_0_to_js : t_0 -> Ojs.t = fun (x12487 : t) -> t_to_js x12487
    type tags = [ `EventInit  | `ExtendableEventInit  | `FetchEventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FetchEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12491 : Ojs.t) -> intf_of_js __tags_of_js x12491
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12489 : __tags intf) -> intf_to_js __tags_to_js x12489
    let (get_clientId : 'tags this -> string option) =
      fun (x12493 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12493) "clientId")
    let (set_clientId : 'tags this -> string -> unit) =
      fun (x12496 : 'tags this) ->
        fun (x12497 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12496) "clientId"
            (Ojs.string_to_js x12497)
    let (get_handled : 'tags this -> undefined Promise.t_1 option) =
      fun (x12499 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12501 : Ojs.t) -> Promise.t_1_of_js undefined_of_js x12501)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12499) "handled")
    let (set_handled : 'tags this -> undefined Promise.t_1 -> unit) =
      fun (x12503 : 'tags this) ->
        fun (x12504 : undefined Promise.t_1) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12503) "handled"
            (Promise.t_1_to_js undefined_to_js x12504)
    let (get_preloadResponse : 'tags this -> any Promise.t_1 option) =
      fun (x12507 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12509 : Ojs.t) -> Promise.t_1_of_js any_of_js x12509)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12507) "preloadResponse")
    let (set_preloadResponse : 'tags this -> any Promise.t_1 -> unit) =
      fun (x12511 : 'tags this) ->
        fun (x12512 : any Promise.t_1) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12511) "preloadResponse"
            (Promise.t_1_to_js any_to_js x12512)
    let (get_replacesClientId : 'tags this -> string option) =
      fun (x12515 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12515)
             "replacesClientId")
    let (set_replacesClientId : 'tags this -> string -> unit) =
      fun (x12518 : 'tags this) ->
        fun (x12519 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12518) "replacesClientId"
            (Ojs.string_to_js x12519)
    let (get_request : 'tags this -> Request.t) =
      fun (x12521 : 'tags this) ->
        Request.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12521) "request")
    let (set_request : 'tags this -> Request.t -> unit) =
      fun (x12523 : 'tags this) ->
        fun (x12524 : Request.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12523) "request"
            (Request.t_to_js x12524)
    let (get_resultingClientId : 'tags this -> string option) =
      fun (x12526 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12526)
             "resultingClientId")
    let (set_resultingClientId : 'tags this -> string -> unit) =
      fun (x12529 : 'tags this) ->
        fun (x12530 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12529)
            "resultingClientId" (Ojs.string_to_js x12530)
    let (create :
      ?clientId:string ->
        ?handled:undefined Promise.t_1 ->
          ?preloadResponse:any Promise.t_1 ->
            ?replacesClientId:string ->
              request:Request.t -> ?resultingClientId:string -> unit -> t)
      =
      fun ?clientId:(x12532 : string option) ->
        fun ?handled:(x12533 : undefined Promise.t_1 option) ->
          fun ?preloadResponse:(x12534 : any Promise.t_1 option) ->
            fun ?replacesClientId:(x12535 : string option) ->
              fun ~request:(x12536 : Request.t) ->
                fun ?resultingClientId:(x12537 : string option) ->
                  fun () ->
                    let x12538 = Ojs.empty_obj () in
                    (match x12532 with
                     | Some x12545 ->
                         Ojs.set_prop_ascii x12538 "clientId"
                           (Ojs.string_to_js x12545)
                     | None -> ());
                    (match x12533 with
                     | Some x12543 ->
                         Ojs.set_prop_ascii x12538 "handled"
                           (Promise.t_1_to_js undefined_to_js x12543)
                     | None -> ());
                    (match x12534 with
                     | Some x12541 ->
                         Ojs.set_prop_ascii x12538 "preloadResponse"
                           (Promise.t_1_to_js any_to_js x12541)
                     | None -> ());
                    (match x12535 with
                     | Some x12540 ->
                         Ojs.set_prop_ascii x12538 "replacesClientId"
                           (Ojs.string_to_js x12540)
                     | None -> ());
                    Ojs.set_prop_ascii x12538 "request"
                      (Request.t_to_js x12536);
                    (match x12537 with
                     | Some x12539 ->
                         Ojs.set_prop_ascii x12538 "resultingClientId"
                           (Ojs.string_to_js x12539)
                     | None -> ());
                    t_of_js x12538
    let cast_from = Obj.magic
  end
module FetchEvent =
  struct
    type t = [ `Event  | `ExtendableEvent  | `FetchEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12547 : Ojs.t) -> t_of_js x12547
    and t_0_to_js : t_0 -> Ojs.t = fun (x12546 : t) -> t_to_js x12546
    type tags = [ `Event  | `ExtendableEvent  | `FetchEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FetchEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12550 : Ojs.t) -> intf_of_js __tags_of_js x12550
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12548 : __tags intf) -> intf_to_js __tags_to_js x12548
    let (get_clientId : 'tags this -> string) =
      fun (x12552 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12552) "clientId")
    let (get_handled : 'tags this -> undefined Promise.t_1) =
      fun (x12554 : 'tags this) ->
        Promise.t_1_of_js undefined_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12554) "handled")
    let (get_request : 'tags this -> Request.t) =
      fun (x12557 : 'tags this) ->
        Request.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12557) "request")
    let (get_resultingClientId : 'tags this -> string) =
      fun (x12559 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12559)
             "resultingClientId")
    let (respondWith :
      'tags this ->
        r:[ `U1 of Response.t  | `U2 of Response.t PromiseLike.t_1 ] -> unit)
      =
      fun (x12565 : 'tags this) ->
        fun
          ~r:(x12561 :
               [ `U1 of Response.t  | `U2 of Response.t PromiseLike.t_1 ])
          ->
          ignore
            (Ojs.call (this_to_js Obj.magic x12565) "respondWith"
               [|((match x12561 with
                   | `U1 x12562 -> Response.t_to_js x12562
                   | `U2 x12563 ->
                       PromiseLike.t_1_to_js Response.t_to_js x12563))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FetchEvent")
             "prototype")
    let (create : type_:string -> eventInitDict:FetchEventInit.t -> t) =
      fun ~type_:(x12567 : string) ->
        fun ~eventInitDict:(x12568 : FetchEventInit.t) ->
          t_of_js
            (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FetchEvent")
               [|(Ojs.string_to_js x12567);(FetchEventInit.t_to_js x12568)|])
  end
module FrameType =
  struct
    type t =
      [ `L_s122_nested  | `L_s130_none  | `L_s197_top_level 
      | `L_s42_auxiliary ]
    let rec t_of_js : Ojs.t -> t =
      fun (x12570 : Ojs.t) ->
        let x12571 = x12570 in
        match Ojs.string_of_js x12571 with
        | "nested" -> `L_s122_nested
        | "none" -> `L_s130_none
        | "top-level" -> `L_s197_top_level
        | "auxiliary" -> `L_s42_auxiliary
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x12569 :
          [ `L_s122_nested  | `L_s130_none  | `L_s197_top_level 
          | `L_s42_auxiliary ])
        ->
        match x12569 with
        | `L_s122_nested -> Ojs.string_to_js "nested"
        | `L_s130_none -> Ojs.string_to_js "none"
        | `L_s197_top_level -> Ojs.string_to_js "top-level"
        | `L_s42_auxiliary -> Ojs.string_to_js "auxiliary"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12573 : Ojs.t) -> t_of_js x12573
    and t_0_to_js : t_0 -> Ojs.t = fun (x12572 : t) -> t_to_js x12572
  end
module ClientTypes =
  struct
    type t =
      [ `L_s180_sharedworker  | `L_s214_window  | `L_s215_worker 
      | `L_s35_all ]
    let rec t_of_js : Ojs.t -> t =
      fun (x12575 : Ojs.t) ->
        let x12576 = x12575 in
        match Ojs.string_of_js x12576 with
        | "sharedworker" -> `L_s180_sharedworker
        | "window" -> `L_s214_window
        | "worker" -> `L_s215_worker
        | "all" -> `L_s35_all
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x12574 :
          [ `L_s180_sharedworker  | `L_s214_window  | `L_s215_worker 
          | `L_s35_all ])
        ->
        match x12574 with
        | `L_s180_sharedworker -> Ojs.string_to_js "sharedworker"
        | `L_s214_window -> Ojs.string_to_js "window"
        | `L_s215_worker -> Ojs.string_to_js "worker"
        | `L_s35_all -> Ojs.string_to_js "all"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12578 : Ojs.t) -> t_of_js x12578
    and t_0_to_js : t_0 -> Ojs.t = fun (x12577 : t) -> t_to_js x12577
  end
module Client =
  struct
    type t = [ `Client ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12580 : Ojs.t) -> t_of_js x12580
    and t_0_to_js : t_0 -> Ojs.t = fun (x12579 : t) -> t_to_js x12579
    type tags = [ `Client ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Client ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12583 : Ojs.t) -> intf_of_js __tags_of_js x12583
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12581 : __tags intf) -> intf_to_js __tags_to_js x12581
    let (get_frameType : 'tags this -> FrameType.t) =
      fun (x12585 : 'tags this) ->
        FrameType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12585) "frameType")
    let (get_id : 'tags this -> string) =
      fun (x12587 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12587) "id")
    let (get_type : 'tags this -> ClientTypes.t) =
      fun (x12589 : 'tags this) ->
        ClientTypes.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12589) "type")
    let (get_url : 'tags this -> string) =
      fun (x12591 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12591) "url")
    let (postMessage :
      'tags this -> message:any -> transfer:Transferable.t list -> unit) =
      fun (x12596 : 'tags this) ->
        fun ~message:(x12593 : any) ->
          fun ~transfer:(x12594 : Transferable.t list) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x12596) "postMessage"
                 [|(any_to_js x12593);(Ojs.list_to_js Transferable.t_to_js
                                         x12594)|])
    let (postMessage' :
      'tags this ->
        message:any -> ?options:StructuredSerializeOptions.t -> unit -> unit)
      =
      fun (x12602 : 'tags this) ->
        fun ~message:(x12598 : any) ->
          fun ?options:(x12599 : StructuredSerializeOptions.t option) ->
            fun () ->
              ignore
                (let x12604 = this_to_js Obj.magic x12602 in
                 Ojs.call (Ojs.get_prop_ascii x12604 "postMessage") "apply"
                   [|x12604;((let x12600 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x12600 "push"
                                   [|(any_to_js x12598)|]);
                              (match x12599 with
                               | Some x12601 ->
                                   ignore
                                     (Ojs.call x12600 "push"
                                        [|(StructuredSerializeOptions.t_to_js
                                             x12601)|])
                               | None -> ());
                              x12600))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Client")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Client") [||])
  end
module ExtendableMessageEventInit =
  struct
    type t =
      [ `EventInit  | `ExtendableEventInit  | `ExtendableMessageEventInit ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12606 : Ojs.t) -> t_of_js x12606
    and t_0_to_js : t_0 -> Ojs.t = fun (x12605 : t) -> t_to_js x12605
    type tags =
      [ `EventInit  | `ExtendableEventInit  | `ExtendableMessageEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ExtendableMessageEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12609 : Ojs.t) -> intf_of_js __tags_of_js x12609
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12607 : __tags intf) -> intf_to_js __tags_to_js x12607
    let (get_data : 'tags this -> any option) =
      fun (x12611 : 'tags this) ->
        Ojs.option_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12611) "data")
    let (set_data : 'tags this -> any -> unit) =
      fun (x12614 : 'tags this) ->
        fun (x12615 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12614) "data"
            (any_to_js x12615)
    let (get_lastEventId : 'tags this -> string option) =
      fun (x12617 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12617) "lastEventId")
    let (set_lastEventId : 'tags this -> string -> unit) =
      fun (x12620 : 'tags this) ->
        fun (x12621 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12620) "lastEventId"
            (Ojs.string_to_js x12621)
    let (get_origin : 'tags this -> string option) =
      fun (x12623 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12623) "origin")
    let (set_origin : 'tags this -> string -> unit) =
      fun (x12626 : 'tags this) ->
        fun (x12627 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12626) "origin"
            (Ojs.string_to_js x12627)
    let (get_ports : 'tags this -> MessagePort.t list option) =
      fun (x12629 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12631 : Ojs.t) -> Ojs.list_of_js MessagePort.t_of_js x12631)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12629) "ports")
    let (set_ports : 'tags this -> MessagePort.t list -> unit) =
      fun (x12633 : 'tags this) ->
        fun (x12634 : MessagePort.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12633) "ports"
            (Ojs.list_to_js MessagePort.t_to_js x12634)
    let (get_source :
      'tags this -> (Client.t, MessagePort.t, ServiceWorker.t) union3 option)
      =
      fun (x12637 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12639 : Ojs.t) ->
             union3_of_js Client.t_of_js MessagePort.t_of_js
               ServiceWorker.t_of_js x12639)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12637) "source")
    let (set_source :
      'tags this ->
        [ `Null  | `U1 of Client.t  | `U2 of ServiceWorker.t 
        | `U3 of MessagePort.t ] -> unit)
      =
      fun (x12643 : 'tags this) ->
        fun
          (x12644 :
            [ `Null  | `U1 of Client.t  | `U2 of ServiceWorker.t 
            | `U3 of MessagePort.t ])
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12643) "source"
            (match x12644 with
             | `Null -> Ojs.null
             | `U1 x12645 -> Client.t_to_js x12645
             | `U2 x12646 -> ServiceWorker.t_to_js x12646
             | `U3 x12647 -> MessagePort.t_to_js x12647)
    let (create :
      ?data:any ->
        ?lastEventId:string ->
          ?origin:string ->
            ?ports:MessagePort.t list ->
              ?source:(Client.t, MessagePort.t, ServiceWorker.t) union3 ->
                unit -> t)
      =
      fun ?data:(x12649 : any option) ->
        fun ?lastEventId:(x12650 : string option) ->
          fun ?origin:(x12651 : string option) ->
            fun ?ports:(x12652 : MessagePort.t list option) ->
              fun
                ?source:(x12653 :
                          (Client.t, MessagePort.t, ServiceWorker.t) union3
                            option)
                ->
                fun () ->
                  let x12654 = Ojs.empty_obj () in
                  (match x12649 with
                   | Some x12663 ->
                       Ojs.set_prop_ascii x12654 "data" (any_to_js x12663)
                   | None -> ());
                  (match x12650 with
                   | Some x12662 ->
                       Ojs.set_prop_ascii x12654 "lastEventId"
                         (Ojs.string_to_js x12662)
                   | None -> ());
                  (match x12651 with
                   | Some x12661 ->
                       Ojs.set_prop_ascii x12654 "origin"
                         (Ojs.string_to_js x12661)
                   | None -> ());
                  (match x12652 with
                   | Some x12659 ->
                       Ojs.set_prop_ascii x12654 "ports"
                         (Ojs.list_to_js MessagePort.t_to_js x12659)
                   | None -> ());
                  (match x12653 with
                   | Some x12655 ->
                       Ojs.set_prop_ascii x12654 "source"
                         (union3_to_js Client.t_to_js MessagePort.t_to_js
                            ServiceWorker.t_to_js x12655)
                   | None -> ());
                  t_of_js x12654
    let cast_from = Obj.magic
  end
module ExtendableMessageEvent =
  struct
    type t = [ `Event  | `ExtendableEvent  | `ExtendableMessageEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12665 : Ojs.t) -> t_of_js x12665
    and t_0_to_js : t_0 -> Ojs.t = fun (x12664 : t) -> t_to_js x12664
    type tags = [ `Event  | `ExtendableEvent  | `ExtendableMessageEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ExtendableMessageEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12668 : Ojs.t) -> intf_of_js __tags_of_js x12668
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12666 : __tags intf) -> intf_to_js __tags_to_js x12666
    let (get_data : 'tags this -> any) =
      fun (x12670 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x12670) "data")
    let (get_lastEventId : 'tags this -> string) =
      fun (x12672 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12672) "lastEventId")
    let (get_origin : 'tags this -> string) =
      fun (x12674 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12674) "origin")
    let (get_ports : 'tags this -> MessagePort.t list) =
      fun (x12676 : 'tags this) ->
        Ojs.list_of_js MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12676) "ports")
    let (get_source :
      'tags this -> (Client.t, MessagePort.t, ServiceWorker.t) union3 option)
      =
      fun (x12679 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12681 : Ojs.t) ->
             union3_of_js Client.t_of_js MessagePort.t_of_js
               ServiceWorker.t_of_js x12681)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12679) "source")
    let (create :
      data:any ->
        lastEventId:string ->
          origin:string ->
            ports:MessagePort.t list ->
              ?source:(Client.t, MessagePort.t, ServiceWorker.t) union3 ->
                unit -> t)
      =
      fun ~data:(x12685 : any) ->
        fun ~lastEventId:(x12686 : string) ->
          fun ~origin:(x12687 : string) ->
            fun ~ports:(x12688 : MessagePort.t list) ->
              fun
                ?source:(x12689 :
                          (Client.t, MessagePort.t, ServiceWorker.t) union3
                            option)
                ->
                fun () ->
                  let x12690 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x12690 "data" (any_to_js x12685);
                  Ojs.set_prop_ascii x12690 "lastEventId"
                    (Ojs.string_to_js x12686);
                  Ojs.set_prop_ascii x12690 "origin"
                    (Ojs.string_to_js x12687);
                  Ojs.set_prop_ascii x12690 "ports"
                    (Ojs.list_to_js MessagePort.t_to_js x12688);
                  (match x12689 with
                   | Some x12691 ->
                       Ojs.set_prop_ascii x12690 "source"
                         (union3_to_js Client.t_to_js MessagePort.t_to_js
                            ServiceWorker.t_to_js x12691)
                   | None -> ());
                  t_of_js x12690
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ExtendableMessageEvent")
             "prototype")
    let (create' :
      type_:string ->
        ?eventInitDict:ExtendableMessageEventInit.t -> unit -> t)
      =
      fun ~type_:(x12696 : string) ->
        fun ?eventInitDict:(x12697 : ExtendableMessageEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "ExtendableMessageEvent")
                 (let x12698 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x12698 "push" [|(Ojs.string_to_js x12696)|]);
                  (match x12697 with
                   | Some x12699 ->
                       ignore
                         (Ojs.call x12698 "push"
                            [|(ExtendableMessageEventInit.t_to_js x12699)|])
                   | None -> ());
                  x12698))
  end
module ServiceWorkerGlobalScopeEventMap =
  struct
    type t =
      [ `ServiceWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12701 : Ojs.t) -> t_of_js x12701
    and t_0_to_js : t_0 -> Ojs.t = fun (x12700 : t) -> t_to_js x12700
    type tags =
      [ `ServiceWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerGlobalScopeEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12704 : Ojs.t) -> intf_of_js __tags_of_js x12704
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12702 : __tags intf) -> intf_to_js __tags_to_js x12702
    let (get_activate : 'tags this -> ExtendableEvent.t) =
      fun (x12706 : 'tags this) ->
        ExtendableEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12706) "activate")
    let (set_activate : 'tags this -> ExtendableEvent.t -> unit) =
      fun (x12708 : 'tags this) ->
        fun (x12709 : ExtendableEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12708) "activate"
            (ExtendableEvent.t_to_js x12709)
    let (get_fetch : 'tags this -> FetchEvent.t) =
      fun (x12711 : 'tags this) ->
        FetchEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12711) "fetch")
    let (set_fetch : 'tags this -> FetchEvent.t -> unit) =
      fun (x12713 : 'tags this) ->
        fun (x12714 : FetchEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12713) "fetch"
            (FetchEvent.t_to_js x12714)
    let (get_install : 'tags this -> ExtendableEvent.t) =
      fun (x12716 : 'tags this) ->
        ExtendableEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12716) "install")
    let (set_install : 'tags this -> ExtendableEvent.t -> unit) =
      fun (x12718 : 'tags this) ->
        fun (x12719 : ExtendableEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12718) "install"
            (ExtendableEvent.t_to_js x12719)
    let (get_message : 'tags this -> ExtendableMessageEvent.t) =
      fun (x12721 : 'tags this) ->
        ExtendableMessageEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12721) "message")
    let (set_message : 'tags this -> ExtendableMessageEvent.t -> unit) =
      fun (x12723 : 'tags this) ->
        fun (x12724 : ExtendableMessageEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12723) "message"
            (ExtendableMessageEvent.t_to_js x12724)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x12726 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12726) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x12728 : 'tags this) ->
        fun (x12729 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12728) "messageerror"
            (MessageEvent.t_0_to_js x12729)
    let (get_notificationclick : 'tags this -> NotificationEvent.t) =
      fun (x12731 : 'tags this) ->
        NotificationEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12731)
             "notificationclick")
    let (set_notificationclick : 'tags this -> NotificationEvent.t -> unit) =
      fun (x12733 : 'tags this) ->
        fun (x12734 : NotificationEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12733)
            "notificationclick" (NotificationEvent.t_to_js x12734)
    let (get_notificationclose : 'tags this -> NotificationEvent.t) =
      fun (x12736 : 'tags this) ->
        NotificationEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12736)
             "notificationclose")
    let (set_notificationclose : 'tags this -> NotificationEvent.t -> unit) =
      fun (x12738 : 'tags this) ->
        fun (x12739 : NotificationEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12738)
            "notificationclose" (NotificationEvent.t_to_js x12739)
    let (get_push : 'tags this -> PushEvent.t) =
      fun (x12741 : 'tags this) ->
        PushEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12741) "push")
    let (set_push : 'tags this -> PushEvent.t -> unit) =
      fun (x12743 : 'tags this) ->
        fun (x12744 : PushEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12743) "push"
            (PushEvent.t_to_js x12744)
    let (create :
      activate:ExtendableEvent.t ->
        fetch:FetchEvent.t ->
          install:ExtendableEvent.t ->
            message:ExtendableMessageEvent.t ->
              messageerror:MessageEvent.t_0 ->
                notificationclick:NotificationEvent.t ->
                  notificationclose:NotificationEvent.t ->
                    push:PushEvent.t -> unit -> t)
      =
      fun ~activate:(x12746 : ExtendableEvent.t) ->
        fun ~fetch:(x12747 : FetchEvent.t) ->
          fun ~install:(x12748 : ExtendableEvent.t) ->
            fun ~message:(x12749 : ExtendableMessageEvent.t) ->
              fun ~messageerror:(x12750 : MessageEvent.t_0) ->
                fun ~notificationclick:(x12751 : NotificationEvent.t) ->
                  fun ~notificationclose:(x12752 : NotificationEvent.t) ->
                    fun ~push:(x12753 : PushEvent.t) ->
                      fun () ->
                        let x12754 = Ojs.empty_obj () in
                        Ojs.set_prop_ascii x12754 "activate"
                          (ExtendableEvent.t_to_js x12746);
                        Ojs.set_prop_ascii x12754 "fetch"
                          (FetchEvent.t_to_js x12747);
                        Ojs.set_prop_ascii x12754 "install"
                          (ExtendableEvent.t_to_js x12748);
                        Ojs.set_prop_ascii x12754 "message"
                          (ExtendableMessageEvent.t_to_js x12749);
                        Ojs.set_prop_ascii x12754 "messageerror"
                          (MessageEvent.t_0_to_js x12750);
                        Ojs.set_prop_ascii x12754 "notificationclick"
                          (NotificationEvent.t_to_js x12751);
                        Ojs.set_prop_ascii x12754 "notificationclose"
                          (NotificationEvent.t_to_js x12752);
                        Ojs.set_prop_ascii x12754 "push"
                          (PushEvent.t_to_js x12753);
                        t_of_js x12754
    let cast_from = Obj.magic
  end
module ServiceWorkerUpdateViaCache =
  struct
    type t = [ `L_s130_none  | `L_s35_all  | `L_s93_imports ]
    let rec t_of_js : Ojs.t -> t =
      fun (x12756 : Ojs.t) ->
        let x12757 = x12756 in
        match Ojs.string_of_js x12757 with
        | "none" -> `L_s130_none
        | "all" -> `L_s35_all
        | "imports" -> `L_s93_imports
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x12755 : [ `L_s130_none  | `L_s35_all  | `L_s93_imports ]) ->
        match x12755 with
        | `L_s130_none -> Ojs.string_to_js "none"
        | `L_s35_all -> Ojs.string_to_js "all"
        | `L_s93_imports -> Ojs.string_to_js "imports"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12759 : Ojs.t) -> t_of_js x12759
    and t_0_to_js : t_0 -> Ojs.t = fun (x12758 : t) -> t_to_js x12758
  end
module PushSubscriptionOptionsInit =
  struct
    type t = [ `PushSubscriptionOptionsInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12761 : Ojs.t) -> t_of_js x12761
    and t_0_to_js : t_0 -> Ojs.t = fun (x12760 : t) -> t_to_js x12760
    type tags = [ `PushSubscriptionOptionsInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PushSubscriptionOptionsInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12764 : Ojs.t) -> intf_of_js __tags_of_js x12764
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12762 : __tags intf) -> intf_to_js __tags_to_js x12762
    let (get_applicationServerKey :
      'tags this ->
        [ `String of string  | `Null  | `Undefined 
        | `Other of BufferSource.t ] Primitive.t)
      =
      fun (x12766 : 'tags this) ->
        Primitive.t_of_js
          (fun (x12768 : Ojs.t) ->
             let x12769 = x12768 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x12769 "dummy") with
             | "String" -> `String (Ojs.string_of_js x12769)
             | "Null" -> `Null
             | "Undefined" -> `Undefined
             | "Other" -> `Other (BufferSource.t_of_js x12769)
             | _ -> assert false)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12766)
             "applicationServerKey")
    let (set_applicationServerKey :
      'tags this ->
        [ `Null  | `U1 of BufferSource.t  | `U2 of string ] -> unit)
      =
      fun (x12770 : 'tags this) ->
        fun (x12771 : [ `Null  | `U1 of BufferSource.t  | `U2 of string ]) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12770)
            "applicationServerKey"
            (match x12771 with
             | `Null -> Ojs.null
             | `U1 x12772 -> BufferSource.t_to_js x12772
             | `U2 x12773 -> Ojs.string_to_js x12773)
    let (get_userVisibleOnly : 'tags this -> bool option) =
      fun (x12775 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12775) "userVisibleOnly")
    let (set_userVisibleOnly : 'tags this -> bool -> unit) =
      fun (x12778 : 'tags this) ->
        fun (x12779 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12778) "userVisibleOnly"
            (Ojs.bool_to_js x12779)
    let (create :
      ?applicationServerKey:[ `String of string  | `Other of BufferSource.t ]
        Primitive.t -> ?userVisibleOnly:bool -> unit -> t)
      =
      fun
        ?applicationServerKey:(x12781 :
                                [ `String of string 
                                | `Other of BufferSource.t ] Primitive.t
                                  option)
        ->
        fun ?userVisibleOnly:(x12782 : bool option) ->
          fun () ->
            let x12783 = Ojs.empty_obj () in
            (match x12781 with
             | Some x12785 ->
                 Ojs.set_prop_ascii x12783 "applicationServerKey"
                   (Primitive.t_to_js
                      (fun
                         (x12786 :
                           [ `String of string  | `Other of BufferSource.t ])
                         ->
                         match x12786 with
                         | `String x12787 -> Ojs.string_to_js x12787
                         | `Other x12788 -> BufferSource.t_to_js x12788)
                      x12785)
             | None -> ());
            (match x12782 with
             | Some x12784 ->
                 Ojs.set_prop_ascii x12783 "userVisibleOnly"
                   (Ojs.bool_to_js x12784)
             | None -> ());
            t_of_js x12783
    let cast_from = Obj.magic
  end
module PushSubscriptionOptions =
  struct
    type t = [ `PushSubscriptionOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12790 : Ojs.t) -> t_of_js x12790
    and t_0_to_js : t_0 -> Ojs.t = fun (x12789 : t) -> t_to_js x12789
    type tags = [ `PushSubscriptionOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PushSubscriptionOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12793 : Ojs.t) -> intf_of_js __tags_of_js x12793
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12791 : __tags intf) -> intf_to_js __tags_to_js x12791
    let (get_applicationServerKey : 'tags this -> ArrayBuffer.t_0 option) =
      fun (x12795 : 'tags this) ->
        Ojs.option_of_js ArrayBuffer.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12795)
             "applicationServerKey")
    let (create : ?applicationServerKey:ArrayBuffer.t_0 -> unit -> t) =
      fun ?applicationServerKey:(x12798 : ArrayBuffer.t_0 option) ->
        fun () ->
          let x12799 = Ojs.empty_obj () in
          (match x12798 with
           | Some x12800 ->
               Ojs.set_prop_ascii x12799 "applicationServerKey"
                 (ArrayBuffer.t_0_to_js x12800)
           | None -> ());
          t_of_js x12799
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PushSubscriptionOptions")
             "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "PushSubscriptionOptions") 
             [||])
  end
module PushSubscriptionJSON =
  struct
    type t = [ `PushSubscriptionJSON ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12802 : Ojs.t) -> t_of_js x12802
    and t_0_to_js : t_0 -> Ojs.t = fun (x12801 : t) -> t_to_js x12801
    type tags = [ `PushSubscriptionJSON ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PushSubscriptionJSON ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12805 : Ojs.t) -> intf_of_js __tags_of_js x12805
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12803 : __tags intf) -> intf_to_js __tags_to_js x12803
    let (get_endpoint : 'tags this -> string option) =
      fun (x12807 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12807) "endpoint")
    let (set_endpoint : 'tags this -> string -> unit) =
      fun (x12810 : 'tags this) ->
        fun (x12811 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12810) "endpoint"
            (Ojs.string_to_js x12811)
    let (get_expirationTime : 'tags this -> EpochTimeStamp.t option) =
      fun (x12813 : 'tags this) ->
        Ojs.option_of_js EpochTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12813) "expirationTime")
    let (set_expirationTime : 'tags this -> EpochTimeStamp.t option -> unit)
      =
      fun (x12816 : 'tags this) ->
        fun (x12817 : EpochTimeStamp.t option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12816) "expirationTime"
            (Ojs.option_to_js EpochTimeStamp.t_to_js x12817)
    let (get_keys : 'tags this -> (string, string) Record.t_2 option) =
      fun (x12820 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12822 : Ojs.t) ->
             Record.t_2_of_js Ojs.string_of_js Ojs.string_of_js x12822)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12820) "keys")
    let (set_keys : 'tags this -> (string, string) Record.t_2 -> unit) =
      fun (x12825 : 'tags this) ->
        fun (x12826 : (string, string) Record.t_2) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12825) "keys"
            (Record.t_2_to_js Ojs.string_to_js Ojs.string_to_js x12826)
    let (create :
      ?endpoint:string ->
        ?expirationTime:EpochTimeStamp.t ->
          ?keys:(string, string) Record.t_2 -> unit -> t)
      =
      fun ?endpoint:(x12830 : string option) ->
        fun ?expirationTime:(x12831 : EpochTimeStamp.t option) ->
          fun ?keys:(x12832 : (string, string) Record.t_2 option) ->
            fun () ->
              let x12833 = Ojs.empty_obj () in
              (match x12830 with
               | Some x12838 ->
                   Ojs.set_prop_ascii x12833 "endpoint"
                     (Ojs.string_to_js x12838)
               | None -> ());
              (match x12831 with
               | Some x12837 ->
                   Ojs.set_prop_ascii x12833 "expirationTime"
                     (EpochTimeStamp.t_to_js x12837)
               | None -> ());
              (match x12832 with
               | Some x12834 ->
                   Ojs.set_prop_ascii x12833 "keys"
                     (Record.t_2_to_js Ojs.string_to_js Ojs.string_to_js
                        x12834)
               | None -> ());
              t_of_js x12833
    let cast_from = Obj.magic
  end
module PushEncryptionKeyName =
  struct
    type t = [ `L_s145_p256dh  | `L_s40_auth ]
    let rec t_of_js : Ojs.t -> t =
      fun (x12840 : Ojs.t) ->
        let x12841 = x12840 in
        match Ojs.string_of_js x12841 with
        | "p256dh" -> `L_s145_p256dh
        | "auth" -> `L_s40_auth
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x12839 : [ `L_s145_p256dh  | `L_s40_auth ]) ->
        match x12839 with
        | `L_s145_p256dh -> Ojs.string_to_js "p256dh"
        | `L_s40_auth -> Ojs.string_to_js "auth"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12843 : Ojs.t) -> t_of_js x12843
    and t_0_to_js : t_0 -> Ojs.t = fun (x12842 : t) -> t_to_js x12842
  end
module PushSubscription =
  struct
    type t = [ `PushSubscription ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12845 : Ojs.t) -> t_of_js x12845
    and t_0_to_js : t_0 -> Ojs.t = fun (x12844 : t) -> t_to_js x12844
    type tags = [ `PushSubscription ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushSubscription ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12848 : Ojs.t) -> intf_of_js __tags_of_js x12848
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12846 : __tags intf) -> intf_to_js __tags_to_js x12846
    let (get_endpoint : 'tags this -> string) =
      fun (x12850 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12850) "endpoint")
    let (get_options : 'tags this -> PushSubscriptionOptions.t) =
      fun (x12852 : 'tags this) ->
        PushSubscriptionOptions.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12852) "options")
    let (getKey :
      'tags this -> name:PushEncryptionKeyName.t -> ArrayBuffer.t_0 option) =
      fun (x12855 : 'tags this) ->
        fun ~name:(x12854 : PushEncryptionKeyName.t) ->
          Ojs.option_of_js ArrayBuffer.t_0_of_js
            (Ojs.call (this_to_js Obj.magic x12855) "getKey"
               [|(PushEncryptionKeyName.t_to_js x12854)|])
    let (toJSON : 'tags this -> PushSubscriptionJSON.t) =
      fun (x12858 : 'tags this) ->
        PushSubscriptionJSON.t_of_js
          (Ojs.call (this_to_js Obj.magic x12858) "toJSON" [||])
    let (unsubscribe : 'tags this -> bool Promise.t_1) =
      fun (x12860 : 'tags this) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (this_to_js Obj.magic x12860) "unsubscribe" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PushSubscription") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PushSubscription")
             [||])
  end
module PermissionState =
  struct
    type t = [ `L_s159_prompt  | `L_s58_denied  | `L_s84_granted ]
    let rec t_of_js : Ojs.t -> t =
      fun (x12864 : Ojs.t) ->
        let x12865 = x12864 in
        match Ojs.string_of_js x12865 with
        | "prompt" -> `L_s159_prompt
        | "denied" -> `L_s58_denied
        | "granted" -> `L_s84_granted
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x12863 : [ `L_s159_prompt  | `L_s58_denied  | `L_s84_granted ]) ->
        match x12863 with
        | `L_s159_prompt -> Ojs.string_to_js "prompt"
        | `L_s58_denied -> Ojs.string_to_js "denied"
        | `L_s84_granted -> Ojs.string_to_js "granted"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12867 : Ojs.t) -> t_of_js x12867
    and t_0_to_js : t_0 -> Ojs.t = fun (x12866 : t) -> t_to_js x12866
  end
module PushManager =
  struct
    type t = [ `PushManager ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12869 : Ojs.t) -> t_of_js x12869
    and t_0_to_js : t_0 -> Ojs.t = fun (x12868 : t) -> t_to_js x12868
    type tags = [ `PushManager ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushManager ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12872 : Ojs.t) -> intf_of_js __tags_of_js x12872
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12870 : __tags intf) -> intf_to_js __tags_to_js x12870
    let (getSubscription :
      'tags this -> PushSubscription.t option Promise.t_1) =
      fun (x12874 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x12876 : Ojs.t) ->
             Ojs.option_of_js PushSubscription.t_of_js x12876)
          (Ojs.call (this_to_js Obj.magic x12874) "getSubscription" [||])
    let (permissionState :
      'tags this ->
        ?options:PushSubscriptionOptionsInit.t ->
          unit -> PermissionState.t Promise.t_1)
      =
      fun (x12881 : 'tags this) ->
        fun ?options:(x12878 : PushSubscriptionOptionsInit.t option) ->
          fun () ->
            Promise.t_1_of_js PermissionState.t_of_js
              (let x12883 = this_to_js Obj.magic x12881 in
               Ojs.call (Ojs.get_prop_ascii x12883 "permissionState") "apply"
                 [|x12883;((let x12879 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x12878 with
                             | Some x12880 ->
                                 ignore
                                   (Ojs.call x12879 "push"
                                      [|(PushSubscriptionOptionsInit.t_to_js
                                           x12880)|])
                             | None -> ());
                            x12879))|])
    let (subscribe :
      'tags this ->
        ?options:PushSubscriptionOptionsInit.t ->
          unit -> PushSubscription.t Promise.t_1)
      =
      fun (x12888 : 'tags this) ->
        fun ?options:(x12885 : PushSubscriptionOptionsInit.t option) ->
          fun () ->
            Promise.t_1_of_js PushSubscription.t_of_js
              (let x12890 = this_to_js Obj.magic x12888 in
               Ojs.call (Ojs.get_prop_ascii x12890 "subscribe") "apply"
                 [|x12890;((let x12886 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x12885 with
                             | Some x12887 ->
                                 ignore
                                   (Ojs.call x12886 "push"
                                      [|(PushSubscriptionOptionsInit.t_to_js
                                           x12887)|])
                             | None -> ());
                            x12886))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "PushManager")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PushManager") [||])
    let (supportedContentEncodings : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "PushManager")
             "supportedContentEncodings")
  end
module GetNotificationOptions =
  struct
    type t = [ `GetNotificationOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12894 : Ojs.t) -> t_of_js x12894
    and t_0_to_js : t_0 -> Ojs.t = fun (x12893 : t) -> t_to_js x12893
    type tags = [ `GetNotificationOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `GetNotificationOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12897 : Ojs.t) -> intf_of_js __tags_of_js x12897
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12895 : __tags intf) -> intf_to_js __tags_to_js x12895
    let (get_tag : 'tags this -> string option) =
      fun (x12899 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12899) "tag")
    let (set_tag : 'tags this -> string -> unit) =
      fun (x12902 : 'tags this) ->
        fun (x12903 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12902) "tag"
            (Ojs.string_to_js x12903)
    let (create : ?tag:string -> unit -> t) =
      fun ?tag:(x12905 : string option) ->
        fun () ->
          let x12906 = Ojs.empty_obj () in
          (match x12905 with
           | Some x12907 ->
               Ojs.set_prop_ascii x12906 "tag" (Ojs.string_to_js x12907)
           | None -> ());
          t_of_js x12906
    let cast_from = Obj.magic
  end
module ServiceWorkerRegistration =
  struct
    type t = [ `EventTarget  | `ServiceWorkerRegistration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12909 : Ojs.t) -> t_of_js x12909
    and t_0_to_js : t_0 -> Ojs.t = fun (x12908 : t) -> t_to_js x12908
    type tags = [ `EventTarget  | `ServiceWorkerRegistration ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerRegistration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12912 : Ojs.t) -> intf_of_js __tags_of_js x12912
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12910 : __tags intf) -> intf_to_js __tags_to_js x12910
    let (get_active : 'tags this -> ServiceWorker.t option) =
      fun (x12914 : 'tags this) ->
        Ojs.option_of_js ServiceWorker.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12914) "active")
    let (get_installing : 'tags this -> ServiceWorker.t option) =
      fun (x12917 : 'tags this) ->
        Ojs.option_of_js ServiceWorker.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12917) "installing")
    let (get_onupdatefound :
      'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x12920 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12922 : Ojs.t) ->
             fun ~this:(x12923 : t) ->
               fun ~ev:(x12924 : Event.t) ->
                 any_of_js
                   (Ojs.apply x12922
                      [|(t_to_js x12923);(Event.t_to_js x12924)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12920) "onupdatefound")
    let (set_onupdatefound :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x12925 : 'tags this) ->
        fun (x12926 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12925) "onupdatefound"
            (Ojs.option_to_js
               (fun (x12927 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12928 : Ojs.t) ->
                       fun (x12929 : Ojs.t) ->
                         any_to_js
                           (x12927 ~this:(t_of_js x12928)
                              ~ev:(Event.t_of_js x12929)))) x12926)
    let (get_pushManager : 'tags this -> PushManager.t) =
      fun (x12931 : 'tags this) ->
        PushManager.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12931) "pushManager")
    let (get_scope : 'tags this -> string) =
      fun (x12933 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12933) "scope")
    let (get_updateViaCache : 'tags this -> ServiceWorkerUpdateViaCache.t) =
      fun (x12935 : 'tags this) ->
        ServiceWorkerUpdateViaCache.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12935) "updateViaCache")
    let (get_waiting : 'tags this -> ServiceWorker.t option) =
      fun (x12937 : 'tags this) ->
        Ojs.option_of_js ServiceWorker.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12937) "waiting")
    let (getNotifications :
      'tags this ->
        ?filter:GetNotificationOptions.t ->
          unit -> Notification.t list Promise.t_1)
      =
      fun (x12943 : 'tags this) ->
        fun ?filter:(x12940 : GetNotificationOptions.t option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x12946 : Ojs.t) ->
                 Ojs.list_of_js Notification.t_of_js x12946)
              (let x12945 = this_to_js Obj.magic x12943 in
               Ojs.call (Ojs.get_prop_ascii x12945 "getNotifications")
                 "apply"
                 [|x12945;((let x12941 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x12940 with
                             | Some x12942 ->
                                 ignore
                                   (Ojs.call x12941 "push"
                                      [|(GetNotificationOptions.t_to_js
                                           x12942)|])
                             | None -> ());
                            x12941))|])
    let (showNotification :
      'tags this ->
        title:string ->
          ?options:NotificationOptions.t -> unit -> unit Promise.t_1)
      =
      fun (x12952 : 'tags this) ->
        fun ~title:(x12948 : string) ->
          fun ?options:(x12949 : NotificationOptions.t option) ->
            fun () ->
              Promise.t_1_of_js Ojs.unit_of_js
                (let x12954 = this_to_js Obj.magic x12952 in
                 Ojs.call (Ojs.get_prop_ascii x12954 "showNotification")
                   "apply"
                   [|x12954;((let x12950 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x12950 "push"
                                   [|(Ojs.string_to_js x12948)|]);
                              (match x12949 with
                               | Some x12951 ->
                                   ignore
                                     (Ojs.call x12950 "push"
                                        [|(NotificationOptions.t_to_js x12951)|])
                               | None -> ());
                              x12950))|])
    let (unregister : 'tags this -> bool Promise.t_1) =
      fun (x12956 : 'tags this) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (this_to_js Obj.magic x12956) "unregister" [||])
    let (update : 'tags this -> unit Promise.t_1) =
      fun (x12959 : 'tags this) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (this_to_js Obj.magic x12959) "update" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12971 : 'tags this) ->
        fun ~type_:(x12962 : 'K) ->
          fun ~listener:(x12963 : this:t -> ev:any -> any) ->
            fun
              ?options:(x12964 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12973 = this_to_js Obj.magic x12971 in
                   Ojs.call (Ojs.get_prop_ascii x12973 "addEventListener")
                     "apply"
                     [|x12973;((let x12965 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12965 "push"
                                     [|(Obj.magic x12962)|]);
                                ignore
                                  (Ojs.call x12965 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12969 : Ojs.t) ->
                                             fun (x12970 : Ojs.t) ->
                                               any_to_js
                                                 (x12963
                                                    ~this:(t_of_js x12969)
                                                    ~ev:(any_of_js x12970))))|]);
                                (match x12964 with
                                 | Some x12966 ->
                                     ignore
                                       (Ojs.call x12965 "push"
                                          [|((match x12966 with
                                              | `U1 x12967 ->
                                                  Ojs.bool_to_js x12967
                                              | `U2 x12968 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x12968))|])
                                 | None -> ());
                                x12965))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12981 : 'tags this) ->
        fun ~type_:(x12974 : string) ->
          fun ~listener:(x12975 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x12976 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12983 = this_to_js Obj.magic x12981 in
                   Ojs.call (Ojs.get_prop_ascii x12983 "addEventListener")
                     "apply"
                     [|x12983;((let x12977 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12977 "push"
                                     [|(Ojs.string_to_js x12974)|]);
                                ignore
                                  (Ojs.call x12977 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12975)|]);
                                (match x12976 with
                                 | Some x12978 ->
                                     ignore
                                       (Ojs.call x12977 "push"
                                          [|((match x12978 with
                                              | `U1 x12979 ->
                                                  Ojs.bool_to_js x12979
                                              | `U2 x12980 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x12980))|])
                                 | None -> ());
                                x12977))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12993 : 'tags this) ->
        fun ~type_:(x12984 : 'K) ->
          fun ~listener:(x12985 : this:t -> ev:any -> any) ->
            fun
              ?options:(x12986 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12995 = this_to_js Obj.magic x12993 in
                   Ojs.call (Ojs.get_prop_ascii x12995 "removeEventListener")
                     "apply"
                     [|x12995;((let x12987 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12987 "push"
                                     [|(Obj.magic x12984)|]);
                                ignore
                                  (Ojs.call x12987 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12991 : Ojs.t) ->
                                             fun (x12992 : Ojs.t) ->
                                               any_to_js
                                                 (x12985
                                                    ~this:(t_of_js x12991)
                                                    ~ev:(any_of_js x12992))))|]);
                                (match x12986 with
                                 | Some x12988 ->
                                     ignore
                                       (Ojs.call x12987 "push"
                                          [|((match x12988 with
                                              | `U1 x12989 ->
                                                  Ojs.bool_to_js x12989
                                              | `U2 x12990 ->
                                                  EventListenerOptions.t_to_js
                                                    x12990))|])
                                 | None -> ());
                                x12987))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13003 : 'tags this) ->
        fun ~type_:(x12996 : string) ->
          fun ~listener:(x12997 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x12998 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13005 = this_to_js Obj.magic x13003 in
                   Ojs.call (Ojs.get_prop_ascii x13005 "removeEventListener")
                     "apply"
                     [|x13005;((let x12999 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12999 "push"
                                     [|(Ojs.string_to_js x12996)|]);
                                ignore
                                  (Ojs.call x12999 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12997)|]);
                                (match x12998 with
                                 | Some x13000 ->
                                     ignore
                                       (Ojs.call x12999 "push"
                                          [|((match x13000 with
                                              | `U1 x13001 ->
                                                  Ojs.bool_to_js x13001
                                              | `U2 x13002 ->
                                                  EventListenerOptions.t_to_js
                                                    x13002))|])
                                 | None -> ());
                                x12999))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerRegistration")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerRegistration") 
             [||])
  end
module DocumentVisibilityState =
  struct
    type t = [ `L_s211_visible  | `L_s85_hidden ]
    let rec t_of_js : Ojs.t -> t =
      fun (x13007 : Ojs.t) ->
        let x13008 = x13007 in
        match Ojs.string_of_js x13008 with
        | "visible" -> `L_s211_visible
        | "hidden" -> `L_s85_hidden
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x13006 : [ `L_s211_visible  | `L_s85_hidden ]) ->
        match x13006 with
        | `L_s211_visible -> Ojs.string_to_js "visible"
        | `L_s85_hidden -> Ojs.string_to_js "hidden"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13010 : Ojs.t) -> t_of_js x13010
    and t_0_to_js : t_0 -> Ojs.t = fun (x13009 : t) -> t_to_js x13009
  end
module WindowClient =
  struct
    type t = [ `Client  | `WindowClient ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13012 : Ojs.t) -> t_of_js x13012
    and t_0_to_js : t_0 -> Ojs.t = fun (x13011 : t) -> t_to_js x13011
    type tags = [ `Client  | `WindowClient ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WindowClient ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13015 : Ojs.t) -> intf_of_js __tags_of_js x13015
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13013 : __tags intf) -> intf_to_js __tags_to_js x13013
    let (get_focused : 'tags this -> bool) =
      fun (x13017 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13017) "focused")
    let (get_visibilityState : 'tags this -> DocumentVisibilityState.t) =
      fun (x13019 : 'tags this) ->
        DocumentVisibilityState.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13019) "visibilityState")
    let (focus : 'tags this -> t Promise.t_1) =
      fun (x13021 : 'tags this) ->
        Promise.t_1_of_js t_of_js
          (Ojs.call (this_to_js Obj.magic x13021) "focus" [||])
    let (navigate :
      'tags this ->
        url:[ `U1 of string  | `U2 of URL.t ] -> t option Promise.t_1)
      =
      fun (x13027 : 'tags this) ->
        fun ~url:(x13024 : [ `U1 of string  | `U2 of URL.t ]) ->
          Promise.t_1_of_js
            (fun (x13029 : Ojs.t) -> Ojs.option_of_js t_of_js x13029)
            (Ojs.call (this_to_js Obj.magic x13027) "navigate"
               [|((match x13024 with
                   | `U1 x13025 -> Ojs.string_to_js x13025
                   | `U2 x13026 -> URL.t_to_js x13026))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WindowClient")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WindowClient") [||])
  end
module ClientQueryOptions =
  struct
    type t = [ `ClientQueryOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13032 : Ojs.t) -> t_of_js x13032
    and t_0_to_js : t_0 -> Ojs.t = fun (x13031 : t) -> t_to_js x13031
    type tags = [ `ClientQueryOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ClientQueryOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13035 : Ojs.t) -> intf_of_js __tags_of_js x13035
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13033 : __tags intf) -> intf_to_js __tags_to_js x13033
    let (get_includeUncontrolled : 'tags this -> bool option) =
      fun (x13037 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13037)
             "includeUncontrolled")
    let (set_includeUncontrolled : 'tags this -> bool -> unit) =
      fun (x13040 : 'tags this) ->
        fun (x13041 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13040)
            "includeUncontrolled" (Ojs.bool_to_js x13041)
    let (get_type : 'tags this -> ClientTypes.t option) =
      fun (x13043 : 'tags this) ->
        Ojs.option_of_js ClientTypes.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13043) "type")
    let (set_type : 'tags this -> ClientTypes.t -> unit) =
      fun (x13046 : 'tags this) ->
        fun (x13047 : ClientTypes.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13046) "type"
            (ClientTypes.t_to_js x13047)
    let (create :
      ?includeUncontrolled:bool -> ?type_:ClientTypes.t -> unit -> t) =
      fun ?includeUncontrolled:(x13049 : bool option) ->
        fun ?type_:(x13050 : ClientTypes.t option) ->
          fun () ->
            let x13051 = Ojs.empty_obj () in
            (match x13049 with
             | Some x13053 ->
                 Ojs.set_prop_ascii x13051 "includeUncontrolled"
                   (Ojs.bool_to_js x13053)
             | None -> ());
            (match x13050 with
             | Some x13052 ->
                 Ojs.set_prop_ascii x13051 "type"
                   (ClientTypes.t_to_js x13052)
             | None -> ());
            t_of_js x13051
    let cast_from = Obj.magic
  end
module Clients =
  struct
    type t = [ `Clients ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13055 : Ojs.t) -> t_of_js x13055
    and t_0_to_js : t_0 -> Ojs.t = fun (x13054 : t) -> t_to_js x13054
    type tags = [ `Clients ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Clients ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13058 : Ojs.t) -> intf_of_js __tags_of_js x13058
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13056 : __tags intf) -> intf_to_js __tags_to_js x13056
    let (claim : 'tags this -> unit Promise.t_1) =
      fun (x13060 : 'tags this) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (this_to_js Obj.magic x13060) "claim" [||])
    let (get_ : 'tags this -> id:string -> Client.t option Promise.t_1) =
      fun (x13064 : 'tags this) ->
        fun ~id:(x13063 : string) ->
          Promise.t_1_of_js
            (fun (x13066 : Ojs.t) -> Ojs.option_of_js Client.t_of_js x13066)
            (Ojs.call (this_to_js Obj.magic x13064) "get"
               [|(Ojs.string_to_js x13063)|])
    let (matchAll :
      'tags this -> ?options:'T -> unit -> any list Promise.t_1) =
      fun (x13071 : 'tags this) ->
        fun ?options:(x13068 : 'T option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x13074 : Ojs.t) -> Ojs.list_of_js any_of_js x13074)
              (let x13073 = this_to_js Obj.magic x13071 in
               Ojs.call (Ojs.get_prop_ascii x13073 "matchAll") "apply"
                 [|x13073;((let x13069 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x13068 with
                             | Some x13070 ->
                                 ignore
                                   (Ojs.call x13069 "push"
                                      [|(Obj.magic x13070)|])
                             | None -> ());
                            x13069))|])
    let (openWindow :
      'tags this ->
        url:[ `U1 of string  | `U2 of URL.t ] ->
          WindowClient.t option Promise.t_1)
      =
      fun (x13079 : 'tags this) ->
        fun ~url:(x13076 : [ `U1 of string  | `U2 of URL.t ]) ->
          Promise.t_1_of_js
            (fun (x13081 : Ojs.t) ->
               Ojs.option_of_js WindowClient.t_of_js x13081)
            (Ojs.call (this_to_js Obj.magic x13079) "openWindow"
               [|((match x13076 with
                   | `U1 x13077 -> Ojs.string_to_js x13077
                   | `U2 x13078 -> URL.t_to_js x13078))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Clients")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Clients") [||])
  end
module ServiceWorkerGlobalScope =
  struct
    type t =
      [ `EventTarget  | `FontFaceSource  | `ServiceWorkerGlobalScope 
      | `WindowOrWorkerGlobalScope  | `WorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13084 : Ojs.t) -> t_of_js x13084
    and t_0_to_js : t_0 -> Ojs.t = fun (x13083 : t) -> t_to_js x13083
    type tags =
      [ `EventTarget  | `FontFaceSource  | `ServiceWorkerGlobalScope 
      | `WindowOrWorkerGlobalScope  | `WorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13087 : Ojs.t) -> intf_of_js __tags_of_js x13087
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13085 : __tags intf) -> intf_to_js __tags_to_js x13085
    let (get_clients : 'tags this -> Clients.t) =
      fun (x13089 : 'tags this) ->
        Clients.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13089) "clients")
    let (get_onactivate :
      'tags this -> (this:t -> ev:ExtendableEvent.t -> any) option) =
      fun (x13091 : 'tags this) ->
        Ojs.option_of_js
          (fun (x13093 : Ojs.t) ->
             fun ~this:(x13094 : t) ->
               fun ~ev:(x13095 : ExtendableEvent.t) ->
                 any_of_js
                   (Ojs.apply x13093
                      [|(t_to_js x13094);(ExtendableEvent.t_to_js x13095)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13091) "onactivate")
    let (set_onactivate :
      'tags this -> (this:t -> ev:ExtendableEvent.t -> any) option -> unit) =
      fun (x13096 : 'tags this) ->
        fun (x13097 : (this:t -> ev:ExtendableEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13096) "onactivate"
            (Ojs.option_to_js
               (fun (x13098 : this:t -> ev:ExtendableEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13099 : Ojs.t) ->
                       fun (x13100 : Ojs.t) ->
                         any_to_js
                           (x13098 ~this:(t_of_js x13099)
                              ~ev:(ExtendableEvent.t_of_js x13100)))) x13097)
    let (get_onfetch :
      'tags this -> (this:t -> ev:FetchEvent.t -> any) option) =
      fun (x13102 : 'tags this) ->
        Ojs.option_of_js
          (fun (x13104 : Ojs.t) ->
             fun ~this:(x13105 : t) ->
               fun ~ev:(x13106 : FetchEvent.t) ->
                 any_of_js
                   (Ojs.apply x13104
                      [|(t_to_js x13105);(FetchEvent.t_to_js x13106)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13102) "onfetch")
    let (set_onfetch :
      'tags this -> (this:t -> ev:FetchEvent.t -> any) option -> unit) =
      fun (x13107 : 'tags this) ->
        fun (x13108 : (this:t -> ev:FetchEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13107) "onfetch"
            (Ojs.option_to_js
               (fun (x13109 : this:t -> ev:FetchEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13110 : Ojs.t) ->
                       fun (x13111 : Ojs.t) ->
                         any_to_js
                           (x13109 ~this:(t_of_js x13110)
                              ~ev:(FetchEvent.t_of_js x13111)))) x13108)
    let (get_oninstall :
      'tags this -> (this:t -> ev:ExtendableEvent.t -> any) option) =
      fun (x13113 : 'tags this) ->
        Ojs.option_of_js
          (fun (x13115 : Ojs.t) ->
             fun ~this:(x13116 : t) ->
               fun ~ev:(x13117 : ExtendableEvent.t) ->
                 any_of_js
                   (Ojs.apply x13115
                      [|(t_to_js x13116);(ExtendableEvent.t_to_js x13117)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13113) "oninstall")
    let (set_oninstall :
      'tags this -> (this:t -> ev:ExtendableEvent.t -> any) option -> unit) =
      fun (x13118 : 'tags this) ->
        fun (x13119 : (this:t -> ev:ExtendableEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13118) "oninstall"
            (Ojs.option_to_js
               (fun (x13120 : this:t -> ev:ExtendableEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13121 : Ojs.t) ->
                       fun (x13122 : Ojs.t) ->
                         any_to_js
                           (x13120 ~this:(t_of_js x13121)
                              ~ev:(ExtendableEvent.t_of_js x13122)))) x13119)
    let (get_onmessage :
      'tags this -> (this:t -> ev:ExtendableMessageEvent.t -> any) option) =
      fun (x13124 : 'tags this) ->
        Ojs.option_of_js
          (fun (x13126 : Ojs.t) ->
             fun ~this:(x13127 : t) ->
               fun ~ev:(x13128 : ExtendableMessageEvent.t) ->
                 any_of_js
                   (Ojs.apply x13126
                      [|(t_to_js x13127);(ExtendableMessageEvent.t_to_js
                                            x13128)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13124) "onmessage")
    let (set_onmessage :
      'tags this ->
        (this:t -> ev:ExtendableMessageEvent.t -> any) option -> unit)
      =
      fun (x13129 : 'tags this) ->
        fun (x13130 : (this:t -> ev:ExtendableMessageEvent.t -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13129) "onmessage"
            (Ojs.option_to_js
               (fun (x13131 : this:t -> ev:ExtendableMessageEvent.t -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x13132 : Ojs.t) ->
                       fun (x13133 : Ojs.t) ->
                         any_to_js
                           (x13131 ~this:(t_of_js x13132)
                              ~ev:(ExtendableMessageEvent.t_of_js x13133))))
               x13130)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x13135 : 'tags this) ->
        Ojs.option_of_js
          (fun (x13137 : Ojs.t) ->
             fun ~this:(x13138 : t) ->
               fun ~ev:(x13139 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x13137
                      [|(t_to_js x13138);(MessageEvent.t_0_to_js x13139)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13135) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x13140 : 'tags this) ->
        fun (x13141 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13140) "onmessageerror"
            (Ojs.option_to_js
               (fun (x13142 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13143 : Ojs.t) ->
                       fun (x13144 : Ojs.t) ->
                         any_to_js
                           (x13142 ~this:(t_of_js x13143)
                              ~ev:(MessageEvent.t_0_of_js x13144)))) x13141)
    let (get_onnotificationclick :
      'tags this -> (this:t -> ev:NotificationEvent.t -> any) option) =
      fun (x13146 : 'tags this) ->
        Ojs.option_of_js
          (fun (x13148 : Ojs.t) ->
             fun ~this:(x13149 : t) ->
               fun ~ev:(x13150 : NotificationEvent.t) ->
                 any_of_js
                   (Ojs.apply x13148
                      [|(t_to_js x13149);(NotificationEvent.t_to_js x13150)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13146)
             "onnotificationclick")
    let (set_onnotificationclick :
      'tags this -> (this:t -> ev:NotificationEvent.t -> any) option -> unit)
      =
      fun (x13151 : 'tags this) ->
        fun (x13152 : (this:t -> ev:NotificationEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13151)
            "onnotificationclick"
            (Ojs.option_to_js
               (fun (x13153 : this:t -> ev:NotificationEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13154 : Ojs.t) ->
                       fun (x13155 : Ojs.t) ->
                         any_to_js
                           (x13153 ~this:(t_of_js x13154)
                              ~ev:(NotificationEvent.t_of_js x13155))))
               x13152)
    let (get_onnotificationclose :
      'tags this -> (this:t -> ev:NotificationEvent.t -> any) option) =
      fun (x13157 : 'tags this) ->
        Ojs.option_of_js
          (fun (x13159 : Ojs.t) ->
             fun ~this:(x13160 : t) ->
               fun ~ev:(x13161 : NotificationEvent.t) ->
                 any_of_js
                   (Ojs.apply x13159
                      [|(t_to_js x13160);(NotificationEvent.t_to_js x13161)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13157)
             "onnotificationclose")
    let (set_onnotificationclose :
      'tags this -> (this:t -> ev:NotificationEvent.t -> any) option -> unit)
      =
      fun (x13162 : 'tags this) ->
        fun (x13163 : (this:t -> ev:NotificationEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13162)
            "onnotificationclose"
            (Ojs.option_to_js
               (fun (x13164 : this:t -> ev:NotificationEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13165 : Ojs.t) ->
                       fun (x13166 : Ojs.t) ->
                         any_to_js
                           (x13164 ~this:(t_of_js x13165)
                              ~ev:(NotificationEvent.t_of_js x13166))))
               x13163)
    let (get_onpush : 'tags this -> (this:t -> ev:PushEvent.t -> any) option)
      =
      fun (x13168 : 'tags this) ->
        Ojs.option_of_js
          (fun (x13170 : Ojs.t) ->
             fun ~this:(x13171 : t) ->
               fun ~ev:(x13172 : PushEvent.t) ->
                 any_of_js
                   (Ojs.apply x13170
                      [|(t_to_js x13171);(PushEvent.t_to_js x13172)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13168) "onpush")
    let (set_onpush :
      'tags this -> (this:t -> ev:PushEvent.t -> any) option -> unit) =
      fun (x13173 : 'tags this) ->
        fun (x13174 : (this:t -> ev:PushEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13173) "onpush"
            (Ojs.option_to_js
               (fun (x13175 : this:t -> ev:PushEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13176 : Ojs.t) ->
                       fun (x13177 : Ojs.t) ->
                         any_to_js
                           (x13175 ~this:(t_of_js x13176)
                              ~ev:(PushEvent.t_of_js x13177)))) x13174)
    let (get_registration : 'tags this -> ServiceWorkerRegistration.t) =
      fun (x13179 : 'tags this) ->
        ServiceWorkerRegistration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13179) "registration")
    let (skipWaiting : 'tags this -> unit Promise.t_1) =
      fun (x13181 : 'tags this) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (this_to_js Obj.magic x13181) "skipWaiting" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13193 : 'tags this) ->
        fun ~type_:(x13184 : 'K) ->
          fun ~listener:(x13185 : this:t -> ev:any -> any) ->
            fun
              ?options:(x13186 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13195 = this_to_js Obj.magic x13193 in
                   Ojs.call (Ojs.get_prop_ascii x13195 "addEventListener")
                     "apply"
                     [|x13195;((let x13187 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13187 "push"
                                     [|(Obj.magic x13184)|]);
                                ignore
                                  (Ojs.call x13187 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x13191 : Ojs.t) ->
                                             fun (x13192 : Ojs.t) ->
                                               any_to_js
                                                 (x13185
                                                    ~this:(t_of_js x13191)
                                                    ~ev:(any_of_js x13192))))|]);
                                (match x13186 with
                                 | Some x13188 ->
                                     ignore
                                       (Ojs.call x13187 "push"
                                          [|((match x13188 with
                                              | `U1 x13189 ->
                                                  Ojs.bool_to_js x13189
                                              | `U2 x13190 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x13190))|])
                                 | None -> ());
                                x13187))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13203 : 'tags this) ->
        fun ~type_:(x13196 : string) ->
          fun ~listener:(x13197 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x13198 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13205 = this_to_js Obj.magic x13203 in
                   Ojs.call (Ojs.get_prop_ascii x13205 "addEventListener")
                     "apply"
                     [|x13205;((let x13199 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13199 "push"
                                     [|(Ojs.string_to_js x13196)|]);
                                ignore
                                  (Ojs.call x13199 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x13197)|]);
                                (match x13198 with
                                 | Some x13200 ->
                                     ignore
                                       (Ojs.call x13199 "push"
                                          [|((match x13200 with
                                              | `U1 x13201 ->
                                                  Ojs.bool_to_js x13201
                                              | `U2 x13202 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x13202))|])
                                 | None -> ());
                                x13199))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13215 : 'tags this) ->
        fun ~type_:(x13206 : 'K) ->
          fun ~listener:(x13207 : this:t -> ev:any -> any) ->
            fun
              ?options:(x13208 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13217 = this_to_js Obj.magic x13215 in
                   Ojs.call (Ojs.get_prop_ascii x13217 "removeEventListener")
                     "apply"
                     [|x13217;((let x13209 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13209 "push"
                                     [|(Obj.magic x13206)|]);
                                ignore
                                  (Ojs.call x13209 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x13213 : Ojs.t) ->
                                             fun (x13214 : Ojs.t) ->
                                               any_to_js
                                                 (x13207
                                                    ~this:(t_of_js x13213)
                                                    ~ev:(any_of_js x13214))))|]);
                                (match x13208 with
                                 | Some x13210 ->
                                     ignore
                                       (Ojs.call x13209 "push"
                                          [|((match x13210 with
                                              | `U1 x13211 ->
                                                  Ojs.bool_to_js x13211
                                              | `U2 x13212 ->
                                                  EventListenerOptions.t_to_js
                                                    x13212))|])
                                 | None -> ());
                                x13209))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13225 : 'tags this) ->
        fun ~type_:(x13218 : string) ->
          fun ~listener:(x13219 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x13220 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13227 = this_to_js Obj.magic x13225 in
                   Ojs.call (Ojs.get_prop_ascii x13227 "removeEventListener")
                     "apply"
                     [|x13227;((let x13221 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13221 "push"
                                     [|(Ojs.string_to_js x13218)|]);
                                ignore
                                  (Ojs.call x13221 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x13219)|]);
                                (match x13220 with
                                 | Some x13222 ->
                                     ignore
                                       (Ojs.call x13221 "push"
                                          [|((match x13222 with
                                              | `U1 x13223 ->
                                                  Ojs.bool_to_js x13223
                                              | `U2 x13224 ->
                                                  EventListenerOptions.t_to_js
                                                    x13224))|])
                                 | None -> ());
                                x13221))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerGlobalScope")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerGlobalScope") 
             [||])
  end
module ServiceWorkerEventMap =
  struct
    type t = [ `AbstractWorkerEventMap  | `ServiceWorkerEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13229 : Ojs.t) -> t_of_js x13229
    and t_0_to_js : t_0 -> Ojs.t = fun (x13228 : t) -> t_to_js x13228
    type tags = [ `AbstractWorkerEventMap  | `ServiceWorkerEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13232 : Ojs.t) -> intf_of_js __tags_of_js x13232
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13230 : __tags intf) -> intf_to_js __tags_to_js x13230
    let (get_statechange : 'tags this -> Event.t) =
      fun (x13234 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13234) "statechange")
    let (set_statechange : 'tags this -> Event.t -> unit) =
      fun (x13236 : 'tags this) ->
        fun (x13237 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13236) "statechange"
            (Event.t_to_js x13237)
    let (create : statechange:Event.t -> unit -> t) =
      fun ~statechange:(x13239 : Event.t) ->
        fun () ->
          let x13240 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x13240 "statechange" (Event.t_to_js x13239);
          t_of_js x13240
    let cast_from = Obj.magic
  end
module ServiceWorkerContainerEventMap =
  struct
    type t = [ `ServiceWorkerContainerEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13242 : Ojs.t) -> t_of_js x13242
    and t_0_to_js : t_0 -> Ojs.t = fun (x13241 : t) -> t_to_js x13241
    type tags = [ `ServiceWorkerContainerEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerContainerEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13245 : Ojs.t) -> intf_of_js __tags_of_js x13245
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13243 : __tags intf) -> intf_to_js __tags_to_js x13243
    let (get_controllerchange : 'tags this -> Event.t) =
      fun (x13247 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13247)
             "controllerchange")
    let (set_controllerchange : 'tags this -> Event.t -> unit) =
      fun (x13249 : 'tags this) ->
        fun (x13250 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13249) "controllerchange"
            (Event.t_to_js x13250)
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x13252 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13252) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x13254 : 'tags this) ->
        fun (x13255 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13254) "message"
            (MessageEvent.t_0_to_js x13255)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x13257 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13257) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x13259 : 'tags this) ->
        fun (x13260 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13259) "messageerror"
            (MessageEvent.t_0_to_js x13260)
    let (create :
      controllerchange:Event.t ->
        message:MessageEvent.t_0 ->
          messageerror:MessageEvent.t_0 -> unit -> t)
      =
      fun ~controllerchange:(x13262 : Event.t) ->
        fun ~message:(x13263 : MessageEvent.t_0) ->
          fun ~messageerror:(x13264 : MessageEvent.t_0) ->
            fun () ->
              let x13265 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x13265 "controllerchange"
                (Event.t_to_js x13262);
              Ojs.set_prop_ascii x13265 "message"
                (MessageEvent.t_0_to_js x13263);
              Ojs.set_prop_ascii x13265 "messageerror"
                (MessageEvent.t_0_to_js x13264);
              t_of_js x13265
    let cast_from = Obj.magic
  end
module RegistrationOptions =
  struct
    type t = [ `RegistrationOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13267 : Ojs.t) -> t_of_js x13267
    and t_0_to_js : t_0 -> Ojs.t = fun (x13266 : t) -> t_to_js x13266
    type tags = [ `RegistrationOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RegistrationOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13270 : Ojs.t) -> intf_of_js __tags_of_js x13270
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13268 : __tags intf) -> intf_to_js __tags_to_js x13268
    let (get_scope : 'tags this -> string option) =
      fun (x13272 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13272) "scope")
    let (set_scope : 'tags this -> string -> unit) =
      fun (x13275 : 'tags this) ->
        fun (x13276 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13275) "scope"
            (Ojs.string_to_js x13276)
    let (get_type : 'tags this -> WorkerType.t option) =
      fun (x13278 : 'tags this) ->
        Ojs.option_of_js WorkerType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13278) "type")
    let (set_type : 'tags this -> WorkerType.t -> unit) =
      fun (x13281 : 'tags this) ->
        fun (x13282 : WorkerType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13281) "type"
            (WorkerType.t_to_js x13282)
    let (get_updateViaCache :
      'tags this -> ServiceWorkerUpdateViaCache.t option) =
      fun (x13284 : 'tags this) ->
        Ojs.option_of_js ServiceWorkerUpdateViaCache.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13284) "updateViaCache")
    let (set_updateViaCache :
      'tags this -> ServiceWorkerUpdateViaCache.t -> unit) =
      fun (x13287 : 'tags this) ->
        fun (x13288 : ServiceWorkerUpdateViaCache.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13287) "updateViaCache"
            (ServiceWorkerUpdateViaCache.t_to_js x13288)
    let (create :
      ?scope:string ->
        ?type_:WorkerType.t ->
          ?updateViaCache:ServiceWorkerUpdateViaCache.t -> unit -> t)
      =
      fun ?scope:(x13290 : string option) ->
        fun ?type_:(x13291 : WorkerType.t option) ->
          fun ?updateViaCache:(x13292 : ServiceWorkerUpdateViaCache.t option)
            ->
            fun () ->
              let x13293 = Ojs.empty_obj () in
              (match x13290 with
               | Some x13296 ->
                   Ojs.set_prop_ascii x13293 "scope"
                     (Ojs.string_to_js x13296)
               | None -> ());
              (match x13291 with
               | Some x13295 ->
                   Ojs.set_prop_ascii x13293 "type"
                     (WorkerType.t_to_js x13295)
               | None -> ());
              (match x13292 with
               | Some x13294 ->
                   Ojs.set_prop_ascii x13293 "updateViaCache"
                     (ServiceWorkerUpdateViaCache.t_to_js x13294)
               | None -> ());
              t_of_js x13293
    let cast_from = Obj.magic
  end
module ServiceWorkerContainer =
  struct
    type t = [ `EventTarget  | `ServiceWorkerContainer ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13298 : Ojs.t) -> t_of_js x13298
    and t_0_to_js : t_0 -> Ojs.t = fun (x13297 : t) -> t_to_js x13297
    type tags = [ `EventTarget  | `ServiceWorkerContainer ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerContainer ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13301 : Ojs.t) -> intf_of_js __tags_of_js x13301
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13299 : __tags intf) -> intf_to_js __tags_to_js x13299
    let (get_controller : 'tags this -> ServiceWorker.t option) =
      fun (x13303 : 'tags this) ->
        Ojs.option_of_js ServiceWorker.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13303) "controller")
    let (get_oncontrollerchange :
      'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x13306 : 'tags this) ->
        Ojs.option_of_js
          (fun (x13308 : Ojs.t) ->
             fun ~this:(x13309 : t) ->
               fun ~ev:(x13310 : Event.t) ->
                 any_of_js
                   (Ojs.apply x13308
                      [|(t_to_js x13309);(Event.t_to_js x13310)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13306)
             "oncontrollerchange")
    let (set_oncontrollerchange :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x13311 : 'tags this) ->
        fun (x13312 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13311)
            "oncontrollerchange"
            (Ojs.option_to_js
               (fun (x13313 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13314 : Ojs.t) ->
                       fun (x13315 : Ojs.t) ->
                         any_to_js
                           (x13313 ~this:(t_of_js x13314)
                              ~ev:(Event.t_of_js x13315)))) x13312)
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x13317 : 'tags this) ->
        Ojs.option_of_js
          (fun (x13319 : Ojs.t) ->
             fun ~this:(x13320 : t) ->
               fun ~ev:(x13321 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x13319
                      [|(t_to_js x13320);(MessageEvent.t_0_to_js x13321)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13317) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x13322 : 'tags this) ->
        fun (x13323 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13322) "onmessage"
            (Ojs.option_to_js
               (fun (x13324 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13325 : Ojs.t) ->
                       fun (x13326 : Ojs.t) ->
                         any_to_js
                           (x13324 ~this:(t_of_js x13325)
                              ~ev:(MessageEvent.t_0_of_js x13326)))) x13323)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x13328 : 'tags this) ->
        Ojs.option_of_js
          (fun (x13330 : Ojs.t) ->
             fun ~this:(x13331 : t) ->
               fun ~ev:(x13332 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x13330
                      [|(t_to_js x13331);(MessageEvent.t_0_to_js x13332)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13328) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x13333 : 'tags this) ->
        fun (x13334 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13333) "onmessageerror"
            (Ojs.option_to_js
               (fun (x13335 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13336 : Ojs.t) ->
                       fun (x13337 : Ojs.t) ->
                         any_to_js
                           (x13335 ~this:(t_of_js x13336)
                              ~ev:(MessageEvent.t_0_of_js x13337)))) x13334)
    let (get_ready : 'tags this -> ServiceWorkerRegistration.t Promise.t_1) =
      fun (x13339 : 'tags this) ->
        Promise.t_1_of_js ServiceWorkerRegistration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13339) "ready")
    let (getRegistration :
      'tags this ->
        ?clientURL:[ `U1 of string  | `U2 of URL.t ] ->
          unit -> ServiceWorkerRegistration.t option Promise.t_1)
      =
      fun (x13347 : 'tags this) ->
        fun ?clientURL:(x13342 : [ `U1 of string  | `U2 of URL.t ] option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x13350 : Ojs.t) ->
                 Ojs.option_of_js ServiceWorkerRegistration.t_of_js x13350)
              (let x13349 = this_to_js Obj.magic x13347 in
               Ojs.call (Ojs.get_prop_ascii x13349 "getRegistration") "apply"
                 [|x13349;((let x13343 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x13342 with
                             | Some x13344 ->
                                 ignore
                                   (Ojs.call x13343 "push"
                                      [|((match x13344 with
                                          | `U1 x13345 ->
                                              Ojs.string_to_js x13345
                                          | `U2 x13346 -> URL.t_to_js x13346))|])
                             | None -> ());
                            x13343))|])
    let (getRegistrations :
      'tags this -> ServiceWorkerRegistration.t list Promise.t_1) =
      fun (x13352 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x13354 : Ojs.t) ->
             Ojs.list_of_js ServiceWorkerRegistration.t_of_js x13354)
          (Ojs.call (this_to_js Obj.magic x13352) "getRegistrations" [||])
    let (register :
      'tags this ->
        scriptURL:[ `U1 of string  | `U2 of URL.t ] ->
          ?options:RegistrationOptions.t ->
            unit -> ServiceWorkerRegistration.t Promise.t_1)
      =
      fun (x13362 : 'tags this) ->
        fun ~scriptURL:(x13356 : [ `U1 of string  | `U2 of URL.t ]) ->
          fun ?options:(x13357 : RegistrationOptions.t option) ->
            fun () ->
              Promise.t_1_of_js ServiceWorkerRegistration.t_of_js
                (let x13364 = this_to_js Obj.magic x13362 in
                 Ojs.call (Ojs.get_prop_ascii x13364 "register") "apply"
                   [|x13364;((let x13358 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x13358 "push"
                                   [|((match x13356 with
                                       | `U1 x13360 ->
                                           Ojs.string_to_js x13360
                                       | `U2 x13361 -> URL.t_to_js x13361))|]);
                              (match x13357 with
                               | Some x13359 ->
                                   ignore
                                     (Ojs.call x13358 "push"
                                        [|(RegistrationOptions.t_to_js x13359)|])
                               | None -> ());
                              x13358))|])
    let (startMessages : 'tags this -> unit) =
      fun (x13366 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x13366) "startMessages" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13377 : 'tags this) ->
        fun ~type_:(x13368 : 'K) ->
          fun ~listener:(x13369 : this:t -> ev:any -> any) ->
            fun
              ?options:(x13370 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13379 = this_to_js Obj.magic x13377 in
                   Ojs.call (Ojs.get_prop_ascii x13379 "addEventListener")
                     "apply"
                     [|x13379;((let x13371 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13371 "push"
                                     [|(Obj.magic x13368)|]);
                                ignore
                                  (Ojs.call x13371 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x13375 : Ojs.t) ->
                                             fun (x13376 : Ojs.t) ->
                                               any_to_js
                                                 (x13369
                                                    ~this:(t_of_js x13375)
                                                    ~ev:(any_of_js x13376))))|]);
                                (match x13370 with
                                 | Some x13372 ->
                                     ignore
                                       (Ojs.call x13371 "push"
                                          [|((match x13372 with
                                              | `U1 x13373 ->
                                                  Ojs.bool_to_js x13373
                                              | `U2 x13374 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x13374))|])
                                 | None -> ());
                                x13371))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13387 : 'tags this) ->
        fun ~type_:(x13380 : string) ->
          fun ~listener:(x13381 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x13382 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13389 = this_to_js Obj.magic x13387 in
                   Ojs.call (Ojs.get_prop_ascii x13389 "addEventListener")
                     "apply"
                     [|x13389;((let x13383 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13383 "push"
                                     [|(Ojs.string_to_js x13380)|]);
                                ignore
                                  (Ojs.call x13383 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x13381)|]);
                                (match x13382 with
                                 | Some x13384 ->
                                     ignore
                                       (Ojs.call x13383 "push"
                                          [|((match x13384 with
                                              | `U1 x13385 ->
                                                  Ojs.bool_to_js x13385
                                              | `U2 x13386 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x13386))|])
                                 | None -> ());
                                x13383))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13399 : 'tags this) ->
        fun ~type_:(x13390 : 'K) ->
          fun ~listener:(x13391 : this:t -> ev:any -> any) ->
            fun
              ?options:(x13392 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13401 = this_to_js Obj.magic x13399 in
                   Ojs.call (Ojs.get_prop_ascii x13401 "removeEventListener")
                     "apply"
                     [|x13401;((let x13393 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13393 "push"
                                     [|(Obj.magic x13390)|]);
                                ignore
                                  (Ojs.call x13393 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x13397 : Ojs.t) ->
                                             fun (x13398 : Ojs.t) ->
                                               any_to_js
                                                 (x13391
                                                    ~this:(t_of_js x13397)
                                                    ~ev:(any_of_js x13398))))|]);
                                (match x13392 with
                                 | Some x13394 ->
                                     ignore
                                       (Ojs.call x13393 "push"
                                          [|((match x13394 with
                                              | `U1 x13395 ->
                                                  Ojs.bool_to_js x13395
                                              | `U2 x13396 ->
                                                  EventListenerOptions.t_to_js
                                                    x13396))|])
                                 | None -> ());
                                x13393))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13409 : 'tags this) ->
        fun ~type_:(x13402 : string) ->
          fun ~listener:(x13403 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x13404 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13411 = this_to_js Obj.magic x13409 in
                   Ojs.call (Ojs.get_prop_ascii x13411 "removeEventListener")
                     "apply"
                     [|x13411;((let x13405 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13405 "push"
                                     [|(Ojs.string_to_js x13402)|]);
                                ignore
                                  (Ojs.call x13405 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x13403)|]);
                                (match x13404 with
                                 | Some x13406 ->
                                     ignore
                                       (Ojs.call x13405 "push"
                                          [|((match x13406 with
                                              | `U1 x13407 ->
                                                  Ojs.bool_to_js x13407
                                              | `U2 x13408 ->
                                                  EventListenerOptions.t_to_js
                                                    x13408))|])
                                 | None -> ());
                                x13405))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerContainer")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerContainer") 
             [||])
  end
module SecurityPolicyViolationEventDisposition =
  struct
    type t = [ `L_s172_report  | `L_s67_enforce ]
    let rec t_of_js : Ojs.t -> t =
      fun (x13413 : Ojs.t) ->
        let x13414 = x13413 in
        match Ojs.string_of_js x13414 with
        | "report" -> `L_s172_report
        | "enforce" -> `L_s67_enforce
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x13412 : [ `L_s172_report  | `L_s67_enforce ]) ->
        match x13412 with
        | `L_s172_report -> Ojs.string_to_js "report"
        | `L_s67_enforce -> Ojs.string_to_js "enforce"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13416 : Ojs.t) -> t_of_js x13416
    and t_0_to_js : t_0 -> Ojs.t = fun (x13415 : t) -> t_to_js x13415
  end
module SecurityPolicyViolationEventInit =
  struct
    type t = [ `EventInit  | `SecurityPolicyViolationEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13418 : Ojs.t) -> t_of_js x13418
    and t_0_to_js : t_0 -> Ojs.t = fun (x13417 : t) -> t_to_js x13417
    type tags = [ `EventInit  | `SecurityPolicyViolationEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `SecurityPolicyViolationEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13421 : Ojs.t) -> intf_of_js __tags_of_js x13421
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13419 : __tags intf) -> intf_to_js __tags_to_js x13419
    let (get_blockedURI : 'tags this -> string option) =
      fun (x13423 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13423) "blockedURI")
    let (set_blockedURI : 'tags this -> string -> unit) =
      fun (x13426 : 'tags this) ->
        fun (x13427 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13426) "blockedURI"
            (Ojs.string_to_js x13427)
    let (get_columnNumber : 'tags this -> float option) =
      fun (x13429 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13429) "columnNumber")
    let (set_columnNumber : 'tags this -> float -> unit) =
      fun (x13432 : 'tags this) ->
        fun (x13433 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13432) "columnNumber"
            (Ojs.float_to_js x13433)
    let (get_disposition :
      'tags this -> SecurityPolicyViolationEventDisposition.t) =
      fun (x13435 : 'tags this) ->
        SecurityPolicyViolationEventDisposition.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13435) "disposition")
    let (set_disposition :
      'tags this -> SecurityPolicyViolationEventDisposition.t -> unit) =
      fun (x13437 : 'tags this) ->
        fun (x13438 : SecurityPolicyViolationEventDisposition.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13437) "disposition"
            (SecurityPolicyViolationEventDisposition.t_to_js x13438)
    let (get_documentURI : 'tags this -> string) =
      fun (x13440 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13440) "documentURI")
    let (set_documentURI : 'tags this -> string -> unit) =
      fun (x13442 : 'tags this) ->
        fun (x13443 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13442) "documentURI"
            (Ojs.string_to_js x13443)
    let (get_effectiveDirective : 'tags this -> string) =
      fun (x13445 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13445)
             "effectiveDirective")
    let (set_effectiveDirective : 'tags this -> string -> unit) =
      fun (x13447 : 'tags this) ->
        fun (x13448 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13447)
            "effectiveDirective" (Ojs.string_to_js x13448)
    let (get_lineNumber : 'tags this -> float option) =
      fun (x13450 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13450) "lineNumber")
    let (set_lineNumber : 'tags this -> float -> unit) =
      fun (x13453 : 'tags this) ->
        fun (x13454 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13453) "lineNumber"
            (Ojs.float_to_js x13454)
    let (get_originalPolicy : 'tags this -> string) =
      fun (x13456 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13456) "originalPolicy")
    let (set_originalPolicy : 'tags this -> string -> unit) =
      fun (x13458 : 'tags this) ->
        fun (x13459 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13458) "originalPolicy"
            (Ojs.string_to_js x13459)
    let (get_referrer : 'tags this -> string option) =
      fun (x13461 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13461) "referrer")
    let (set_referrer : 'tags this -> string -> unit) =
      fun (x13464 : 'tags this) ->
        fun (x13465 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13464) "referrer"
            (Ojs.string_to_js x13465)
    let (get_sample : 'tags this -> string option) =
      fun (x13467 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13467) "sample")
    let (set_sample : 'tags this -> string -> unit) =
      fun (x13470 : 'tags this) ->
        fun (x13471 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13470) "sample"
            (Ojs.string_to_js x13471)
    let (get_sourceFile : 'tags this -> string option) =
      fun (x13473 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13473) "sourceFile")
    let (set_sourceFile : 'tags this -> string -> unit) =
      fun (x13476 : 'tags this) ->
        fun (x13477 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13476) "sourceFile"
            (Ojs.string_to_js x13477)
    let (get_statusCode : 'tags this -> float) =
      fun (x13479 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13479) "statusCode")
    let (set_statusCode : 'tags this -> float -> unit) =
      fun (x13481 : 'tags this) ->
        fun (x13482 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13481) "statusCode"
            (Ojs.float_to_js x13482)
    let (get_violatedDirective : 'tags this -> string) =
      fun (x13484 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13484)
             "violatedDirective")
    let (set_violatedDirective : 'tags this -> string -> unit) =
      fun (x13486 : 'tags this) ->
        fun (x13487 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13486)
            "violatedDirective" (Ojs.string_to_js x13487)
    let (create :
      ?blockedURI:string ->
        ?columnNumber:float ->
          disposition:SecurityPolicyViolationEventDisposition.t ->
            documentURI:string ->
              effectiveDirective:string ->
                ?lineNumber:float ->
                  originalPolicy:string ->
                    ?referrer:string ->
                      ?sample:string ->
                        ?sourceFile:string ->
                          statusCode:float ->
                            violatedDirective:string -> unit -> t)
      =
      fun ?blockedURI:(x13489 : string option) ->
        fun ?columnNumber:(x13490 : float option) ->
          fun
            ~disposition:(x13491 : SecurityPolicyViolationEventDisposition.t)
            ->
            fun ~documentURI:(x13492 : string) ->
              fun ~effectiveDirective:(x13493 : string) ->
                fun ?lineNumber:(x13494 : float option) ->
                  fun ~originalPolicy:(x13495 : string) ->
                    fun ?referrer:(x13496 : string option) ->
                      fun ?sample:(x13497 : string option) ->
                        fun ?sourceFile:(x13498 : string option) ->
                          fun ~statusCode:(x13499 : float) ->
                            fun ~violatedDirective:(x13500 : string) ->
                              fun () ->
                                let x13501 = Ojs.empty_obj () in
                                (match x13489 with
                                 | Some x13507 ->
                                     Ojs.set_prop_ascii x13501 "blockedURI"
                                       (Ojs.string_to_js x13507)
                                 | None -> ());
                                (match x13490 with
                                 | Some x13506 ->
                                     Ojs.set_prop_ascii x13501 "columnNumber"
                                       (Ojs.float_to_js x13506)
                                 | None -> ());
                                Ojs.set_prop_ascii x13501 "disposition"
                                  (SecurityPolicyViolationEventDisposition.t_to_js
                                     x13491);
                                Ojs.set_prop_ascii x13501 "documentURI"
                                  (Ojs.string_to_js x13492);
                                Ojs.set_prop_ascii x13501
                                  "effectiveDirective"
                                  (Ojs.string_to_js x13493);
                                (match x13494 with
                                 | Some x13505 ->
                                     Ojs.set_prop_ascii x13501 "lineNumber"
                                       (Ojs.float_to_js x13505)
                                 | None -> ());
                                Ojs.set_prop_ascii x13501 "originalPolicy"
                                  (Ojs.string_to_js x13495);
                                (match x13496 with
                                 | Some x13504 ->
                                     Ojs.set_prop_ascii x13501 "referrer"
                                       (Ojs.string_to_js x13504)
                                 | None -> ());
                                (match x13497 with
                                 | Some x13503 ->
                                     Ojs.set_prop_ascii x13501 "sample"
                                       (Ojs.string_to_js x13503)
                                 | None -> ());
                                (match x13498 with
                                 | Some x13502 ->
                                     Ojs.set_prop_ascii x13501 "sourceFile"
                                       (Ojs.string_to_js x13502)
                                 | None -> ());
                                Ojs.set_prop_ascii x13501 "statusCode"
                                  (Ojs.float_to_js x13499);
                                Ojs.set_prop_ascii x13501 "violatedDirective"
                                  (Ojs.string_to_js x13500);
                                t_of_js x13501
    let cast_from = Obj.magic
  end
module SecurityPolicyViolationEvent =
  struct
    type t = [ `Event  | `SecurityPolicyViolationEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13509 : Ojs.t) -> t_of_js x13509
    and t_0_to_js : t_0 -> Ojs.t = fun (x13508 : t) -> t_to_js x13508
    type tags = [ `Event  | `SecurityPolicyViolationEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `SecurityPolicyViolationEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13512 : Ojs.t) -> intf_of_js __tags_of_js x13512
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13510 : __tags intf) -> intf_to_js __tags_to_js x13510
    let (get_blockedURI : 'tags this -> string) =
      fun (x13514 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13514) "blockedURI")
    let (get_columnNumber : 'tags this -> float) =
      fun (x13516 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13516) "columnNumber")
    let (get_disposition :
      'tags this -> SecurityPolicyViolationEventDisposition.t) =
      fun (x13518 : 'tags this) ->
        SecurityPolicyViolationEventDisposition.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13518) "disposition")
    let (get_documentURI : 'tags this -> string) =
      fun (x13520 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13520) "documentURI")
    let (get_effectiveDirective : 'tags this -> string) =
      fun (x13522 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13522)
             "effectiveDirective")
    let (get_lineNumber : 'tags this -> float) =
      fun (x13524 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13524) "lineNumber")
    let (get_originalPolicy : 'tags this -> string) =
      fun (x13526 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13526) "originalPolicy")
    let (get_referrer : 'tags this -> string) =
      fun (x13528 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13528) "referrer")
    let (get_sample : 'tags this -> string) =
      fun (x13530 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13530) "sample")
    let (get_sourceFile : 'tags this -> string) =
      fun (x13532 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13532) "sourceFile")
    let (get_statusCode : 'tags this -> float) =
      fun (x13534 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13534) "statusCode")
    let (get_violatedDirective : 'tags this -> string) =
      fun (x13536 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13536)
             "violatedDirective")
    let (create :
      blockedURI:string ->
        columnNumber:float ->
          disposition:SecurityPolicyViolationEventDisposition.t ->
            documentURI:string ->
              effectiveDirective:string ->
                lineNumber:float ->
                  originalPolicy:string ->
                    referrer:string ->
                      sample:string ->
                        sourceFile:string ->
                          statusCode:float ->
                            violatedDirective:string -> unit -> t)
      =
      fun ~blockedURI:(x13538 : string) ->
        fun ~columnNumber:(x13539 : float) ->
          fun
            ~disposition:(x13540 : SecurityPolicyViolationEventDisposition.t)
            ->
            fun ~documentURI:(x13541 : string) ->
              fun ~effectiveDirective:(x13542 : string) ->
                fun ~lineNumber:(x13543 : float) ->
                  fun ~originalPolicy:(x13544 : string) ->
                    fun ~referrer:(x13545 : string) ->
                      fun ~sample:(x13546 : string) ->
                        fun ~sourceFile:(x13547 : string) ->
                          fun ~statusCode:(x13548 : float) ->
                            fun ~violatedDirective:(x13549 : string) ->
                              fun () ->
                                let x13550 = Ojs.empty_obj () in
                                Ojs.set_prop_ascii x13550 "blockedURI"
                                  (Ojs.string_to_js x13538);
                                Ojs.set_prop_ascii x13550 "columnNumber"
                                  (Ojs.float_to_js x13539);
                                Ojs.set_prop_ascii x13550 "disposition"
                                  (SecurityPolicyViolationEventDisposition.t_to_js
                                     x13540);
                                Ojs.set_prop_ascii x13550 "documentURI"
                                  (Ojs.string_to_js x13541);
                                Ojs.set_prop_ascii x13550
                                  "effectiveDirective"
                                  (Ojs.string_to_js x13542);
                                Ojs.set_prop_ascii x13550 "lineNumber"
                                  (Ojs.float_to_js x13543);
                                Ojs.set_prop_ascii x13550 "originalPolicy"
                                  (Ojs.string_to_js x13544);
                                Ojs.set_prop_ascii x13550 "referrer"
                                  (Ojs.string_to_js x13545);
                                Ojs.set_prop_ascii x13550 "sample"
                                  (Ojs.string_to_js x13546);
                                Ojs.set_prop_ascii x13550 "sourceFile"
                                  (Ojs.string_to_js x13547);
                                Ojs.set_prop_ascii x13550 "statusCode"
                                  (Ojs.float_to_js x13548);
                                Ojs.set_prop_ascii x13550 "violatedDirective"
                                  (Ojs.string_to_js x13549);
                                t_of_js x13550
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "SecurityPolicyViolationEvent")
             "prototype")
    let (create' :
      type_:string ->
        ?eventInitDict:SecurityPolicyViolationEventInit.t -> unit -> t)
      =
      fun ~type_:(x13551 : string) ->
        fun
          ?eventInitDict:(x13552 : SecurityPolicyViolationEventInit.t option)
          ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global
                    "SecurityPolicyViolationEvent")
                 (let x13553 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x13553 "push" [|(Ojs.string_to_js x13551)|]);
                  (match x13552 with
                   | Some x13554 ->
                       ignore
                         (Ojs.call x13553 "push"
                            [|(SecurityPolicyViolationEventInit.t_to_js
                                 x13554)|])
                   | None -> ());
                  x13553))
  end
module ReadableStreamReader =
  struct
    type 'T t = 'T ReadableStreamDefaultReader.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x13557 : Ojs.t) ->
            ReadableStreamDefaultReader.t_of_js __T_of_js x13557
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x13555 : __T ReadableStreamDefaultReader.t) ->
            ReadableStreamDefaultReader.t_to_js __T_to_js x13555
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x13561 : Ojs.t) -> t_of_js __T_of_js x13561
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x13559 : __T t) -> t_to_js __T_to_js x13559
  end
module PermissionStatus =
  struct
    type t = [ `EventTarget  | `PermissionStatus ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13564 : Ojs.t) -> t_of_js x13564
    and t_0_to_js : t_0 -> Ojs.t = fun (x13563 : t) -> t_to_js x13563
    type tags = [ `EventTarget  | `PermissionStatus ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PermissionStatus ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13567 : Ojs.t) -> intf_of_js __tags_of_js x13567
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13565 : __tags intf) -> intf_to_js __tags_to_js x13565
    let (get_onchange : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x13569 : 'tags this) ->
        Ojs.option_of_js
          (fun (x13571 : Ojs.t) ->
             fun ~this:(x13572 : t) ->
               fun ~ev:(x13573 : Event.t) ->
                 any_of_js
                   (Ojs.apply x13571
                      [|(t_to_js x13572);(Event.t_to_js x13573)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13569) "onchange")
    let (set_onchange :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x13574 : 'tags this) ->
        fun (x13575 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13574) "onchange"
            (Ojs.option_to_js
               (fun (x13576 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13577 : Ojs.t) ->
                       fun (x13578 : Ojs.t) ->
                         any_to_js
                           (x13576 ~this:(t_of_js x13577)
                              ~ev:(Event.t_of_js x13578)))) x13575)
    let (get_state : 'tags this -> PermissionState.t) =
      fun (x13580 : 'tags this) ->
        PermissionState.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13580) "state")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13591 : 'tags this) ->
        fun ~type_:(x13582 : 'K) ->
          fun ~listener:(x13583 : this:t -> ev:any -> any) ->
            fun
              ?options:(x13584 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13593 = this_to_js Obj.magic x13591 in
                   Ojs.call (Ojs.get_prop_ascii x13593 "addEventListener")
                     "apply"
                     [|x13593;((let x13585 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13585 "push"
                                     [|(Obj.magic x13582)|]);
                                ignore
                                  (Ojs.call x13585 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x13589 : Ojs.t) ->
                                             fun (x13590 : Ojs.t) ->
                                               any_to_js
                                                 (x13583
                                                    ~this:(t_of_js x13589)
                                                    ~ev:(any_of_js x13590))))|]);
                                (match x13584 with
                                 | Some x13586 ->
                                     ignore
                                       (Ojs.call x13585 "push"
                                          [|((match x13586 with
                                              | `U1 x13587 ->
                                                  Ojs.bool_to_js x13587
                                              | `U2 x13588 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x13588))|])
                                 | None -> ());
                                x13585))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13601 : 'tags this) ->
        fun ~type_:(x13594 : string) ->
          fun ~listener:(x13595 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x13596 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13603 = this_to_js Obj.magic x13601 in
                   Ojs.call (Ojs.get_prop_ascii x13603 "addEventListener")
                     "apply"
                     [|x13603;((let x13597 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13597 "push"
                                     [|(Ojs.string_to_js x13594)|]);
                                ignore
                                  (Ojs.call x13597 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x13595)|]);
                                (match x13596 with
                                 | Some x13598 ->
                                     ignore
                                       (Ojs.call x13597 "push"
                                          [|((match x13598 with
                                              | `U1 x13599 ->
                                                  Ojs.bool_to_js x13599
                                              | `U2 x13600 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x13600))|])
                                 | None -> ());
                                x13597))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13613 : 'tags this) ->
        fun ~type_:(x13604 : 'K) ->
          fun ~listener:(x13605 : this:t -> ev:any -> any) ->
            fun
              ?options:(x13606 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13615 = this_to_js Obj.magic x13613 in
                   Ojs.call (Ojs.get_prop_ascii x13615 "removeEventListener")
                     "apply"
                     [|x13615;((let x13607 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13607 "push"
                                     [|(Obj.magic x13604)|]);
                                ignore
                                  (Ojs.call x13607 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x13611 : Ojs.t) ->
                                             fun (x13612 : Ojs.t) ->
                                               any_to_js
                                                 (x13605
                                                    ~this:(t_of_js x13611)
                                                    ~ev:(any_of_js x13612))))|]);
                                (match x13606 with
                                 | Some x13608 ->
                                     ignore
                                       (Ojs.call x13607 "push"
                                          [|((match x13608 with
                                              | `U1 x13609 ->
                                                  Ojs.bool_to_js x13609
                                              | `U2 x13610 ->
                                                  EventListenerOptions.t_to_js
                                                    x13610))|])
                                 | None -> ());
                                x13607))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13623 : 'tags this) ->
        fun ~type_:(x13616 : string) ->
          fun ~listener:(x13617 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x13618 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13625 = this_to_js Obj.magic x13623 in
                   Ojs.call (Ojs.get_prop_ascii x13625 "removeEventListener")
                     "apply"
                     [|x13625;((let x13619 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13619 "push"
                                     [|(Ojs.string_to_js x13616)|]);
                                ignore
                                  (Ojs.call x13619 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x13617)|]);
                                (match x13618 with
                                 | Some x13620 ->
                                     ignore
                                       (Ojs.call x13619 "push"
                                          [|((match x13620 with
                                              | `U1 x13621 ->
                                                  Ojs.bool_to_js x13621
                                              | `U2 x13622 ->
                                                  EventListenerOptions.t_to_js
                                                    x13622))|])
                                 | None -> ());
                                x13619))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PermissionStatus") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PermissionStatus")
             [||])
  end
module PermissionName =
  struct
    type t =
      [ `L_s133_notifications  | `L_s150_persistent_storage  | `L_s161_push 
      | `L_s176_screen_wake_lock  | `L_s217_xr_spatial_tracking 
      | `L_s82_geolocation ]
    let rec t_of_js : Ojs.t -> t =
      fun (x13627 : Ojs.t) ->
        let x13628 = x13627 in
        match Ojs.string_of_js x13628 with
        | "notifications" -> `L_s133_notifications
        | "persistent-storage" -> `L_s150_persistent_storage
        | "push" -> `L_s161_push
        | "screen-wake-lock" -> `L_s176_screen_wake_lock
        | "xr-spatial-tracking" -> `L_s217_xr_spatial_tracking
        | "geolocation" -> `L_s82_geolocation
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x13626 :
          [ `L_s133_notifications  | `L_s150_persistent_storage 
          | `L_s161_push  | `L_s176_screen_wake_lock 
          | `L_s217_xr_spatial_tracking  | `L_s82_geolocation ])
        ->
        match x13626 with
        | `L_s133_notifications -> Ojs.string_to_js "notifications"
        | `L_s150_persistent_storage -> Ojs.string_to_js "persistent-storage"
        | `L_s161_push -> Ojs.string_to_js "push"
        | `L_s176_screen_wake_lock -> Ojs.string_to_js "screen-wake-lock"
        | `L_s217_xr_spatial_tracking ->
            Ojs.string_to_js "xr-spatial-tracking"
        | `L_s82_geolocation -> Ojs.string_to_js "geolocation"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13630 : Ojs.t) -> t_of_js x13630
    and t_0_to_js : t_0 -> Ojs.t = fun (x13629 : t) -> t_to_js x13629
  end
module PermissionDescriptor =
  struct
    type t = [ `PermissionDescriptor ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13632 : Ojs.t) -> t_of_js x13632
    and t_0_to_js : t_0 -> Ojs.t = fun (x13631 : t) -> t_to_js x13631
    type tags = [ `PermissionDescriptor ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PermissionDescriptor ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13635 : Ojs.t) -> intf_of_js __tags_of_js x13635
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13633 : __tags intf) -> intf_to_js __tags_to_js x13633
    let (get_name : 'tags this -> PermissionName.t) =
      fun (x13637 : 'tags this) ->
        PermissionName.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13637) "name")
    let (set_name : 'tags this -> PermissionName.t -> unit) =
      fun (x13639 : 'tags this) ->
        fun (x13640 : PermissionName.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13639) "name"
            (PermissionName.t_to_js x13640)
    let (create : name:PermissionName.t -> unit -> t) =
      fun ~name:(x13642 : PermissionName.t) ->
        fun () ->
          let x13643 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x13643 "name" (PermissionName.t_to_js x13642);
          t_of_js x13643
    let cast_from = Obj.magic
  end
module Permissions =
  struct
    type t = [ `Permissions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13645 : Ojs.t) -> t_of_js x13645
    and t_0_to_js : t_0 -> Ojs.t = fun (x13644 : t) -> t_to_js x13644
    type tags = [ `Permissions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Permissions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13648 : Ojs.t) -> intf_of_js __tags_of_js x13648
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13646 : __tags intf) -> intf_to_js __tags_to_js x13646
    let (query :
      'tags this ->
        permissionDesc:PermissionDescriptor.t ->
          PermissionStatus.t Promise.t_1)
      =
      fun (x13651 : 'tags this) ->
        fun ~permissionDesc:(x13650 : PermissionDescriptor.t) ->
          Promise.t_1_of_js PermissionStatus.t_of_js
            (Ojs.call (this_to_js Obj.magic x13651) "query"
               [|(PermissionDescriptor.t_to_js x13650)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Permissions")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Permissions") [||])
  end
module PermissionStatusEventMap =
  struct
    type t = [ `PermissionStatusEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13655 : Ojs.t) -> t_of_js x13655
    and t_0_to_js : t_0 -> Ojs.t = fun (x13654 : t) -> t_to_js x13654
    type tags = [ `PermissionStatusEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PermissionStatusEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13658 : Ojs.t) -> intf_of_js __tags_of_js x13658
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13656 : __tags intf) -> intf_to_js __tags_to_js x13656
    let (get_change : 'tags this -> Event.t) =
      fun (x13660 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13660) "change")
    let (set_change : 'tags this -> Event.t -> unit) =
      fun (x13662 : 'tags this) ->
        fun (x13663 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13662) "change"
            (Event.t_to_js x13663)
    let (create : change:Event.t -> unit -> t) =
      fun ~change:(x13665 : Event.t) ->
        fun () ->
          let x13666 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x13666 "change" (Event.t_to_js x13665);
          t_of_js x13666
    let cast_from = Obj.magic
  end
module PerformanceServerTiming =
  struct
    type t = [ `PerformanceServerTiming ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13668 : Ojs.t) -> t_of_js x13668
    and t_0_to_js : t_0 -> Ojs.t = fun (x13667 : t) -> t_to_js x13667
    type tags = [ `PerformanceServerTiming ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceServerTiming ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13671 : Ojs.t) -> intf_of_js __tags_of_js x13671
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13669 : __tags intf) -> intf_to_js __tags_to_js x13669
    let (get_description : 'tags this -> string) =
      fun (x13673 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13673) "description")
    let (get_duration : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13675 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13675) "duration")
    let (get_name : 'tags this -> string) =
      fun (x13677 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13677) "name")
    let (toJSON : 'tags this -> any) =
      fun (x13679 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x13679) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceServerTiming")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "PerformanceServerTiming") 
             [||])
  end
module PerformanceResourceTiming =
  struct
    type t = [ `PerformanceEntry  | `PerformanceResourceTiming ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13682 : Ojs.t) -> t_of_js x13682
    and t_0_to_js : t_0 -> Ojs.t = fun (x13681 : t) -> t_to_js x13681
    type tags = [ `PerformanceEntry  | `PerformanceResourceTiming ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceResourceTiming ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13685 : Ojs.t) -> intf_of_js __tags_of_js x13685
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13683 : __tags intf) -> intf_to_js __tags_to_js x13683
    let (get_connectEnd : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13687 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13687) "connectEnd")
    let (get_connectStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13689 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13689) "connectStart")
    let (get_decodedBodySize : 'tags this -> float) =
      fun (x13691 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13691) "decodedBodySize")
    let (get_domainLookupEnd : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13693 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13693) "domainLookupEnd")
    let (get_domainLookupStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13695 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13695)
             "domainLookupStart")
    let (get_encodedBodySize : 'tags this -> float) =
      fun (x13697 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13697) "encodedBodySize")
    let (get_fetchStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13699 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13699) "fetchStart")
    let (get_initiatorType : 'tags this -> string) =
      fun (x13701 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13701) "initiatorType")
    let (get_nextHopProtocol : 'tags this -> string) =
      fun (x13703 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13703) "nextHopProtocol")
    let (get_redirectEnd : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13705 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13705) "redirectEnd")
    let (get_redirectStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13707 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13707) "redirectStart")
    let (get_requestStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13709 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13709) "requestStart")
    let (get_responseEnd : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13711 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13711) "responseEnd")
    let (get_responseStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13713 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13713) "responseStart")
    let (get_secureConnectionStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13715 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13715)
             "secureConnectionStart")
    let (get_serverTiming : 'tags this -> PerformanceServerTiming.t list) =
      fun (x13717 : 'tags this) ->
        Ojs.list_of_js PerformanceServerTiming.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13717) "serverTiming")
    let (get_transferSize : 'tags this -> float) =
      fun (x13720 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13720) "transferSize")
    let (get_workerStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13722 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13722) "workerStart")
    let (toJSON : 'tags this -> any) =
      fun (x13724 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x13724) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceResourceTiming")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "PerformanceResourceTiming") 
             [||])
  end
module PerformanceObserverInit =
  struct
    type t = [ `PerformanceObserverInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13727 : Ojs.t) -> t_of_js x13727
    and t_0_to_js : t_0 -> Ojs.t = fun (x13726 : t) -> t_to_js x13726
    type tags = [ `PerformanceObserverInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceObserverInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13730 : Ojs.t) -> intf_of_js __tags_of_js x13730
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13728 : __tags intf) -> intf_to_js __tags_to_js x13728
    let (get_buffered : 'tags this -> bool option) =
      fun (x13732 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13732) "buffered")
    let (set_buffered : 'tags this -> bool -> unit) =
      fun (x13735 : 'tags this) ->
        fun (x13736 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13735) "buffered"
            (Ojs.bool_to_js x13736)
    let (get_entryTypes : 'tags this -> string list option) =
      fun (x13738 : 'tags this) ->
        Ojs.option_of_js
          (fun (x13740 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x13740)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13738) "entryTypes")
    let (set_entryTypes : 'tags this -> string list -> unit) =
      fun (x13742 : 'tags this) ->
        fun (x13743 : string list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13742) "entryTypes"
            (Ojs.list_to_js Ojs.string_to_js x13743)
    let (get_type : 'tags this -> string option) =
      fun (x13746 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13746) "type")
    let (set_type : 'tags this -> string -> unit) =
      fun (x13749 : 'tags this) ->
        fun (x13750 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13749) "type"
            (Ojs.string_to_js x13750)
    let (create :
      ?buffered:bool -> ?entryTypes:string list -> ?type_:string -> unit -> t)
      =
      fun ?buffered:(x13752 : bool option) ->
        fun ?entryTypes:(x13753 : string list option) ->
          fun ?type_:(x13754 : string option) ->
            fun () ->
              let x13755 = Ojs.empty_obj () in
              (match x13752 with
               | Some x13759 ->
                   Ojs.set_prop_ascii x13755 "buffered"
                     (Ojs.bool_to_js x13759)
               | None -> ());
              (match x13753 with
               | Some x13757 ->
                   Ojs.set_prop_ascii x13755 "entryTypes"
                     (Ojs.list_to_js Ojs.string_to_js x13757)
               | None -> ());
              (match x13754 with
               | Some x13756 ->
                   Ojs.set_prop_ascii x13755 "type" (Ojs.string_to_js x13756)
               | None -> ());
              t_of_js x13755
    let cast_from = Obj.magic
  end
module PerformanceObserverEntryList =
  struct
    type t = [ `PerformanceObserverEntryList ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13761 : Ojs.t) -> t_of_js x13761
    and t_0_to_js : t_0 -> Ojs.t = fun (x13760 : t) -> t_to_js x13760
    type tags = [ `PerformanceObserverEntryList ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceObserverEntryList ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13764 : Ojs.t) -> intf_of_js __tags_of_js x13764
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13762 : __tags intf) -> intf_to_js __tags_to_js x13762
    let (getEntries : 'tags this -> PerformanceEntryList.t) =
      fun (x13766 : 'tags this) ->
        PerformanceEntryList.t_of_js
          (Ojs.call (this_to_js Obj.magic x13766) "getEntries" [||])
    let (getEntriesByName :
      'tags this ->
        name:string -> ?type_:string -> unit -> PerformanceEntryList.t)
      =
      fun (x13772 : 'tags this) ->
        fun ~name:(x13768 : string) ->
          fun ?type_:(x13769 : string option) ->
            fun () ->
              PerformanceEntryList.t_of_js
                (let x13774 = this_to_js Obj.magic x13772 in
                 Ojs.call (Ojs.get_prop_ascii x13774 "getEntriesByName")
                   "apply"
                   [|x13774;((let x13770 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x13770 "push"
                                   [|(Ojs.string_to_js x13768)|]);
                              (match x13769 with
                               | Some x13771 ->
                                   ignore
                                     (Ojs.call x13770 "push"
                                        [|(Ojs.string_to_js x13771)|])
                               | None -> ());
                              x13770))|])
    let (getEntriesByType :
      'tags this -> type_:string -> PerformanceEntryList.t) =
      fun (x13776 : 'tags this) ->
        fun ~type_:(x13775 : string) ->
          PerformanceEntryList.t_of_js
            (Ojs.call (this_to_js Obj.magic x13776) "getEntriesByType"
               [|(Ojs.string_to_js x13775)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceObserverEntryList")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "PerformanceObserverEntryList")
             [||])
  end
module rec
  PerformanceObserver:sig
                        type t = [ `PerformanceObserver ] intf
                        type t_0 = t
                        [@@@js.stop ]
                        type tags = [ `PerformanceObserver ]
                        type tags_0 = tags
                        [@@@js.start ]
                        [@@@js.implem
                          type tags = [ `PerformanceObserver ]
                          type tags_0 = tags]
                        type 'tags this =
                          'tags intf constraint 'tags =
                                      [> `PerformanceObserver ]
                        val t_to_js : t -> Ojs.t
                        val t_of_js : Ojs.t -> t
                        val t_0_to_js : t_0 -> Ojs.t
                        val t_0_of_js : Ojs.t -> t_0
                        val disconnect : 'tags this -> unit
                        val observe :
                          'tags this ->
                            ?options:PerformanceObserverInit.t ->
                              unit -> unit
                        val takeRecords :
                          'tags this -> PerformanceEntryList.t
                        val cast_from : 'tags this -> t
                        val prototype : unit -> t
                        val create : PerformanceObserverCallback.t -> t
                        val supportedEntryTypes : unit -> string list
                      end =
  struct
    type t = [ `PerformanceObserver ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13779 : Ojs.t) -> t_of_js x13779
    and t_0_to_js : t_0 -> Ojs.t = fun (x13778 : t) -> t_to_js x13778
    type tags = [ `PerformanceObserver ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceObserver ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13782 : Ojs.t) -> intf_of_js __tags_of_js x13782
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13780 : __tags intf) -> intf_to_js __tags_to_js x13780
    let (disconnect : 'tags this -> unit) =
      fun (x13784 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x13784) "disconnect" [||])
    let (observe :
      'tags this -> ?options:PerformanceObserverInit.t -> unit -> unit) =
      fun (x13789 : 'tags this) ->
        fun ?options:(x13786 : PerformanceObserverInit.t option) ->
          fun () ->
            ignore
              (let x13791 = this_to_js Obj.magic x13789 in
               Ojs.call (Ojs.get_prop_ascii x13791 "observe") "apply"
                 [|x13791;((let x13787 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x13786 with
                             | Some x13788 ->
                                 ignore
                                   (Ojs.call x13787 "push"
                                      [|(PerformanceObserverInit.t_to_js
                                           x13788)|])
                             | None -> ());
                            x13787))|])
    let (takeRecords : 'tags this -> PerformanceEntryList.t) =
      fun (x13792 : 'tags this) ->
        PerformanceEntryList.t_of_js
          (Ojs.call (this_to_js Obj.magic x13792) "takeRecords" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceObserver")
             "prototype")
    let (create : PerformanceObserverCallback.t -> t) =
      fun (x13794 : PerformanceObserverCallback.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PerformanceObserver")
             [|(PerformanceObserverCallback.t_to_js x13794)|])
    let (supportedEntryTypes : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceObserver")
             "supportedEntryTypes")
  end
 and
  PerformanceObserverCallback:sig
                                type t =
                                  [ `PerformanceObserverCallback ] intf
                                type t_0 = t
                                [@@@js.stop ]
                                type tags = [ `PerformanceObserverCallback ]
                                type tags_0 = tags
                                [@@@js.start ]
                                [@@@js.implem
                                  type tags =
                                    [ `PerformanceObserverCallback ]
                                  type tags_0 = tags]
                                type 'tags this =
                                  'tags intf constraint 'tags =
                                              [>
                                                `PerformanceObserverCallback ]
                                val t_to_js : t -> Ojs.t
                                val t_of_js : Ojs.t -> t
                                val t_0_to_js : t_0 -> Ojs.t
                                val t_0_of_js : Ojs.t -> t_0
                                val apply :
                                  'tags this ->
                                    entries:PerformanceObserverEntryList.t ->
                                      observer:PerformanceObserver.t -> unit
                                val cast_from : 'tags this -> t
                              end =
  struct
    type t = [ `PerformanceObserverCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13797 : Ojs.t) -> t_of_js x13797
    and t_0_to_js : t_0 -> Ojs.t = fun (x13796 : t) -> t_to_js x13796
    type tags = [ `PerformanceObserverCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceObserverCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13800 : Ojs.t) -> intf_of_js __tags_of_js x13800
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13798 : __tags intf) -> intf_to_js __tags_to_js x13798
    let (apply :
      'tags this ->
        entries:PerformanceObserverEntryList.t ->
          observer:PerformanceObserver.t -> unit)
      =
      fun (x13804 : 'tags this) ->
        fun ~entries:(x13802 : PerformanceObserverEntryList.t) ->
          fun ~observer:(x13803 : PerformanceObserver.t) ->
            ignore
              (Ojs.apply (this_to_js Obj.magic x13804)
                 [|(PerformanceObserverEntryList.t_to_js x13802);(PerformanceObserver.t_to_js
                                                                    x13803)|])
    let cast_from = Obj.magic
  end
module PerformanceEventMap =
  struct
    type t = [ `PerformanceEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13807 : Ojs.t) -> t_of_js x13807
    and t_0_to_js : t_0 -> Ojs.t = fun (x13806 : t) -> t_to_js x13806
    type tags = [ `PerformanceEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13810 : Ojs.t) -> intf_of_js __tags_of_js x13810
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13808 : __tags intf) -> intf_to_js __tags_to_js x13808
    let (get_resourcetimingbufferfull : 'tags this -> Event.t) =
      fun (x13812 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13812)
             "resourcetimingbufferfull")
    let (set_resourcetimingbufferfull : 'tags this -> Event.t -> unit) =
      fun (x13814 : 'tags this) ->
        fun (x13815 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13814)
            "resourcetimingbufferfull" (Event.t_to_js x13815)
    let (create : resourcetimingbufferfull:Event.t -> unit -> t) =
      fun ~resourcetimingbufferfull:(x13817 : Event.t) ->
        fun () ->
          let x13818 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x13818 "resourcetimingbufferfull"
            (Event.t_to_js x13817);
          t_of_js x13818
    let cast_from = Obj.magic
  end
module DOMMatrix2DInit =
  struct
    type t = [ `DOMMatrix2DInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13820 : Ojs.t) -> t_of_js x13820
    and t_0_to_js : t_0 -> Ojs.t = fun (x13819 : t) -> t_to_js x13819
    type tags = [ `DOMMatrix2DInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrix2DInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13823 : Ojs.t) -> intf_of_js __tags_of_js x13823
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13821 : __tags intf) -> intf_to_js __tags_to_js x13821
    let (get_a : 'tags this -> float option) =
      fun (x13825 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13825) "a")
    let (set_a : 'tags this -> float -> unit) =
      fun (x13828 : 'tags this) ->
        fun (x13829 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13828) "a"
            (Ojs.float_to_js x13829)
    let (get_b : 'tags this -> float option) =
      fun (x13831 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13831) "b")
    let (set_b : 'tags this -> float -> unit) =
      fun (x13834 : 'tags this) ->
        fun (x13835 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13834) "b"
            (Ojs.float_to_js x13835)
    let (get_c : 'tags this -> float option) =
      fun (x13837 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13837) "c")
    let (set_c : 'tags this -> float -> unit) =
      fun (x13840 : 'tags this) ->
        fun (x13841 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13840) "c"
            (Ojs.float_to_js x13841)
    let (get_d : 'tags this -> float option) =
      fun (x13843 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13843) "d")
    let (set_d : 'tags this -> float -> unit) =
      fun (x13846 : 'tags this) ->
        fun (x13847 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13846) "d"
            (Ojs.float_to_js x13847)
    let (get_e : 'tags this -> float option) =
      fun (x13849 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13849) "e")
    let (set_e : 'tags this -> float -> unit) =
      fun (x13852 : 'tags this) ->
        fun (x13853 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13852) "e"
            (Ojs.float_to_js x13853)
    let (get_f : 'tags this -> float option) =
      fun (x13855 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13855) "f")
    let (set_f : 'tags this -> float -> unit) =
      fun (x13858 : 'tags this) ->
        fun (x13859 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13858) "f"
            (Ojs.float_to_js x13859)
    let (get_m11 : 'tags this -> float option) =
      fun (x13861 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13861) "m11")
    let (set_m11 : 'tags this -> float -> unit) =
      fun (x13864 : 'tags this) ->
        fun (x13865 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13864) "m11"
            (Ojs.float_to_js x13865)
    let (get_m12 : 'tags this -> float option) =
      fun (x13867 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13867) "m12")
    let (set_m12 : 'tags this -> float -> unit) =
      fun (x13870 : 'tags this) ->
        fun (x13871 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13870) "m12"
            (Ojs.float_to_js x13871)
    let (get_m21 : 'tags this -> float option) =
      fun (x13873 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13873) "m21")
    let (set_m21 : 'tags this -> float -> unit) =
      fun (x13876 : 'tags this) ->
        fun (x13877 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13876) "m21"
            (Ojs.float_to_js x13877)
    let (get_m22 : 'tags this -> float option) =
      fun (x13879 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13879) "m22")
    let (set_m22 : 'tags this -> float -> unit) =
      fun (x13882 : 'tags this) ->
        fun (x13883 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13882) "m22"
            (Ojs.float_to_js x13883)
    let (get_m41 : 'tags this -> float option) =
      fun (x13885 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13885) "m41")
    let (set_m41 : 'tags this -> float -> unit) =
      fun (x13888 : 'tags this) ->
        fun (x13889 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13888) "m41"
            (Ojs.float_to_js x13889)
    let (get_m42 : 'tags this -> float option) =
      fun (x13891 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13891) "m42")
    let (set_m42 : 'tags this -> float -> unit) =
      fun (x13894 : 'tags this) ->
        fun (x13895 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13894) "m42"
            (Ojs.float_to_js x13895)
    let (create :
      ?a:float ->
        ?b:float ->
          ?c:float ->
            ?d:float ->
              ?e:float ->
                ?f:float ->
                  ?m11:float ->
                    ?m12:float ->
                      ?m21:float ->
                        ?m22:float -> ?m41:float -> ?m42:float -> unit -> t)
      =
      fun ?a:(x13897 : float option) ->
        fun ?b:(x13898 : float option) ->
          fun ?c:(x13899 : float option) ->
            fun ?d:(x13900 : float option) ->
              fun ?e:(x13901 : float option) ->
                fun ?f:(x13902 : float option) ->
                  fun ?m11:(x13903 : float option) ->
                    fun ?m12:(x13904 : float option) ->
                      fun ?m21:(x13905 : float option) ->
                        fun ?m22:(x13906 : float option) ->
                          fun ?m41:(x13907 : float option) ->
                            fun ?m42:(x13908 : float option) ->
                              fun () ->
                                let x13909 = Ojs.empty_obj () in
                                (match x13897 with
                                 | Some x13921 ->
                                     Ojs.set_prop_ascii x13909 "a"
                                       (Ojs.float_to_js x13921)
                                 | None -> ());
                                (match x13898 with
                                 | Some x13920 ->
                                     Ojs.set_prop_ascii x13909 "b"
                                       (Ojs.float_to_js x13920)
                                 | None -> ());
                                (match x13899 with
                                 | Some x13919 ->
                                     Ojs.set_prop_ascii x13909 "c"
                                       (Ojs.float_to_js x13919)
                                 | None -> ());
                                (match x13900 with
                                 | Some x13918 ->
                                     Ojs.set_prop_ascii x13909 "d"
                                       (Ojs.float_to_js x13918)
                                 | None -> ());
                                (match x13901 with
                                 | Some x13917 ->
                                     Ojs.set_prop_ascii x13909 "e"
                                       (Ojs.float_to_js x13917)
                                 | None -> ());
                                (match x13902 with
                                 | Some x13916 ->
                                     Ojs.set_prop_ascii x13909 "f"
                                       (Ojs.float_to_js x13916)
                                 | None -> ());
                                (match x13903 with
                                 | Some x13915 ->
                                     Ojs.set_prop_ascii x13909 "m11"
                                       (Ojs.float_to_js x13915)
                                 | None -> ());
                                (match x13904 with
                                 | Some x13914 ->
                                     Ojs.set_prop_ascii x13909 "m12"
                                       (Ojs.float_to_js x13914)
                                 | None -> ());
                                (match x13905 with
                                 | Some x13913 ->
                                     Ojs.set_prop_ascii x13909 "m21"
                                       (Ojs.float_to_js x13913)
                                 | None -> ());
                                (match x13906 with
                                 | Some x13912 ->
                                     Ojs.set_prop_ascii x13909 "m22"
                                       (Ojs.float_to_js x13912)
                                 | None -> ());
                                (match x13907 with
                                 | Some x13911 ->
                                     Ojs.set_prop_ascii x13909 "m41"
                                       (Ojs.float_to_js x13911)
                                 | None -> ());
                                (match x13908 with
                                 | Some x13910 ->
                                     Ojs.set_prop_ascii x13909 "m42"
                                       (Ojs.float_to_js x13910)
                                 | None -> ());
                                t_of_js x13909
    let cast_from = Obj.magic
  end
module CanvasPath =
  struct
    type t = [ `CanvasPath ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13923 : Ojs.t) -> t_of_js x13923
    and t_0_to_js : t_0 -> Ojs.t = fun (x13922 : t) -> t_to_js x13922
    type tags = [ `CanvasPath ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CanvasPath ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13926 : Ojs.t) -> intf_of_js __tags_of_js x13926
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13924 : __tags intf) -> intf_to_js __tags_to_js x13924
    let (arc :
      'tags this ->
        x:float ->
          y:float ->
            radius:float ->
              startAngle:float ->
                endAngle:float -> ?counterclockwise:bool -> unit -> unit)
      =
      fun (x13936 : 'tags this) ->
        fun ~x:(x13928 : float) ->
          fun ~y:(x13929 : float) ->
            fun ~radius:(x13930 : float) ->
              fun ~startAngle:(x13931 : float) ->
                fun ~endAngle:(x13932 : float) ->
                  fun ?counterclockwise:(x13933 : bool option) ->
                    fun () ->
                      ignore
                        (let x13938 = this_to_js Obj.magic x13936 in
                         Ojs.call (Ojs.get_prop_ascii x13938 "arc") "apply"
                           [|x13938;((let x13934 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x13934 "push"
                                           [|(Ojs.float_to_js x13928)|]);
                                      ignore
                                        (Ojs.call x13934 "push"
                                           [|(Ojs.float_to_js x13929)|]);
                                      ignore
                                        (Ojs.call x13934 "push"
                                           [|(Ojs.float_to_js x13930)|]);
                                      ignore
                                        (Ojs.call x13934 "push"
                                           [|(Ojs.float_to_js x13931)|]);
                                      ignore
                                        (Ojs.call x13934 "push"
                                           [|(Ojs.float_to_js x13932)|]);
                                      (match x13933 with
                                       | Some x13935 ->
                                           ignore
                                             (Ojs.call x13934 "push"
                                                [|(Ojs.bool_to_js x13935)|])
                                       | None -> ());
                                      x13934))|])
    let (arcTo :
      'tags this ->
        x1:float -> y1:float -> x2:float -> y2:float -> radius:float -> unit)
      =
      fun (x13944 : 'tags this) ->
        fun ~x1:(x13939 : float) ->
          fun ~y1:(x13940 : float) ->
            fun ~x2:(x13941 : float) ->
              fun ~y2:(x13942 : float) ->
                fun ~radius:(x13943 : float) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x13944) "arcTo"
                       [|(Ojs.float_to_js x13939);(Ojs.float_to_js x13940);(
                         Ojs.float_to_js x13941);(Ojs.float_to_js x13942);(
                         Ojs.float_to_js x13943)|])
    let (bezierCurveTo :
      'tags this ->
        cp1x:float ->
          cp1y:float ->
            cp2x:float -> cp2y:float -> x:float -> y:float -> unit)
      =
      fun (x13952 : 'tags this) ->
        fun ~cp1x:(x13946 : float) ->
          fun ~cp1y:(x13947 : float) ->
            fun ~cp2x:(x13948 : float) ->
              fun ~cp2y:(x13949 : float) ->
                fun ~x:(x13950 : float) ->
                  fun ~y:(x13951 : float) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x13952) "bezierCurveTo"
                         [|(Ojs.float_to_js x13946);(Ojs.float_to_js x13947);(
                           Ojs.float_to_js x13948);(Ojs.float_to_js x13949);(
                           Ojs.float_to_js x13950);(Ojs.float_to_js x13951)|])
    let (closePath : 'tags this -> unit) =
      fun (x13954 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x13954) "closePath" [||])
    let (ellipse :
      'tags this ->
        x:float ->
          y:float ->
            radiusX:float ->
              radiusY:float ->
                rotation:float ->
                  startAngle:float ->
                    endAngle:float -> ?counterclockwise:bool -> unit -> unit)
      =
      fun (x13966 : 'tags this) ->
        fun ~x:(x13956 : float) ->
          fun ~y:(x13957 : float) ->
            fun ~radiusX:(x13958 : float) ->
              fun ~radiusY:(x13959 : float) ->
                fun ~rotation:(x13960 : float) ->
                  fun ~startAngle:(x13961 : float) ->
                    fun ~endAngle:(x13962 : float) ->
                      fun ?counterclockwise:(x13963 : bool option) ->
                        fun () ->
                          ignore
                            (let x13968 = this_to_js Obj.magic x13966 in
                             Ojs.call (Ojs.get_prop_ascii x13968 "ellipse")
                               "apply"
                               [|x13968;((let x13964 =
                                            Ojs.new_obj
                                              (Ojs.get_prop_ascii Ojs.global
                                                 "Array") [||] in
                                          ignore
                                            (Ojs.call x13964 "push"
                                               [|(Ojs.float_to_js x13956)|]);
                                          ignore
                                            (Ojs.call x13964 "push"
                                               [|(Ojs.float_to_js x13957)|]);
                                          ignore
                                            (Ojs.call x13964 "push"
                                               [|(Ojs.float_to_js x13958)|]);
                                          ignore
                                            (Ojs.call x13964 "push"
                                               [|(Ojs.float_to_js x13959)|]);
                                          ignore
                                            (Ojs.call x13964 "push"
                                               [|(Ojs.float_to_js x13960)|]);
                                          ignore
                                            (Ojs.call x13964 "push"
                                               [|(Ojs.float_to_js x13961)|]);
                                          ignore
                                            (Ojs.call x13964 "push"
                                               [|(Ojs.float_to_js x13962)|]);
                                          (match x13963 with
                                           | Some x13965 ->
                                               ignore
                                                 (Ojs.call x13964 "push"
                                                    [|(Ojs.bool_to_js x13965)|])
                                           | None -> ());
                                          x13964))|])
    let (lineTo : 'tags this -> x:float -> y:float -> unit) =
      fun (x13971 : 'tags this) ->
        fun ~x:(x13969 : float) ->
          fun ~y:(x13970 : float) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x13971) "lineTo"
                 [|(Ojs.float_to_js x13969);(Ojs.float_to_js x13970)|])
    let (moveTo : 'tags this -> x:float -> y:float -> unit) =
      fun (x13975 : 'tags this) ->
        fun ~x:(x13973 : float) ->
          fun ~y:(x13974 : float) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x13975) "moveTo"
                 [|(Ojs.float_to_js x13973);(Ojs.float_to_js x13974)|])
    let (quadraticCurveTo :
      'tags this -> cpx:float -> cpy:float -> x:float -> y:float -> unit) =
      fun (x13981 : 'tags this) ->
        fun ~cpx:(x13977 : float) ->
          fun ~cpy:(x13978 : float) ->
            fun ~x:(x13979 : float) ->
              fun ~y:(x13980 : float) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x13981) "quadraticCurveTo"
                     [|(Ojs.float_to_js x13977);(Ojs.float_to_js x13978);(
                       Ojs.float_to_js x13979);(Ojs.float_to_js x13980)|])
    let (rect :
      'tags this -> x:float -> y:float -> w:float -> h:float -> unit) =
      fun (x13987 : 'tags this) ->
        fun ~x:(x13983 : float) ->
          fun ~y:(x13984 : float) ->
            fun ~w:(x13985 : float) ->
              fun ~h:(x13986 : float) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x13987) "rect"
                     [|(Ojs.float_to_js x13983);(Ojs.float_to_js x13984);(
                       Ojs.float_to_js x13985);(Ojs.float_to_js x13986)|])
    let cast_from = Obj.magic
  end
module Path2D =
  struct
    type t = [ `CanvasPath  | `Path2D ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13990 : Ojs.t) -> t_of_js x13990
    and t_0_to_js : t_0 -> Ojs.t = fun (x13989 : t) -> t_to_js x13989
    type tags = [ `CanvasPath  | `Path2D ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Path2D ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13993 : Ojs.t) -> intf_of_js __tags_of_js x13993
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13991 : __tags intf) -> intf_to_js __tags_to_js x13991
    let (addPath :
      'tags this -> path:t -> ?transform:DOMMatrix2DInit.t -> unit -> unit) =
      fun (x13999 : 'tags this) ->
        fun ~path:(x13995 : t) ->
          fun ?transform:(x13996 : DOMMatrix2DInit.t option) ->
            fun () ->
              ignore
                (let x14001 = this_to_js Obj.magic x13999 in
                 Ojs.call (Ojs.get_prop_ascii x14001 "addPath") "apply"
                   [|x14001;((let x13997 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x13997 "push" [|(t_to_js x13995)|]);
                              (match x13996 with
                               | Some x13998 ->
                                   ignore
                                     (Ojs.call x13997 "push"
                                        [|(DOMMatrix2DInit.t_to_js x13998)|])
                               | None -> ());
                              x13997))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Path2D")
             "prototype")
    let (create : ?path:[ `U1 of t  | `U2 of string ] -> unit -> t) =
      fun ?path:(x14002 : [ `U1 of t  | `U2 of string ] option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Path2D")
               (let x14003 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x14002 with
                 | Some x14004 ->
                     ignore
                       (Ojs.call x14003 "push"
                          [|((match x14004 with
                              | `U1 x14005 -> t_to_js x14005
                              | `U2 x14006 -> Ojs.string_to_js x14006))|])
                 | None -> ());
                x14003))
  end
module OnErrorEventHandlerNonNull =
  struct
    type t = [ `OnErrorEventHandlerNonNull ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14008 : Ojs.t) -> t_of_js x14008
    and t_0_to_js : t_0 -> Ojs.t = fun (x14007 : t) -> t_to_js x14007
    type tags = [ `OnErrorEventHandlerNonNull ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OnErrorEventHandlerNonNull ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14011 : Ojs.t) -> intf_of_js __tags_of_js x14011
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14009 : __tags intf) -> intf_to_js __tags_to_js x14009
    let (apply :
      'tags this ->
        event:[ `U1 of Event.t  | `U2 of string ] ->
          ?source:string ->
            ?lineno:float -> ?colno:float -> ?error:Error.t_0 -> unit -> any)
      =
      fun (x14025 : 'tags this) ->
        fun ~event:(x14013 : [ `U1 of Event.t  | `U2 of string ]) ->
          fun ?source:(x14014 : string option) ->
            fun ?lineno:(x14015 : float option) ->
              fun ?colno:(x14016 : float option) ->
                fun ?error:(x14017 : Error.t_0 option) ->
                  fun () ->
                    any_of_js
                      (Ojs.call (this_to_js Obj.magic x14025) "apply"
                         [|Ojs.null;((let x14018 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x14018 "push"
                                           [|((match x14013 with
                                               | `U1 x14023 ->
                                                   Event.t_to_js x14023
                                               | `U2 x14024 ->
                                                   Ojs.string_to_js x14024))|]);
                                      (match x14014 with
                                       | Some x14022 ->
                                           ignore
                                             (Ojs.call x14018 "push"
                                                [|(Ojs.string_to_js x14022)|])
                                       | None -> ());
                                      (match x14015 with
                                       | Some x14021 ->
                                           ignore
                                             (Ojs.call x14018 "push"
                                                [|(Ojs.float_to_js x14021)|])
                                       | None -> ());
                                      (match x14016 with
                                       | Some x14020 ->
                                           ignore
                                             (Ojs.call x14018 "push"
                                                [|(Ojs.float_to_js x14020)|])
                                       | None -> ());
                                      (match x14017 with
                                       | Some x14019 ->
                                           ignore
                                             (Ojs.call x14018 "push"
                                                [|(Error.t_0_to_js x14019)|])
                                       | None -> ());
                                      x14018))|])
    let cast_from = Obj.magic
  end
module OnErrorEventHandler =
  struct
    type t = OnErrorEventHandlerNonNull.t option
    let rec t_of_js : Ojs.t -> t =
      fun (x14029 : Ojs.t) ->
        Ojs.option_of_js OnErrorEventHandlerNonNull.t_of_js x14029
    and t_to_js : t -> Ojs.t =
      fun (x14027 : OnErrorEventHandlerNonNull.t option) ->
        Ojs.option_to_js OnErrorEventHandlerNonNull.t_to_js x14027
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14032 : Ojs.t) -> t_of_js x14032
    and t_0_to_js : t_0 -> Ojs.t = fun (x14031 : t) -> t_to_js x14031
  end
module OES_fbo_render_mipmap =
  struct
    type t = [ `OES_fbo_render_mipmap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14034 : Ojs.t) -> t_of_js x14034
    and t_0_to_js : t_0 -> Ojs.t = fun (x14033 : t) -> t_to_js x14033
    type tags = [ `OES_fbo_render_mipmap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_fbo_render_mipmap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14037 : Ojs.t) -> intf_of_js __tags_of_js x14037
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14035 : __tags intf) -> intf_to_js __tags_to_js x14035
    let cast_from = Obj.magic
  end
module NotificationEventMap =
  struct
    type t = [ `NotificationEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14040 : Ojs.t) -> t_of_js x14040
    and t_0_to_js : t_0 -> Ojs.t = fun (x14039 : t) -> t_to_js x14039
    type tags = [ `NotificationEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `NotificationEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14043 : Ojs.t) -> intf_of_js __tags_of_js x14043
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14041 : __tags intf) -> intf_to_js __tags_to_js x14041
    let (get_click : 'tags this -> Event.t) =
      fun (x14045 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14045) "click")
    let (set_click : 'tags this -> Event.t -> unit) =
      fun (x14047 : 'tags this) ->
        fun (x14048 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14047) "click"
            (Event.t_to_js x14048)
    let (get_close : 'tags this -> Event.t) =
      fun (x14050 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14050) "close")
    let (set_close : 'tags this -> Event.t -> unit) =
      fun (x14052 : 'tags this) ->
        fun (x14053 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14052) "close"
            (Event.t_to_js x14053)
    let (get_error : 'tags this -> Event.t) =
      fun (x14055 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14055) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x14057 : 'tags this) ->
        fun (x14058 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14057) "error"
            (Event.t_to_js x14058)
    let (get_show : 'tags this -> Event.t) =
      fun (x14060 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14060) "show")
    let (set_show : 'tags this -> Event.t -> unit) =
      fun (x14062 : 'tags this) ->
        fun (x14063 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14062) "show"
            (Event.t_to_js x14063)
    let (create :
      click:Event.t ->
        close:Event.t -> error:Event.t -> show:Event.t -> unit -> t)
      =
      fun ~click:(x14065 : Event.t) ->
        fun ~close:(x14066 : Event.t) ->
          fun ~error:(x14067 : Event.t) ->
            fun ~show:(x14068 : Event.t) ->
              fun () ->
                let x14069 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x14069 "click" (Event.t_to_js x14065);
                Ojs.set_prop_ascii x14069 "close" (Event.t_to_js x14066);
                Ojs.set_prop_ascii x14069 "error" (Event.t_to_js x14067);
                Ojs.set_prop_ascii x14069 "show" (Event.t_to_js x14068);
                t_of_js x14069
    let cast_from = Obj.magic
  end
module MessagePortEventMap =
  struct
    type t = [ `MessagePortEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14071 : Ojs.t) -> t_of_js x14071
    and t_0_to_js : t_0 -> Ojs.t = fun (x14070 : t) -> t_to_js x14070
    type tags = [ `MessagePortEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `MessagePortEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14074 : Ojs.t) -> intf_of_js __tags_of_js x14074
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14072 : __tags intf) -> intf_to_js __tags_to_js x14072
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x14076 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14076) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x14078 : 'tags this) ->
        fun (x14079 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14078) "message"
            (MessageEvent.t_0_to_js x14079)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x14081 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14081) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x14083 : 'tags this) ->
        fun (x14084 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14083) "messageerror"
            (MessageEvent.t_0_to_js x14084)
    let (create :
      message:MessageEvent.t_0 -> messageerror:MessageEvent.t_0 -> unit -> t)
      =
      fun ~message:(x14086 : MessageEvent.t_0) ->
        fun ~messageerror:(x14087 : MessageEvent.t_0) ->
          fun () ->
            let x14088 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x14088 "message"
              (MessageEvent.t_0_to_js x14086);
            Ojs.set_prop_ascii x14088 "messageerror"
              (MessageEvent.t_0_to_js x14087);
            t_of_js x14088
    let cast_from = Obj.magic
  end
module MessageChannel =
  struct
    type t = [ `MessageChannel ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14090 : Ojs.t) -> t_of_js x14090
    and t_0_to_js : t_0 -> Ojs.t = fun (x14089 : t) -> t_to_js x14089
    type tags = [ `MessageChannel ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `MessageChannel ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14093 : Ojs.t) -> intf_of_js __tags_of_js x14093
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14091 : __tags intf) -> intf_to_js __tags_to_js x14091
    let (get_port1 : 'tags this -> MessagePort.t) =
      fun (x14095 : 'tags this) ->
        MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14095) "port1")
    let (get_port2 : 'tags this -> MessagePort.t) =
      fun (x14097 : 'tags this) ->
        MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14097) "port2")
    let (create : port1:MessagePort.t -> port2:MessagePort.t -> unit -> t) =
      fun ~port1:(x14099 : MessagePort.t) ->
        fun ~port2:(x14100 : MessagePort.t) ->
          fun () ->
            let x14101 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x14101 "port1" (MessagePort.t_to_js x14099);
            Ojs.set_prop_ascii x14101 "port2" (MessagePort.t_to_js x14100);
            t_of_js x14101
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "MessageChannel") "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "MessageChannel") [||])
  end
module LockMode =
  struct
    type t = [ `L_s179_shared  | `L_s70_exclusive ]
    let rec t_of_js : Ojs.t -> t =
      fun (x14103 : Ojs.t) ->
        let x14104 = x14103 in
        match Ojs.string_of_js x14104 with
        | "shared" -> `L_s179_shared
        | "exclusive" -> `L_s70_exclusive
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x14102 : [ `L_s179_shared  | `L_s70_exclusive ]) ->
        match x14102 with
        | `L_s179_shared -> Ojs.string_to_js "shared"
        | `L_s70_exclusive -> Ojs.string_to_js "exclusive"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14106 : Ojs.t) -> t_of_js x14106
    and t_0_to_js : t_0 -> Ojs.t = fun (x14105 : t) -> t_to_js x14105
  end
module LockOptions =
  struct
    type t = [ `LockOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14108 : Ojs.t) -> t_of_js x14108
    and t_0_to_js : t_0 -> Ojs.t = fun (x14107 : t) -> t_to_js x14107
    type tags = [ `LockOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `LockOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14111 : Ojs.t) -> intf_of_js __tags_of_js x14111
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14109 : __tags intf) -> intf_to_js __tags_to_js x14109
    let (get_ifAvailable : 'tags this -> bool option) =
      fun (x14113 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14113) "ifAvailable")
    let (set_ifAvailable : 'tags this -> bool -> unit) =
      fun (x14116 : 'tags this) ->
        fun (x14117 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14116) "ifAvailable"
            (Ojs.bool_to_js x14117)
    let (get_mode : 'tags this -> LockMode.t option) =
      fun (x14119 : 'tags this) ->
        Ojs.option_of_js LockMode.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14119) "mode")
    let (set_mode : 'tags this -> LockMode.t -> unit) =
      fun (x14122 : 'tags this) ->
        fun (x14123 : LockMode.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14122) "mode"
            (LockMode.t_to_js x14123)
    let (get_signal : 'tags this -> AbortSignal.t option) =
      fun (x14125 : 'tags this) ->
        Ojs.option_of_js AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14125) "signal")
    let (set_signal : 'tags this -> AbortSignal.t -> unit) =
      fun (x14128 : 'tags this) ->
        fun (x14129 : AbortSignal.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14128) "signal"
            (AbortSignal.t_to_js x14129)
    let (get_steal : 'tags this -> bool option) =
      fun (x14131 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14131) "steal")
    let (set_steal : 'tags this -> bool -> unit) =
      fun (x14134 : 'tags this) ->
        fun (x14135 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14134) "steal"
            (Ojs.bool_to_js x14135)
    let (create :
      ?ifAvailable:bool ->
        ?mode:LockMode.t -> ?signal:AbortSignal.t -> ?steal:bool -> unit -> t)
      =
      fun ?ifAvailable:(x14137 : bool option) ->
        fun ?mode:(x14138 : LockMode.t option) ->
          fun ?signal:(x14139 : AbortSignal.t option) ->
            fun ?steal:(x14140 : bool option) ->
              fun () ->
                let x14141 = Ojs.empty_obj () in
                (match x14137 with
                 | Some x14145 ->
                     Ojs.set_prop_ascii x14141 "ifAvailable"
                       (Ojs.bool_to_js x14145)
                 | None -> ());
                (match x14138 with
                 | Some x14144 ->
                     Ojs.set_prop_ascii x14141 "mode"
                       (LockMode.t_to_js x14144)
                 | None -> ());
                (match x14139 with
                 | Some x14143 ->
                     Ojs.set_prop_ascii x14141 "signal"
                       (AbortSignal.t_to_js x14143)
                 | None -> ());
                (match x14140 with
                 | Some x14142 ->
                     Ojs.set_prop_ascii x14141 "steal"
                       (Ojs.bool_to_js x14142)
                 | None -> ());
                t_of_js x14141
    let cast_from = Obj.magic
  end
module LockInfo =
  struct
    type t = [ `LockInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14147 : Ojs.t) -> t_of_js x14147
    and t_0_to_js : t_0 -> Ojs.t = fun (x14146 : t) -> t_to_js x14146
    type tags = [ `LockInfo ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `LockInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14150 : Ojs.t) -> intf_of_js __tags_of_js x14150
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14148 : __tags intf) -> intf_to_js __tags_to_js x14148
    let (get_clientId : 'tags this -> string option) =
      fun (x14152 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14152) "clientId")
    let (set_clientId : 'tags this -> string -> unit) =
      fun (x14155 : 'tags this) ->
        fun (x14156 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14155) "clientId"
            (Ojs.string_to_js x14156)
    let (get_mode : 'tags this -> LockMode.t option) =
      fun (x14158 : 'tags this) ->
        Ojs.option_of_js LockMode.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14158) "mode")
    let (set_mode : 'tags this -> LockMode.t -> unit) =
      fun (x14161 : 'tags this) ->
        fun (x14162 : LockMode.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14161) "mode"
            (LockMode.t_to_js x14162)
    let (get_name : 'tags this -> string option) =
      fun (x14164 : 'tags this) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14164) "name")
    let (set_name : 'tags this -> string -> unit) =
      fun (x14167 : 'tags this) ->
        fun (x14168 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14167) "name"
            (Ojs.string_to_js x14168)
    let (create :
      ?clientId:string -> ?mode:LockMode.t -> ?name:string -> unit -> t) =
      fun ?clientId:(x14170 : string option) ->
        fun ?mode:(x14171 : LockMode.t option) ->
          fun ?name:(x14172 : string option) ->
            fun () ->
              let x14173 = Ojs.empty_obj () in
              (match x14170 with
               | Some x14176 ->
                   Ojs.set_prop_ascii x14173 "clientId"
                     (Ojs.string_to_js x14176)
               | None -> ());
              (match x14171 with
               | Some x14175 ->
                   Ojs.set_prop_ascii x14173 "mode" (LockMode.t_to_js x14175)
               | None -> ());
              (match x14172 with
               | Some x14174 ->
                   Ojs.set_prop_ascii x14173 "name" (Ojs.string_to_js x14174)
               | None -> ());
              t_of_js x14173
    let cast_from = Obj.magic
  end
module LockManagerSnapshot =
  struct
    type t = [ `LockManagerSnapshot ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14178 : Ojs.t) -> t_of_js x14178
    and t_0_to_js : t_0 -> Ojs.t = fun (x14177 : t) -> t_to_js x14177
    type tags = [ `LockManagerSnapshot ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `LockManagerSnapshot ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14181 : Ojs.t) -> intf_of_js __tags_of_js x14181
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14179 : __tags intf) -> intf_to_js __tags_to_js x14179
    let (get_held : 'tags this -> LockInfo.t list option) =
      fun (x14183 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14185 : Ojs.t) -> Ojs.list_of_js LockInfo.t_of_js x14185)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14183) "held")
    let (set_held : 'tags this -> LockInfo.t list -> unit) =
      fun (x14187 : 'tags this) ->
        fun (x14188 : LockInfo.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14187) "held"
            (Ojs.list_to_js LockInfo.t_to_js x14188)
    let (get_pending : 'tags this -> LockInfo.t list option) =
      fun (x14191 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14193 : Ojs.t) -> Ojs.list_of_js LockInfo.t_of_js x14193)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14191) "pending")
    let (set_pending : 'tags this -> LockInfo.t list -> unit) =
      fun (x14195 : 'tags this) ->
        fun (x14196 : LockInfo.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14195) "pending"
            (Ojs.list_to_js LockInfo.t_to_js x14196)
    let (create :
      ?held:LockInfo.t list -> ?pending:LockInfo.t list -> unit -> t) =
      fun ?held:(x14199 : LockInfo.t list option) ->
        fun ?pending:(x14200 : LockInfo.t list option) ->
          fun () ->
            let x14201 = Ojs.empty_obj () in
            (match x14199 with
             | Some x14204 ->
                 Ojs.set_prop_ascii x14201 "held"
                   (Ojs.list_to_js LockInfo.t_to_js x14204)
             | None -> ());
            (match x14200 with
             | Some x14202 ->
                 Ojs.set_prop_ascii x14201 "pending"
                   (Ojs.list_to_js LockInfo.t_to_js x14202)
             | None -> ());
            t_of_js x14201
    let cast_from = Obj.magic
  end
module Lock =
  struct
    type t = [ `Lock ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14207 : Ojs.t) -> t_of_js x14207
    and t_0_to_js : t_0 -> Ojs.t = fun (x14206 : t) -> t_to_js x14206
    type tags = [ `Lock ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Lock ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14210 : Ojs.t) -> intf_of_js __tags_of_js x14210
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14208 : __tags intf) -> intf_to_js __tags_to_js x14208
    let (get_mode : 'tags this -> LockMode.t) =
      fun (x14212 : 'tags this) ->
        LockMode.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14212) "mode")
    let (get_name : 'tags this -> string) =
      fun (x14214 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14214) "name")
    let (create : mode:LockMode.t -> name:string -> unit -> t) =
      fun ~mode:(x14216 : LockMode.t) ->
        fun ~name:(x14217 : string) ->
          fun () ->
            let x14218 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x14218 "mode" (LockMode.t_to_js x14216);
            Ojs.set_prop_ascii x14218 "name" (Ojs.string_to_js x14217);
            t_of_js x14218
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Lock")
             "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Lock") [||])
  end
module LockGrantedCallback =
  struct
    type t = [ `LockGrantedCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14220 : Ojs.t) -> t_of_js x14220
    and t_0_to_js : t_0 -> Ojs.t = fun (x14219 : t) -> t_to_js x14219
    type tags = [ `LockGrantedCallback ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `LockGrantedCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14223 : Ojs.t) -> intf_of_js __tags_of_js x14223
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14221 : __tags intf) -> intf_to_js __tags_to_js x14221
    let (apply : 'tags this -> lock:Lock.t option -> any) =
      fun (x14227 : 'tags this) ->
        fun ~lock:(x14225 : Lock.t option) ->
          any_of_js
            (Ojs.apply (this_to_js Obj.magic x14227)
               [|(Ojs.option_to_js Lock.t_to_js x14225)|])
    let cast_from = Obj.magic
  end
module LockManager =
  struct
    type t = [ `LockManager ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14230 : Ojs.t) -> t_of_js x14230
    and t_0_to_js : t_0 -> Ojs.t = fun (x14229 : t) -> t_to_js x14229
    type tags = [ `LockManager ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `LockManager ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14233 : Ojs.t) -> intf_of_js __tags_of_js x14233
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14231 : __tags intf) -> intf_to_js __tags_to_js x14231
    let (query : 'tags this -> LockManagerSnapshot.t Promise.t_1) =
      fun (x14235 : 'tags this) ->
        Promise.t_1_of_js LockManagerSnapshot.t_of_js
          (Ojs.call (this_to_js Obj.magic x14235) "query" [||])
    let (request :
      'tags this ->
        name:string -> callback:LockGrantedCallback.t -> any Promise.t_1)
      =
      fun (x14240 : 'tags this) ->
        fun ~name:(x14238 : string) ->
          fun ~callback:(x14239 : LockGrantedCallback.t) ->
            Promise.t_1_of_js any_of_js
              (Ojs.call (this_to_js Obj.magic x14240) "request"
                 [|(Ojs.string_to_js x14238);(LockGrantedCallback.t_to_js
                                                x14239)|])
    let (request' :
      'tags this ->
        name:string ->
          options:LockOptions.t ->
            callback:LockGrantedCallback.t -> any Promise.t_1)
      =
      fun (x14246 : 'tags this) ->
        fun ~name:(x14243 : string) ->
          fun ~options:(x14244 : LockOptions.t) ->
            fun ~callback:(x14245 : LockGrantedCallback.t) ->
              Promise.t_1_of_js any_of_js
                (Ojs.call (this_to_js Obj.magic x14246) "request"
                   [|(Ojs.string_to_js x14243);(LockOptions.t_to_js x14244);(
                     LockGrantedCallback.t_to_js x14245)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "LockManager")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "LockManager") [||])
  end
module ImportMeta =
  struct
    type t = [ `ImportMeta ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14250 : Ojs.t) -> t_of_js x14250
    and t_0_to_js : t_0 -> Ojs.t = fun (x14249 : t) -> t_to_js x14249
    type tags = [ `ImportMeta ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImportMeta ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14253 : Ojs.t) -> intf_of_js __tags_of_js x14253
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14251 : __tags intf) -> intf_to_js __tags_to_js x14251
    let (get_url : 'tags this -> string) =
      fun (x14255 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14255) "url")
    let (set_url : 'tags this -> string -> unit) =
      fun (x14257 : 'tags this) ->
        fun (x14258 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14257) "url"
            (Ojs.string_to_js x14258)
    let (create : url:string -> unit -> t) =
      fun ~url:(x14260 : string) ->
        fun () ->
          let x14261 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x14261 "url" (Ojs.string_to_js x14260);
          t_of_js x14261
    let cast_from = Obj.magic
  end
module ImageBitmapRenderingContextSettings =
  struct
    type t = [ `ImageBitmapRenderingContextSettings ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14263 : Ojs.t) -> t_of_js x14263
    and t_0_to_js : t_0 -> Ojs.t = fun (x14262 : t) -> t_to_js x14262
    type tags = [ `ImageBitmapRenderingContextSettings ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ImageBitmapRenderingContextSettings ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14266 : Ojs.t) -> intf_of_js __tags_of_js x14266
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14264 : __tags intf) -> intf_to_js __tags_to_js x14264
    let (get_alpha : 'tags this -> bool option) =
      fun (x14268 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14268) "alpha")
    let (set_alpha : 'tags this -> bool -> unit) =
      fun (x14271 : 'tags this) ->
        fun (x14272 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14271) "alpha"
            (Ojs.bool_to_js x14272)
    let (create : ?alpha:bool -> unit -> t) =
      fun ?alpha:(x14274 : bool option) ->
        fun () ->
          let x14275 = Ojs.empty_obj () in
          (match x14274 with
           | Some x14276 ->
               Ojs.set_prop_ascii x14275 "alpha" (Ojs.bool_to_js x14276)
           | None -> ());
          t_of_js x14275
    let cast_from = Obj.magic
  end
module ImageBitmapRenderingContext =
  struct
    type t = [ `ImageBitmapRenderingContext ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14278 : Ojs.t) -> t_of_js x14278
    and t_0_to_js : t_0 -> Ojs.t = fun (x14277 : t) -> t_to_js x14277
    type tags = [ `ImageBitmapRenderingContext ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ImageBitmapRenderingContext ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14281 : Ojs.t) -> intf_of_js __tags_of_js x14281
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14279 : __tags intf) -> intf_to_js __tags_to_js x14279
    let (transferFromImageBitmap :
      'tags this -> bitmap:ImageBitmap.t option -> unit) =
      fun (x14285 : 'tags this) ->
        fun ~bitmap:(x14283 : ImageBitmap.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x14285) "transferFromImageBitmap"
               [|(Ojs.option_to_js ImageBitmap.t_to_js x14283)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ImageBitmapRenderingContext")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ImageBitmapRenderingContext")
             [||])
  end
module IDBTransactionEventMap =
  struct
    type t = [ `IDBTransactionEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14288 : Ojs.t) -> t_of_js x14288
    and t_0_to_js : t_0 -> Ojs.t = fun (x14287 : t) -> t_to_js x14287
    type tags = [ `IDBTransactionEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBTransactionEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14291 : Ojs.t) -> intf_of_js __tags_of_js x14291
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14289 : __tags intf) -> intf_to_js __tags_to_js x14289
    let (get_abort : 'tags this -> Event.t) =
      fun (x14293 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14293) "abort")
    let (set_abort : 'tags this -> Event.t -> unit) =
      fun (x14295 : 'tags this) ->
        fun (x14296 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14295) "abort"
            (Event.t_to_js x14296)
    let (get_complete : 'tags this -> Event.t) =
      fun (x14298 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14298) "complete")
    let (set_complete : 'tags this -> Event.t -> unit) =
      fun (x14300 : 'tags this) ->
        fun (x14301 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14300) "complete"
            (Event.t_to_js x14301)
    let (get_error : 'tags this -> Event.t) =
      fun (x14303 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14303) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x14305 : 'tags this) ->
        fun (x14306 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14305) "error"
            (Event.t_to_js x14306)
    let (create :
      abort:Event.t -> complete:Event.t -> error:Event.t -> unit -> t) =
      fun ~abort:(x14308 : Event.t) ->
        fun ~complete:(x14309 : Event.t) ->
          fun ~error:(x14310 : Event.t) ->
            fun () ->
              let x14311 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x14311 "abort" (Event.t_to_js x14308);
              Ojs.set_prop_ascii x14311 "complete" (Event.t_to_js x14309);
              Ojs.set_prop_ascii x14311 "error" (Event.t_to_js x14310);
              t_of_js x14311
    let cast_from = Obj.magic
  end
module IDBRequestEventMap =
  struct
    type t = [ `IDBRequestEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14313 : Ojs.t) -> t_of_js x14313
    and t_0_to_js : t_0 -> Ojs.t = fun (x14312 : t) -> t_to_js x14312
    type tags = [ `IDBRequestEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBRequestEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14316 : Ojs.t) -> intf_of_js __tags_of_js x14316
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14314 : __tags intf) -> intf_to_js __tags_to_js x14314
    let (get_error : 'tags this -> Event.t) =
      fun (x14318 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14318) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x14320 : 'tags this) ->
        fun (x14321 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14320) "error"
            (Event.t_to_js x14321)
    let (get_success : 'tags this -> Event.t) =
      fun (x14323 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14323) "success")
    let (set_success : 'tags this -> Event.t -> unit) =
      fun (x14325 : 'tags this) ->
        fun (x14326 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14325) "success"
            (Event.t_to_js x14326)
    let (create : error:Event.t -> success:Event.t -> unit -> t) =
      fun ~error:(x14328 : Event.t) ->
        fun ~success:(x14329 : Event.t) ->
          fun () ->
            let x14330 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x14330 "error" (Event.t_to_js x14328);
            Ojs.set_prop_ascii x14330 "success" (Event.t_to_js x14329);
            t_of_js x14330
    let cast_from = Obj.magic
  end
module IDBOpenDBRequestEventMap =
  struct
    type t = [ `IDBOpenDBRequestEventMap  | `IDBRequestEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14332 : Ojs.t) -> t_of_js x14332
    and t_0_to_js : t_0 -> Ojs.t = fun (x14331 : t) -> t_to_js x14331
    type tags = [ `IDBOpenDBRequestEventMap  | `IDBRequestEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBOpenDBRequestEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14335 : Ojs.t) -> intf_of_js __tags_of_js x14335
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14333 : __tags intf) -> intf_to_js __tags_to_js x14333
    let (get_blocked : 'tags this -> Event.t) =
      fun (x14337 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14337) "blocked")
    let (set_blocked : 'tags this -> Event.t -> unit) =
      fun (x14339 : 'tags this) ->
        fun (x14340 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14339) "blocked"
            (Event.t_to_js x14340)
    let (get_upgradeneeded : 'tags this -> IDBVersionChangeEvent.t) =
      fun (x14342 : 'tags this) ->
        IDBVersionChangeEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14342) "upgradeneeded")
    let (set_upgradeneeded : 'tags this -> IDBVersionChangeEvent.t -> unit) =
      fun (x14344 : 'tags this) ->
        fun (x14345 : IDBVersionChangeEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14344) "upgradeneeded"
            (IDBVersionChangeEvent.t_to_js x14345)
    let (create :
      blocked:Event.t -> upgradeneeded:IDBVersionChangeEvent.t -> unit -> t)
      =
      fun ~blocked:(x14347 : Event.t) ->
        fun ~upgradeneeded:(x14348 : IDBVersionChangeEvent.t) ->
          fun () ->
            let x14349 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x14349 "blocked" (Event.t_to_js x14347);
            Ojs.set_prop_ascii x14349 "upgradeneeded"
              (IDBVersionChangeEvent.t_to_js x14348);
            t_of_js x14349
    let cast_from = Obj.magic
  end
module IDBDatabaseEventMap =
  struct
    type t = [ `IDBDatabaseEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14351 : Ojs.t) -> t_of_js x14351
    and t_0_to_js : t_0 -> Ojs.t = fun (x14350 : t) -> t_to_js x14350
    type tags = [ `IDBDatabaseEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBDatabaseEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14354 : Ojs.t) -> intf_of_js __tags_of_js x14354
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14352 : __tags intf) -> intf_to_js __tags_to_js x14352
    let (get_abort : 'tags this -> Event.t) =
      fun (x14356 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14356) "abort")
    let (set_abort : 'tags this -> Event.t -> unit) =
      fun (x14358 : 'tags this) ->
        fun (x14359 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14358) "abort"
            (Event.t_to_js x14359)
    let (get_close : 'tags this -> Event.t) =
      fun (x14361 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14361) "close")
    let (set_close : 'tags this -> Event.t -> unit) =
      fun (x14363 : 'tags this) ->
        fun (x14364 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14363) "close"
            (Event.t_to_js x14364)
    let (get_error : 'tags this -> Event.t) =
      fun (x14366 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14366) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x14368 : 'tags this) ->
        fun (x14369 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14368) "error"
            (Event.t_to_js x14369)
    let (get_versionchange : 'tags this -> IDBVersionChangeEvent.t) =
      fun (x14371 : 'tags this) ->
        IDBVersionChangeEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14371) "versionchange")
    let (set_versionchange : 'tags this -> IDBVersionChangeEvent.t -> unit) =
      fun (x14373 : 'tags this) ->
        fun (x14374 : IDBVersionChangeEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14373) "versionchange"
            (IDBVersionChangeEvent.t_to_js x14374)
    let (create :
      abort:Event.t ->
        close:Event.t ->
          error:Event.t -> versionchange:IDBVersionChangeEvent.t -> unit -> t)
      =
      fun ~abort:(x14376 : Event.t) ->
        fun ~close:(x14377 : Event.t) ->
          fun ~error:(x14378 : Event.t) ->
            fun ~versionchange:(x14379 : IDBVersionChangeEvent.t) ->
              fun () ->
                let x14380 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x14380 "abort" (Event.t_to_js x14376);
                Ojs.set_prop_ascii x14380 "close" (Event.t_to_js x14377);
                Ojs.set_prop_ascii x14380 "error" (Event.t_to_js x14378);
                Ojs.set_prop_ascii x14380 "versionchange"
                  (IDBVersionChangeEvent.t_to_js x14379);
                t_of_js x14380
    let cast_from = Obj.magic
  end
module FontFaceSetLoadEventInit =
  struct
    type t = [ `EventInit  | `FontFaceSetLoadEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14382 : Ojs.t) -> t_of_js x14382
    and t_0_to_js : t_0 -> Ojs.t = fun (x14381 : t) -> t_to_js x14381
    type tags = [ `EventInit  | `FontFaceSetLoadEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FontFaceSetLoadEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14385 : Ojs.t) -> intf_of_js __tags_of_js x14385
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14383 : __tags intf) -> intf_to_js __tags_to_js x14383
    let (get_fontfaces : 'tags this -> FontFace.t list option) =
      fun (x14387 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14389 : Ojs.t) -> Ojs.list_of_js FontFace.t_of_js x14389)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14387) "fontfaces")
    let (set_fontfaces : 'tags this -> FontFace.t list -> unit) =
      fun (x14391 : 'tags this) ->
        fun (x14392 : FontFace.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14391) "fontfaces"
            (Ojs.list_to_js FontFace.t_to_js x14392)
    let (create : ?fontfaces:FontFace.t list -> unit -> t) =
      fun ?fontfaces:(x14395 : FontFace.t list option) ->
        fun () ->
          let x14396 = Ojs.empty_obj () in
          (match x14395 with
           | Some x14397 ->
               Ojs.set_prop_ascii x14396 "fontfaces"
                 (Ojs.list_to_js FontFace.t_to_js x14397)
           | None -> ());
          t_of_js x14396
    let cast_from = Obj.magic
  end
module FontFaceSetLoadEvent =
  struct
    type t = [ `Event  | `FontFaceSetLoadEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14400 : Ojs.t) -> t_of_js x14400
    and t_0_to_js : t_0 -> Ojs.t = fun (x14399 : t) -> t_to_js x14399
    type tags = [ `Event  | `FontFaceSetLoadEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FontFaceSetLoadEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14403 : Ojs.t) -> intf_of_js __tags_of_js x14403
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14401 : __tags intf) -> intf_to_js __tags_to_js x14401
    let (get_fontfaces : 'tags this -> FontFace.t list) =
      fun (x14405 : 'tags this) ->
        Ojs.list_of_js FontFace.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14405) "fontfaces")
    let (create : fontfaces:FontFace.t list -> unit -> t) =
      fun ~fontfaces:(x14408 : FontFace.t list) ->
        fun () ->
          let x14409 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x14409 "fontfaces"
            (Ojs.list_to_js FontFace.t_to_js x14408);
          t_of_js x14409
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "FontFaceSetLoadEvent")
             "prototype")
    let (create' :
      type_:string -> ?eventInitDict:FontFaceSetLoadEventInit.t -> unit -> t)
      =
      fun ~type_:(x14411 : string) ->
        fun ?eventInitDict:(x14412 : FontFaceSetLoadEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "FontFaceSetLoadEvent")
                 (let x14413 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x14413 "push" [|(Ojs.string_to_js x14411)|]);
                  (match x14412 with
                   | Some x14414 ->
                       ignore
                         (Ojs.call x14413 "push"
                            [|(FontFaceSetLoadEventInit.t_to_js x14414)|])
                   | None -> ());
                  x14413))
  end
module FontFaceSetEventMap =
  struct
    type t = [ `FontFaceSetEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14416 : Ojs.t) -> t_of_js x14416
    and t_0_to_js : t_0 -> Ojs.t = fun (x14415 : t) -> t_to_js x14415
    type tags = [ `FontFaceSetEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFaceSetEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14419 : Ojs.t) -> intf_of_js __tags_of_js x14419
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14417 : __tags intf) -> intf_to_js __tags_to_js x14417
    let (get_loading : 'tags this -> Event.t) =
      fun (x14421 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14421) "loading")
    let (set_loading : 'tags this -> Event.t -> unit) =
      fun (x14423 : 'tags this) ->
        fun (x14424 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14423) "loading"
            (Event.t_to_js x14424)
    let (get_loadingdone : 'tags this -> Event.t) =
      fun (x14426 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14426) "loadingdone")
    let (set_loadingdone : 'tags this -> Event.t -> unit) =
      fun (x14428 : 'tags this) ->
        fun (x14429 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14428) "loadingdone"
            (Event.t_to_js x14429)
    let (get_loadingerror : 'tags this -> Event.t) =
      fun (x14431 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14431) "loadingerror")
    let (set_loadingerror : 'tags this -> Event.t -> unit) =
      fun (x14433 : 'tags this) ->
        fun (x14434 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14433) "loadingerror"
            (Event.t_to_js x14434)
    let (create :
      loading:Event.t ->
        loadingdone:Event.t -> loadingerror:Event.t -> unit -> t)
      =
      fun ~loading:(x14436 : Event.t) ->
        fun ~loadingdone:(x14437 : Event.t) ->
          fun ~loadingerror:(x14438 : Event.t) ->
            fun () ->
              let x14439 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x14439 "loading" (Event.t_to_js x14436);
              Ojs.set_prop_ascii x14439 "loadingdone" (Event.t_to_js x14437);
              Ojs.set_prop_ascii x14439 "loadingerror" (Event.t_to_js x14438);
              t_of_js x14439
    let cast_from = Obj.magic
  end
module FileReaderSync =
  struct
    type t = [ `FileReaderSync ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14441 : Ojs.t) -> t_of_js x14441
    and t_0_to_js : t_0 -> Ojs.t = fun (x14440 : t) -> t_to_js x14440
    type tags = [ `FileReaderSync ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FileReaderSync ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14444 : Ojs.t) -> intf_of_js __tags_of_js x14444
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14442 : __tags intf) -> intf_to_js __tags_to_js x14442
    let (readAsArrayBuffer : 'tags this -> blob:Blob.t -> ArrayBuffer.t_0) =
      fun (x14447 : 'tags this) ->
        fun ~blob:(x14446 : Blob.t) ->
          ArrayBuffer.t_0_of_js
            (Ojs.call (this_to_js Obj.magic x14447) "readAsArrayBuffer"
               [|(Blob.t_to_js x14446)|])
    let (readAsBinaryString : 'tags this -> blob:Blob.t -> string) =
      fun (x14450 : 'tags this) ->
        fun ~blob:(x14449 : Blob.t) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x14450) "readAsBinaryString"
               [|(Blob.t_to_js x14449)|])
    let (readAsDataURL : 'tags this -> blob:Blob.t -> string) =
      fun (x14453 : 'tags this) ->
        fun ~blob:(x14452 : Blob.t) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x14453) "readAsDataURL"
               [|(Blob.t_to_js x14452)|])
    let (readAsText :
      'tags this -> blob:Blob.t -> ?encoding:string -> unit -> string) =
      fun (x14459 : 'tags this) ->
        fun ~blob:(x14455 : Blob.t) ->
          fun ?encoding:(x14456 : string option) ->
            fun () ->
              Ojs.string_of_js
                (let x14461 = this_to_js Obj.magic x14459 in
                 Ojs.call (Ojs.get_prop_ascii x14461 "readAsText") "apply"
                   [|x14461;((let x14457 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x14457 "push"
                                   [|(Blob.t_to_js x14455)|]);
                              (match x14456 with
                               | Some x14458 ->
                                   ignore
                                     (Ojs.call x14457 "push"
                                        [|(Ojs.string_to_js x14458)|])
                               | None -> ());
                              x14457))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "FileReaderSync") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FileReaderSync") [||])
  end
module FileReader =
  struct
    type t = [ `EventTarget  | `FileReader ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14463 : Ojs.t) -> t_of_js x14463
    and t_0_to_js : t_0 -> Ojs.t = fun (x14462 : t) -> t_to_js x14462
    type tags = [ `EventTarget  | `FileReader ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FileReader ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14466 : Ojs.t) -> intf_of_js __tags_of_js x14466
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14464 : __tags intf) -> intf_to_js __tags_to_js x14464
    let (get_error : 'tags this -> DOMException.t option) =
      fun (x14468 : 'tags this) ->
        Ojs.option_of_js DOMException.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14468) "error")
    let (get_onabort :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option) =
      fun (x14471 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14473 : Ojs.t) ->
             fun ~this:(x14474 : t) ->
               fun ~ev:(x14475 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x14473
                      [|(t_to_js x14474);(ProgressEvent.t_to_js t_to_js
                                            x14475)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14471) "onabort")
    let (set_onabort :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option -> unit) =
      fun (x14477 : 'tags this) ->
        fun (x14478 : (this:t -> ev:t ProgressEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14477) "onabort"
            (Ojs.option_to_js
               (fun (x14479 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x14480 : Ojs.t) ->
                       fun (x14481 : Ojs.t) ->
                         any_to_js
                           (x14479 ~this:(t_of_js x14480)
                              ~ev:(ProgressEvent.t_of_js t_of_js x14481))))
               x14478)
    let (get_onerror :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option) =
      fun (x14484 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14486 : Ojs.t) ->
             fun ~this:(x14487 : t) ->
               fun ~ev:(x14488 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x14486
                      [|(t_to_js x14487);(ProgressEvent.t_to_js t_to_js
                                            x14488)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14484) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option -> unit) =
      fun (x14490 : 'tags this) ->
        fun (x14491 : (this:t -> ev:t ProgressEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14490) "onerror"
            (Ojs.option_to_js
               (fun (x14492 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x14493 : Ojs.t) ->
                       fun (x14494 : Ojs.t) ->
                         any_to_js
                           (x14492 ~this:(t_of_js x14493)
                              ~ev:(ProgressEvent.t_of_js t_of_js x14494))))
               x14491)
    let (get_onload :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option) =
      fun (x14497 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14499 : Ojs.t) ->
             fun ~this:(x14500 : t) ->
               fun ~ev:(x14501 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x14499
                      [|(t_to_js x14500);(ProgressEvent.t_to_js t_to_js
                                            x14501)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14497) "onload")
    let (set_onload :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option -> unit) =
      fun (x14503 : 'tags this) ->
        fun (x14504 : (this:t -> ev:t ProgressEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14503) "onload"
            (Ojs.option_to_js
               (fun (x14505 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x14506 : Ojs.t) ->
                       fun (x14507 : Ojs.t) ->
                         any_to_js
                           (x14505 ~this:(t_of_js x14506)
                              ~ev:(ProgressEvent.t_of_js t_of_js x14507))))
               x14504)
    let (get_onloadend :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option) =
      fun (x14510 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14512 : Ojs.t) ->
             fun ~this:(x14513 : t) ->
               fun ~ev:(x14514 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x14512
                      [|(t_to_js x14513);(ProgressEvent.t_to_js t_to_js
                                            x14514)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14510) "onloadend")
    let (set_onloadend :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option -> unit) =
      fun (x14516 : 'tags this) ->
        fun (x14517 : (this:t -> ev:t ProgressEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14516) "onloadend"
            (Ojs.option_to_js
               (fun (x14518 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x14519 : Ojs.t) ->
                       fun (x14520 : Ojs.t) ->
                         any_to_js
                           (x14518 ~this:(t_of_js x14519)
                              ~ev:(ProgressEvent.t_of_js t_of_js x14520))))
               x14517)
    let (get_onloadstart :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option) =
      fun (x14523 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14525 : Ojs.t) ->
             fun ~this:(x14526 : t) ->
               fun ~ev:(x14527 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x14525
                      [|(t_to_js x14526);(ProgressEvent.t_to_js t_to_js
                                            x14527)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14523) "onloadstart")
    let (set_onloadstart :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option -> unit) =
      fun (x14529 : 'tags this) ->
        fun (x14530 : (this:t -> ev:t ProgressEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14529) "onloadstart"
            (Ojs.option_to_js
               (fun (x14531 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x14532 : Ojs.t) ->
                       fun (x14533 : Ojs.t) ->
                         any_to_js
                           (x14531 ~this:(t_of_js x14532)
                              ~ev:(ProgressEvent.t_of_js t_of_js x14533))))
               x14530)
    let (get_onprogress :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option) =
      fun (x14536 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14538 : Ojs.t) ->
             fun ~this:(x14539 : t) ->
               fun ~ev:(x14540 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x14538
                      [|(t_to_js x14539);(ProgressEvent.t_to_js t_to_js
                                            x14540)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14536) "onprogress")
    let (set_onprogress :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option -> unit) =
      fun (x14542 : 'tags this) ->
        fun (x14543 : (this:t -> ev:t ProgressEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14542) "onprogress"
            (Ojs.option_to_js
               (fun (x14544 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x14545 : Ojs.t) ->
                       fun (x14546 : Ojs.t) ->
                         any_to_js
                           (x14544 ~this:(t_of_js x14545)
                              ~ev:(ProgressEvent.t_of_js t_of_js x14546))))
               x14543)
    let (get_readyState : 'tags this -> float) =
      fun (x14549 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14549) "readyState")
    let (get_result :
      'tags this ->
        [ `String of string  | `Null  | `Other of ArrayBuffer.t_0 ]
          Primitive.t)
      =
      fun (x14551 : 'tags this) ->
        Primitive.t_of_js
          (fun (x14553 : Ojs.t) ->
             let x14554 = x14553 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x14554 "dummy") with
             | "String" -> `String (Ojs.string_of_js x14554)
             | "Null" -> `Null
             | "Other" -> `Other (ArrayBuffer.t_0_of_js x14554)
             | _ -> assert false)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14551) "result")
    let (abort : 'tags this -> unit) =
      fun (x14555 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x14555) "abort" [||])
    let (readAsArrayBuffer : 'tags this -> blob:Blob.t -> unit) =
      fun (x14558 : 'tags this) ->
        fun ~blob:(x14557 : Blob.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x14558) "readAsArrayBuffer"
               [|(Blob.t_to_js x14557)|])
    let (readAsBinaryString : 'tags this -> blob:Blob.t -> unit) =
      fun (x14561 : 'tags this) ->
        fun ~blob:(x14560 : Blob.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x14561) "readAsBinaryString"
               [|(Blob.t_to_js x14560)|])
    let (readAsDataURL : 'tags this -> blob:Blob.t -> unit) =
      fun (x14564 : 'tags this) ->
        fun ~blob:(x14563 : Blob.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x14564) "readAsDataURL"
               [|(Blob.t_to_js x14563)|])
    let (readAsText :
      'tags this -> blob:Blob.t -> ?encoding:string -> unit -> unit) =
      fun (x14570 : 'tags this) ->
        fun ~blob:(x14566 : Blob.t) ->
          fun ?encoding:(x14567 : string option) ->
            fun () ->
              ignore
                (let x14572 = this_to_js Obj.magic x14570 in
                 Ojs.call (Ojs.get_prop_ascii x14572 "readAsText") "apply"
                   [|x14572;((let x14568 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x14568 "push"
                                   [|(Blob.t_to_js x14566)|]);
                              (match x14567 with
                               | Some x14569 ->
                                   ignore
                                     (Ojs.call x14568 "push"
                                        [|(Ojs.string_to_js x14569)|])
                               | None -> ());
                              x14568))|])
    let (get_DONE : 'tags this -> float) =
      fun (x14573 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14573) "DONE")
    let (get_EMPTY : 'tags this -> float) =
      fun (x14575 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14575) "EMPTY")
    let (get_LOADING : 'tags this -> float) =
      fun (x14577 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14577) "LOADING")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14588 : 'tags this) ->
        fun ~type_:(x14579 : 'K) ->
          fun ~listener:(x14580 : this:t -> ev:any -> any) ->
            fun
              ?options:(x14581 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14590 = this_to_js Obj.magic x14588 in
                   Ojs.call (Ojs.get_prop_ascii x14590 "addEventListener")
                     "apply"
                     [|x14590;((let x14582 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14582 "push"
                                     [|(Obj.magic x14579)|]);
                                ignore
                                  (Ojs.call x14582 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x14586 : Ojs.t) ->
                                             fun (x14587 : Ojs.t) ->
                                               any_to_js
                                                 (x14580
                                                    ~this:(t_of_js x14586)
                                                    ~ev:(any_of_js x14587))))|]);
                                (match x14581 with
                                 | Some x14583 ->
                                     ignore
                                       (Ojs.call x14582 "push"
                                          [|((match x14583 with
                                              | `U1 x14584 ->
                                                  Ojs.bool_to_js x14584
                                              | `U2 x14585 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x14585))|])
                                 | None -> ());
                                x14582))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14598 : 'tags this) ->
        fun ~type_:(x14591 : string) ->
          fun ~listener:(x14592 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x14593 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14600 = this_to_js Obj.magic x14598 in
                   Ojs.call (Ojs.get_prop_ascii x14600 "addEventListener")
                     "apply"
                     [|x14600;((let x14594 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14594 "push"
                                     [|(Ojs.string_to_js x14591)|]);
                                ignore
                                  (Ojs.call x14594 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x14592)|]);
                                (match x14593 with
                                 | Some x14595 ->
                                     ignore
                                       (Ojs.call x14594 "push"
                                          [|((match x14595 with
                                              | `U1 x14596 ->
                                                  Ojs.bool_to_js x14596
                                              | `U2 x14597 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x14597))|])
                                 | None -> ());
                                x14594))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14610 : 'tags this) ->
        fun ~type_:(x14601 : 'K) ->
          fun ~listener:(x14602 : this:t -> ev:any -> any) ->
            fun
              ?options:(x14603 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14612 = this_to_js Obj.magic x14610 in
                   Ojs.call (Ojs.get_prop_ascii x14612 "removeEventListener")
                     "apply"
                     [|x14612;((let x14604 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14604 "push"
                                     [|(Obj.magic x14601)|]);
                                ignore
                                  (Ojs.call x14604 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x14608 : Ojs.t) ->
                                             fun (x14609 : Ojs.t) ->
                                               any_to_js
                                                 (x14602
                                                    ~this:(t_of_js x14608)
                                                    ~ev:(any_of_js x14609))))|]);
                                (match x14603 with
                                 | Some x14605 ->
                                     ignore
                                       (Ojs.call x14604 "push"
                                          [|((match x14605 with
                                              | `U1 x14606 ->
                                                  Ojs.bool_to_js x14606
                                              | `U2 x14607 ->
                                                  EventListenerOptions.t_to_js
                                                    x14607))|])
                                 | None -> ());
                                x14604))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14620 : 'tags this) ->
        fun ~type_:(x14613 : string) ->
          fun ~listener:(x14614 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x14615 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14622 = this_to_js Obj.magic x14620 in
                   Ojs.call (Ojs.get_prop_ascii x14622 "removeEventListener")
                     "apply"
                     [|x14622;((let x14616 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14616 "push"
                                     [|(Ojs.string_to_js x14613)|]);
                                ignore
                                  (Ojs.call x14616 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x14614)|]);
                                (match x14615 with
                                 | Some x14617 ->
                                     ignore
                                       (Ojs.call x14616 "push"
                                          [|((match x14617 with
                                              | `U1 x14618 ->
                                                  Ojs.bool_to_js x14618
                                              | `U2 x14619 ->
                                                  EventListenerOptions.t_to_js
                                                    x14619))|])
                                 | None -> ());
                                x14616))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileReader")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FileReader") [||])
    let (done_ : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileReader")
             "DONE")
    let (empty : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileReader")
             "EMPTY")
    let (loading : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileReader")
             "LOADING")
  end
module FileReaderEventMap =
  struct
    type t = [ `FileReaderEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14624 : Ojs.t) -> t_of_js x14624
    and t_0_to_js : t_0 -> Ojs.t = fun (x14623 : t) -> t_to_js x14623
    type tags = [ `FileReaderEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FileReaderEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14627 : Ojs.t) -> intf_of_js __tags_of_js x14627
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14625 : __tags intf) -> intf_to_js __tags_to_js x14625
    let (get_abort : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x14629 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14629) "abort")
    let (set_abort : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x14632 : 'tags this) ->
        fun (x14633 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14632) "abort"
            (ProgressEvent.t_to_js FileReader.t_to_js x14633)
    let (get_error : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x14636 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14636) "error")
    let (set_error : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x14639 : 'tags this) ->
        fun (x14640 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14639) "error"
            (ProgressEvent.t_to_js FileReader.t_to_js x14640)
    let (get_load : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x14643 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14643) "load")
    let (set_load : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x14646 : 'tags this) ->
        fun (x14647 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14646) "load"
            (ProgressEvent.t_to_js FileReader.t_to_js x14647)
    let (get_loadend : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x14650 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14650) "loadend")
    let (set_loadend : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x14653 : 'tags this) ->
        fun (x14654 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14653) "loadend"
            (ProgressEvent.t_to_js FileReader.t_to_js x14654)
    let (get_loadstart : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x14657 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14657) "loadstart")
    let (set_loadstart : 'tags this -> FileReader.t ProgressEvent.t -> unit)
      =
      fun (x14660 : 'tags this) ->
        fun (x14661 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14660) "loadstart"
            (ProgressEvent.t_to_js FileReader.t_to_js x14661)
    let (get_progress : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x14664 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14664) "progress")
    let (set_progress : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x14667 : 'tags this) ->
        fun (x14668 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14667) "progress"
            (ProgressEvent.t_to_js FileReader.t_to_js x14668)
    let (create :
      abort:FileReader.t ProgressEvent.t ->
        error:FileReader.t ProgressEvent.t ->
          load:FileReader.t ProgressEvent.t ->
            loadend:FileReader.t ProgressEvent.t ->
              loadstart:FileReader.t ProgressEvent.t ->
                progress:FileReader.t ProgressEvent.t -> unit -> t)
      =
      fun ~abort:(x14671 : FileReader.t ProgressEvent.t) ->
        fun ~error:(x14672 : FileReader.t ProgressEvent.t) ->
          fun ~load:(x14673 : FileReader.t ProgressEvent.t) ->
            fun ~loadend:(x14674 : FileReader.t ProgressEvent.t) ->
              fun ~loadstart:(x14675 : FileReader.t ProgressEvent.t) ->
                fun ~progress:(x14676 : FileReader.t ProgressEvent.t) ->
                  fun () ->
                    let x14677 = Ojs.empty_obj () in
                    Ojs.set_prop_ascii x14677 "abort"
                      (ProgressEvent.t_to_js FileReader.t_to_js x14671);
                    Ojs.set_prop_ascii x14677 "error"
                      (ProgressEvent.t_to_js FileReader.t_to_js x14672);
                    Ojs.set_prop_ascii x14677 "load"
                      (ProgressEvent.t_to_js FileReader.t_to_js x14673);
                    Ojs.set_prop_ascii x14677 "loadend"
                      (ProgressEvent.t_to_js FileReader.t_to_js x14674);
                    Ojs.set_prop_ascii x14677 "loadstart"
                      (ProgressEvent.t_to_js FileReader.t_to_js x14675);
                    Ojs.set_prop_ascii x14677 "progress"
                      (ProgressEvent.t_to_js FileReader.t_to_js x14676);
                    t_of_js x14677
    let cast_from = Obj.magic
  end
module FileList =
  struct
    type t =
      [ `FileList  | File.t ArrayLike.tags_1
      | File.t IterableIterator.tags_1] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14685 : Ojs.t) -> t_of_js x14685
    and t_0_to_js : t_0 -> Ojs.t = fun (x14684 : t) -> t_to_js x14684
    type tags =
      [ `FileList  | File.t ArrayLike.tags_1
      | File.t IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FileList ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14688 : Ojs.t) -> intf_of_js __tags_of_js x14688
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14686 : __tags intf) -> intf_to_js __tags_to_js x14686
    let (get_length : 'tags this -> float) =
      fun (x14690 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14690) "length")
    let (item : 'tags this -> index:float -> File.t option) =
      fun (x14693 : 'tags this) ->
        fun ~index:(x14692 : float) ->
          Ojs.option_of_js File.t_of_js
            (Ojs.call (this_to_js Obj.magic x14693) "item"
               [|(Ojs.float_to_js x14692)|])
    let (get : 'tags this -> float -> File.t) =
      fun (x14696 : 'tags this) ->
        fun (x14698 : float) ->
          File.t_of_js
            (Ojs.get_prop (this_to_js Obj.magic x14696)
               (Ojs.float_to_js x14698))
    let (set : 'tags this -> float -> File.t -> unit) =
      fun (x14699 : 'tags this) ->
        fun (x14701 : float) ->
          fun (x14702 : File.t) ->
            Ojs.set_prop (this_to_js Obj.magic x14699)
              (Ojs.float_to_js x14701) (File.t_to_js x14702)
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileList")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FileList") [||])
  end
module EventSourceEventMap =
  struct
    type t = [ `EventSourceEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14704 : Ojs.t) -> t_of_js x14704
    and t_0_to_js : t_0 -> Ojs.t = fun (x14703 : t) -> t_to_js x14703
    type tags = [ `EventSourceEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EventSourceEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14707 : Ojs.t) -> intf_of_js __tags_of_js x14707
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14705 : __tags intf) -> intf_to_js __tags_to_js x14705
    let (get_error : 'tags this -> Event.t) =
      fun (x14709 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14709) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x14711 : 'tags this) ->
        fun (x14712 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14711) "error"
            (Event.t_to_js x14712)
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x14714 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14714) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x14716 : 'tags this) ->
        fun (x14717 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14716) "message"
            (MessageEvent.t_0_to_js x14717)
    let (get_open : 'tags this -> Event.t) =
      fun (x14719 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14719) "open")
    let (set_open : 'tags this -> Event.t -> unit) =
      fun (x14721 : 'tags this) ->
        fun (x14722 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14721) "open"
            (Event.t_to_js x14722)
    let (create :
      error:Event.t -> message:MessageEvent.t_0 -> open_:Event.t -> unit -> t)
      =
      fun ~error:(x14724 : Event.t) ->
        fun ~message:(x14725 : MessageEvent.t_0) ->
          fun ~open_:(x14726 : Event.t) ->
            fun () ->
              let x14727 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x14727 "error" (Event.t_to_js x14724);
              Ojs.set_prop_ascii x14727 "message"
                (MessageEvent.t_0_to_js x14725);
              Ojs.set_prop_ascii x14727 "open" (Event.t_to_js x14726);
              t_of_js x14727
    let cast_from = Obj.magic
  end
module EventSourceInit =
  struct
    type t = [ `EventSourceInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14729 : Ojs.t) -> t_of_js x14729
    and t_0_to_js : t_0 -> Ojs.t = fun (x14728 : t) -> t_to_js x14728
    type tags = [ `EventSourceInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EventSourceInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14732 : Ojs.t) -> intf_of_js __tags_of_js x14732
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14730 : __tags intf) -> intf_to_js __tags_to_js x14730
    let (get_withCredentials : 'tags this -> bool option) =
      fun (x14734 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14734) "withCredentials")
    let (set_withCredentials : 'tags this -> bool -> unit) =
      fun (x14737 : 'tags this) ->
        fun (x14738 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14737) "withCredentials"
            (Ojs.bool_to_js x14738)
    let (create : ?withCredentials:bool -> unit -> t) =
      fun ?withCredentials:(x14740 : bool option) ->
        fun () ->
          let x14741 = Ojs.empty_obj () in
          (match x14740 with
           | Some x14742 ->
               Ojs.set_prop_ascii x14741 "withCredentials"
                 (Ojs.bool_to_js x14742)
           | None -> ());
          t_of_js x14741
    let cast_from = Obj.magic
  end
module EventSource =
  struct
    type t = [ `EventSource  | `EventTarget ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14744 : Ojs.t) -> t_of_js x14744
    and t_0_to_js : t_0 -> Ojs.t = fun (x14743 : t) -> t_to_js x14743
    type tags = [ `EventSource  | `EventTarget ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EventSource ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14747 : Ojs.t) -> intf_of_js __tags_of_js x14747
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14745 : __tags intf) -> intf_to_js __tags_to_js x14745
    let (get_onerror : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x14749 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14751 : Ojs.t) ->
             fun ~this:(x14752 : t) ->
               fun ~ev:(x14753 : Event.t) ->
                 any_of_js
                   (Ojs.apply x14751
                      [|(t_to_js x14752);(Event.t_to_js x14753)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14749) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x14754 : 'tags this) ->
        fun (x14755 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14754) "onerror"
            (Ojs.option_to_js
               (fun (x14756 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x14757 : Ojs.t) ->
                       fun (x14758 : Ojs.t) ->
                         any_to_js
                           (x14756 ~this:(t_of_js x14757)
                              ~ev:(Event.t_of_js x14758)))) x14755)
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x14760 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14762 : Ojs.t) ->
             fun ~this:(x14763 : t) ->
               fun ~ev:(x14764 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x14762
                      [|(t_to_js x14763);(MessageEvent.t_0_to_js x14764)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14760) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x14765 : 'tags this) ->
        fun (x14766 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14765) "onmessage"
            (Ojs.option_to_js
               (fun (x14767 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x14768 : Ojs.t) ->
                       fun (x14769 : Ojs.t) ->
                         any_to_js
                           (x14767 ~this:(t_of_js x14768)
                              ~ev:(MessageEvent.t_0_of_js x14769)))) x14766)
    let (get_onopen : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x14771 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14773 : Ojs.t) ->
             fun ~this:(x14774 : t) ->
               fun ~ev:(x14775 : Event.t) ->
                 any_of_js
                   (Ojs.apply x14773
                      [|(t_to_js x14774);(Event.t_to_js x14775)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14771) "onopen")
    let (set_onopen :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x14776 : 'tags this) ->
        fun (x14777 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14776) "onopen"
            (Ojs.option_to_js
               (fun (x14778 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x14779 : Ojs.t) ->
                       fun (x14780 : Ojs.t) ->
                         any_to_js
                           (x14778 ~this:(t_of_js x14779)
                              ~ev:(Event.t_of_js x14780)))) x14777)
    let (get_readyState : 'tags this -> float) =
      fun (x14782 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14782) "readyState")
    let (get_url : 'tags this -> string) =
      fun (x14784 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14784) "url")
    let (get_withCredentials : 'tags this -> bool) =
      fun (x14786 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14786) "withCredentials")
    let (close : 'tags this -> unit) =
      fun (x14788 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x14788) "close" [||])
    let (get_CLOSED : 'tags this -> float) =
      fun (x14790 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14790) "CLOSED")
    let (get_CONNECTING : 'tags this -> float) =
      fun (x14792 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14792) "CONNECTING")
    let (get_OPEN : 'tags this -> float) =
      fun (x14794 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14794) "OPEN")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14805 : 'tags this) ->
        fun ~type_:(x14796 : 'K) ->
          fun ~listener:(x14797 : this:t -> ev:any -> any) ->
            fun
              ?options:(x14798 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14807 = this_to_js Obj.magic x14805 in
                   Ojs.call (Ojs.get_prop_ascii x14807 "addEventListener")
                     "apply"
                     [|x14807;((let x14799 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14799 "push"
                                     [|(Obj.magic x14796)|]);
                                ignore
                                  (Ojs.call x14799 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x14803 : Ojs.t) ->
                                             fun (x14804 : Ojs.t) ->
                                               any_to_js
                                                 (x14797
                                                    ~this:(t_of_js x14803)
                                                    ~ev:(any_of_js x14804))))|]);
                                (match x14798 with
                                 | Some x14800 ->
                                     ignore
                                       (Ojs.call x14799 "push"
                                          [|((match x14800 with
                                              | `U1 x14801 ->
                                                  Ojs.bool_to_js x14801
                                              | `U2 x14802 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x14802))|])
                                 | None -> ());
                                x14799))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:(this:t -> event:MessageEvent.t_0 -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14817 : 'tags this) ->
        fun ~type_:(x14808 : string) ->
          fun ~listener:(x14809 : this:t -> event:MessageEvent.t_0 -> any) ->
            fun
              ?options:(x14810 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14819 = this_to_js Obj.magic x14817 in
                   Ojs.call (Ojs.get_prop_ascii x14819 "addEventListener")
                     "apply"
                     [|x14819;((let x14811 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14811 "push"
                                     [|(Ojs.string_to_js x14808)|]);
                                ignore
                                  (Ojs.call x14811 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x14815 : Ojs.t) ->
                                             fun (x14816 : Ojs.t) ->
                                               any_to_js
                                                 (x14809
                                                    ~this:(t_of_js x14815)
                                                    ~event:(MessageEvent.t_0_of_js
                                                              x14816))))|]);
                                (match x14810 with
                                 | Some x14812 ->
                                     ignore
                                       (Ojs.call x14811 "push"
                                          [|((match x14812 with
                                              | `U1 x14813 ->
                                                  Ojs.bool_to_js x14813
                                              | `U2 x14814 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x14814))|])
                                 | None -> ());
                                x14811))|])
    let (addEventListener'' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14827 : 'tags this) ->
        fun ~type_:(x14820 : string) ->
          fun ~listener:(x14821 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x14822 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14829 = this_to_js Obj.magic x14827 in
                   Ojs.call (Ojs.get_prop_ascii x14829 "addEventListener")
                     "apply"
                     [|x14829;((let x14823 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14823 "push"
                                     [|(Ojs.string_to_js x14820)|]);
                                ignore
                                  (Ojs.call x14823 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x14821)|]);
                                (match x14822 with
                                 | Some x14824 ->
                                     ignore
                                       (Ojs.call x14823 "push"
                                          [|((match x14824 with
                                              | `U1 x14825 ->
                                                  Ojs.bool_to_js x14825
                                              | `U2 x14826 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x14826))|])
                                 | None -> ());
                                x14823))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14839 : 'tags this) ->
        fun ~type_:(x14830 : 'K) ->
          fun ~listener:(x14831 : this:t -> ev:any -> any) ->
            fun
              ?options:(x14832 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14841 = this_to_js Obj.magic x14839 in
                   Ojs.call (Ojs.get_prop_ascii x14841 "removeEventListener")
                     "apply"
                     [|x14841;((let x14833 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14833 "push"
                                     [|(Obj.magic x14830)|]);
                                ignore
                                  (Ojs.call x14833 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x14837 : Ojs.t) ->
                                             fun (x14838 : Ojs.t) ->
                                               any_to_js
                                                 (x14831
                                                    ~this:(t_of_js x14837)
                                                    ~ev:(any_of_js x14838))))|]);
                                (match x14832 with
                                 | Some x14834 ->
                                     ignore
                                       (Ojs.call x14833 "push"
                                          [|((match x14834 with
                                              | `U1 x14835 ->
                                                  Ojs.bool_to_js x14835
                                              | `U2 x14836 ->
                                                  EventListenerOptions.t_to_js
                                                    x14836))|])
                                 | None -> ());
                                x14833))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:(this:t -> event:MessageEvent.t_0 -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14851 : 'tags this) ->
        fun ~type_:(x14842 : string) ->
          fun ~listener:(x14843 : this:t -> event:MessageEvent.t_0 -> any) ->
            fun
              ?options:(x14844 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14853 = this_to_js Obj.magic x14851 in
                   Ojs.call (Ojs.get_prop_ascii x14853 "removeEventListener")
                     "apply"
                     [|x14853;((let x14845 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14845 "push"
                                     [|(Ojs.string_to_js x14842)|]);
                                ignore
                                  (Ojs.call x14845 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x14849 : Ojs.t) ->
                                             fun (x14850 : Ojs.t) ->
                                               any_to_js
                                                 (x14843
                                                    ~this:(t_of_js x14849)
                                                    ~event:(MessageEvent.t_0_of_js
                                                              x14850))))|]);
                                (match x14844 with
                                 | Some x14846 ->
                                     ignore
                                       (Ojs.call x14845 "push"
                                          [|((match x14846 with
                                              | `U1 x14847 ->
                                                  Ojs.bool_to_js x14847
                                              | `U2 x14848 ->
                                                  EventListenerOptions.t_to_js
                                                    x14848))|])
                                 | None -> ());
                                x14845))|])
    let (removeEventListener'' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14861 : 'tags this) ->
        fun ~type_:(x14854 : string) ->
          fun ~listener:(x14855 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x14856 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14863 = this_to_js Obj.magic x14861 in
                   Ojs.call (Ojs.get_prop_ascii x14863 "removeEventListener")
                     "apply"
                     [|x14863;((let x14857 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14857 "push"
                                     [|(Ojs.string_to_js x14854)|]);
                                ignore
                                  (Ojs.call x14857 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x14855)|]);
                                (match x14856 with
                                 | Some x14858 ->
                                     ignore
                                       (Ojs.call x14857 "push"
                                          [|((match x14858 with
                                              | `U1 x14859 ->
                                                  Ojs.bool_to_js x14859
                                              | `U2 x14860 ->
                                                  EventListenerOptions.t_to_js
                                                    x14860))|])
                                 | None -> ());
                                x14857))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "EventSource")
             "prototype")
    let (create :
      url:[ `U1 of string  | `U2 of URL.t ] ->
        ?eventSourceInitDict:EventSourceInit.t -> unit -> t)
      =
      fun ~url:(x14864 : [ `U1 of string  | `U2 of URL.t ]) ->
        fun ?eventSourceInitDict:(x14865 : EventSourceInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "EventSource")
                 (let x14866 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x14866 "push"
                       [|((match x14864 with
                           | `U1 x14868 -> Ojs.string_to_js x14868
                           | `U2 x14869 -> URL.t_to_js x14869))|]);
                  (match x14865 with
                   | Some x14867 ->
                       ignore
                         (Ojs.call x14866 "push"
                            [|(EventSourceInit.t_to_js x14867)|])
                   | None -> ());
                  x14866))
    let (closed : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "EventSource")
             "CLOSED")
    let (connecting : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "EventSource")
             "CONNECTING")
    let (open_ : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "EventSource")
             "OPEN")
  end
module EXT_texture_compression_rgtc =
  struct
    type t = [ `EXT_texture_compression_rgtc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14871 : Ojs.t) -> t_of_js x14871
    and t_0_to_js : t_0 -> Ojs.t = fun (x14870 : t) -> t_to_js x14870
    type tags = [ `EXT_texture_compression_rgtc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_texture_compression_rgtc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14874 : Ojs.t) -> intf_of_js __tags_of_js x14874
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14872 : __tags intf) -> intf_to_js __tags_to_js x14872
    let (get_COMPRESSED_RED_GREEN_RGTC2_EXT : 'tags this -> GLenum.t) =
      fun (x14876 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14876)
             "COMPRESSED_RED_GREEN_RGTC2_EXT")
    let (get_COMPRESSED_RED_RGTC1_EXT : 'tags this -> GLenum.t) =
      fun (x14878 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14878)
             "COMPRESSED_RED_RGTC1_EXT")
    let (get_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT : 'tags this -> GLenum.t)
      =
      fun (x14880 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14880)
             "COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT")
    let (get_COMPRESSED_SIGNED_RED_RGTC1_EXT : 'tags this -> GLenum.t) =
      fun (x14882 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14882)
             "COMPRESSED_SIGNED_RED_RGTC1_EXT")
    let (create :
      compressed_red_green_rgtc2_ext:GLenum.t ->
        compressed_red_rgtc1_ext:GLenum.t ->
          compressed_signed_red_green_rgtc2_ext:GLenum.t ->
            compressed_signed_red_rgtc1_ext:GLenum.t -> unit -> t)
      =
      fun ~compressed_red_green_rgtc2_ext:(x14884 : GLenum.t) ->
        fun ~compressed_red_rgtc1_ext:(x14885 : GLenum.t) ->
          fun ~compressed_signed_red_green_rgtc2_ext:(x14886 : GLenum.t) ->
            fun ~compressed_signed_red_rgtc1_ext:(x14887 : GLenum.t) ->
              fun () ->
                let x14888 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x14888 "COMPRESSED_RED_GREEN_RGTC2_EXT"
                  (GLenum.t_to_js x14884);
                Ojs.set_prop_ascii x14888 "COMPRESSED_RED_RGTC1_EXT"
                  (GLenum.t_to_js x14885);
                Ojs.set_prop_ascii x14888
                  "COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT"
                  (GLenum.t_to_js x14886);
                Ojs.set_prop_ascii x14888 "COMPRESSED_SIGNED_RED_RGTC1_EXT"
                  (GLenum.t_to_js x14887);
                t_of_js x14888
    let cast_from = Obj.magic
  end
module DedicatedWorkerGlobalScopeEventMap =
  struct
    type t =
      [ `DedicatedWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14890 : Ojs.t) -> t_of_js x14890
    and t_0_to_js : t_0 -> Ojs.t = fun (x14889 : t) -> t_to_js x14889
    type tags =
      [ `DedicatedWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `DedicatedWorkerGlobalScopeEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14893 : Ojs.t) -> intf_of_js __tags_of_js x14893
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14891 : __tags intf) -> intf_to_js __tags_to_js x14891
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x14895 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14895) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x14897 : 'tags this) ->
        fun (x14898 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14897) "message"
            (MessageEvent.t_0_to_js x14898)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x14900 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14900) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x14902 : 'tags this) ->
        fun (x14903 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14902) "messageerror"
            (MessageEvent.t_0_to_js x14903)
    let (create :
      message:MessageEvent.t_0 -> messageerror:MessageEvent.t_0 -> unit -> t)
      =
      fun ~message:(x14905 : MessageEvent.t_0) ->
        fun ~messageerror:(x14906 : MessageEvent.t_0) ->
          fun () ->
            let x14907 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x14907 "message"
              (MessageEvent.t_0_to_js x14905);
            Ojs.set_prop_ascii x14907 "messageerror"
              (MessageEvent.t_0_to_js x14906);
            t_of_js x14907
    let cast_from = Obj.magic
  end
module FrameRequestCallback =
  struct
    type t = [ `FrameRequestCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14909 : Ojs.t) -> t_of_js x14909
    and t_0_to_js : t_0 -> Ojs.t = fun (x14908 : t) -> t_to_js x14908
    type tags = [ `FrameRequestCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FrameRequestCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14912 : Ojs.t) -> intf_of_js __tags_of_js x14912
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14910 : __tags intf) -> intf_to_js __tags_to_js x14910
    let (apply : 'tags this -> time:DOMHighResTimeStamp.t -> unit) =
      fun (x14915 : 'tags this) ->
        fun ~time:(x14914 : DOMHighResTimeStamp.t) ->
          ignore
            (Ojs.apply (this_to_js Obj.magic x14915)
               [|(DOMHighResTimeStamp.t_to_js x14914)|])
    let cast_from = Obj.magic
  end
module AnimationFrameProvider =
  struct
    type t = [ `AnimationFrameProvider ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14918 : Ojs.t) -> t_of_js x14918
    and t_0_to_js : t_0 -> Ojs.t = fun (x14917 : t) -> t_to_js x14917
    type tags = [ `AnimationFrameProvider ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `AnimationFrameProvider ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14921 : Ojs.t) -> intf_of_js __tags_of_js x14921
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14919 : __tags intf) -> intf_to_js __tags_to_js x14919
    let (cancelAnimationFrame : 'tags this -> handle:float -> unit) =
      fun (x14924 : 'tags this) ->
        fun ~handle:(x14923 : float) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x14924) "cancelAnimationFrame"
               [|(Ojs.float_to_js x14923)|])
    let (requestAnimationFrame :
      'tags this -> callback:FrameRequestCallback.t -> float) =
      fun (x14927 : 'tags this) ->
        fun ~callback:(x14926 : FrameRequestCallback.t) ->
          Ojs.float_of_js
            (Ojs.call (this_to_js Obj.magic x14927) "requestAnimationFrame"
               [|(FrameRequestCallback.t_to_js x14926)|])
    let cast_from = Obj.magic
  end
module DedicatedWorkerGlobalScope =
  struct
    type t =
      [ `AnimationFrameProvider  | `DedicatedWorkerGlobalScope 
      | `EventTarget  | `FontFaceSource  | `WindowOrWorkerGlobalScope 
      | `WorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14930 : Ojs.t) -> t_of_js x14930
    and t_0_to_js : t_0 -> Ojs.t = fun (x14929 : t) -> t_to_js x14929
    type tags =
      [ `AnimationFrameProvider  | `DedicatedWorkerGlobalScope 
      | `EventTarget  | `FontFaceSource  | `WindowOrWorkerGlobalScope 
      | `WorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `DedicatedWorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14933 : Ojs.t) -> intf_of_js __tags_of_js x14933
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14931 : __tags intf) -> intf_to_js __tags_to_js x14931
    let (get_name : 'tags this -> string) =
      fun (x14935 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14935) "name")
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x14937 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14939 : Ojs.t) ->
             fun ~this:(x14940 : t) ->
               fun ~ev:(x14941 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x14939
                      [|(t_to_js x14940);(MessageEvent.t_0_to_js x14941)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14937) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x14942 : 'tags this) ->
        fun (x14943 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14942) "onmessage"
            (Ojs.option_to_js
               (fun (x14944 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x14945 : Ojs.t) ->
                       fun (x14946 : Ojs.t) ->
                         any_to_js
                           (x14944 ~this:(t_of_js x14945)
                              ~ev:(MessageEvent.t_0_of_js x14946)))) x14943)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x14948 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14950 : Ojs.t) ->
             fun ~this:(x14951 : t) ->
               fun ~ev:(x14952 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x14950
                      [|(t_to_js x14951);(MessageEvent.t_0_to_js x14952)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14948) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x14953 : 'tags this) ->
        fun (x14954 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14953) "onmessageerror"
            (Ojs.option_to_js
               (fun (x14955 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x14956 : Ojs.t) ->
                       fun (x14957 : Ojs.t) ->
                         any_to_js
                           (x14955 ~this:(t_of_js x14956)
                              ~ev:(MessageEvent.t_0_of_js x14957)))) x14954)
    let (close : 'tags this -> unit) =
      fun (x14959 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x14959) "close" [||])
    let (postMessage :
      'tags this -> message:any -> transfer:Transferable.t list -> unit) =
      fun (x14964 : 'tags this) ->
        fun ~message:(x14961 : any) ->
          fun ~transfer:(x14962 : Transferable.t list) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x14964) "postMessage"
                 [|(any_to_js x14961);(Ojs.list_to_js Transferable.t_to_js
                                         x14962)|])
    let (postMessage' :
      'tags this ->
        message:any -> ?options:StructuredSerializeOptions.t -> unit -> unit)
      =
      fun (x14970 : 'tags this) ->
        fun ~message:(x14966 : any) ->
          fun ?options:(x14967 : StructuredSerializeOptions.t option) ->
            fun () ->
              ignore
                (let x14972 = this_to_js Obj.magic x14970 in
                 Ojs.call (Ojs.get_prop_ascii x14972 "postMessage") "apply"
                   [|x14972;((let x14968 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x14968 "push"
                                   [|(any_to_js x14966)|]);
                              (match x14967 with
                               | Some x14969 ->
                                   ignore
                                     (Ojs.call x14968 "push"
                                        [|(StructuredSerializeOptions.t_to_js
                                             x14969)|])
                               | None -> ());
                              x14968))|])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14982 : 'tags this) ->
        fun ~type_:(x14973 : 'K) ->
          fun ~listener:(x14974 : this:t -> ev:any -> any) ->
            fun
              ?options:(x14975 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14984 = this_to_js Obj.magic x14982 in
                   Ojs.call (Ojs.get_prop_ascii x14984 "addEventListener")
                     "apply"
                     [|x14984;((let x14976 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14976 "push"
                                     [|(Obj.magic x14973)|]);
                                ignore
                                  (Ojs.call x14976 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x14980 : Ojs.t) ->
                                             fun (x14981 : Ojs.t) ->
                                               any_to_js
                                                 (x14974
                                                    ~this:(t_of_js x14980)
                                                    ~ev:(any_of_js x14981))))|]);
                                (match x14975 with
                                 | Some x14977 ->
                                     ignore
                                       (Ojs.call x14976 "push"
                                          [|((match x14977 with
                                              | `U1 x14978 ->
                                                  Ojs.bool_to_js x14978
                                              | `U2 x14979 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x14979))|])
                                 | None -> ());
                                x14976))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14992 : 'tags this) ->
        fun ~type_:(x14985 : string) ->
          fun ~listener:(x14986 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x14987 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14994 = this_to_js Obj.magic x14992 in
                   Ojs.call (Ojs.get_prop_ascii x14994 "addEventListener")
                     "apply"
                     [|x14994;((let x14988 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14988 "push"
                                     [|(Ojs.string_to_js x14985)|]);
                                ignore
                                  (Ojs.call x14988 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x14986)|]);
                                (match x14987 with
                                 | Some x14989 ->
                                     ignore
                                       (Ojs.call x14988 "push"
                                          [|((match x14989 with
                                              | `U1 x14990 ->
                                                  Ojs.bool_to_js x14990
                                              | `U2 x14991 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x14991))|])
                                 | None -> ());
                                x14988))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x15004 : 'tags this) ->
        fun ~type_:(x14995 : 'K) ->
          fun ~listener:(x14996 : this:t -> ev:any -> any) ->
            fun
              ?options:(x14997 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x15006 = this_to_js Obj.magic x15004 in
                   Ojs.call (Ojs.get_prop_ascii x15006 "removeEventListener")
                     "apply"
                     [|x15006;((let x14998 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14998 "push"
                                     [|(Obj.magic x14995)|]);
                                ignore
                                  (Ojs.call x14998 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x15002 : Ojs.t) ->
                                             fun (x15003 : Ojs.t) ->
                                               any_to_js
                                                 (x14996
                                                    ~this:(t_of_js x15002)
                                                    ~ev:(any_of_js x15003))))|]);
                                (match x14997 with
                                 | Some x14999 ->
                                     ignore
                                       (Ojs.call x14998 "push"
                                          [|((match x14999 with
                                              | `U1 x15000 ->
                                                  Ojs.bool_to_js x15000
                                              | `U2 x15001 ->
                                                  EventListenerOptions.t_to_js
                                                    x15001))|])
                                 | None -> ());
                                x14998))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x15014 : 'tags this) ->
        fun ~type_:(x15007 : string) ->
          fun ~listener:(x15008 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x15009 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x15016 = this_to_js Obj.magic x15014 in
                   Ojs.call (Ojs.get_prop_ascii x15016 "removeEventListener")
                     "apply"
                     [|x15016;((let x15010 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x15010 "push"
                                     [|(Ojs.string_to_js x15007)|]);
                                ignore
                                  (Ojs.call x15010 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x15008)|]);
                                (match x15009 with
                                 | Some x15011 ->
                                     ignore
                                       (Ojs.call x15010 "push"
                                          [|((match x15011 with
                                              | `U1 x15012 ->
                                                  Ojs.bool_to_js x15012
                                              | `U2 x15013 ->
                                                  EventListenerOptions.t_to_js
                                                    x15013))|])
                                 | None -> ());
                                x15010))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "DedicatedWorkerGlobalScope")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "DedicatedWorkerGlobalScope")
             [||])
  end
module DOMRectInit =
  struct
    type t = [ `DOMRectInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15018 : Ojs.t) -> t_of_js x15018
    and t_0_to_js : t_0 -> Ojs.t = fun (x15017 : t) -> t_to_js x15017
    type tags = [ `DOMRectInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMRectInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15021 : Ojs.t) -> intf_of_js __tags_of_js x15021
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15019 : __tags intf) -> intf_to_js __tags_to_js x15019
    let (get_height : 'tags this -> float option) =
      fun (x15023 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15023) "height")
    let (set_height : 'tags this -> float -> unit) =
      fun (x15026 : 'tags this) ->
        fun (x15027 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15026) "height"
            (Ojs.float_to_js x15027)
    let (get_width : 'tags this -> float option) =
      fun (x15029 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15029) "width")
    let (set_width : 'tags this -> float -> unit) =
      fun (x15032 : 'tags this) ->
        fun (x15033 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15032) "width"
            (Ojs.float_to_js x15033)
    let (get_x : 'tags this -> float option) =
      fun (x15035 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15035) "x")
    let (set_x : 'tags this -> float -> unit) =
      fun (x15038 : 'tags this) ->
        fun (x15039 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15038) "x"
            (Ojs.float_to_js x15039)
    let (get_y : 'tags this -> float option) =
      fun (x15041 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15041) "y")
    let (set_y : 'tags this -> float -> unit) =
      fun (x15044 : 'tags this) ->
        fun (x15045 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15044) "y"
            (Ojs.float_to_js x15045)
    let (create :
      ?height:float -> ?width:float -> ?x:float -> ?y:float -> unit -> t) =
      fun ?height:(x15047 : float option) ->
        fun ?width:(x15048 : float option) ->
          fun ?x:(x15049 : float option) ->
            fun ?y:(x15050 : float option) ->
              fun () ->
                let x15051 = Ojs.empty_obj () in
                (match x15047 with
                 | Some x15055 ->
                     Ojs.set_prop_ascii x15051 "height"
                       (Ojs.float_to_js x15055)
                 | None -> ());
                (match x15048 with
                 | Some x15054 ->
                     Ojs.set_prop_ascii x15051 "width"
                       (Ojs.float_to_js x15054)
                 | None -> ());
                (match x15049 with
                 | Some x15053 ->
                     Ojs.set_prop_ascii x15051 "x" (Ojs.float_to_js x15053)
                 | None -> ());
                (match x15050 with
                 | Some x15052 ->
                     Ojs.set_prop_ascii x15051 "y" (Ojs.float_to_js x15052)
                 | None -> ());
                t_of_js x15051
    let cast_from = Obj.magic
  end
module DOMRectReadOnly =
  struct
    type t = [ `DOMRectReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15057 : Ojs.t) -> t_of_js x15057
    and t_0_to_js : t_0 -> Ojs.t = fun (x15056 : t) -> t_to_js x15056
    type tags = [ `DOMRectReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMRectReadOnly ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15060 : Ojs.t) -> intf_of_js __tags_of_js x15060
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15058 : __tags intf) -> intf_to_js __tags_to_js x15058
    let (get_bottom : 'tags this -> float) =
      fun (x15062 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15062) "bottom")
    let (get_height : 'tags this -> float) =
      fun (x15064 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15064) "height")
    let (get_left : 'tags this -> float) =
      fun (x15066 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15066) "left")
    let (get_right : 'tags this -> float) =
      fun (x15068 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15068) "right")
    let (get_top : 'tags this -> float) =
      fun (x15070 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15070) "top")
    let (get_width : 'tags this -> float) =
      fun (x15072 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15072) "width")
    let (get_x : 'tags this -> float) =
      fun (x15074 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15074) "x")
    let (get_y : 'tags this -> float) =
      fun (x15076 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15076) "y")
    let (toJSON : 'tags this -> any) =
      fun (x15078 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x15078) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "DOMRectReadOnly") "prototype")
    let (create :
      ?x:float -> ?y:float -> ?width:float -> ?height:float -> unit -> t) =
      fun ?x:(x15080 : float option) ->
        fun ?y:(x15081 : float option) ->
          fun ?width:(x15082 : float option) ->
            fun ?height:(x15083 : float option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Ojs.global "DOMRectReadOnly")
                     (let x15084 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x15080 with
                       | Some x15088 ->
                           ignore
                             (Ojs.call x15084 "push"
                                [|(Ojs.float_to_js x15088)|])
                       | None -> ());
                      (match x15081 with
                       | Some x15087 ->
                           ignore
                             (Ojs.call x15084 "push"
                                [|(Ojs.float_to_js x15087)|])
                       | None -> ());
                      (match x15082 with
                       | Some x15086 ->
                           ignore
                             (Ojs.call x15084 "push"
                                [|(Ojs.float_to_js x15086)|])
                       | None -> ());
                      (match x15083 with
                       | Some x15085 ->
                           ignore
                             (Ojs.call x15084 "push"
                                [|(Ojs.float_to_js x15085)|])
                       | None -> ());
                      x15084))
    let (fromRect : ?other:DOMRectInit.t -> unit -> t) =
      fun ?other:(x15089 : DOMRectInit.t option) ->
        fun () ->
          t_of_js
            (let x15092 = Ojs.get_prop_ascii Ojs.global "DOMRectReadOnly" in
             Ojs.call (Ojs.get_prop_ascii x15092 "fromRect") "apply"
               [|x15092;((let x15090 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x15089 with
                           | Some x15091 ->
                               ignore
                                 (Ojs.call x15090 "push"
                                    [|(DOMRectInit.t_to_js x15091)|])
                           | None -> ());
                          x15090))|])
  end
module DOMRect =
  struct
    type t = [ `DOMRect  | `DOMRectReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15094 : Ojs.t) -> t_of_js x15094
    and t_0_to_js : t_0 -> Ojs.t = fun (x15093 : t) -> t_to_js x15093
    type tags = [ `DOMRect  | `DOMRectReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMRect ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15097 : Ojs.t) -> intf_of_js __tags_of_js x15097
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15095 : __tags intf) -> intf_to_js __tags_to_js x15095
    let (get_height : 'tags this -> float) =
      fun (x15099 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15099) "height")
    let (set_height : 'tags this -> float -> unit) =
      fun (x15101 : 'tags this) ->
        fun (x15102 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15101) "height"
            (Ojs.float_to_js x15102)
    let (get_width : 'tags this -> float) =
      fun (x15104 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15104) "width")
    let (set_width : 'tags this -> float -> unit) =
      fun (x15106 : 'tags this) ->
        fun (x15107 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15106) "width"
            (Ojs.float_to_js x15107)
    let (get_x : 'tags this -> float) =
      fun (x15109 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15109) "x")
    let (set_x : 'tags this -> float -> unit) =
      fun (x15111 : 'tags this) ->
        fun (x15112 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15111) "x"
            (Ojs.float_to_js x15112)
    let (get_y : 'tags this -> float) =
      fun (x15114 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15114) "y")
    let (set_y : 'tags this -> float -> unit) =
      fun (x15116 : 'tags this) ->
        fun (x15117 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15116) "y"
            (Ojs.float_to_js x15117)
    let (create :
      height:float -> width:float -> x:float -> y:float -> unit -> t) =
      fun ~height:(x15119 : float) ->
        fun ~width:(x15120 : float) ->
          fun ~x:(x15121 : float) ->
            fun ~y:(x15122 : float) ->
              fun () ->
                let x15123 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x15123 "height" (Ojs.float_to_js x15119);
                Ojs.set_prop_ascii x15123 "width" (Ojs.float_to_js x15120);
                Ojs.set_prop_ascii x15123 "x" (Ojs.float_to_js x15121);
                Ojs.set_prop_ascii x15123 "y" (Ojs.float_to_js x15122);
                t_of_js x15123
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMRect")
             "prototype")
    let (create' :
      ?x:float -> ?y:float -> ?width:float -> ?height:float -> unit -> t) =
      fun ?x:(x15124 : float option) ->
        fun ?y:(x15125 : float option) ->
          fun ?width:(x15126 : float option) ->
            fun ?height:(x15127 : float option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMRect")
                     (let x15128 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x15124 with
                       | Some x15132 ->
                           ignore
                             (Ojs.call x15128 "push"
                                [|(Ojs.float_to_js x15132)|])
                       | None -> ());
                      (match x15125 with
                       | Some x15131 ->
                           ignore
                             (Ojs.call x15128 "push"
                                [|(Ojs.float_to_js x15131)|])
                       | None -> ());
                      (match x15126 with
                       | Some x15130 ->
                           ignore
                             (Ojs.call x15128 "push"
                                [|(Ojs.float_to_js x15130)|])
                       | None -> ());
                      (match x15127 with
                       | Some x15129 ->
                           ignore
                             (Ojs.call x15128 "push"
                                [|(Ojs.float_to_js x15129)|])
                       | None -> ());
                      x15128))
    let (fromRect : ?other:DOMRectInit.t -> unit -> t) =
      fun ?other:(x15133 : DOMRectInit.t option) ->
        fun () ->
          t_of_js
            (let x15136 = Ojs.get_prop_ascii Ojs.global "DOMRect" in
             Ojs.call (Ojs.get_prop_ascii x15136 "fromRect") "apply"
               [|x15136;((let x15134 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x15133 with
                           | Some x15135 ->
                               ignore
                                 (Ojs.call x15134 "push"
                                    [|(DOMRectInit.t_to_js x15135)|])
                           | None -> ());
                          x15134))|])
  end
module DOMPointInit =
  struct
    type t = [ `DOMPointInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15138 : Ojs.t) -> t_of_js x15138
    and t_0_to_js : t_0 -> Ojs.t = fun (x15137 : t) -> t_to_js x15137
    type tags = [ `DOMPointInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMPointInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15141 : Ojs.t) -> intf_of_js __tags_of_js x15141
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15139 : __tags intf) -> intf_to_js __tags_to_js x15139
    let (get_w : 'tags this -> float option) =
      fun (x15143 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15143) "w")
    let (set_w : 'tags this -> float -> unit) =
      fun (x15146 : 'tags this) ->
        fun (x15147 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15146) "w"
            (Ojs.float_to_js x15147)
    let (get_x : 'tags this -> float option) =
      fun (x15149 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15149) "x")
    let (set_x : 'tags this -> float -> unit) =
      fun (x15152 : 'tags this) ->
        fun (x15153 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15152) "x"
            (Ojs.float_to_js x15153)
    let (get_y : 'tags this -> float option) =
      fun (x15155 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15155) "y")
    let (set_y : 'tags this -> float -> unit) =
      fun (x15158 : 'tags this) ->
        fun (x15159 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15158) "y"
            (Ojs.float_to_js x15159)
    let (get_z : 'tags this -> float option) =
      fun (x15161 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15161) "z")
    let (set_z : 'tags this -> float -> unit) =
      fun (x15164 : 'tags this) ->
        fun (x15165 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15164) "z"
            (Ojs.float_to_js x15165)
    let (create : ?w:float -> ?x:float -> ?y:float -> ?z:float -> unit -> t)
      =
      fun ?w:(x15167 : float option) ->
        fun ?x:(x15168 : float option) ->
          fun ?y:(x15169 : float option) ->
            fun ?z:(x15170 : float option) ->
              fun () ->
                let x15171 = Ojs.empty_obj () in
                (match x15167 with
                 | Some x15175 ->
                     Ojs.set_prop_ascii x15171 "w" (Ojs.float_to_js x15175)
                 | None -> ());
                (match x15168 with
                 | Some x15174 ->
                     Ojs.set_prop_ascii x15171 "x" (Ojs.float_to_js x15174)
                 | None -> ());
                (match x15169 with
                 | Some x15173 ->
                     Ojs.set_prop_ascii x15171 "y" (Ojs.float_to_js x15173)
                 | None -> ());
                (match x15170 with
                 | Some x15172 ->
                     Ojs.set_prop_ascii x15171 "z" (Ojs.float_to_js x15172)
                 | None -> ());
                t_of_js x15171
    let cast_from = Obj.magic
  end
module DOMQuadInit =
  struct
    type t = [ `DOMQuadInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15177 : Ojs.t) -> t_of_js x15177
    and t_0_to_js : t_0 -> Ojs.t = fun (x15176 : t) -> t_to_js x15176
    type tags = [ `DOMQuadInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMQuadInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15180 : Ojs.t) -> intf_of_js __tags_of_js x15180
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15178 : __tags intf) -> intf_to_js __tags_to_js x15178
    let (get_p1 : 'tags this -> DOMPointInit.t option) =
      fun (x15182 : 'tags this) ->
        Ojs.option_of_js DOMPointInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15182) "p1")
    let (set_p1 : 'tags this -> DOMPointInit.t -> unit) =
      fun (x15185 : 'tags this) ->
        fun (x15186 : DOMPointInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15185) "p1"
            (DOMPointInit.t_to_js x15186)
    let (get_p2 : 'tags this -> DOMPointInit.t option) =
      fun (x15188 : 'tags this) ->
        Ojs.option_of_js DOMPointInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15188) "p2")
    let (set_p2 : 'tags this -> DOMPointInit.t -> unit) =
      fun (x15191 : 'tags this) ->
        fun (x15192 : DOMPointInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15191) "p2"
            (DOMPointInit.t_to_js x15192)
    let (get_p3 : 'tags this -> DOMPointInit.t option) =
      fun (x15194 : 'tags this) ->
        Ojs.option_of_js DOMPointInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15194) "p3")
    let (set_p3 : 'tags this -> DOMPointInit.t -> unit) =
      fun (x15197 : 'tags this) ->
        fun (x15198 : DOMPointInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15197) "p3"
            (DOMPointInit.t_to_js x15198)
    let (get_p4 : 'tags this -> DOMPointInit.t option) =
      fun (x15200 : 'tags this) ->
        Ojs.option_of_js DOMPointInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15200) "p4")
    let (set_p4 : 'tags this -> DOMPointInit.t -> unit) =
      fun (x15203 : 'tags this) ->
        fun (x15204 : DOMPointInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15203) "p4"
            (DOMPointInit.t_to_js x15204)
    let (create :
      ?p1:DOMPointInit.t ->
        ?p2:DOMPointInit.t ->
          ?p3:DOMPointInit.t -> ?p4:DOMPointInit.t -> unit -> t)
      =
      fun ?p1:(x15206 : DOMPointInit.t option) ->
        fun ?p2:(x15207 : DOMPointInit.t option) ->
          fun ?p3:(x15208 : DOMPointInit.t option) ->
            fun ?p4:(x15209 : DOMPointInit.t option) ->
              fun () ->
                let x15210 = Ojs.empty_obj () in
                (match x15206 with
                 | Some x15214 ->
                     Ojs.set_prop_ascii x15210 "p1"
                       (DOMPointInit.t_to_js x15214)
                 | None -> ());
                (match x15207 with
                 | Some x15213 ->
                     Ojs.set_prop_ascii x15210 "p2"
                       (DOMPointInit.t_to_js x15213)
                 | None -> ());
                (match x15208 with
                 | Some x15212 ->
                     Ojs.set_prop_ascii x15210 "p3"
                       (DOMPointInit.t_to_js x15212)
                 | None -> ());
                (match x15209 with
                 | Some x15211 ->
                     Ojs.set_prop_ascii x15210 "p4"
                       (DOMPointInit.t_to_js x15211)
                 | None -> ());
                t_of_js x15210
    let cast_from = Obj.magic
  end
module DOMMatrixInit =
  struct
    type t = [ `DOMMatrix2DInit  | `DOMMatrixInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15216 : Ojs.t) -> t_of_js x15216
    and t_0_to_js : t_0 -> Ojs.t = fun (x15215 : t) -> t_to_js x15215
    type tags = [ `DOMMatrix2DInit  | `DOMMatrixInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrixInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15219 : Ojs.t) -> intf_of_js __tags_of_js x15219
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15217 : __tags intf) -> intf_to_js __tags_to_js x15217
    let (get_is2D : 'tags this -> bool option) =
      fun (x15221 : 'tags this) ->
        Ojs.option_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15221) "is2D")
    let (set_is2D : 'tags this -> bool -> unit) =
      fun (x15224 : 'tags this) ->
        fun (x15225 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15224) "is2D"
            (Ojs.bool_to_js x15225)
    let (get_m13 : 'tags this -> float option) =
      fun (x15227 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15227) "m13")
    let (set_m13 : 'tags this -> float -> unit) =
      fun (x15230 : 'tags this) ->
        fun (x15231 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15230) "m13"
            (Ojs.float_to_js x15231)
    let (get_m14 : 'tags this -> float option) =
      fun (x15233 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15233) "m14")
    let (set_m14 : 'tags this -> float -> unit) =
      fun (x15236 : 'tags this) ->
        fun (x15237 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15236) "m14"
            (Ojs.float_to_js x15237)
    let (get_m23 : 'tags this -> float option) =
      fun (x15239 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15239) "m23")
    let (set_m23 : 'tags this -> float -> unit) =
      fun (x15242 : 'tags this) ->
        fun (x15243 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15242) "m23"
            (Ojs.float_to_js x15243)
    let (get_m24 : 'tags this -> float option) =
      fun (x15245 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15245) "m24")
    let (set_m24 : 'tags this -> float -> unit) =
      fun (x15248 : 'tags this) ->
        fun (x15249 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15248) "m24"
            (Ojs.float_to_js x15249)
    let (get_m31 : 'tags this -> float option) =
      fun (x15251 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15251) "m31")
    let (set_m31 : 'tags this -> float -> unit) =
      fun (x15254 : 'tags this) ->
        fun (x15255 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15254) "m31"
            (Ojs.float_to_js x15255)
    let (get_m32 : 'tags this -> float option) =
      fun (x15257 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15257) "m32")
    let (set_m32 : 'tags this -> float -> unit) =
      fun (x15260 : 'tags this) ->
        fun (x15261 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15260) "m32"
            (Ojs.float_to_js x15261)
    let (get_m33 : 'tags this -> float option) =
      fun (x15263 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15263) "m33")
    let (set_m33 : 'tags this -> float -> unit) =
      fun (x15266 : 'tags this) ->
        fun (x15267 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15266) "m33"
            (Ojs.float_to_js x15267)
    let (get_m34 : 'tags this -> float option) =
      fun (x15269 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15269) "m34")
    let (set_m34 : 'tags this -> float -> unit) =
      fun (x15272 : 'tags this) ->
        fun (x15273 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15272) "m34"
            (Ojs.float_to_js x15273)
    let (get_m43 : 'tags this -> float option) =
      fun (x15275 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15275) "m43")
    let (set_m43 : 'tags this -> float -> unit) =
      fun (x15278 : 'tags this) ->
        fun (x15279 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15278) "m43"
            (Ojs.float_to_js x15279)
    let (get_m44 : 'tags this -> float option) =
      fun (x15281 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15281) "m44")
    let (set_m44 : 'tags this -> float -> unit) =
      fun (x15284 : 'tags this) ->
        fun (x15285 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15284) "m44"
            (Ojs.float_to_js x15285)
    let (create :
      ?is2D:bool ->
        ?m13:float ->
          ?m14:float ->
            ?m23:float ->
              ?m24:float ->
                ?m31:float ->
                  ?m32:float ->
                    ?m33:float ->
                      ?m34:float -> ?m43:float -> ?m44:float -> unit -> t)
      =
      fun ?is2D:(x15287 : bool option) ->
        fun ?m13:(x15288 : float option) ->
          fun ?m14:(x15289 : float option) ->
            fun ?m23:(x15290 : float option) ->
              fun ?m24:(x15291 : float option) ->
                fun ?m31:(x15292 : float option) ->
                  fun ?m32:(x15293 : float option) ->
                    fun ?m33:(x15294 : float option) ->
                      fun ?m34:(x15295 : float option) ->
                        fun ?m43:(x15296 : float option) ->
                          fun ?m44:(x15297 : float option) ->
                            fun () ->
                              let x15298 = Ojs.empty_obj () in
                              (match x15287 with
                               | Some x15309 ->
                                   Ojs.set_prop_ascii x15298 "is2D"
                                     (Ojs.bool_to_js x15309)
                               | None -> ());
                              (match x15288 with
                               | Some x15308 ->
                                   Ojs.set_prop_ascii x15298 "m13"
                                     (Ojs.float_to_js x15308)
                               | None -> ());
                              (match x15289 with
                               | Some x15307 ->
                                   Ojs.set_prop_ascii x15298 "m14"
                                     (Ojs.float_to_js x15307)
                               | None -> ());
                              (match x15290 with
                               | Some x15306 ->
                                   Ojs.set_prop_ascii x15298 "m23"
                                     (Ojs.float_to_js x15306)
                               | None -> ());
                              (match x15291 with
                               | Some x15305 ->
                                   Ojs.set_prop_ascii x15298 "m24"
                                     (Ojs.float_to_js x15305)
                               | None -> ());
                              (match x15292 with
                               | Some x15304 ->
                                   Ojs.set_prop_ascii x15298 "m31"
                                     (Ojs.float_to_js x15304)
                               | None -> ());
                              (match x15293 with
                               | Some x15303 ->
                                   Ojs.set_prop_ascii x15298 "m32"
                                     (Ojs.float_to_js x15303)
                               | None -> ());
                              (match x15294 with
                               | Some x15302 ->
                                   Ojs.set_prop_ascii x15298 "m33"
                                     (Ojs.float_to_js x15302)
                               | None -> ());
                              (match x15295 with
                               | Some x15301 ->
                                   Ojs.set_prop_ascii x15298 "m34"
                                     (Ojs.float_to_js x15301)
                               | None -> ());
                              (match x15296 with
                               | Some x15300 ->
                                   Ojs.set_prop_ascii x15298 "m43"
                                     (Ojs.float_to_js x15300)
                               | None -> ());
                              (match x15297 with
                               | Some x15299 ->
                                   Ojs.set_prop_ascii x15298 "m44"
                                     (Ojs.float_to_js x15299)
                               | None -> ());
                              t_of_js x15298
    let cast_from = Obj.magic
  end
module rec
  DOMPoint:sig
             type t = [ `DOMPoint  | `DOMPointReadOnly ] intf
             type t_0 = t
             [@@@js.stop ]
             type tags = [ `DOMPoint  | `DOMPointReadOnly ]
             type tags_0 = tags
             [@@@js.start ]
             [@@@js.implem
               type tags = [ `DOMPoint  | `DOMPointReadOnly ]
               type tags_0 = tags]
             type 'tags this = 'tags intf constraint 'tags = [> `DOMPoint ]
             val t_to_js : t -> Ojs.t
             val t_of_js : Ojs.t -> t
             val t_0_to_js : t_0 -> Ojs.t
             val t_0_of_js : Ojs.t -> t_0
             val get_w : 'tags this -> float
             val set_w : 'tags this -> float -> unit
             val get_x : 'tags this -> float
             val set_x : 'tags this -> float -> unit
             val get_y : 'tags this -> float
             val set_y : 'tags this -> float -> unit
             val get_z : 'tags this -> float
             val set_z : 'tags this -> float -> unit
             val create :
               w:float -> x:float -> y:float -> z:float -> unit -> t
             val cast_from : 'tags this -> t
             val prototype : unit -> t
             val create' :
               ?x:float -> ?y:float -> ?z:float -> ?w:float -> unit -> t
             val fromPoint : ?other:DOMPointInit.t -> unit -> t
           end =
  struct
    type t = [ `DOMPoint  | `DOMPointReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15311 : Ojs.t) -> t_of_js x15311
    and t_0_to_js : t_0 -> Ojs.t = fun (x15310 : t) -> t_to_js x15310
    type tags = [ `DOMPoint  | `DOMPointReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMPoint ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15314 : Ojs.t) -> intf_of_js __tags_of_js x15314
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15312 : __tags intf) -> intf_to_js __tags_to_js x15312
    let (get_w : 'tags this -> float) =
      fun (x15316 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15316) "w")
    let (set_w : 'tags this -> float -> unit) =
      fun (x15318 : 'tags this) ->
        fun (x15319 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15318) "w"
            (Ojs.float_to_js x15319)
    let (get_x : 'tags this -> float) =
      fun (x15321 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15321) "x")
    let (set_x : 'tags this -> float -> unit) =
      fun (x15323 : 'tags this) ->
        fun (x15324 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15323) "x"
            (Ojs.float_to_js x15324)
    let (get_y : 'tags this -> float) =
      fun (x15326 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15326) "y")
    let (set_y : 'tags this -> float -> unit) =
      fun (x15328 : 'tags this) ->
        fun (x15329 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15328) "y"
            (Ojs.float_to_js x15329)
    let (get_z : 'tags this -> float) =
      fun (x15331 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15331) "z")
    let (set_z : 'tags this -> float -> unit) =
      fun (x15333 : 'tags this) ->
        fun (x15334 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15333) "z"
            (Ojs.float_to_js x15334)
    let (create : w:float -> x:float -> y:float -> z:float -> unit -> t) =
      fun ~w:(x15336 : float) ->
        fun ~x:(x15337 : float) ->
          fun ~y:(x15338 : float) ->
            fun ~z:(x15339 : float) ->
              fun () ->
                let x15340 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x15340 "w" (Ojs.float_to_js x15336);
                Ojs.set_prop_ascii x15340 "x" (Ojs.float_to_js x15337);
                Ojs.set_prop_ascii x15340 "y" (Ojs.float_to_js x15338);
                Ojs.set_prop_ascii x15340 "z" (Ojs.float_to_js x15339);
                t_of_js x15340
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMPoint")
             "prototype")
    let (create' : ?x:float -> ?y:float -> ?z:float -> ?w:float -> unit -> t)
      =
      fun ?x:(x15341 : float option) ->
        fun ?y:(x15342 : float option) ->
          fun ?z:(x15343 : float option) ->
            fun ?w:(x15344 : float option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMPoint")
                     (let x15345 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x15341 with
                       | Some x15349 ->
                           ignore
                             (Ojs.call x15345 "push"
                                [|(Ojs.float_to_js x15349)|])
                       | None -> ());
                      (match x15342 with
                       | Some x15348 ->
                           ignore
                             (Ojs.call x15345 "push"
                                [|(Ojs.float_to_js x15348)|])
                       | None -> ());
                      (match x15343 with
                       | Some x15347 ->
                           ignore
                             (Ojs.call x15345 "push"
                                [|(Ojs.float_to_js x15347)|])
                       | None -> ());
                      (match x15344 with
                       | Some x15346 ->
                           ignore
                             (Ojs.call x15345 "push"
                                [|(Ojs.float_to_js x15346)|])
                       | None -> ());
                      x15345))
    let (fromPoint : ?other:DOMPointInit.t -> unit -> t) =
      fun ?other:(x15350 : DOMPointInit.t option) ->
        fun () ->
          t_of_js
            (let x15353 = Ojs.get_prop_ascii Ojs.global "DOMPoint" in
             Ojs.call (Ojs.get_prop_ascii x15353 "fromPoint") "apply"
               [|x15353;((let x15351 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x15350 with
                           | Some x15352 ->
                               ignore
                                 (Ojs.call x15351 "push"
                                    [|(DOMPointInit.t_to_js x15352)|])
                           | None -> ());
                          x15351))|])
  end
 and
  DOMPointReadOnly:sig
                     type t = [ `DOMPointReadOnly ] intf
                     type t_0 = t
                     [@@@js.stop ]
                     type tags = [ `DOMPointReadOnly ]
                     type tags_0 = tags
                     [@@@js.start ]
                     [@@@js.implem
                       type tags = [ `DOMPointReadOnly ]
                       type tags_0 = tags]
                     type 'tags this =
                       'tags intf constraint 'tags = [> `DOMPointReadOnly ]
                     val t_to_js : t -> Ojs.t
                     val t_of_js : Ojs.t -> t
                     val t_0_to_js : t_0 -> Ojs.t
                     val t_0_of_js : Ojs.t -> t_0
                     val get_w : 'tags this -> float
                     val get_x : 'tags this -> float
                     val get_y : 'tags this -> float
                     val get_z : 'tags this -> float
                     val matrixTransform :
                       'tags this ->
                         ?matrix:DOMMatrixInit.t -> unit -> DOMPoint.t
                     val toJSON : 'tags this -> any
                     val cast_from : 'tags this -> t
                     val prototype : unit -> t
                     val create :
                       ?x:float ->
                         ?y:float -> ?z:float -> ?w:float -> unit -> t
                     val fromPoint : ?other:DOMPointInit.t -> unit -> t
                   end =
  struct
    type t = [ `DOMPointReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15355 : Ojs.t) -> t_of_js x15355
    and t_0_to_js : t_0 -> Ojs.t = fun (x15354 : t) -> t_to_js x15354
    type tags = [ `DOMPointReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMPointReadOnly ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15358 : Ojs.t) -> intf_of_js __tags_of_js x15358
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15356 : __tags intf) -> intf_to_js __tags_to_js x15356
    let (get_w : 'tags this -> float) =
      fun (x15360 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15360) "w")
    let (get_x : 'tags this -> float) =
      fun (x15362 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15362) "x")
    let (get_y : 'tags this -> float) =
      fun (x15364 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15364) "y")
    let (get_z : 'tags this -> float) =
      fun (x15366 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15366) "z")
    let (matrixTransform :
      'tags this -> ?matrix:DOMMatrixInit.t -> unit -> DOMPoint.t) =
      fun (x15371 : 'tags this) ->
        fun ?matrix:(x15368 : DOMMatrixInit.t option) ->
          fun () ->
            DOMPoint.t_of_js
              (let x15373 = this_to_js Obj.magic x15371 in
               Ojs.call (Ojs.get_prop_ascii x15373 "matrixTransform") "apply"
                 [|x15373;((let x15369 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15368 with
                             | Some x15370 ->
                                 ignore
                                   (Ojs.call x15369 "push"
                                      [|(DOMMatrixInit.t_to_js x15370)|])
                             | None -> ());
                            x15369))|])
    let (toJSON : 'tags this -> any) =
      fun (x15374 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x15374) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "DOMPointReadOnly") "prototype")
    let (create : ?x:float -> ?y:float -> ?z:float -> ?w:float -> unit -> t)
      =
      fun ?x:(x15376 : float option) ->
        fun ?y:(x15377 : float option) ->
          fun ?z:(x15378 : float option) ->
            fun ?w:(x15379 : float option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Ojs.global "DOMPointReadOnly")
                     (let x15380 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x15376 with
                       | Some x15384 ->
                           ignore
                             (Ojs.call x15380 "push"
                                [|(Ojs.float_to_js x15384)|])
                       | None -> ());
                      (match x15377 with
                       | Some x15383 ->
                           ignore
                             (Ojs.call x15380 "push"
                                [|(Ojs.float_to_js x15383)|])
                       | None -> ());
                      (match x15378 with
                       | Some x15382 ->
                           ignore
                             (Ojs.call x15380 "push"
                                [|(Ojs.float_to_js x15382)|])
                       | None -> ());
                      (match x15379 with
                       | Some x15381 ->
                           ignore
                             (Ojs.call x15380 "push"
                                [|(Ojs.float_to_js x15381)|])
                       | None -> ());
                      x15380))
    let (fromPoint : ?other:DOMPointInit.t -> unit -> t) =
      fun ?other:(x15385 : DOMPointInit.t option) ->
        fun () ->
          t_of_js
            (let x15388 = Ojs.get_prop_ascii Ojs.global "DOMPointReadOnly" in
             Ojs.call (Ojs.get_prop_ascii x15388 "fromPoint") "apply"
               [|x15388;((let x15386 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x15385 with
                           | Some x15387 ->
                               ignore
                                 (Ojs.call x15386 "push"
                                    [|(DOMPointInit.t_to_js x15387)|])
                           | None -> ());
                          x15386))|])
  end
module DOMQuad =
  struct
    type t = [ `DOMQuad ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15390 : Ojs.t) -> t_of_js x15390
    and t_0_to_js : t_0 -> Ojs.t = fun (x15389 : t) -> t_to_js x15389
    type tags = [ `DOMQuad ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMQuad ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15393 : Ojs.t) -> intf_of_js __tags_of_js x15393
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15391 : __tags intf) -> intf_to_js __tags_to_js x15391
    let (get_p1 : 'tags this -> DOMPoint.t) =
      fun (x15395 : 'tags this) ->
        DOMPoint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15395) "p1")
    let (get_p2 : 'tags this -> DOMPoint.t) =
      fun (x15397 : 'tags this) ->
        DOMPoint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15397) "p2")
    let (get_p3 : 'tags this -> DOMPoint.t) =
      fun (x15399 : 'tags this) ->
        DOMPoint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15399) "p3")
    let (get_p4 : 'tags this -> DOMPoint.t) =
      fun (x15401 : 'tags this) ->
        DOMPoint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15401) "p4")
    let (getBounds : 'tags this -> DOMRect.t) =
      fun (x15403 : 'tags this) ->
        DOMRect.t_of_js
          (Ojs.call (this_to_js Obj.magic x15403) "getBounds" [||])
    let (toJSON : 'tags this -> any) =
      fun (x15405 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x15405) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMQuad")
             "prototype")
    let (create :
      ?p1:DOMPointInit.t ->
        ?p2:DOMPointInit.t ->
          ?p3:DOMPointInit.t -> ?p4:DOMPointInit.t -> unit -> t)
      =
      fun ?p1:(x15407 : DOMPointInit.t option) ->
        fun ?p2:(x15408 : DOMPointInit.t option) ->
          fun ?p3:(x15409 : DOMPointInit.t option) ->
            fun ?p4:(x15410 : DOMPointInit.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMQuad")
                     (let x15411 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x15407 with
                       | Some x15415 ->
                           ignore
                             (Ojs.call x15411 "push"
                                [|(DOMPointInit.t_to_js x15415)|])
                       | None -> ());
                      (match x15408 with
                       | Some x15414 ->
                           ignore
                             (Ojs.call x15411 "push"
                                [|(DOMPointInit.t_to_js x15414)|])
                       | None -> ());
                      (match x15409 with
                       | Some x15413 ->
                           ignore
                             (Ojs.call x15411 "push"
                                [|(DOMPointInit.t_to_js x15413)|])
                       | None -> ());
                      (match x15410 with
                       | Some x15412 ->
                           ignore
                             (Ojs.call x15411 "push"
                                [|(DOMPointInit.t_to_js x15412)|])
                       | None -> ());
                      x15411))
    let (fromQuad : ?other:DOMQuadInit.t -> unit -> t) =
      fun ?other:(x15416 : DOMQuadInit.t option) ->
        fun () ->
          t_of_js
            (let x15419 = Ojs.get_prop_ascii Ojs.global "DOMQuad" in
             Ojs.call (Ojs.get_prop_ascii x15419 "fromQuad") "apply"
               [|x15419;((let x15417 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x15416 with
                           | Some x15418 ->
                               ignore
                                 (Ojs.call x15417 "push"
                                    [|(DOMQuadInit.t_to_js x15418)|])
                           | None -> ());
                          x15417))|])
    let (fromRect : ?other:DOMRectInit.t -> unit -> t) =
      fun ?other:(x15420 : DOMRectInit.t option) ->
        fun () ->
          t_of_js
            (let x15423 = Ojs.get_prop_ascii Ojs.global "DOMQuad" in
             Ojs.call (Ojs.get_prop_ascii x15423 "fromRect") "apply"
               [|x15423;((let x15421 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x15420 with
                           | Some x15422 ->
                               ignore
                                 (Ojs.call x15421 "push"
                                    [|(DOMRectInit.t_to_js x15422)|])
                           | None -> ());
                          x15421))|])
  end
module rec
  DOMMatrix:sig
              type t = [ `DOMMatrix  | `DOMMatrixReadOnly ] intf
              type t_0 = t
              [@@@js.stop ]
              type tags = [ `DOMMatrix  | `DOMMatrixReadOnly ]
              type tags_0 = tags
              [@@@js.start ]
              [@@@js.implem
                type tags = [ `DOMMatrix  | `DOMMatrixReadOnly ]
                type tags_0 = tags]
              type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrix ]
              val t_to_js : t -> Ojs.t
              val t_of_js : Ojs.t -> t
              val t_0_to_js : t_0 -> Ojs.t
              val t_0_of_js : Ojs.t -> t_0
              val get_a : 'tags this -> float
              val set_a : 'tags this -> float -> unit
              val get_b : 'tags this -> float
              val set_b : 'tags this -> float -> unit
              val get_c : 'tags this -> float
              val set_c : 'tags this -> float -> unit
              val get_d : 'tags this -> float
              val set_d : 'tags this -> float -> unit
              val get_e : 'tags this -> float
              val set_e : 'tags this -> float -> unit
              val get_f : 'tags this -> float
              val set_f : 'tags this -> float -> unit
              val get_m11 : 'tags this -> float
              val set_m11 : 'tags this -> float -> unit
              val get_m12 : 'tags this -> float
              val set_m12 : 'tags this -> float -> unit
              val get_m13 : 'tags this -> float
              val set_m13 : 'tags this -> float -> unit
              val get_m14 : 'tags this -> float
              val set_m14 : 'tags this -> float -> unit
              val get_m21 : 'tags this -> float
              val set_m21 : 'tags this -> float -> unit
              val get_m22 : 'tags this -> float
              val set_m22 : 'tags this -> float -> unit
              val get_m23 : 'tags this -> float
              val set_m23 : 'tags this -> float -> unit
              val get_m24 : 'tags this -> float
              val set_m24 : 'tags this -> float -> unit
              val get_m31 : 'tags this -> float
              val set_m31 : 'tags this -> float -> unit
              val get_m32 : 'tags this -> float
              val set_m32 : 'tags this -> float -> unit
              val get_m33 : 'tags this -> float
              val set_m33 : 'tags this -> float -> unit
              val get_m34 : 'tags this -> float
              val set_m34 : 'tags this -> float -> unit
              val get_m41 : 'tags this -> float
              val set_m41 : 'tags this -> float -> unit
              val get_m42 : 'tags this -> float
              val set_m42 : 'tags this -> float -> unit
              val get_m43 : 'tags this -> float
              val set_m43 : 'tags this -> float -> unit
              val get_m44 : 'tags this -> float
              val set_m44 : 'tags this -> float -> unit
              val invertSelf : 'tags this -> t
              val multiplySelf :
                'tags this -> ?other:DOMMatrixInit.t -> unit -> t
              val preMultiplySelf :
                'tags this -> ?other:DOMMatrixInit.t -> unit -> t
              val rotateAxisAngleSelf :
                'tags this ->
                  ?x:float ->
                    ?y:float -> ?z:float -> ?angle:float -> unit -> t
              val rotateFromVectorSelf :
                'tags this -> ?x:float -> ?y:float -> unit -> t
              val rotateSelf :
                'tags this ->
                  ?rotX:float -> ?rotY:float -> ?rotZ:float -> unit -> t
              val scale3dSelf :
                'tags this ->
                  ?scale:float ->
                    ?originX:float ->
                      ?originY:float -> ?originZ:float -> unit -> t
              val scaleSelf :
                'tags this ->
                  ?scaleX:float ->
                    ?scaleY:float ->
                      ?scaleZ:float ->
                        ?originX:float ->
                          ?originY:float -> ?originZ:float -> unit -> t
              val skewXSelf : 'tags this -> ?sx:float -> unit -> t
              val skewYSelf : 'tags this -> ?sy:float -> unit -> t
              val translateSelf :
                'tags this ->
                  ?tx:float -> ?ty:float -> ?tz:float -> unit -> t
              val cast_from : 'tags this -> t
              val prototype : unit -> t
              val create :
                ?init:[ `U1 of string  | `U2 of float list ] -> unit -> t
              val fromFloat32Array : Float32Array.t_0 -> t
              val fromFloat64Array : Float64Array.t_0 -> t
              val fromMatrix : ?other:DOMMatrixInit.t -> unit -> t
            end =
  struct
    type t = [ `DOMMatrix  | `DOMMatrixReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15425 : Ojs.t) -> t_of_js x15425
    and t_0_to_js : t_0 -> Ojs.t = fun (x15424 : t) -> t_to_js x15424
    type tags = [ `DOMMatrix  | `DOMMatrixReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrix ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15428 : Ojs.t) -> intf_of_js __tags_of_js x15428
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15426 : __tags intf) -> intf_to_js __tags_to_js x15426
    let (get_a : 'tags this -> float) =
      fun (x15430 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15430) "a")
    let (set_a : 'tags this -> float -> unit) =
      fun (x15432 : 'tags this) ->
        fun (x15433 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15432) "a"
            (Ojs.float_to_js x15433)
    let (get_b : 'tags this -> float) =
      fun (x15435 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15435) "b")
    let (set_b : 'tags this -> float -> unit) =
      fun (x15437 : 'tags this) ->
        fun (x15438 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15437) "b"
            (Ojs.float_to_js x15438)
    let (get_c : 'tags this -> float) =
      fun (x15440 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15440) "c")
    let (set_c : 'tags this -> float -> unit) =
      fun (x15442 : 'tags this) ->
        fun (x15443 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15442) "c"
            (Ojs.float_to_js x15443)
    let (get_d : 'tags this -> float) =
      fun (x15445 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15445) "d")
    let (set_d : 'tags this -> float -> unit) =
      fun (x15447 : 'tags this) ->
        fun (x15448 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15447) "d"
            (Ojs.float_to_js x15448)
    let (get_e : 'tags this -> float) =
      fun (x15450 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15450) "e")
    let (set_e : 'tags this -> float -> unit) =
      fun (x15452 : 'tags this) ->
        fun (x15453 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15452) "e"
            (Ojs.float_to_js x15453)
    let (get_f : 'tags this -> float) =
      fun (x15455 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15455) "f")
    let (set_f : 'tags this -> float -> unit) =
      fun (x15457 : 'tags this) ->
        fun (x15458 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15457) "f"
            (Ojs.float_to_js x15458)
    let (get_m11 : 'tags this -> float) =
      fun (x15460 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15460) "m11")
    let (set_m11 : 'tags this -> float -> unit) =
      fun (x15462 : 'tags this) ->
        fun (x15463 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15462) "m11"
            (Ojs.float_to_js x15463)
    let (get_m12 : 'tags this -> float) =
      fun (x15465 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15465) "m12")
    let (set_m12 : 'tags this -> float -> unit) =
      fun (x15467 : 'tags this) ->
        fun (x15468 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15467) "m12"
            (Ojs.float_to_js x15468)
    let (get_m13 : 'tags this -> float) =
      fun (x15470 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15470) "m13")
    let (set_m13 : 'tags this -> float -> unit) =
      fun (x15472 : 'tags this) ->
        fun (x15473 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15472) "m13"
            (Ojs.float_to_js x15473)
    let (get_m14 : 'tags this -> float) =
      fun (x15475 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15475) "m14")
    let (set_m14 : 'tags this -> float -> unit) =
      fun (x15477 : 'tags this) ->
        fun (x15478 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15477) "m14"
            (Ojs.float_to_js x15478)
    let (get_m21 : 'tags this -> float) =
      fun (x15480 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15480) "m21")
    let (set_m21 : 'tags this -> float -> unit) =
      fun (x15482 : 'tags this) ->
        fun (x15483 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15482) "m21"
            (Ojs.float_to_js x15483)
    let (get_m22 : 'tags this -> float) =
      fun (x15485 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15485) "m22")
    let (set_m22 : 'tags this -> float -> unit) =
      fun (x15487 : 'tags this) ->
        fun (x15488 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15487) "m22"
            (Ojs.float_to_js x15488)
    let (get_m23 : 'tags this -> float) =
      fun (x15490 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15490) "m23")
    let (set_m23 : 'tags this -> float -> unit) =
      fun (x15492 : 'tags this) ->
        fun (x15493 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15492) "m23"
            (Ojs.float_to_js x15493)
    let (get_m24 : 'tags this -> float) =
      fun (x15495 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15495) "m24")
    let (set_m24 : 'tags this -> float -> unit) =
      fun (x15497 : 'tags this) ->
        fun (x15498 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15497) "m24"
            (Ojs.float_to_js x15498)
    let (get_m31 : 'tags this -> float) =
      fun (x15500 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15500) "m31")
    let (set_m31 : 'tags this -> float -> unit) =
      fun (x15502 : 'tags this) ->
        fun (x15503 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15502) "m31"
            (Ojs.float_to_js x15503)
    let (get_m32 : 'tags this -> float) =
      fun (x15505 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15505) "m32")
    let (set_m32 : 'tags this -> float -> unit) =
      fun (x15507 : 'tags this) ->
        fun (x15508 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15507) "m32"
            (Ojs.float_to_js x15508)
    let (get_m33 : 'tags this -> float) =
      fun (x15510 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15510) "m33")
    let (set_m33 : 'tags this -> float -> unit) =
      fun (x15512 : 'tags this) ->
        fun (x15513 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15512) "m33"
            (Ojs.float_to_js x15513)
    let (get_m34 : 'tags this -> float) =
      fun (x15515 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15515) "m34")
    let (set_m34 : 'tags this -> float -> unit) =
      fun (x15517 : 'tags this) ->
        fun (x15518 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15517) "m34"
            (Ojs.float_to_js x15518)
    let (get_m41 : 'tags this -> float) =
      fun (x15520 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15520) "m41")
    let (set_m41 : 'tags this -> float -> unit) =
      fun (x15522 : 'tags this) ->
        fun (x15523 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15522) "m41"
            (Ojs.float_to_js x15523)
    let (get_m42 : 'tags this -> float) =
      fun (x15525 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15525) "m42")
    let (set_m42 : 'tags this -> float -> unit) =
      fun (x15527 : 'tags this) ->
        fun (x15528 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15527) "m42"
            (Ojs.float_to_js x15528)
    let (get_m43 : 'tags this -> float) =
      fun (x15530 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15530) "m43")
    let (set_m43 : 'tags this -> float -> unit) =
      fun (x15532 : 'tags this) ->
        fun (x15533 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15532) "m43"
            (Ojs.float_to_js x15533)
    let (get_m44 : 'tags this -> float) =
      fun (x15535 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15535) "m44")
    let (set_m44 : 'tags this -> float -> unit) =
      fun (x15537 : 'tags this) ->
        fun (x15538 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15537) "m44"
            (Ojs.float_to_js x15538)
    let (invertSelf : 'tags this -> t) =
      fun (x15540 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x15540) "invertSelf" [||])
    let (multiplySelf : 'tags this -> ?other:DOMMatrixInit.t -> unit -> t) =
      fun (x15545 : 'tags this) ->
        fun ?other:(x15542 : DOMMatrixInit.t option) ->
          fun () ->
            t_of_js
              (let x15547 = this_to_js Obj.magic x15545 in
               Ojs.call (Ojs.get_prop_ascii x15547 "multiplySelf") "apply"
                 [|x15547;((let x15543 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15542 with
                             | Some x15544 ->
                                 ignore
                                   (Ojs.call x15543 "push"
                                      [|(DOMMatrixInit.t_to_js x15544)|])
                             | None -> ());
                            x15543))|])
    let (preMultiplySelf : 'tags this -> ?other:DOMMatrixInit.t -> unit -> t)
      =
      fun (x15551 : 'tags this) ->
        fun ?other:(x15548 : DOMMatrixInit.t option) ->
          fun () ->
            t_of_js
              (let x15553 = this_to_js Obj.magic x15551 in
               Ojs.call (Ojs.get_prop_ascii x15553 "preMultiplySelf") "apply"
                 [|x15553;((let x15549 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15548 with
                             | Some x15550 ->
                                 ignore
                                   (Ojs.call x15549 "push"
                                      [|(DOMMatrixInit.t_to_js x15550)|])
                             | None -> ());
                            x15549))|])
    let (rotateAxisAngleSelf :
      'tags this ->
        ?x:float -> ?y:float -> ?z:float -> ?angle:float -> unit -> t)
      =
      fun (x15563 : 'tags this) ->
        fun ?x:(x15554 : float option) ->
          fun ?y:(x15555 : float option) ->
            fun ?z:(x15556 : float option) ->
              fun ?angle:(x15557 : float option) ->
                fun () ->
                  t_of_js
                    (let x15565 = this_to_js Obj.magic x15563 in
                     Ojs.call
                       (Ojs.get_prop_ascii x15565 "rotateAxisAngleSelf")
                       "apply"
                       [|x15565;((let x15558 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x15554 with
                                   | Some x15562 ->
                                       ignore
                                         (Ojs.call x15558 "push"
                                            [|(Ojs.float_to_js x15562)|])
                                   | None -> ());
                                  (match x15555 with
                                   | Some x15561 ->
                                       ignore
                                         (Ojs.call x15558 "push"
                                            [|(Ojs.float_to_js x15561)|])
                                   | None -> ());
                                  (match x15556 with
                                   | Some x15560 ->
                                       ignore
                                         (Ojs.call x15558 "push"
                                            [|(Ojs.float_to_js x15560)|])
                                   | None -> ());
                                  (match x15557 with
                                   | Some x15559 ->
                                       ignore
                                         (Ojs.call x15558 "push"
                                            [|(Ojs.float_to_js x15559)|])
                                   | None -> ());
                                  x15558))|])
    let (rotateFromVectorSelf :
      'tags this -> ?x:float -> ?y:float -> unit -> t) =
      fun (x15571 : 'tags this) ->
        fun ?x:(x15566 : float option) ->
          fun ?y:(x15567 : float option) ->
            fun () ->
              t_of_js
                (let x15573 = this_to_js Obj.magic x15571 in
                 Ojs.call (Ojs.get_prop_ascii x15573 "rotateFromVectorSelf")
                   "apply"
                   [|x15573;((let x15568 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x15566 with
                               | Some x15570 ->
                                   ignore
                                     (Ojs.call x15568 "push"
                                        [|(Ojs.float_to_js x15570)|])
                               | None -> ());
                              (match x15567 with
                               | Some x15569 ->
                                   ignore
                                     (Ojs.call x15568 "push"
                                        [|(Ojs.float_to_js x15569)|])
                               | None -> ());
                              x15568))|])
    let (rotateSelf :
      'tags this -> ?rotX:float -> ?rotY:float -> ?rotZ:float -> unit -> t) =
      fun (x15581 : 'tags this) ->
        fun ?rotX:(x15574 : float option) ->
          fun ?rotY:(x15575 : float option) ->
            fun ?rotZ:(x15576 : float option) ->
              fun () ->
                t_of_js
                  (let x15583 = this_to_js Obj.magic x15581 in
                   Ojs.call (Ojs.get_prop_ascii x15583 "rotateSelf") "apply"
                     [|x15583;((let x15577 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x15574 with
                                 | Some x15580 ->
                                     ignore
                                       (Ojs.call x15577 "push"
                                          [|(Ojs.float_to_js x15580)|])
                                 | None -> ());
                                (match x15575 with
                                 | Some x15579 ->
                                     ignore
                                       (Ojs.call x15577 "push"
                                          [|(Ojs.float_to_js x15579)|])
                                 | None -> ());
                                (match x15576 with
                                 | Some x15578 ->
                                     ignore
                                       (Ojs.call x15577 "push"
                                          [|(Ojs.float_to_js x15578)|])
                                 | None -> ());
                                x15577))|])
    let (scale3dSelf :
      'tags this ->
        ?scale:float ->
          ?originX:float -> ?originY:float -> ?originZ:float -> unit -> t)
      =
      fun (x15593 : 'tags this) ->
        fun ?scale:(x15584 : float option) ->
          fun ?originX:(x15585 : float option) ->
            fun ?originY:(x15586 : float option) ->
              fun ?originZ:(x15587 : float option) ->
                fun () ->
                  t_of_js
                    (let x15595 = this_to_js Obj.magic x15593 in
                     Ojs.call (Ojs.get_prop_ascii x15595 "scale3dSelf")
                       "apply"
                       [|x15595;((let x15588 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x15584 with
                                   | Some x15592 ->
                                       ignore
                                         (Ojs.call x15588 "push"
                                            [|(Ojs.float_to_js x15592)|])
                                   | None -> ());
                                  (match x15585 with
                                   | Some x15591 ->
                                       ignore
                                         (Ojs.call x15588 "push"
                                            [|(Ojs.float_to_js x15591)|])
                                   | None -> ());
                                  (match x15586 with
                                   | Some x15590 ->
                                       ignore
                                         (Ojs.call x15588 "push"
                                            [|(Ojs.float_to_js x15590)|])
                                   | None -> ());
                                  (match x15587 with
                                   | Some x15589 ->
                                       ignore
                                         (Ojs.call x15588 "push"
                                            [|(Ojs.float_to_js x15589)|])
                                   | None -> ());
                                  x15588))|])
    let (scaleSelf :
      'tags this ->
        ?scaleX:float ->
          ?scaleY:float ->
            ?scaleZ:float ->
              ?originX:float -> ?originY:float -> ?originZ:float -> unit -> t)
      =
      fun (x15609 : 'tags this) ->
        fun ?scaleX:(x15596 : float option) ->
          fun ?scaleY:(x15597 : float option) ->
            fun ?scaleZ:(x15598 : float option) ->
              fun ?originX:(x15599 : float option) ->
                fun ?originY:(x15600 : float option) ->
                  fun ?originZ:(x15601 : float option) ->
                    fun () ->
                      t_of_js
                        (let x15611 = this_to_js Obj.magic x15609 in
                         Ojs.call (Ojs.get_prop_ascii x15611 "scaleSelf")
                           "apply"
                           [|x15611;((let x15602 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      (match x15596 with
                                       | Some x15608 ->
                                           ignore
                                             (Ojs.call x15602 "push"
                                                [|(Ojs.float_to_js x15608)|])
                                       | None -> ());
                                      (match x15597 with
                                       | Some x15607 ->
                                           ignore
                                             (Ojs.call x15602 "push"
                                                [|(Ojs.float_to_js x15607)|])
                                       | None -> ());
                                      (match x15598 with
                                       | Some x15606 ->
                                           ignore
                                             (Ojs.call x15602 "push"
                                                [|(Ojs.float_to_js x15606)|])
                                       | None -> ());
                                      (match x15599 with
                                       | Some x15605 ->
                                           ignore
                                             (Ojs.call x15602 "push"
                                                [|(Ojs.float_to_js x15605)|])
                                       | None -> ());
                                      (match x15600 with
                                       | Some x15604 ->
                                           ignore
                                             (Ojs.call x15602 "push"
                                                [|(Ojs.float_to_js x15604)|])
                                       | None -> ());
                                      (match x15601 with
                                       | Some x15603 ->
                                           ignore
                                             (Ojs.call x15602 "push"
                                                [|(Ojs.float_to_js x15603)|])
                                       | None -> ());
                                      x15602))|])
    let (skewXSelf : 'tags this -> ?sx:float -> unit -> t) =
      fun (x15615 : 'tags this) ->
        fun ?sx:(x15612 : float option) ->
          fun () ->
            t_of_js
              (let x15617 = this_to_js Obj.magic x15615 in
               Ojs.call (Ojs.get_prop_ascii x15617 "skewXSelf") "apply"
                 [|x15617;((let x15613 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15612 with
                             | Some x15614 ->
                                 ignore
                                   (Ojs.call x15613 "push"
                                      [|(Ojs.float_to_js x15614)|])
                             | None -> ());
                            x15613))|])
    let (skewYSelf : 'tags this -> ?sy:float -> unit -> t) =
      fun (x15621 : 'tags this) ->
        fun ?sy:(x15618 : float option) ->
          fun () ->
            t_of_js
              (let x15623 = this_to_js Obj.magic x15621 in
               Ojs.call (Ojs.get_prop_ascii x15623 "skewYSelf") "apply"
                 [|x15623;((let x15619 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15618 with
                             | Some x15620 ->
                                 ignore
                                   (Ojs.call x15619 "push"
                                      [|(Ojs.float_to_js x15620)|])
                             | None -> ());
                            x15619))|])
    let (translateSelf :
      'tags this -> ?tx:float -> ?ty:float -> ?tz:float -> unit -> t) =
      fun (x15631 : 'tags this) ->
        fun ?tx:(x15624 : float option) ->
          fun ?ty:(x15625 : float option) ->
            fun ?tz:(x15626 : float option) ->
              fun () ->
                t_of_js
                  (let x15633 = this_to_js Obj.magic x15631 in
                   Ojs.call (Ojs.get_prop_ascii x15633 "translateSelf")
                     "apply"
                     [|x15633;((let x15627 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x15624 with
                                 | Some x15630 ->
                                     ignore
                                       (Ojs.call x15627 "push"
                                          [|(Ojs.float_to_js x15630)|])
                                 | None -> ());
                                (match x15625 with
                                 | Some x15629 ->
                                     ignore
                                       (Ojs.call x15627 "push"
                                          [|(Ojs.float_to_js x15629)|])
                                 | None -> ());
                                (match x15626 with
                                 | Some x15628 ->
                                     ignore
                                       (Ojs.call x15627 "push"
                                          [|(Ojs.float_to_js x15628)|])
                                 | None -> ());
                                x15627))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMMatrix")
             "prototype")
    let (create : ?init:[ `U1 of string  | `U2 of float list ] -> unit -> t)
      =
      fun ?init:(x15634 : [ `U1 of string  | `U2 of float list ] option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMMatrix")
               (let x15635 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x15634 with
                 | Some x15636 ->
                     ignore
                       (Ojs.call x15635 "push"
                          [|((match x15636 with
                              | `U1 x15637 -> Ojs.string_to_js x15637
                              | `U2 x15638 ->
                                  Ojs.list_to_js Ojs.float_to_js x15638))|])
                 | None -> ());
                x15635))
    let (fromFloat32Array : Float32Array.t_0 -> t) =
      fun (x15640 : Float32Array.t_0) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "DOMMatrix")
             "fromFloat32Array" [|(Float32Array.t_0_to_js x15640)|])
    let (fromFloat64Array : Float64Array.t_0 -> t) =
      fun (x15641 : Float64Array.t_0) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "DOMMatrix")
             "fromFloat64Array" [|(Float64Array.t_0_to_js x15641)|])
    let (fromMatrix : ?other:DOMMatrixInit.t -> unit -> t) =
      fun ?other:(x15642 : DOMMatrixInit.t option) ->
        fun () ->
          t_of_js
            (let x15645 = Ojs.get_prop_ascii Ojs.global "DOMMatrix" in
             Ojs.call (Ojs.get_prop_ascii x15645 "fromMatrix") "apply"
               [|x15645;((let x15643 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x15642 with
                           | Some x15644 ->
                               ignore
                                 (Ojs.call x15643 "push"
                                    [|(DOMMatrixInit.t_to_js x15644)|])
                           | None -> ());
                          x15643))|])
  end
 and
  DOMMatrixReadOnly:sig
                      type t = [ `DOMMatrixReadOnly ] intf
                      type t_0 = t
                      [@@@js.stop ]
                      type tags = [ `DOMMatrixReadOnly ]
                      type tags_0 = tags
                      [@@@js.start ]
                      [@@@js.implem
                        type tags = [ `DOMMatrixReadOnly ]
                        type tags_0 = tags]
                      type 'tags this =
                        'tags intf constraint 'tags = [> `DOMMatrixReadOnly ]
                      val t_to_js : t -> Ojs.t
                      val t_of_js : Ojs.t -> t
                      val t_0_to_js : t_0 -> Ojs.t
                      val t_0_of_js : Ojs.t -> t_0
                      val get_a : 'tags this -> float
                      val get_b : 'tags this -> float
                      val get_c : 'tags this -> float
                      val get_d : 'tags this -> float
                      val get_e : 'tags this -> float
                      val get_f : 'tags this -> float
                      val get_is2D : 'tags this -> bool
                      val get_isIdentity : 'tags this -> bool
                      val get_m11 : 'tags this -> float
                      val get_m12 : 'tags this -> float
                      val get_m13 : 'tags this -> float
                      val get_m14 : 'tags this -> float
                      val get_m21 : 'tags this -> float
                      val get_m22 : 'tags this -> float
                      val get_m23 : 'tags this -> float
                      val get_m24 : 'tags this -> float
                      val get_m31 : 'tags this -> float
                      val get_m32 : 'tags this -> float
                      val get_m33 : 'tags this -> float
                      val get_m34 : 'tags this -> float
                      val get_m41 : 'tags this -> float
                      val get_m42 : 'tags this -> float
                      val get_m43 : 'tags this -> float
                      val get_m44 : 'tags this -> float
                      val flipX : 'tags this -> DOMMatrix.t
                      val flipY : 'tags this -> DOMMatrix.t
                      val inverse : 'tags this -> DOMMatrix.t
                      val multiply :
                        'tags this ->
                          ?other:DOMMatrixInit.t -> unit -> DOMMatrix.t
                      val rotate :
                        'tags this ->
                          ?rotX:float ->
                            ?rotY:float -> ?rotZ:float -> unit -> DOMMatrix.t
                      val rotateAxisAngle :
                        'tags this ->
                          ?x:float ->
                            ?y:float ->
                              ?z:float -> ?angle:float -> unit -> DOMMatrix.t
                      val rotateFromVector :
                        'tags this ->
                          ?x:float -> ?y:float -> unit -> DOMMatrix.t
                      val scale :
                        'tags this ->
                          ?scaleX:float ->
                            ?scaleY:float ->
                              ?scaleZ:float ->
                                ?originX:float ->
                                  ?originY:float ->
                                    ?originZ:float -> unit -> DOMMatrix.t
                      val scale3d :
                        'tags this ->
                          ?scale:float ->
                            ?originX:float ->
                              ?originY:float ->
                                ?originZ:float -> unit -> DOMMatrix.t
                      val scaleNonUniform :
                        'tags this ->
                          ?scaleX:float ->
                            ?scaleY:float -> unit -> DOMMatrix.t
                      val skewX :
                        'tags this -> ?sx:float -> unit -> DOMMatrix.t
                      val skewY :
                        'tags this -> ?sy:float -> unit -> DOMMatrix.t
                      val toFloat32Array : 'tags this -> Float32Array.t_0
                      val toFloat64Array : 'tags this -> Float64Array.t_0
                      val toJSON : 'tags this -> any
                      val transformPoint :
                        'tags this ->
                          ?point:DOMPointInit.t -> unit -> DOMPoint.t
                      val translate :
                        'tags this ->
                          ?tx:float ->
                            ?ty:float -> ?tz:float -> unit -> DOMMatrix.t
                      val cast_from : 'tags this -> t
                      val prototype : unit -> t
                      val create :
                        ?init:[ `U1 of string  | `U2 of float list ] ->
                          unit -> t
                      val fromFloat32Array : Float32Array.t_0 -> t
                      val fromFloat64Array : Float64Array.t_0 -> t
                      val fromMatrix : ?other:DOMMatrixInit.t -> unit -> t
                    end =
  struct
    type t = [ `DOMMatrixReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15647 : Ojs.t) -> t_of_js x15647
    and t_0_to_js : t_0 -> Ojs.t = fun (x15646 : t) -> t_to_js x15646
    type tags = [ `DOMMatrixReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrixReadOnly ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15650 : Ojs.t) -> intf_of_js __tags_of_js x15650
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15648 : __tags intf) -> intf_to_js __tags_to_js x15648
    let (get_a : 'tags this -> float) =
      fun (x15652 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15652) "a")
    let (get_b : 'tags this -> float) =
      fun (x15654 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15654) "b")
    let (get_c : 'tags this -> float) =
      fun (x15656 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15656) "c")
    let (get_d : 'tags this -> float) =
      fun (x15658 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15658) "d")
    let (get_e : 'tags this -> float) =
      fun (x15660 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15660) "e")
    let (get_f : 'tags this -> float) =
      fun (x15662 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15662) "f")
    let (get_is2D : 'tags this -> bool) =
      fun (x15664 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15664) "is2D")
    let (get_isIdentity : 'tags this -> bool) =
      fun (x15666 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15666) "isIdentity")
    let (get_m11 : 'tags this -> float) =
      fun (x15668 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15668) "m11")
    let (get_m12 : 'tags this -> float) =
      fun (x15670 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15670) "m12")
    let (get_m13 : 'tags this -> float) =
      fun (x15672 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15672) "m13")
    let (get_m14 : 'tags this -> float) =
      fun (x15674 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15674) "m14")
    let (get_m21 : 'tags this -> float) =
      fun (x15676 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15676) "m21")
    let (get_m22 : 'tags this -> float) =
      fun (x15678 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15678) "m22")
    let (get_m23 : 'tags this -> float) =
      fun (x15680 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15680) "m23")
    let (get_m24 : 'tags this -> float) =
      fun (x15682 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15682) "m24")
    let (get_m31 : 'tags this -> float) =
      fun (x15684 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15684) "m31")
    let (get_m32 : 'tags this -> float) =
      fun (x15686 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15686) "m32")
    let (get_m33 : 'tags this -> float) =
      fun (x15688 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15688) "m33")
    let (get_m34 : 'tags this -> float) =
      fun (x15690 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15690) "m34")
    let (get_m41 : 'tags this -> float) =
      fun (x15692 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15692) "m41")
    let (get_m42 : 'tags this -> float) =
      fun (x15694 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15694) "m42")
    let (get_m43 : 'tags this -> float) =
      fun (x15696 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15696) "m43")
    let (get_m44 : 'tags this -> float) =
      fun (x15698 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15698) "m44")
    let (flipX : 'tags this -> DOMMatrix.t) =
      fun (x15700 : 'tags this) ->
        DOMMatrix.t_of_js
          (Ojs.call (this_to_js Obj.magic x15700) "flipX" [||])
    let (flipY : 'tags this -> DOMMatrix.t) =
      fun (x15702 : 'tags this) ->
        DOMMatrix.t_of_js
          (Ojs.call (this_to_js Obj.magic x15702) "flipY" [||])
    let (inverse : 'tags this -> DOMMatrix.t) =
      fun (x15704 : 'tags this) ->
        DOMMatrix.t_of_js
          (Ojs.call (this_to_js Obj.magic x15704) "inverse" [||])
    let (multiply :
      'tags this -> ?other:DOMMatrixInit.t -> unit -> DOMMatrix.t) =
      fun (x15709 : 'tags this) ->
        fun ?other:(x15706 : DOMMatrixInit.t option) ->
          fun () ->
            DOMMatrix.t_of_js
              (let x15711 = this_to_js Obj.magic x15709 in
               Ojs.call (Ojs.get_prop_ascii x15711 "multiply") "apply"
                 [|x15711;((let x15707 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15706 with
                             | Some x15708 ->
                                 ignore
                                   (Ojs.call x15707 "push"
                                      [|(DOMMatrixInit.t_to_js x15708)|])
                             | None -> ());
                            x15707))|])
    let (rotate :
      'tags this ->
        ?rotX:float -> ?rotY:float -> ?rotZ:float -> unit -> DOMMatrix.t)
      =
      fun (x15719 : 'tags this) ->
        fun ?rotX:(x15712 : float option) ->
          fun ?rotY:(x15713 : float option) ->
            fun ?rotZ:(x15714 : float option) ->
              fun () ->
                DOMMatrix.t_of_js
                  (let x15721 = this_to_js Obj.magic x15719 in
                   Ojs.call (Ojs.get_prop_ascii x15721 "rotate") "apply"
                     [|x15721;((let x15715 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x15712 with
                                 | Some x15718 ->
                                     ignore
                                       (Ojs.call x15715 "push"
                                          [|(Ojs.float_to_js x15718)|])
                                 | None -> ());
                                (match x15713 with
                                 | Some x15717 ->
                                     ignore
                                       (Ojs.call x15715 "push"
                                          [|(Ojs.float_to_js x15717)|])
                                 | None -> ());
                                (match x15714 with
                                 | Some x15716 ->
                                     ignore
                                       (Ojs.call x15715 "push"
                                          [|(Ojs.float_to_js x15716)|])
                                 | None -> ());
                                x15715))|])
    let (rotateAxisAngle :
      'tags this ->
        ?x:float ->
          ?y:float -> ?z:float -> ?angle:float -> unit -> DOMMatrix.t)
      =
      fun (x15731 : 'tags this) ->
        fun ?x:(x15722 : float option) ->
          fun ?y:(x15723 : float option) ->
            fun ?z:(x15724 : float option) ->
              fun ?angle:(x15725 : float option) ->
                fun () ->
                  DOMMatrix.t_of_js
                    (let x15733 = this_to_js Obj.magic x15731 in
                     Ojs.call (Ojs.get_prop_ascii x15733 "rotateAxisAngle")
                       "apply"
                       [|x15733;((let x15726 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x15722 with
                                   | Some x15730 ->
                                       ignore
                                         (Ojs.call x15726 "push"
                                            [|(Ojs.float_to_js x15730)|])
                                   | None -> ());
                                  (match x15723 with
                                   | Some x15729 ->
                                       ignore
                                         (Ojs.call x15726 "push"
                                            [|(Ojs.float_to_js x15729)|])
                                   | None -> ());
                                  (match x15724 with
                                   | Some x15728 ->
                                       ignore
                                         (Ojs.call x15726 "push"
                                            [|(Ojs.float_to_js x15728)|])
                                   | None -> ());
                                  (match x15725 with
                                   | Some x15727 ->
                                       ignore
                                         (Ojs.call x15726 "push"
                                            [|(Ojs.float_to_js x15727)|])
                                   | None -> ());
                                  x15726))|])
    let (rotateFromVector :
      'tags this -> ?x:float -> ?y:float -> unit -> DOMMatrix.t) =
      fun (x15739 : 'tags this) ->
        fun ?x:(x15734 : float option) ->
          fun ?y:(x15735 : float option) ->
            fun () ->
              DOMMatrix.t_of_js
                (let x15741 = this_to_js Obj.magic x15739 in
                 Ojs.call (Ojs.get_prop_ascii x15741 "rotateFromVector")
                   "apply"
                   [|x15741;((let x15736 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x15734 with
                               | Some x15738 ->
                                   ignore
                                     (Ojs.call x15736 "push"
                                        [|(Ojs.float_to_js x15738)|])
                               | None -> ());
                              (match x15735 with
                               | Some x15737 ->
                                   ignore
                                     (Ojs.call x15736 "push"
                                        [|(Ojs.float_to_js x15737)|])
                               | None -> ());
                              x15736))|])
    let (scale :
      'tags this ->
        ?scaleX:float ->
          ?scaleY:float ->
            ?scaleZ:float ->
              ?originX:float ->
                ?originY:float -> ?originZ:float -> unit -> DOMMatrix.t)
      =
      fun (x15755 : 'tags this) ->
        fun ?scaleX:(x15742 : float option) ->
          fun ?scaleY:(x15743 : float option) ->
            fun ?scaleZ:(x15744 : float option) ->
              fun ?originX:(x15745 : float option) ->
                fun ?originY:(x15746 : float option) ->
                  fun ?originZ:(x15747 : float option) ->
                    fun () ->
                      DOMMatrix.t_of_js
                        (let x15757 = this_to_js Obj.magic x15755 in
                         Ojs.call (Ojs.get_prop_ascii x15757 "scale") "apply"
                           [|x15757;((let x15748 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      (match x15742 with
                                       | Some x15754 ->
                                           ignore
                                             (Ojs.call x15748 "push"
                                                [|(Ojs.float_to_js x15754)|])
                                       | None -> ());
                                      (match x15743 with
                                       | Some x15753 ->
                                           ignore
                                             (Ojs.call x15748 "push"
                                                [|(Ojs.float_to_js x15753)|])
                                       | None -> ());
                                      (match x15744 with
                                       | Some x15752 ->
                                           ignore
                                             (Ojs.call x15748 "push"
                                                [|(Ojs.float_to_js x15752)|])
                                       | None -> ());
                                      (match x15745 with
                                       | Some x15751 ->
                                           ignore
                                             (Ojs.call x15748 "push"
                                                [|(Ojs.float_to_js x15751)|])
                                       | None -> ());
                                      (match x15746 with
                                       | Some x15750 ->
                                           ignore
                                             (Ojs.call x15748 "push"
                                                [|(Ojs.float_to_js x15750)|])
                                       | None -> ());
                                      (match x15747 with
                                       | Some x15749 ->
                                           ignore
                                             (Ojs.call x15748 "push"
                                                [|(Ojs.float_to_js x15749)|])
                                       | None -> ());
                                      x15748))|])
    let (scale3d :
      'tags this ->
        ?scale:float ->
          ?originX:float ->
            ?originY:float -> ?originZ:float -> unit -> DOMMatrix.t)
      =
      fun (x15767 : 'tags this) ->
        fun ?scale:(x15758 : float option) ->
          fun ?originX:(x15759 : float option) ->
            fun ?originY:(x15760 : float option) ->
              fun ?originZ:(x15761 : float option) ->
                fun () ->
                  DOMMatrix.t_of_js
                    (let x15769 = this_to_js Obj.magic x15767 in
                     Ojs.call (Ojs.get_prop_ascii x15769 "scale3d") "apply"
                       [|x15769;((let x15762 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x15758 with
                                   | Some x15766 ->
                                       ignore
                                         (Ojs.call x15762 "push"
                                            [|(Ojs.float_to_js x15766)|])
                                   | None -> ());
                                  (match x15759 with
                                   | Some x15765 ->
                                       ignore
                                         (Ojs.call x15762 "push"
                                            [|(Ojs.float_to_js x15765)|])
                                   | None -> ());
                                  (match x15760 with
                                   | Some x15764 ->
                                       ignore
                                         (Ojs.call x15762 "push"
                                            [|(Ojs.float_to_js x15764)|])
                                   | None -> ());
                                  (match x15761 with
                                   | Some x15763 ->
                                       ignore
                                         (Ojs.call x15762 "push"
                                            [|(Ojs.float_to_js x15763)|])
                                   | None -> ());
                                  x15762))|])
    let (scaleNonUniform :
      'tags this -> ?scaleX:float -> ?scaleY:float -> unit -> DOMMatrix.t) =
      fun (x15775 : 'tags this) ->
        fun ?scaleX:(x15770 : float option) ->
          fun ?scaleY:(x15771 : float option) ->
            fun () ->
              DOMMatrix.t_of_js
                (let x15777 = this_to_js Obj.magic x15775 in
                 Ojs.call (Ojs.get_prop_ascii x15777 "scaleNonUniform")
                   "apply"
                   [|x15777;((let x15772 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x15770 with
                               | Some x15774 ->
                                   ignore
                                     (Ojs.call x15772 "push"
                                        [|(Ojs.float_to_js x15774)|])
                               | None -> ());
                              (match x15771 with
                               | Some x15773 ->
                                   ignore
                                     (Ojs.call x15772 "push"
                                        [|(Ojs.float_to_js x15773)|])
                               | None -> ());
                              x15772))|])
    let (skewX : 'tags this -> ?sx:float -> unit -> DOMMatrix.t) =
      fun (x15781 : 'tags this) ->
        fun ?sx:(x15778 : float option) ->
          fun () ->
            DOMMatrix.t_of_js
              (let x15783 = this_to_js Obj.magic x15781 in
               Ojs.call (Ojs.get_prop_ascii x15783 "skewX") "apply"
                 [|x15783;((let x15779 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15778 with
                             | Some x15780 ->
                                 ignore
                                   (Ojs.call x15779 "push"
                                      [|(Ojs.float_to_js x15780)|])
                             | None -> ());
                            x15779))|])
    let (skewY : 'tags this -> ?sy:float -> unit -> DOMMatrix.t) =
      fun (x15787 : 'tags this) ->
        fun ?sy:(x15784 : float option) ->
          fun () ->
            DOMMatrix.t_of_js
              (let x15789 = this_to_js Obj.magic x15787 in
               Ojs.call (Ojs.get_prop_ascii x15789 "skewY") "apply"
                 [|x15789;((let x15785 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15784 with
                             | Some x15786 ->
                                 ignore
                                   (Ojs.call x15785 "push"
                                      [|(Ojs.float_to_js x15786)|])
                             | None -> ());
                            x15785))|])
    let (toFloat32Array : 'tags this -> Float32Array.t_0) =
      fun (x15790 : 'tags this) ->
        Float32Array.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x15790) "toFloat32Array" [||])
    let (toFloat64Array : 'tags this -> Float64Array.t_0) =
      fun (x15792 : 'tags this) ->
        Float64Array.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x15792) "toFloat64Array" [||])
    let (toJSON : 'tags this -> any) =
      fun (x15794 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x15794) "toJSON" [||])
    let (transformPoint :
      'tags this -> ?point:DOMPointInit.t -> unit -> DOMPoint.t) =
      fun (x15799 : 'tags this) ->
        fun ?point:(x15796 : DOMPointInit.t option) ->
          fun () ->
            DOMPoint.t_of_js
              (let x15801 = this_to_js Obj.magic x15799 in
               Ojs.call (Ojs.get_prop_ascii x15801 "transformPoint") "apply"
                 [|x15801;((let x15797 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15796 with
                             | Some x15798 ->
                                 ignore
                                   (Ojs.call x15797 "push"
                                      [|(DOMPointInit.t_to_js x15798)|])
                             | None -> ());
                            x15797))|])
    let (translate :
      'tags this ->
        ?tx:float -> ?ty:float -> ?tz:float -> unit -> DOMMatrix.t)
      =
      fun (x15809 : 'tags this) ->
        fun ?tx:(x15802 : float option) ->
          fun ?ty:(x15803 : float option) ->
            fun ?tz:(x15804 : float option) ->
              fun () ->
                DOMMatrix.t_of_js
                  (let x15811 = this_to_js Obj.magic x15809 in
                   Ojs.call (Ojs.get_prop_ascii x15811 "translate") "apply"
                     [|x15811;((let x15805 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x15802 with
                                 | Some x15808 ->
                                     ignore
                                       (Ojs.call x15805 "push"
                                          [|(Ojs.float_to_js x15808)|])
                                 | None -> ());
                                (match x15803 with
                                 | Some x15807 ->
                                     ignore
                                       (Ojs.call x15805 "push"
                                          [|(Ojs.float_to_js x15807)|])
                                 | None -> ());
                                (match x15804 with
                                 | Some x15806 ->
                                     ignore
                                       (Ojs.call x15805 "push"
                                          [|(Ojs.float_to_js x15806)|])
                                 | None -> ());
                                x15805))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly") "prototype")
    let (create : ?init:[ `U1 of string  | `U2 of float list ] -> unit -> t)
      =
      fun ?init:(x15812 : [ `U1 of string  | `U2 of float list ] option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr
               (Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly")
               (let x15813 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x15812 with
                 | Some x15814 ->
                     ignore
                       (Ojs.call x15813 "push"
                          [|((match x15814 with
                              | `U1 x15815 -> Ojs.string_to_js x15815
                              | `U2 x15816 ->
                                  Ojs.list_to_js Ojs.float_to_js x15816))|])
                 | None -> ());
                x15813))
    let (fromFloat32Array : Float32Array.t_0 -> t) =
      fun (x15818 : Float32Array.t_0) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly")
             "fromFloat32Array" [|(Float32Array.t_0_to_js x15818)|])
    let (fromFloat64Array : Float64Array.t_0 -> t) =
      fun (x15819 : Float64Array.t_0) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly")
             "fromFloat64Array" [|(Float64Array.t_0_to_js x15819)|])
    let (fromMatrix : ?other:DOMMatrixInit.t -> unit -> t) =
      fun ?other:(x15820 : DOMMatrixInit.t option) ->
        fun () ->
          t_of_js
            (let x15823 = Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly" in
             Ojs.call (Ojs.get_prop_ascii x15823 "fromMatrix") "apply"
               [|x15823;((let x15821 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x15820 with
                           | Some x15822 ->
                               ignore
                                 (Ojs.call x15821 "push"
                                    [|(DOMMatrixInit.t_to_js x15822)|])
                           | None -> ());
                          x15821))|])
  end
module CustomEventInit =
  struct
    type 'T t = [ `CustomEventInit of 'T  | `EventInit ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x15826 : Ojs.t) -> t_of_js __T_of_js x15826
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x15824 : __T t) -> t_to_js __T_to_js x15824
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x15830 : Ojs.t) -> t_of_js any_of_js x15830
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x15828 : any t) -> t_to_js any_to_js x15828
    type 'T tags = [ `CustomEventInit of 'T  | `EventInit ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `CustomEventInit of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__T_of_js : Ojs.t -> __T) ->
              fun (x15834 : Ojs.t) -> intf_of_js __tags_of_js x15834
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__T_to_js : __T -> Ojs.t) ->
              fun (x15832 : __tags intf) -> intf_to_js __tags_to_js x15832
    let (get_detail : ('tags, 'T) this -> 'T option) =
      fun (x15836 : ('tags, 'T) this) ->
        Ojs.option_of_js Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x15836)
             "detail")
    let (set_detail : ('tags, 'T) this -> 'T -> unit) =
      fun (x15840 : ('tags, 'T) this) ->
        fun (x15841 : 'T) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x15840) "detail"
            (Obj.magic x15841)
    let (create : ?detail:'T -> unit -> 'T t) =
      fun ?detail:(x15844 : 'T option) ->
        fun () ->
          let x15845 = Ojs.empty_obj () in
          (match x15844 with
           | Some x15847 ->
               Ojs.set_prop_ascii x15845 "detail" (Obj.magic x15847)
           | None -> ());
          t_of_js Obj.magic x15845
    let cast_from = Obj.magic
  end
module CustomEvent =
  struct
    type 'T t = [ `CustomEvent of 'T  | `Event ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x15850 : Ojs.t) -> t_of_js __T_of_js x15850
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x15848 : __T t) -> t_to_js __T_to_js x15848
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x15854 : Ojs.t) -> t_of_js any_of_js x15854
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x15852 : any t) -> t_to_js any_to_js x15852
    type 'T tags = [ `CustomEvent of 'T  | `Event ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `CustomEvent of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__T_of_js : Ojs.t -> __T) ->
              fun (x15858 : Ojs.t) -> intf_of_js __tags_of_js x15858
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__T_to_js : __T -> Ojs.t) ->
              fun (x15856 : __tags intf) -> intf_to_js __tags_to_js x15856
    let (get_detail : ('tags, 'T) this -> 'T) =
      fun (x15860 : ('tags, 'T) this) ->
        Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x15860)
             "detail")
    let (initCustomEvent :
      ('tags, 'T) this ->
        type_:string ->
          ?bubbles:bool -> ?cancelable:bool -> ?detail:'T -> unit -> unit)
      =
      fun (x15871 : ('tags, 'T) this) ->
        fun ~type_:(x15863 : string) ->
          fun ?bubbles:(x15864 : bool option) ->
            fun ?cancelable:(x15865 : bool option) ->
              fun ?detail:(x15866 : 'T option) ->
                fun () ->
                  ignore
                    (let x15874 = this_to_js Obj.magic Obj.magic x15871 in
                     Ojs.call (Ojs.get_prop_ascii x15874 "initCustomEvent")
                       "apply"
                       [|x15874;((let x15867 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x15867 "push"
                                       [|(Ojs.string_to_js x15863)|]);
                                  (match x15864 with
                                   | Some x15870 ->
                                       ignore
                                         (Ojs.call x15867 "push"
                                            [|(Ojs.bool_to_js x15870)|])
                                   | None -> ());
                                  (match x15865 with
                                   | Some x15869 ->
                                       ignore
                                         (Ojs.call x15867 "push"
                                            [|(Ojs.bool_to_js x15869)|])
                                   | None -> ());
                                  (match x15866 with
                                   | Some x15868 ->
                                       ignore
                                         (Ojs.call x15867 "push"
                                            [|(Obj.magic x15868)|])
                                   | None -> ());
                                  x15867))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CustomEvent")
             "prototype")
    let (create :
      type_:string -> ?eventInitDict:'T CustomEventInit.t -> unit -> 'T t) =
      fun ~type_:(x15875 : string) ->
        fun ?eventInitDict:(x15876 : 'T CustomEventInit.t option) ->
          fun () ->
            t_of_js Obj.magic
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "CustomEvent")
                 (let x15877 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x15877 "push" [|(Ojs.string_to_js x15875)|]);
                  (match x15876 with
                   | Some x15878 ->
                       ignore
                         (Ojs.call x15877 "push"
                            [|(CustomEventInit.t_to_js Obj.magic x15878)|])
                   | None -> ());
                  x15877))
  end
module QueuingStrategyInit =
  struct
    type t = [ `QueuingStrategyInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15882 : Ojs.t) -> t_of_js x15882
    and t_0_to_js : t_0 -> Ojs.t = fun (x15881 : t) -> t_to_js x15881
    type tags = [ `QueuingStrategyInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `QueuingStrategyInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15885 : Ojs.t) -> intf_of_js __tags_of_js x15885
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15883 : __tags intf) -> intf_to_js __tags_to_js x15883
    let (get_highWaterMark : 'tags this -> float) =
      fun (x15887 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15887) "highWaterMark")
    let (set_highWaterMark : 'tags this -> float -> unit) =
      fun (x15889 : 'tags this) ->
        fun (x15890 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15889) "highWaterMark"
            (Ojs.float_to_js x15890)
    let (create : highWaterMark:float -> unit -> t) =
      fun ~highWaterMark:(x15892 : float) ->
        fun () ->
          let x15893 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x15893 "highWaterMark" (Ojs.float_to_js x15892);
          t_of_js x15893
    let cast_from = Obj.magic
  end
module CountQueuingStrategy =
  struct
    type t = [ `CountQueuingStrategy  | `QueuingStrategy of any ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15895 : Ojs.t) -> t_of_js x15895
    and t_0_to_js : t_0 -> Ojs.t = fun (x15894 : t) -> t_to_js x15894
    type tags = [ `CountQueuingStrategy  | `QueuingStrategy of any ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `CountQueuingStrategy ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15898 : Ojs.t) -> intf_of_js __tags_of_js x15898
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15896 : __tags intf) -> intf_to_js __tags_to_js x15896
    let (get_highWaterMark : 'tags this -> float) =
      fun (x15900 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15900) "highWaterMark")
    let (get_size : 'tags this -> QueuingStrategySize.t_0) =
      fun (x15902 : 'tags this) ->
        QueuingStrategySize.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15902) "size")
    let (create :
      highWaterMark:float -> size:QueuingStrategySize.t_0 -> unit -> t) =
      fun ~highWaterMark:(x15904 : float) ->
        fun ~size:(x15905 : QueuingStrategySize.t_0) ->
          fun () ->
            let x15906 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x15906 "highWaterMark"
              (Ojs.float_to_js x15904);
            Ojs.set_prop_ascii x15906 "size"
              (QueuingStrategySize.t_0_to_js x15905);
            t_of_js x15906
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "CountQueuingStrategy")
             "prototype")
    let (create' : QueuingStrategyInit.t -> t) =
      fun (x15907 : QueuingStrategyInit.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CountQueuingStrategy")
             [|(QueuingStrategyInit.t_to_js x15907)|])
  end
module Console =
  struct
    type t = [ `Console ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15909 : Ojs.t) -> t_of_js x15909
    and t_0_to_js : t_0 -> Ojs.t = fun (x15908 : t) -> t_to_js x15908
    type tags = [ `Console ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Console ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15912 : Ojs.t) -> intf_of_js __tags_of_js x15912
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15910 : __tags intf) -> intf_to_js __tags_to_js x15910
    let (assert_ :
      'tags this -> ?condition:bool -> data:any list -> unit -> unit) =
      fun (x15919 : 'tags this) ->
        fun ?condition:(x15914 : bool option) ->
          fun ~data:(x15915 : any list) ->
            fun () ->
              ignore
                (let x15921 = this_to_js Obj.magic x15919 in
                 Ojs.call (Ojs.get_prop_ascii x15921 "assert") "apply"
                   [|x15921;((let x15916 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x15914 with
                               | Some x15918 ->
                                   ignore
                                     (Ojs.call x15916 "push"
                                        [|(Ojs.bool_to_js x15918)|])
                               | None -> ());
                              List.iter
                                (fun (x15917 : any) ->
                                   ignore
                                     (Ojs.call x15916 "push"
                                        [|(any_to_js x15917)|])) x15915;
                              x15916))|])
    let (clear : 'tags this -> unit) =
      fun (x15922 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x15922) "clear" [||])
    let (count : 'tags this -> ?label:string -> unit -> unit) =
      fun (x15927 : 'tags this) ->
        fun ?label:(x15924 : string option) ->
          fun () ->
            ignore
              (let x15929 = this_to_js Obj.magic x15927 in
               Ojs.call (Ojs.get_prop_ascii x15929 "count") "apply"
                 [|x15929;((let x15925 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15924 with
                             | Some x15926 ->
                                 ignore
                                   (Ojs.call x15925 "push"
                                      [|(Ojs.string_to_js x15926)|])
                             | None -> ());
                            x15925))|])
    let (countReset : 'tags this -> ?label:string -> unit -> unit) =
      fun (x15933 : 'tags this) ->
        fun ?label:(x15930 : string option) ->
          fun () ->
            ignore
              (let x15935 = this_to_js Obj.magic x15933 in
               Ojs.call (Ojs.get_prop_ascii x15935 "countReset") "apply"
                 [|x15935;((let x15931 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15930 with
                             | Some x15932 ->
                                 ignore
                                   (Ojs.call x15931 "push"
                                      [|(Ojs.string_to_js x15932)|])
                             | None -> ());
                            x15931))|])
    let (debug : 'tags this -> data:any list -> unit) =
      fun (x15939 : 'tags this) ->
        fun ~data:(x15936 : any list) ->
          ignore
            (let x15941 = this_to_js Obj.magic x15939 in
             Ojs.call (Ojs.get_prop_ascii x15941 "debug") "apply"
               [|x15941;((let x15937 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x15938 : any) ->
                               ignore
                                 (Ojs.call x15937 "push"
                                    [|(any_to_js x15938)|])) x15936;
                          x15937))|])
    let (dir : 'tags this -> ?item:any -> ?options:any -> unit -> unit) =
      fun (x15947 : 'tags this) ->
        fun ?item:(x15942 : any option) ->
          fun ?options:(x15943 : any option) ->
            fun () ->
              ignore
                (let x15949 = this_to_js Obj.magic x15947 in
                 Ojs.call (Ojs.get_prop_ascii x15949 "dir") "apply"
                   [|x15949;((let x15944 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x15942 with
                               | Some x15946 ->
                                   ignore
                                     (Ojs.call x15944 "push"
                                        [|(any_to_js x15946)|])
                               | None -> ());
                              (match x15943 with
                               | Some x15945 ->
                                   ignore
                                     (Ojs.call x15944 "push"
                                        [|(any_to_js x15945)|])
                               | None -> ());
                              x15944))|])
    let (dirxml : 'tags this -> data:any list -> unit) =
      fun (x15953 : 'tags this) ->
        fun ~data:(x15950 : any list) ->
          ignore
            (let x15955 = this_to_js Obj.magic x15953 in
             Ojs.call (Ojs.get_prop_ascii x15955 "dirxml") "apply"
               [|x15955;((let x15951 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x15952 : any) ->
                               ignore
                                 (Ojs.call x15951 "push"
                                    [|(any_to_js x15952)|])) x15950;
                          x15951))|])
    let (error : 'tags this -> data:any list -> unit) =
      fun (x15959 : 'tags this) ->
        fun ~data:(x15956 : any list) ->
          ignore
            (let x15961 = this_to_js Obj.magic x15959 in
             Ojs.call (Ojs.get_prop_ascii x15961 "error") "apply"
               [|x15961;((let x15957 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x15958 : any) ->
                               ignore
                                 (Ojs.call x15957 "push"
                                    [|(any_to_js x15958)|])) x15956;
                          x15957))|])
    let (group : 'tags this -> data:any list -> unit) =
      fun (x15965 : 'tags this) ->
        fun ~data:(x15962 : any list) ->
          ignore
            (let x15967 = this_to_js Obj.magic x15965 in
             Ojs.call (Ojs.get_prop_ascii x15967 "group") "apply"
               [|x15967;((let x15963 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x15964 : any) ->
                               ignore
                                 (Ojs.call x15963 "push"
                                    [|(any_to_js x15964)|])) x15962;
                          x15963))|])
    let (groupCollapsed : 'tags this -> data:any list -> unit) =
      fun (x15971 : 'tags this) ->
        fun ~data:(x15968 : any list) ->
          ignore
            (let x15973 = this_to_js Obj.magic x15971 in
             Ojs.call (Ojs.get_prop_ascii x15973 "groupCollapsed") "apply"
               [|x15973;((let x15969 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x15970 : any) ->
                               ignore
                                 (Ojs.call x15969 "push"
                                    [|(any_to_js x15970)|])) x15968;
                          x15969))|])
    let (groupEnd : 'tags this -> unit) =
      fun (x15974 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x15974) "groupEnd" [||])
    let (info : 'tags this -> data:any list -> unit) =
      fun (x15979 : 'tags this) ->
        fun ~data:(x15976 : any list) ->
          ignore
            (let x15981 = this_to_js Obj.magic x15979 in
             Ojs.call (Ojs.get_prop_ascii x15981 "info") "apply"
               [|x15981;((let x15977 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x15978 : any) ->
                               ignore
                                 (Ojs.call x15977 "push"
                                    [|(any_to_js x15978)|])) x15976;
                          x15977))|])
    let (log : 'tags this -> data:any list -> unit) =
      fun (x15985 : 'tags this) ->
        fun ~data:(x15982 : any list) ->
          ignore
            (let x15987 = this_to_js Obj.magic x15985 in
             Ojs.call (Ojs.get_prop_ascii x15987 "log") "apply"
               [|x15987;((let x15983 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x15984 : any) ->
                               ignore
                                 (Ojs.call x15983 "push"
                                    [|(any_to_js x15984)|])) x15982;
                          x15983))|])
    let (table :
      'tags this ->
        ?tabularData:any -> ?properties:string list -> unit -> unit)
      =
      fun (x15994 : 'tags this) ->
        fun ?tabularData:(x15988 : any option) ->
          fun ?properties:(x15989 : string list option) ->
            fun () ->
              ignore
                (let x15996 = this_to_js Obj.magic x15994 in
                 Ojs.call (Ojs.get_prop_ascii x15996 "table") "apply"
                   [|x15996;((let x15990 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x15988 with
                               | Some x15993 ->
                                   ignore
                                     (Ojs.call x15990 "push"
                                        [|(any_to_js x15993)|])
                               | None -> ());
                              (match x15989 with
                               | Some x15991 ->
                                   ignore
                                     (Ojs.call x15990 "push"
                                        [|(Ojs.list_to_js Ojs.string_to_js
                                             x15991)|])
                               | None -> ());
                              x15990))|])
    let (time : 'tags this -> ?label:string -> unit -> unit) =
      fun (x16000 : 'tags this) ->
        fun ?label:(x15997 : string option) ->
          fun () ->
            ignore
              (let x16002 = this_to_js Obj.magic x16000 in
               Ojs.call (Ojs.get_prop_ascii x16002 "time") "apply"
                 [|x16002;((let x15998 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15997 with
                             | Some x15999 ->
                                 ignore
                                   (Ojs.call x15998 "push"
                                      [|(Ojs.string_to_js x15999)|])
                             | None -> ());
                            x15998))|])
    let (timeEnd : 'tags this -> ?label:string -> unit -> unit) =
      fun (x16006 : 'tags this) ->
        fun ?label:(x16003 : string option) ->
          fun () ->
            ignore
              (let x16008 = this_to_js Obj.magic x16006 in
               Ojs.call (Ojs.get_prop_ascii x16008 "timeEnd") "apply"
                 [|x16008;((let x16004 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x16003 with
                             | Some x16005 ->
                                 ignore
                                   (Ojs.call x16004 "push"
                                      [|(Ojs.string_to_js x16005)|])
                             | None -> ());
                            x16004))|])
    let (timeLog :
      'tags this -> ?label:string -> data:any list -> unit -> unit) =
      fun (x16014 : 'tags this) ->
        fun ?label:(x16009 : string option) ->
          fun ~data:(x16010 : any list) ->
            fun () ->
              ignore
                (let x16016 = this_to_js Obj.magic x16014 in
                 Ojs.call (Ojs.get_prop_ascii x16016 "timeLog") "apply"
                   [|x16016;((let x16011 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x16009 with
                               | Some x16013 ->
                                   ignore
                                     (Ojs.call x16011 "push"
                                        [|(Ojs.string_to_js x16013)|])
                               | None -> ());
                              List.iter
                                (fun (x16012 : any) ->
                                   ignore
                                     (Ojs.call x16011 "push"
                                        [|(any_to_js x16012)|])) x16010;
                              x16011))|])
    let (timeStamp : 'tags this -> ?label:string -> unit -> unit) =
      fun (x16020 : 'tags this) ->
        fun ?label:(x16017 : string option) ->
          fun () ->
            ignore
              (let x16022 = this_to_js Obj.magic x16020 in
               Ojs.call (Ojs.get_prop_ascii x16022 "timeStamp") "apply"
                 [|x16022;((let x16018 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x16017 with
                             | Some x16019 ->
                                 ignore
                                   (Ojs.call x16018 "push"
                                      [|(Ojs.string_to_js x16019)|])
                             | None -> ());
                            x16018))|])
    let (trace : 'tags this -> data:any list -> unit) =
      fun (x16026 : 'tags this) ->
        fun ~data:(x16023 : any list) ->
          ignore
            (let x16028 = this_to_js Obj.magic x16026 in
             Ojs.call (Ojs.get_prop_ascii x16028 "trace") "apply"
               [|x16028;((let x16024 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x16025 : any) ->
                               ignore
                                 (Ojs.call x16024 "push"
                                    [|(any_to_js x16025)|])) x16023;
                          x16024))|])
    let (warn : 'tags this -> data:any list -> unit) =
      fun (x16032 : 'tags this) ->
        fun ~data:(x16029 : any list) ->
          ignore
            (let x16034 = this_to_js Obj.magic x16032 in
             Ojs.call (Ojs.get_prop_ascii x16034 "warn") "apply"
               [|x16034;((let x16030 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x16031 : any) ->
                               ignore
                                 (Ojs.call x16030 "push"
                                    [|(any_to_js x16031)|])) x16029;
                          x16030))|])
    let cast_from = Obj.magic
  end
module CanvasPattern =
  struct
    type t = [ `CanvasPattern ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x16036 : Ojs.t) -> t_of_js x16036
    and t_0_to_js : t_0 -> Ojs.t = fun (x16035 : t) -> t_to_js x16035
    type tags = [ `CanvasPattern ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CanvasPattern ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x16039 : Ojs.t) -> intf_of_js __tags_of_js x16039
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x16037 : __tags intf) -> intf_to_js __tags_to_js x16037
    let (setTransform :
      'tags this -> ?transform:DOMMatrix2DInit.t -> unit -> unit) =
      fun (x16044 : 'tags this) ->
        fun ?transform:(x16041 : DOMMatrix2DInit.t option) ->
          fun () ->
            ignore
              (let x16046 = this_to_js Obj.magic x16044 in
               Ojs.call (Ojs.get_prop_ascii x16046 "setTransform") "apply"
                 [|x16046;((let x16042 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x16041 with
                             | Some x16043 ->
                                 ignore
                                   (Ojs.call x16042 "push"
                                      [|(DOMMatrix2DInit.t_to_js x16043)|])
                             | None -> ());
                            x16042))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CanvasPattern")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CanvasPattern") [||])
  end
module CanvasGradient =
  struct
    type t = [ `CanvasGradient ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x16048 : Ojs.t) -> t_of_js x16048
    and t_0_to_js : t_0 -> Ojs.t = fun (x16047 : t) -> t_to_js x16047
    type tags = [ `CanvasGradient ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CanvasGradient ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x16051 : Ojs.t) -> intf_of_js __tags_of_js x16051
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x16049 : __tags intf) -> intf_to_js __tags_to_js x16049
    let (addColorStop : 'tags this -> offset:float -> color:string -> unit) =
      fun (x16055 : 'tags this) ->
        fun ~offset:(x16053 : float) ->
          fun ~color:(x16054 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x16055) "addColorStop"
                 [|(Ojs.float_to_js x16053);(Ojs.string_to_js x16054)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "CanvasGradient") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CanvasGradient") [||])
  end
module ByteLengthQueuingStrategy =
  struct
    type t =
      [ `ByteLengthQueuingStrategy 
      | `QueuingStrategy of ArrayBufferView.t_0 ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x16058 : Ojs.t) -> t_of_js x16058
    and t_0_to_js : t_0 -> Ojs.t = fun (x16057 : t) -> t_to_js x16057
    type tags =
      [ `ByteLengthQueuingStrategy 
      | `QueuingStrategy of ArrayBufferView.t_0 ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ByteLengthQueuingStrategy ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x16061 : Ojs.t) -> intf_of_js __tags_of_js x16061
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x16059 : __tags intf) -> intf_to_js __tags_to_js x16059
    let (get_highWaterMark : 'tags this -> float) =
      fun (x16063 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x16063) "highWaterMark")
    let (get_size : 'tags this -> ArrayBufferView.t_0 QueuingStrategySize.t)
      =
      fun (x16065 : 'tags this) ->
        QueuingStrategySize.t_of_js ArrayBufferView.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x16065) "size")
    let (create :
      highWaterMark:float ->
        size:ArrayBufferView.t_0 QueuingStrategySize.t -> unit -> t)
      =
      fun ~highWaterMark:(x16068 : float) ->
        fun ~size:(x16069 : ArrayBufferView.t_0 QueuingStrategySize.t) ->
          fun () ->
            let x16070 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x16070 "highWaterMark"
              (Ojs.float_to_js x16068);
            Ojs.set_prop_ascii x16070 "size"
              (QueuingStrategySize.t_to_js ArrayBufferView.t_0_to_js x16069);
            t_of_js x16070
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ByteLengthQueuingStrategy")
             "prototype")
    let (create' : QueuingStrategyInit.t -> t) =
      fun (x16072 : QueuingStrategyInit.t) ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ByteLengthQueuingStrategy")
             [|(QueuingStrategyInit.t_to_js x16072)|])
  end
module BroadcastChannelEventMap =
  struct
    type t = [ `BroadcastChannelEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x16074 : Ojs.t) -> t_of_js x16074
    and t_0_to_js : t_0 -> Ojs.t = fun (x16073 : t) -> t_to_js x16073
    type tags = [ `BroadcastChannelEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `BroadcastChannelEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x16077 : Ojs.t) -> intf_of_js __tags_of_js x16077
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x16075 : __tags intf) -> intf_to_js __tags_to_js x16075
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x16079 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x16079) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x16081 : 'tags this) ->
        fun (x16082 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x16081) "message"
            (MessageEvent.t_0_to_js x16082)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x16084 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x16084) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x16086 : 'tags this) ->
        fun (x16087 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x16086) "messageerror"
            (MessageEvent.t_0_to_js x16087)
    let (create :
      message:MessageEvent.t_0 -> messageerror:MessageEvent.t_0 -> unit -> t)
      =
      fun ~message:(x16089 : MessageEvent.t_0) ->
        fun ~messageerror:(x16090 : MessageEvent.t_0) ->
          fun () ->
            let x16091 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x16091 "message"
              (MessageEvent.t_0_to_js x16089);
            Ojs.set_prop_ascii x16091 "messageerror"
              (MessageEvent.t_0_to_js x16090);
            t_of_js x16091
    let cast_from = Obj.magic
  end
module BroadcastChannel =
  struct
    type t = [ `BroadcastChannel  | `EventTarget ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x16093 : Ojs.t) -> t_of_js x16093
    and t_0_to_js : t_0 -> Ojs.t = fun (x16092 : t) -> t_to_js x16092
    type tags = [ `BroadcastChannel  | `EventTarget ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `BroadcastChannel ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x16096 : Ojs.t) -> intf_of_js __tags_of_js x16096
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x16094 : __tags intf) -> intf_to_js __tags_to_js x16094
    let (get_name : 'tags this -> string) =
      fun (x16098 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x16098) "name")
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x16100 : 'tags this) ->
        Ojs.option_of_js
          (fun (x16102 : Ojs.t) ->
             fun ~this:(x16103 : t) ->
               fun ~ev:(x16104 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x16102
                      [|(t_to_js x16103);(MessageEvent.t_0_to_js x16104)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x16100) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x16105 : 'tags this) ->
        fun (x16106 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x16105) "onmessage"
            (Ojs.option_to_js
               (fun (x16107 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x16108 : Ojs.t) ->
                       fun (x16109 : Ojs.t) ->
                         any_to_js
                           (x16107 ~this:(t_of_js x16108)
                              ~ev:(MessageEvent.t_0_of_js x16109)))) x16106)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x16111 : 'tags this) ->
        Ojs.option_of_js
          (fun (x16113 : Ojs.t) ->
             fun ~this:(x16114 : t) ->
               fun ~ev:(x16115 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x16113
                      [|(t_to_js x16114);(MessageEvent.t_0_to_js x16115)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x16111) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x16116 : 'tags this) ->
        fun (x16117 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x16116) "onmessageerror"
            (Ojs.option_to_js
               (fun (x16118 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x16119 : Ojs.t) ->
                       fun (x16120 : Ojs.t) ->
                         any_to_js
                           (x16118 ~this:(t_of_js x16119)
                              ~ev:(MessageEvent.t_0_of_js x16120)))) x16117)
    let (close : 'tags this -> unit) =
      fun (x16122 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x16122) "close" [||])
    let (postMessage : 'tags this -> message:any -> unit) =
      fun (x16125 : 'tags this) ->
        fun ~message:(x16124 : any) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x16125) "postMessage"
               [|(any_to_js x16124)|])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x16136 : 'tags this) ->
        fun ~type_:(x16127 : 'K) ->
          fun ~listener:(x16128 : this:t -> ev:any -> any) ->
            fun
              ?options:(x16129 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x16138 = this_to_js Obj.magic x16136 in
                   Ojs.call (Ojs.get_prop_ascii x16138 "addEventListener")
                     "apply"
                     [|x16138;((let x16130 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x16130 "push"
                                     [|(Obj.magic x16127)|]);
                                ignore
                                  (Ojs.call x16130 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x16134 : Ojs.t) ->
                                             fun (x16135 : Ojs.t) ->
                                               any_to_js
                                                 (x16128
                                                    ~this:(t_of_js x16134)
                                                    ~ev:(any_of_js x16135))))|]);
                                (match x16129 with
                                 | Some x16131 ->
                                     ignore
                                       (Ojs.call x16130 "push"
                                          [|((match x16131 with
                                              | `U1 x16132 ->
                                                  Ojs.bool_to_js x16132
                                              | `U2 x16133 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x16133))|])
                                 | None -> ());
                                x16130))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x16146 : 'tags this) ->
        fun ~type_:(x16139 : string) ->
          fun ~listener:(x16140 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x16141 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x16148 = this_to_js Obj.magic x16146 in
                   Ojs.call (Ojs.get_prop_ascii x16148 "addEventListener")
                     "apply"
                     [|x16148;((let x16142 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x16142 "push"
                                     [|(Ojs.string_to_js x16139)|]);
                                ignore
                                  (Ojs.call x16142 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x16140)|]);
                                (match x16141 with
                                 | Some x16143 ->
                                     ignore
                                       (Ojs.call x16142 "push"
                                          [|((match x16143 with
                                              | `U1 x16144 ->
                                                  Ojs.bool_to_js x16144
                                              | `U2 x16145 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x16145))|])
                                 | None -> ());
                                x16142))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x16158 : 'tags this) ->
        fun ~type_:(x16149 : 'K) ->
          fun ~listener:(x16150 : this:t -> ev:any -> any) ->
            fun
              ?options:(x16151 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x16160 = this_to_js Obj.magic x16158 in
                   Ojs.call (Ojs.get_prop_ascii x16160 "removeEventListener")
                     "apply"
                     [|x16160;((let x16152 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x16152 "push"
                                     [|(Obj.magic x16149)|]);
                                ignore
                                  (Ojs.call x16152 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x16156 : Ojs.t) ->
                                             fun (x16157 : Ojs.t) ->
                                               any_to_js
                                                 (x16150
                                                    ~this:(t_of_js x16156)
                                                    ~ev:(any_of_js x16157))))|]);
                                (match x16151 with
                                 | Some x16153 ->
                                     ignore
                                       (Ojs.call x16152 "push"
                                          [|((match x16153 with
                                              | `U1 x16154 ->
                                                  Ojs.bool_to_js x16154
                                              | `U2 x16155 ->
                                                  EventListenerOptions.t_to_js
                                                    x16155))|])
                                 | None -> ());
                                x16152))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x16168 : 'tags this) ->
        fun ~type_:(x16161 : string) ->
          fun ~listener:(x16162 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x16163 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x16170 = this_to_js Obj.magic x16168 in
                   Ojs.call (Ojs.get_prop_ascii x16170 "removeEventListener")
                     "apply"
                     [|x16170;((let x16164 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x16164 "push"
                                     [|(Ojs.string_to_js x16161)|]);
                                ignore
                                  (Ojs.call x16164 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x16162)|]);
                                (match x16163 with
                                 | Some x16165 ->
                                     ignore
                                       (Ojs.call x16164 "push"
                                          [|((match x16165 with
                                              | `U1 x16166 ->
                                                  Ojs.bool_to_js x16166
                                              | `U2 x16167 ->
                                                  EventListenerOptions.t_to_js
                                                    x16167))|])
                                 | None -> ());
                                x16164))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "BroadcastChannel") "prototype")
    let (create : string -> t) =
      fun (x16171 : string) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "BroadcastChannel")
             [|(Ojs.string_to_js x16171)|])
  end
module AbortSignalEventMap =
  struct
    type t = [ `AbortSignalEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x16173 : Ojs.t) -> t_of_js x16173
    and t_0_to_js : t_0 -> Ojs.t = fun (x16172 : t) -> t_to_js x16172
    type tags = [ `AbortSignalEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AbortSignalEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x16176 : Ojs.t) -> intf_of_js __tags_of_js x16176
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x16174 : __tags intf) -> intf_to_js __tags_to_js x16174
    let (get_abort : 'tags this -> Event.t) =
      fun (x16178 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x16178) "abort")
    let (set_abort : 'tags this -> Event.t -> unit) =
      fun (x16180 : 'tags this) ->
        fun (x16181 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x16180) "abort"
            (Event.t_to_js x16181)
    let (create : abort:Event.t -> unit -> t) =
      fun ~abort:(x16183 : Event.t) ->
        fun () ->
          let x16184 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x16184 "abort" (Event.t_to_js x16183);
          t_of_js x16184
    let cast_from = Obj.magic
  end
module AbortController =
  struct
    type t = [ `AbortController ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x16186 : Ojs.t) -> t_of_js x16186
    and t_0_to_js : t_0 -> Ojs.t = fun (x16185 : t) -> t_to_js x16185
    type tags = [ `AbortController ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AbortController ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x16189 : Ojs.t) -> intf_of_js __tags_of_js x16189
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x16187 : __tags intf) -> intf_to_js __tags_to_js x16187
    let (get_signal : 'tags this -> AbortSignal.t) =
      fun (x16191 : 'tags this) ->
        AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x16191) "signal")
    let (abort : 'tags this -> ?reason:any -> unit -> unit) =
      fun (x16196 : 'tags this) ->
        fun ?reason:(x16193 : any option) ->
          fun () ->
            ignore
              (let x16198 = this_to_js Obj.magic x16196 in
               Ojs.call (Ojs.get_prop_ascii x16198 "abort") "apply"
                 [|x16198;((let x16194 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x16193 with
                             | Some x16195 ->
                                 ignore
                                   (Ojs.call x16194 "push"
                                      [|(any_to_js x16195)|])
                             | None -> ());
                            x16194))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "AbortController") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "AbortController") [||])
  end
module MessageEvent_Make(T:Ojs.T) =
  struct
    type 'T parent = 'T MessageEvent.t
    let rec parent_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T parent =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x16201 : Ojs.t) -> MessageEvent.t_of_js __T_of_js x16201
    and parent_to_js : 'T . ('T -> Ojs.t) -> 'T parent -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x16199 : __T MessageEvent.t) ->
            MessageEvent.t_to_js __T_to_js x16199
    type t = T.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16205 : Ojs.t) -> parent_of_js T.t_of_js x16205
    and t_to_js : t -> Ojs.t =
      fun (x16203 : T.t parent) -> parent_to_js T.t_to_js x16203
    let (get_data : t -> T.t) =
      fun (x16207 : t) ->
        T.t_of_js (Ojs.get_prop_ascii (t_to_js x16207) "data")
    let (get_lastEventId : t -> string) =
      fun (x16208 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x16208) "lastEventId")
    let (get_origin : t -> string) =
      fun (x16209 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x16209) "origin")
    let (get_ports : t -> MessagePort.t list) =
      fun (x16210 : t) ->
        Ojs.list_of_js MessagePort.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16210) "ports")
    let (get_source : t -> MessageEventSource.t option) =
      fun (x16212 : t) ->
        Ojs.option_of_js MessageEventSource.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16212) "source")
    let (initMessageEvent :
      t ->
        type_:string ->
          ?bubbles:bool ->
            ?cancelable:bool ->
              ?data:any ->
                ?origin:string ->
                  ?lastEventId:string ->
                    ?source:MessageEventSource.t option ->
                      ?ports:MessagePort.t list -> unit -> unit)
      =
      fun (x16232 : t) ->
        fun ~type_:(x16214 : string) ->
          fun ?bubbles:(x16215 : bool option) ->
            fun ?cancelable:(x16216 : bool option) ->
              fun ?data:(x16217 : any option) ->
                fun ?origin:(x16218 : string option) ->
                  fun ?lastEventId:(x16219 : string option) ->
                    fun ?source:(x16220 : MessageEventSource.t option option)
                      ->
                      fun ?ports:(x16221 : MessagePort.t list option) ->
                        fun () ->
                          ignore
                            (let x16233 = t_to_js x16232 in
                             Ojs.call
                               (Ojs.get_prop_ascii x16233 "initMessageEvent")
                               "apply"
                               [|x16233;((let x16222 =
                                            Ojs.new_obj
                                              (Ojs.get_prop_ascii Ojs.global
                                                 "Array") [||] in
                                          ignore
                                            (Ojs.call x16222 "push"
                                               [|(Ojs.string_to_js x16214)|]);
                                          (match x16215 with
                                           | Some x16231 ->
                                               ignore
                                                 (Ojs.call x16222 "push"
                                                    [|(Ojs.bool_to_js x16231)|])
                                           | None -> ());
                                          (match x16216 with
                                           | Some x16230 ->
                                               ignore
                                                 (Ojs.call x16222 "push"
                                                    [|(Ojs.bool_to_js x16230)|])
                                           | None -> ());
                                          (match x16217 with
                                           | Some x16229 ->
                                               ignore
                                                 (Ojs.call x16222 "push"
                                                    [|(any_to_js x16229)|])
                                           | None -> ());
                                          (match x16218 with
                                           | Some x16228 ->
                                               ignore
                                                 (Ojs.call x16222 "push"
                                                    [|(Ojs.string_to_js
                                                         x16228)|])
                                           | None -> ());
                                          (match x16219 with
                                           | Some x16227 ->
                                               ignore
                                                 (Ojs.call x16222 "push"
                                                    [|(Ojs.string_to_js
                                                         x16227)|])
                                           | None -> ());
                                          (match x16220 with
                                           | Some x16225 ->
                                               ignore
                                                 (Ojs.call x16222 "push"
                                                    [|(Ojs.option_to_js
                                                         MessageEventSource.t_to_js
                                                         x16225)|])
                                           | None -> ());
                                          (match x16221 with
                                           | Some x16223 ->
                                               ignore
                                                 (Ojs.call x16222 "push"
                                                    [|(Ojs.list_to_js
                                                         MessagePort.t_to_js
                                                         x16223)|])
                                           | None -> ());
                                          x16222))|])
    let (initMessageEvent :
      t ->
        type_:string ->
          ?bubbles:bool ->
            ?cancelable:bool ->
              ?data:any ->
                ?origin:string ->
                  ?lastEventId:string ->
                    ?source:MessageEventSource.t option ->
                      ?ports:MessagePort.t Iterable.t_1 -> unit -> unit)
      =
      fun (x16252 : t) ->
        fun ~type_:(x16234 : string) ->
          fun ?bubbles:(x16235 : bool option) ->
            fun ?cancelable:(x16236 : bool option) ->
              fun ?data:(x16237 : any option) ->
                fun ?origin:(x16238 : string option) ->
                  fun ?lastEventId:(x16239 : string option) ->
                    fun ?source:(x16240 : MessageEventSource.t option option)
                      ->
                      fun ?ports:(x16241 : MessagePort.t Iterable.t_1 option)
                        ->
                        fun () ->
                          ignore
                            (let x16253 = t_to_js x16252 in
                             Ojs.call
                               (Ojs.get_prop_ascii x16253 "initMessageEvent")
                               "apply"
                               [|x16253;((let x16242 =
                                            Ojs.new_obj
                                              (Ojs.get_prop_ascii Ojs.global
                                                 "Array") [||] in
                                          ignore
                                            (Ojs.call x16242 "push"
                                               [|(Ojs.string_to_js x16234)|]);
                                          (match x16235 with
                                           | Some x16251 ->
                                               ignore
                                                 (Ojs.call x16242 "push"
                                                    [|(Ojs.bool_to_js x16251)|])
                                           | None -> ());
                                          (match x16236 with
                                           | Some x16250 ->
                                               ignore
                                                 (Ojs.call x16242 "push"
                                                    [|(Ojs.bool_to_js x16250)|])
                                           | None -> ());
                                          (match x16237 with
                                           | Some x16249 ->
                                               ignore
                                                 (Ojs.call x16242 "push"
                                                    [|(any_to_js x16249)|])
                                           | None -> ());
                                          (match x16238 with
                                           | Some x16248 ->
                                               ignore
                                                 (Ojs.call x16242 "push"
                                                    [|(Ojs.string_to_js
                                                         x16248)|])
                                           | None -> ());
                                          (match x16239 with
                                           | Some x16247 ->
                                               ignore
                                                 (Ojs.call x16242 "push"
                                                    [|(Ojs.string_to_js
                                                         x16247)|])
                                           | None -> ());
                                          (match x16240 with
                                           | Some x16245 ->
                                               ignore
                                                 (Ojs.call x16242 "push"
                                                    [|(Ojs.option_to_js
                                                         MessageEventSource.t_to_js
                                                         x16245)|])
                                           | None -> ());
                                          (match x16241 with
                                           | Some x16243 ->
                                               ignore
                                                 (Ojs.call x16242 "push"
                                                    [|(Iterable.t_1_to_js
                                                         MessagePort.t_to_js
                                                         x16243)|])
                                           | None -> ());
                                          x16242))|])
  end
module CustomEventInit_Make(T:Ojs.T) =
  struct
    type 'T parent = 'T CustomEventInit.t
    let rec parent_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T parent =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x16256 : Ojs.t) -> CustomEventInit.t_of_js __T_of_js x16256
    and parent_to_js : 'T . ('T -> Ojs.t) -> 'T parent -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x16254 : __T CustomEventInit.t) ->
            CustomEventInit.t_to_js __T_to_js x16254
    type t = T.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16260 : Ojs.t) -> parent_of_js T.t_of_js x16260
    and t_to_js : t -> Ojs.t =
      fun (x16258 : T.t parent) -> parent_to_js T.t_to_js x16258
    let (get_detail : t -> T.t option) =
      fun (x16262 : t) ->
        Ojs.option_of_js T.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16262) "detail")
    let (set_detail : t -> T.t -> unit) =
      fun (x16264 : t) ->
        fun (x16265 : T.t) ->
          Ojs.set_prop_ascii (t_to_js x16264) "detail" (T.t_to_js x16265)
  end
module MessageEventInit_Make(T:Ojs.T) =
  struct
    type 'T parent = 'T MessageEventInit.t
    let rec parent_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T parent =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x16268 : Ojs.t) -> MessageEventInit.t_of_js __T_of_js x16268
    and parent_to_js : 'T . ('T -> Ojs.t) -> 'T parent -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x16266 : __T MessageEventInit.t) ->
            MessageEventInit.t_to_js __T_to_js x16266
    type t = T.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16272 : Ojs.t) -> parent_of_js T.t_of_js x16272
    and t_to_js : t -> Ojs.t =
      fun (x16270 : T.t parent) -> parent_to_js T.t_to_js x16270
    let (get_data : t -> T.t option) =
      fun (x16274 : t) ->
        Ojs.option_of_js T.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16274) "data")
    let (set_data : t -> T.t -> unit) =
      fun (x16276 : t) ->
        fun (x16277 : T.t) ->
          Ojs.set_prop_ascii (t_to_js x16276) "data" (T.t_to_js x16277)
    let (get_lastEventId : t -> string option) =
      fun (x16278 : t) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js x16278) "lastEventId")
    let (set_lastEventId : t -> string -> unit) =
      fun (x16280 : t) ->
        fun (x16281 : string) ->
          Ojs.set_prop_ascii (t_to_js x16280) "lastEventId"
            (Ojs.string_to_js x16281)
    let (get_origin : t -> string option) =
      fun (x16282 : t) ->
        Ojs.option_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js x16282) "origin")
    let (set_origin : t -> string -> unit) =
      fun (x16284 : t) ->
        fun (x16285 : string) ->
          Ojs.set_prop_ascii (t_to_js x16284) "origin"
            (Ojs.string_to_js x16285)
    let (get_ports : t -> MessagePort.t list option) =
      fun (x16286 : t) ->
        Ojs.option_of_js
          (fun (x16287 : Ojs.t) -> Ojs.list_of_js MessagePort.t_of_js x16287)
          (Ojs.get_prop_ascii (t_to_js x16286) "ports")
    let (set_ports : t -> MessagePort.t list -> unit) =
      fun (x16289 : t) ->
        fun (x16290 : MessagePort.t list) ->
          Ojs.set_prop_ascii (t_to_js x16289) "ports"
            (Ojs.list_to_js MessagePort.t_to_js x16290)
    let (get_source : t -> MessageEventSource.t option) =
      fun (x16292 : t) ->
        Ojs.option_of_js MessageEventSource.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16292) "source")
    let (set_source : t -> MessageEventSource.t option -> unit) =
      fun (x16294 : t) ->
        fun (x16295 : MessageEventSource.t option) ->
          Ojs.set_prop_ascii (t_to_js x16294) "source"
            (Ojs.option_to_js MessageEventSource.t_to_js x16295)
  end
module QueuingStrategy_Make(T:Ojs.T) =
  struct
    type 'T parent = 'T QueuingStrategy.t
    let rec parent_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T parent =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x16299 : Ojs.t) -> QueuingStrategy.t_of_js __T_of_js x16299
    and parent_to_js : 'T . ('T -> Ojs.t) -> 'T parent -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x16297 : __T QueuingStrategy.t) ->
            QueuingStrategy.t_to_js __T_to_js x16297
    type t = T.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16303 : Ojs.t) -> parent_of_js T.t_of_js x16303
    and t_to_js : t -> Ojs.t =
      fun (x16301 : T.t parent) -> parent_to_js T.t_to_js x16301
    let (get_highWaterMark : t -> float option) =
      fun (x16305 : t) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x16305) "highWaterMark")
    let (set_highWaterMark : t -> float -> unit) =
      fun (x16307 : t) ->
        fun (x16308 : float) ->
          Ojs.set_prop_ascii (t_to_js x16307) "highWaterMark"
            (Ojs.float_to_js x16308)
    let (get_size : t -> T.t QueuingStrategySize.t option) =
      fun (x16309 : t) ->
        Ojs.option_of_js
          (fun (x16310 : Ojs.t) ->
             QueuingStrategySize.t_of_js T.t_of_js x16310)
          (Ojs.get_prop_ascii (t_to_js x16309) "size")
    let (set_size : t -> T.t QueuingStrategySize.t -> unit) =
      fun (x16312 : t) ->
        fun (x16313 : T.t QueuingStrategySize.t) ->
          Ojs.set_prop_ascii (t_to_js x16312) "size"
            (QueuingStrategySize.t_to_js T.t_to_js x16313)
  end
module ReadableStreamDefaultReadValueResult_Make(T:Ojs.T) =
  struct
    type 'T parent = 'T ReadableStreamDefaultReadValueResult.t
    let rec parent_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T parent =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x16317 : Ojs.t) ->
            ReadableStreamDefaultReadValueResult.t_of_js __T_of_js x16317
    and parent_to_js : 'T . ('T -> Ojs.t) -> 'T parent -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x16315 : __T ReadableStreamDefaultReadValueResult.t) ->
            ReadableStreamDefaultReadValueResult.t_to_js __T_to_js x16315
    type t = T.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16321 : Ojs.t) -> parent_of_js T.t_of_js x16321
    and t_to_js : t -> Ojs.t =
      fun (x16319 : T.t parent) -> parent_to_js T.t_to_js x16319
    let (get_done : t -> [ `L_b_false ]) =
      fun (x16323 : t) ->
        let x16324 = Ojs.get_prop_ascii (t_to_js x16323) "done" in
        match Ojs.bool_of_js x16324 with
        | false -> `L_b_false
        | _ -> assert false
    let (set_done : t -> [ `L_b_false ] -> unit) =
      fun (x16325 : t) ->
        fun (x16326 : [ `L_b_false ]) ->
          Ojs.set_prop_ascii (t_to_js x16325) "done"
            (match x16326 with | `L_b_false -> Ojs.bool_to_js false)
    let (get_value : t -> T.t) =
      fun (x16327 : t) ->
        T.t_of_js (Ojs.get_prop_ascii (t_to_js x16327) "value")
    let (set_value : t -> T.t -> unit) =
      fun (x16328 : t) ->
        fun (x16329 : T.t) ->
          Ojs.set_prop_ascii (t_to_js x16328) "value" (T.t_to_js x16329)
  end
module ReadableWritablePair_Make(R:Ojs.T)(W:Ojs.T) =
  struct
    type ('R, 'W) parent = ('R, 'W) ReadableWritablePair.t
    let rec parent_of_js :
      'R 'W . (Ojs.t -> 'R) -> (Ojs.t -> 'W) -> Ojs.t -> ('R, 'W) parent =
      fun (type __R) ->
        fun (type __W) ->
          fun (__R_of_js : Ojs.t -> __R) ->
            fun (__W_of_js : Ojs.t -> __W) ->
              fun (x16333 : Ojs.t) ->
                ReadableWritablePair.t_of_js __R_of_js __W_of_js x16333
    and parent_to_js :
      'R 'W . ('R -> Ojs.t) -> ('W -> Ojs.t) -> ('R, 'W) parent -> Ojs.t =
      fun (type __R) ->
        fun (type __W) ->
          fun (__R_to_js : __R -> Ojs.t) ->
            fun (__W_to_js : __W -> Ojs.t) ->
              fun (x16330 : (__R, __W) ReadableWritablePair.t) ->
                ReadableWritablePair.t_to_js __R_to_js __W_to_js x16330
    type t = (R.t, W.t) parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16339 : Ojs.t) -> parent_of_js R.t_of_js W.t_of_js x16339
    and t_to_js : t -> Ojs.t =
      fun (x16336 : (R.t, W.t) parent) ->
        parent_to_js R.t_to_js W.t_to_js x16336
    let (get_readable : t -> R.t ReadableStream.t) =
      fun (x16342 : t) ->
        ReadableStream.t_of_js R.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16342) "readable")
    let (set_readable : t -> R.t ReadableStream.t -> unit) =
      fun (x16344 : t) ->
        fun (x16345 : R.t ReadableStream.t) ->
          Ojs.set_prop_ascii (t_to_js x16344) "readable"
            (ReadableStream.t_to_js R.t_to_js x16345)
    let (get_writable : t -> W.t WritableStream.t) =
      fun (x16347 : t) ->
        WritableStream.t_of_js W.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16347) "writable")
    let (set_writable : t -> W.t WritableStream.t -> unit) =
      fun (x16349 : t) ->
        fun (x16350 : W.t WritableStream.t) ->
          Ojs.set_prop_ascii (t_to_js x16349) "writable"
            (WritableStream.t_to_js W.t_to_js x16350)
  end
module Transformer_Make(I:Ojs.T)(O:Ojs.T) =
  struct
    type ('I, 'O) parent = ('I, 'O) Transformer.t
    let rec parent_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) parent =
      fun (type __I) ->
        fun (type __O) ->
          fun (__I_of_js : Ojs.t -> __I) ->
            fun (__O_of_js : Ojs.t -> __O) ->
              fun (x16355 : Ojs.t) ->
                Transformer.t_of_js __I_of_js __O_of_js x16355
    and parent_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) parent -> Ojs.t =
      fun (type __I) ->
        fun (type __O) ->
          fun (__I_to_js : __I -> Ojs.t) ->
            fun (__O_to_js : __O -> Ojs.t) ->
              fun (x16352 : (__I, __O) Transformer.t) ->
                Transformer.t_to_js __I_to_js __O_to_js x16352
    type t = (I.t, O.t) parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16361 : Ojs.t) -> parent_of_js I.t_of_js O.t_of_js x16361
    and t_to_js : t -> Ojs.t =
      fun (x16358 : (I.t, O.t) parent) ->
        parent_to_js I.t_to_js O.t_to_js x16358
    let (get_flush : t -> O.t TransformerFlushCallback.t option) =
      fun (x16364 : t) ->
        Ojs.option_of_js
          (fun (x16365 : Ojs.t) ->
             TransformerFlushCallback.t_of_js O.t_of_js x16365)
          (Ojs.get_prop_ascii (t_to_js x16364) "flush")
    let (set_flush : t -> O.t TransformerFlushCallback.t -> unit) =
      fun (x16367 : t) ->
        fun (x16368 : O.t TransformerFlushCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x16367) "flush"
            (TransformerFlushCallback.t_to_js O.t_to_js x16368)
    let (get_readableType : t -> undefined) =
      fun (x16370 : t) ->
        undefined_of_js (Ojs.get_prop_ascii (t_to_js x16370) "readableType")
    let (set_readableType : t -> undefined -> unit) =
      fun (x16371 : t) ->
        fun (x16372 : undefined) ->
          Ojs.set_prop_ascii (t_to_js x16371) "readableType"
            (undefined_to_js x16372)
    let (get_start : t -> O.t TransformerStartCallback.t option) =
      fun (x16373 : t) ->
        Ojs.option_of_js
          (fun (x16374 : Ojs.t) ->
             TransformerStartCallback.t_of_js O.t_of_js x16374)
          (Ojs.get_prop_ascii (t_to_js x16373) "start")
    let (set_start : t -> O.t TransformerStartCallback.t -> unit) =
      fun (x16376 : t) ->
        fun (x16377 : O.t TransformerStartCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x16376) "start"
            (TransformerStartCallback.t_to_js O.t_to_js x16377)
    let (get_transform :
      t -> (I.t, O.t) TransformerTransformCallback.t option) =
      fun (x16379 : t) ->
        Ojs.option_of_js
          (fun (x16380 : Ojs.t) ->
             TransformerTransformCallback.t_of_js I.t_of_js O.t_of_js x16380)
          (Ojs.get_prop_ascii (t_to_js x16379) "transform")
    let (set_transform :
      t -> (I.t, O.t) TransformerTransformCallback.t -> unit) =
      fun (x16383 : t) ->
        fun (x16384 : (I.t, O.t) TransformerTransformCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x16383) "transform"
            (TransformerTransformCallback.t_to_js I.t_to_js O.t_to_js x16384)
    let (get_writableType : t -> undefined) =
      fun (x16387 : t) ->
        undefined_of_js (Ojs.get_prop_ascii (t_to_js x16387) "writableType")
    let (set_writableType : t -> undefined -> unit) =
      fun (x16388 : t) ->
        fun (x16389 : undefined) ->
          Ojs.set_prop_ascii (t_to_js x16388) "writableType"
            (undefined_to_js x16389)
  end
module UnderlyingSink_Make(W:Ojs.T) =
  struct
    type 'W parent = 'W UnderlyingSink.t
    let rec parent_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W parent =
      fun (type __W) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x16392 : Ojs.t) -> UnderlyingSink.t_of_js __W_of_js x16392
    and parent_to_js : 'W . ('W -> Ojs.t) -> 'W parent -> Ojs.t =
      fun (type __W) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x16390 : __W UnderlyingSink.t) ->
            UnderlyingSink.t_to_js __W_to_js x16390
    type t = W.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16396 : Ojs.t) -> parent_of_js W.t_of_js x16396
    and t_to_js : t -> Ojs.t =
      fun (x16394 : W.t parent) -> parent_to_js W.t_to_js x16394
    let (get_abort : t -> UnderlyingSinkAbortCallback.t option) =
      fun (x16398 : t) ->
        Ojs.option_of_js UnderlyingSinkAbortCallback.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16398) "abort")
    let (set_abort : t -> UnderlyingSinkAbortCallback.t -> unit) =
      fun (x16400 : t) ->
        fun (x16401 : UnderlyingSinkAbortCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x16400) "abort"
            (UnderlyingSinkAbortCallback.t_to_js x16401)
    let (get_close : t -> UnderlyingSinkCloseCallback.t option) =
      fun (x16402 : t) ->
        Ojs.option_of_js UnderlyingSinkCloseCallback.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16402) "close")
    let (set_close : t -> UnderlyingSinkCloseCallback.t -> unit) =
      fun (x16404 : t) ->
        fun (x16405 : UnderlyingSinkCloseCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x16404) "close"
            (UnderlyingSinkCloseCallback.t_to_js x16405)
    let (get_start : t -> UnderlyingSinkStartCallback.t option) =
      fun (x16406 : t) ->
        Ojs.option_of_js UnderlyingSinkStartCallback.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16406) "start")
    let (set_start : t -> UnderlyingSinkStartCallback.t -> unit) =
      fun (x16408 : t) ->
        fun (x16409 : UnderlyingSinkStartCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x16408) "start"
            (UnderlyingSinkStartCallback.t_to_js x16409)
    let (get_type : t -> undefined) =
      fun (x16410 : t) ->
        undefined_of_js (Ojs.get_prop_ascii (t_to_js x16410) "type")
    let (set_type : t -> undefined -> unit) =
      fun (x16411 : t) ->
        fun (x16412 : undefined) ->
          Ojs.set_prop_ascii (t_to_js x16411) "type" (undefined_to_js x16412)
    let (get_write : t -> W.t UnderlyingSinkWriteCallback.t option) =
      fun (x16413 : t) ->
        Ojs.option_of_js
          (fun (x16414 : Ojs.t) ->
             UnderlyingSinkWriteCallback.t_of_js W.t_of_js x16414)
          (Ojs.get_prop_ascii (t_to_js x16413) "write")
    let (set_write : t -> W.t UnderlyingSinkWriteCallback.t -> unit) =
      fun (x16416 : t) ->
        fun (x16417 : W.t UnderlyingSinkWriteCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x16416) "write"
            (UnderlyingSinkWriteCallback.t_to_js W.t_to_js x16417)
  end
module UnderlyingSource_Make(R:Ojs.T) =
  struct
    type 'R parent = 'R UnderlyingSource.t
    let rec parent_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R parent =
      fun (type __R) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x16421 : Ojs.t) -> UnderlyingSource.t_of_js __R_of_js x16421
    and parent_to_js : 'R . ('R -> Ojs.t) -> 'R parent -> Ojs.t =
      fun (type __R) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x16419 : __R UnderlyingSource.t) ->
            UnderlyingSource.t_to_js __R_to_js x16419
    type t = R.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16425 : Ojs.t) -> parent_of_js R.t_of_js x16425
    and t_to_js : t -> Ojs.t =
      fun (x16423 : R.t parent) -> parent_to_js R.t_to_js x16423
    let (get_cancel : t -> UnderlyingSourceCancelCallback.t option) =
      fun (x16427 : t) ->
        Ojs.option_of_js UnderlyingSourceCancelCallback.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16427) "cancel")
    let (set_cancel : t -> UnderlyingSourceCancelCallback.t -> unit) =
      fun (x16429 : t) ->
        fun (x16430 : UnderlyingSourceCancelCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x16429) "cancel"
            (UnderlyingSourceCancelCallback.t_to_js x16430)
    let (get_pull : t -> R.t UnderlyingSourcePullCallback.t option) =
      fun (x16431 : t) ->
        Ojs.option_of_js
          (fun (x16432 : Ojs.t) ->
             UnderlyingSourcePullCallback.t_of_js R.t_of_js x16432)
          (Ojs.get_prop_ascii (t_to_js x16431) "pull")
    let (set_pull : t -> R.t UnderlyingSourcePullCallback.t -> unit) =
      fun (x16434 : t) ->
        fun (x16435 : R.t UnderlyingSourcePullCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x16434) "pull"
            (UnderlyingSourcePullCallback.t_to_js R.t_to_js x16435)
    let (get_start : t -> R.t UnderlyingSourceStartCallback.t option) =
      fun (x16437 : t) ->
        Ojs.option_of_js
          (fun (x16438 : Ojs.t) ->
             UnderlyingSourceStartCallback.t_of_js R.t_of_js x16438)
          (Ojs.get_prop_ascii (t_to_js x16437) "start")
    let (set_start : t -> R.t UnderlyingSourceStartCallback.t -> unit) =
      fun (x16440 : t) ->
        fun (x16441 : R.t UnderlyingSourceStartCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x16440) "start"
            (UnderlyingSourceStartCallback.t_to_js R.t_to_js x16441)
    let (get_type : t -> undefined) =
      fun (x16443 : t) ->
        undefined_of_js (Ojs.get_prop_ascii (t_to_js x16443) "type")
    let (set_type : t -> undefined -> unit) =
      fun (x16444 : t) ->
        fun (x16445 : undefined) ->
          Ojs.set_prop_ascii (t_to_js x16444) "type" (undefined_to_js x16445)
  end
module CustomEvent_Make(T:Ojs.T) =
  struct
    type 'T parent = 'T CustomEvent.t
    let rec parent_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T parent =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x16448 : Ojs.t) -> CustomEvent.t_of_js __T_of_js x16448
    and parent_to_js : 'T . ('T -> Ojs.t) -> 'T parent -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x16446 : __T CustomEvent.t) ->
            CustomEvent.t_to_js __T_to_js x16446
    type t = T.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16452 : Ojs.t) -> parent_of_js T.t_of_js x16452
    and t_to_js : t -> Ojs.t =
      fun (x16450 : T.t parent) -> parent_to_js T.t_to_js x16450
    let (get_detail : t -> T.t) =
      fun (x16454 : t) ->
        T.t_of_js (Ojs.get_prop_ascii (t_to_js x16454) "detail")
    let (initCustomEvent :
      t ->
        type_:string ->
          ?bubbles:bool -> ?cancelable:bool -> ?detail:T.t -> unit -> unit)
      =
      fun (x16463 : t) ->
        fun ~type_:(x16455 : string) ->
          fun ?bubbles:(x16456 : bool option) ->
            fun ?cancelable:(x16457 : bool option) ->
              fun ?detail:(x16458 : T.t option) ->
                fun () ->
                  ignore
                    (let x16464 = t_to_js x16463 in
                     Ojs.call (Ojs.get_prop_ascii x16464 "initCustomEvent")
                       "apply"
                       [|x16464;((let x16459 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x16459 "push"
                                       [|(Ojs.string_to_js x16455)|]);
                                  (match x16456 with
                                   | Some x16462 ->
                                       ignore
                                         (Ojs.call x16459 "push"
                                            [|(Ojs.bool_to_js x16462)|])
                                   | None -> ());
                                  (match x16457 with
                                   | Some x16461 ->
                                       ignore
                                         (Ojs.call x16459 "push"
                                            [|(Ojs.bool_to_js x16461)|])
                                   | None -> ());
                                  (match x16458 with
                                   | Some x16460 ->
                                       ignore
                                         (Ojs.call x16459 "push"
                                            [|(T.t_to_js x16460)|])
                                   | None -> ());
                                  x16459))|])
  end
module IDBRequest_Make(T:Ojs.T) =
  struct
    type 'T parent = 'T IDBRequest.t
    let rec parent_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T parent =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x16467 : Ojs.t) -> IDBRequest.t_of_js __T_of_js x16467
    and parent_to_js : 'T . ('T -> Ojs.t) -> 'T parent -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x16465 : __T IDBRequest.t) ->
            IDBRequest.t_to_js __T_to_js x16465
    type t = T.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16471 : Ojs.t) -> parent_of_js T.t_of_js x16471
    and t_to_js : t -> Ojs.t =
      fun (x16469 : T.t parent) -> parent_to_js T.t_to_js x16469
    let (get_error : t -> DOMException.t option) =
      fun (x16473 : t) ->
        Ojs.option_of_js DOMException.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16473) "error")
    let (get_onerror : t -> (this:t -> ev:Event.t -> any) option) =
      fun (x16475 : t) ->
        Ojs.option_of_js
          (fun (x16476 : Ojs.t) ->
             fun ~this:(x16477 : t) ->
               fun ~ev:(x16478 : Event.t) ->
                 any_of_js
                   (Ojs.apply x16476
                      [|(t_to_js x16477);(Event.t_to_js x16478)|]))
          (Ojs.get_prop_ascii (t_to_js x16475) "onerror")
    let (set_onerror : t -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x16479 : t) ->
        fun (x16480 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (t_to_js x16479) "onerror"
            (Ojs.option_to_js
               (fun (x16481 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x16482 : Ojs.t) ->
                       fun (x16483 : Ojs.t) ->
                         any_to_js
                           (x16481 ~this:(t_of_js x16482)
                              ~ev:(Event.t_of_js x16483)))) x16480)
    let (get_onsuccess : t -> (this:t -> ev:Event.t -> any) option) =
      fun (x16484 : t) ->
        Ojs.option_of_js
          (fun (x16485 : Ojs.t) ->
             fun ~this:(x16486 : t) ->
               fun ~ev:(x16487 : Event.t) ->
                 any_of_js
                   (Ojs.apply x16485
                      [|(t_to_js x16486);(Event.t_to_js x16487)|]))
          (Ojs.get_prop_ascii (t_to_js x16484) "onsuccess")
    let (set_onsuccess : t -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x16488 : t) ->
        fun (x16489 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (t_to_js x16488) "onsuccess"
            (Ojs.option_to_js
               (fun (x16490 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x16491 : Ojs.t) ->
                       fun (x16492 : Ojs.t) ->
                         any_to_js
                           (x16490 ~this:(t_of_js x16491)
                              ~ev:(Event.t_of_js x16492)))) x16489)
    let (get_readyState : t -> IDBRequestReadyState.t) =
      fun (x16493 : t) ->
        IDBRequestReadyState.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16493) "readyState")
    let (get_result : t -> T.t) =
      fun (x16494 : t) ->
        T.t_of_js (Ojs.get_prop_ascii (t_to_js x16494) "result")
    let (get_source :
      t -> (IDBCursor.t, IDBIndex.t, IDBObjectStore.t) union3) =
      fun (x16495 : t) ->
        union3_of_js IDBCursor.t_of_js IDBIndex.t_of_js
          IDBObjectStore.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16495) "source")
    let (get_transaction : t -> IDBTransaction.t option) =
      fun (x16499 : t) ->
        Ojs.option_of_js IDBTransaction.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16499) "transaction")
    let (addEventListener :
      t ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x16510 : t) ->
        fun ~type_:(x16501 : 'K) ->
          fun ~listener:(x16502 : this:t -> ev:any -> any) ->
            fun
              ?options:(x16503 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x16511 = t_to_js x16510 in
                   Ojs.call (Ojs.get_prop_ascii x16511 "addEventListener")
                     "apply"
                     [|x16511;((let x16504 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x16504 "push"
                                     [|(Obj.magic x16501)|]);
                                ignore
                                  (Ojs.call x16504 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x16508 : Ojs.t) ->
                                             fun (x16509 : Ojs.t) ->
                                               any_to_js
                                                 (x16502
                                                    ~this:(t_of_js x16508)
                                                    ~ev:(any_of_js x16509))))|]);
                                (match x16503 with
                                 | Some x16505 ->
                                     ignore
                                       (Ojs.call x16504 "push"
                                          [|((match x16505 with
                                              | `U1 x16506 ->
                                                  Ojs.bool_to_js x16506
                                              | `U2 x16507 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x16507))|])
                                 | None -> ());
                                x16504))|])
    let (addEventListener :
      t ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x16519 : t) ->
        fun ~type_:(x16512 : string) ->
          fun ~listener:(x16513 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x16514 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x16520 = t_to_js x16519 in
                   Ojs.call (Ojs.get_prop_ascii x16520 "addEventListener")
                     "apply"
                     [|x16520;((let x16515 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x16515 "push"
                                     [|(Ojs.string_to_js x16512)|]);
                                ignore
                                  (Ojs.call x16515 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x16513)|]);
                                (match x16514 with
                                 | Some x16516 ->
                                     ignore
                                       (Ojs.call x16515 "push"
                                          [|((match x16516 with
                                              | `U1 x16517 ->
                                                  Ojs.bool_to_js x16517
                                              | `U2 x16518 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x16518))|])
                                 | None -> ());
                                x16515))|])
    let (removeEventListener :
      t ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x16530 : t) ->
        fun ~type_:(x16521 : 'K) ->
          fun ~listener:(x16522 : this:t -> ev:any -> any) ->
            fun
              ?options:(x16523 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x16531 = t_to_js x16530 in
                   Ojs.call (Ojs.get_prop_ascii x16531 "removeEventListener")
                     "apply"
                     [|x16531;((let x16524 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x16524 "push"
                                     [|(Obj.magic x16521)|]);
                                ignore
                                  (Ojs.call x16524 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x16528 : Ojs.t) ->
                                             fun (x16529 : Ojs.t) ->
                                               any_to_js
                                                 (x16522
                                                    ~this:(t_of_js x16528)
                                                    ~ev:(any_of_js x16529))))|]);
                                (match x16523 with
                                 | Some x16525 ->
                                     ignore
                                       (Ojs.call x16524 "push"
                                          [|((match x16525 with
                                              | `U1 x16526 ->
                                                  Ojs.bool_to_js x16526
                                              | `U2 x16527 ->
                                                  EventListenerOptions.t_to_js
                                                    x16527))|])
                                 | None -> ());
                                x16524))|])
    let (removeEventListener :
      t ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x16539 : t) ->
        fun ~type_:(x16532 : string) ->
          fun ~listener:(x16533 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x16534 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x16540 = t_to_js x16539 in
                   Ojs.call (Ojs.get_prop_ascii x16540 "removeEventListener")
                     "apply"
                     [|x16540;((let x16535 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x16535 "push"
                                     [|(Ojs.string_to_js x16532)|]);
                                ignore
                                  (Ojs.call x16535 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x16533)|]);
                                (match x16534 with
                                 | Some x16536 ->
                                     ignore
                                       (Ojs.call x16535 "push"
                                          [|((match x16536 with
                                              | `U1 x16537 ->
                                                  Ojs.bool_to_js x16537
                                              | `U2 x16538 ->
                                                  EventListenerOptions.t_to_js
                                                    x16538))|])
                                 | None -> ());
                                x16535))|])
  end
module ProgressEvent_Make(T:Ojs.T) =
  struct
    type 'T parent = 'T ProgressEvent.t
    let rec parent_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T parent =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x16543 : Ojs.t) -> ProgressEvent.t_of_js __T_of_js x16543
    and parent_to_js : 'T . ('T -> Ojs.t) -> 'T parent -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x16541 : __T ProgressEvent.t) ->
            ProgressEvent.t_to_js __T_to_js x16541
    type t = T.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16547 : Ojs.t) -> parent_of_js T.t_of_js x16547
    and t_to_js : t -> Ojs.t =
      fun (x16545 : T.t parent) -> parent_to_js T.t_to_js x16545
    let (get_lengthComputable : t -> bool) =
      fun (x16549 : t) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (t_to_js x16549) "lengthComputable")
    let (get_loaded : t -> float) =
      fun (x16550 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x16550) "loaded")
    let (get_target : t -> T.t option) =
      fun (x16551 : t) ->
        Ojs.option_of_js T.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16551) "target")
    let (get_total : t -> float) =
      fun (x16553 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x16553) "total")
  end
module ReadableStream_Make(R:Ojs.T) =
  struct
    type 'R parent = 'R ReadableStream.t
    let rec parent_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R parent =
      fun (type __R) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x16556 : Ojs.t) -> ReadableStream.t_of_js __R_of_js x16556
    and parent_to_js : 'R . ('R -> Ojs.t) -> 'R parent -> Ojs.t =
      fun (type __R) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x16554 : __R ReadableStream.t) ->
            ReadableStream.t_to_js __R_to_js x16554
    type t = R.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16560 : Ojs.t) -> parent_of_js R.t_of_js x16560
    and t_to_js : t -> Ojs.t =
      fun (x16558 : R.t parent) -> parent_to_js R.t_to_js x16558
    let (get_locked : t -> bool) =
      fun (x16562 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x16562) "locked")
    let (cancel : t -> ?reason:any -> unit -> unit Promise.t_1) =
      fun (x16566 : t) ->
        fun ?reason:(x16563 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x16567 = t_to_js x16566 in
               Ojs.call (Ojs.get_prop_ascii x16567 "cancel") "apply"
                 [|x16567;((let x16564 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x16563 with
                             | Some x16565 ->
                                 ignore
                                   (Ojs.call x16564 "push"
                                      [|(any_to_js x16565)|])
                             | None -> ());
                            x16564))|])
    let (getReader : t -> R.t ReadableStreamDefaultReader.t) =
      fun (x16569 : t) ->
        ReadableStreamDefaultReader.t_of_js R.t_of_js
          (Ojs.call (t_to_js x16569) "getReader" [||])
    let (pipeThrough :
      t ->
        transform:('T, R.t) ReadableWritablePair.t ->
          ?options:StreamPipeOptions.t -> unit -> 'T parent)
      =
      fun (x16577 : t) ->
        fun ~transform:(x16571 : ('T, R.t) ReadableWritablePair.t) ->
          fun ?options:(x16572 : StreamPipeOptions.t option) ->
            fun () ->
              parent_of_js Obj.magic
                (let x16578 = t_to_js x16577 in
                 Ojs.call (Ojs.get_prop_ascii x16578 "pipeThrough") "apply"
                   [|x16578;((let x16573 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x16573 "push"
                                   [|(ReadableWritablePair.t_to_js Obj.magic
                                        R.t_to_js x16571)|]);
                              (match x16572 with
                               | Some x16574 ->
                                   ignore
                                     (Ojs.call x16573 "push"
                                        [|(StreamPipeOptions.t_to_js x16574)|])
                               | None -> ());
                              x16573))|])
    let (pipeTo :
      t ->
        destination:R.t WritableStream.t ->
          ?options:StreamPipeOptions.t -> unit -> unit Promise.t_1)
      =
      fun (x16585 : t) ->
        fun ~destination:(x16580 : R.t WritableStream.t) ->
          fun ?options:(x16581 : StreamPipeOptions.t option) ->
            fun () ->
              Promise.t_1_of_js Ojs.unit_of_js
                (let x16586 = t_to_js x16585 in
                 Ojs.call (Ojs.get_prop_ascii x16586 "pipeTo") "apply"
                   [|x16586;((let x16582 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x16582 "push"
                                   [|(WritableStream.t_to_js R.t_to_js x16580)|]);
                              (match x16581 with
                               | Some x16583 ->
                                   ignore
                                     (Ojs.call x16582 "push"
                                        [|(StreamPipeOptions.t_to_js x16583)|])
                               | None -> ());
                              x16582))|])
    let (tee : t -> (t * t)) =
      fun (x16588 : t) ->
        let x16589 = Ojs.call (t_to_js x16588) "tee" [||] in
        ((t_of_js (Ojs.array_get x16589 0)),
          (t_of_js (Ojs.array_get x16589 1)))
  end
module ReadableStreamDefaultController_Make(R:Ojs.T) =
  struct
    type 'R parent = 'R ReadableStreamDefaultController.t
    let rec parent_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R parent =
      fun (type __R) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x16592 : Ojs.t) ->
            ReadableStreamDefaultController.t_of_js __R_of_js x16592
    and parent_to_js : 'R . ('R -> Ojs.t) -> 'R parent -> Ojs.t =
      fun (type __R) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x16590 : __R ReadableStreamDefaultController.t) ->
            ReadableStreamDefaultController.t_to_js __R_to_js x16590
    type t = R.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16596 : Ojs.t) -> parent_of_js R.t_of_js x16596
    and t_to_js : t -> Ojs.t =
      fun (x16594 : R.t parent) -> parent_to_js R.t_to_js x16594
    let (get_desiredSize : t -> float option) =
      fun (x16598 : t) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x16598) "desiredSize")
    let (close : t -> unit) =
      fun (x16600 : t) -> ignore (Ojs.call (t_to_js x16600) "close" [||])
    let (enqueue : t -> ?chunk:R.t -> unit -> unit) =
      fun (x16604 : t) ->
        fun ?chunk:(x16601 : R.t option) ->
          fun () ->
            ignore
              (let x16605 = t_to_js x16604 in
               Ojs.call (Ojs.get_prop_ascii x16605 "enqueue") "apply"
                 [|x16605;((let x16602 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x16601 with
                             | Some x16603 ->
                                 ignore
                                   (Ojs.call x16602 "push"
                                      [|(R.t_to_js x16603)|])
                             | None -> ());
                            x16602))|])
    let (error : t -> ?e:any -> unit -> unit) =
      fun (x16609 : t) ->
        fun ?e:(x16606 : any option) ->
          fun () ->
            ignore
              (let x16610 = t_to_js x16609 in
               Ojs.call (Ojs.get_prop_ascii x16610 "error") "apply"
                 [|x16610;((let x16607 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x16606 with
                             | Some x16608 ->
                                 ignore
                                   (Ojs.call x16607 "push"
                                      [|(any_to_js x16608)|])
                             | None -> ());
                            x16607))|])
  end
module ReadableStreamDefaultReader_Make(R:Ojs.T) =
  struct
    type 'R parent = 'R ReadableStreamDefaultReader.t
    let rec parent_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R parent =
      fun (type __R) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x16613 : Ojs.t) ->
            ReadableStreamDefaultReader.t_of_js __R_of_js x16613
    and parent_to_js : 'R . ('R -> Ojs.t) -> 'R parent -> Ojs.t =
      fun (type __R) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x16611 : __R ReadableStreamDefaultReader.t) ->
            ReadableStreamDefaultReader.t_to_js __R_to_js x16611
    type t = R.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16617 : Ojs.t) -> parent_of_js R.t_of_js x16617
    and t_to_js : t -> Ojs.t =
      fun (x16615 : R.t parent) -> parent_to_js R.t_to_js x16615
    let (read : t -> R.t ReadableStreamDefaultReadResult.t Promise.t_1) =
      fun (x16619 : t) ->
        Promise.t_1_of_js
          (fun (x16620 : Ojs.t) ->
             ReadableStreamDefaultReadResult.t_of_js R.t_of_js x16620)
          (Ojs.call (t_to_js x16619) "read" [||])
    let (releaseLock : t -> unit) =
      fun (x16622 : t) ->
        ignore (Ojs.call (t_to_js x16622) "releaseLock" [||])
  end
module TransformStream_Make(I:Ojs.T)(O:Ojs.T) =
  struct
    type ('I, 'O) parent = ('I, 'O) TransformStream.t
    let rec parent_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) parent =
      fun (type __I) ->
        fun (type __O) ->
          fun (__I_of_js : Ojs.t -> __I) ->
            fun (__O_of_js : Ojs.t -> __O) ->
              fun (x16626 : Ojs.t) ->
                TransformStream.t_of_js __I_of_js __O_of_js x16626
    and parent_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) parent -> Ojs.t =
      fun (type __I) ->
        fun (type __O) ->
          fun (__I_to_js : __I -> Ojs.t) ->
            fun (__O_to_js : __O -> Ojs.t) ->
              fun (x16623 : (__I, __O) TransformStream.t) ->
                TransformStream.t_to_js __I_to_js __O_to_js x16623
    type t = (I.t, O.t) parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16632 : Ojs.t) -> parent_of_js I.t_of_js O.t_of_js x16632
    and t_to_js : t -> Ojs.t =
      fun (x16629 : (I.t, O.t) parent) ->
        parent_to_js I.t_to_js O.t_to_js x16629
    let (get_readable : t -> O.t ReadableStream.t) =
      fun (x16635 : t) ->
        ReadableStream.t_of_js O.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16635) "readable")
    let (get_writable : t -> I.t WritableStream.t) =
      fun (x16637 : t) ->
        WritableStream.t_of_js I.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16637) "writable")
  end
module TransformStreamDefaultController_Make(O:Ojs.T) =
  struct
    type 'O parent = 'O TransformStreamDefaultController.t
    let rec parent_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O parent =
      fun (type __O) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x16641 : Ojs.t) ->
            TransformStreamDefaultController.t_of_js __O_of_js x16641
    and parent_to_js : 'O . ('O -> Ojs.t) -> 'O parent -> Ojs.t =
      fun (type __O) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x16639 : __O TransformStreamDefaultController.t) ->
            TransformStreamDefaultController.t_to_js __O_to_js x16639
    type t = O.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16645 : Ojs.t) -> parent_of_js O.t_of_js x16645
    and t_to_js : t -> Ojs.t =
      fun (x16643 : O.t parent) -> parent_to_js O.t_to_js x16643
    let (get_desiredSize : t -> float option) =
      fun (x16647 : t) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x16647) "desiredSize")
    let (enqueue : t -> ?chunk:O.t -> unit -> unit) =
      fun (x16652 : t) ->
        fun ?chunk:(x16649 : O.t option) ->
          fun () ->
            ignore
              (let x16653 = t_to_js x16652 in
               Ojs.call (Ojs.get_prop_ascii x16653 "enqueue") "apply"
                 [|x16653;((let x16650 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x16649 with
                             | Some x16651 ->
                                 ignore
                                   (Ojs.call x16650 "push"
                                      [|(O.t_to_js x16651)|])
                             | None -> ());
                            x16650))|])
    let (error : t -> ?reason:any -> unit -> unit) =
      fun (x16657 : t) ->
        fun ?reason:(x16654 : any option) ->
          fun () ->
            ignore
              (let x16658 = t_to_js x16657 in
               Ojs.call (Ojs.get_prop_ascii x16658 "error") "apply"
                 [|x16658;((let x16655 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x16654 with
                             | Some x16656 ->
                                 ignore
                                   (Ojs.call x16655 "push"
                                      [|(any_to_js x16656)|])
                             | None -> ());
                            x16655))|])
    let (terminate : t -> unit) =
      fun (x16659 : t) -> ignore (Ojs.call (t_to_js x16659) "terminate" [||])
  end
module WritableStream_Make(W:Ojs.T) =
  struct
    type 'W parent = 'W WritableStream.t
    let rec parent_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W parent =
      fun (type __W) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x16662 : Ojs.t) -> WritableStream.t_of_js __W_of_js x16662
    and parent_to_js : 'W . ('W -> Ojs.t) -> 'W parent -> Ojs.t =
      fun (type __W) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x16660 : __W WritableStream.t) ->
            WritableStream.t_to_js __W_to_js x16660
    type t = W.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16666 : Ojs.t) -> parent_of_js W.t_of_js x16666
    and t_to_js : t -> Ojs.t =
      fun (x16664 : W.t parent) -> parent_to_js W.t_to_js x16664
    let (get_locked : t -> bool) =
      fun (x16668 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x16668) "locked")
    let (abort : t -> ?reason:any -> unit -> unit Promise.t_1) =
      fun (x16672 : t) ->
        fun ?reason:(x16669 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x16673 = t_to_js x16672 in
               Ojs.call (Ojs.get_prop_ascii x16673 "abort") "apply"
                 [|x16673;((let x16670 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x16669 with
                             | Some x16671 ->
                                 ignore
                                   (Ojs.call x16670 "push"
                                      [|(any_to_js x16671)|])
                             | None -> ());
                            x16670))|])
    let (close : t -> unit Promise.t_1) =
      fun (x16675 : t) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (t_to_js x16675) "close" [||])
    let (getWriter : t -> W.t WritableStreamDefaultWriter.t) =
      fun (x16677 : t) ->
        WritableStreamDefaultWriter.t_of_js W.t_of_js
          (Ojs.call (t_to_js x16677) "getWriter" [||])
  end
module WritableStreamDefaultWriter_Make(W:Ojs.T) =
  struct
    type 'W parent = 'W WritableStreamDefaultWriter.t
    let rec parent_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W parent =
      fun (type __W) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x16681 : Ojs.t) ->
            WritableStreamDefaultWriter.t_of_js __W_of_js x16681
    and parent_to_js : 'W . ('W -> Ojs.t) -> 'W parent -> Ojs.t =
      fun (type __W) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x16679 : __W WritableStreamDefaultWriter.t) ->
            WritableStreamDefaultWriter.t_to_js __W_to_js x16679
    type t = W.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16685 : Ojs.t) -> parent_of_js W.t_of_js x16685
    and t_to_js : t -> Ojs.t =
      fun (x16683 : W.t parent) -> parent_to_js W.t_to_js x16683
    let (get_closed : t -> undefined Promise.t_1) =
      fun (x16687 : t) ->
        Promise.t_1_of_js undefined_of_js
          (Ojs.get_prop_ascii (t_to_js x16687) "closed")
    let (get_desiredSize : t -> float option) =
      fun (x16689 : t) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x16689) "desiredSize")
    let (get_ready : t -> undefined Promise.t_1) =
      fun (x16691 : t) ->
        Promise.t_1_of_js undefined_of_js
          (Ojs.get_prop_ascii (t_to_js x16691) "ready")
    let (abort : t -> ?reason:any -> unit -> unit Promise.t_1) =
      fun (x16696 : t) ->
        fun ?reason:(x16693 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x16697 = t_to_js x16696 in
               Ojs.call (Ojs.get_prop_ascii x16697 "abort") "apply"
                 [|x16697;((let x16694 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x16693 with
                             | Some x16695 ->
                                 ignore
                                   (Ojs.call x16694 "push"
                                      [|(any_to_js x16695)|])
                             | None -> ());
                            x16694))|])
    let (close : t -> unit Promise.t_1) =
      fun (x16699 : t) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (t_to_js x16699) "close" [||])
    let (releaseLock : t -> unit) =
      fun (x16701 : t) ->
        ignore (Ojs.call (t_to_js x16701) "releaseLock" [||])
    let (write : t -> ?chunk:W.t -> unit -> unit Promise.t_1) =
      fun (x16705 : t) ->
        fun ?chunk:(x16702 : W.t option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x16706 = t_to_js x16705 in
               Ojs.call (Ojs.get_prop_ascii x16706 "write") "apply"
                 [|x16706;((let x16703 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x16702 with
                             | Some x16704 ->
                                 ignore
                                   (Ojs.call x16703 "push"
                                      [|(W.t_to_js x16704)|])
                             | None -> ());
                            x16703))|])
  end
module QueuingStrategySize_Make(T:Ojs.T) =
  struct
    type 'T parent = 'T QueuingStrategySize.t
    let rec parent_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T parent =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x16710 : Ojs.t) ->
            QueuingStrategySize.t_of_js __T_of_js x16710
    and parent_to_js : 'T . ('T -> Ojs.t) -> 'T parent -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x16708 : __T QueuingStrategySize.t) ->
            QueuingStrategySize.t_to_js __T_to_js x16708
    type t = T.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16714 : Ojs.t) -> parent_of_js T.t_of_js x16714
    and t_to_js : t -> Ojs.t =
      fun (x16712 : T.t parent) -> parent_to_js T.t_to_js x16712
    let (apply : t -> chunk:T.t -> float) =
      fun (x16717 : t) ->
        fun ~chunk:(x16716 : T.t) ->
          Ojs.float_of_js (Ojs.apply (t_to_js x16717) [|(T.t_to_js x16716)|])
  end
module TransformerFlushCallback_Make(O:Ojs.T) =
  struct
    type 'O parent = 'O TransformerFlushCallback.t
    let rec parent_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O parent =
      fun (type __O) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x16720 : Ojs.t) ->
            TransformerFlushCallback.t_of_js __O_of_js x16720
    and parent_to_js : 'O . ('O -> Ojs.t) -> 'O parent -> Ojs.t =
      fun (type __O) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x16718 : __O TransformerFlushCallback.t) ->
            TransformerFlushCallback.t_to_js __O_to_js x16718
    type t = O.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16724 : Ojs.t) -> parent_of_js O.t_of_js x16724
    and t_to_js : t -> Ojs.t =
      fun (x16722 : O.t parent) -> parent_to_js O.t_to_js x16722
    let (apply :
      t ->
        controller:O.t TransformStreamDefaultController.t ->
          (unit, unit PromiseLike.t_1) union2)
      =
      fun (x16728 : t) ->
        fun ~controller:(x16726 : O.t TransformStreamDefaultController.t) ->
          union2_of_js Ojs.unit_of_js
            (fun (x16730 : Ojs.t) ->
               PromiseLike.t_1_of_js Ojs.unit_of_js x16730)
            (Ojs.apply (t_to_js x16728)
               [|(TransformStreamDefaultController.t_to_js O.t_to_js x16726)|])
  end
module TransformerStartCallback_Make(O:Ojs.T) =
  struct
    type 'O parent = 'O TransformerStartCallback.t
    let rec parent_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O parent =
      fun (type __O) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x16734 : Ojs.t) ->
            TransformerStartCallback.t_of_js __O_of_js x16734
    and parent_to_js : 'O . ('O -> Ojs.t) -> 'O parent -> Ojs.t =
      fun (type __O) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x16732 : __O TransformerStartCallback.t) ->
            TransformerStartCallback.t_to_js __O_to_js x16732
    type t = O.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16738 : Ojs.t) -> parent_of_js O.t_of_js x16738
    and t_to_js : t -> Ojs.t =
      fun (x16736 : O.t parent) -> parent_to_js O.t_to_js x16736
    let (apply :
      t -> controller:O.t TransformStreamDefaultController.t -> any) =
      fun (x16742 : t) ->
        fun ~controller:(x16740 : O.t TransformStreamDefaultController.t) ->
          any_of_js
            (Ojs.apply (t_to_js x16742)
               [|(TransformStreamDefaultController.t_to_js O.t_to_js x16740)|])
  end
module TransformerTransformCallback_Make(I:Ojs.T)(O:Ojs.T) =
  struct
    type ('I, 'O) parent = ('I, 'O) TransformerTransformCallback.t
    let rec parent_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) parent =
      fun (type __I) ->
        fun (type __O) ->
          fun (__I_of_js : Ojs.t -> __I) ->
            fun (__O_of_js : Ojs.t -> __O) ->
              fun (x16746 : Ojs.t) ->
                TransformerTransformCallback.t_of_js __I_of_js __O_of_js
                  x16746
    and parent_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) parent -> Ojs.t =
      fun (type __I) ->
        fun (type __O) ->
          fun (__I_to_js : __I -> Ojs.t) ->
            fun (__O_to_js : __O -> Ojs.t) ->
              fun (x16743 : (__I, __O) TransformerTransformCallback.t) ->
                TransformerTransformCallback.t_to_js __I_to_js __O_to_js
                  x16743
    type t = (I.t, O.t) parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16752 : Ojs.t) -> parent_of_js I.t_of_js O.t_of_js x16752
    and t_to_js : t -> Ojs.t =
      fun (x16749 : (I.t, O.t) parent) ->
        parent_to_js I.t_to_js O.t_to_js x16749
    let (apply :
      t ->
        chunk:I.t ->
          controller:O.t TransformStreamDefaultController.t ->
            (unit, unit PromiseLike.t_1) union2)
      =
      fun (x16758 : t) ->
        fun ~chunk:(x16755 : I.t) ->
          fun ~controller:(x16756 : O.t TransformStreamDefaultController.t)
            ->
            union2_of_js Ojs.unit_of_js
              (fun (x16760 : Ojs.t) ->
                 PromiseLike.t_1_of_js Ojs.unit_of_js x16760)
              (Ojs.apply (t_to_js x16758)
                 [|(I.t_to_js x16755);(TransformStreamDefaultController.t_to_js
                                         O.t_to_js x16756)|])
  end
module UnderlyingSinkWriteCallback_Make(W:Ojs.T) =
  struct
    type 'W parent = 'W UnderlyingSinkWriteCallback.t
    let rec parent_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W parent =
      fun (type __W) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x16764 : Ojs.t) ->
            UnderlyingSinkWriteCallback.t_of_js __W_of_js x16764
    and parent_to_js : 'W . ('W -> Ojs.t) -> 'W parent -> Ojs.t =
      fun (type __W) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x16762 : __W UnderlyingSinkWriteCallback.t) ->
            UnderlyingSinkWriteCallback.t_to_js __W_to_js x16762
    type t = W.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16768 : Ojs.t) -> parent_of_js W.t_of_js x16768
    and t_to_js : t -> Ojs.t =
      fun (x16766 : W.t parent) -> parent_to_js W.t_to_js x16766
    let (apply :
      t ->
        chunk:W.t ->
          controller:WritableStreamDefaultController.t ->
            (unit, unit PromiseLike.t_1) union2)
      =
      fun (x16772 : t) ->
        fun ~chunk:(x16770 : W.t) ->
          fun ~controller:(x16771 : WritableStreamDefaultController.t) ->
            union2_of_js Ojs.unit_of_js
              (fun (x16774 : Ojs.t) ->
                 PromiseLike.t_1_of_js Ojs.unit_of_js x16774)
              (Ojs.apply (t_to_js x16772)
                 [|(W.t_to_js x16770);(WritableStreamDefaultController.t_to_js
                                         x16771)|])
  end
module UnderlyingSourcePullCallback_Make(R:Ojs.T) =
  struct
    type 'R parent = 'R UnderlyingSourcePullCallback.t
    let rec parent_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R parent =
      fun (type __R) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x16778 : Ojs.t) ->
            UnderlyingSourcePullCallback.t_of_js __R_of_js x16778
    and parent_to_js : 'R . ('R -> Ojs.t) -> 'R parent -> Ojs.t =
      fun (type __R) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x16776 : __R UnderlyingSourcePullCallback.t) ->
            UnderlyingSourcePullCallback.t_to_js __R_to_js x16776
    type t = R.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16782 : Ojs.t) -> parent_of_js R.t_of_js x16782
    and t_to_js : t -> Ojs.t =
      fun (x16780 : R.t parent) -> parent_to_js R.t_to_js x16780
    let (apply :
      t ->
        controller:R.t ReadableStreamController.t ->
          (unit, unit PromiseLike.t_1) union2)
      =
      fun (x16786 : t) ->
        fun ~controller:(x16784 : R.t ReadableStreamController.t) ->
          union2_of_js Ojs.unit_of_js
            (fun (x16788 : Ojs.t) ->
               PromiseLike.t_1_of_js Ojs.unit_of_js x16788)
            (Ojs.apply (t_to_js x16786)
               [|(ReadableStreamController.t_to_js R.t_to_js x16784)|])
  end
module UnderlyingSourceStartCallback_Make(R:Ojs.T) =
  struct
    type 'R parent = 'R UnderlyingSourceStartCallback.t
    let rec parent_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R parent =
      fun (type __R) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x16792 : Ojs.t) ->
            UnderlyingSourceStartCallback.t_of_js __R_of_js x16792
    and parent_to_js : 'R . ('R -> Ojs.t) -> 'R parent -> Ojs.t =
      fun (type __R) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x16790 : __R UnderlyingSourceStartCallback.t) ->
            UnderlyingSourceStartCallback.t_to_js __R_to_js x16790
    type t = R.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16796 : Ojs.t) -> parent_of_js R.t_of_js x16796
    and t_to_js : t -> Ojs.t =
      fun (x16794 : R.t parent) -> parent_to_js R.t_to_js x16794
    let (apply : t -> controller:R.t ReadableStreamController.t -> any) =
      fun (x16800 : t) ->
        fun ~controller:(x16798 : R.t ReadableStreamController.t) ->
          any_of_js
            (Ojs.apply (t_to_js x16800)
               [|(ReadableStreamController.t_to_js R.t_to_js x16798)|])
  end
let (importScripts : string list -> unit) =
  fun (x16801 : string list) ->
    ignore
      (let x16804 = Ojs.global in
       Ojs.call (Ojs.get_prop_ascii x16804 "importScripts") "apply"
         [|x16804;((let x16802 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    List.iter
                      (fun (x16803 : string) ->
                         ignore
                           (Ojs.call x16802 "push"
                              [|(Ojs.string_to_js x16803)|])) x16801;
                    x16802))|])
let (console : unit -> Console.t) =
  fun () -> Console.t_of_js (Ojs.get_prop_ascii Ojs.global "console")
let (name : unit -> string) =
  fun () -> Ojs.string_of_js (Ojs.get_prop_ascii Ojs.global "name")
let (onmessage :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:MessageEvent.t_0 -> any) option)
  =
  fun () ->
    Ojs.option_of_js
      (fun (x16805 : Ojs.t) ->
         fun ~this:(x16806 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16807 : MessageEvent.t_0) ->
             any_of_js
               (Ojs.apply x16805
                  [|(DedicatedWorkerGlobalScope.t_to_js x16806);(MessageEvent.t_0_to_js
                                                                   x16807)|]))
      (Ojs.get_prop_ascii Ojs.global "onmessage")
let (onmessageerror :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:MessageEvent.t_0 -> any) option)
  =
  fun () ->
    Ojs.option_of_js
      (fun (x16808 : Ojs.t) ->
         fun ~this:(x16809 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16810 : MessageEvent.t_0) ->
             any_of_js
               (Ojs.apply x16808
                  [|(DedicatedWorkerGlobalScope.t_to_js x16809);(MessageEvent.t_0_to_js
                                                                   x16810)|]))
      (Ojs.get_prop_ascii Ojs.global "onmessageerror")
let (close : unit -> unit) =
  fun () -> ignore (Ojs.call Ojs.global "close" [||])
let (postMessage : message:any -> transfer:Transferable.t list -> unit) =
  fun ~message:(x16811 : any) ->
    fun ~transfer:(x16812 : Transferable.t list) ->
      ignore
        (Ojs.call Ojs.global "postMessage"
           [|(any_to_js x16811);(Ojs.list_to_js Transferable.t_to_js x16812)|])
let (postMessage' :
  message:any -> ?options:StructuredSerializeOptions.t -> unit -> unit) =
  fun ~message:(x16814 : any) ->
    fun ?options:(x16815 : StructuredSerializeOptions.t option) ->
      fun () ->
        ignore
          (let x16818 = Ojs.global in
           Ojs.call (Ojs.get_prop_ascii x16818 "postMessage") "apply"
             [|x16818;((let x16816 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x16816 "push" [|(any_to_js x16814)|]);
                        (match x16815 with
                         | Some x16817 ->
                             ignore
                               (Ojs.call x16816 "push"
                                  [|(StructuredSerializeOptions.t_to_js
                                       x16817)|])
                         | None -> ());
                        x16816))|])
let (dispatchEvent : Event.t -> bool) =
  fun (x16819 : Event.t) ->
    Ojs.bool_of_js
      (Ojs.call Ojs.global "dispatchEvent" [|(Event.t_to_js x16819)|])
let (location : unit -> WorkerLocation.t) =
  fun () -> WorkerLocation.t_of_js (Ojs.get_prop_ascii Ojs.global "location")
let (navigator : unit -> WorkerNavigator.t) =
  fun () ->
    WorkerNavigator.t_of_js (Ojs.get_prop_ascii Ojs.global "navigator")
let (onerror :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:ErrorEvent.t -> any) option)
  =
  fun () ->
    Ojs.option_of_js
      (fun (x16820 : Ojs.t) ->
         fun ~this:(x16821 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16822 : ErrorEvent.t) ->
             any_of_js
               (Ojs.apply x16820
                  [|(DedicatedWorkerGlobalScope.t_to_js x16821);(ErrorEvent.t_to_js
                                                                   x16822)|]))
      (Ojs.get_prop_ascii Ojs.global "onerror")
let (onlanguagechange :
  unit -> (this:DedicatedWorkerGlobalScope.t -> ev:Event.t -> any) option) =
  fun () ->
    Ojs.option_of_js
      (fun (x16823 : Ojs.t) ->
         fun ~this:(x16824 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16825 : Event.t) ->
             any_of_js
               (Ojs.apply x16823
                  [|(DedicatedWorkerGlobalScope.t_to_js x16824);(Event.t_to_js
                                                                   x16825)|]))
      (Ojs.get_prop_ascii Ojs.global "onlanguagechange")
let (onoffline :
  unit -> (this:DedicatedWorkerGlobalScope.t -> ev:Event.t -> any) option) =
  fun () ->
    Ojs.option_of_js
      (fun (x16826 : Ojs.t) ->
         fun ~this:(x16827 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16828 : Event.t) ->
             any_of_js
               (Ojs.apply x16826
                  [|(DedicatedWorkerGlobalScope.t_to_js x16827);(Event.t_to_js
                                                                   x16828)|]))
      (Ojs.get_prop_ascii Ojs.global "onoffline")
let (ononline :
  unit -> (this:DedicatedWorkerGlobalScope.t -> ev:Event.t -> any) option) =
  fun () ->
    Ojs.option_of_js
      (fun (x16829 : Ojs.t) ->
         fun ~this:(x16830 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16831 : Event.t) ->
             any_of_js
               (Ojs.apply x16829
                  [|(DedicatedWorkerGlobalScope.t_to_js x16830);(Event.t_to_js
                                                                   x16831)|]))
      (Ojs.get_prop_ascii Ojs.global "ononline")
let (onrejectionhandled :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:PromiseRejectionEvent.t -> any)
      option)
  =
  fun () ->
    Ojs.option_of_js
      (fun (x16832 : Ojs.t) ->
         fun ~this:(x16833 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16834 : PromiseRejectionEvent.t) ->
             any_of_js
               (Ojs.apply x16832
                  [|(DedicatedWorkerGlobalScope.t_to_js x16833);(PromiseRejectionEvent.t_to_js
                                                                   x16834)|]))
      (Ojs.get_prop_ascii Ojs.global "onrejectionhandled")
let (onunhandledrejection :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:PromiseRejectionEvent.t -> any)
      option)
  =
  fun () ->
    Ojs.option_of_js
      (fun (x16835 : Ojs.t) ->
         fun ~this:(x16836 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16837 : PromiseRejectionEvent.t) ->
             any_of_js
               (Ojs.apply x16835
                  [|(DedicatedWorkerGlobalScope.t_to_js x16836);(PromiseRejectionEvent.t_to_js
                                                                   x16837)|]))
      (Ojs.get_prop_ascii Ojs.global "onunhandledrejection")
let (self : unit -> (WorkerGlobalScope.t, any) intersection2) =
  fun () ->
    intersection2_of_js WorkerGlobalScope.t_of_js any_of_js
      (Ojs.get_prop_ascii Ojs.global "self")
let (importScripts' :
  [ `String of string  | `Other of URL.t ] Primitive.t list -> unit) =
  fun (x16840 : [ `String of string  | `Other of URL.t ] Primitive.t list) ->
    ignore
      (let x16846 = Ojs.global in
       Ojs.call (Ojs.get_prop_ascii x16846 "importScripts") "apply"
         [|x16846;((let x16841 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    List.iter
                      (fun
                         (x16842 :
                           [ `String of string  | `Other of URL.t ]
                             Primitive.t)
                         ->
                         ignore
                           (Ojs.call x16841 "push"
                              [|(Primitive.t_to_js
                                   (fun
                                      (x16843 :
                                        [ `String of string 
                                        | `Other of URL.t ])
                                      ->
                                      match x16843 with
                                      | `String x16844 ->
                                          Ojs.string_to_js x16844
                                      | `Other x16845 -> URL.t_to_js x16845)
                                   x16842)|])) x16840;
                    x16841))|])
let (fonts : unit -> FontFaceSet.t) =
  fun () -> FontFaceSet.t_of_js (Ojs.get_prop_ascii Ojs.global "fonts")
let (caches : unit -> CacheStorage.t) =
  fun () -> CacheStorage.t_of_js (Ojs.get_prop_ascii Ojs.global "caches")
let (crossOriginIsolated : unit -> bool) =
  fun () ->
    Ojs.bool_of_js (Ojs.get_prop_ascii Ojs.global "crossOriginIsolated")
let (crypto : unit -> Crypto.t) =
  fun () -> Crypto.t_of_js (Ojs.get_prop_ascii Ojs.global "crypto")
let (indexedDB : unit -> IDBFactory.t) =
  fun () -> IDBFactory.t_of_js (Ojs.get_prop_ascii Ojs.global "indexedDB")
let (isSecureContext : unit -> bool) =
  fun () -> Ojs.bool_of_js (Ojs.get_prop_ascii Ojs.global "isSecureContext")
let (origin : unit -> string) =
  fun () -> Ojs.string_of_js (Ojs.get_prop_ascii Ojs.global "origin")
let (performance : unit -> Performance.t) =
  fun () -> Performance.t_of_js (Ojs.get_prop_ascii Ojs.global "performance")
let (atob : string -> string) =
  fun (x16847 : string) ->
    Ojs.string_of_js
      (Ojs.call Ojs.global "atob" [|(Ojs.string_to_js x16847)|])
let (btoa : string -> string) =
  fun (x16848 : string) ->
    Ojs.string_of_js
      (Ojs.call Ojs.global "btoa" [|(Ojs.string_to_js x16848)|])
let (clearInterval : ?id:float -> unit -> unit) =
  fun ?id:(x16849 : float option) ->
    fun () ->
      ignore
        (let x16852 = Ojs.global in
         Ojs.call (Ojs.get_prop_ascii x16852 "clearInterval") "apply"
           [|x16852;((let x16850 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x16849 with
                       | Some x16851 ->
                           ignore
                             (Ojs.call x16850 "push"
                                [|(Ojs.float_to_js x16851)|])
                       | None -> ());
                      x16850))|])
let (clearTimeout : ?id:float -> unit -> unit) =
  fun ?id:(x16853 : float option) ->
    fun () ->
      ignore
        (let x16856 = Ojs.global in
         Ojs.call (Ojs.get_prop_ascii x16856 "clearTimeout") "apply"
           [|x16856;((let x16854 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x16853 with
                       | Some x16855 ->
                           ignore
                             (Ojs.call x16854 "push"
                                [|(Ojs.float_to_js x16855)|])
                       | None -> ());
                      x16854))|])
let (createImageBitmap :
  image:ImageBitmapSource.t ->
    ?options:ImageBitmapOptions.t -> unit -> ImageBitmap.t Promise.t_1)
  =
  fun ~image:(x16857 : ImageBitmapSource.t) ->
    fun ?options:(x16858 : ImageBitmapOptions.t option) ->
      fun () ->
        Promise.t_1_of_js ImageBitmap.t_of_js
          (let x16861 = Ojs.global in
           Ojs.call (Ojs.get_prop_ascii x16861 "createImageBitmap") "apply"
             [|x16861;((let x16859 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x16859 "push"
                             [|(ImageBitmapSource.t_to_js x16857)|]);
                        (match x16858 with
                         | Some x16860 ->
                             ignore
                               (Ojs.call x16859 "push"
                                  [|(ImageBitmapOptions.t_to_js x16860)|])
                         | None -> ());
                        x16859))|])
let (createImageBitmap' :
  image:ImageBitmapSource.t ->
    sx:float ->
      sy:float ->
        sw:float ->
          sh:float ->
            ?options:ImageBitmapOptions.t ->
              unit -> ImageBitmap.t Promise.t_1)
  =
  fun ~image:(x16863 : ImageBitmapSource.t) ->
    fun ~sx:(x16864 : float) ->
      fun ~sy:(x16865 : float) ->
        fun ~sw:(x16866 : float) ->
          fun ~sh:(x16867 : float) ->
            fun ?options:(x16868 : ImageBitmapOptions.t option) ->
              fun () ->
                Promise.t_1_of_js ImageBitmap.t_of_js
                  (let x16871 = Ojs.global in
                   Ojs.call (Ojs.get_prop_ascii x16871 "createImageBitmap")
                     "apply"
                     [|x16871;((let x16869 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x16869 "push"
                                     [|(ImageBitmapSource.t_to_js x16863)|]);
                                ignore
                                  (Ojs.call x16869 "push"
                                     [|(Ojs.float_to_js x16864)|]);
                                ignore
                                  (Ojs.call x16869 "push"
                                     [|(Ojs.float_to_js x16865)|]);
                                ignore
                                  (Ojs.call x16869 "push"
                                     [|(Ojs.float_to_js x16866)|]);
                                ignore
                                  (Ojs.call x16869 "push"
                                     [|(Ojs.float_to_js x16867)|]);
                                (match x16868 with
                                 | Some x16870 ->
                                     ignore
                                       (Ojs.call x16869 "push"
                                          [|(ImageBitmapOptions.t_to_js
                                               x16870)|])
                                 | None -> ());
                                x16869))|])
let (fetch :
  input:RequestInfo.t ->
    ?init:RequestInit.t -> unit -> Response.t Promise.t_1)
  =
  fun ~input:(x16873 : RequestInfo.t) ->
    fun ?init:(x16874 : RequestInit.t option) ->
      fun () ->
        Promise.t_1_of_js Response.t_of_js
          (let x16877 = Ojs.global in
           Ojs.call (Ojs.get_prop_ascii x16877 "fetch") "apply"
             [|x16877;((let x16875 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x16875 "push"
                             [|(RequestInfo.t_to_js x16873)|]);
                        (match x16874 with
                         | Some x16876 ->
                             ignore
                               (Ojs.call x16875 "push"
                                  [|(RequestInit.t_to_js x16876)|])
                         | None -> ());
                        x16875))|])
let (queueMicrotask : VoidFunction.t -> unit) =
  fun (x16879 : VoidFunction.t) ->
    ignore
      (Ojs.call Ojs.global "queueMicrotask" [|(VoidFunction.t_to_js x16879)|])
let (reportError : any -> unit) =
  fun (x16880 : any) ->
    ignore (Ojs.call Ojs.global "reportError" [|(any_to_js x16880)|])
let (setInterval :
  handler:TimerHandler.t ->
    ?timeout:float -> arguments:any list -> unit -> float)
  =
  fun ~handler:(x16881 : TimerHandler.t) ->
    fun ?timeout:(x16882 : float option) ->
      fun ~arguments:(x16883 : any list) ->
        fun () ->
          Ojs.float_of_js
            (let x16887 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x16887 "setInterval") "apply"
               [|x16887;((let x16884 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x16884 "push"
                               [|(TimerHandler.t_to_js x16881)|]);
                          (match x16882 with
                           | Some x16886 ->
                               ignore
                                 (Ojs.call x16884 "push"
                                    [|(Ojs.float_to_js x16886)|])
                           | None -> ());
                          List.iter
                            (fun (x16885 : any) ->
                               ignore
                                 (Ojs.call x16884 "push"
                                    [|(any_to_js x16885)|])) x16883;
                          x16884))|])
let (setTimeout :
  handler:TimerHandler.t ->
    ?timeout:float -> arguments:any list -> unit -> float)
  =
  fun ~handler:(x16888 : TimerHandler.t) ->
    fun ?timeout:(x16889 : float option) ->
      fun ~arguments:(x16890 : any list) ->
        fun () ->
          Ojs.float_of_js
            (let x16894 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x16894 "setTimeout") "apply"
               [|x16894;((let x16891 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x16891 "push"
                               [|(TimerHandler.t_to_js x16888)|]);
                          (match x16889 with
                           | Some x16893 ->
                               ignore
                                 (Ojs.call x16891 "push"
                                    [|(Ojs.float_to_js x16893)|])
                           | None -> ());
                          List.iter
                            (fun (x16892 : any) ->
                               ignore
                                 (Ojs.call x16891 "push"
                                    [|(any_to_js x16892)|])) x16890;
                          x16891))|])
let (cancelAnimationFrame : float -> unit) =
  fun (x16895 : float) ->
    ignore
      (Ojs.call Ojs.global "cancelAnimationFrame"
         [|(Ojs.float_to_js x16895)|])
let (requestAnimationFrame : FrameRequestCallback.t -> float) =
  fun (x16896 : FrameRequestCallback.t) ->
    Ojs.float_of_js
      (Ojs.call Ojs.global "requestAnimationFrame"
         [|(FrameRequestCallback.t_to_js x16896)|])
let (addEventListener :
  type_:'K ->
    listener:(this:DedicatedWorkerGlobalScope.t -> ev:any -> any) ->
      ?options:[ `Boolean of bool  | `Other of AddEventListenerOptions.t ]
        Primitive.t -> unit -> unit)
  =
  fun ~type_:(x16897 : 'K) ->
    fun
      ~listener:(x16898 : this:DedicatedWorkerGlobalScope.t -> ev:any -> any)
      ->
      fun
        ?options:(x16899 :
                   [ `Boolean of bool 
                   | `Other of AddEventListenerOptions.t ] Primitive.t option)
        ->
        fun () ->
          ignore
            (let x16907 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x16907 "addEventListener") "apply"
               [|x16907;((let x16900 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x16900 "push" [|(Obj.magic x16897)|]);
                          ignore
                            (Ojs.call x16900 "push"
                               [|(Ojs.fun_to_js 2
                                    (fun (x16905 : Ojs.t) ->
                                       fun (x16906 : Ojs.t) ->
                                         any_to_js
                                           (x16898
                                              ~this:(DedicatedWorkerGlobalScope.t_of_js
                                                       x16905)
                                              ~ev:(any_of_js x16906))))|]);
                          (match x16899 with
                           | Some x16901 ->
                               ignore
                                 (Ojs.call x16900 "push"
                                    [|(Primitive.t_to_js
                                         (fun
                                            (x16902 :
                                              [ `Boolean of bool 
                                              | `Other of
                                                  AddEventListenerOptions.t ])
                                            ->
                                            match x16902 with
                                            | `Boolean x16903 ->
                                                Ojs.bool_to_js x16903
                                            | `Other x16904 ->
                                                AddEventListenerOptions.t_to_js
                                                  x16904) x16901)|])
                           | None -> ());
                          x16900))|])
let (addEventListener' :
  type_:string ->
    listener:EventListenerOrEventListenerObject.t ->
      ?options:[ `Boolean of bool  | `Other of AddEventListenerOptions.t ]
        Primitive.t -> unit -> unit)
  =
  fun ~type_:(x16908 : string) ->
    fun ~listener:(x16909 : EventListenerOrEventListenerObject.t) ->
      fun
        ?options:(x16910 :
                   [ `Boolean of bool 
                   | `Other of AddEventListenerOptions.t ] Primitive.t option)
        ->
        fun () ->
          ignore
            (let x16916 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x16916 "addEventListener") "apply"
               [|x16916;((let x16911 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x16911 "push"
                               [|(Ojs.string_to_js x16908)|]);
                          ignore
                            (Ojs.call x16911 "push"
                               [|(EventListenerOrEventListenerObject.t_to_js
                                    x16909)|]);
                          (match x16910 with
                           | Some x16912 ->
                               ignore
                                 (Ojs.call x16911 "push"
                                    [|(Primitive.t_to_js
                                         (fun
                                            (x16913 :
                                              [ `Boolean of bool 
                                              | `Other of
                                                  AddEventListenerOptions.t ])
                                            ->
                                            match x16913 with
                                            | `Boolean x16914 ->
                                                Ojs.bool_to_js x16914
                                            | `Other x16915 ->
                                                AddEventListenerOptions.t_to_js
                                                  x16915) x16912)|])
                           | None -> ());
                          x16911))|])
let (removeEventListener :
  type_:'K ->
    listener:(this:DedicatedWorkerGlobalScope.t -> ev:any -> any) ->
      ?options:[ `Boolean of bool  | `Other of EventListenerOptions.t ]
        Primitive.t -> unit -> unit)
  =
  fun ~type_:(x16917 : 'K) ->
    fun
      ~listener:(x16918 : this:DedicatedWorkerGlobalScope.t -> ev:any -> any)
      ->
      fun
        ?options:(x16919 :
                   [ `Boolean of bool  | `Other of EventListenerOptions.t ]
                     Primitive.t option)
        ->
        fun () ->
          ignore
            (let x16927 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x16927 "removeEventListener")
               "apply"
               [|x16927;((let x16920 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x16920 "push" [|(Obj.magic x16917)|]);
                          ignore
                            (Ojs.call x16920 "push"
                               [|(Ojs.fun_to_js 2
                                    (fun (x16925 : Ojs.t) ->
                                       fun (x16926 : Ojs.t) ->
                                         any_to_js
                                           (x16918
                                              ~this:(DedicatedWorkerGlobalScope.t_of_js
                                                       x16925)
                                              ~ev:(any_of_js x16926))))|]);
                          (match x16919 with
                           | Some x16921 ->
                               ignore
                                 (Ojs.call x16920 "push"
                                    [|(Primitive.t_to_js
                                         (fun
                                            (x16922 :
                                              [ `Boolean of bool 
                                              | `Other of
                                                  EventListenerOptions.t ])
                                            ->
                                            match x16922 with
                                            | `Boolean x16923 ->
                                                Ojs.bool_to_js x16923
                                            | `Other x16924 ->
                                                EventListenerOptions.t_to_js
                                                  x16924) x16921)|])
                           | None -> ());
                          x16920))|])
let (removeEventListener' :
  type_:string ->
    listener:EventListenerOrEventListenerObject.t ->
      ?options:[ `Boolean of bool  | `Other of EventListenerOptions.t ]
        Primitive.t -> unit -> unit)
  =
  fun ~type_:(x16928 : string) ->
    fun ~listener:(x16929 : EventListenerOrEventListenerObject.t) ->
      fun
        ?options:(x16930 :
                   [ `Boolean of bool  | `Other of EventListenerOptions.t ]
                     Primitive.t option)
        ->
        fun () ->
          ignore
            (let x16936 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x16936 "removeEventListener")
               "apply"
               [|x16936;((let x16931 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x16931 "push"
                               [|(Ojs.string_to_js x16928)|]);
                          ignore
                            (Ojs.call x16931 "push"
                               [|(EventListenerOrEventListenerObject.t_to_js
                                    x16929)|]);
                          (match x16930 with
                           | Some x16932 ->
                               ignore
                                 (Ojs.call x16931 "push"
                                    [|(Primitive.t_to_js
                                         (fun
                                            (x16933 :
                                              [ `Boolean of bool 
                                              | `Other of
                                                  EventListenerOptions.t ])
                                            ->
                                            match x16933 with
                                            | `Boolean x16934 ->
                                                Ojs.bool_to_js x16934
                                            | `Other x16935 ->
                                                EventListenerOptions.t_to_js
                                                  x16935) x16932)|])
                           | None -> ());
                          x16931))|])
