[@@@ocaml.warning "-7-11-32-33-39"]
[@@@js.implem 
  [@@@ocaml.warning "-7-11-32-33-39"]
]
open Ts2ocaml_min
open Ts2ocaml_es


(**
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URLSearchParams)
  
  
  `URLSearchParams` class is a global reference for `require('url').URLSearchParams`
  https://nodejs.org/api/url.html#class-urlsearchparams
*)
module[@js.scope "URLSearchParams"] URLSearchParams : sig
  type t = [`URLSearchParams] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`URLSearchParams]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`URLSearchParams]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `URLSearchParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> (string * string) IterableIterator.t *)
  
  (** Returns an array of key, value pairs for every entry in the search params. *)
  val entries: 'tags this -> (string * string) IterableIterator.t [@@js.call "entries"]
  
  (** Returns a list of keys in the search params. *)
  val keys: 'tags this -> string IterableIterator.t [@@js.call "keys"]
  
  (** Returns a list of values in the search params. *)
  val values: 'tags this -> string IterableIterator.t [@@js.call "values"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URLSearchParams/size) *)
  val get_size: 'tags this -> float [@@js.get "size"]
  
  (**
    Appends a specified key/value pair as a new search parameter.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URLSearchParams/append)
  *)
  val append: 'tags this -> name:string -> value:string -> unit [@@js.call "append"]
  
  (**
    Deletes the given search parameter, and its associated value, from the list of all search parameters.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URLSearchParams/delete)
  *)
  val delete: 'tags this -> name:string -> ?value:string -> unit -> unit [@@js.call "delete"]
  
  (**
    Returns the first value associated to the given search parameter.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URLSearchParams/get)
  *)
  val get_: 'tags this -> name:string -> string option [@@js.call "get"]
  
  (**
    Returns all the values association with a given search parameter.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URLSearchParams/getAll)
  *)
  val getAll: 'tags this -> name:string -> string list [@@js.call "getAll"]
  
  (**
    Returns a Boolean indicating if such a search parameter exists.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URLSearchParams/has)
  *)
  val has: 'tags this -> name:string -> ?value:string -> unit -> bool [@@js.call "has"]
  
  (**
    Sets the value associated to a given search parameter to the given value. If there were several values, delete the others.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URLSearchParams/set)
  *)
  val set_: 'tags this -> name:string -> value:string -> unit [@@js.call "set"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URLSearchParams/sort) *)
  val sort: 'tags this -> unit [@@js.call "sort"]
  
  (** Returns a string containing a query string suitable for use in a URL. Does not include the question mark. *)
  val toString: 'tags this -> string [@@js.call "toString"]
  val forEach: 'tags this -> callbackfn:(value:string -> key:string -> parent:t -> unit) -> ?thisArg:any -> unit -> unit [@@js.call "forEach"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: ?init:([`U1 of string list list | `U2 of (string, string) Record.t | `U3 of string | `U4 of t] [@js.union]) -> unit -> t [@@js.create]
end

(**
  Used to represent a set of time ranges, primarily for the purpose of tracking which portions of media have been buffered when loading it for use by the <audio> and <video>Â elements.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TimeRanges)
*)
module[@js.scope "TimeRanges"] TimeRanges : sig
  type t = [`TimeRanges] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`TimeRanges]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`TimeRanges]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `TimeRanges ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the number of ranges in the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TimeRanges/length)
  *)
  val get_length: 'tags this -> float [@@js.get "length"]
  
  (**
    Returns the time for the end of the range with the given index.
    
    Throws an "IndexSizeError" DOMException if the index is out of range.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TimeRanges/end)
  *)
  val end_: 'tags this -> index:float -> float [@@js.call "end"]
  
  (**
    Returns the time for the start of the range with the given index.
    
    Throws an "IndexSizeError" DOMException if the index is out of range.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TimeRanges/start)
  *)
  val start: 'tags this -> index:float -> float [@@js.call "start"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module AppendMode : sig
  type t = ([`L_s866_segments[@js "segments"] | `L_s876_sequence[@js "sequence"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module BufferSource : sig
  type t = (ArrayBuffer.t, ArrayBufferView.t) union2
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module EventInit : sig
  type t = [`EventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_bubbles: 'tags this -> bool option [@@js.get "bubbles"]
  val set_bubbles: 'tags this -> bool -> unit [@@js.set "bubbles"]
  val get_cancelable: 'tags this -> bool option [@@js.get "cancelable"]
  val set_cancelable: 'tags this -> bool -> unit [@@js.set "cancelable"]
  val get_composed: 'tags this -> bool option [@@js.get "composed"]
  val set_composed: 'tags this -> bool -> unit [@@js.set "composed"]
  val create: ?bubbles:bool -> ?cancelable:bool -> ?composed:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module DOMHighResTimeStamp : sig
  type t = float
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module EventListenerOptions : sig
  type t = [`EventListenerOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventListenerOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventListenerOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EventListenerOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_capture: 'tags this -> bool option [@@js.get "capture"]
  val set_capture: 'tags this -> bool -> unit [@@js.set "capture"]
  val create: ?capture:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  A signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an AbortController object.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AbortSignal)
  
  
  A signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an AbortController object.
*)
module[@js.scope "AbortSignal"] rec AbortSignal : sig
  type t = [`AbortSignal | `EventTarget] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AbortSignal | `EventTarget]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AbortSignal | `EventTarget]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AbortSignal ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns true if this AbortSignal's AbortController has signaled to abort, and false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AbortSignal/aborted)
    
    
    Returns true if this AbortSignal's AbortController has signaled to abort, and false otherwise.
  *)
  val get_aborted: 'tags this -> bool [@@js.get "aborted"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AbortSignal/abort_event) *)
  val get_onabort: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onabort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AbortSignal/abort_event) *)
  val set_onabort: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onabort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AbortSignal/reason) *)
  val get_reason: 'tags this -> any [@@js.get "reason"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AbortSignal/throwIfAborted) *)
  val throwIfAborted: 'tags this -> unit [@@js.call "throwIfAborted"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'AbortSignalEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'AbortSignalEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AbortSignal/abort_static) *)
  val abort: ?reason:any -> unit -> t [@@js.global "abort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AbortSignal/timeout_static) *)
  val timeout: float -> t [@@js.global "timeout"]
end
and AddEventListenerOptions : sig
  type t = [`AddEventListenerOptions | `EventListenerOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AddEventListenerOptions | `EventListenerOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AddEventListenerOptions | `EventListenerOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AddEventListenerOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_once: 'tags this -> bool option [@@js.get "once"]
  val set_once: 'tags this -> bool -> unit [@@js.set "once"]
  val get_passive: 'tags this -> bool option [@@js.get "passive"]
  val set_passive: 'tags this -> bool -> unit [@@js.set "passive"]
  val get_signal: 'tags this -> AbortSignal.t option [@@js.get "signal"]
  val set_signal: 'tags this -> AbortSignal.t -> unit [@@js.set "signal"]
  val create: ?once:bool -> ?passive:bool -> ?signal:AbortSignal.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  An event which takes place in the DOM.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event)
*)
and[@js.scope "Event"] Event : sig
  type t = [`Event] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Event ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns true or false depending on how event was initialized. True if event goes through its target's ancestors in reverse tree order, and false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/bubbles)
  *)
  val get_bubbles: 'tags this -> bool [@@js.get "bubbles"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/cancelBubble) *)
  val get_cancelBubble: 'tags this -> bool [@@js.get "cancelBubble"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/cancelBubble) *)
  val set_cancelBubble: 'tags this -> bool -> unit [@@js.set "cancelBubble"]
  
  (**
    Returns true or false depending on how event was initialized. Its return value does not always carry meaning, but true can indicate that part of the operation during which event was dispatched, can be canceled by invoking the preventDefault() method.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/cancelable)
  *)
  val get_cancelable: 'tags this -> bool [@@js.get "cancelable"]
  
  (**
    Returns true or false depending on how event was initialized. True if event invokes listeners past a ShadowRoot node that is the root of its target, and false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/composed)
  *)
  val get_composed: 'tags this -> bool [@@js.get "composed"]
  
  (**
    Returns the object whose event listener's callback is currently being invoked.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/currentTarget)
  *)
  val get_currentTarget: 'tags this -> EventTarget.t option [@@js.get "currentTarget"]
  
  (**
    Returns true if preventDefault() was invoked successfully to indicate cancelation, and false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/defaultPrevented)
  *)
  val get_defaultPrevented: 'tags this -> bool [@@js.get "defaultPrevented"]
  
  (**
    Returns the event's phase, which is one of NONE, CAPTURING_PHASE, AT_TARGET, and BUBBLING_PHASE.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/eventPhase)
  *)
  val get_eventPhase: 'tags this -> float [@@js.get "eventPhase"]
  
  (**
    Returns true if event was dispatched by the user agent, and false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/isTrusted)
  *)
  val get_isTrusted: 'tags this -> bool [@@js.get "isTrusted"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/returnValue) *)
  val get_returnValue: 'tags this -> bool [@@js.get "returnValue"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/returnValue) *)
  val set_returnValue: 'tags this -> bool -> unit [@@js.set "returnValue"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/srcElement) *)
  val get_srcElement: 'tags this -> EventTarget.t option [@@js.get "srcElement"]
  
  (**
    Returns the object to which event is dispatched (its target).
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/target)
  *)
  val get_target: 'tags this -> EventTarget.t option [@@js.get "target"]
  
  (**
    Returns the event's timestamp as the number of milliseconds measured relative to the time origin.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/timeStamp)
  *)
  val get_timeStamp: 'tags this -> DOMHighResTimeStamp.t [@@js.get "timeStamp"]
  
  (**
    Returns the type of event, e.g. "click", "hashchange", or "submit".
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/type)
  *)
  val get_type: 'tags this -> string [@@js.get "type"]
  
  (**
    Returns the invocation target objects of event's path (objects on which listeners will be invoked), except for any nodes in shadow trees of which the shadow root's mode is "closed" that are not reachable from event's currentTarget.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/composedPath)
  *)
  val composedPath: 'tags this -> EventTarget.t list [@@js.call "composedPath"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/initEvent) *)
  val initEvent: 'tags this -> type_:string -> ?bubbles:bool -> ?cancelable:bool -> unit -> unit [@@js.call "initEvent"]
  
  (**
    If invoked when the cancelable attribute value is true, and while executing a listener for the event with passive set to false, signals to the operation that caused event to be dispatched that it needs to be canceled.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/preventDefault)
  *)
  val preventDefault: 'tags this -> unit [@@js.call "preventDefault"]
  
  (**
    Invoking this method prevents event from reaching any registered event listeners after the current one finishes running and, when dispatched in a tree, also prevents event from reaching any other objects.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/stopImmediatePropagation)
  *)
  val stopImmediatePropagation: 'tags this -> unit [@@js.call "stopImmediatePropagation"]
  
  (**
    When dispatched in a tree, invoking this method prevents event from reaching any objects other than the current object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/stopPropagation)
  *)
  val stopPropagation: 'tags this -> unit [@@js.call "stopPropagation"]
  val get_NONE: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "NONE"]
  val get_CAPTURING_PHASE: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "CAPTURING_PHASE"]
  val get_AT_TARGET: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "AT_TARGET"]
  val get_BUBBLING_PHASE: 'tags this -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "BUBBLING_PHASE"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: type_:string -> ?eventInitDict:EventInit.t -> unit -> t [@@js.create]
  val none: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "NONE"]
  val capturing_phase: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "CAPTURING_PHASE"]
  val at_target: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "AT_TARGET"]
  val bubbling_phase: unit -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "BUBBLING_PHASE"]
end
and EventListener : sig
  type t = [`EventListener] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventListener]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventListener]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EventListener ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> evt:Event.t -> unit [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
and EventListenerObject : sig
  type t = [`EventListenerObject] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventListenerObject]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventListenerObject]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EventListenerObject ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val handleEvent: 'tags this -> object_:Event.t -> unit [@@js.call "handleEvent"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
and EventListenerOrEventListenerObject : sig
  type t = (EventListener.t, EventListenerObject.t) union2
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  EventTarget is a DOM interface implemented by objects that can receive events and may have listeners for them.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget)
*)
and[@js.scope "EventTarget"] EventTarget : sig
  type t = [`EventTarget] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EventTarget ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:string -> callback:EventListenerOrEventListenerObject.t option -> ?options:([`U1 of AddEventListenerOptions.t | `U2 of bool] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Dispatches a synthetic event event to target and returns true if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/dispatchEvent)
  *)
  val dispatchEvent: 'tags this -> event:Event.t -> bool [@@js.call "dispatchEvent"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:string -> callback:EventListenerOrEventListenerObject.t option -> ?options:([`U1 of EventListenerOptions.t | `U2 of bool] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  A chunk of media to be passed into an HTMLMediaElement and played, via a MediaSourceÂ object. This can be made up of one or several media segments.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SourceBuffer)
*)
module[@js.scope "SourceBuffer"] SourceBuffer : sig
  type t = [`EventTarget | `SourceBuffer] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `SourceBuffer]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `SourceBuffer]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SourceBuffer ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SourceBuffer/appendWindowEnd) *)
  val get_appendWindowEnd: 'tags this -> float [@@js.get "appendWindowEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SourceBuffer/appendWindowEnd) *)
  val set_appendWindowEnd: 'tags this -> float -> unit [@@js.set "appendWindowEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SourceBuffer/appendWindowStart) *)
  val get_appendWindowStart: 'tags this -> float [@@js.get "appendWindowStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SourceBuffer/appendWindowStart) *)
  val set_appendWindowStart: 'tags this -> float -> unit [@@js.set "appendWindowStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SourceBuffer/buffered) *)
  val get_buffered: 'tags this -> TimeRanges.t [@@js.get "buffered"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SourceBuffer/mode) *)
  val get_mode: 'tags this -> AppendMode.t [@@js.get "mode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SourceBuffer/mode) *)
  val set_mode: 'tags this -> AppendMode.t -> unit [@@js.set "mode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SourceBuffer/abort_event) *)
  val get_onabort: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onabort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SourceBuffer/abort_event) *)
  val set_onabort: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onabort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SourceBuffer/error_event) *)
  val get_onerror: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SourceBuffer/error_event) *)
  val set_onerror: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SourceBuffer/update_event) *)
  val get_onupdate: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onupdate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SourceBuffer/update_event) *)
  val set_onupdate: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onupdate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SourceBuffer/updateend_event) *)
  val get_onupdateend: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onupdateend"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SourceBuffer/updateend_event) *)
  val set_onupdateend: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onupdateend"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SourceBuffer/updatestart_event) *)
  val get_onupdatestart: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onupdatestart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SourceBuffer/updatestart_event) *)
  val set_onupdatestart: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onupdatestart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SourceBuffer/timestampOffset) *)
  val get_timestampOffset: 'tags this -> float [@@js.get "timestampOffset"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SourceBuffer/timestampOffset) *)
  val set_timestampOffset: 'tags this -> float -> unit [@@js.set "timestampOffset"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SourceBuffer/updating) *)
  val get_updating: 'tags this -> bool [@@js.get "updating"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SourceBuffer/abort) *)
  val abort: 'tags this -> unit [@@js.call "abort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SourceBuffer/appendBuffer) *)
  val appendBuffer: 'tags this -> data:BufferSource.t -> unit [@@js.call "appendBuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SourceBuffer/changeType) *)
  val changeType: 'tags this -> type_:string -> unit [@@js.call "changeType"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SourceBuffer/remove) *)
  val remove: 'tags this -> start:float -> end_:float -> unit [@@js.call "remove"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SourceBufferEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SourceBufferEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  A simple container list for multiple SourceBuffer objects.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SourceBufferList)
*)
module[@js.scope "SourceBufferList"] SourceBufferList : sig
  type t = [`EventTarget | `SourceBufferList] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `SourceBufferList]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `SourceBufferList]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SourceBufferList ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> SourceBuffer.t IterableIterator.t *)
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SourceBufferList/length) *)
  val get_length: 'tags this -> float [@@js.get "length"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SourceBufferList/addsourcebuffer_event) *)
  val get_onaddsourcebuffer: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onaddsourcebuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SourceBufferList/addsourcebuffer_event) *)
  val set_onaddsourcebuffer: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onaddsourcebuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SourceBufferList/removesourcebuffer_event) *)
  val get_onremovesourcebuffer: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onremovesourcebuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SourceBufferList/removesourcebuffer_event) *)
  val set_onremovesourcebuffer: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onremovesourcebuffer"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SourceBufferListEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SourceBufferListEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val get: 'tags this -> float -> SourceBuffer.t [@@js.index_get]
  val set: 'tags this -> float -> SourceBuffer.t -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module ReadyState : sig
  type t = ([`L_s255_closed[@js "closed"] | `L_s365_ended[@js "ended"] | `L_s704_open[@js "open"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module EndOfStreamError : sig
  type t = ([`L_s303_decode[@js "decode"] | `L_s668_network[@js "network"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  This Media Source Extensions API interface represents a source of media data for an HTMLMediaElement object. A MediaSource object can be attached to a HTMLMediaElement to be played in the user agent.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaSource)
*)
module[@js.scope "MediaSource"] MediaSource : sig
  type t = [`EventTarget | `MediaSource] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `MediaSource]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `MediaSource]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaSource ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaSource/activeSourceBuffers) *)
  val get_activeSourceBuffers: 'tags this -> SourceBufferList.t [@@js.get "activeSourceBuffers"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaSource/duration) *)
  val get_duration: 'tags this -> float [@@js.get "duration"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaSource/duration) *)
  val set_duration: 'tags this -> float -> unit [@@js.set "duration"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaSource/sourceclose_event) *)
  val get_onsourceclose: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onsourceclose"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaSource/sourceclose_event) *)
  val set_onsourceclose: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onsourceclose"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaSource/sourceended_event) *)
  val get_onsourceended: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onsourceended"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaSource/sourceended_event) *)
  val set_onsourceended: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onsourceended"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaSource/sourceopen_event) *)
  val get_onsourceopen: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onsourceopen"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaSource/sourceopen_event) *)
  val set_onsourceopen: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onsourceopen"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaSource/readyState) *)
  val get_readyState: 'tags this -> ReadyState.t [@@js.get "readyState"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaSource/sourceBuffers) *)
  val get_sourceBuffers: 'tags this -> SourceBufferList.t [@@js.get "sourceBuffers"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaSource/addSourceBuffer) *)
  val addSourceBuffer: 'tags this -> type_:string -> SourceBuffer.t [@@js.call "addSourceBuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaSource/clearLiveSeekableRange) *)
  val clearLiveSeekableRange: 'tags this -> unit [@@js.call "clearLiveSeekableRange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaSource/endOfStream) *)
  val endOfStream: 'tags this -> ?error:EndOfStreamError.t -> unit -> unit [@@js.call "endOfStream"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaSource/removeSourceBuffer) *)
  val removeSourceBuffer: 'tags this -> sourceBuffer:SourceBuffer.t -> unit [@@js.call "removeSourceBuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaSource/setLiveSeekableRange) *)
  val setLiveSeekableRange: 'tags this -> start:float -> end_:float -> unit [@@js.call "setLiveSeekableRange"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'MediaSourceEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'MediaSourceEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaSource/isTypeSupported_static) *)
  val isTypeSupported: string -> bool [@@js.global "isTypeSupported"]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController) *)
module[@js.scope "ReadableStreamDefaultController"] ReadableStreamDefaultController : sig
  type 'R t = [`ReadableStreamDefaultController of 'R] intf [@@js.custom { of_js=(fun _R -> Obj.magic); to_js=(fun _R -> Obj.magic) }]
  type t_0 = any t
  [@@@js.stop]
  type 'R tags = [`ReadableStreamDefaultController of 'R]
  type tags_0 = any tags
  [@@@js.start]
  [@@@js.implem 
    type 'R tags = [`ReadableStreamDefaultController of 'R]
    type tags_0 = any tags
  ]
  type ('tags, 'R) this = 'tags intf constraint 'tags = [> `ReadableStreamDefaultController of 'R ]
  val t_to_js: ('R -> Ojs.t) -> 'R t -> Ojs.t
  val t_of_js: (Ojs.t -> 'R) -> Ojs.t -> 'R t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController/desiredSize) *)
  val get_desiredSize: ('tags, 'R) this -> float option [@@js.get "desiredSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController/close) *)
  val close: ('tags, 'R) this -> unit [@@js.call "close"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController/enqueue) *)
  val enqueue: ('tags, 'R) this -> ?chunk:'R -> unit -> unit [@@js.call "enqueue"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController/error) *)
  val error: ('tags, 'R) this -> ?e:any -> unit -> unit [@@js.call "error"]
  val cast_from: ('tags, 'R) this -> 'R t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t_0 [@@js.get "prototype"]
  val create: unit -> t_0 [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBRequest) *)
module[@js.scope "ReadableStreamBYOBRequest"] ReadableStreamBYOBRequest : sig
  type t = [`ReadableStreamBYOBRequest] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ReadableStreamBYOBRequest]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ReadableStreamBYOBRequest]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ReadableStreamBYOBRequest ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBRequest/view) *)
  val get_view: 'tags this -> ArrayBufferView.t option [@@js.get "view"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBRequest/respond) *)
  val respond: 'tags this -> bytesWritten:float -> unit [@@js.call "respond"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBRequest/respondWithNewView) *)
  val respondWithNewView: 'tags this -> view:ArrayBufferView.t -> unit [@@js.call "respondWithNewView"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController) *)
module[@js.scope "ReadableByteStreamController"] ReadableByteStreamController : sig
  type t = [`ReadableByteStreamController] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ReadableByteStreamController]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ReadableByteStreamController]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ReadableByteStreamController ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController/byobRequest) *)
  val get_byobRequest: 'tags this -> ReadableStreamBYOBRequest.t option [@@js.get "byobRequest"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController/desiredSize) *)
  val get_desiredSize: 'tags this -> float option [@@js.get "desiredSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController/close) *)
  val close: 'tags this -> unit [@@js.call "close"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController/enqueue) *)
  val enqueue: 'tags this -> chunk:ArrayBufferView.t -> unit [@@js.call "enqueue"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController/error) *)
  val error: 'tags this -> ?e:any -> unit -> unit [@@js.call "error"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module ReadableStreamController : sig
  type 'T t = (ReadableByteStreamController.t, 'T ReadableStreamDefaultController.t) union2
  val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
  val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
end
module UnderlyingSourceStartCallback : sig
  type 'R t = [`UnderlyingSourceStartCallback of 'R] intf [@@js.custom { of_js=(fun _R -> Obj.magic); to_js=(fun _R -> Obj.magic) }]
  [@@@js.stop]
  type 'R tags = [`UnderlyingSourceStartCallback of 'R]
  [@@@js.start]
  [@@@js.implem 
    type 'R tags = [`UnderlyingSourceStartCallback of 'R]
  ]
  type ('tags, 'R) this = 'tags intf constraint 'tags = [> `UnderlyingSourceStartCallback of 'R ]
  val t_to_js: ('R -> Ojs.t) -> 'R t -> Ojs.t
  val t_of_js: (Ojs.t -> 'R) -> Ojs.t -> 'R t
  val apply: ('tags, 'R) this -> controller:'R ReadableStreamController.t -> any [@@js.apply]
  val cast_from: ('tags, 'R) this -> 'R t [@@js.custom let cast_from = Obj.magic]
end
module UnderlyingSourcePullCallback : sig
  type 'R t = [`UnderlyingSourcePullCallback of 'R] intf [@@js.custom { of_js=(fun _R -> Obj.magic); to_js=(fun _R -> Obj.magic) }]
  [@@@js.stop]
  type 'R tags = [`UnderlyingSourcePullCallback of 'R]
  [@@@js.start]
  [@@@js.implem 
    type 'R tags = [`UnderlyingSourcePullCallback of 'R]
  ]
  type ('tags, 'R) this = 'tags intf constraint 'tags = [> `UnderlyingSourcePullCallback of 'R ]
  val t_to_js: ('R -> Ojs.t) -> 'R t -> Ojs.t
  val t_of_js: (Ojs.t -> 'R) -> Ojs.t -> 'R t
  val apply: ('tags, 'R) this -> controller:'R ReadableStreamController.t -> (unit, unit PromiseLike.t) union2 [@@js.apply]
  val cast_from: ('tags, 'R) this -> 'R t [@@js.custom let cast_from = Obj.magic]
end
module ReadableStreamType : sig
  type t = ([`L_s222_bytes[@js "bytes"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module UnderlyingSourceCancelCallback : sig
  type t = [`UnderlyingSourceCancelCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`UnderlyingSourceCancelCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`UnderlyingSourceCancelCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `UnderlyingSourceCancelCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> ?reason:any -> unit -> (unit, unit PromiseLike.t) union2 [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module UnderlyingSource : sig
  type 'R t = [`UnderlyingSource of 'R] intf [@@js.custom { of_js=(fun _R -> Obj.magic); to_js=(fun _R -> Obj.magic) }]
  type t_0 = any t
  [@@@js.stop]
  type 'R tags = [`UnderlyingSource of 'R]
  type tags_0 = any tags
  [@@@js.start]
  [@@@js.implem 
    type 'R tags = [`UnderlyingSource of 'R]
    type tags_0 = any tags
  ]
  type ('tags, 'R) this = 'tags intf constraint 'tags = [> `UnderlyingSource of 'R ]
  val t_to_js: ('R -> Ojs.t) -> 'R t -> Ojs.t
  val t_of_js: (Ojs.t -> 'R) -> Ojs.t -> 'R t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val get_autoAllocateChunkSize: ('tags, 'R) this -> float option [@@js.get "autoAllocateChunkSize"]
  val set_autoAllocateChunkSize: ('tags, 'R) this -> float -> unit [@@js.set "autoAllocateChunkSize"]
  val get_cancel: ('tags, 'R) this -> UnderlyingSourceCancelCallback.t option [@@js.get "cancel"]
  val set_cancel: ('tags, 'R) this -> UnderlyingSourceCancelCallback.t -> unit [@@js.set "cancel"]
  val get_pull: ('tags, 'R) this -> 'R UnderlyingSourcePullCallback.t option [@@js.get "pull"]
  val set_pull: ('tags, 'R) this -> 'R UnderlyingSourcePullCallback.t -> unit [@@js.set "pull"]
  val get_start: ('tags, 'R) this -> 'R UnderlyingSourceStartCallback.t option [@@js.get "start"]
  val set_start: ('tags, 'R) this -> 'R UnderlyingSourceStartCallback.t -> unit [@@js.set "start"]
  val get_type: ('tags, 'R) this -> ReadableStreamType.t option [@@js.get "type"]
  val set_type: ('tags, 'R) this -> ReadableStreamType.t -> unit [@@js.set "type"]
  val create: ?autoAllocateChunkSize:float -> ?cancel:UnderlyingSourceCancelCallback.t -> ?pull:'R UnderlyingSourcePullCallback.t -> ?start:'R UnderlyingSourceStartCallback.t -> ?type_:(ReadableStreamType.t[@js "type"]) -> unit -> 'R t [@@js.builder]
  val cast_from: ('tags, 'R) this -> 'R t [@@js.custom let cast_from = Obj.magic]
end
module UnderlyingDefaultSource : sig
  type 'R t = [`UnderlyingDefaultSource of 'R] intf [@@js.custom { of_js=(fun _R -> Obj.magic); to_js=(fun _R -> Obj.magic) }]
  type t_0 = any t
  [@@@js.stop]
  type 'R tags = [`UnderlyingDefaultSource of 'R]
  type tags_0 = any tags
  [@@@js.start]
  [@@@js.implem 
    type 'R tags = [`UnderlyingDefaultSource of 'R]
    type tags_0 = any tags
  ]
  type ('tags, 'R) this = 'tags intf constraint 'tags = [> `UnderlyingDefaultSource of 'R ]
  val t_to_js: ('R -> Ojs.t) -> 'R t -> Ojs.t
  val t_of_js: (Ojs.t -> 'R) -> Ojs.t -> 'R t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val get_cancel: ('tags, 'R) this -> UnderlyingSourceCancelCallback.t option [@@js.get "cancel"]
  val set_cancel: ('tags, 'R) this -> UnderlyingSourceCancelCallback.t -> unit [@@js.set "cancel"]
  val get_pull: ('tags, 'R) this -> ('R ReadableStreamDefaultController.t -> (unit, unit PromiseLike.t) union2) option [@@js.get "pull"]
  val set_pull: ('tags, 'R) this -> ('R ReadableStreamDefaultController.t -> ([`U1 of unit | `U2 of unit PromiseLike.t] [@js.union])) -> unit [@@js.set "pull"]
  val get_start: ('tags, 'R) this -> ('R ReadableStreamDefaultController.t -> any) option [@@js.get "start"]
  val set_start: ('tags, 'R) this -> ('R ReadableStreamDefaultController.t -> any) -> unit [@@js.set "start"]
  val get_type: ('tags, 'R) this -> undefined [@@js.get "type"]
  val set_type: ('tags, 'R) this -> undefined -> unit [@@js.set "type"]
  val create: ?cancel:UnderlyingSourceCancelCallback.t -> ?pull:('R ReadableStreamDefaultController.t -> (unit, unit PromiseLike.t) union2) -> ?start:('R ReadableStreamDefaultController.t -> any) -> ?type_:(never[@js "type"]) -> unit -> 'R t [@@js.builder]
  val cast_from: ('tags, 'R) this -> 'R t [@@js.custom let cast_from = Obj.magic]
end
module UnderlyingByteSource : sig
  type t = [`UnderlyingByteSource] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`UnderlyingByteSource]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`UnderlyingByteSource]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `UnderlyingByteSource ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_autoAllocateChunkSize: 'tags this -> float option [@@js.get "autoAllocateChunkSize"]
  val set_autoAllocateChunkSize: 'tags this -> float -> unit [@@js.set "autoAllocateChunkSize"]
  val get_cancel: 'tags this -> UnderlyingSourceCancelCallback.t option [@@js.get "cancel"]
  val set_cancel: 'tags this -> UnderlyingSourceCancelCallback.t -> unit [@@js.set "cancel"]
  val get_pull: 'tags this -> (ReadableByteStreamController.t -> (unit, unit PromiseLike.t) union2) option [@@js.get "pull"]
  val set_pull: 'tags this -> (ReadableByteStreamController.t -> ([`U1 of unit | `U2 of unit PromiseLike.t] [@js.union])) -> unit [@@js.set "pull"]
  val get_start: 'tags this -> (ReadableByteStreamController.t -> any) option [@@js.get "start"]
  val set_start: 'tags this -> (ReadableByteStreamController.t -> any) -> unit [@@js.set "start"]
  val get_type: 'tags this -> ([`L_s222_bytes[@js "bytes"]] [@js.enum]) [@@js.get "type"]
  val set_type: 'tags this -> ([`L_s222_bytes[@js "bytes"]] [@js.enum]) -> unit [@@js.set "type"]
  val create: ?autoAllocateChunkSize:float -> ?cancel:UnderlyingSourceCancelCallback.t -> ?pull:(ReadableByteStreamController.t -> (unit, unit PromiseLike.t) union2) -> ?start:(ReadableByteStreamController.t -> any) -> type_:(([`L_s222_bytes[@js "bytes"]] [@js.enum])[@js "type"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module StreamPipeOptions : sig
  type t = [`StreamPipeOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`StreamPipeOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`StreamPipeOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `StreamPipeOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_preventAbort: 'tags this -> bool option [@@js.get "preventAbort"]
  val set_preventAbort: 'tags this -> bool -> unit [@@js.set "preventAbort"]
  val get_preventCancel: 'tags this -> bool option [@@js.get "preventCancel"]
  val set_preventCancel: 'tags this -> bool -> unit [@@js.set "preventCancel"]
  
  (**
    Pipes this readable stream to a given writable stream destination. The way in which the piping process behaves under various error conditions can be customized with a number of passed options. It returns a promise that fulfills when the piping process completes successfully, or rejects if any errors were encountered.
    
    Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.
    
    Errors and closures of the source and destination streams propagate as follows:
    
    An error in this source readable stream will abort destination, unless preventAbort is truthy. The returned promise will be rejected with the source's error, or with any error that occurs during aborting the destination.
    
    An error in destination will cancel this source readable stream, unless preventCancel is truthy. The returned promise will be rejected with the destination's error, or with any error that occurs during canceling the source.
    
    When this source readable stream closes, destination will be closed, unless preventClose is truthy. The returned promise will be fulfilled once this process completes, unless an error is encountered while closing the destination, in which case it will be rejected with that error.
    
    If destination starts out closed or closing, this source readable stream will be canceled, unless preventCancel is true. The returned promise will be rejected with an error indicating piping to a closed stream failed, or with any error that occurs during canceling the source.
    
    The signal option can be set to an AbortSignal to allow aborting an ongoing pipe operation via the corresponding AbortController. In this case, this source readable stream will be canceled, and destination aborted, unless the respective options preventCancel or preventAbort are set.
  *)
  val get_preventClose: 'tags this -> bool option [@@js.get "preventClose"]
  
  (**
    Pipes this readable stream to a given writable stream destination. The way in which the piping process behaves under various error conditions can be customized with a number of passed options. It returns a promise that fulfills when the piping process completes successfully, or rejects if any errors were encountered.
    
    Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.
    
    Errors and closures of the source and destination streams propagate as follows:
    
    An error in this source readable stream will abort destination, unless preventAbort is truthy. The returned promise will be rejected with the source's error, or with any error that occurs during aborting the destination.
    
    An error in destination will cancel this source readable stream, unless preventCancel is truthy. The returned promise will be rejected with the destination's error, or with any error that occurs during canceling the source.
    
    When this source readable stream closes, destination will be closed, unless preventClose is truthy. The returned promise will be fulfilled once this process completes, unless an error is encountered while closing the destination, in which case it will be rejected with that error.
    
    If destination starts out closed or closing, this source readable stream will be canceled, unless preventCancel is true. The returned promise will be rejected with an error indicating piping to a closed stream failed, or with any error that occurs during canceling the source.
    
    The signal option can be set to an AbortSignal to allow aborting an ongoing pipe operation via the corresponding AbortController. In this case, this source readable stream will be canceled, and destination aborted, unless the respective options preventCancel or preventAbort are set.
  *)
  val set_preventClose: 'tags this -> bool -> unit [@@js.set "preventClose"]
  val get_signal: 'tags this -> AbortSignal.t option [@@js.get "signal"]
  val set_signal: 'tags this -> AbortSignal.t -> unit [@@js.set "signal"]
  val create: ?preventAbort:bool -> ?preventCancel:bool -> ?preventClose:bool -> ?signal:AbortSignal.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  This Streams API interface represents a controller allowing control of aÂ WritableStream's state. When constructing a WritableStream, the underlying sink is given a corresponding WritableStreamDefaultController instance to manipulate.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultController)
*)
module[@js.scope "WritableStreamDefaultController"] WritableStreamDefaultController : sig
  type t = [`WritableStreamDefaultController] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WritableStreamDefaultController]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WritableStreamDefaultController]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WritableStreamDefaultController ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultController/signal) *)
  val get_signal: 'tags this -> AbortSignal.t [@@js.get "signal"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultController/error) *)
  val error: 'tags this -> ?e:any -> unit -> unit [@@js.call "error"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module UnderlyingSinkWriteCallback : sig
  type 'W t = [`UnderlyingSinkWriteCallback of 'W] intf [@@js.custom { of_js=(fun _W -> Obj.magic); to_js=(fun _W -> Obj.magic) }]
  [@@@js.stop]
  type 'W tags = [`UnderlyingSinkWriteCallback of 'W]
  [@@@js.start]
  [@@@js.implem 
    type 'W tags = [`UnderlyingSinkWriteCallback of 'W]
  ]
  type ('tags, 'W) this = 'tags intf constraint 'tags = [> `UnderlyingSinkWriteCallback of 'W ]
  val t_to_js: ('W -> Ojs.t) -> 'W t -> Ojs.t
  val t_of_js: (Ojs.t -> 'W) -> Ojs.t -> 'W t
  val apply: ('tags, 'W) this -> chunk:'W -> controller:WritableStreamDefaultController.t -> (unit, unit PromiseLike.t) union2 [@@js.apply]
  val cast_from: ('tags, 'W) this -> 'W t [@@js.custom let cast_from = Obj.magic]
end
module UnderlyingSinkStartCallback : sig
  type t = [`UnderlyingSinkStartCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`UnderlyingSinkStartCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`UnderlyingSinkStartCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `UnderlyingSinkStartCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> controller:WritableStreamDefaultController.t -> any [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module UnderlyingSinkCloseCallback : sig
  type t = [`UnderlyingSinkCloseCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`UnderlyingSinkCloseCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`UnderlyingSinkCloseCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `UnderlyingSinkCloseCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> (unit, unit PromiseLike.t) union2 [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module UnderlyingSinkAbortCallback : sig
  type t = [`UnderlyingSinkAbortCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`UnderlyingSinkAbortCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`UnderlyingSinkAbortCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `UnderlyingSinkAbortCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> ?reason:any -> unit -> (unit, unit PromiseLike.t) union2 [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module UnderlyingSink : sig
  type 'W t = [`UnderlyingSink of 'W] intf [@@js.custom { of_js=(fun _W -> Obj.magic); to_js=(fun _W -> Obj.magic) }]
  type t_0 = any t
  [@@@js.stop]
  type 'W tags = [`UnderlyingSink of 'W]
  type tags_0 = any tags
  [@@@js.start]
  [@@@js.implem 
    type 'W tags = [`UnderlyingSink of 'W]
    type tags_0 = any tags
  ]
  type ('tags, 'W) this = 'tags intf constraint 'tags = [> `UnderlyingSink of 'W ]
  val t_to_js: ('W -> Ojs.t) -> 'W t -> Ojs.t
  val t_of_js: (Ojs.t -> 'W) -> Ojs.t -> 'W t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val get_abort: ('tags, 'W) this -> UnderlyingSinkAbortCallback.t option [@@js.get "abort"]
  val set_abort: ('tags, 'W) this -> UnderlyingSinkAbortCallback.t -> unit [@@js.set "abort"]
  val get_close: ('tags, 'W) this -> UnderlyingSinkCloseCallback.t option [@@js.get "close"]
  val set_close: ('tags, 'W) this -> UnderlyingSinkCloseCallback.t -> unit [@@js.set "close"]
  val get_start: ('tags, 'W) this -> UnderlyingSinkStartCallback.t option [@@js.get "start"]
  val set_start: ('tags, 'W) this -> UnderlyingSinkStartCallback.t -> unit [@@js.set "start"]
  val get_type: ('tags, 'W) this -> undefined [@@js.get "type"]
  val set_type: ('tags, 'W) this -> undefined -> unit [@@js.set "type"]
  val get_write: ('tags, 'W) this -> 'W UnderlyingSinkWriteCallback.t option [@@js.get "write"]
  val set_write: ('tags, 'W) this -> 'W UnderlyingSinkWriteCallback.t -> unit [@@js.set "write"]
  val create: ?abort:UnderlyingSinkAbortCallback.t -> ?close:UnderlyingSinkCloseCallback.t -> ?start:UnderlyingSinkStartCallback.t -> ?type_:(never[@js "type"]) -> ?write:'W UnderlyingSinkWriteCallback.t -> unit -> 'W t [@@js.builder]
  val cast_from: ('tags, 'W) this -> 'W t [@@js.custom let cast_from = Obj.magic]
end
module QueuingStrategySize : sig
  type 'T t = [`QueuingStrategySize of 'T] intf [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
  type t_0 = any t
  [@@@js.stop]
  type 'T tags = [`QueuingStrategySize of 'T]
  type tags_0 = any tags
  [@@@js.start]
  [@@@js.implem 
    type 'T tags = [`QueuingStrategySize of 'T]
    type tags_0 = any tags
  ]
  type ('tags, 'T) this = 'tags intf constraint 'tags = [> `QueuingStrategySize of 'T ]
  val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
  val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val apply: ('tags, 'T) this -> chunk:'T -> float [@@js.apply]
  val cast_from: ('tags, 'T) this -> 'T t [@@js.custom let cast_from = Obj.magic]
end
module QueuingStrategy : sig
  type 'T t = [`QueuingStrategy of 'T] intf [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
  type t_0 = any t
  [@@@js.stop]
  type 'T tags = [`QueuingStrategy of 'T]
  type tags_0 = any tags
  [@@@js.start]
  [@@@js.implem 
    type 'T tags = [`QueuingStrategy of 'T]
    type tags_0 = any tags
  ]
  type ('tags, 'T) this = 'tags intf constraint 'tags = [> `QueuingStrategy of 'T ]
  val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
  val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val get_highWaterMark: ('tags, 'T) this -> float option [@@js.get "highWaterMark"]
  val set_highWaterMark: ('tags, 'T) this -> float -> unit [@@js.set "highWaterMark"]
  val get_size: ('tags, 'T) this -> 'T QueuingStrategySize.t option [@@js.get "size"]
  val set_size: ('tags, 'T) this -> 'T QueuingStrategySize.t -> unit [@@js.set "size"]
  val create: ?highWaterMark:float -> ?size:'T QueuingStrategySize.t -> unit -> 'T t [@@js.builder]
  val cast_from: ('tags, 'T) this -> 'T t [@@js.custom let cast_from = Obj.magic]
end

(**
  This Streams API interface providesÂ a standard abstraction for writing streaming data to a destination, known as a sink. This object comes with built-in backpressure and queuing.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStream)
*)
module[@js.scope "WritableStream"] rec WritableStream : sig
  type 'W t = [`WritableStream of 'W] intf [@@js.custom { of_js=(fun _W -> Obj.magic); to_js=(fun _W -> Obj.magic) }]
  type t_0 = any t
  [@@@js.stop]
  type 'W tags = [`WritableStream of 'W]
  type tags_0 = any tags
  [@@@js.start]
  [@@@js.implem 
    type 'W tags = [`WritableStream of 'W]
    type tags_0 = any tags
  ]
  type ('tags, 'W) this = 'tags intf constraint 'tags = [> `WritableStream of 'W ]
  val t_to_js: ('W -> Ojs.t) -> 'W t -> Ojs.t
  val t_of_js: (Ojs.t -> 'W) -> Ojs.t -> 'W t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStream/locked) *)
  val get_locked: ('tags, 'W) this -> bool [@@js.get "locked"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStream/abort) *)
  val abort: ('tags, 'W) this -> ?reason:any -> unit -> unit Promise.t [@@js.call "abort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStream/close) *)
  val close: ('tags, 'W) this -> unit Promise.t [@@js.call "close"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStream/getWriter) *)
  val getWriter: ('tags, 'W) this -> 'W WritableStreamDefaultWriter.t [@@js.call "getWriter"]
  val cast_from: ('tags, 'W) this -> 'W t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t_0 [@@js.get "prototype"]
  val create: ?underlyingSink:'W UnderlyingSink.t -> ?strategy:'W QueuingStrategy.t -> unit -> 'W t [@@js.create]
end

(**
  This Streams API interface is the object returned by WritableStream.getWriter() and once created locks the < writer to the WritableStream ensuring that no other streams can write to the underlying sink.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter)
*)
and[@js.scope "WritableStreamDefaultWriter"] WritableStreamDefaultWriter : sig
  type 'W t = [`WritableStreamDefaultWriter of 'W] intf [@@js.custom { of_js=(fun _W -> Obj.magic); to_js=(fun _W -> Obj.magic) }]
  type t_0 = any t
  [@@@js.stop]
  type 'W tags = [`WritableStreamDefaultWriter of 'W]
  type tags_0 = any tags
  [@@@js.start]
  [@@@js.implem 
    type 'W tags = [`WritableStreamDefaultWriter of 'W]
    type tags_0 = any tags
  ]
  type ('tags, 'W) this = 'tags intf constraint 'tags = [> `WritableStreamDefaultWriter of 'W ]
  val t_to_js: ('W -> Ojs.t) -> 'W t -> Ojs.t
  val t_of_js: (Ojs.t -> 'W) -> Ojs.t -> 'W t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/closed) *)
  val get_closed: ('tags, 'W) this -> undefined Promise.t [@@js.get "closed"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/desiredSize) *)
  val get_desiredSize: ('tags, 'W) this -> float option [@@js.get "desiredSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/ready) *)
  val get_ready: ('tags, 'W) this -> undefined Promise.t [@@js.get "ready"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/abort) *)
  val abort: ('tags, 'W) this -> ?reason:any -> unit -> unit Promise.t [@@js.call "abort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/close) *)
  val close: ('tags, 'W) this -> unit Promise.t [@@js.call "close"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/releaseLock) *)
  val releaseLock: ('tags, 'W) this -> unit [@@js.call "releaseLock"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/write) *)
  val write: ('tags, 'W) this -> ?chunk:'W -> unit -> unit Promise.t [@@js.call "write"]
  val cast_from: ('tags, 'W) this -> 'W t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t_0 [@@js.get "prototype"]
  val create: 'W WritableStream.t -> 'W t [@@js.create]
end
module ReadableStreamReaderMode : sig
  type t = ([`L_s221_byob[@js "byob"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module ReadableStreamGetReaderOptions : sig
  type t = [`ReadableStreamGetReaderOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ReadableStreamGetReaderOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ReadableStreamGetReaderOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ReadableStreamGetReaderOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Creates a ReadableStreamBYOBReader and locks the stream to the new reader.
    
    This call behaves the same way as the no-argument variant, except that it only works on readable byte streams, i.e. streams which were constructed specifically with the ability to handle "bring your own buffer" reading. The returned BYOB reader provides the ability to directly read individual chunks from the stream via its read() method, into developer-supplied buffers, allowing more precise control over allocation.
  *)
  val get_mode: 'tags this -> ReadableStreamReaderMode.t option [@@js.get "mode"]
  
  (**
    Creates a ReadableStreamBYOBReader and locks the stream to the new reader.
    
    This call behaves the same way as the no-argument variant, except that it only works on readable byte streams, i.e. streams which were constructed specifically with the ability to handle "bring your own buffer" reading. The returned BYOB reader provides the ability to directly read individual chunks from the stream via its read() method, into developer-supplied buffers, allowing more precise control over allocation.
  *)
  val set_mode: 'tags this -> ReadableStreamReaderMode.t -> unit [@@js.set "mode"]
  val create: ?mode:ReadableStreamReaderMode.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ReadableStreamReadValueResult : sig
  type 'T t = [`ReadableStreamReadValueResult of 'T] intf [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
  [@@@js.stop]
  type 'T tags = [`ReadableStreamReadValueResult of 'T]
  [@@@js.start]
  [@@@js.implem 
    type 'T tags = [`ReadableStreamReadValueResult of 'T]
  ]
  type ('tags, 'T) this = 'tags intf constraint 'tags = [> `ReadableStreamReadValueResult of 'T ]
  val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
  val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
  val get_done: ('tags, 'T) this -> ([`L_b_false[@js false]] [@js.enum]) [@@js.get "done"]
  val set_done: ('tags, 'T) this -> ([`L_b_false[@js false]] [@js.enum]) -> unit [@@js.set "done"]
  val get_value: ('tags, 'T) this -> 'T [@@js.get "value"]
  val set_value: ('tags, 'T) this -> 'T -> unit [@@js.set "value"]
  val create: done_:(([`L_b_false[@js false]] [@js.enum])[@js "done"]) -> value:'T -> unit -> 'T t [@@js.builder]
  val cast_from: ('tags, 'T) this -> 'T t [@@js.custom let cast_from = Obj.magic]
end
module ReadableStreamReadDoneResult : sig
  type 'T t = [`ReadableStreamReadDoneResult of 'T] intf [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
  [@@@js.stop]
  type 'T tags = [`ReadableStreamReadDoneResult of 'T]
  [@@@js.start]
  [@@@js.implem 
    type 'T tags = [`ReadableStreamReadDoneResult of 'T]
  ]
  type ('tags, 'T) this = 'tags intf constraint 'tags = [> `ReadableStreamReadDoneResult of 'T ]
  val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
  val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
  val get_done: ('tags, 'T) this -> ([`L_b_true[@js true]] [@js.enum]) [@@js.get "done"]
  val set_done: ('tags, 'T) this -> ([`L_b_true[@js true]] [@js.enum]) -> unit [@@js.set "done"]
  val get_value: ('tags, 'T) this -> 'T option [@@js.get "value"]
  val set_value: ('tags, 'T) this -> 'T -> unit [@@js.set "value"]
  val create: done_:(([`L_b_true[@js true]] [@js.enum])[@js "done"]) -> ?value:'T -> unit -> 'T t [@@js.builder]
  val cast_from: ('tags, 'T) this -> 'T t [@@js.custom let cast_from = Obj.magic]
end
module ReadableStreamReadResult : sig
  type 'T t = ([`U_b_false of 'T ReadableStreamReadValueResult.t [@js false] | `U_b_true of 'T ReadableStreamReadDoneResult.t [@js true]] [@js.union on_field "done"])
  val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
  val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
end
module ReadableStreamGenericReader : sig
  type t = [`ReadableStreamGenericReader] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ReadableStreamGenericReader]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ReadableStreamGenericReader]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ReadableStreamGenericReader ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader/closed) *)
  val get_closed: 'tags this -> undefined Promise.t [@@js.get "closed"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader/cancel) *)
  val cancel: 'tags this -> ?reason:any -> unit -> unit Promise.t [@@js.call "cancel"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  This Streams API interface represents a readable stream of byte data. The Fetch API offers a concrete instance of a ReadableStream through the body property of a Response object.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStream)
*)
module[@js.scope "ReadableStream"] rec ReadableStream : sig
  module AnonymousInterface3 : sig
    type t = private Ojs.t
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    val get_mode: t -> ([`L_s221_byob[@js "byob"]] [@js.enum]) [@@js.get "mode"]
    val set_mode: t -> ([`L_s221_byob[@js "byob"]] [@js.enum]) -> unit [@@js.set "mode"]
    val create: mode:([`L_s221_byob[@js "byob"]] [@js.enum]) -> unit -> t [@@js.builder]
  end
  module AnonymousInterface2 : sig
    type t = private Ojs.t
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    val get_highWaterMark: t -> float option [@@js.get "highWaterMark"]
    val set_highWaterMark: t -> float -> unit [@@js.set "highWaterMark"]
    val create: ?highWaterMark:float -> unit -> t [@@js.builder]
  end
  type 'R t = [`ReadableStream of 'R] intf [@@js.custom { of_js=(fun _R -> Obj.magic); to_js=(fun _R -> Obj.magic) }]
  type t_0 = any t
  [@@@js.stop]
  type 'R tags = [`ReadableStream of 'R]
  type tags_0 = any tags
  [@@@js.start]
  [@@@js.implem 
    type 'R tags = [`ReadableStream of 'R]
    type tags_0 = any tags
  ]
  type ('tags, 'R) this = 'tags intf constraint 'tags = [> `ReadableStream of 'R ]
  val t_to_js: ('R -> Ojs.t) -> 'R t -> Ojs.t
  val t_of_js: (Ojs.t -> 'R) -> Ojs.t -> 'R t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStream/locked) *)
  val get_locked: ('tags, 'R) this -> bool [@@js.get "locked"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStream/cancel) *)
  val cancel: ('tags, 'R) this -> ?reason:any -> unit -> unit Promise.t [@@js.call "cancel"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStream/getReader) *)
  val getReader: ('tags, 'R) this -> options:AnonymousInterface3.t -> ReadableStreamBYOBReader.t [@@js.call "getReader"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStream/getReader) *)
  val getReader': ('tags, 'R) this -> 'R ReadableStreamDefaultReader.t [@@js.call "getReader"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStream/getReader) *)
  val getReader'': ('tags, 'R) this -> ?options:ReadableStreamGetReaderOptions.t -> unit -> 'R ReadableStreamReader.t [@@js.call "getReader"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStream/pipeThrough) *)
  val pipeThrough: ('tags, 'R) this -> transform:('T, 'R) ReadableWritablePair.t -> ?options:StreamPipeOptions.t -> unit -> 'T t [@@js.call "pipeThrough"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStream/pipeTo) *)
  val pipeTo: ('tags, 'R) this -> destination:'R WritableStream.t -> ?options:StreamPipeOptions.t -> unit -> unit Promise.t [@@js.call "pipeTo"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStream/tee) *)
  val tee: ('tags, 'R) this -> ('R t * 'R t) [@@js.call "tee"]
  val cast_from: ('tags, 'R) this -> 'R t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t_0 [@@js.get "prototype"]
  val create: underlyingSource:UnderlyingByteSource.t -> ?strategy:AnonymousInterface2.t -> unit -> Uint8Array.t t [@@js.create]
  val create': underlyingSource:'R UnderlyingDefaultSource.t -> ?strategy:'R QueuingStrategy.t -> unit -> 'R t [@@js.create]
  val create'': ?underlyingSource:'R UnderlyingSource.t -> ?strategy:'R QueuingStrategy.t -> unit -> 'R t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader) *)
and[@js.scope "ReadableStreamBYOBReader"] ReadableStreamBYOBReader : sig
  type t = [`ReadableStreamBYOBReader | `ReadableStreamGenericReader] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ReadableStreamBYOBReader | `ReadableStreamGenericReader]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ReadableStreamBYOBReader | `ReadableStreamGenericReader]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ReadableStreamBYOBReader ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader/read) *)
  val read: 'tags this -> view:'T -> 'T ReadableStreamReadResult.t Promise.t [@@js.call "read"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader/releaseLock) *)
  val releaseLock: 'tags this -> unit [@@js.call "releaseLock"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: ReadableStream.t_0 -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultReader) *)
and[@js.scope "ReadableStreamDefaultReader"] ReadableStreamDefaultReader : sig
  type 'R t = [`ReadableStreamDefaultReader of 'R | `ReadableStreamGenericReader] intf [@@js.custom { of_js=(fun _R -> Obj.magic); to_js=(fun _R -> Obj.magic) }]
  type t_0 = any t
  [@@@js.stop]
  type 'R tags = [`ReadableStreamDefaultReader of 'R | `ReadableStreamGenericReader]
  type tags_0 = any tags
  [@@@js.start]
  [@@@js.implem 
    type 'R tags = [`ReadableStreamDefaultReader of 'R | `ReadableStreamGenericReader]
    type tags_0 = any tags
  ]
  type ('tags, 'R) this = 'tags intf constraint 'tags = [> `ReadableStreamDefaultReader of 'R ]
  val t_to_js: ('R -> Ojs.t) -> 'R t -> Ojs.t
  val t_of_js: (Ojs.t -> 'R) -> Ojs.t -> 'R t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultReader/read) *)
  val read: ('tags, 'R) this -> 'R ReadableStreamReadResult.t Promise.t [@@js.call "read"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultReader/releaseLock) *)
  val releaseLock: ('tags, 'R) this -> unit [@@js.call "releaseLock"]
  val cast_from: ('tags, 'R) this -> 'R t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t_0 [@@js.get "prototype"]
  val create: 'R ReadableStream.t -> 'R t [@@js.create]
end
and ReadableStreamReader : sig
  type 'T t = (ReadableStreamBYOBReader.t, 'T ReadableStreamDefaultReader.t) union2
  val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
  val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
end
and ReadableWritablePair : sig
  type ('R, 'W) t = [`ReadableWritablePair of ('R * 'W)] intf [@@js.custom { of_js=(fun _R _W -> Obj.magic); to_js=(fun _R _W -> Obj.magic) }]
  type 'R t_1 = ('R, any) t
  type t_0 = (any, any) t
  [@@@js.stop]
  type ('R, 'W) tags = [`ReadableWritablePair of ('R * 'W)]
  type 'R tags_1 = ('R, any) tags
  type tags_0 = (any, any) tags
  [@@@js.start]
  [@@@js.implem 
    type ('R, 'W) tags = [`ReadableWritablePair of ('R * 'W)]
    type 'R tags_1 = ('R, any) tags
    type tags_0 = (any, any) tags
  ]
  type ('tags, 'R, 'W) this = 'tags intf constraint 'tags = [> `ReadableWritablePair of ('R * 'W) ]
  val t_to_js: ('R -> Ojs.t) -> ('W -> Ojs.t) -> ('R, 'W) t -> Ojs.t
  val t_of_js: (Ojs.t -> 'R) -> (Ojs.t -> 'W) -> Ojs.t -> ('R, 'W) t
  val t_1_to_js: ('R -> Ojs.t) -> 'R t_1 -> Ojs.t
  val t_1_of_js: (Ojs.t -> 'R) -> Ojs.t -> 'R t_1
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val get_readable: ('tags, 'R, 'W) this -> 'R ReadableStream.t [@@js.get "readable"]
  val set_readable: ('tags, 'R, 'W) this -> 'R ReadableStream.t -> unit [@@js.set "readable"]
  
  (**
    Provides a convenient, chainable way of piping this readable stream through a transform stream (or any other \{ writable, readable \} pair). It simply pipes the stream into the writable side of the supplied pair, and returns the readable side for further use.
    
    Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.
  *)
  val get_writable: ('tags, 'R, 'W) this -> 'W WritableStream.t [@@js.get "writable"]
  
  (**
    Provides a convenient, chainable way of piping this readable stream through a transform stream (or any other \{ writable, readable \} pair). It simply pipes the stream into the writable side of the supplied pair, and returns the readable side for further use.
    
    Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.
  *)
  val set_writable: ('tags, 'R, 'W) this -> 'W WritableStream.t -> unit [@@js.set "writable"]
  val create: readable:'R ReadableStream.t -> writable:'W WritableStream.t -> unit -> ('R, 'W) t [@@js.builder]
  val cast_from: ('tags, 'R, 'W) this -> ('R, 'W) t [@@js.custom let cast_from = Obj.magic]
end
module EndingType : sig
  type t = ([`L_s662_native[@js "native"] | `L_s995_transparent[@js "transparent"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module BlobPropertyBag : sig
  type t = [`BlobPropertyBag] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`BlobPropertyBag]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`BlobPropertyBag]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `BlobPropertyBag ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_endings: 'tags this -> EndingType.t option [@@js.get "endings"]
  val set_endings: 'tags this -> EndingType.t -> unit [@@js.set "endings"]
  val get_type: 'tags this -> string option [@@js.get "type"]
  val set_type: 'tags this -> string -> unit [@@js.set "type"]
  val create: ?endings:EndingType.t -> ?type_:(string[@js "type"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  A file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The File interface is based on Blob, inheriting blob functionality and expanding it to support files on the user's system.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Blob)
*)
module[@js.scope "Blob"] rec Blob : sig
  type t = [`Blob] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Blob]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Blob]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Blob ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Blob/size) *)
  val get_size: 'tags this -> float [@@js.get "size"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Blob/type) *)
  val get_type: 'tags this -> string [@@js.get "type"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Blob/arrayBuffer) *)
  val arrayBuffer: 'tags this -> ArrayBuffer.t Promise.t [@@js.call "arrayBuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Blob/slice) *)
  val slice: 'tags this -> ?start:float -> ?end_:float -> ?contentType:string -> unit -> t [@@js.call "slice"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Blob/stream) *)
  val stream: 'tags this -> Uint8Array.t ReadableStream.t [@@js.call "stream"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Blob/text) *)
  val text: 'tags this -> string Promise.t [@@js.call "text"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: ?blobParts:BlobPart.t list -> ?options:BlobPropertyBag.t -> unit -> t [@@js.create]
end
and BlobPart : sig
  type t = ([`String of string | `Other of (Blob.t, BufferSource.t) union2] [@js.union on_field "dummy"]) Primitive.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  The URLÂ interface represents an object providing static methods used for creating object URLs.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL)
  
  
  `URL` class is a global reference for `require('url').URL`
  https://nodejs.org/api/url.html#the-whatwg-url-api
*)
module[@js.scope "URL"] URL : sig
  type t = [`URL] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`URL]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`URL]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `URL ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/hash) *)
  val get_hash: 'tags this -> string [@@js.get "hash"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/hash) *)
  val set_hash: 'tags this -> string -> unit [@@js.set "hash"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/host) *)
  val get_host: 'tags this -> string [@@js.get "host"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/host) *)
  val set_host: 'tags this -> string -> unit [@@js.set "host"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/hostname) *)
  val get_hostname: 'tags this -> string [@@js.get "hostname"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/hostname) *)
  val set_hostname: 'tags this -> string -> unit [@@js.set "hostname"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/href) *)
  val get_href: 'tags this -> string [@@js.get "href"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/href) *)
  val set_href: 'tags this -> string -> unit [@@js.set "href"]
  val toString: 'tags this -> string [@@js.call "toString"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/origin) *)
  val get_origin: 'tags this -> string [@@js.get "origin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/password) *)
  val get_password: 'tags this -> string [@@js.get "password"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/password) *)
  val set_password: 'tags this -> string -> unit [@@js.set "password"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/pathname) *)
  val get_pathname: 'tags this -> string [@@js.get "pathname"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/pathname) *)
  val set_pathname: 'tags this -> string -> unit [@@js.set "pathname"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/port) *)
  val get_port: 'tags this -> string [@@js.get "port"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/port) *)
  val set_port: 'tags this -> string -> unit [@@js.set "port"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/protocol) *)
  val get_protocol: 'tags this -> string [@@js.get "protocol"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/protocol) *)
  val set_protocol: 'tags this -> string -> unit [@@js.set "protocol"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/search) *)
  val get_search: 'tags this -> string [@@js.get "search"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/search) *)
  val set_search: 'tags this -> string -> unit [@@js.set "search"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/searchParams) *)
  val get_searchParams: 'tags this -> URLSearchParams.t [@@js.get "searchParams"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/username) *)
  val get_username: 'tags this -> string [@@js.get "username"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/username) *)
  val set_username: 'tags this -> string -> unit [@@js.set "username"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/toJSON) *)
  val toJSON: 'tags this -> string [@@js.call "toJSON"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: url:([`U1 of string | `U2 of t] [@js.union]) -> ?base:([`U1 of string | `U2 of t] [@js.union]) -> unit -> t [@@js.create]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/canParse_static) *)
  val canParse: url:([`U1 of string | `U2 of t] [@js.union]) -> ?base:string -> unit -> bool [@@js.global "canParse"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/createObjectURL_static) *)
  val createObjectURL: ([`U1 of Blob.t | `U2 of MediaSource.t] [@js.union]) -> string [@@js.global "createObjectURL"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/revokeObjectURL_static) *)
  val revokeObjectURL: string -> unit [@@js.global "revokeObjectURL"]
end
module[@js.scope "webkitURL"] WebkitURL : sig
  type t = URL.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val prototype: unit -> URL.t [@@js.get "prototype"]
  val create: url:([`U1 of string | `U2 of URL.t] [@js.union]) -> ?base:([`U1 of string | `U2 of URL.t] [@js.union]) -> unit -> URL.t [@@js.create]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/canParse_static) *)
  val canParse: url:([`U1 of string | `U2 of URL.t] [@js.union]) -> ?base:string -> unit -> bool [@@js.global "canParse"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/createObjectURL_static) *)
  val createObjectURL: ([`U1 of Blob.t | `U2 of MediaSource.t] [@js.union]) -> string [@@js.global "createObjectURL"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/URL/revokeObjectURL_static) *)
  val revokeObjectURL: string -> unit [@@js.global "revokeObjectURL"]
end
module[@js.scope "toolbar"] ToolbarStatic : sig
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BarProp/visible) *)
  val visible: unit -> bool [@@js.get "visible"]
end
module[@js.scope "statusbar"] StatusbarStatic : sig
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BarProp/visible) *)
  val visible: unit -> bool [@@js.get "visible"]
end

(**
  This Web Speech API interface represents a voice that the system supports. Every SpeechSynthesisVoice has its own relative speech service including information about language, name and URI.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisVoice)
*)
module[@js.scope "SpeechSynthesisVoice"] SpeechSynthesisVoice : sig
  type t = [`SpeechSynthesisVoice] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SpeechSynthesisVoice]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SpeechSynthesisVoice]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SpeechSynthesisVoice ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisVoice/default) *)
  val get_default: 'tags this -> bool [@@js.get "default"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisVoice/lang) *)
  val get_lang: 'tags this -> string [@@js.get "lang"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisVoice/localService) *)
  val get_localService: 'tags this -> bool [@@js.get "localService"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisVoice/name) *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisVoice/voiceURI) *)
  val get_voiceURI: 'tags this -> string [@@js.get "voiceURI"]
  val create: default:bool -> lang:string -> localService:bool -> name:string -> voiceURI:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end
module SpeechSynthesisErrorCode : sig
  type t = ([`L_s1041_voice_unavailable[@js "voice-unavailable"] | `L_s167_audio_busy[@js "audio-busy"] | `L_s168_audio_hardware[@js "audio-hardware"] | `L_s224_canceled[@js "canceled"] | `L_s528_interrupted[@js "interrupted"] | `L_s530_invalid_argument[@js "invalid-argument"] | `L_s548_language_unavailable[@js "language-unavailable"] | `L_s668_network[@js "network"] | `L_s689_not_allowed[@js "not-allowed"] | `L_s949_synthesis_failed[@js "synthesis-failed"] | `L_s950_synthesis_unavailable[@js "synthesis-unavailable"] | `L_s966_text_too_long[@js "text-too-long"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisErrorEvent) *)
module[@js.scope "SpeechSynthesisErrorEvent"] rec SpeechSynthesisErrorEvent : sig
  type t = [`Event | `SpeechSynthesisErrorEvent | `SpeechSynthesisEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `SpeechSynthesisErrorEvent | `SpeechSynthesisEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `SpeechSynthesisErrorEvent | `SpeechSynthesisEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SpeechSynthesisErrorEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisErrorEvent/error) *)
  val get_error: 'tags this -> SpeechSynthesisErrorCode.t [@@js.get "error"]
  val create: error:SpeechSynthesisErrorCode.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> eventInitDict:SpeechSynthesisErrorEventInit.t -> t [@@js.create]
end
and SpeechSynthesisErrorEventInit : sig
  type t = [`EventInit | `SpeechSynthesisErrorEventInit | `SpeechSynthesisEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `SpeechSynthesisErrorEventInit | `SpeechSynthesisEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `SpeechSynthesisErrorEventInit | `SpeechSynthesisEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SpeechSynthesisErrorEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_error: 'tags this -> SpeechSynthesisErrorCode.t [@@js.get "error"]
  val set_error: 'tags this -> SpeechSynthesisErrorCode.t -> unit [@@js.set "error"]
  val create: error:SpeechSynthesisErrorCode.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  This Web Speech API interface contains information about the current state of SpeechSynthesisUtterance objects that have been processed in the speech service.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisEvent)
*)
and[@js.scope "SpeechSynthesisEvent"] SpeechSynthesisEvent : sig
  type t = [`Event | `SpeechSynthesisEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `SpeechSynthesisEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `SpeechSynthesisEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SpeechSynthesisEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisEvent/charIndex) *)
  val get_charIndex: 'tags this -> float [@@js.get "charIndex"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisEvent/charLength) *)
  val get_charLength: 'tags this -> float [@@js.get "charLength"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisEvent/elapsedTime) *)
  val get_elapsedTime: 'tags this -> float [@@js.get "elapsedTime"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisEvent/name) *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisEvent/utterance) *)
  val get_utterance: 'tags this -> SpeechSynthesisUtterance.t [@@js.get "utterance"]
  val create: charIndex:float -> charLength:float -> elapsedTime:float -> name:string -> utterance:SpeechSynthesisUtterance.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> eventInitDict:SpeechSynthesisEventInit.t -> t [@@js.create]
end
and SpeechSynthesisEventInit : sig
  type t = [`EventInit | `SpeechSynthesisEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `SpeechSynthesisEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `SpeechSynthesisEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SpeechSynthesisEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_charIndex: 'tags this -> float option [@@js.get "charIndex"]
  val set_charIndex: 'tags this -> float -> unit [@@js.set "charIndex"]
  val get_charLength: 'tags this -> float option [@@js.get "charLength"]
  val set_charLength: 'tags this -> float -> unit [@@js.set "charLength"]
  val get_elapsedTime: 'tags this -> float option [@@js.get "elapsedTime"]
  val set_elapsedTime: 'tags this -> float -> unit [@@js.set "elapsedTime"]
  val get_name: 'tags this -> string option [@@js.get "name"]
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  val get_utterance: 'tags this -> SpeechSynthesisUtterance.t [@@js.get "utterance"]
  val set_utterance: 'tags this -> SpeechSynthesisUtterance.t -> unit [@@js.set "utterance"]
  val create: ?charIndex:float -> ?charLength:float -> ?elapsedTime:float -> ?name:string -> utterance:SpeechSynthesisUtterance.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  This Web Speech API interface represents a speech request. It contains the content the speech service should read and information about how to read it (e.g. language, pitch and volume.)
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance)
*)
and[@js.scope "SpeechSynthesisUtterance"] SpeechSynthesisUtterance : sig
  type t = [`EventTarget | `SpeechSynthesisUtterance] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `SpeechSynthesisUtterance]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `SpeechSynthesisUtterance]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SpeechSynthesisUtterance ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/lang) *)
  val get_lang: 'tags this -> string [@@js.get "lang"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/lang) *)
  val set_lang: 'tags this -> string -> unit [@@js.set "lang"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/boundary_event) *)
  val get_onboundary: 'tags this -> (this:t -> ev:SpeechSynthesisEvent.t -> any) option [@@js.get "onboundary"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/boundary_event) *)
  val set_onboundary: 'tags this -> (this:t -> ev:SpeechSynthesisEvent.t -> any) option -> unit [@@js.set "onboundary"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/end_event) *)
  val get_onend: 'tags this -> (this:t -> ev:SpeechSynthesisEvent.t -> any) option [@@js.get "onend"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/end_event) *)
  val set_onend: 'tags this -> (this:t -> ev:SpeechSynthesisEvent.t -> any) option -> unit [@@js.set "onend"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/error_event) *)
  val get_onerror: 'tags this -> (this:t -> ev:SpeechSynthesisErrorEvent.t -> any) option [@@js.get "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/error_event) *)
  val set_onerror: 'tags this -> (this:t -> ev:SpeechSynthesisErrorEvent.t -> any) option -> unit [@@js.set "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/mark_event) *)
  val get_onmark: 'tags this -> (this:t -> ev:SpeechSynthesisEvent.t -> any) option [@@js.get "onmark"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/mark_event) *)
  val set_onmark: 'tags this -> (this:t -> ev:SpeechSynthesisEvent.t -> any) option -> unit [@@js.set "onmark"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/pause_event) *)
  val get_onpause: 'tags this -> (this:t -> ev:SpeechSynthesisEvent.t -> any) option [@@js.get "onpause"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/pause_event) *)
  val set_onpause: 'tags this -> (this:t -> ev:SpeechSynthesisEvent.t -> any) option -> unit [@@js.set "onpause"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/resume_event) *)
  val get_onresume: 'tags this -> (this:t -> ev:SpeechSynthesisEvent.t -> any) option [@@js.get "onresume"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/resume_event) *)
  val set_onresume: 'tags this -> (this:t -> ev:SpeechSynthesisEvent.t -> any) option -> unit [@@js.set "onresume"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/start_event) *)
  val get_onstart: 'tags this -> (this:t -> ev:SpeechSynthesisEvent.t -> any) option [@@js.get "onstart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/start_event) *)
  val set_onstart: 'tags this -> (this:t -> ev:SpeechSynthesisEvent.t -> any) option -> unit [@@js.set "onstart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/pitch) *)
  val get_pitch: 'tags this -> float [@@js.get "pitch"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/pitch) *)
  val set_pitch: 'tags this -> float -> unit [@@js.set "pitch"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/rate) *)
  val get_rate: 'tags this -> float [@@js.get "rate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/rate) *)
  val set_rate: 'tags this -> float -> unit [@@js.set "rate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/text) *)
  val get_text: 'tags this -> string [@@js.get "text"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/text) *)
  val set_text: 'tags this -> string -> unit [@@js.set "text"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/voice) *)
  val get_voice: 'tags this -> SpeechSynthesisVoice.t option [@@js.get "voice"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/voice) *)
  val set_voice: 'tags this -> SpeechSynthesisVoice.t option -> unit [@@js.set "voice"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/volume) *)
  val get_volume: 'tags this -> float [@@js.get "volume"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/volume) *)
  val set_volume: 'tags this -> float -> unit [@@js.set "volume"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SpeechSynthesisUtteranceEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SpeechSynthesisUtteranceEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: ?text:string -> unit -> t [@@js.create]
end

(**
  This Web Speech API interface is the controller interface for the speech service; this can be used to retrieve information about the synthesis voices available on the device, start and pause speech, and other commands besides.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis)
*)
module[@js.scope "SpeechSynthesis"] SpeechSynthesis : sig
  type t = [`EventTarget | `SpeechSynthesis] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `SpeechSynthesis]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `SpeechSynthesis]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SpeechSynthesis ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/voiceschanged_event) *)
  val get_onvoiceschanged: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onvoiceschanged"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/voiceschanged_event) *)
  val set_onvoiceschanged: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onvoiceschanged"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/paused) *)
  val get_paused: 'tags this -> bool [@@js.get "paused"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/pending) *)
  val get_pending: 'tags this -> bool [@@js.get "pending"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/speaking) *)
  val get_speaking: 'tags this -> bool [@@js.get "speaking"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/cancel) *)
  val cancel: 'tags this -> unit [@@js.call "cancel"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/getVoices) *)
  val getVoices: 'tags this -> SpeechSynthesisVoice.t list [@@js.call "getVoices"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/pause) *)
  val pause: 'tags this -> unit [@@js.call "pause"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/resume) *)
  val resume: 'tags this -> unit [@@js.call "resume"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/speak) *)
  val speak: 'tags this -> utterance:SpeechSynthesisUtterance.t -> unit [@@js.call "speak"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SpeechSynthesisEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SpeechSynthesisEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module[@js.scope "speechSynthesis"] SpeechSynthesisStatic : sig
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/voiceschanged_event) *)
  val onvoiceschanged: unit -> (this:SpeechSynthesis.t -> ev:Event.t -> any) option [@@js.get "onvoiceschanged"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/paused) *)
  val paused: unit -> bool [@@js.get "paused"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/pending) *)
  val pending: unit -> bool [@@js.get "pending"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/speaking) *)
  val speaking: unit -> bool [@@js.get "speaking"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/cancel) *)
  val cancel: unit -> unit [@@js.global "cancel"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/getVoices) *)
  val getVoices: unit -> SpeechSynthesisVoice.t list [@@js.global "getVoices"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/pause) *)
  val pause: unit -> unit [@@js.global "pause"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/resume) *)
  val resume: unit -> unit [@@js.global "resume"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/speak) *)
  val speak: SpeechSynthesisUtterance.t -> unit [@@js.global "speak"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: type_:'K -> listener:(this:SpeechSynthesis.t -> ev:(* FIXME: unknown type 'SpeechSynthesisEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.global "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.global "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: type_:'K -> listener:(this:SpeechSynthesis.t -> ev:(* FIXME: unknown type 'SpeechSynthesisEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.global "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.global "removeEventListener"]
end
module[@js.scope "sessionStorage"] SessionStorageStatic : sig
  
  (**
    Returns the number of key/value pairs.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Storage/length)
  *)
  val length: unit -> float [@@js.get "length"]
  
  (**
    Removes all key/value pairs, if there are any.
    
    Dispatches a storage event on Window objects holding an equivalent Storage object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Storage/clear)
  *)
  val clear: unit -> unit [@@js.global "clear"]
  
  (**
    Returns the current value associated with the given key, or null if the given key does not exist.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Storage/getItem)
  *)
  val getItem: string -> string option [@@js.global "getItem"]
  
  (**
    Returns the name of the nth key, or null if n is greater than or equal to the number of key/value pairs.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Storage/key)
  *)
  val key: float -> string option [@@js.global "key"]
  
  (**
    Removes the key/value pair with the given key, if a key/value pair with the given key exists.
    
    Dispatches a storage event on Window objects holding an equivalent Storage object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Storage/removeItem)
  *)
  val removeItem: string -> unit [@@js.global "removeItem"]
  
  (**
    Sets the value of the pair identified by key to value, creating a new key/value pair if none existed for key previously.
    
    Throws a "QuotaExceededError" DOMException exception if the new value couldn't be set. (Setting could fail if, e.g., the user has disabled storage for the site, or if the quota has been exceeded.)
    
    Dispatches a storage event on Window objects holding an equivalent Storage object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Storage/setItem)
  *)
  val setItem: key:string -> value:string -> unit [@@js.global "setItem"]
  (* unsupported indexer of type: (~name:String -> Any) *)
end
module[@js.scope "scrollbars"] ScrollbarsStatic : sig
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BarProp/visible) *)
  val visible: unit -> bool [@@js.get "visible"]
end
module OrientationType : sig
  type t = ([`L_s546_landscape_primary[@js "landscape-primary"] | `L_s547_landscape_secondary[@js "landscape-secondary"] | `L_s763_portrait_primary[@js "portrait-primary"] | `L_s764_portrait_secondary[@js "portrait-secondary"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ScreenOrientation) *)
module[@js.scope "ScreenOrientation"] ScreenOrientation : sig
  type t = [`EventTarget | `ScreenOrientation] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `ScreenOrientation]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `ScreenOrientation]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ScreenOrientation ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ScreenOrientation/angle) *)
  val get_angle: 'tags this -> float [@@js.get "angle"]
  val get_onchange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onchange"]
  val set_onchange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onchange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ScreenOrientation/type) *)
  val get_type: 'tags this -> OrientationType.t [@@js.get "type"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ScreenOrientation/unlock) *)
  val unlock: 'tags this -> unit [@@js.call "unlock"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'ScreenOrientationEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'ScreenOrientationEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module[@js.scope "screen"] ScreenStatic : sig
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Screen/availHeight) *)
  val availHeight: unit -> float [@@js.get "availHeight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Screen/availWidth) *)
  val availWidth: unit -> float [@@js.get "availWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Screen/colorDepth) *)
  val colorDepth: unit -> float [@@js.get "colorDepth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Screen/height) *)
  val height: unit -> float [@@js.get "height"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Screen/orientation) *)
  val orientation: unit -> ScreenOrientation.t [@@js.get "orientation"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Screen/pixelDepth) *)
  val pixelDepth: unit -> float [@@js.get "pixelDepth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Screen/width) *)
  val width: unit -> float [@@js.get "width"]
end
module[@js.scope "personalbar"] PersonalbarStatic : sig
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BarProp/visible) *)
  val visible: unit -> bool [@@js.get "visible"]
end

(** A legacy interface kept for backwards compatibility and contains properties that offer performance timing information for various events which occur during the loading and use of the current page. You get a PerformanceTiming object describing your page using the window.performance.timing property. *)
module[@js.scope "PerformanceTiming"] PerformanceTiming : sig
  type t = [`PerformanceTiming] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PerformanceTiming]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PerformanceTiming]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PerformanceTiming ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/connectEnd) *)
  val get_connectEnd: 'tags this -> float [@@js.get "connectEnd"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/connectStart) *)
  val get_connectStart: 'tags this -> float [@@js.get "connectStart"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/domComplete) *)
  val get_domComplete: 'tags this -> float [@@js.get "domComplete"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/domContentLoadedEventEnd) *)
  val get_domContentLoadedEventEnd: 'tags this -> float [@@js.get "domContentLoadedEventEnd"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/domContentLoadedEventStart) *)
  val get_domContentLoadedEventStart: 'tags this -> float [@@js.get "domContentLoadedEventStart"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/domInteractive) *)
  val get_domInteractive: 'tags this -> float [@@js.get "domInteractive"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/domLoading) *)
  val get_domLoading: 'tags this -> float [@@js.get "domLoading"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/domainLookupEnd) *)
  val get_domainLookupEnd: 'tags this -> float [@@js.get "domainLookupEnd"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/domainLookupStart) *)
  val get_domainLookupStart: 'tags this -> float [@@js.get "domainLookupStart"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/fetchStart) *)
  val get_fetchStart: 'tags this -> float [@@js.get "fetchStart"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/loadEventEnd) *)
  val get_loadEventEnd: 'tags this -> float [@@js.get "loadEventEnd"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/loadEventStart) *)
  val get_loadEventStart: 'tags this -> float [@@js.get "loadEventStart"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/navigationStart) *)
  val get_navigationStart: 'tags this -> float [@@js.get "navigationStart"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/redirectEnd) *)
  val get_redirectEnd: 'tags this -> float [@@js.get "redirectEnd"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/redirectStart) *)
  val get_redirectStart: 'tags this -> float [@@js.get "redirectStart"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/requestStart) *)
  val get_requestStart: 'tags this -> float [@@js.get "requestStart"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/responseEnd) *)
  val get_responseEnd: 'tags this -> float [@@js.get "responseEnd"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/responseStart) *)
  val get_responseStart: 'tags this -> float [@@js.get "responseStart"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/secureConnectionStart) *)
  val get_secureConnectionStart: 'tags this -> float [@@js.get "secureConnectionStart"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/unloadEventEnd) *)
  val get_unloadEventEnd: 'tags this -> float [@@js.get "unloadEventEnd"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/unloadEventStart) *)
  val get_unloadEventStart: 'tags this -> float [@@js.get "unloadEventStart"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/toJSON) *)
  val toJSON: 'tags this -> any [@@js.call "toJSON"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** The legacy PerformanceNavigation interface represents information about how the navigation to the current document was done. *)
module[@js.scope "PerformanceNavigation"] PerformanceNavigation : sig
  type t = [`PerformanceNavigation] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PerformanceNavigation]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PerformanceNavigation]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PerformanceNavigation ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceNavigation/redirectCount) *)
  val get_redirectCount: 'tags this -> float [@@js.get "redirectCount"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceNavigation/type) *)
  val get_type: 'tags this -> float [@@js.get "type"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceNavigation/toJSON) *)
  val toJSON: 'tags this -> any [@@js.call "toJSON"]
  val get_TYPE_NAVIGATE: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "TYPE_NAVIGATE"]
  val get_TYPE_RELOAD: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "TYPE_RELOAD"]
  val get_TYPE_BACK_FORWARD: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "TYPE_BACK_FORWARD"]
  val get_TYPE_RESERVED: 'tags this -> ([`L_n_255[@js 255]] [@js.enum]) [@@js.get "TYPE_RESERVED"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  val type_navigate: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "TYPE_NAVIGATE"]
  val type_reload: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "TYPE_RELOAD"]
  val type_back_forward: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "TYPE_BACK_FORWARD"]
  val type_reserved: unit -> ([`L_n_255[@js 255]] [@js.enum]) [@@js.get "TYPE_RESERVED"]
end
module PerformanceMeasureOptions : sig
  type t = [`PerformanceMeasureOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PerformanceMeasureOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PerformanceMeasureOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PerformanceMeasureOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_detail: 'tags this -> any option [@@js.get "detail"]
  val set_detail: 'tags this -> any -> unit [@@js.set "detail"]
  val get_duration: 'tags this -> DOMHighResTimeStamp.t option [@@js.get "duration"]
  val set_duration: 'tags this -> DOMHighResTimeStamp.t -> unit [@@js.set "duration"]
  val get_end: 'tags this -> ([`String of string | `Undefined | `Other of DOMHighResTimeStamp.t] [@js.union on_field "dummy"]) Primitive.t [@@js.get "end"]
  val set_end: 'tags this -> ([`U1 of string | `U2 of DOMHighResTimeStamp.t] [@js.union]) -> unit [@@js.set "end"]
  val get_start: 'tags this -> ([`String of string | `Undefined | `Other of DOMHighResTimeStamp.t] [@js.union on_field "dummy"]) Primitive.t [@@js.get "start"]
  val set_start: 'tags this -> ([`U1 of string | `U2 of DOMHighResTimeStamp.t] [@js.union]) -> unit [@@js.set "start"]
  val create: ?detail:any -> ?duration:DOMHighResTimeStamp.t -> ?end_:(([`String of string | `Other of DOMHighResTimeStamp.t] [@js.union on_field "dummy"]) Primitive.t[@js "end"]) -> ?start:([`String of string | `Other of DOMHighResTimeStamp.t] [@js.union on_field "dummy"]) Primitive.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Encapsulates a single performance metric that is part of the performance timeline. A performance entry can be directly created by making a performance mark or measure (for example by calling the mark() method) at an explicit point in an application. Performance entries are also created in indirect ways such as loading a resource (such as an image).
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceEntry)
*)
module[@js.scope "PerformanceEntry"] PerformanceEntry : sig
  type t = [`PerformanceEntry] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PerformanceEntry]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PerformanceEntry]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PerformanceEntry ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceEntry/duration) *)
  val get_duration: 'tags this -> DOMHighResTimeStamp.t [@@js.get "duration"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceEntry/entryType) *)
  val get_entryType: 'tags this -> string [@@js.get "entryType"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceEntry/name) *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceEntry/startTime) *)
  val get_startTime: 'tags this -> DOMHighResTimeStamp.t [@@js.get "startTime"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceEntry/toJSON) *)
  val toJSON: 'tags this -> any [@@js.call "toJSON"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  PerformanceMeasure is an abstract interface for PerformanceEntry objects with an entryType of "measure". Entries of this type are created by calling performance.measure() to add a named DOMHighResTimeStamp (the measure) between two marks to the browser's performance timeline.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceMeasure)
*)
module[@js.scope "PerformanceMeasure"] PerformanceMeasure : sig
  type t = [`PerformanceEntry | `PerformanceMeasure] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PerformanceEntry | `PerformanceMeasure]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PerformanceEntry | `PerformanceMeasure]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PerformanceMeasure ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceMeasure/detail) *)
  val get_detail: 'tags this -> any [@@js.get "detail"]
  val create: detail:any -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end
module PerformanceMarkOptions : sig
  type t = [`PerformanceMarkOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PerformanceMarkOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PerformanceMarkOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PerformanceMarkOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_detail: 'tags this -> any option [@@js.get "detail"]
  val set_detail: 'tags this -> any -> unit [@@js.set "detail"]
  val get_startTime: 'tags this -> DOMHighResTimeStamp.t option [@@js.get "startTime"]
  val set_startTime: 'tags this -> DOMHighResTimeStamp.t -> unit [@@js.set "startTime"]
  val create: ?detail:any -> ?startTime:DOMHighResTimeStamp.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  PerformanceMarkÂ is an abstract interface for PerformanceEntry objects with an entryType of "mark". Entries of this type are created by calling performance.mark() to add a named DOMHighResTimeStamp (the mark) to the browser's performance timeline.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceMark)
*)
module[@js.scope "PerformanceMark"] PerformanceMark : sig
  type t = [`PerformanceEntry | `PerformanceMark] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PerformanceEntry | `PerformanceMark]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PerformanceEntry | `PerformanceMark]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PerformanceMark ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceMark/detail) *)
  val get_detail: 'tags this -> any [@@js.get "detail"]
  val create: detail:any -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': markName:string -> ?markOptions:PerformanceMarkOptions.t -> unit -> t [@@js.create]
end
module PerformanceEntryList : sig
  type t = PerformanceEntry.t list
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventCounts) *)
module[@js.scope "EventCounts"] EventCounts : sig
  type t = [`EventCounts] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventCounts]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventCounts]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EventCounts ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val forEach: 'tags this -> callbackfn:(value:float -> key:string -> parent:t -> unit) -> ?thisArg:any -> unit -> unit [@@js.call "forEach"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides access to performance-related information for the current page. It's part of the High Resolution Time API, but is enhanced by the Performance Timeline API, the Navigation Timing API, the User Timing API, and the Resource Timing API.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance)
*)
module[@js.scope "Performance"] Performance : sig
  type t = [`EventTarget | `Performance] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `Performance]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `Performance]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Performance ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/eventCounts) *)
  val get_eventCounts: 'tags this -> EventCounts.t [@@js.get "eventCounts"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/navigation) *)
  val get_navigation: 'tags this -> PerformanceNavigation.t [@@js.get "navigation"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/resourcetimingbufferfull_event) *)
  val get_onresourcetimingbufferfull: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onresourcetimingbufferfull"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/resourcetimingbufferfull_event) *)
  val set_onresourcetimingbufferfull: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onresourcetimingbufferfull"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/timeOrigin) *)
  val get_timeOrigin: 'tags this -> DOMHighResTimeStamp.t [@@js.get "timeOrigin"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/timing) *)
  val get_timing: 'tags this -> PerformanceTiming.t [@@js.get "timing"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/clearMarks) *)
  val clearMarks: 'tags this -> ?markName:string -> unit -> unit [@@js.call "clearMarks"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/clearMeasures) *)
  val clearMeasures: 'tags this -> ?measureName:string -> unit -> unit [@@js.call "clearMeasures"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/clearResourceTimings) *)
  val clearResourceTimings: 'tags this -> unit [@@js.call "clearResourceTimings"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/getEntries) *)
  val getEntries: 'tags this -> PerformanceEntryList.t [@@js.call "getEntries"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/getEntriesByName) *)
  val getEntriesByName: 'tags this -> name:string -> ?type_:string -> unit -> PerformanceEntryList.t [@@js.call "getEntriesByName"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/getEntriesByType) *)
  val getEntriesByType: 'tags this -> type_:string -> PerformanceEntryList.t [@@js.call "getEntriesByType"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/mark) *)
  val mark: 'tags this -> markName:string -> ?markOptions:PerformanceMarkOptions.t -> unit -> PerformanceMark.t [@@js.call "mark"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/measure) *)
  val measure: 'tags this -> measureName:string -> ?startOrMeasureOptions:([`U1 of string | `U2 of PerformanceMeasureOptions.t] [@js.union]) -> ?endMark:string -> unit -> PerformanceMeasure.t [@@js.call "measure"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/now) *)
  val now: 'tags this -> DOMHighResTimeStamp.t [@@js.call "now"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/setResourceTimingBufferSize) *)
  val setResourceTimingBufferSize: 'tags this -> maxSize:float -> unit [@@js.call "setResourceTimingBufferSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/toJSON) *)
  val toJSON: 'tags this -> any [@@js.call "toJSON"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'PerformanceEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'PerformanceEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module[@js.scope "performance"] PerformanceStatic : sig
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/eventCounts) *)
  val eventCounts: unit -> EventCounts.t [@@js.get "eventCounts"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/navigation) *)
  val navigation: unit -> PerformanceNavigation.t [@@js.get "navigation"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/resourcetimingbufferfull_event) *)
  val onresourcetimingbufferfull: unit -> (this:Performance.t -> ev:Event.t -> any) option [@@js.get "onresourcetimingbufferfull"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/timeOrigin) *)
  val timeOrigin: unit -> DOMHighResTimeStamp.t [@@js.get "timeOrigin"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/timing) *)
  val timing: unit -> PerformanceTiming.t [@@js.get "timing"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/clearMarks) *)
  val clearMarks: ?markName:string -> unit -> unit [@@js.global "clearMarks"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/clearMeasures) *)
  val clearMeasures: ?measureName:string -> unit -> unit [@@js.global "clearMeasures"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/clearResourceTimings) *)
  val clearResourceTimings: unit -> unit [@@js.global "clearResourceTimings"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/getEntries) *)
  val getEntries: unit -> PerformanceEntryList.t [@@js.global "getEntries"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/getEntriesByName) *)
  val getEntriesByName: name:string -> ?type_:string -> unit -> PerformanceEntryList.t [@@js.global "getEntriesByName"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/getEntriesByType) *)
  val getEntriesByType: string -> PerformanceEntryList.t [@@js.global "getEntriesByType"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/mark) *)
  val mark: markName:string -> ?markOptions:PerformanceMarkOptions.t -> unit -> PerformanceMark.t [@@js.global "mark"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/measure) *)
  val measure: measureName:string -> ?startOrMeasureOptions:([`U1 of string | `U2 of PerformanceMeasureOptions.t] [@js.union]) -> ?endMark:string -> unit -> PerformanceMeasure.t [@@js.global "measure"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/now) *)
  val now: unit -> DOMHighResTimeStamp.t [@@js.global "now"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/setResourceTimingBufferSize) *)
  val setResourceTimingBufferSize: float -> unit [@@js.global "setResourceTimingBufferSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Performance/toJSON) *)
  val toJSON: unit -> any [@@js.global "toJSON"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: type_:'K -> listener:(this:Performance.t -> ev:(* FIXME: unknown type 'PerformanceEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.global "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.global "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: type_:'K -> listener:(this:Performance.t -> ev:(* FIXME: unknown type 'PerformanceEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.global "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.global "removeEventListener"]
end
module GetRootNodeOptions : sig
  type t = [`GetRootNodeOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`GetRootNodeOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`GetRootNodeOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `GetRootNodeOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_composed: 'tags this -> bool option [@@js.get "composed"]
  val set_composed: 'tags this -> bool -> unit [@@js.set "composed"]
  val create: ?composed:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module XPathNSResolver : sig
  module AnonymousInterface625 : sig
    type t = private Ojs.t
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    val lookupNamespaceURI: t -> prefix:string option -> string option [@@js.call "lookupNamespaceURI"]
  end
  type t = (AnonymousInterface625.t, (string option -> string option)) union2
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module WebGLContextEventInit : sig
  type t = [`EventInit | `WebGLContextEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `WebGLContextEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `WebGLContextEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLContextEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_statusMessage: 'tags this -> string option [@@js.get "statusMessage"]
  val set_statusMessage: 'tags this -> string -> unit [@@js.set "statusMessage"]
  val create: ?statusMessage:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The WebContextEvent interface is part of the WebGL API and is an interface for an event that is generated in response to a status change to the WebGL rendering context.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLContextEvent)
*)
module[@js.scope "WebGLContextEvent"] WebGLContextEvent : sig
  type t = [`Event | `WebGLContextEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `WebGLContextEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `WebGLContextEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLContextEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLContextEvent/statusMessage) *)
  val get_statusMessage: 'tags this -> string [@@js.get "statusMessage"]
  val create: statusMessage:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> ?eventInit:WebGLContextEventInit.t -> unit -> t [@@js.create]
end
module ToggleEventInit : sig
  type t = [`EventInit | `ToggleEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `ToggleEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `ToggleEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ToggleEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_newState: 'tags this -> string option [@@js.get "newState"]
  val set_newState: 'tags this -> string -> unit [@@js.set "newState"]
  val get_oldState: 'tags this -> string option [@@js.get "oldState"]
  val set_oldState: 'tags this -> string -> unit [@@js.set "oldState"]
  val create: ?newState:string -> ?oldState:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ToggleEvent) *)
module[@js.scope "ToggleEvent"] ToggleEvent : sig
  type t = [`Event | `ToggleEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `ToggleEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `ToggleEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ToggleEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ToggleEvent/newState) *)
  val get_newState: 'tags this -> string [@@js.get "newState"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ToggleEvent/oldState) *)
  val get_oldState: 'tags this -> string [@@js.get "oldState"]
  val create: newState:string -> oldState:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> ?eventInitDict:ToggleEventInit.t -> unit -> t [@@js.create]
end
module RTCRtpTransceiverDirection : sig
  type t = ([`L_s512_inactive[@js "inactive"] | `L_s804_recvonly[@js "recvonly"] | `L_s874_sendonly[@js "sendonly"] | `L_s875_sendrecv[@js "sendrecv"] | `L_s923_stopped[@js "stopped"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RTCSetParameterOptions : sig
  type t = [`RTCSetParameterOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCSetParameterOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCSetParameterOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCSetParameterOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCRtpCodingParameters : sig
  type t = [`RTCRtpCodingParameters] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCRtpCodingParameters]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCRtpCodingParameters]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCRtpCodingParameters ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_rid: 'tags this -> string option [@@js.get "rid"]
  val set_rid: 'tags this -> string -> unit [@@js.set "rid"]
  val create: ?rid:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCPriorityType : sig
  type t = ([`L_s1034_very_low[@js "very-low"] | `L_s479_high[@js "high"] | `L_s581_low[@js "low"] | `L_s607_medium[@js "medium"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RTCRtpEncodingParameters : sig
  type t = [`RTCRtpCodingParameters | `RTCRtpEncodingParameters] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCRtpCodingParameters | `RTCRtpEncodingParameters]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCRtpCodingParameters | `RTCRtpEncodingParameters]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCRtpEncodingParameters ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_active: 'tags this -> bool option [@@js.get "active"]
  val set_active: 'tags this -> bool -> unit [@@js.set "active"]
  val get_maxBitrate: 'tags this -> float option [@@js.get "maxBitrate"]
  val set_maxBitrate: 'tags this -> float -> unit [@@js.set "maxBitrate"]
  val get_maxFramerate: 'tags this -> float option [@@js.get "maxFramerate"]
  val set_maxFramerate: 'tags this -> float -> unit [@@js.set "maxFramerate"]
  val get_networkPriority: 'tags this -> RTCPriorityType.t option [@@js.get "networkPriority"]
  val set_networkPriority: 'tags this -> RTCPriorityType.t -> unit [@@js.set "networkPriority"]
  val get_priority: 'tags this -> RTCPriorityType.t option [@@js.get "priority"]
  val set_priority: 'tags this -> RTCPriorityType.t -> unit [@@js.set "priority"]
  val get_scaleResolutionDownBy: 'tags this -> float option [@@js.get "scaleResolutionDownBy"]
  val set_scaleResolutionDownBy: 'tags this -> float -> unit [@@js.set "scaleResolutionDownBy"]
  val create: ?active:bool -> ?maxBitrate:float -> ?maxFramerate:float -> ?networkPriority:RTCPriorityType.t -> ?priority:RTCPriorityType.t -> ?scaleResolutionDownBy:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCDegradationPreference : sig
  type t = ([`L_s181_balanced[@js "balanced"] | `L_s591_maintain_framerate[@js "maintain-framerate"] | `L_s592_maintain_resolution[@js "maintain-resolution"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RTCRtpHeaderExtensionParameters : sig
  type t = [`RTCRtpHeaderExtensionParameters] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCRtpHeaderExtensionParameters]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCRtpHeaderExtensionParameters]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCRtpHeaderExtensionParameters ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_encrypted: 'tags this -> bool option [@@js.get "encrypted"]
  val set_encrypted: 'tags this -> bool -> unit [@@js.set "encrypted"]
  val get_id: 'tags this -> float [@@js.get "id"]
  val set_id: 'tags this -> float -> unit [@@js.set "id"]
  val get_uri: 'tags this -> string [@@js.get "uri"]
  val set_uri: 'tags this -> string -> unit [@@js.set "uri"]
  val create: ?encrypted:bool -> id:float -> uri:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCRtpCodec : sig
  type t = [`RTCRtpCodec] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCRtpCodec]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCRtpCodec]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCRtpCodec ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_channels: 'tags this -> float option [@@js.get "channels"]
  val set_channels: 'tags this -> float -> unit [@@js.set "channels"]
  val get_clockRate: 'tags this -> float [@@js.get "clockRate"]
  val set_clockRate: 'tags this -> float -> unit [@@js.set "clockRate"]
  val get_mimeType: 'tags this -> string [@@js.get "mimeType"]
  val set_mimeType: 'tags this -> string -> unit [@@js.set "mimeType"]
  val get_sdpFmtpLine: 'tags this -> string option [@@js.get "sdpFmtpLine"]
  val set_sdpFmtpLine: 'tags this -> string -> unit [@@js.set "sdpFmtpLine"]
  val create: ?channels:float -> clockRate:float -> mimeType:string -> ?sdpFmtpLine:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCRtpCodecParameters : sig
  type t = [`RTCRtpCodec | `RTCRtpCodecParameters] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCRtpCodec | `RTCRtpCodecParameters]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCRtpCodec | `RTCRtpCodecParameters]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCRtpCodecParameters ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_payloadType: 'tags this -> float [@@js.get "payloadType"]
  val set_payloadType: 'tags this -> float -> unit [@@js.set "payloadType"]
  val create: payloadType:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCRtcpParameters : sig
  type t = [`RTCRtcpParameters] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCRtcpParameters]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCRtcpParameters]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCRtcpParameters ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_cname: 'tags this -> string option [@@js.get "cname"]
  val set_cname: 'tags this -> string -> unit [@@js.set "cname"]
  val get_reducedSize: 'tags this -> bool option [@@js.get "reducedSize"]
  val set_reducedSize: 'tags this -> bool -> unit [@@js.set "reducedSize"]
  val create: ?cname:string -> ?reducedSize:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCRtpParameters : sig
  type t = [`RTCRtpParameters] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCRtpParameters]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCRtpParameters]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCRtpParameters ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_codecs: 'tags this -> RTCRtpCodecParameters.t list [@@js.get "codecs"]
  val set_codecs: 'tags this -> RTCRtpCodecParameters.t list -> unit [@@js.set "codecs"]
  val get_headerExtensions: 'tags this -> RTCRtpHeaderExtensionParameters.t list [@@js.get "headerExtensions"]
  val set_headerExtensions: 'tags this -> RTCRtpHeaderExtensionParameters.t list -> unit [@@js.set "headerExtensions"]
  val get_rtcp: 'tags this -> RTCRtcpParameters.t [@@js.get "rtcp"]
  val set_rtcp: 'tags this -> RTCRtcpParameters.t -> unit [@@js.set "rtcp"]
  val create: codecs:RTCRtpCodecParameters.t list -> headerExtensions:RTCRtpHeaderExtensionParameters.t list -> rtcp:RTCRtcpParameters.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCRtpSendParameters : sig
  type t = [`RTCRtpParameters | `RTCRtpSendParameters] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCRtpParameters | `RTCRtpSendParameters]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCRtpParameters | `RTCRtpSendParameters]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCRtpSendParameters ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_degradationPreference: 'tags this -> RTCDegradationPreference.t option [@@js.get "degradationPreference"]
  val set_degradationPreference: 'tags this -> RTCDegradationPreference.t -> unit [@@js.set "degradationPreference"]
  val get_encodings: 'tags this -> RTCRtpEncodingParameters.t list [@@js.get "encodings"]
  val set_encodings: 'tags this -> RTCRtpEncodingParameters.t list -> unit [@@js.set "encodings"]
  val get_transactionId: 'tags this -> string [@@js.get "transactionId"]
  val set_transactionId: 'tags this -> string -> unit [@@js.set "transactionId"]
  val create: ?degradationPreference:RTCDegradationPreference.t -> encodings:RTCRtpEncodingParameters.t list -> transactionId:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCDTMFToneChangeEventInit : sig
  type t = [`EventInit | `RTCDTMFToneChangeEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `RTCDTMFToneChangeEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `RTCDTMFToneChangeEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCDTMFToneChangeEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_tone: 'tags this -> string option [@@js.get "tone"]
  val set_tone: 'tags this -> string -> unit [@@js.set "tone"]
  val create: ?tone:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Events sent to indicate that DTMF tones have started or finished playing. This interface is used by the tonechange event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDTMFToneChangeEvent)
*)
module[@js.scope "RTCDTMFToneChangeEvent"] RTCDTMFToneChangeEvent : sig
  type t = [`Event | `RTCDTMFToneChangeEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `RTCDTMFToneChangeEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `RTCDTMFToneChangeEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCDTMFToneChangeEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDTMFToneChangeEvent/tone) *)
  val get_tone: 'tags this -> string [@@js.get "tone"]
  val create: tone:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> ?eventInitDict:RTCDTMFToneChangeEventInit.t -> unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDTMFSender) *)
module[@js.scope "RTCDTMFSender"] RTCDTMFSender : sig
  type t = [`EventTarget | `RTCDTMFSender] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `RTCDTMFSender]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `RTCDTMFSender]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCDTMFSender ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDTMFSender/canInsertDTMF) *)
  val get_canInsertDTMF: 'tags this -> bool [@@js.get "canInsertDTMF"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDTMFSender/tonechange_event) *)
  val get_ontonechange: 'tags this -> (this:t -> ev:RTCDTMFToneChangeEvent.t -> any) option [@@js.get "ontonechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDTMFSender/tonechange_event) *)
  val set_ontonechange: 'tags this -> (this:t -> ev:RTCDTMFToneChangeEvent.t -> any) option -> unit [@@js.set "ontonechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDTMFSender/toneBuffer) *)
  val get_toneBuffer: 'tags this -> string [@@js.get "toneBuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDTMFSender/insertDTMF) *)
  val insertDTMF: 'tags this -> tones:string -> ?duration:float -> ?interToneGap:float -> unit -> unit [@@js.call "insertDTMF"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'RTCDTMFSenderEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'RTCDTMFSenderEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCStatsReport) *)
module[@js.scope "RTCStatsReport"] RTCStatsReport : sig
  type t = [`RTCStatsReport] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCStatsReport]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCStatsReport]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCStatsReport ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val forEach: 'tags this -> callbackfn:(value:any -> key:string -> parent:t -> unit) -> ?thisArg:any -> unit -> unit [@@js.call "forEach"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module RequestCredentials : sig
  type t = ([`L_s514_include[@js "include"] | `L_s697_omit[@js "omit"] | `L_s845_same_origin[@js "same-origin"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module WorkerType : sig
  type t = ([`L_s251_classic[@js "classic"] | `L_s627_module[@js "module"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module WorkerOptions : sig
  type t = [`WorkerOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WorkerOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WorkerOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WorkerOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_credentials: 'tags this -> RequestCredentials.t option [@@js.get "credentials"]
  val set_credentials: 'tags this -> RequestCredentials.t -> unit [@@js.set "credentials"]
  val get_name: 'tags this -> string option [@@js.get "name"]
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  val get_type: 'tags this -> WorkerType.t option [@@js.get "type"]
  val set_type: 'tags this -> WorkerType.t -> unit [@@js.set "type"]
  val create: ?credentials:RequestCredentials.t -> ?name:string -> ?type_:(WorkerType.t[@js "type"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCRtpContributingSource : sig
  type t = [`RTCRtpContributingSource] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCRtpContributingSource]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCRtpContributingSource]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCRtpContributingSource ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_audioLevel: 'tags this -> float option [@@js.get "audioLevel"]
  val set_audioLevel: 'tags this -> float -> unit [@@js.set "audioLevel"]
  val get_rtpTimestamp: 'tags this -> float [@@js.get "rtpTimestamp"]
  val set_rtpTimestamp: 'tags this -> float -> unit [@@js.set "rtpTimestamp"]
  val get_source: 'tags this -> float [@@js.get "source"]
  val set_source: 'tags this -> float -> unit [@@js.set "source"]
  val get_timestamp: 'tags this -> DOMHighResTimeStamp.t [@@js.get "timestamp"]
  val set_timestamp: 'tags this -> DOMHighResTimeStamp.t -> unit [@@js.set "timestamp"]
  val create: ?audioLevel:float -> rtpTimestamp:float -> source:float -> timestamp:DOMHighResTimeStamp.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCRtpSynchronizationSource : sig
  type t = [`RTCRtpContributingSource | `RTCRtpSynchronizationSource] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCRtpContributingSource | `RTCRtpSynchronizationSource]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCRtpContributingSource | `RTCRtpSynchronizationSource]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCRtpSynchronizationSource ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCRtpReceiveParameters : sig
  type t = [`RTCRtpParameters | `RTCRtpReceiveParameters] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCRtpParameters | `RTCRtpReceiveParameters]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCRtpParameters | `RTCRtpReceiveParameters]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCRtpReceiveParameters ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCRtpHeaderExtensionCapability : sig
  type t = [`RTCRtpHeaderExtensionCapability] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCRtpHeaderExtensionCapability]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCRtpHeaderExtensionCapability]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCRtpHeaderExtensionCapability ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_uri: 'tags this -> string [@@js.get "uri"]
  val set_uri: 'tags this -> string -> unit [@@js.set "uri"]
  val create: uri:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCRtpCodecCapability : sig
  type t = [`RTCRtpCodec | `RTCRtpCodecCapability] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCRtpCodec | `RTCRtpCodecCapability]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCRtpCodec | `RTCRtpCodecCapability]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCRtpCodecCapability ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCRtpCapabilities : sig
  type t = [`RTCRtpCapabilities] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCRtpCapabilities]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCRtpCapabilities]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCRtpCapabilities ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_codecs: 'tags this -> RTCRtpCodecCapability.t list [@@js.get "codecs"]
  val set_codecs: 'tags this -> RTCRtpCodecCapability.t list -> unit [@@js.set "codecs"]
  val get_headerExtensions: 'tags this -> RTCRtpHeaderExtensionCapability.t list [@@js.get "headerExtensions"]
  val set_headerExtensions: 'tags this -> RTCRtpHeaderExtensionCapability.t list -> unit [@@js.set "headerExtensions"]
  val create: codecs:RTCRtpCodecCapability.t list -> headerExtensions:RTCRtpHeaderExtensionCapability.t list -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCIceTransportState : sig
  type t = ([`L_s245_checking[@js "checking"] | `L_s255_closed[@js "closed"] | `L_s266_completed[@js "completed"] | `L_s274_connected[@js "connected"] | `L_s336_disconnected[@js "disconnected"] | `L_s387_failed[@js "failed"] | `L_s669_new[@js "new"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RTCIceGathererState : sig
  type t = ([`L_s265_complete[@js "complete"] | `L_s448_gathering[@js "gathering"] | `L_s669_new[@js "new"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RTCIceTcpCandidateType : sig
  type t = ([`L_s120_active[@js "active"] | `L_s727_passive[@js "passive"] | `L_s898_so[@js "so"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RTCIceProtocol : sig
  type t = ([`L_s1002_udp[@js "udp"] | `L_s953_tcp[@js "tcp"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RTCIceComponent : sig
  type t = ([`L_s839_rtcp[@js "rtcp"] | `L_s841_rtp[@js "rtp"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RTCIceCandidateType : sig
  type t = ([`L_s488_host[@js "host"] | `L_s779_prflx[@js "prflx"] | `L_s808_relay[@js "relay"] | `L_s914_srflx[@js "srflx"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RTCIceCandidateInit : sig
  type t = [`RTCIceCandidateInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCIceCandidateInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCIceCandidateInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCIceCandidateInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_candidate: 'tags this -> string option [@@js.get "candidate"]
  val set_candidate: 'tags this -> string -> unit [@@js.set "candidate"]
  val get_sdpMLineIndex: 'tags this -> float option [@@js.get "sdpMLineIndex"]
  val set_sdpMLineIndex: 'tags this -> float option -> unit [@@js.set "sdpMLineIndex"]
  val get_sdpMid: 'tags this -> string option [@@js.get "sdpMid"]
  val set_sdpMid: 'tags this -> string option -> unit [@@js.set "sdpMid"]
  val get_usernameFragment: 'tags this -> string option [@@js.get "usernameFragment"]
  val set_usernameFragment: 'tags this -> string option -> unit [@@js.set "usernameFragment"]
  val create: ?candidate:string -> ?sdpMLineIndex:float -> ?sdpMid:string -> ?usernameFragment:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The RTCIceCandidate interfaceâpart of the WebRTC APIârepresents a candidate Internet Connectivity Establishment (ICE) configuration which may be used to establish an RTCPeerConnection.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate)
*)
module[@js.scope "RTCIceCandidate"] RTCIceCandidate : sig
  type t = [`RTCIceCandidate] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCIceCandidate]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCIceCandidate]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCIceCandidate ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/address) *)
  val get_address: 'tags this -> string option [@@js.get "address"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/candidate) *)
  val get_candidate: 'tags this -> string [@@js.get "candidate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/component) *)
  val get_component: 'tags this -> RTCIceComponent.t option [@@js.get "component"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/foundation) *)
  val get_foundation: 'tags this -> string option [@@js.get "foundation"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/port) *)
  val get_port: 'tags this -> float option [@@js.get "port"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/priority) *)
  val get_priority: 'tags this -> float option [@@js.get "priority"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/protocol) *)
  val get_protocol: 'tags this -> RTCIceProtocol.t option [@@js.get "protocol"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/relatedAddress) *)
  val get_relatedAddress: 'tags this -> string option [@@js.get "relatedAddress"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/relatedPort) *)
  val get_relatedPort: 'tags this -> float option [@@js.get "relatedPort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/sdpMLineIndex) *)
  val get_sdpMLineIndex: 'tags this -> float option [@@js.get "sdpMLineIndex"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/sdpMid) *)
  val get_sdpMid: 'tags this -> string option [@@js.get "sdpMid"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/tcpType) *)
  val get_tcpType: 'tags this -> RTCIceTcpCandidateType.t option [@@js.get "tcpType"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/type) *)
  val get_type: 'tags this -> RTCIceCandidateType.t option [@@js.get "type"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/usernameFragment) *)
  val get_usernameFragment: 'tags this -> string option [@@js.get "usernameFragment"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/toJSON) *)
  val toJSON: 'tags this -> RTCIceCandidateInit.t [@@js.call "toJSON"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: ?candidateInitDict:RTCIceCandidateInit.t -> unit -> t [@@js.create]
end
module RTCIceCandidatePair : sig
  type t = [`RTCIceCandidatePair] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCIceCandidatePair]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCIceCandidatePair]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCIceCandidatePair ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_local: 'tags this -> RTCIceCandidate.t option [@@js.get "local"]
  val set_local: 'tags this -> RTCIceCandidate.t -> unit [@@js.set "local"]
  val get_remote: 'tags this -> RTCIceCandidate.t option [@@js.get "remote"]
  val set_remote: 'tags this -> RTCIceCandidate.t -> unit [@@js.set "remote"]
  val create: ?local:RTCIceCandidate.t -> ?remote:RTCIceCandidate.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Provides access to information about the ICE transport layer over which the data is being sent and received.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCIceTransport)
*)
module[@js.scope "RTCIceTransport"] RTCIceTransport : sig
  type t = [`EventTarget | `RTCIceTransport] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `RTCIceTransport]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `RTCIceTransport]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCIceTransport ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCIceTransport/gatheringState) *)
  val get_gatheringState: 'tags this -> RTCIceGathererState.t [@@js.get "gatheringState"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCIceTransport/gatheringstatechange_event) *)
  val get_ongatheringstatechange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "ongatheringstatechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCIceTransport/gatheringstatechange_event) *)
  val set_ongatheringstatechange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "ongatheringstatechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCIceTransport/selectedcandidatepairchange_event) *)
  val get_onselectedcandidatepairchange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onselectedcandidatepairchange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCIceTransport/selectedcandidatepairchange_event) *)
  val set_onselectedcandidatepairchange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onselectedcandidatepairchange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCIceTransport/statechange_event) *)
  val get_onstatechange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onstatechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCIceTransport/statechange_event) *)
  val set_onstatechange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onstatechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCIceTransport/state) *)
  val get_state: 'tags this -> RTCIceTransportState.t [@@js.get "state"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCIceTransport/getSelectedCandidatePair) *)
  val getSelectedCandidatePair: 'tags this -> RTCIceCandidatePair.t option [@@js.call "getSelectedCandidatePair"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'RTCIceTransportEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'RTCIceTransportEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module RTCDtlsTransportState : sig
  type t = ([`L_s255_closed[@js "closed"] | `L_s274_connected[@js "connected"] | `L_s275_connecting[@js "connecting"] | `L_s387_failed[@js "failed"] | `L_s669_new[@js "new"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDtlsTransport) *)
module[@js.scope "RTCDtlsTransport"] RTCDtlsTransport : sig
  type t = [`EventTarget | `RTCDtlsTransport] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `RTCDtlsTransport]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `RTCDtlsTransport]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCDtlsTransport ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDtlsTransport/iceTransport) *)
  val get_iceTransport: 'tags this -> RTCIceTransport.t [@@js.get "iceTransport"]
  val get_onerror: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onerror"]
  val set_onerror: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDtlsTransport/statechange_event) *)
  val get_onstatechange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onstatechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDtlsTransport/statechange_event) *)
  val set_onstatechange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onstatechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDtlsTransport/state) *)
  val get_state: 'tags this -> RTCDtlsTransportState.t [@@js.get "state"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDtlsTransport/getRemoteCertificates) *)
  val getRemoteCertificates: 'tags this -> ArrayBuffer.t list [@@js.call "getRemoteCertificates"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'RTCDtlsTransportEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'RTCDtlsTransportEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module RTCPeerConnectionIceEventInit : sig
  type t = [`EventInit | `RTCPeerConnectionIceEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `RTCPeerConnectionIceEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `RTCPeerConnectionIceEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCPeerConnectionIceEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_candidate: 'tags this -> RTCIceCandidate.t option [@@js.get "candidate"]
  val set_candidate: 'tags this -> RTCIceCandidate.t option -> unit [@@js.set "candidate"]
  val get_url: 'tags this -> string option [@@js.get "url"]
  val set_url: 'tags this -> string option -> unit [@@js.set "url"]
  val create: ?candidate:RTCIceCandidate.t -> ?url:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Events that occurs in relation to ICE candidates with the target, usually an RTCPeerConnection. Only one event is of this type: icecandidate.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnectionIceEvent)
*)
module[@js.scope "RTCPeerConnectionIceEvent"] RTCPeerConnectionIceEvent : sig
  type t = [`Event | `RTCPeerConnectionIceEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `RTCPeerConnectionIceEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `RTCPeerConnectionIceEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCPeerConnectionIceEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnectionIceEvent/candidate) *)
  val get_candidate: 'tags this -> RTCIceCandidate.t option [@@js.get "candidate"]
  val create: ?candidate:RTCIceCandidate.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> ?eventInitDict:RTCPeerConnectionIceEventInit.t -> unit -> t [@@js.create]
end
module RTCPeerConnectionIceErrorEventInit : sig
  type t = [`EventInit | `RTCPeerConnectionIceErrorEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `RTCPeerConnectionIceErrorEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `RTCPeerConnectionIceErrorEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCPeerConnectionIceErrorEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_address: 'tags this -> string option [@@js.get "address"]
  val set_address: 'tags this -> string option -> unit [@@js.set "address"]
  val get_errorCode: 'tags this -> float [@@js.get "errorCode"]
  val set_errorCode: 'tags this -> float -> unit [@@js.set "errorCode"]
  val get_errorText: 'tags this -> string option [@@js.get "errorText"]
  val set_errorText: 'tags this -> string -> unit [@@js.set "errorText"]
  val get_port: 'tags this -> float option [@@js.get "port"]
  val set_port: 'tags this -> float option -> unit [@@js.set "port"]
  val get_url: 'tags this -> string option [@@js.get "url"]
  val set_url: 'tags this -> string -> unit [@@js.set "url"]
  val create: ?address:string -> errorCode:float -> ?errorText:string -> ?port:float -> ?url:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnectionIceErrorEvent) *)
module[@js.scope "RTCPeerConnectionIceErrorEvent"] RTCPeerConnectionIceErrorEvent : sig
  type t = [`Event | `RTCPeerConnectionIceErrorEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `RTCPeerConnectionIceErrorEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `RTCPeerConnectionIceErrorEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCPeerConnectionIceErrorEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnectionIceErrorEvent/address) *)
  val get_address: 'tags this -> string option [@@js.get "address"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnectionIceErrorEvent/errorCode) *)
  val get_errorCode: 'tags this -> float [@@js.get "errorCode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnectionIceErrorEvent/errorText) *)
  val get_errorText: 'tags this -> string [@@js.get "errorText"]
  val get_port: 'tags this -> float option [@@js.get "port"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnectionIceErrorEvent/url) *)
  val get_url: 'tags this -> string [@@js.get "url"]
  val create: ?address:string -> errorCode:float -> errorText:string -> ?port:float -> url:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> eventInitDict:RTCPeerConnectionIceErrorEventInit.t -> t [@@js.create]
end
module RTCErrorDetailType : sig
  type t = ([`L_s297_data_channel_failure[@js "data-channel-failure"] | `L_s352_dtls_failure[@js "dtls-failure"] | `L_s420_fingerprint_failure[@js "fingerprint-failure"] | `L_s467_hardware_encoder_error[@js "hardware-encoder-error"] | `L_s468_hardware_encoder_not_available[@js "hardware-encoder-not-available"] | `L_s854_sctp_failure[@js "sctp-failure"] | `L_s855_sdp_syntax_error[@js "sdp-syntax-error"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RTCErrorInit : sig
  type t = [`RTCErrorInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCErrorInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCErrorInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCErrorInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_errorDetail: 'tags this -> RTCErrorDetailType.t [@@js.get "errorDetail"]
  val set_errorDetail: 'tags this -> RTCErrorDetailType.t -> unit [@@js.set "errorDetail"]
  val get_httpRequestStatusCode: 'tags this -> float option [@@js.get "httpRequestStatusCode"]
  val set_httpRequestStatusCode: 'tags this -> float -> unit [@@js.set "httpRequestStatusCode"]
  val get_receivedAlert: 'tags this -> float option [@@js.get "receivedAlert"]
  val set_receivedAlert: 'tags this -> float -> unit [@@js.set "receivedAlert"]
  val get_sctpCauseCode: 'tags this -> float option [@@js.get "sctpCauseCode"]
  val set_sctpCauseCode: 'tags this -> float -> unit [@@js.set "sctpCauseCode"]
  val get_sdpLineNumber: 'tags this -> float option [@@js.get "sdpLineNumber"]
  val set_sdpLineNumber: 'tags this -> float -> unit [@@js.set "sdpLineNumber"]
  val get_sentAlert: 'tags this -> float option [@@js.get "sentAlert"]
  val set_sentAlert: 'tags this -> float -> unit [@@js.set "sentAlert"]
  val create: errorDetail:RTCErrorDetailType.t -> ?httpRequestStatusCode:float -> ?receivedAlert:float -> ?sctpCauseCode:float -> ?sdpLineNumber:float -> ?sentAlert:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  An abnormal event (called an exception) which occurs as a result of calling a method or accessing a property of a web API.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMException)
*)
module[@js.scope "DOMException"] DOMException : sig
  type t = [`DOMException] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DOMException]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DOMException]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DOMException ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMException/code) *)
  val get_code: 'tags this -> float [@@js.get "code"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMException/message) *)
  val get_message: 'tags this -> string [@@js.get "message"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMException/name) *)
  val get_name: 'tags this -> string [@@js.get "name"]
  val get_INDEX_SIZE_ERR: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "INDEX_SIZE_ERR"]
  val get_DOMSTRING_SIZE_ERR: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "DOMSTRING_SIZE_ERR"]
  val get_HIERARCHY_REQUEST_ERR: 'tags this -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "HIERARCHY_REQUEST_ERR"]
  val get_WRONG_DOCUMENT_ERR: 'tags this -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "WRONG_DOCUMENT_ERR"]
  val get_INVALID_CHARACTER_ERR: 'tags this -> ([`L_n_5[@js 5]] [@js.enum]) [@@js.get "INVALID_CHARACTER_ERR"]
  val get_NO_DATA_ALLOWED_ERR: 'tags this -> ([`L_n_6[@js 6]] [@js.enum]) [@@js.get "NO_DATA_ALLOWED_ERR"]
  val get_NO_MODIFICATION_ALLOWED_ERR: 'tags this -> ([`L_n_7[@js 7]] [@js.enum]) [@@js.get "NO_MODIFICATION_ALLOWED_ERR"]
  val get_NOT_FOUND_ERR: 'tags this -> ([`L_n_8[@js 8]] [@js.enum]) [@@js.get "NOT_FOUND_ERR"]
  val get_NOT_SUPPORTED_ERR: 'tags this -> ([`L_n_9[@js 9]] [@js.enum]) [@@js.get "NOT_SUPPORTED_ERR"]
  val get_INUSE_ATTRIBUTE_ERR: 'tags this -> ([`L_n_10[@js 10]] [@js.enum]) [@@js.get "INUSE_ATTRIBUTE_ERR"]
  val get_INVALID_STATE_ERR: 'tags this -> ([`L_n_11[@js 11]] [@js.enum]) [@@js.get "INVALID_STATE_ERR"]
  val get_SYNTAX_ERR: 'tags this -> ([`L_n_12[@js 12]] [@js.enum]) [@@js.get "SYNTAX_ERR"]
  val get_INVALID_MODIFICATION_ERR: 'tags this -> ([`L_n_13[@js 13]] [@js.enum]) [@@js.get "INVALID_MODIFICATION_ERR"]
  val get_NAMESPACE_ERR: 'tags this -> ([`L_n_14[@js 14]] [@js.enum]) [@@js.get "NAMESPACE_ERR"]
  val get_INVALID_ACCESS_ERR: 'tags this -> ([`L_n_15[@js 15]] [@js.enum]) [@@js.get "INVALID_ACCESS_ERR"]
  val get_VALIDATION_ERR: 'tags this -> ([`L_n_16[@js 16]] [@js.enum]) [@@js.get "VALIDATION_ERR"]
  val get_TYPE_MISMATCH_ERR: 'tags this -> ([`L_n_17[@js 17]] [@js.enum]) [@@js.get "TYPE_MISMATCH_ERR"]
  val get_SECURITY_ERR: 'tags this -> ([`L_n_18[@js 18]] [@js.enum]) [@@js.get "SECURITY_ERR"]
  val get_NETWORK_ERR: 'tags this -> ([`L_n_19[@js 19]] [@js.enum]) [@@js.get "NETWORK_ERR"]
  val get_ABORT_ERR: 'tags this -> ([`L_n_20[@js 20]] [@js.enum]) [@@js.get "ABORT_ERR"]
  val get_URL_MISMATCH_ERR: 'tags this -> ([`L_n_21[@js 21]] [@js.enum]) [@@js.get "URL_MISMATCH_ERR"]
  val get_QUOTA_EXCEEDED_ERR: 'tags this -> ([`L_n_22[@js 22]] [@js.enum]) [@@js.get "QUOTA_EXCEEDED_ERR"]
  val get_TIMEOUT_ERR: 'tags this -> ([`L_n_23[@js 23]] [@js.enum]) [@@js.get "TIMEOUT_ERR"]
  val get_INVALID_NODE_TYPE_ERR: 'tags this -> ([`L_n_24[@js 24]] [@js.enum]) [@@js.get "INVALID_NODE_TYPE_ERR"]
  val get_DATA_CLONE_ERR: 'tags this -> ([`L_n_25[@js 25]] [@js.enum]) [@@js.get "DATA_CLONE_ERR"]
  val create: code:float -> message:string -> name:string -> index_size_err:(([`L_n_1[@js 1]] [@js.enum])[@js "INDEX_SIZE_ERR"]) -> domstring_size_err:(([`L_n_2[@js 2]] [@js.enum])[@js "DOMSTRING_SIZE_ERR"]) -> hierarchy_request_err:(([`L_n_3[@js 3]] [@js.enum])[@js "HIERARCHY_REQUEST_ERR"]) -> wrong_document_err:(([`L_n_4[@js 4]] [@js.enum])[@js "WRONG_DOCUMENT_ERR"]) -> invalid_character_err:(([`L_n_5[@js 5]] [@js.enum])[@js "INVALID_CHARACTER_ERR"]) -> no_data_allowed_err:(([`L_n_6[@js 6]] [@js.enum])[@js "NO_DATA_ALLOWED_ERR"]) -> no_modification_allowed_err:(([`L_n_7[@js 7]] [@js.enum])[@js "NO_MODIFICATION_ALLOWED_ERR"]) -> not_found_err:(([`L_n_8[@js 8]] [@js.enum])[@js "NOT_FOUND_ERR"]) -> not_supported_err:(([`L_n_9[@js 9]] [@js.enum])[@js "NOT_SUPPORTED_ERR"]) -> inuse_attribute_err:(([`L_n_10[@js 10]] [@js.enum])[@js "INUSE_ATTRIBUTE_ERR"]) -> invalid_state_err:(([`L_n_11[@js 11]] [@js.enum])[@js "INVALID_STATE_ERR"]) -> syntax_err:(([`L_n_12[@js 12]] [@js.enum])[@js "SYNTAX_ERR"]) -> invalid_modification_err:(([`L_n_13[@js 13]] [@js.enum])[@js "INVALID_MODIFICATION_ERR"]) -> namespace_err:(([`L_n_14[@js 14]] [@js.enum])[@js "NAMESPACE_ERR"]) -> invalid_access_err:(([`L_n_15[@js 15]] [@js.enum])[@js "INVALID_ACCESS_ERR"]) -> validation_err:(([`L_n_16[@js 16]] [@js.enum])[@js "VALIDATION_ERR"]) -> type_mismatch_err:(([`L_n_17[@js 17]] [@js.enum])[@js "TYPE_MISMATCH_ERR"]) -> security_err:(([`L_n_18[@js 18]] [@js.enum])[@js "SECURITY_ERR"]) -> network_err:(([`L_n_19[@js 19]] [@js.enum])[@js "NETWORK_ERR"]) -> abort_err:(([`L_n_20[@js 20]] [@js.enum])[@js "ABORT_ERR"]) -> url_mismatch_err:(([`L_n_21[@js 21]] [@js.enum])[@js "URL_MISMATCH_ERR"]) -> quota_exceeded_err:(([`L_n_22[@js 22]] [@js.enum])[@js "QUOTA_EXCEEDED_ERR"]) -> timeout_err:(([`L_n_23[@js 23]] [@js.enum])[@js "TIMEOUT_ERR"]) -> invalid_node_type_err:(([`L_n_24[@js 24]] [@js.enum])[@js "INVALID_NODE_TYPE_ERR"]) -> data_clone_err:(([`L_n_25[@js 25]] [@js.enum])[@js "DATA_CLONE_ERR"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': ?message:string -> ?name:string -> unit -> t [@@js.create]
  val index_size_err: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "INDEX_SIZE_ERR"]
  val domstring_size_err: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "DOMSTRING_SIZE_ERR"]
  val hierarchy_request_err: unit -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "HIERARCHY_REQUEST_ERR"]
  val wrong_document_err: unit -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "WRONG_DOCUMENT_ERR"]
  val invalid_character_err: unit -> ([`L_n_5[@js 5]] [@js.enum]) [@@js.get "INVALID_CHARACTER_ERR"]
  val no_data_allowed_err: unit -> ([`L_n_6[@js 6]] [@js.enum]) [@@js.get "NO_DATA_ALLOWED_ERR"]
  val no_modification_allowed_err: unit -> ([`L_n_7[@js 7]] [@js.enum]) [@@js.get "NO_MODIFICATION_ALLOWED_ERR"]
  val not_found_err: unit -> ([`L_n_8[@js 8]] [@js.enum]) [@@js.get "NOT_FOUND_ERR"]
  val not_supported_err: unit -> ([`L_n_9[@js 9]] [@js.enum]) [@@js.get "NOT_SUPPORTED_ERR"]
  val inuse_attribute_err: unit -> ([`L_n_10[@js 10]] [@js.enum]) [@@js.get "INUSE_ATTRIBUTE_ERR"]
  val invalid_state_err: unit -> ([`L_n_11[@js 11]] [@js.enum]) [@@js.get "INVALID_STATE_ERR"]
  val syntax_err: unit -> ([`L_n_12[@js 12]] [@js.enum]) [@@js.get "SYNTAX_ERR"]
  val invalid_modification_err: unit -> ([`L_n_13[@js 13]] [@js.enum]) [@@js.get "INVALID_MODIFICATION_ERR"]
  val namespace_err: unit -> ([`L_n_14[@js 14]] [@js.enum]) [@@js.get "NAMESPACE_ERR"]
  val invalid_access_err: unit -> ([`L_n_15[@js 15]] [@js.enum]) [@@js.get "INVALID_ACCESS_ERR"]
  val validation_err: unit -> ([`L_n_16[@js 16]] [@js.enum]) [@@js.get "VALIDATION_ERR"]
  val type_mismatch_err: unit -> ([`L_n_17[@js 17]] [@js.enum]) [@@js.get "TYPE_MISMATCH_ERR"]
  val security_err: unit -> ([`L_n_18[@js 18]] [@js.enum]) [@@js.get "SECURITY_ERR"]
  val network_err: unit -> ([`L_n_19[@js 19]] [@js.enum]) [@@js.get "NETWORK_ERR"]
  val abort_err: unit -> ([`L_n_20[@js 20]] [@js.enum]) [@@js.get "ABORT_ERR"]
  val url_mismatch_err: unit -> ([`L_n_21[@js 21]] [@js.enum]) [@@js.get "URL_MISMATCH_ERR"]
  val quota_exceeded_err: unit -> ([`L_n_22[@js 22]] [@js.enum]) [@@js.get "QUOTA_EXCEEDED_ERR"]
  val timeout_err: unit -> ([`L_n_23[@js 23]] [@js.enum]) [@@js.get "TIMEOUT_ERR"]
  val invalid_node_type_err: unit -> ([`L_n_24[@js 24]] [@js.enum]) [@@js.get "INVALID_NODE_TYPE_ERR"]
  val data_clone_err: unit -> ([`L_n_25[@js 25]] [@js.enum]) [@@js.get "DATA_CLONE_ERR"]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCError) *)
module[@js.scope "RTCError"] RTCError : sig
  type t = [`DOMException | `RTCError] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DOMException | `RTCError]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DOMException | `RTCError]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCError ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCError/errorDetail) *)
  val get_errorDetail: 'tags this -> RTCErrorDetailType.t [@@js.get "errorDetail"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCError/receivedAlert) *)
  val get_receivedAlert: 'tags this -> float option [@@js.get "receivedAlert"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCError/sctpCauseCode) *)
  val get_sctpCauseCode: 'tags this -> float option [@@js.get "sctpCauseCode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCError/sdpLineNumber) *)
  val get_sdpLineNumber: 'tags this -> float option [@@js.get "sdpLineNumber"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCError/sentAlert) *)
  val get_sentAlert: 'tags this -> float option [@@js.get "sentAlert"]
  val create: errorDetail:RTCErrorDetailType.t -> ?receivedAlert:float -> ?sctpCauseCode:float -> ?sdpLineNumber:float -> ?sentAlert:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': init:RTCErrorInit.t -> ?message:string -> unit -> t [@@js.create]
end
module RTCErrorEventInit : sig
  type t = [`EventInit | `RTCErrorEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `RTCErrorEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `RTCErrorEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCErrorEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_error: 'tags this -> RTCError.t [@@js.get "error"]
  val set_error: 'tags this -> RTCError.t -> unit [@@js.set "error"]
  val create: error:RTCError.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCErrorEvent) *)
module[@js.scope "RTCErrorEvent"] RTCErrorEvent : sig
  type t = [`Event | `RTCErrorEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `RTCErrorEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `RTCErrorEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCErrorEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCErrorEvent/error) *)
  val get_error: 'tags this -> RTCError.t [@@js.get "error"]
  val create: error:RTCError.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> eventInitDict:RTCErrorEventInit.t -> t [@@js.create]
end
module RTCDataChannelState : sig
  type t = ([`L_s255_closed[@js "closed"] | `L_s257_closing[@js "closing"] | `L_s275_connecting[@js "connecting"] | `L_s704_open[@js "open"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module BinaryType : sig
  type t = ([`L_s160_arraybuffer[@js "arraybuffer"] | `L_s204_blob[@js "blob"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PictureInPictureWindow) *)
module[@js.scope "PictureInPictureWindow"] PictureInPictureWindow : sig
  type t = [`EventTarget | `PictureInPictureWindow] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `PictureInPictureWindow]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `PictureInPictureWindow]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PictureInPictureWindow ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PictureInPictureWindow/height) *)
  val get_height: 'tags this -> float [@@js.get "height"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PictureInPictureWindow/resize_event) *)
  val get_onresize: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onresize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PictureInPictureWindow/resize_event) *)
  val set_onresize: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onresize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PictureInPictureWindow/width) *)
  val get_width: 'tags this -> float [@@js.get "width"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'PictureInPictureWindowEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'PictureInPictureWindowEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module PictureInPictureEventInit : sig
  type t = [`EventInit | `PictureInPictureEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `PictureInPictureEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `PictureInPictureEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PictureInPictureEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_pictureInPictureWindow: 'tags this -> PictureInPictureWindow.t [@@js.get "pictureInPictureWindow"]
  val set_pictureInPictureWindow: 'tags this -> PictureInPictureWindow.t -> unit [@@js.set "pictureInPictureWindow"]
  val create: pictureInPictureWindow:PictureInPictureWindow.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PictureInPictureEvent) *)
module[@js.scope "PictureInPictureEvent"] PictureInPictureEvent : sig
  type t = [`Event | `PictureInPictureEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `PictureInPictureEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `PictureInPictureEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PictureInPictureEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PictureInPictureEvent/pictureInPictureWindow) *)
  val get_pictureInPictureWindow: 'tags this -> PictureInPictureWindow.t [@@js.get "pictureInPictureWindow"]
  val create: pictureInPictureWindow:PictureInPictureWindow.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> eventInitDict:PictureInPictureEventInit.t -> t [@@js.create]
end
module PaymentCurrencyAmount : sig
  type t = [`PaymentCurrencyAmount] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PaymentCurrencyAmount]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PaymentCurrencyAmount]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PaymentCurrencyAmount ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_currency: 'tags this -> string [@@js.get "currency"]
  val set_currency: 'tags this -> string -> unit [@@js.set "currency"]
  val get_value: 'tags this -> string [@@js.get "value"]
  val set_value: 'tags this -> string -> unit [@@js.set "value"]
  val create: currency:string -> value:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module PaymentItem : sig
  type t = [`PaymentItem] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PaymentItem]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PaymentItem]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PaymentItem ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_amount: 'tags this -> PaymentCurrencyAmount.t [@@js.get "amount"]
  val set_amount: 'tags this -> PaymentCurrencyAmount.t -> unit [@@js.set "amount"]
  val get_label: 'tags this -> string [@@js.get "label"]
  val set_label: 'tags this -> string -> unit [@@js.set "label"]
  val get_pending: 'tags this -> bool option [@@js.get "pending"]
  val set_pending: 'tags this -> bool -> unit [@@js.set "pending"]
  val create: amount:PaymentCurrencyAmount.t -> label:string -> ?pending:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module PaymentDetailsModifier : sig
  type t = [`PaymentDetailsModifier] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PaymentDetailsModifier]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PaymentDetailsModifier]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PaymentDetailsModifier ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_additionalDisplayItems: 'tags this -> PaymentItem.t list option [@@js.get "additionalDisplayItems"]
  val set_additionalDisplayItems: 'tags this -> PaymentItem.t list -> unit [@@js.set "additionalDisplayItems"]
  val get_data: 'tags this -> any option [@@js.get "data"]
  val set_data: 'tags this -> any -> unit [@@js.set "data"]
  val get_supportedMethods: 'tags this -> string [@@js.get "supportedMethods"]
  val set_supportedMethods: 'tags this -> string -> unit [@@js.set "supportedMethods"]
  val get_total: 'tags this -> PaymentItem.t option [@@js.get "total"]
  val set_total: 'tags this -> PaymentItem.t -> unit [@@js.set "total"]
  val create: ?additionalDisplayItems:PaymentItem.t list -> ?data:any -> supportedMethods:string -> ?total:PaymentItem.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module PaymentDetailsBase : sig
  type t = [`PaymentDetailsBase] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PaymentDetailsBase]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PaymentDetailsBase]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PaymentDetailsBase ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_displayItems: 'tags this -> PaymentItem.t list option [@@js.get "displayItems"]
  val set_displayItems: 'tags this -> PaymentItem.t list -> unit [@@js.set "displayItems"]
  val get_modifiers: 'tags this -> PaymentDetailsModifier.t list option [@@js.get "modifiers"]
  val set_modifiers: 'tags this -> PaymentDetailsModifier.t list -> unit [@@js.set "modifiers"]
  val create: ?displayItems:PaymentItem.t list -> ?modifiers:PaymentDetailsModifier.t list -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module PaymentDetailsUpdate : sig
  type t = [`PaymentDetailsBase | `PaymentDetailsUpdate] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PaymentDetailsBase | `PaymentDetailsUpdate]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PaymentDetailsBase | `PaymentDetailsUpdate]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PaymentDetailsUpdate ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_paymentMethodErrors: 'tags this -> any option [@@js.get "paymentMethodErrors"]
  val set_paymentMethodErrors: 'tags this -> any -> unit [@@js.set "paymentMethodErrors"]
  val get_total: 'tags this -> PaymentItem.t option [@@js.get "total"]
  val set_total: 'tags this -> PaymentItem.t -> unit [@@js.set "total"]
  val create: ?paymentMethodErrors:any -> ?total:PaymentItem.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module PaymentRequestUpdateEventInit : sig
  type t = [`EventInit | `PaymentRequestUpdateEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `PaymentRequestUpdateEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `PaymentRequestUpdateEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PaymentRequestUpdateEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  This Payment Request API interface enables a web page to update the details of a PaymentRequest in response to a user action.
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PaymentRequestUpdateEvent)
*)
module[@js.scope "PaymentRequestUpdateEvent"] PaymentRequestUpdateEvent : sig
  type t = [`Event | `PaymentRequestUpdateEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `PaymentRequestUpdateEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `PaymentRequestUpdateEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PaymentRequestUpdateEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PaymentRequestUpdateEvent/updateWith) *)
  val updateWith: 'tags this -> detailsPromise:([`U1 of PaymentDetailsUpdate.t | `U2 of PaymentDetailsUpdate.t PromiseLike.t] [@js.union]) -> unit [@@js.call "updateWith"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: type_:string -> ?eventInitDict:PaymentRequestUpdateEventInit.t -> unit -> t [@@js.create]
end
module PaymentMethodChangeEventInit : sig
  type t = [`EventInit | `PaymentMethodChangeEventInit | `PaymentRequestUpdateEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `PaymentMethodChangeEventInit | `PaymentRequestUpdateEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `PaymentMethodChangeEventInit | `PaymentRequestUpdateEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PaymentMethodChangeEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_methodDetails: 'tags this -> any option [@@js.get "methodDetails"]
  val set_methodDetails: 'tags this -> any -> unit [@@js.set "methodDetails"]
  val get_methodName: 'tags this -> string option [@@js.get "methodName"]
  val set_methodName: 'tags this -> string -> unit [@@js.set "methodName"]
  val create: ?methodDetails:any -> ?methodName:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PaymentMethodChangeEvent)
*)
module[@js.scope "PaymentMethodChangeEvent"] PaymentMethodChangeEvent : sig
  type t = [`Event | `PaymentMethodChangeEvent | `PaymentRequestUpdateEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `PaymentMethodChangeEvent | `PaymentRequestUpdateEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `PaymentMethodChangeEvent | `PaymentRequestUpdateEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PaymentMethodChangeEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PaymentMethodChangeEvent/methodDetails) *)
  val get_methodDetails: 'tags this -> any [@@js.get "methodDetails"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PaymentMethodChangeEvent/methodName) *)
  val get_methodName: 'tags this -> string [@@js.get "methodName"]
  val create: methodDetails:any -> methodName:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> ?eventInitDict:PaymentMethodChangeEventInit.t -> unit -> t [@@js.create]
end
module AudioBufferOptions : sig
  type t = [`AudioBufferOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioBufferOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioBufferOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AudioBufferOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_length: 'tags this -> float [@@js.get "length"]
  val set_length: 'tags this -> float -> unit [@@js.set "length"]
  val get_numberOfChannels: 'tags this -> float option [@@js.get "numberOfChannels"]
  val set_numberOfChannels: 'tags this -> float -> unit [@@js.set "numberOfChannels"]
  val get_sampleRate: 'tags this -> float [@@js.get "sampleRate"]
  val set_sampleRate: 'tags this -> float -> unit [@@js.set "sampleRate"]
  val create: length:float -> ?numberOfChannels:float -> sampleRate:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  A short audio asset residing in memory, created from an audio file using the AudioContext.decodeAudioData() method, or from raw data using AudioContext.createBuffer(). Once put into an AudioBuffer, the audio can then be played by being passed into an AudioBufferSourceNode.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioBuffer)
*)
module[@js.scope "AudioBuffer"] AudioBuffer : sig
  type t = [`AudioBuffer] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioBuffer]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioBuffer]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AudioBuffer ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioBuffer/duration) *)
  val get_duration: 'tags this -> float [@@js.get "duration"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioBuffer/length) *)
  val get_length: 'tags this -> float [@@js.get "length"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioBuffer/numberOfChannels) *)
  val get_numberOfChannels: 'tags this -> float [@@js.get "numberOfChannels"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioBuffer/sampleRate) *)
  val get_sampleRate: 'tags this -> float [@@js.get "sampleRate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioBuffer/copyFromChannel) *)
  val copyFromChannel: 'tags this -> destination:Float32Array.t -> channelNumber:float -> ?bufferOffset:float -> unit -> unit [@@js.call "copyFromChannel"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioBuffer/copyToChannel) *)
  val copyToChannel: 'tags this -> source:Float32Array.t -> channelNumber:float -> ?bufferOffset:float -> unit -> unit [@@js.call "copyToChannel"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioBuffer/getChannelData) *)
  val getChannelData: 'tags this -> channel:float -> Float32Array.t [@@js.call "getChannelData"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: AudioBufferOptions.t -> t [@@js.create]
end
module OfflineAudioCompletionEventInit : sig
  type t = [`EventInit | `OfflineAudioCompletionEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `OfflineAudioCompletionEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `OfflineAudioCompletionEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OfflineAudioCompletionEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_renderedBuffer: 'tags this -> AudioBuffer.t [@@js.get "renderedBuffer"]
  val set_renderedBuffer: 'tags this -> AudioBuffer.t -> unit [@@js.set "renderedBuffer"]
  val create: renderedBuffer:AudioBuffer.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The Web Audio API OfflineAudioCompletionEvent interface represents events that occur when the processing of an OfflineAudioContext is terminated. The complete event implements this interface.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OfflineAudioCompletionEvent)
*)
module[@js.scope "OfflineAudioCompletionEvent"] OfflineAudioCompletionEvent : sig
  type t = [`Event | `OfflineAudioCompletionEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `OfflineAudioCompletionEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `OfflineAudioCompletionEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OfflineAudioCompletionEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OfflineAudioCompletionEvent/renderedBuffer) *)
  val get_renderedBuffer: 'tags this -> AudioBuffer.t [@@js.get "renderedBuffer"]
  val create: renderedBuffer:AudioBuffer.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> eventInitDict:OfflineAudioCompletionEventInit.t -> t [@@js.create]
end
module HTMLHyperlinkElementUtils : sig
  type t = [`HTMLHyperlinkElementUtils] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`HTMLHyperlinkElementUtils]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`HTMLHyperlinkElementUtils]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLHyperlinkElementUtils ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the hyperlink's URL's fragment (includes leading "#" if non-empty).
    
    Can be set, to change the URL's fragment (ignores leading "#").
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/hash)
  *)
  val get_hash: 'tags this -> string [@@js.get "hash"]
  
  (**
    Returns the hyperlink's URL's fragment (includes leading "#" if non-empty).
    
    Can be set, to change the URL's fragment (ignores leading "#").
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/hash)
  *)
  val set_hash: 'tags this -> string -> unit [@@js.set "hash"]
  
  (**
    Returns the hyperlink's URL's host and port (if different from the default port for the scheme).
    
    Can be set, to change the URL's host and port.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/host)
  *)
  val get_host: 'tags this -> string [@@js.get "host"]
  
  (**
    Returns the hyperlink's URL's host and port (if different from the default port for the scheme).
    
    Can be set, to change the URL's host and port.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/host)
  *)
  val set_host: 'tags this -> string -> unit [@@js.set "host"]
  
  (**
    Returns the hyperlink's URL's host.
    
    Can be set, to change the URL's host.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/hostname)
  *)
  val get_hostname: 'tags this -> string [@@js.get "hostname"]
  
  (**
    Returns the hyperlink's URL's host.
    
    Can be set, to change the URL's host.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/hostname)
  *)
  val set_hostname: 'tags this -> string -> unit [@@js.set "hostname"]
  
  (**
    Returns the hyperlink's URL.
    
    Can be set, to change the URL.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/href)
  *)
  val get_href: 'tags this -> string [@@js.get "href"]
  
  (**
    Returns the hyperlink's URL.
    
    Can be set, to change the URL.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/href)
  *)
  val set_href: 'tags this -> string -> unit [@@js.set "href"]
  val toString: 'tags this -> string [@@js.call "toString"]
  
  (**
    Returns the hyperlink's URL's origin.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/origin)
  *)
  val get_origin: 'tags this -> string [@@js.get "origin"]
  
  (**
    Returns the hyperlink's URL's password.
    
    Can be set, to change the URL's password.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/password)
  *)
  val get_password: 'tags this -> string [@@js.get "password"]
  
  (**
    Returns the hyperlink's URL's password.
    
    Can be set, to change the URL's password.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/password)
  *)
  val set_password: 'tags this -> string -> unit [@@js.set "password"]
  
  (**
    Returns the hyperlink's URL's path.
    
    Can be set, to change the URL's path.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/pathname)
  *)
  val get_pathname: 'tags this -> string [@@js.get "pathname"]
  
  (**
    Returns the hyperlink's URL's path.
    
    Can be set, to change the URL's path.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/pathname)
  *)
  val set_pathname: 'tags this -> string -> unit [@@js.set "pathname"]
  
  (**
    Returns the hyperlink's URL's port.
    
    Can be set, to change the URL's port.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/port)
  *)
  val get_port: 'tags this -> string [@@js.get "port"]
  
  (**
    Returns the hyperlink's URL's port.
    
    Can be set, to change the URL's port.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/port)
  *)
  val set_port: 'tags this -> string -> unit [@@js.set "port"]
  
  (**
    Returns the hyperlink's URL's scheme.
    
    Can be set, to change the URL's scheme.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/protocol)
  *)
  val get_protocol: 'tags this -> string [@@js.get "protocol"]
  
  (**
    Returns the hyperlink's URL's scheme.
    
    Can be set, to change the URL's scheme.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/protocol)
  *)
  val set_protocol: 'tags this -> string -> unit [@@js.set "protocol"]
  
  (**
    Returns the hyperlink's URL's query (includes leading "?" if non-empty).
    
    Can be set, to change the URL's query (ignores leading "?").
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/search)
  *)
  val get_search: 'tags this -> string [@@js.get "search"]
  
  (**
    Returns the hyperlink's URL's query (includes leading "?" if non-empty).
    
    Can be set, to change the URL's query (ignores leading "?").
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/search)
  *)
  val set_search: 'tags this -> string -> unit [@@js.set "search"]
  
  (**
    Returns the hyperlink's URL's username.
    
    Can be set, to change the URL's username.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/username)
  *)
  val get_username: 'tags this -> string [@@js.get "username"]
  
  (**
    Returns the hyperlink's URL's username.
    
    Can be set, to change the URL's username.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/username)
  *)
  val set_username: 'tags this -> string -> unit [@@js.set "username"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module FontFaceSetLoadStatus : sig
  type t = ([`L_s571_loaded[@js "loaded"] | `L_s575_loading[@js "loading"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module FontFaceLoadStatus : sig
  type t = ([`L_s1012_unloaded[@js "unloaded"] | `L_s372_error[@js "error"] | `L_s571_loaded[@js "loaded"] | `L_s575_loading[@js "loading"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module FontDisplay : sig
  type t = ([`L_s174_auto[@js "auto"] | `L_s205_block[@js "block"] | `L_s388_fallback[@js "fallback"] | `L_s709_optional[@js "optional"] | `L_s945_swap[@js "swap"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module FontFaceDescriptors : sig
  type t = [`FontFaceDescriptors] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FontFaceDescriptors]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FontFaceDescriptors]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FontFaceDescriptors ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_ascentOverride: 'tags this -> string option [@@js.get "ascentOverride"]
  val set_ascentOverride: 'tags this -> string -> unit [@@js.set "ascentOverride"]
  val get_descentOverride: 'tags this -> string option [@@js.get "descentOverride"]
  val set_descentOverride: 'tags this -> string -> unit [@@js.set "descentOverride"]
  val get_display: 'tags this -> FontDisplay.t option [@@js.get "display"]
  val set_display: 'tags this -> FontDisplay.t -> unit [@@js.set "display"]
  val get_featureSettings: 'tags this -> string option [@@js.get "featureSettings"]
  val set_featureSettings: 'tags this -> string -> unit [@@js.set "featureSettings"]
  val get_lineGapOverride: 'tags this -> string option [@@js.get "lineGapOverride"]
  val set_lineGapOverride: 'tags this -> string -> unit [@@js.set "lineGapOverride"]
  val get_stretch: 'tags this -> string option [@@js.get "stretch"]
  val set_stretch: 'tags this -> string -> unit [@@js.set "stretch"]
  val get_style: 'tags this -> string option [@@js.get "style"]
  val set_style: 'tags this -> string -> unit [@@js.set "style"]
  val get_unicodeRange: 'tags this -> string option [@@js.get "unicodeRange"]
  val set_unicodeRange: 'tags this -> string -> unit [@@js.set "unicodeRange"]
  val get_weight: 'tags this -> string option [@@js.get "weight"]
  val set_weight: 'tags this -> string -> unit [@@js.set "weight"]
  val create: ?ascentOverride:string -> ?descentOverride:string -> ?display:FontDisplay.t -> ?featureSettings:string -> ?lineGapOverride:string -> ?stretch:string -> ?style:string -> ?unicodeRange:string -> ?weight:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module BinaryData : sig
  type t = (ArrayBuffer.t, ArrayBufferView.t) union2
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace) *)
module[@js.scope "FontFace"] FontFace : sig
  type t = [`FontFace] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FontFace]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FontFace]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FontFace ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/ascentOverride) *)
  val get_ascentOverride: 'tags this -> string [@@js.get "ascentOverride"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/ascentOverride) *)
  val set_ascentOverride: 'tags this -> string -> unit [@@js.set "ascentOverride"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/descentOverride) *)
  val get_descentOverride: 'tags this -> string [@@js.get "descentOverride"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/descentOverride) *)
  val set_descentOverride: 'tags this -> string -> unit [@@js.set "descentOverride"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/display) *)
  val get_display: 'tags this -> FontDisplay.t [@@js.get "display"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/display) *)
  val set_display: 'tags this -> FontDisplay.t -> unit [@@js.set "display"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/family) *)
  val get_family: 'tags this -> string [@@js.get "family"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/family) *)
  val set_family: 'tags this -> string -> unit [@@js.set "family"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/featureSettings) *)
  val get_featureSettings: 'tags this -> string [@@js.get "featureSettings"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/featureSettings) *)
  val set_featureSettings: 'tags this -> string -> unit [@@js.set "featureSettings"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/lineGapOverride) *)
  val get_lineGapOverride: 'tags this -> string [@@js.get "lineGapOverride"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/lineGapOverride) *)
  val set_lineGapOverride: 'tags this -> string -> unit [@@js.set "lineGapOverride"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/loaded) *)
  val get_loaded: 'tags this -> t Promise.t [@@js.get "loaded"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/status) *)
  val get_status: 'tags this -> FontFaceLoadStatus.t [@@js.get "status"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/stretch) *)
  val get_stretch: 'tags this -> string [@@js.get "stretch"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/stretch) *)
  val set_stretch: 'tags this -> string -> unit [@@js.set "stretch"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/style) *)
  val get_style: 'tags this -> string [@@js.get "style"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/style) *)
  val set_style: 'tags this -> string -> unit [@@js.set "style"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/unicodeRange) *)
  val get_unicodeRange: 'tags this -> string [@@js.get "unicodeRange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/unicodeRange) *)
  val set_unicodeRange: 'tags this -> string -> unit [@@js.set "unicodeRange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/weight) *)
  val get_weight: 'tags this -> string [@@js.get "weight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/weight) *)
  val set_weight: 'tags this -> string -> unit [@@js.set "weight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFace/load) *)
  val load: 'tags this -> t Promise.t [@@js.call "load"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: family:string -> source:([`U1 of string | `U2 of BinaryData.t] [@js.union]) -> ?descriptors:FontFaceDescriptors.t -> unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFaceSet) *)
module[@js.scope "FontFaceSet"] FontFaceSet : sig
  type t = [`EventTarget | `FontFaceSet] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `FontFaceSet]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `FontFaceSet]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FontFaceSet ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFaceSet/loading_event) *)
  val get_onloading: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onloading"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFaceSet/loading_event) *)
  val set_onloading: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onloading"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFaceSet/loadingdone_event) *)
  val get_onloadingdone: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onloadingdone"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFaceSet/loadingdone_event) *)
  val set_onloadingdone: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onloadingdone"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFaceSet/loadingerror_event) *)
  val get_onloadingerror: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onloadingerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFaceSet/loadingerror_event) *)
  val set_onloadingerror: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onloadingerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFaceSet/ready) *)
  val get_ready: 'tags this -> t Promise.t [@@js.get "ready"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFaceSet/status) *)
  val get_status: 'tags this -> FontFaceSetLoadStatus.t [@@js.get "status"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFaceSet/check) *)
  val check: 'tags this -> font:string -> ?text:string -> unit -> bool [@@js.call "check"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFaceSet/load) *)
  val load: 'tags this -> font:string -> ?text:string -> unit -> FontFace.t list Promise.t [@@js.call "load"]
  val forEach: 'tags this -> callbackfn:(value:FontFace.t -> key:FontFace.t -> parent:t -> unit) -> ?thisArg:any -> unit -> unit [@@js.call "forEach"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'FontFaceSetEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'FontFaceSetEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: FontFace.t list -> t [@@js.create]
end
module FontFaceSource : sig
  type t = [`FontFaceSource] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FontFaceSource]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FontFaceSource]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FontFaceSource ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/fonts) *)
  val get_fonts: 'tags this -> FontFaceSet.t [@@js.get "fonts"]
  val create: fonts:FontFaceSet.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module FontFaceSetLoadEventInit : sig
  type t = [`EventInit | `FontFaceSetLoadEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `FontFaceSetLoadEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `FontFaceSetLoadEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FontFaceSetLoadEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_fontfaces: 'tags this -> FontFace.t list option [@@js.get "fontfaces"]
  val set_fontfaces: 'tags this -> FontFace.t list -> unit [@@js.set "fontfaces"]
  val create: ?fontfaces:FontFace.t list -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFaceSetLoadEvent) *)
module[@js.scope "FontFaceSetLoadEvent"] FontFaceSetLoadEvent : sig
  type t = [`Event | `FontFaceSetLoadEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `FontFaceSetLoadEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `FontFaceSetLoadEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FontFaceSetLoadEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FontFaceSetLoadEvent/fontfaces) *)
  val get_fontfaces: 'tags this -> FontFace.t list [@@js.get "fontfaces"]
  val create: fontfaces:FontFace.t list -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> ?eventInitDict:FontFaceSetLoadEventInit.t -> unit -> t [@@js.create]
end
module ElementCreationOptions : sig
  type t = [`ElementCreationOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ElementCreationOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ElementCreationOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ElementCreationOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_is: 'tags this -> string option [@@js.get "is"]
  val set_is: 'tags this -> string -> unit [@@js.set "is"]
  val create: ?is:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module DocumentVisibilityState : sig
  type t = ([`L_s1040_visible[@js "visible"] | `L_s477_hidden[@js "hidden"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module DocumentTimelineOptions : sig
  type t = [`DocumentTimelineOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DocumentTimelineOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DocumentTimelineOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DocumentTimelineOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_originTime: 'tags this -> DOMHighResTimeStamp.t option [@@js.get "originTime"]
  val set_originTime: 'tags this -> DOMHighResTimeStamp.t -> unit [@@js.set "originTime"]
  val create: ?originTime:DOMHighResTimeStamp.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSStyleValue) *)
module[@js.scope "CSSStyleValue"] CSSStyleValue : sig
  type t = [`CSSStyleValue] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSStyleValue]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSStyleValue]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSStyleValue ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val toString: 'tags this -> string [@@js.call "toString"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSStyleValue/parse_static) *)
  val parse: property:string -> cssText:string -> t [@@js.global "parse"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSStyleValue/parseAll_static) *)
  val parseAll: property:string -> cssText:string -> t list [@@js.global "parseAll"]
end
module CSSNumericBaseType : sig
  type t = ([`L_s143_angle[@js "angle"] | `L_s423_flex[@js "flex"] | `L_s439_frequency[@js "frequency"] | `L_s554_length[@js "length"] | `L_s737_percent[@js "percent"] | `L_s826_resolution[@js "resolution"] | `L_s975_time[@js "time"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module CSSNumericType : sig
  type t = [`CSSNumericType] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSNumericType]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSNumericType]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSNumericType ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_angle: 'tags this -> float option [@@js.get "angle"]
  val set_angle: 'tags this -> float -> unit [@@js.set "angle"]
  val get_flex: 'tags this -> float option [@@js.get "flex"]
  val set_flex: 'tags this -> float -> unit [@@js.set "flex"]
  val get_frequency: 'tags this -> float option [@@js.get "frequency"]
  val set_frequency: 'tags this -> float -> unit [@@js.set "frequency"]
  val get_length: 'tags this -> float option [@@js.get "length"]
  val set_length: 'tags this -> float -> unit [@@js.set "length"]
  val get_percent: 'tags this -> float option [@@js.get "percent"]
  val set_percent: 'tags this -> float -> unit [@@js.set "percent"]
  val get_percentHint: 'tags this -> CSSNumericBaseType.t option [@@js.get "percentHint"]
  val set_percentHint: 'tags this -> CSSNumericBaseType.t -> unit [@@js.set "percentHint"]
  val get_resolution: 'tags this -> float option [@@js.get "resolution"]
  val set_resolution: 'tags this -> float -> unit [@@js.set "resolution"]
  val get_time: 'tags this -> float option [@@js.get "time"]
  val set_time: 'tags this -> float -> unit [@@js.set "time"]
  val create: ?angle:float -> ?flex:float -> ?frequency:float -> ?length:float -> ?percent:float -> ?percentHint:CSSNumericBaseType.t -> ?resolution:float -> ?time:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module CSSMathOperator : sig
  type t = ([`L_s249_clamp[@js "clamp"] | `L_s532_invert[@js "invert"] | `L_s601_max[@js "max"] | `L_s621_min[@js "min"] | `L_s666_negate[@js "negate"] | `L_s783_product[@js "product"] | `L_s939_sum[@js "sum"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSMathSum) *)
module[@js.scope "CSSMathSum"] rec CSSMathSum : sig
  type t = [`CSSMathSum | `CSSMathValue | `CSSNumericValue | `CSSStyleValue] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSMathSum | `CSSMathValue | `CSSNumericValue | `CSSStyleValue]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSMathSum | `CSSMathValue | `CSSNumericValue | `CSSStyleValue]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSMathSum ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSMathSum/values) *)
  val get_values: 'tags this -> CSSNumericArray.t [@@js.get "values"]
  val create: values:CSSNumericArray.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': (CSSNumberish.t list [@js.variadic]) -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSMathValue) *)
and[@js.scope "CSSMathValue"] CSSMathValue : sig
  type t = [`CSSMathValue | `CSSNumericValue | `CSSStyleValue] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSMathValue | `CSSNumericValue | `CSSStyleValue]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSMathValue | `CSSNumericValue | `CSSStyleValue]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSMathValue ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSMathValue/operator) *)
  val get_operator: 'tags this -> CSSMathOperator.t [@@js.get "operator"]
  val create: operator:CSSMathOperator.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end
and CSSNumberish : sig
  type t = ([`Number of float | `Other of CSSNumericValue.t] [@js.union on_field "dummy"]) Primitive.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSNumericArray) *)
and[@js.scope "CSSNumericArray"] CSSNumericArray : sig
  type t = [`CSSNumericArray] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSNumericArray]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSNumericArray]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSNumericArray ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> CSSNumericValue.t IterableIterator.t *)
  val entries: 'tags this -> (float * CSSNumericValue.t) IterableIterator.t [@@js.call "entries"]
  val keys: 'tags this -> float IterableIterator.t [@@js.call "keys"]
  val values: 'tags this -> CSSNumericValue.t IterableIterator.t [@@js.call "values"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSNumericArray/length) *)
  val get_length: 'tags this -> float [@@js.get "length"]
  val forEach: 'tags this -> callbackfn:(value:CSSNumericValue.t -> key:float -> parent:t -> unit) -> ?thisArg:any -> unit -> unit [@@js.call "forEach"]
  val get: 'tags this -> float -> CSSNumericValue.t [@@js.index_get]
  val set: 'tags this -> float -> CSSNumericValue.t -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSNumericValue) *)
and[@js.scope "CSSNumericValue"] CSSNumericValue : sig
  type t = [`CSSNumericValue | `CSSStyleValue] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSNumericValue | `CSSStyleValue]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSNumericValue | `CSSStyleValue]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSNumericValue ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/add) *)
  val add: 'tags this -> values:(CSSNumberish.t list [@js.variadic]) -> t [@@js.call "add"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/div) *)
  val div: 'tags this -> values:(CSSNumberish.t list [@js.variadic]) -> t [@@js.call "div"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/equals) *)
  val equals: 'tags this -> value:(CSSNumberish.t list [@js.variadic]) -> bool [@@js.call "equals"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/max) *)
  val max: 'tags this -> values:(CSSNumberish.t list [@js.variadic]) -> t [@@js.call "max"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/min) *)
  val min: 'tags this -> values:(CSSNumberish.t list [@js.variadic]) -> t [@@js.call "min"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/mul) *)
  val mul: 'tags this -> values:(CSSNumberish.t list [@js.variadic]) -> t [@@js.call "mul"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/sub) *)
  val sub: 'tags this -> values:(CSSNumberish.t list [@js.variadic]) -> t [@@js.call "sub"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/to) *)
  val to_: 'tags this -> unit:string -> CSSUnitValue.t [@@js.call "to"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/toSum) *)
  val toSum: 'tags this -> units:(string list [@js.variadic]) -> CSSMathSum.t [@@js.call "toSum"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/type) *)
  val type_: 'tags this -> CSSNumericType.t [@@js.call "type"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/parse_static) *)
  val parse: string -> t [@@js.global "parse"]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSUnitValue) *)
and[@js.scope "CSSUnitValue"] CSSUnitValue : sig
  type t = [`CSSNumericValue | `CSSStyleValue | `CSSUnitValue] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSNumericValue | `CSSStyleValue | `CSSUnitValue]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSNumericValue | `CSSStyleValue | `CSSUnitValue]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSUnitValue ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSUnitValue/unit) *)
  val get_unit: 'tags this -> string [@@js.get "unit"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSUnitValue/value) *)
  val get_value: 'tags this -> float [@@js.get "value"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSUnitValue/value) *)
  val set_value: 'tags this -> float -> unit [@@js.set "value"]
  val create: unit:string -> value:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': value:float -> unit:string -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AnimationTimeline) *)
module[@js.scope "AnimationTimeline"] AnimationTimeline : sig
  type t = [`AnimationTimeline] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AnimationTimeline]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AnimationTimeline]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AnimationTimeline ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AnimationTimeline/currentTime) *)
  val get_currentTime: 'tags this -> CSSNumberish.t option [@@js.get "currentTime"]
  val create: ?currentTime:CSSNumberish.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DocumentTimeline) *)
module[@js.scope "DocumentTimeline"] DocumentTimeline : sig
  type t = [`AnimationTimeline | `DocumentTimeline] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AnimationTimeline | `DocumentTimeline]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AnimationTimeline | `DocumentTimeline]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DocumentTimeline ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: ?options:DocumentTimelineOptions.t -> unit -> t [@@js.create]
end
module DocumentReadyState : sig
  type t = ([`L_s265_complete[@js "complete"] | `L_s525_interactive[@js "interactive"] | `L_s575_loading[@js "loading"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module CustomEventInit : sig
  type 'T t = [`CustomEventInit of 'T | `EventInit] intf [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
  type t_0 = any t
  [@@@js.stop]
  type 'T tags = [`CustomEventInit of 'T | `EventInit]
  type tags_0 = any tags
  [@@@js.start]
  [@@@js.implem 
    type 'T tags = [`CustomEventInit of 'T | `EventInit]
    type tags_0 = any tags
  ]
  type ('tags, 'T) this = 'tags intf constraint 'tags = [> `CustomEventInit of 'T ]
  val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
  val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val get_detail: ('tags, 'T) this -> 'T option [@@js.get "detail"]
  val set_detail: ('tags, 'T) this -> 'T -> unit [@@js.set "detail"]
  val create: ?detail:'T -> unit -> 'T t [@@js.builder]
  val cast_from: ('tags, 'T) this -> 'T t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CustomEvent) *)
module[@js.scope "CustomEvent"] CustomEvent : sig
  type 'T t = [`CustomEvent of 'T | `Event] intf [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
  type t_0 = any t
  [@@@js.stop]
  type 'T tags = [`CustomEvent of 'T | `Event]
  type tags_0 = any tags
  [@@@js.start]
  [@@@js.implem 
    type 'T tags = [`CustomEvent of 'T | `Event]
    type tags_0 = any tags
  ]
  type ('tags, 'T) this = 'tags intf constraint 'tags = [> `CustomEvent of 'T ]
  val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
  val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  
  (**
    Returns any custom data event was created with. Typically used for synthetic events.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CustomEvent/detail)
  *)
  val get_detail: ('tags, 'T) this -> 'T [@@js.get "detail"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CustomEvent/initCustomEvent) *)
  val initCustomEvent: ('tags, 'T) this -> type_:string -> ?bubbles:bool -> ?cancelable:bool -> ?detail:'T -> unit -> unit [@@js.call "initCustomEvent"]
  val cast_from: ('tags, 'T) this -> 'T t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t_0 [@@js.get "prototype"]
  val create: type_:string -> ?eventInitDict:'T CustomEventInit.t -> unit -> 'T t [@@js.create]
end
module CloseEventInit : sig
  type t = [`CloseEventInit | `EventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CloseEventInit | `EventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CloseEventInit | `EventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CloseEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_code: 'tags this -> float option [@@js.get "code"]
  val set_code: 'tags this -> float -> unit [@@js.set "code"]
  val get_reason: 'tags this -> string option [@@js.get "reason"]
  val set_reason: 'tags this -> string -> unit [@@js.set "reason"]
  val get_wasClean: 'tags this -> bool option [@@js.get "wasClean"]
  val set_wasClean: 'tags this -> bool -> unit [@@js.set "wasClean"]
  val create: ?code:float -> ?reason:string -> ?wasClean:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  A CloseEvent is sent to clients using WebSockets when the connection is closed. This is delivered to the listener indicated by the WebSocket object's onclose attribute.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CloseEvent)
*)
module[@js.scope "CloseEvent"] CloseEvent : sig
  type t = [`CloseEvent | `Event] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CloseEvent | `Event]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CloseEvent | `Event]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CloseEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the WebSocket connection close code provided by the server.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CloseEvent/code)
  *)
  val get_code: 'tags this -> float [@@js.get "code"]
  
  (**
    Returns the WebSocket connection close reason provided by the server.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CloseEvent/reason)
  *)
  val get_reason: 'tags this -> string [@@js.get "reason"]
  
  (**
    Returns true if the connection closed cleanly; false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CloseEvent/wasClean)
  *)
  val get_wasClean: 'tags this -> bool [@@js.get "wasClean"]
  val create: code:float -> reason:string -> wasClean:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> ?eventInitDict:CloseEventInit.t -> unit -> t [@@js.create]
end
module BlobEventInit : sig
  type t = [`BlobEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`BlobEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`BlobEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `BlobEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_data: 'tags this -> Blob.t [@@js.get "data"]
  val set_data: 'tags this -> Blob.t -> unit [@@js.set "data"]
  val get_timecode: 'tags this -> DOMHighResTimeStamp.t option [@@js.get "timecode"]
  val set_timecode: 'tags this -> DOMHighResTimeStamp.t -> unit [@@js.set "timecode"]
  val create: data:Blob.t -> ?timecode:DOMHighResTimeStamp.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BlobEvent) *)
module[@js.scope "BlobEvent"] BlobEvent : sig
  type t = [`BlobEvent | `Event] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`BlobEvent | `Event]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`BlobEvent | `Event]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `BlobEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BlobEvent/data) *)
  val get_data: 'tags this -> Blob.t [@@js.get "data"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BlobEvent/timecode) *)
  val get_timecode: 'tags this -> DOMHighResTimeStamp.t [@@js.get "timecode"]
  val create: data:Blob.t -> timecode:DOMHighResTimeStamp.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> eventInitDict:BlobEventInit.t -> t [@@js.create]
end
module AudioProcessingEventInit : sig
  type t = [`AudioProcessingEventInit | `EventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioProcessingEventInit | `EventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioProcessingEventInit | `EventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AudioProcessingEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_inputBuffer: 'tags this -> AudioBuffer.t [@@js.get "inputBuffer"]
  val set_inputBuffer: 'tags this -> AudioBuffer.t -> unit [@@js.set "inputBuffer"]
  val get_outputBuffer: 'tags this -> AudioBuffer.t [@@js.get "outputBuffer"]
  val set_outputBuffer: 'tags this -> AudioBuffer.t -> unit [@@js.set "outputBuffer"]
  val get_playbackTime: 'tags this -> float [@@js.get "playbackTime"]
  val set_playbackTime: 'tags this -> float -> unit [@@js.set "playbackTime"]
  val create: inputBuffer:AudioBuffer.t -> outputBuffer:AudioBuffer.t -> playbackTime:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** The Web Audio API events that occur when a ScriptProcessorNode input buffer is ready to be processed. *)
module[@js.scope "AudioProcessingEvent"] AudioProcessingEvent : sig
  type t = [`AudioProcessingEvent | `Event] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioProcessingEvent | `Event]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioProcessingEvent | `Event]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AudioProcessingEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioProcessingEvent/inputBuffer) *)
  val get_inputBuffer: 'tags this -> AudioBuffer.t [@@js.get "inputBuffer"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioProcessingEvent/outputBuffer) *)
  val get_outputBuffer: 'tags this -> AudioBuffer.t [@@js.get "outputBuffer"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioProcessingEvent/playbackTime) *)
  val get_playbackTime: 'tags this -> float [@@js.get "playbackTime"]
  val create: inputBuffer:AudioBuffer.t -> outputBuffer:AudioBuffer.t -> playbackTime:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> eventInitDict:AudioProcessingEventInit.t -> t [@@js.create]
end
module AssignedNodesOptions : sig
  type t = [`AssignedNodesOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AssignedNodesOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AssignedNodesOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AssignedNodesOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_flatten: 'tags this -> bool option [@@js.get "flatten"]
  val set_flatten: 'tags this -> bool -> unit [@@js.set "flatten"]
  val create: ?flatten:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module SlotAssignmentMode : sig
  type t = ([`L_s594_manual[@js "manual"] | `L_s661_named[@js "named"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module ShadowRootMode : sig
  type t = ([`L_s255_closed[@js "closed"] | `L_s704_open[@js "open"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module ShadowRootInit : sig
  type t = [`ShadowRootInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ShadowRootInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ShadowRootInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ShadowRootInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_delegatesFocus: 'tags this -> bool option [@@js.get "delegatesFocus"]
  val set_delegatesFocus: 'tags this -> bool -> unit [@@js.set "delegatesFocus"]
  val get_mode: 'tags this -> ShadowRootMode.t [@@js.get "mode"]
  val set_mode: 'tags this -> ShadowRootMode.t -> unit [@@js.set "mode"]
  val get_slotAssignment: 'tags this -> SlotAssignmentMode.t option [@@js.get "slotAssignment"]
  val set_slotAssignment: 'tags this -> SlotAssignmentMode.t -> unit [@@js.set "slotAssignment"]
  val create: ?delegatesFocus:bool -> mode:ShadowRootMode.t -> ?slotAssignment:SlotAssignmentMode.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ScrollLogicalPosition : sig
  type t = ([`L_s240_center[@js "center"] | `L_s364_end[@js "end"] | `L_s665_nearest[@js "nearest"] | `L_s919_start[@js "start"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module ScrollBehavior : sig
  type t = ([`L_s174_auto[@js "auto"] | `L_s524_instant[@js "instant"] | `L_s893_smooth[@js "smooth"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module ScrollOptions : sig
  type t = [`ScrollOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ScrollOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ScrollOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ScrollOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_behavior: 'tags this -> ScrollBehavior.t option [@@js.get "behavior"]
  val set_behavior: 'tags this -> ScrollBehavior.t -> unit [@@js.set "behavior"]
  val create: ?behavior:ScrollBehavior.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ScrollIntoViewOptions : sig
  type t = [`ScrollIntoViewOptions | `ScrollOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ScrollIntoViewOptions | `ScrollOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ScrollIntoViewOptions | `ScrollOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ScrollIntoViewOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_block: 'tags this -> ScrollLogicalPosition.t option [@@js.get "block"]
  val set_block: 'tags this -> ScrollLogicalPosition.t -> unit [@@js.set "block"]
  val get_inline: 'tags this -> ScrollLogicalPosition.t option [@@js.get "inline"]
  val set_inline: 'tags this -> ScrollLogicalPosition.t -> unit [@@js.set "inline"]
  val create: ?block:ScrollLogicalPosition.t -> ?inline:ScrollLogicalPosition.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module InsertPosition : sig
  type t = ([`L_s133_afterbegin[@js "afterbegin"] | `L_s134_afterend[@js "afterend"] | `L_s191_beforebegin[@js "beforebegin"] | `L_s192_beforeend[@js "beforeend"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module TransitionEventInit : sig
  type t = [`EventInit | `TransitionEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `TransitionEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `TransitionEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `TransitionEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_elapsedTime: 'tags this -> float option [@@js.get "elapsedTime"]
  val set_elapsedTime: 'tags this -> float -> unit [@@js.set "elapsedTime"]
  val get_propertyName: 'tags this -> string option [@@js.get "propertyName"]
  val set_propertyName: 'tags this -> string -> unit [@@js.set "propertyName"]
  val get_pseudoElement: 'tags this -> string option [@@js.get "pseudoElement"]
  val set_pseudoElement: 'tags this -> string -> unit [@@js.set "pseudoElement"]
  val create: ?elapsedTime:float -> ?propertyName:string -> ?pseudoElement:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Events providing information related to transitions.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TransitionEvent)
*)
module[@js.scope "TransitionEvent"] TransitionEvent : sig
  type t = [`Event | `TransitionEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `TransitionEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `TransitionEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `TransitionEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TransitionEvent/elapsedTime) *)
  val get_elapsedTime: 'tags this -> float [@@js.get "elapsedTime"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TransitionEvent/propertyName) *)
  val get_propertyName: 'tags this -> string [@@js.get "propertyName"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TransitionEvent/pseudoElement) *)
  val get_pseudoElement: 'tags this -> string [@@js.get "pseudoElement"]
  val create: elapsedTime:float -> propertyName:string -> pseudoElement:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> ?transitionEventInitDict:TransitionEventInit.t -> unit -> t [@@js.create]
end
module TouchType : sig
  type t = ([`L_s331_direct[@js "direct"] | `L_s933_stylus[@js "stylus"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module TouchInit : sig
  type t = [`TouchInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`TouchInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`TouchInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `TouchInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_altitudeAngle: 'tags this -> float option [@@js.get "altitudeAngle"]
  val set_altitudeAngle: 'tags this -> float -> unit [@@js.set "altitudeAngle"]
  val get_azimuthAngle: 'tags this -> float option [@@js.get "azimuthAngle"]
  val set_azimuthAngle: 'tags this -> float -> unit [@@js.set "azimuthAngle"]
  val get_clientX: 'tags this -> float option [@@js.get "clientX"]
  val set_clientX: 'tags this -> float -> unit [@@js.set "clientX"]
  val get_clientY: 'tags this -> float option [@@js.get "clientY"]
  val set_clientY: 'tags this -> float -> unit [@@js.set "clientY"]
  val get_force: 'tags this -> float option [@@js.get "force"]
  val set_force: 'tags this -> float -> unit [@@js.set "force"]
  val get_identifier: 'tags this -> float [@@js.get "identifier"]
  val set_identifier: 'tags this -> float -> unit [@@js.set "identifier"]
  val get_pageX: 'tags this -> float option [@@js.get "pageX"]
  val set_pageX: 'tags this -> float -> unit [@@js.set "pageX"]
  val get_pageY: 'tags this -> float option [@@js.get "pageY"]
  val set_pageY: 'tags this -> float -> unit [@@js.set "pageY"]
  val get_radiusX: 'tags this -> float option [@@js.get "radiusX"]
  val set_radiusX: 'tags this -> float -> unit [@@js.set "radiusX"]
  val get_radiusY: 'tags this -> float option [@@js.get "radiusY"]
  val set_radiusY: 'tags this -> float -> unit [@@js.set "radiusY"]
  val get_rotationAngle: 'tags this -> float option [@@js.get "rotationAngle"]
  val set_rotationAngle: 'tags this -> float -> unit [@@js.set "rotationAngle"]
  val get_screenX: 'tags this -> float option [@@js.get "screenX"]
  val set_screenX: 'tags this -> float -> unit [@@js.set "screenX"]
  val get_screenY: 'tags this -> float option [@@js.get "screenY"]
  val set_screenY: 'tags this -> float -> unit [@@js.set "screenY"]
  val get_target: 'tags this -> EventTarget.t [@@js.get "target"]
  val set_target: 'tags this -> EventTarget.t -> unit [@@js.set "target"]
  val get_touchType: 'tags this -> TouchType.t option [@@js.get "touchType"]
  val set_touchType: 'tags this -> TouchType.t -> unit [@@js.set "touchType"]
  val create: ?altitudeAngle:float -> ?azimuthAngle:float -> ?clientX:float -> ?clientY:float -> ?force:float -> identifier:float -> ?pageX:float -> ?pageY:float -> ?radiusX:float -> ?radiusY:float -> ?rotationAngle:float -> ?screenX:float -> ?screenY:float -> target:EventTarget.t -> ?touchType:TouchType.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  A single contact point on a touch-sensitive device. The contact point is commonly a finger or stylus and the device may be a touchscreen or trackpad.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Touch)
*)
module[@js.scope "Touch"] Touch : sig
  type t = [`Touch] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Touch]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Touch]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Touch ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Touch/clientX) *)
  val get_clientX: 'tags this -> float [@@js.get "clientX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Touch/clientY) *)
  val get_clientY: 'tags this -> float [@@js.get "clientY"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Touch/force) *)
  val get_force: 'tags this -> float [@@js.get "force"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Touch/identifier) *)
  val get_identifier: 'tags this -> float [@@js.get "identifier"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Touch/pageX) *)
  val get_pageX: 'tags this -> float [@@js.get "pageX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Touch/pageY) *)
  val get_pageY: 'tags this -> float [@@js.get "pageY"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Touch/radiusX) *)
  val get_radiusX: 'tags this -> float [@@js.get "radiusX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Touch/radiusY) *)
  val get_radiusY: 'tags this -> float [@@js.get "radiusY"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Touch/rotationAngle) *)
  val get_rotationAngle: 'tags this -> float [@@js.get "rotationAngle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Touch/screenX) *)
  val get_screenX: 'tags this -> float [@@js.get "screenX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Touch/screenY) *)
  val get_screenY: 'tags this -> float [@@js.get "screenY"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Touch/target) *)
  val get_target: 'tags this -> EventTarget.t [@@js.get "target"]
  val create: clientX:float -> clientY:float -> force:float -> identifier:float -> pageX:float -> pageY:float -> radiusX:float -> radiusY:float -> rotationAngle:float -> screenX:float -> screenY:float -> target:EventTarget.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': TouchInit.t -> t [@@js.create]
end

(**
  A list of contact points on a touch surface. For example, if the user has three fingers on the touch surface (such as a screen or trackpad), the corresponding TouchList object would have one Touch object for each finger, for a total of three entries.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TouchList)
*)
module[@js.scope "TouchList"] TouchList : sig
  type t = [`TouchList] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`TouchList]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`TouchList]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `TouchList ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> Touch.t IterableIterator.t *)
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TouchList/length) *)
  val get_length: 'tags this -> float [@@js.get "length"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TouchList/item) *)
  val item: 'tags this -> index:float -> Touch.t option [@@js.call "item"]
  val get: 'tags this -> float -> Touch.t [@@js.index_get]
  val set: 'tags this -> float -> Touch.t -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module SecurityPolicyViolationEventDisposition : sig
  type t = ([`L_s366_enforce[@js "enforce"] | `L_s821_report[@js "report"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module SecurityPolicyViolationEventInit : sig
  type t = [`EventInit | `SecurityPolicyViolationEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `SecurityPolicyViolationEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `SecurityPolicyViolationEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SecurityPolicyViolationEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_blockedURI: 'tags this -> string option [@@js.get "blockedURI"]
  val set_blockedURI: 'tags this -> string -> unit [@@js.set "blockedURI"]
  val get_columnNumber: 'tags this -> float option [@@js.get "columnNumber"]
  val set_columnNumber: 'tags this -> float -> unit [@@js.set "columnNumber"]
  val get_disposition: 'tags this -> SecurityPolicyViolationEventDisposition.t [@@js.get "disposition"]
  val set_disposition: 'tags this -> SecurityPolicyViolationEventDisposition.t -> unit [@@js.set "disposition"]
  val get_documentURI: 'tags this -> string [@@js.get "documentURI"]
  val set_documentURI: 'tags this -> string -> unit [@@js.set "documentURI"]
  val get_effectiveDirective: 'tags this -> string [@@js.get "effectiveDirective"]
  val set_effectiveDirective: 'tags this -> string -> unit [@@js.set "effectiveDirective"]
  val get_lineNumber: 'tags this -> float option [@@js.get "lineNumber"]
  val set_lineNumber: 'tags this -> float -> unit [@@js.set "lineNumber"]
  val get_originalPolicy: 'tags this -> string [@@js.get "originalPolicy"]
  val set_originalPolicy: 'tags this -> string -> unit [@@js.set "originalPolicy"]
  val get_referrer: 'tags this -> string option [@@js.get "referrer"]
  val set_referrer: 'tags this -> string -> unit [@@js.set "referrer"]
  val get_sample: 'tags this -> string option [@@js.get "sample"]
  val set_sample: 'tags this -> string -> unit [@@js.set "sample"]
  val get_sourceFile: 'tags this -> string option [@@js.get "sourceFile"]
  val set_sourceFile: 'tags this -> string -> unit [@@js.set "sourceFile"]
  val get_statusCode: 'tags this -> float [@@js.get "statusCode"]
  val set_statusCode: 'tags this -> float -> unit [@@js.set "statusCode"]
  val get_violatedDirective: 'tags this -> string [@@js.get "violatedDirective"]
  val set_violatedDirective: 'tags this -> string -> unit [@@js.set "violatedDirective"]
  val create: ?blockedURI:string -> ?columnNumber:float -> disposition:SecurityPolicyViolationEventDisposition.t -> documentURI:string -> effectiveDirective:string -> ?lineNumber:float -> originalPolicy:string -> ?referrer:string -> ?sample:string -> ?sourceFile:string -> statusCode:float -> violatedDirective:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Inherits from Event, and represents the event object of an event sent on a document or worker when its content security policy is violated.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent)
*)
module[@js.scope "SecurityPolicyViolationEvent"] SecurityPolicyViolationEvent : sig
  type t = [`Event | `SecurityPolicyViolationEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `SecurityPolicyViolationEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `SecurityPolicyViolationEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SecurityPolicyViolationEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/blockedURI) *)
  val get_blockedURI: 'tags this -> string [@@js.get "blockedURI"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/columnNumber) *)
  val get_columnNumber: 'tags this -> float [@@js.get "columnNumber"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/disposition) *)
  val get_disposition: 'tags this -> SecurityPolicyViolationEventDisposition.t [@@js.get "disposition"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/documentURI) *)
  val get_documentURI: 'tags this -> string [@@js.get "documentURI"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/effectiveDirective) *)
  val get_effectiveDirective: 'tags this -> string [@@js.get "effectiveDirective"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/lineNumber) *)
  val get_lineNumber: 'tags this -> float [@@js.get "lineNumber"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/originalPolicy) *)
  val get_originalPolicy: 'tags this -> string [@@js.get "originalPolicy"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/referrer) *)
  val get_referrer: 'tags this -> string [@@js.get "referrer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/sample) *)
  val get_sample: 'tags this -> string [@@js.get "sample"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/sourceFile) *)
  val get_sourceFile: 'tags this -> string [@@js.get "sourceFile"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/statusCode) *)
  val get_statusCode: 'tags this -> float [@@js.get "statusCode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/violatedDirective) *)
  val get_violatedDirective: 'tags this -> string [@@js.get "violatedDirective"]
  val create: blockedURI:string -> columnNumber:float -> disposition:SecurityPolicyViolationEventDisposition.t -> documentURI:string -> effectiveDirective:string -> lineNumber:float -> originalPolicy:string -> referrer:string -> sample:string -> sourceFile:string -> statusCode:float -> violatedDirective:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> ?eventInitDict:SecurityPolicyViolationEventInit.t -> unit -> t [@@js.create]
end
module ProgressEventInit : sig
  type t = [`EventInit | `ProgressEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `ProgressEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `ProgressEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ProgressEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_lengthComputable: 'tags this -> bool option [@@js.get "lengthComputable"]
  val set_lengthComputable: 'tags this -> bool -> unit [@@js.set "lengthComputable"]
  val get_loaded: 'tags this -> float option [@@js.get "loaded"]
  val set_loaded: 'tags this -> float -> unit [@@js.set "loaded"]
  val get_total: 'tags this -> float option [@@js.get "total"]
  val set_total: 'tags this -> float -> unit [@@js.set "total"]
  val create: ?lengthComputable:bool -> ?loaded:float -> ?total:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Events measuring progress of an underlying process, like an HTTP request (for an XMLHttpRequest, or the loading of the underlying resource of an <img>, <audio>, <video>, <style> or <link>).
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ProgressEvent)
*)
module[@js.scope "ProgressEvent"] ProgressEvent : sig
  type 'T t = [`Event | `ProgressEvent of 'T] intf [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
  type t_0 = EventTarget.t t
  [@@@js.stop]
  type 'T tags = [`Event | `ProgressEvent of 'T]
  type tags_0 = EventTarget.t tags
  [@@@js.start]
  [@@@js.implem 
    type 'T tags = [`Event | `ProgressEvent of 'T]
    type tags_0 = EventTarget.t tags
  ]
  type ('tags, 'T) this = 'tags intf constraint 'tags = [> `ProgressEvent of 'T ]
  val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
  val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ProgressEvent/lengthComputable) *)
  val get_lengthComputable: ('tags, 'T) this -> bool [@@js.get "lengthComputable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ProgressEvent/loaded) *)
  val get_loaded: ('tags, 'T) this -> float [@@js.get "loaded"]
  
  (**
    Returns the object to which event is dispatched (its target).
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/target)
  *)
  val get_target: ('tags, 'T) this -> 'T option [@@js.get "target"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ProgressEvent/total) *)
  val get_total: ('tags, 'T) this -> float [@@js.get "total"]
  val create: lengthComputable:bool -> loaded:float -> ?target:'T -> total:float -> unit -> 'T t [@@js.builder]
  val cast_from: ('tags, 'T) this -> 'T t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t_0 [@@js.get "prototype"]
  val create': type_:string -> ?eventInitDict:ProgressEventInit.t -> unit -> t_0 [@@js.create]
end
module OnErrorEventHandlerNonNull : sig
  type t = [`OnErrorEventHandlerNonNull] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`OnErrorEventHandlerNonNull]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`OnErrorEventHandlerNonNull]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OnErrorEventHandlerNonNull ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> event:([`U1 of Event.t | `U2 of string] [@js.union]) -> ?source:string -> ?lineno:float -> ?colno:float -> ?error:Error.t -> unit -> any [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module OnErrorEventHandler : sig
  type t = OnErrorEventHandlerNonNull.t option
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  This Web Storage API interface provides access to a particular domain's session or local storage. It allows, for example, the addition, modification, or deletion of stored data items.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Storage)
*)
module[@js.scope "Storage"] Storage : sig
  type t = [`Storage] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Storage]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Storage]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Storage ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the number of key/value pairs.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Storage/length)
  *)
  val get_length: 'tags this -> float [@@js.get "length"]
  
  (**
    Removes all key/value pairs, if there are any.
    
    Dispatches a storage event on Window objects holding an equivalent Storage object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Storage/clear)
  *)
  val clear: 'tags this -> unit [@@js.call "clear"]
  
  (**
    Returns the current value associated with the given key, or null if the given key does not exist.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Storage/getItem)
  *)
  val getItem: 'tags this -> key:string -> string option [@@js.call "getItem"]
  
  (**
    Returns the name of the nth key, or null if n is greater than or equal to the number of key/value pairs.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Storage/key)
  *)
  val key: 'tags this -> index:float -> string option [@@js.call "key"]
  
  (**
    Removes the key/value pair with the given key, if a key/value pair with the given key exists.
    
    Dispatches a storage event on Window objects holding an equivalent Storage object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Storage/removeItem)
  *)
  val removeItem: 'tags this -> key:string -> unit [@@js.call "removeItem"]
  
  (**
    Sets the value of the pair identified by key to value, creating a new key/value pair if none existed for key previously.
    
    Throws a "QuotaExceededError" DOMException exception if the new value couldn't be set. (Setting could fail if, e.g., the user has disabled storage for the site, or if the quota has been exceeded.)
    
    Dispatches a storage event on Window objects holding an equivalent Storage object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Storage/setItem)
  *)
  val setItem: 'tags this -> key:string -> value:string -> unit [@@js.call "setItem"]
  val get: 'tags this -> string -> any [@@js.index_get]
  val set: 'tags this -> string -> any -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module WindowSessionStorage : sig
  type t = [`WindowSessionStorage] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WindowSessionStorage]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WindowSessionStorage]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WindowSessionStorage ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/sessionStorage) *)
  val get_sessionStorage: 'tags this -> Storage.t [@@js.get "sessionStorage"]
  val create: sessionStorage:Storage.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module VoidFunction : sig
  type t = [`VoidFunction] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VoidFunction]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VoidFunction]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VoidFunction ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> unit [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module TimerHandler : sig
  type t = ([`String of string | `Other of untyped_function] [@js.union on_field "dummy"]) Primitive.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module ResizeQuality : sig
  type t = ([`L_s479_high[@js "high"] | `L_s581_low[@js "low"] | `L_s607_medium[@js "medium"] | `L_s743_pixelated[@js "pixelated"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module PremultiplyAlpha : sig
  type t = ([`L_s305_default[@js "default"] | `L_s685_none[@js "none"] | `L_s773_premultiply[@js "premultiply"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module ImageOrientation : sig
  type t = ([`L_s424_flipY[@js "flipY"] | `L_s440_from_image[@js "from-image"] | `L_s685_none[@js "none"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module ColorSpaceConversion : sig
  type t = ([`L_s305_default[@js "default"] | `L_s685_none[@js "none"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module ImageBitmapOptions : sig
  type t = [`ImageBitmapOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ImageBitmapOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ImageBitmapOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ImageBitmapOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_colorSpaceConversion: 'tags this -> ColorSpaceConversion.t option [@@js.get "colorSpaceConversion"]
  val set_colorSpaceConversion: 'tags this -> ColorSpaceConversion.t -> unit [@@js.set "colorSpaceConversion"]
  val get_imageOrientation: 'tags this -> ImageOrientation.t option [@@js.get "imageOrientation"]
  val set_imageOrientation: 'tags this -> ImageOrientation.t -> unit [@@js.set "imageOrientation"]
  val get_premultiplyAlpha: 'tags this -> PremultiplyAlpha.t option [@@js.get "premultiplyAlpha"]
  val set_premultiplyAlpha: 'tags this -> PremultiplyAlpha.t -> unit [@@js.set "premultiplyAlpha"]
  val get_resizeHeight: 'tags this -> float option [@@js.get "resizeHeight"]
  val set_resizeHeight: 'tags this -> float -> unit [@@js.set "resizeHeight"]
  val get_resizeQuality: 'tags this -> ResizeQuality.t option [@@js.get "resizeQuality"]
  val set_resizeQuality: 'tags this -> ResizeQuality.t -> unit [@@js.set "resizeQuality"]
  val get_resizeWidth: 'tags this -> float option [@@js.get "resizeWidth"]
  val set_resizeWidth: 'tags this -> float -> unit [@@js.set "resizeWidth"]
  val create: ?colorSpaceConversion:ColorSpaceConversion.t -> ?imageOrientation:ImageOrientation.t -> ?premultiplyAlpha:PremultiplyAlpha.t -> ?resizeHeight:float -> ?resizeQuality:ResizeQuality.t -> ?resizeWidth:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module IDBVersionChangeEventInit : sig
  type t = [`EventInit | `IDBVersionChangeEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `IDBVersionChangeEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `IDBVersionChangeEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBVersionChangeEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_newVersion: 'tags this -> float option [@@js.get "newVersion"]
  val set_newVersion: 'tags this -> float option -> unit [@@js.set "newVersion"]
  val get_oldVersion: 'tags this -> float option [@@js.get "oldVersion"]
  val set_oldVersion: 'tags this -> float -> unit [@@js.set "oldVersion"]
  val create: ?newVersion:float -> ?oldVersion:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  This IndexedDB API interface indicates that the version of the database has changed, as the result of an IDBOpenDBRequest.onupgradeneeded event handler function.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBVersionChangeEvent)
*)
module[@js.scope "IDBVersionChangeEvent"] IDBVersionChangeEvent : sig
  type t = [`Event | `IDBVersionChangeEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `IDBVersionChangeEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `IDBVersionChangeEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBVersionChangeEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBVersionChangeEvent/newVersion) *)
  val get_newVersion: 'tags this -> float option [@@js.get "newVersion"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBVersionChangeEvent/oldVersion) *)
  val get_oldVersion: 'tags this -> float [@@js.get "oldVersion"]
  val create: ?newVersion:float -> oldVersion:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> ?eventInitDict:IDBVersionChangeEventInit.t -> unit -> t [@@js.create]
end
module IDBTransactionDurability : sig
  type t = ([`L_s305_default[@js "default"] | `L_s807_relaxed[@js "relaxed"] | `L_s927_strict[@js "strict"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module IDBTransactionOptions : sig
  type t = [`IDBTransactionOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`IDBTransactionOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`IDBTransactionOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBTransactionOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_durability: 'tags this -> IDBTransactionDurability.t option [@@js.get "durability"]
  val set_durability: 'tags this -> IDBTransactionDurability.t -> unit [@@js.set "durability"]
  val create: ?durability:IDBTransactionDurability.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module IDBObjectStoreParameters : sig
  type t = [`IDBObjectStoreParameters] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`IDBObjectStoreParameters]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`IDBObjectStoreParameters]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBObjectStoreParameters ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_autoIncrement: 'tags this -> bool option [@@js.get "autoIncrement"]
  val set_autoIncrement: 'tags this -> bool -> unit [@@js.set "autoIncrement"]
  val get_keyPath: 'tags this -> ([`String of string | `Null | `Undefined | `Other of string list] [@js.union on_field "dummy"]) Primitive.t [@@js.get "keyPath"]
  val set_keyPath: 'tags this -> ([`Null | `U1 of string | `U2 of string list] [@js.union]) -> unit [@@js.set "keyPath"]
  val create: ?autoIncrement:bool -> ?keyPath:([`String of string | `Other of string list] [@js.union on_field "dummy"]) Primitive.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module IDBIndexParameters : sig
  type t = [`IDBIndexParameters] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`IDBIndexParameters]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`IDBIndexParameters]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBIndexParameters ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_multiEntry: 'tags this -> bool option [@@js.get "multiEntry"]
  val set_multiEntry: 'tags this -> bool -> unit [@@js.set "multiEntry"]
  val get_unique: 'tags this -> bool option [@@js.get "unique"]
  val set_unique: 'tags this -> bool -> unit [@@js.set "unique"]
  val create: ?multiEntry:bool -> ?unique:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module IDBValidKey : sig
  type t = ([`Number of float | `String of string | `Other of (t list, BufferSource.t, Date.t) union3] [@js.union on_field "dummy"]) Primitive.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module IDBTransactionMode : sig
  type t = ([`L_s1033_versionchange[@js "versionchange"] | `L_s796_readonly[@js "readonly"] | `L_s797_readwrite[@js "readwrite"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module IDBRequestReadyState : sig
  type t = ([`L_s343_done[@js "done"] | `L_s736_pending[@js "pending"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  A key range can be a single value or a range with upper and lower bounds or endpoints. If the key range has both upper and lower bounds, then it is bounded; if it has no bounds, it is unbounded. A bounded key range can either be open (the endpoints are excluded) or closed (the endpoints are included). To retrieve all keys within a certain range, you can use the following code constructs:
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBKeyRange)
*)
module[@js.scope "IDBKeyRange"] IDBKeyRange : sig
  type t = [`IDBKeyRange] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`IDBKeyRange]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`IDBKeyRange]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBKeyRange ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns lower bound, or undefined if none.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/lower)
  *)
  val get_lower: 'tags this -> any [@@js.get "lower"]
  
  (**
    Returns true if the lower open flag is set, and false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/lowerOpen)
  *)
  val get_lowerOpen: 'tags this -> bool [@@js.get "lowerOpen"]
  
  (**
    Returns upper bound, or undefined if none.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/upper)
  *)
  val get_upper: 'tags this -> any [@@js.get "upper"]
  
  (**
    Returns true if the upper open flag is set, and false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/upperOpen)
  *)
  val get_upperOpen: 'tags this -> bool [@@js.get "upperOpen"]
  
  (**
    Returns true if key is included in the range, and false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/includes)
  *)
  val includes: 'tags this -> key:any -> bool [@@js.call "includes"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  
  (**
    Returns a new IDBKeyRange spanning from lower to upper. If lowerOpen is true, lower is not included in the range. If upperOpen is true, upper is not included in the range.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/bound_static)
  *)
  val bound: lower:any -> upper:any -> ?lowerOpen:bool -> ?upperOpen:bool -> unit -> t [@@js.global "bound"]
  
  (**
    Returns a new IDBKeyRange starting at key with no upper bound. If open is true, key is not included in the range.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/lowerBound_static)
  *)
  val lowerBound: lower:any -> ?open_:bool -> unit -> t [@@js.global "lowerBound"]
  
  (**
    Returns a new IDBKeyRange spanning only key.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/only_static)
  *)
  val only: any -> t [@@js.global "only"]
  
  (**
    Returns a new IDBKeyRange with no lower bound and ending at key. If open is true, key is not included in the range.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/upperBound_static)
  *)
  val upperBound: upper:any -> ?open_:bool -> unit -> t [@@js.global "upperBound"]
end
module IDBCursorDirection : sig
  type t = ([`L_s671_next[@js "next"] | `L_s674_nextunique[@js "nextunique"] | `L_s776_prev[@js "prev"] | `L_s778_prevunique[@js "prevunique"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  A type returned by some APIs which contains a list of DOMString (strings).
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMStringList)
*)
module[@js.scope "DOMStringList"] DOMStringList : sig
  type t = [`DOMStringList] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DOMStringList]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DOMStringList]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DOMStringList ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> string IterableIterator.t *)
  
  (**
    Returns the number of strings in strings.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMStringList/length)
  *)
  val get_length: 'tags this -> float [@@js.get "length"]
  
  (**
    Returns true if strings contains string, and false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMStringList/contains)
  *)
  val contains: 'tags this -> string:string -> bool [@@js.call "contains"]
  
  (**
    Returns the string with index index from strings.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMStringList/item)
  *)
  val item: 'tags this -> index:float -> string option [@@js.call "item"]
  val get: 'tags this -> float -> string [@@js.index_get]
  val set: 'tags this -> float -> string -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  This IndexedDB API interface represents a cursor for traversing or iterating over multiple records in a database.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBCursor)
*)
module[@js.scope "IDBCursor"] rec IDBCursor : sig
  type t = [`IDBCursor] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`IDBCursor]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`IDBCursor]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBCursor ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the direction ("next", "nextunique", "prev" or "prevunique") of the cursor.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBCursor/direction)
  *)
  val get_direction: 'tags this -> IDBCursorDirection.t [@@js.get "direction"]
  
  (**
    Returns the key of the cursor. Throws a "InvalidStateError" DOMException if the cursor is advancing or is finished.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBCursor/key)
  *)
  val get_key: 'tags this -> IDBValidKey.t [@@js.get "key"]
  
  (**
    Returns the effective key of the cursor. Throws a "InvalidStateError" DOMException if the cursor is advancing or is finished.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBCursor/primaryKey)
  *)
  val get_primaryKey: 'tags this -> IDBValidKey.t [@@js.get "primaryKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBCursor/request) *)
  val get_request: 'tags this -> IDBRequest.t_0 [@@js.get "request"]
  
  (**
    Returns the IDBObjectStore or IDBIndex the cursor was opened from.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBCursor/source)
  *)
  val get_source: 'tags this -> (IDBIndex.t, IDBObjectStore.t) union2 [@@js.get "source"]
  
  (**
    Advances the cursor through the next count records in range.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBCursor/advance)
  *)
  val advance: 'tags this -> count:float -> unit [@@js.call "advance"]
  
  (**
    Advances the cursor to the next record in range.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBCursor/continue)
  *)
  val continue: 'tags this -> ?key:IDBValidKey.t -> unit -> unit [@@js.call "continue"]
  
  (**
    Advances the cursor to the next record in range matching or after key and primaryKey. Throws an "InvalidAccessError" DOMException if the source is not an index.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBCursor/continuePrimaryKey)
  *)
  val continuePrimaryKey: 'tags this -> key:IDBValidKey.t -> primaryKey:IDBValidKey.t -> unit [@@js.call "continuePrimaryKey"]
  
  (**
    Delete the record pointed at by the cursor with a new value.
    
    If successful, request's result will be undefined.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBCursor/delete)
  *)
  val delete: 'tags this -> undefined IDBRequest.t [@@js.call "delete"]
  
  (**
    Updated the record pointed at by the cursor with a new value.
    
    Throws a "DataError" DOMException if the effective object store uses in-line keys and the key would have changed.
    
    If successful, request's result will be the record's key.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBCursor/update)
  *)
  val update: 'tags this -> value:any -> IDBValidKey.t IDBRequest.t [@@js.call "update"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  This IndexedDB API interface represents a cursor for traversing or iterating over multiple records in a database. It is the same as the IDBCursor, except that it includes the value property.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBCursorWithValue)
*)
and[@js.scope "IDBCursorWithValue"] IDBCursorWithValue : sig
  type t = [`IDBCursor | `IDBCursorWithValue] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`IDBCursor | `IDBCursorWithValue]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`IDBCursor | `IDBCursorWithValue]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBCursorWithValue ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the cursor's current value.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBCursorWithValue/value)
  *)
  val get_value: 'tags this -> any [@@js.get "value"]
  val create: value:any -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(**
  This IndexedDB API interface provides a connection to a database; you can use an IDBDatabase object to open a transaction on your database then create, manipulate, and delete objects (data) in that database. The interface provides the only way to get and manage versions of the database.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBDatabase)
*)
and[@js.scope "IDBDatabase"] IDBDatabase : sig
  type t = [`EventTarget | `IDBDatabase] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `IDBDatabase]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `IDBDatabase]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBDatabase ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns a new transaction with the given mode ("readonly" or "readwrite") and scope which can be a single object store name or an array of names.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBDatabase/transaction)
  *)
  val transaction: 'tags this -> storeNames:([`U1 of string | `U2 of string Iterable.t] [@js.union]) -> ?mode:IDBTransactionMode.t -> ?options:IDBTransactionOptions.t -> unit -> IDBTransaction.t [@@js.call "transaction"]
  
  (**
    Returns the name of the database.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBDatabase/name)
  *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (**
    Returns a list of the names of object stores in the database.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBDatabase/objectStoreNames)
  *)
  val get_objectStoreNames: 'tags this -> DOMStringList.t [@@js.get "objectStoreNames"]
  val get_onabort: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onabort"]
  val set_onabort: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onabort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBDatabase/close_event) *)
  val get_onclose: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onclose"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBDatabase/close_event) *)
  val set_onclose: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onclose"]
  val get_onerror: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onerror"]
  val set_onerror: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBDatabase/versionchange_event) *)
  val get_onversionchange: 'tags this -> (this:t -> ev:IDBVersionChangeEvent.t -> any) option [@@js.get "onversionchange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBDatabase/versionchange_event) *)
  val set_onversionchange: 'tags this -> (this:t -> ev:IDBVersionChangeEvent.t -> any) option -> unit [@@js.set "onversionchange"]
  
  (**
    Returns the version of the database.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBDatabase/version)
  *)
  val get_version: 'tags this -> float [@@js.get "version"]
  
  (**
    Closes the connection once all running transactions have finished.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBDatabase/close)
  *)
  val close: 'tags this -> unit [@@js.call "close"]
  
  (**
    Creates a new object store with the given name and options and returns a new IDBObjectStore.
    
    Throws a "InvalidStateError" DOMException if not called within an upgrade transaction.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBDatabase/createObjectStore)
  *)
  val createObjectStore: 'tags this -> name:string -> ?options:IDBObjectStoreParameters.t -> unit -> IDBObjectStore.t [@@js.call "createObjectStore"]
  
  (**
    Deletes the object store with the given name.
    
    Throws a "InvalidStateError" DOMException if not called within an upgrade transaction.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBDatabase/deleteObjectStore)
  *)
  val deleteObjectStore: 'tags this -> name:string -> unit [@@js.call "deleteObjectStore"]
  
  (**
    Returns a new transaction with the given mode ("readonly" or "readwrite") and scope which can be a single object store name or an array of names.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBDatabase/transaction)
  *)
  val transaction': 'tags this -> storeNames:([`U1 of string | `U2 of string list] [@js.union]) -> ?mode:IDBTransactionMode.t -> ?options:IDBTransactionOptions.t -> unit -> IDBTransaction.t [@@js.call "transaction"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'IDBDatabaseEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'IDBDatabaseEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  IDBIndex interface of the IndexedDB API provides asynchronous access to an index in a database. An index is a kind of object store for looking up records in another object store, called the referenced object store. You use this interface to retrieve data.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBIndex)
*)
and[@js.scope "IDBIndex"] IDBIndex : sig
  type t = [`IDBIndex] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`IDBIndex]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`IDBIndex]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBIndex ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBIndex/keyPath) *)
  val get_keyPath: 'tags this -> ([`String of string | `Other of string list] [@js.union on_field "dummy"]) Primitive.t [@@js.get "keyPath"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBIndex/multiEntry) *)
  val get_multiEntry: 'tags this -> bool [@@js.get "multiEntry"]
  
  (**
    Returns the name of the index.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBIndex/name)
  *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (**
    Returns the name of the index.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBIndex/name)
  *)
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  
  (**
    Returns the IDBObjectStore the index belongs to.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBIndex/objectStore)
  *)
  val get_objectStore: 'tags this -> IDBObjectStore.t [@@js.get "objectStore"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBIndex/unique) *)
  val get_unique: 'tags this -> bool [@@js.get "unique"]
  
  (**
    Retrieves the number of records matching the given key or key range in query.
    
    If successful, request's result will be the count.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBIndex/count)
  *)
  val count: 'tags this -> ?query:([`U1 of IDBValidKey.t | `U2 of IDBKeyRange.t] [@js.union]) -> unit -> float IDBRequest.t [@@js.call "count"]
  
  (**
    Retrieves the value of the first record matching the given key or key range in query.
    
    If successful, request's result will be the value, or undefined if there was no matching record.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBIndex/get)
  *)
  val get_: 'tags this -> query:([`U1 of IDBValidKey.t | `U2 of IDBKeyRange.t] [@js.union]) -> any IDBRequest.t [@@js.call "get"]
  
  (**
    Retrieves the values of the records matching the given key or key range in query (up to count if given).
    
    If successful, request's result will be an Array of the values.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBIndex/getAll)
  *)
  val getAll: 'tags this -> ?query:([`Null | `U1 of IDBValidKey.t | `U2 of IDBKeyRange.t] [@js.union]) -> ?count:float -> unit -> any list IDBRequest.t [@@js.call "getAll"]
  
  (**
    Retrieves the keys of records matching the given key or key range in query (up to count if given).
    
    If successful, request's result will be an Array of the keys.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBIndex/getAllKeys)
  *)
  val getAllKeys: 'tags this -> ?query:([`Null | `U1 of IDBValidKey.t | `U2 of IDBKeyRange.t] [@js.union]) -> ?count:float -> unit -> IDBValidKey.t list IDBRequest.t [@@js.call "getAllKeys"]
  
  (**
    Retrieves the key of the first record matching the given key or key range in query.
    
    If successful, request's result will be the key, or undefined if there was no matching record.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBIndex/getKey)
  *)
  val getKey: 'tags this -> query:([`U1 of IDBValidKey.t | `U2 of IDBKeyRange.t] [@js.union]) -> IDBValidKey.t option IDBRequest.t [@@js.call "getKey"]
  
  (**
    Opens a cursor over the records matching query, ordered by direction. If query is null, all records in index are matched.
    
    If successful, request's result will be an IDBCursorWithValue, or null if there were no matching records.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBIndex/openCursor)
  *)
  val openCursor: 'tags this -> ?query:([`Null | `U1 of IDBValidKey.t | `U2 of IDBKeyRange.t] [@js.union]) -> ?direction:IDBCursorDirection.t -> unit -> IDBCursorWithValue.t option IDBRequest.t [@@js.call "openCursor"]
  
  (**
    Opens a cursor with key only flag set over the records matching query, ordered by direction. If query is null, all records in index are matched.
    
    If successful, request's result will be an IDBCursor, or null if there were no matching records.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBIndex/openKeyCursor)
  *)
  val openKeyCursor: 'tags this -> ?query:([`Null | `U1 of IDBValidKey.t | `U2 of IDBKeyRange.t] [@js.union]) -> ?direction:IDBCursorDirection.t -> unit -> IDBCursor.t option IDBRequest.t [@@js.call "openKeyCursor"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  This example shows a variety of different uses of object stores, from updating the data structure with IDBObjectStore.createIndexÂ inside an onupgradeneeded function, to adding a new item to our object store with IDBObjectStore.add. For a full working example, see ourÂ To-do NotificationsÂ app (view example live.)
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore)
*)
and[@js.scope "IDBObjectStore"] IDBObjectStore : sig
  type t = [`IDBObjectStore] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`IDBObjectStore]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`IDBObjectStore]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBObjectStore ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Creates a new index in store with the given name, keyPath and options and returns a new IDBIndex. If the keyPath and options define constraints that cannot be satisfied with the data already in store the upgrade transaction will abort with a "ConstraintError" DOMException.
    
    Throws an "InvalidStateError" DOMException if not called within an upgrade transaction.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/createIndex)
  *)
  val createIndex: 'tags this -> name:string -> keyPath:([`U1 of string | `U2 of string Iterable.t] [@js.union]) -> ?options:IDBIndexParameters.t -> unit -> IDBIndex.t [@@js.call "createIndex"]
  
  (**
    Returns true if the store has a key generator, and false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/autoIncrement)
  *)
  val get_autoIncrement: 'tags this -> bool [@@js.get "autoIncrement"]
  
  (**
    Returns a list of the names of indexes in the store.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/indexNames)
  *)
  val get_indexNames: 'tags this -> DOMStringList.t [@@js.get "indexNames"]
  
  (**
    Returns the key path of the store, or null if none.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/keyPath)
  *)
  val get_keyPath: 'tags this -> ([`String of string | `Other of string list] [@js.union on_field "dummy"]) Primitive.t [@@js.get "keyPath"]
  
  (**
    Returns the name of the store.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/name)
  *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (**
    Returns the name of the store.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/name)
  *)
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  
  (**
    Returns the associated transaction.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/transaction)
  *)
  val get_transaction: 'tags this -> IDBTransaction.t [@@js.get "transaction"]
  
  (**
    Adds or updates a record in store with the given value and key.
    
    If the store uses in-line keys and key is specified a "DataError" DOMException will be thrown.
    
    If put() is used, any existing record with the key will be replaced. If add() is used, and if a record with the key already exists the request will fail, with request's error set to a "ConstraintError" DOMException.
    
    If successful, request's result will be the record's key.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/add)
  *)
  val add: 'tags this -> value:any -> ?key:IDBValidKey.t -> unit -> IDBValidKey.t IDBRequest.t [@@js.call "add"]
  
  (**
    Deletes all records in store.
    
    If successful, request's result will be undefined.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/clear)
  *)
  val clear: 'tags this -> undefined IDBRequest.t [@@js.call "clear"]
  
  (**
    Retrieves the number of records matching the given key or key range in query.
    
    If successful, request's result will be the count.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/count)
  *)
  val count: 'tags this -> ?query:([`U1 of IDBValidKey.t | `U2 of IDBKeyRange.t] [@js.union]) -> unit -> float IDBRequest.t [@@js.call "count"]
  
  (**
    Creates a new index in store with the given name, keyPath and options and returns a new IDBIndex. If the keyPath and options define constraints that cannot be satisfied with the data already in store the upgrade transaction will abort with a "ConstraintError" DOMException.
    
    Throws an "InvalidStateError" DOMException if not called within an upgrade transaction.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/createIndex)
  *)
  val createIndex': 'tags this -> name:string -> keyPath:([`U1 of string | `U2 of string list] [@js.union]) -> ?options:IDBIndexParameters.t -> unit -> IDBIndex.t [@@js.call "createIndex"]
  
  (**
    Deletes records in store with the given key or in the given key range in query.
    
    If successful, request's result will be undefined.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/delete)
  *)
  val delete: 'tags this -> query:([`U1 of IDBValidKey.t | `U2 of IDBKeyRange.t] [@js.union]) -> undefined IDBRequest.t [@@js.call "delete"]
  
  (**
    Deletes the index in store with the given name.
    
    Throws an "InvalidStateError" DOMException if not called within an upgrade transaction.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/deleteIndex)
  *)
  val deleteIndex: 'tags this -> name:string -> unit [@@js.call "deleteIndex"]
  
  (**
    Retrieves the value of the first record matching the given key or key range in query.
    
    If successful, request's result will be the value, or undefined if there was no matching record.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/get)
  *)
  val get_: 'tags this -> query:([`U1 of IDBValidKey.t | `U2 of IDBKeyRange.t] [@js.union]) -> any IDBRequest.t [@@js.call "get"]
  
  (**
    Retrieves the values of the records matching the given key or key range in query (up to count if given).
    
    If successful, request's result will be an Array of the values.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/getAll)
  *)
  val getAll: 'tags this -> ?query:([`Null | `U1 of IDBValidKey.t | `U2 of IDBKeyRange.t] [@js.union]) -> ?count:float -> unit -> any list IDBRequest.t [@@js.call "getAll"]
  
  (**
    Retrieves the keys of records matching the given key or key range in query (up to count if given).
    
    If successful, request's result will be an Array of the keys.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/getAllKeys)
  *)
  val getAllKeys: 'tags this -> ?query:([`Null | `U1 of IDBValidKey.t | `U2 of IDBKeyRange.t] [@js.union]) -> ?count:float -> unit -> IDBValidKey.t list IDBRequest.t [@@js.call "getAllKeys"]
  
  (**
    Retrieves the key of the first record matching the given key or key range in query.
    
    If successful, request's result will be the key, or undefined if there was no matching record.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/getKey)
  *)
  val getKey: 'tags this -> query:([`U1 of IDBValidKey.t | `U2 of IDBKeyRange.t] [@js.union]) -> IDBValidKey.t option IDBRequest.t [@@js.call "getKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/index) *)
  val index: 'tags this -> name:string -> IDBIndex.t [@@js.call "index"]
  
  (**
    Opens a cursor over the records matching query, ordered by direction. If query is null, all records in store are matched.
    
    If successful, request's result will be an IDBCursorWithValue pointing at the first matching record, or null if there were no matching records.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/openCursor)
  *)
  val openCursor: 'tags this -> ?query:([`Null | `U1 of IDBValidKey.t | `U2 of IDBKeyRange.t] [@js.union]) -> ?direction:IDBCursorDirection.t -> unit -> IDBCursorWithValue.t option IDBRequest.t [@@js.call "openCursor"]
  
  (**
    Opens a cursor with key only flag set over the records matching query, ordered by direction. If query is null, all records in store are matched.
    
    If successful, request's result will be an IDBCursor pointing at the first matching record, or null if there were no matching records.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/openKeyCursor)
  *)
  val openKeyCursor: 'tags this -> ?query:([`Null | `U1 of IDBValidKey.t | `U2 of IDBKeyRange.t] [@js.union]) -> ?direction:IDBCursorDirection.t -> unit -> IDBCursor.t option IDBRequest.t [@@js.call "openKeyCursor"]
  
  (**
    Adds or updates a record in store with the given value and key.
    
    If the store uses in-line keys and key is specified a "DataError" DOMException will be thrown.
    
    If put() is used, any existing record with the key will be replaced. If add() is used, and if a record with the key already exists the request will fail, with request's error set to a "ConstraintError" DOMException.
    
    If successful, request's result will be the record's key.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/put)
  *)
  val put: 'tags this -> value:any -> ?key:IDBValidKey.t -> unit -> IDBValidKey.t IDBRequest.t [@@js.call "put"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  The request object does not initially contain any information about the result of the operation, but once information becomes available, an event is fired on the request, and the information becomes available through the properties of the IDBRequest instance.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest)
*)
and[@js.scope "IDBRequest"] IDBRequest : sig
  type 'T t = [`EventTarget | `IDBRequest of 'T] intf [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
  type t_0 = any t
  [@@@js.stop]
  type 'T tags = [`EventTarget | `IDBRequest of 'T]
  type tags_0 = any tags
  [@@@js.start]
  [@@@js.implem 
    type 'T tags = [`EventTarget | `IDBRequest of 'T]
    type tags_0 = any tags
  ]
  type ('tags, 'T) this = 'tags intf constraint 'tags = [> `IDBRequest of 'T ]
  val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
  val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  
  (**
    When a request is completed, returns the error (a DOMException), or null if the request succeeded. Throws a "InvalidStateError" DOMException if the request is still pending.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest/error)
  *)
  val get_error: ('tags, 'T) this -> DOMException.t option [@@js.get "error"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest/error_event) *)
  val get_onerror: ('tags, 'T) this -> (this:'T t -> ev:Event.t -> any) option [@@js.get "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest/error_event) *)
  val set_onerror: ('tags, 'T) this -> (this:'T t -> ev:Event.t -> any) option -> unit [@@js.set "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest/success_event) *)
  val get_onsuccess: ('tags, 'T) this -> (this:'T t -> ev:Event.t -> any) option [@@js.get "onsuccess"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest/success_event) *)
  val set_onsuccess: ('tags, 'T) this -> (this:'T t -> ev:Event.t -> any) option -> unit [@@js.set "onsuccess"]
  
  (**
    Returns "pending" until a request is complete, then returns "done".
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest/readyState)
  *)
  val get_readyState: ('tags, 'T) this -> IDBRequestReadyState.t [@@js.get "readyState"]
  
  (**
    When a request is completed, returns the result, or undefined if the request failed. Throws a "InvalidStateError" DOMException if the request is still pending.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest/result)
  *)
  val get_result: ('tags, 'T) this -> 'T [@@js.get "result"]
  
  (**
    Returns the IDBObjectStore, IDBIndex, or IDBCursor the request was made against, or null if is was an open request.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest/source)
  *)
  val get_source: ('tags, 'T) this -> (IDBCursor.t, IDBIndex.t, IDBObjectStore.t) union3 [@@js.get "source"]
  
  (**
    Returns the IDBTransaction the request was made within. If this as an open request, then it returns an upgrade transaction while it is running, or null otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest/transaction)
  *)
  val get_transaction: ('tags, 'T) this -> IDBTransaction.t option [@@js.get "transaction"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: ('tags, 'T) this -> type_:'K -> listener:(this:'T t -> ev:(* FIXME: unknown type 'IDBRequestEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': ('tags, 'T) this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: ('tags, 'T) this -> type_:'K -> listener:(this:'T t -> ev:(* FIXME: unknown type 'IDBRequestEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': ('tags, 'T) this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: ('tags, 'T) this -> 'T t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t_0 [@@js.get "prototype"]
  val create: unit -> t_0 [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBTransaction) *)
and[@js.scope "IDBTransaction"] IDBTransaction : sig
  type t = [`EventTarget | `IDBTransaction] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `IDBTransaction]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `IDBTransaction]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBTransaction ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the transaction's connection.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBTransaction/db)
  *)
  val get_db: 'tags this -> IDBDatabase.t [@@js.get "db"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBTransaction/durability) *)
  val get_durability: 'tags this -> IDBTransactionDurability.t [@@js.get "durability"]
  
  (**
    If the transaction was aborted, returns the error (a DOMException) providing the reason.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBTransaction/error)
  *)
  val get_error: 'tags this -> DOMException.t option [@@js.get "error"]
  
  (**
    Returns the mode the transaction was created with ("readonly" or "readwrite"), or "versionchange" for an upgrade transaction.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBTransaction/mode)
  *)
  val get_mode: 'tags this -> IDBTransactionMode.t [@@js.get "mode"]
  
  (**
    Returns a list of the names of object stores in the transaction's scope. For an upgrade transaction this is all object stores in the database.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBTransaction/objectStoreNames)
  *)
  val get_objectStoreNames: 'tags this -> DOMStringList.t [@@js.get "objectStoreNames"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBTransaction/abort_event) *)
  val get_onabort: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onabort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBTransaction/abort_event) *)
  val set_onabort: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onabort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBTransaction/complete_event) *)
  val get_oncomplete: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "oncomplete"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBTransaction/complete_event) *)
  val set_oncomplete: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "oncomplete"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBTransaction/error_event) *)
  val get_onerror: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBTransaction/error_event) *)
  val set_onerror: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onerror"]
  
  (**
    Aborts the transaction. All pending requests will fail with a "AbortError" DOMException and all changes made to the database will be reverted.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBTransaction/abort)
  *)
  val abort: 'tags this -> unit [@@js.call "abort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBTransaction/commit) *)
  val commit: 'tags this -> unit [@@js.call "commit"]
  
  (**
    Returns an IDBObjectStore in the transaction's scope.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBTransaction/objectStore)
  *)
  val objectStore: 'tags this -> name:string -> IDBObjectStore.t [@@js.call "objectStore"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'IDBTransactionEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'IDBTransactionEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Also inherits methods from its parents IDBRequest and EventTarget.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBOpenDBRequest)
*)
module[@js.scope "IDBOpenDBRequest"] IDBOpenDBRequest : sig
  type t = [`EventTarget | `IDBOpenDBRequest | `IDBRequest of IDBDatabase.t] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `IDBOpenDBRequest | `IDBRequest of IDBDatabase.t]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `IDBOpenDBRequest | `IDBRequest of IDBDatabase.t]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBOpenDBRequest ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBOpenDBRequest/blocked_event) *)
  val get_onblocked: 'tags this -> (this:t -> ev:IDBVersionChangeEvent.t -> any) option [@@js.get "onblocked"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBOpenDBRequest/blocked_event) *)
  val set_onblocked: 'tags this -> (this:t -> ev:IDBVersionChangeEvent.t -> any) option -> unit [@@js.set "onblocked"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBOpenDBRequest/upgradeneeded_event) *)
  val get_onupgradeneeded: 'tags this -> (this:t -> ev:IDBVersionChangeEvent.t -> any) option [@@js.get "onupgradeneeded"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBOpenDBRequest/upgradeneeded_event) *)
  val set_onupgradeneeded: 'tags this -> (this:t -> ev:IDBVersionChangeEvent.t -> any) option -> unit [@@js.set "onupgradeneeded"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'IDBOpenDBRequestEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'IDBOpenDBRequestEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module IDBDatabaseInfo : sig
  type t = [`IDBDatabaseInfo] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`IDBDatabaseInfo]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`IDBDatabaseInfo]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBDatabaseInfo ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_name: 'tags this -> string option [@@js.get "name"]
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  val get_version: 'tags this -> float option [@@js.get "version"]
  val set_version: 'tags this -> float -> unit [@@js.set "version"]
  val create: ?name:string -> ?version:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  In the following code snippet, we make a request to open a database, and include handlers for the success and error cases. For a full working example, see our To-do Notifications app (view example live.)
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBFactory)
*)
module[@js.scope "IDBFactory"] IDBFactory : sig
  type t = [`IDBFactory] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`IDBFactory]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`IDBFactory]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBFactory ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Compares two values as keys. Returns -1 if key1 precedes key2, 1 if key2 precedes key1, and 0 if the keys are equal.
    
    Throws a "DataError" DOMException if either input is not a valid key.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBFactory/cmp)
  *)
  val cmp: 'tags this -> first:any -> second:any -> float [@@js.call "cmp"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBFactory/databases) *)
  val databases: 'tags this -> IDBDatabaseInfo.t list Promise.t [@@js.call "databases"]
  
  (**
    Attempts to delete the named database. If the database already exists and there are open connections that don't close in response to a versionchange event, the request will be blocked until all they close. If the request is successful request's result will be null.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBFactory/deleteDatabase)
  *)
  val deleteDatabase: 'tags this -> name:string -> IDBOpenDBRequest.t [@@js.call "deleteDatabase"]
  
  (**
    Attempts to open a connection to the named database with the current version, or 1 if it does not already exist. If the request is successful request's result will be the connection.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBFactory/open)
  *)
  val open_: 'tags this -> name:string -> ?version:float -> unit -> IDBOpenDBRequest.t [@@js.call "open"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module Algorithm : sig
  type t = [`Algorithm] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Algorithm]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Algorithm]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Algorithm ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_name: 'tags this -> string [@@js.get "name"]
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  val create: name:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RsaPssParams : sig
  type t = [`Algorithm | `RsaPssParams] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Algorithm | `RsaPssParams]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Algorithm | `RsaPssParams]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RsaPssParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_saltLength: 'tags this -> float [@@js.get "saltLength"]
  val set_saltLength: 'tags this -> float -> unit [@@js.set "saltLength"]
  val create: saltLength:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RsaOaepParams : sig
  type t = [`Algorithm | `RsaOaepParams] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Algorithm | `RsaOaepParams]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Algorithm | `RsaOaepParams]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RsaOaepParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_label: 'tags this -> BufferSource.t option [@@js.get "label"]
  val set_label: 'tags this -> BufferSource.t -> unit [@@js.set "label"]
  val create: ?label:BufferSource.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module BigInteger : sig
  type t = Uint8Array.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RsaKeyGenParams : sig
  type t = [`Algorithm | `RsaKeyGenParams] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Algorithm | `RsaKeyGenParams]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Algorithm | `RsaKeyGenParams]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RsaKeyGenParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_modulusLength: 'tags this -> float [@@js.get "modulusLength"]
  val set_modulusLength: 'tags this -> float -> unit [@@js.set "modulusLength"]
  val get_publicExponent: 'tags this -> BigInteger.t [@@js.get "publicExponent"]
  val set_publicExponent: 'tags this -> BigInteger.t -> unit [@@js.set "publicExponent"]
  val create: modulusLength:float -> publicExponent:BigInteger.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module AlgorithmIdentifier : sig
  type t = ([`String of string | `Other of Algorithm.t] [@js.union on_field "dummy"]) Primitive.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module HashAlgorithmIdentifier : sig
  type t = AlgorithmIdentifier.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RsaHashedKeyGenParams : sig
  type t = [`Algorithm | `RsaHashedKeyGenParams | `RsaKeyGenParams] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Algorithm | `RsaHashedKeyGenParams | `RsaKeyGenParams]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Algorithm | `RsaHashedKeyGenParams | `RsaKeyGenParams]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RsaHashedKeyGenParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_hash: 'tags this -> HashAlgorithmIdentifier.t [@@js.get "hash"]
  val set_hash: 'tags this -> HashAlgorithmIdentifier.t -> unit [@@js.set "hash"]
  val create: hash:HashAlgorithmIdentifier.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RsaHashedImportParams : sig
  type t = [`Algorithm | `RsaHashedImportParams] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Algorithm | `RsaHashedImportParams]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Algorithm | `RsaHashedImportParams]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RsaHashedImportParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_hash: 'tags this -> HashAlgorithmIdentifier.t [@@js.get "hash"]
  val set_hash: 'tags this -> HashAlgorithmIdentifier.t -> unit [@@js.set "hash"]
  val create: hash:HashAlgorithmIdentifier.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module Pbkdf2Params : sig
  type t = [`Algorithm | `Pbkdf2Params] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Algorithm | `Pbkdf2Params]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Algorithm | `Pbkdf2Params]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Pbkdf2Params ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_hash: 'tags this -> HashAlgorithmIdentifier.t [@@js.get "hash"]
  val set_hash: 'tags this -> HashAlgorithmIdentifier.t -> unit [@@js.set "hash"]
  val get_iterations: 'tags this -> float [@@js.get "iterations"]
  val set_iterations: 'tags this -> float -> unit [@@js.set "iterations"]
  val get_salt: 'tags this -> BufferSource.t [@@js.get "salt"]
  val set_salt: 'tags this -> BufferSource.t -> unit [@@js.set "salt"]
  val create: hash:HashAlgorithmIdentifier.t -> iterations:float -> salt:BufferSource.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module KeyFormat : sig
  type t = ([`L_s535_jwk[@js "jwk"] | `L_s744_pkcs8[@js "pkcs8"] | `L_s794_raw[@js "raw"] | `L_s912_spki[@js "spki"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RsaOtherPrimesInfo : sig
  type t = [`RsaOtherPrimesInfo] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RsaOtherPrimesInfo]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RsaOtherPrimesInfo]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RsaOtherPrimesInfo ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_d: 'tags this -> string option [@@js.get "d"]
  val set_d: 'tags this -> string -> unit [@@js.set "d"]
  val get_r: 'tags this -> string option [@@js.get "r"]
  val set_r: 'tags this -> string -> unit [@@js.set "r"]
  val get_t: 'tags this -> string option [@@js.get "t"]
  val set_t: 'tags this -> string -> unit [@@js.set "t"]
  val create: ?d:string -> ?r:string -> ?t:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module JsonWebKey : sig
  type t = [`JsonWebKey] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`JsonWebKey]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`JsonWebKey]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `JsonWebKey ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_alg: 'tags this -> string option [@@js.get "alg"]
  val set_alg: 'tags this -> string -> unit [@@js.set "alg"]
  val get_crv: 'tags this -> string option [@@js.get "crv"]
  val set_crv: 'tags this -> string -> unit [@@js.set "crv"]
  val get_d: 'tags this -> string option [@@js.get "d"]
  val set_d: 'tags this -> string -> unit [@@js.set "d"]
  val get_dp: 'tags this -> string option [@@js.get "dp"]
  val set_dp: 'tags this -> string -> unit [@@js.set "dp"]
  val get_dq: 'tags this -> string option [@@js.get "dq"]
  val set_dq: 'tags this -> string -> unit [@@js.set "dq"]
  val get_e: 'tags this -> string option [@@js.get "e"]
  val set_e: 'tags this -> string -> unit [@@js.set "e"]
  val get_ext: 'tags this -> bool option [@@js.get "ext"]
  val set_ext: 'tags this -> bool -> unit [@@js.set "ext"]
  val get_k: 'tags this -> string option [@@js.get "k"]
  val set_k: 'tags this -> string -> unit [@@js.set "k"]
  val get_key_ops: 'tags this -> string list option [@@js.get "key_ops"]
  val set_key_ops: 'tags this -> string list -> unit [@@js.set "key_ops"]
  val get_kty: 'tags this -> string option [@@js.get "kty"]
  val set_kty: 'tags this -> string -> unit [@@js.set "kty"]
  val get_n: 'tags this -> string option [@@js.get "n"]
  val set_n: 'tags this -> string -> unit [@@js.set "n"]
  val get_oth: 'tags this -> RsaOtherPrimesInfo.t list option [@@js.get "oth"]
  val set_oth: 'tags this -> RsaOtherPrimesInfo.t list -> unit [@@js.set "oth"]
  val get_p: 'tags this -> string option [@@js.get "p"]
  val set_p: 'tags this -> string -> unit [@@js.set "p"]
  val get_q: 'tags this -> string option [@@js.get "q"]
  val set_q: 'tags this -> string -> unit [@@js.set "q"]
  val get_qi: 'tags this -> string option [@@js.get "qi"]
  val set_qi: 'tags this -> string -> unit [@@js.set "qi"]
  val get_use: 'tags this -> string option [@@js.get "use"]
  val set_use: 'tags this -> string -> unit [@@js.set "use"]
  val get_x: 'tags this -> string option [@@js.get "x"]
  val set_x: 'tags this -> string -> unit [@@js.set "x"]
  val get_y: 'tags this -> string option [@@js.get "y"]
  val set_y: 'tags this -> string -> unit [@@js.set "y"]
  val create: ?alg:string -> ?crv:string -> ?d:string -> ?dp:string -> ?dq:string -> ?e:string -> ?ext:bool -> ?k:string -> ?key_ops:string list -> ?kty:string -> ?n:string -> ?oth:RsaOtherPrimesInfo.t list -> ?p:string -> ?q:string -> ?qi:string -> ?use:string -> ?x:string -> ?y:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module HmacKeyGenParams : sig
  type t = [`Algorithm | `HmacKeyGenParams] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Algorithm | `HmacKeyGenParams]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Algorithm | `HmacKeyGenParams]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HmacKeyGenParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_hash: 'tags this -> HashAlgorithmIdentifier.t [@@js.get "hash"]
  val set_hash: 'tags this -> HashAlgorithmIdentifier.t -> unit [@@js.set "hash"]
  val get_length: 'tags this -> float option [@@js.get "length"]
  val set_length: 'tags this -> float -> unit [@@js.set "length"]
  val create: hash:HashAlgorithmIdentifier.t -> ?length:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module HmacImportParams : sig
  type t = [`Algorithm | `HmacImportParams] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Algorithm | `HmacImportParams]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Algorithm | `HmacImportParams]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HmacImportParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_hash: 'tags this -> HashAlgorithmIdentifier.t [@@js.get "hash"]
  val set_hash: 'tags this -> HashAlgorithmIdentifier.t -> unit [@@js.set "hash"]
  val get_length: 'tags this -> float option [@@js.get "length"]
  val set_length: 'tags this -> float -> unit [@@js.set "length"]
  val create: hash:HashAlgorithmIdentifier.t -> ?length:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module HkdfParams : sig
  type t = [`Algorithm | `HkdfParams] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Algorithm | `HkdfParams]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Algorithm | `HkdfParams]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HkdfParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_hash: 'tags this -> HashAlgorithmIdentifier.t [@@js.get "hash"]
  val set_hash: 'tags this -> HashAlgorithmIdentifier.t -> unit [@@js.set "hash"]
  val get_info: 'tags this -> BufferSource.t [@@js.get "info"]
  val set_info: 'tags this -> BufferSource.t -> unit [@@js.set "info"]
  val get_salt: 'tags this -> BufferSource.t [@@js.get "salt"]
  val set_salt: 'tags this -> BufferSource.t -> unit [@@js.set "salt"]
  val create: hash:HashAlgorithmIdentifier.t -> info:BufferSource.t -> salt:BufferSource.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module EcdsaParams : sig
  type t = [`Algorithm | `EcdsaParams] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Algorithm | `EcdsaParams]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Algorithm | `EcdsaParams]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EcdsaParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_hash: 'tags this -> HashAlgorithmIdentifier.t [@@js.get "hash"]
  val set_hash: 'tags this -> HashAlgorithmIdentifier.t -> unit [@@js.set "hash"]
  val create: hash:HashAlgorithmIdentifier.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module KeyUsage : sig
  type t = ([`L_s1016_unwrapKey[@js "unwrapKey"] | `L_s1032_verify[@js "verify"] | `L_s1060_wrapKey[@js "wrapKey"] | `L_s304_decrypt[@js "decrypt"] | `L_s313_deriveBits[@js "deriveBits"] | `L_s314_deriveKey[@js "deriveKey"] | `L_s362_encrypt[@js "encrypt"] | `L_s884_sign[@js "sign"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module KeyType : sig
  type t = ([`L_s780_private[@js "private"] | `L_s786_public[@js "public"] | `L_s857_secret[@js "secret"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module KeyAlgorithm : sig
  type t = [`KeyAlgorithm] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`KeyAlgorithm]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`KeyAlgorithm]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `KeyAlgorithm ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_name: 'tags this -> string [@@js.get "name"]
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  val create: name:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The CryptoKey dictionary of the Web Crypto API represents a cryptographic key.
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CryptoKey)
*)
module[@js.scope "CryptoKey"] CryptoKey : sig
  type t = [`CryptoKey] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CryptoKey]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CryptoKey]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CryptoKey ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CryptoKey/algorithm) *)
  val get_algorithm: 'tags this -> KeyAlgorithm.t [@@js.get "algorithm"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CryptoKey/extractable) *)
  val get_extractable: 'tags this -> bool [@@js.get "extractable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CryptoKey/type) *)
  val get_type: 'tags this -> KeyType.t [@@js.get "type"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CryptoKey/usages) *)
  val get_usages: 'tags this -> KeyUsage.t list [@@js.get "usages"]
  val create: algorithm:KeyAlgorithm.t -> extractable:bool -> type_:(KeyType.t[@js "type"]) -> usages:KeyUsage.t list -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end
module EcdhKeyDeriveParams : sig
  type t = [`Algorithm | `EcdhKeyDeriveParams] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Algorithm | `EcdhKeyDeriveParams]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Algorithm | `EcdhKeyDeriveParams]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EcdhKeyDeriveParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_public: 'tags this -> CryptoKey.t [@@js.get "public"]
  val set_public: 'tags this -> CryptoKey.t -> unit [@@js.set "public"]
  val create: public:CryptoKey.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module NamedCurve : sig
  type t = string
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module EcKeyImportParams : sig
  type t = [`Algorithm | `EcKeyImportParams] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Algorithm | `EcKeyImportParams]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Algorithm | `EcKeyImportParams]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EcKeyImportParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_namedCurve: 'tags this -> NamedCurve.t [@@js.get "namedCurve"]
  val set_namedCurve: 'tags this -> NamedCurve.t -> unit [@@js.set "namedCurve"]
  val create: namedCurve:NamedCurve.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module EcKeyGenParams : sig
  type t = [`Algorithm | `EcKeyGenParams] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Algorithm | `EcKeyGenParams]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Algorithm | `EcKeyGenParams]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EcKeyGenParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_namedCurve: 'tags this -> NamedCurve.t [@@js.get "namedCurve"]
  val set_namedCurve: 'tags this -> NamedCurve.t -> unit [@@js.set "namedCurve"]
  val create: namedCurve:NamedCurve.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module CryptoKeyPair : sig
  type t = [`CryptoKeyPair] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CryptoKeyPair]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CryptoKeyPair]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CryptoKeyPair ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_privateKey: 'tags this -> CryptoKey.t [@@js.get "privateKey"]
  val set_privateKey: 'tags this -> CryptoKey.t -> unit [@@js.set "privateKey"]
  val get_publicKey: 'tags this -> CryptoKey.t [@@js.get "publicKey"]
  val set_publicKey: 'tags this -> CryptoKey.t -> unit [@@js.set "publicKey"]
  val create: privateKey:CryptoKey.t -> publicKey:CryptoKey.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module AesKeyGenParams : sig
  type t = [`AesKeyGenParams | `Algorithm] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AesKeyGenParams | `Algorithm]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AesKeyGenParams | `Algorithm]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AesKeyGenParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_length: 'tags this -> float [@@js.get "length"]
  val set_length: 'tags this -> float -> unit [@@js.set "length"]
  val create: length:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module AesKeyAlgorithm : sig
  type t = [`AesKeyAlgorithm | `KeyAlgorithm] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AesKeyAlgorithm | `KeyAlgorithm]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AesKeyAlgorithm | `KeyAlgorithm]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AesKeyAlgorithm ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_length: 'tags this -> float [@@js.get "length"]
  val set_length: 'tags this -> float -> unit [@@js.set "length"]
  val create: length:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module AesGcmParams : sig
  type t = [`AesGcmParams | `Algorithm] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AesGcmParams | `Algorithm]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AesGcmParams | `Algorithm]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AesGcmParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_additionalData: 'tags this -> BufferSource.t option [@@js.get "additionalData"]
  val set_additionalData: 'tags this -> BufferSource.t -> unit [@@js.set "additionalData"]
  val get_iv: 'tags this -> BufferSource.t [@@js.get "iv"]
  val set_iv: 'tags this -> BufferSource.t -> unit [@@js.set "iv"]
  val get_tagLength: 'tags this -> float option [@@js.get "tagLength"]
  val set_tagLength: 'tags this -> float -> unit [@@js.set "tagLength"]
  val create: ?additionalData:BufferSource.t -> iv:BufferSource.t -> ?tagLength:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module AesDerivedKeyParams : sig
  type t = [`AesDerivedKeyParams | `Algorithm] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AesDerivedKeyParams | `Algorithm]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AesDerivedKeyParams | `Algorithm]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AesDerivedKeyParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_length: 'tags this -> float [@@js.get "length"]
  val set_length: 'tags this -> float -> unit [@@js.set "length"]
  val create: length:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module AesCtrParams : sig
  type t = [`AesCtrParams | `Algorithm] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AesCtrParams | `Algorithm]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AesCtrParams | `Algorithm]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AesCtrParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_counter: 'tags this -> BufferSource.t [@@js.get "counter"]
  val set_counter: 'tags this -> BufferSource.t -> unit [@@js.set "counter"]
  val get_length: 'tags this -> float [@@js.get "length"]
  val set_length: 'tags this -> float -> unit [@@js.set "length"]
  val create: counter:BufferSource.t -> length:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module AesCbcParams : sig
  type t = [`AesCbcParams | `Algorithm] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AesCbcParams | `Algorithm]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AesCbcParams | `Algorithm]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AesCbcParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_iv: 'tags this -> BufferSource.t [@@js.get "iv"]
  val set_iv: 'tags this -> BufferSource.t -> unit [@@js.set "iv"]
  val create: iv:BufferSource.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  This Web Crypto API interface provides a number of low-level cryptographic functions. It is accessed via the Crypto.subtle properties available in a window context (via Window.crypto).
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto)
*)
module[@js.scope "SubtleCrypto"] SubtleCrypto : sig
  type t = [`SubtleCrypto] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SubtleCrypto]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SubtleCrypto]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SubtleCrypto ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/deriveKey) *)
  val deriveKey: 'tags this -> algorithm:([`U1 of AlgorithmIdentifier.t | `U2 of EcdhKeyDeriveParams.t | `U3 of HkdfParams.t | `U4 of Pbkdf2Params.t] [@js.union]) -> baseKey:CryptoKey.t -> derivedKeyType:([`U1 of AlgorithmIdentifier.t | `U2 of AesDerivedKeyParams.t | `U3 of HmacImportParams.t | `U4 of HkdfParams.t | `U5 of Pbkdf2Params.t] [@js.union]) -> extractable:bool -> keyUsages:KeyUsage.t Iterable.t -> CryptoKey.t Promise.t [@@js.call "deriveKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/generateKey) *)
  val generateKey: 'tags this -> algorithm:([`L_s30_Ed25519[@js "Ed25519"]] [@js.enum]) -> extractable:bool -> keyUsages:([`U1 of ([`L_s884_sign[@js "sign"]] [@js.enum]) | `U2 of ([`L_s1032_verify[@js "verify"]] [@js.enum])] [@js.union]) list -> CryptoKeyPair.t Promise.t [@@js.call "generateKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/generateKey) *)
  val generateKey': 'tags this -> algorithm:([`U1 of RsaHashedKeyGenParams.t | `U2 of EcKeyGenParams.t] [@js.union]) -> extractable:bool -> keyUsages:KeyUsage.t list -> CryptoKeyPair.t Promise.t [@@js.call "generateKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/generateKey) *)
  val generateKey'': 'tags this -> algorithm:([`U1 of AesKeyGenParams.t | `U2 of HmacKeyGenParams.t | `U3 of Pbkdf2Params.t] [@js.union]) -> extractable:bool -> keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t [@@js.call "generateKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/generateKey) *)
  val generateKey''': 'tags this -> algorithm:AlgorithmIdentifier.t -> extractable:bool -> keyUsages:KeyUsage.t Iterable.t -> (CryptoKey.t, CryptoKeyPair.t) union2 Promise.t [@@js.call "generateKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/importKey) *)
  val importKey: 'tags this -> format:([`L_s535_jwk[@js "jwk"]] [@js.enum]) -> keyData:JsonWebKey.t -> algorithm:([`U1 of AlgorithmIdentifier.t | `U2 of RsaHashedImportParams.t | `U3 of EcKeyImportParams.t | `U4 of HmacImportParams.t | `U5 of AesKeyAlgorithm.t] [@js.union]) -> extractable:bool -> keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t [@@js.call "importKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/importKey) *)
  val importKey': 'tags this -> format:(KeyFormat.t, ([`L_s535_jwk[@js "jwk"]] [@js.enum])) Exclude.t -> keyData:BufferSource.t -> algorithm:([`U1 of AlgorithmIdentifier.t | `U2 of RsaHashedImportParams.t | `U3 of EcKeyImportParams.t | `U4 of HmacImportParams.t | `U5 of AesKeyAlgorithm.t] [@js.union]) -> extractable:bool -> keyUsages:KeyUsage.t Iterable.t -> CryptoKey.t Promise.t [@@js.call "importKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/unwrapKey) *)
  val unwrapKey: 'tags this -> format:KeyFormat.t -> wrappedKey:BufferSource.t -> unwrappingKey:CryptoKey.t -> unwrapAlgorithm:([`U1 of AlgorithmIdentifier.t | `U2 of RsaOaepParams.t | `U3 of AesCtrParams.t | `U4 of AesCbcParams.t | `U5 of AesGcmParams.t] [@js.union]) -> unwrappedKeyAlgorithm:([`U1 of AlgorithmIdentifier.t | `U2 of RsaHashedImportParams.t | `U3 of EcKeyImportParams.t | `U4 of HmacImportParams.t | `U5 of AesKeyAlgorithm.t] [@js.union]) -> extractable:bool -> keyUsages:KeyUsage.t Iterable.t -> CryptoKey.t Promise.t [@@js.call "unwrapKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/decrypt) *)
  val decrypt: 'tags this -> algorithm:([`U1 of AlgorithmIdentifier.t | `U2 of RsaOaepParams.t | `U3 of AesCtrParams.t | `U4 of AesCbcParams.t | `U5 of AesGcmParams.t] [@js.union]) -> key:CryptoKey.t -> data:BufferSource.t -> ArrayBuffer.t Promise.t [@@js.call "decrypt"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/deriveBits) *)
  val deriveBits: 'tags this -> algorithm:([`U1 of AlgorithmIdentifier.t | `U2 of EcdhKeyDeriveParams.t | `U3 of HkdfParams.t | `U4 of Pbkdf2Params.t] [@js.union]) -> baseKey:CryptoKey.t -> length:float -> ArrayBuffer.t Promise.t [@@js.call "deriveBits"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/deriveKey) *)
  val deriveKey': 'tags this -> algorithm:([`U1 of AlgorithmIdentifier.t | `U2 of EcdhKeyDeriveParams.t | `U3 of HkdfParams.t | `U4 of Pbkdf2Params.t] [@js.union]) -> baseKey:CryptoKey.t -> derivedKeyType:([`U1 of AlgorithmIdentifier.t | `U2 of AesDerivedKeyParams.t | `U3 of HmacImportParams.t | `U4 of HkdfParams.t | `U5 of Pbkdf2Params.t] [@js.union]) -> extractable:bool -> keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t [@@js.call "deriveKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/digest) *)
  val digest: 'tags this -> algorithm:AlgorithmIdentifier.t -> data:BufferSource.t -> ArrayBuffer.t Promise.t [@@js.call "digest"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/encrypt) *)
  val encrypt: 'tags this -> algorithm:([`U1 of AlgorithmIdentifier.t | `U2 of RsaOaepParams.t | `U3 of AesCtrParams.t | `U4 of AesCbcParams.t | `U5 of AesGcmParams.t] [@js.union]) -> key:CryptoKey.t -> data:BufferSource.t -> ArrayBuffer.t Promise.t [@@js.call "encrypt"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/exportKey) *)
  val exportKey: 'tags this -> format:([`L_s535_jwk[@js "jwk"]] [@js.enum]) -> key:CryptoKey.t -> JsonWebKey.t Promise.t [@@js.call "exportKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/exportKey) *)
  val exportKey': 'tags this -> format:(KeyFormat.t, ([`L_s535_jwk[@js "jwk"]] [@js.enum])) Exclude.t -> key:CryptoKey.t -> ArrayBuffer.t Promise.t [@@js.call "exportKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/exportKey) *)
  val exportKey'': 'tags this -> format:KeyFormat.t -> key:CryptoKey.t -> (ArrayBuffer.t, JsonWebKey.t) union2 Promise.t [@@js.call "exportKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/generateKey) *)
  val generateKey'''': 'tags this -> algorithm:([`L_s30_Ed25519[@js "Ed25519"]] [@js.enum]) -> extractable:bool -> keyUsages:([`U1 of ([`L_s884_sign[@js "sign"]] [@js.enum]) | `U2 of ([`L_s1032_verify[@js "verify"]] [@js.enum])] [@js.union]) list -> CryptoKeyPair.t Promise.t [@@js.call "generateKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/generateKey) *)
  val generateKey''''': 'tags this -> algorithm:([`U1 of RsaHashedKeyGenParams.t | `U2 of EcKeyGenParams.t] [@js.union]) -> extractable:bool -> keyUsages:KeyUsage.t list -> CryptoKeyPair.t Promise.t [@@js.call "generateKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/generateKey) *)
  val generateKey'''''': 'tags this -> algorithm:([`U1 of AesKeyGenParams.t | `U2 of HmacKeyGenParams.t | `U3 of Pbkdf2Params.t] [@js.union]) -> extractable:bool -> keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t [@@js.call "generateKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/generateKey) *)
  val generateKey''''''': 'tags this -> algorithm:AlgorithmIdentifier.t -> extractable:bool -> keyUsages:KeyUsage.t list -> (CryptoKey.t, CryptoKeyPair.t) union2 Promise.t [@@js.call "generateKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/importKey) *)
  val importKey'': 'tags this -> format:([`L_s535_jwk[@js "jwk"]] [@js.enum]) -> keyData:JsonWebKey.t -> algorithm:([`U1 of AlgorithmIdentifier.t | `U2 of RsaHashedImportParams.t | `U3 of EcKeyImportParams.t | `U4 of HmacImportParams.t | `U5 of AesKeyAlgorithm.t] [@js.union]) -> extractable:bool -> keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t [@@js.call "importKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/importKey) *)
  val importKey''': 'tags this -> format:(KeyFormat.t, ([`L_s535_jwk[@js "jwk"]] [@js.enum])) Exclude.t -> keyData:BufferSource.t -> algorithm:([`U1 of AlgorithmIdentifier.t | `U2 of RsaHashedImportParams.t | `U3 of EcKeyImportParams.t | `U4 of HmacImportParams.t | `U5 of AesKeyAlgorithm.t] [@js.union]) -> extractable:bool -> keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t [@@js.call "importKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/sign) *)
  val sign: 'tags this -> algorithm:([`U1 of AlgorithmIdentifier.t | `U2 of RsaPssParams.t | `U3 of EcdsaParams.t] [@js.union]) -> key:CryptoKey.t -> data:BufferSource.t -> ArrayBuffer.t Promise.t [@@js.call "sign"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/unwrapKey) *)
  val unwrapKey': 'tags this -> format:KeyFormat.t -> wrappedKey:BufferSource.t -> unwrappingKey:CryptoKey.t -> unwrapAlgorithm:([`U1 of AlgorithmIdentifier.t | `U2 of RsaOaepParams.t | `U3 of AesCtrParams.t | `U4 of AesCbcParams.t | `U5 of AesGcmParams.t] [@js.union]) -> unwrappedKeyAlgorithm:([`U1 of AlgorithmIdentifier.t | `U2 of RsaHashedImportParams.t | `U3 of EcKeyImportParams.t | `U4 of HmacImportParams.t | `U5 of AesKeyAlgorithm.t] [@js.union]) -> extractable:bool -> keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t [@@js.call "unwrapKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/verify) *)
  val verify: 'tags this -> algorithm:([`U1 of AlgorithmIdentifier.t | `U2 of RsaPssParams.t | `U3 of EcdsaParams.t] [@js.union]) -> key:CryptoKey.t -> signature:BufferSource.t -> data:BufferSource.t -> bool Promise.t [@@js.call "verify"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/wrapKey) *)
  val wrapKey: 'tags this -> format:KeyFormat.t -> key:CryptoKey.t -> wrappingKey:CryptoKey.t -> wrapAlgorithm:([`U1 of AlgorithmIdentifier.t | `U2 of RsaOaepParams.t | `U3 of AesCtrParams.t | `U4 of AesCbcParams.t | `U5 of AesGcmParams.t] [@js.union]) -> ArrayBuffer.t Promise.t [@@js.call "wrapKey"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Basic cryptography features available in the current context. It allows access to a cryptographically strong random number generator and to cryptographic primitives.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Crypto)
*)
module[@js.scope "Crypto"] Crypto : sig
  type t = [`Crypto] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Crypto]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Crypto]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Crypto ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Crypto/subtle)
  *)
  val get_subtle: 'tags this -> SubtleCrypto.t [@@js.get "subtle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Crypto/getRandomValues) *)
  val getRandomValues: 'tags this -> array:'T -> 'T [@@js.call "getRandomValues"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Crypto/randomUUID)
  *)
  val randomUUID: 'tags this -> (* FIXME: unknown type '`${string}-${string}-${string}-${string}-${string}`' *)any [@@js.call "randomUUID"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module CacheQueryOptions : sig
  type t = [`CacheQueryOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CacheQueryOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CacheQueryOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CacheQueryOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_ignoreMethod: 'tags this -> bool option [@@js.get "ignoreMethod"]
  val set_ignoreMethod: 'tags this -> bool -> unit [@@js.set "ignoreMethod"]
  val get_ignoreSearch: 'tags this -> bool option [@@js.get "ignoreSearch"]
  val set_ignoreSearch: 'tags this -> bool -> unit [@@js.set "ignoreSearch"]
  val get_ignoreVary: 'tags this -> bool option [@@js.get "ignoreVary"]
  val set_ignoreVary: 'tags this -> bool -> unit [@@js.set "ignoreVary"]
  val create: ?ignoreMethod:bool -> ?ignoreSearch:bool -> ?ignoreVary:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MultiCacheQueryOptions : sig
  type t = [`CacheQueryOptions | `MultiCacheQueryOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CacheQueryOptions | `MultiCacheQueryOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CacheQueryOptions | `MultiCacheQueryOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MultiCacheQueryOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_cacheName: 'tags this -> string option [@@js.get "cacheName"]
  val set_cacheName: 'tags this -> string -> unit [@@js.set "cacheName"]
  val create: ?cacheName:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ResponseType : sig
  type t = ([`L_s185_basic[@js "basic"] | `L_s286_cors[@js "cors"] | `L_s305_default[@js "default"] | `L_s372_error[@js "error"] | `L_s702_opaque[@js "opaque"] | `L_s703_opaqueredirect[@js "opaqueredirect"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  This Fetch API interface allows you to perform various actions on HTTP request and response headers. These actions include retrieving, setting, adding to, and removing. A Headers object has an associated header list, which is initially empty and consistsÂ of zero or more name and value pairs. Â You can add to this using methods like append() (see Examples.)Â In all methods of this interface, header names are matched by case-insensitive byte sequence.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Headers)
*)
module[@js.scope "Headers"] rec Headers : sig
  type t = [`Headers] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Headers]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Headers]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Headers ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> (string * string) IterableIterator.t *)
  
  (** Returns an iterator allowing to go through all key/value pairs contained in this object. *)
  val entries: 'tags this -> (string * string) IterableIterator.t [@@js.call "entries"]
  
  (** Returns an iterator allowing to go through all keys of the key/value pairs contained in this object. *)
  val keys: 'tags this -> string IterableIterator.t [@@js.call "keys"]
  
  (** Returns an iterator allowing to go through all values of the key/value pairs contained in this object. *)
  val values: 'tags this -> string IterableIterator.t [@@js.call "values"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Headers/append) *)
  val append: 'tags this -> name:string -> value:string -> unit [@@js.call "append"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Headers/delete) *)
  val delete: 'tags this -> name:string -> unit [@@js.call "delete"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Headers/get) *)
  val get_: 'tags this -> name:string -> string option [@@js.call "get"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Headers/getSetCookie) *)
  val getSetCookie: 'tags this -> string list [@@js.call "getSetCookie"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Headers/has) *)
  val has: 'tags this -> name:string -> bool [@@js.call "has"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Headers/set) *)
  val set_: 'tags this -> name:string -> value:string -> unit [@@js.call "set"]
  val forEach: 'tags this -> callbackfn:(value:string -> key:string -> parent:t -> unit) -> ?thisArg:any -> unit -> unit [@@js.call "forEach"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: ?init:HeadersInit.t -> unit -> t [@@js.create]
end
and HeadersInit : sig
  type t = ((string * string) list, Headers.t, (string, string) Record.t) union3
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module ResponseInit : sig
  type t = [`ResponseInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ResponseInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ResponseInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ResponseInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_headers: 'tags this -> HeadersInit.t option [@@js.get "headers"]
  val set_headers: 'tags this -> HeadersInit.t -> unit [@@js.set "headers"]
  val get_status: 'tags this -> float option [@@js.get "status"]
  val set_status: 'tags this -> float -> unit [@@js.set "status"]
  val get_statusText: 'tags this -> string option [@@js.get "statusText"]
  val set_statusText: 'tags this -> string -> unit [@@js.set "statusText"]
  val create: ?headers:HeadersInit.t -> ?status:float -> ?statusText:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RequestRedirect : sig
  type t = ([`L_s372_error[@js "error"] | `L_s428_follow[@js "follow"] | `L_s594_manual[@js "manual"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RequestPriority : sig
  type t = ([`L_s174_auto[@js "auto"] | `L_s479_high[@js "high"] | `L_s581_low[@js "low"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RequestMode : sig
  type t = ([`L_s286_cors[@js "cors"] | `L_s664_navigate[@js "navigate"] | `L_s677_no_cors[@js "no-cors"] | `L_s845_same_origin[@js "same-origin"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RequestDestination : sig
  type t = ([`L_s0[@js ""] | `L_s1036_video[@js "video"] | `L_s1059_worker[@js "worker"] | `L_s1066_xslt[@js "xslt"] | `L_s166_audio[@js "audio"] | `L_s172_audioworklet[@js "audioworklet"] | `L_s342_document[@js "document"] | `L_s359_embed[@js "embed"] | `L_s429_font[@js "font"] | `L_s437_frame[@js "frame"] | `L_s506_iframe[@js "iframe"] | `L_s507_image[@js "image"] | `L_s593_manifest[@js "manifest"] | `L_s692_object[@js "object"] | `L_s724_paintworklet[@js "paintworklet"] | `L_s821_report[@js "report"] | `L_s851_script[@js "script"] | `L_s880_sharedworker[@js "sharedworker"] | `L_s932_style[@js "style"] | `L_s988_track[@js "track"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RequestCache : sig
  type t = ([`L_s305_default[@js "default"] | `L_s431_force_cache[@js "force-cache"] | `L_s676_no_cache[@js "no-cache"] | `L_s681_no_store[@js "no-store"] | `L_s701_only_if_cached[@js "only-if-cached"] | `L_s812_reload[@js "reload"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module ReferrerPolicy : sig
  type t = ([`L_s0[@js ""] | `L_s1014_unsafe_url[@js "unsafe-url"] | `L_s679_no_referrer[@js "no-referrer"] | `L_s680_no_referrer_when_downgrade[@js "no-referrer-when-downgrade"] | `L_s712_origin[@js "origin"] | `L_s713_origin_when_cross_origin[@js "origin-when-cross-origin"] | `L_s845_same_origin[@js "same-origin"] | `L_s928_strict_origin[@js "strict-origin"] | `L_s929_strict_origin_when_cross_origin[@js "strict-origin-when-cross-origin"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module WindowLocalStorage : sig
  type t = [`WindowLocalStorage] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WindowLocalStorage]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WindowLocalStorage]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WindowLocalStorage ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/localStorage) *)
  val get_localStorage: 'tags this -> Storage.t [@@js.get "localStorage"]
  val create: localStorage:Storage.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VisualViewport) *)
module[@js.scope "VisualViewport"] VisualViewport : sig
  type t = [`EventTarget | `VisualViewport] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `VisualViewport]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `VisualViewport]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VisualViewport ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VisualViewport/height) *)
  val get_height: 'tags this -> float [@@js.get "height"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VisualViewport/offsetLeft) *)
  val get_offsetLeft: 'tags this -> float [@@js.get "offsetLeft"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VisualViewport/offsetTop) *)
  val get_offsetTop: 'tags this -> float [@@js.get "offsetTop"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VisualViewport/resize_event) *)
  val get_onresize: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onresize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VisualViewport/resize_event) *)
  val set_onresize: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onresize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VisualViewport/scroll_event) *)
  val get_onscroll: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onscroll"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VisualViewport/scroll_event) *)
  val set_onscroll: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onscroll"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VisualViewport/pageLeft) *)
  val get_pageLeft: 'tags this -> float [@@js.get "pageLeft"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VisualViewport/pageTop) *)
  val get_pageTop: 'tags this -> float [@@js.get "pageTop"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VisualViewport/scale) *)
  val get_scale: 'tags this -> float [@@js.get "scale"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VisualViewport/width) *)
  val get_width: 'tags this -> float [@@js.get "width"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'VisualViewportEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'VisualViewportEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module ScrollToOptions : sig
  type t = [`ScrollOptions | `ScrollToOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ScrollOptions | `ScrollToOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ScrollOptions | `ScrollToOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ScrollToOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_left: 'tags this -> float option [@@js.get "left"]
  val set_left: 'tags this -> float -> unit [@@js.set "left"]
  val get_top: 'tags this -> float option [@@js.get "top"]
  val set_top: 'tags this -> float -> unit [@@js.set "top"]
  val create: ?left:float -> ?top:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  A screen, usually the one on which the current window is being rendered, and is obtained using window.screen.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Screen)
*)
module[@js.scope "Screen"] Screen : sig
  type t = [`Screen] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Screen]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Screen]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Screen ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Screen/availHeight) *)
  val get_availHeight: 'tags this -> float [@@js.get "availHeight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Screen/availWidth) *)
  val get_availWidth: 'tags this -> float [@@js.get "availWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Screen/colorDepth) *)
  val get_colorDepth: 'tags this -> float [@@js.get "colorDepth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Screen/height) *)
  val get_height: 'tags this -> float [@@js.get "height"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Screen/orientation) *)
  val get_orientation: 'tags this -> ScreenOrientation.t [@@js.get "orientation"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Screen/pixelDepth) *)
  val get_pixelDepth: 'tags this -> float [@@js.get "pixelDepth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Screen/width) *)
  val get_width: 'tags this -> float [@@js.get "width"]
  val create: availHeight:float -> availWidth:float -> colorDepth:float -> height:float -> orientation:ScreenOrientation.t -> pixelDepth:float -> width:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end
module WakeLockType : sig
  type t = ([`L_s849_screen[@js "screen"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WakeLockSentinel)
*)
module[@js.scope "WakeLockSentinel"] WakeLockSentinel : sig
  type t = [`EventTarget | `WakeLockSentinel] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `WakeLockSentinel]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `WakeLockSentinel]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WakeLockSentinel ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WakeLockSentinel/release_event) *)
  val get_onrelease: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onrelease"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WakeLockSentinel/release_event) *)
  val set_onrelease: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onrelease"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WakeLockSentinel/released) *)
  val get_released: 'tags this -> bool [@@js.get "released"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WakeLockSentinel/type) *)
  val get_type: 'tags this -> WakeLockType.t [@@js.get "type"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WakeLockSentinel/release) *)
  val release: 'tags this -> unit Promise.t [@@js.call "release"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'WakeLockSentinelEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'WakeLockSentinelEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WakeLock)
*)
module[@js.scope "WakeLock"] WakeLock : sig
  type t = [`WakeLock] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WakeLock]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WakeLock]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WakeLock ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WakeLock/request) *)
  val request: 'tags this -> ?type_:WakeLockType.t -> unit -> WakeLockSentinel.t Promise.t [@@js.call "request"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module VibratePattern : sig
  type t = ([`Number of float | `Other of float list] [@js.union on_field "dummy"]) Primitive.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/UserActivation) *)
module[@js.scope "UserActivation"] UserActivation : sig
  type t = [`UserActivation] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`UserActivation]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`UserActivation]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `UserActivation ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/UserActivation/hasBeenActive) *)
  val get_hasBeenActive: 'tags this -> bool [@@js.get "hasBeenActive"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/UserActivation/hasBeenActive) *)
  val get_isActive: 'tags this -> bool [@@js.get "isActive"]
  val create: hasBeenActive:bool -> isActive:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end
module FilePropertyBag : sig
  type t = [`BlobPropertyBag | `FilePropertyBag] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`BlobPropertyBag | `FilePropertyBag]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`BlobPropertyBag | `FilePropertyBag]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FilePropertyBag ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_lastModified: 'tags this -> float option [@@js.get "lastModified"]
  val set_lastModified: 'tags this -> float -> unit [@@js.set "lastModified"]
  val create: ?lastModified:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Provides information about files and allows JavaScript in a web page to access their content.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/File)
*)
module[@js.scope "File"] File : sig
  type t = [`Blob | `File] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Blob | `File]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Blob | `File]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `File ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/File/lastModified) *)
  val get_lastModified: 'tags this -> float [@@js.get "lastModified"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/File/name) *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/File/webkitRelativePath) *)
  val get_webkitRelativePath: 'tags this -> string [@@js.get "webkitRelativePath"]
  val create: lastModified:float -> name:string -> webkitRelativePath:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': fileBits:BlobPart.t list -> fileName:string -> ?options:FilePropertyBag.t -> unit -> t [@@js.create]
end
module ShareData : sig
  type t = [`ShareData] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ShareData]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ShareData]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ShareData ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_files: 'tags this -> File.t list option [@@js.get "files"]
  val set_files: 'tags this -> File.t list -> unit [@@js.set "files"]
  val get_text: 'tags this -> string option [@@js.get "text"]
  val set_text: 'tags this -> string -> unit [@@js.set "text"]
  val get_title: 'tags this -> string option [@@js.get "title"]
  val set_title: 'tags this -> string -> unit [@@js.set "title"]
  val get_url: 'tags this -> string option [@@js.get "url"]
  val set_url: 'tags this -> string -> unit [@@js.set "url"]
  val create: ?files:File.t list -> ?text:string -> ?title:string -> ?url:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module PushSubscriptionOptionsInit : sig
  type t = [`PushSubscriptionOptionsInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PushSubscriptionOptionsInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PushSubscriptionOptionsInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PushSubscriptionOptionsInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_applicationServerKey: 'tags this -> ([`String of string | `Null | `Undefined | `Other of BufferSource.t] [@js.union on_field "dummy"]) Primitive.t [@@js.get "applicationServerKey"]
  val set_applicationServerKey: 'tags this -> ([`Null | `U1 of BufferSource.t | `U2 of string] [@js.union]) -> unit [@@js.set "applicationServerKey"]
  val get_userVisibleOnly: 'tags this -> bool option [@@js.get "userVisibleOnly"]
  val set_userVisibleOnly: 'tags this -> bool -> unit [@@js.set "userVisibleOnly"]
  val create: ?applicationServerKey:([`String of string | `Other of BufferSource.t] [@js.union on_field "dummy"]) Primitive.t -> ?userVisibleOnly:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PushSubscriptionOptions)
*)
module[@js.scope "PushSubscriptionOptions"] PushSubscriptionOptions : sig
  type t = [`PushSubscriptionOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PushSubscriptionOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PushSubscriptionOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PushSubscriptionOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PushSubscriptionOptions/applicationServerKey) *)
  val get_applicationServerKey: 'tags this -> ArrayBuffer.t option [@@js.get "applicationServerKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PushSubscriptionOptions/userVisibleOnly) *)
  val get_userVisibleOnly: 'tags this -> bool [@@js.get "userVisibleOnly"]
  val create: ?applicationServerKey:ArrayBuffer.t -> userVisibleOnly:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end
module EpochTimeStamp : sig
  type t = float
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module PushSubscriptionJSON : sig
  type t = [`PushSubscriptionJSON] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PushSubscriptionJSON]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PushSubscriptionJSON]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PushSubscriptionJSON ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_endpoint: 'tags this -> string option [@@js.get "endpoint"]
  val set_endpoint: 'tags this -> string -> unit [@@js.set "endpoint"]
  val get_expirationTime: 'tags this -> EpochTimeStamp.t option [@@js.get "expirationTime"]
  val set_expirationTime: 'tags this -> EpochTimeStamp.t option -> unit [@@js.set "expirationTime"]
  val get_keys: 'tags this -> (string, string) Record.t option [@@js.get "keys"]
  val set_keys: 'tags this -> (string, string) Record.t -> unit [@@js.set "keys"]
  val create: ?endpoint:string -> ?expirationTime:EpochTimeStamp.t -> ?keys:(string, string) Record.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module PushEncryptionKeyName : sig
  type t = ([`L_s173_auth[@js "auth"] | `L_s720_p256dh[@js "p256dh"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  This Push API interface provides a subcription's URL endpoint and allows unsubscription from a push service.
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PushSubscription)
*)
module[@js.scope "PushSubscription"] PushSubscription : sig
  type t = [`PushSubscription] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PushSubscription]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PushSubscription]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PushSubscription ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PushSubscription/endpoint) *)
  val get_endpoint: 'tags this -> string [@@js.get "endpoint"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PushSubscription/expirationTime) *)
  val get_expirationTime: 'tags this -> EpochTimeStamp.t option [@@js.get "expirationTime"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PushSubscription/options) *)
  val get_options: 'tags this -> PushSubscriptionOptions.t [@@js.get "options"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PushSubscription/getKey) *)
  val getKey: 'tags this -> name:PushEncryptionKeyName.t -> ArrayBuffer.t option [@@js.call "getKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PushSubscription/toJSON) *)
  val toJSON: 'tags this -> PushSubscriptionJSON.t [@@js.call "toJSON"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PushSubscription/unsubscribe) *)
  val unsubscribe: 'tags this -> bool Promise.t [@@js.call "unsubscribe"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module PermissionState : sig
  type t = ([`L_s311_denied[@js "denied"] | `L_s456_granted[@js "granted"] | `L_s785_prompt[@js "prompt"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  This Push API interface provides a way to receive notifications from third-party servers as well as request URLs for push notifications.
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PushManager)
*)
module[@js.scope "PushManager"] PushManager : sig
  type t = [`PushManager] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PushManager]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PushManager]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PushManager ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PushManager/getSubscription) *)
  val getSubscription: 'tags this -> PushSubscription.t option Promise.t [@@js.call "getSubscription"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PushManager/permissionState) *)
  val permissionState: 'tags this -> ?options:PushSubscriptionOptionsInit.t -> unit -> PermissionState.t Promise.t [@@js.call "permissionState"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PushManager/subscribe) *)
  val subscribe: 'tags this -> ?options:PushSubscriptionOptionsInit.t -> unit -> PushSubscription.t Promise.t [@@js.call "subscribe"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PushManager/supportedContentEncodings_static) *)
  val supportedContentEncodings: unit -> string list [@@js.get "supportedContentEncodings"]
end
module NotificationPermission : sig
  type t = ([`L_s305_default[@js "default"] | `L_s311_denied[@js "denied"] | `L_s456_granted[@js "granted"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module NotificationPermissionCallback : sig
  type t = [`NotificationPermissionCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`NotificationPermissionCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`NotificationPermissionCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `NotificationPermissionCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> permission:NotificationPermission.t -> unit [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module NotificationDirection : sig
  type t = ([`L_s174_auto[@js "auto"] | `L_s587_ltr[@js "ltr"] | `L_s840_rtl[@js "rtl"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module NotificationOptions : sig
  type t = [`NotificationOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`NotificationOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`NotificationOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `NotificationOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_badge: 'tags this -> string option [@@js.get "badge"]
  val set_badge: 'tags this -> string -> unit [@@js.set "badge"]
  val get_body: 'tags this -> string option [@@js.get "body"]
  val set_body: 'tags this -> string -> unit [@@js.set "body"]
  val get_data: 'tags this -> any option [@@js.get "data"]
  val set_data: 'tags this -> any -> unit [@@js.set "data"]
  val get_dir: 'tags this -> NotificationDirection.t option [@@js.get "dir"]
  val set_dir: 'tags this -> NotificationDirection.t -> unit [@@js.set "dir"]
  val get_icon: 'tags this -> string option [@@js.get "icon"]
  val set_icon: 'tags this -> string -> unit [@@js.set "icon"]
  val get_lang: 'tags this -> string option [@@js.get "lang"]
  val set_lang: 'tags this -> string -> unit [@@js.set "lang"]
  val get_requireInteraction: 'tags this -> bool option [@@js.get "requireInteraction"]
  val set_requireInteraction: 'tags this -> bool -> unit [@@js.set "requireInteraction"]
  val get_silent: 'tags this -> bool option [@@js.get "silent"]
  val set_silent: 'tags this -> bool option -> unit [@@js.set "silent"]
  val get_tag: 'tags this -> string option [@@js.get "tag"]
  val set_tag: 'tags this -> string -> unit [@@js.set "tag"]
  val create: ?badge:string -> ?body:string -> ?data:any -> ?dir:NotificationDirection.t -> ?icon:string -> ?lang:string -> ?requireInteraction:bool -> ?silent:bool -> ?tag:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  This Notifications API interface is used to configure and display desktop notifications to the user.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification)
*)
module[@js.scope "Notification"] Notification : sig
  type t = [`EventTarget | `Notification] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `Notification]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `Notification]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Notification ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/badge) *)
  val get_badge: 'tags this -> string [@@js.get "badge"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/body) *)
  val get_body: 'tags this -> string [@@js.get "body"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/data) *)
  val get_data: 'tags this -> any [@@js.get "data"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/dir) *)
  val get_dir: 'tags this -> NotificationDirection.t [@@js.get "dir"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/icon) *)
  val get_icon: 'tags this -> string [@@js.get "icon"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/lang) *)
  val get_lang: 'tags this -> string [@@js.get "lang"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/click_event) *)
  val get_onclick: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onclick"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/click_event) *)
  val set_onclick: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onclick"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/close_event) *)
  val get_onclose: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onclose"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/close_event) *)
  val set_onclose: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onclose"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/error_event) *)
  val get_onerror: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/error_event) *)
  val set_onerror: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/show_event) *)
  val get_onshow: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onshow"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/show_event) *)
  val set_onshow: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onshow"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/requireInteraction) *)
  val get_requireInteraction: 'tags this -> bool [@@js.get "requireInteraction"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/silent) *)
  val get_silent: 'tags this -> bool option [@@js.get "silent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/tag) *)
  val get_tag: 'tags this -> string [@@js.get "tag"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/title) *)
  val get_title: 'tags this -> string [@@js.get "title"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/close) *)
  val close: 'tags this -> unit [@@js.call "close"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'NotificationEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'NotificationEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: title:string -> ?options:NotificationOptions.t -> unit -> t [@@js.create]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/permission_static) *)
  val permission: unit -> NotificationPermission.t [@@js.get "permission"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Notification/requestPermission_static) *)
  val requestPermission: ?deprecatedCallback:NotificationPermissionCallback.t -> unit -> NotificationPermission.t Promise.t [@@js.global "requestPermission"]
end
module NavigationPreloadState : sig
  type t = [`NavigationPreloadState] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`NavigationPreloadState]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`NavigationPreloadState]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `NavigationPreloadState ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_enabled: 'tags this -> bool option [@@js.get "enabled"]
  val set_enabled: 'tags this -> bool -> unit [@@js.set "enabled"]
  val get_headerValue: 'tags this -> string option [@@js.get "headerValue"]
  val set_headerValue: 'tags this -> string -> unit [@@js.set "headerValue"]
  val create: ?enabled:bool -> ?headerValue:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/NavigationPreloadManager)
*)
module[@js.scope "NavigationPreloadManager"] NavigationPreloadManager : sig
  type t = [`NavigationPreloadManager] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`NavigationPreloadManager]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`NavigationPreloadManager]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `NavigationPreloadManager ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/NavigationPreloadManager/disable) *)
  val disable: 'tags this -> unit Promise.t [@@js.call "disable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/NavigationPreloadManager/enable) *)
  val enable: 'tags this -> unit Promise.t [@@js.call "enable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/NavigationPreloadManager/getState) *)
  val getState: 'tags this -> NavigationPreloadState.t Promise.t [@@js.call "getState"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/NavigationPreloadManager/setHeaderValue) *)
  val setHeaderValue: 'tags this -> value:string -> unit Promise.t [@@js.call "setHeaderValue"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module GetNotificationOptions : sig
  type t = [`GetNotificationOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`GetNotificationOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`GetNotificationOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `GetNotificationOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_tag: 'tags this -> string option [@@js.get "tag"]
  val set_tag: 'tags this -> string -> unit [@@js.set "tag"]
  val create: ?tag:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ServiceWorkerUpdateViaCache : sig
  type t = ([`L_s136_all[@js "all"] | `L_s510_imports[@js "imports"] | `L_s685_none[@js "none"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RegistrationOptions : sig
  type t = [`RegistrationOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RegistrationOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RegistrationOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RegistrationOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_scope: 'tags this -> string option [@@js.get "scope"]
  val set_scope: 'tags this -> string -> unit [@@js.set "scope"]
  val get_type: 'tags this -> WorkerType.t option [@@js.get "type"]
  val set_type: 'tags this -> WorkerType.t -> unit [@@js.set "type"]
  val get_updateViaCache: 'tags this -> ServiceWorkerUpdateViaCache.t option [@@js.get "updateViaCache"]
  val set_updateViaCache: 'tags this -> ServiceWorkerUpdateViaCache.t -> unit [@@js.set "updateViaCache"]
  val create: ?scope:string -> ?type_:(WorkerType.t[@js "type"]) -> ?updateViaCache:ServiceWorkerUpdateViaCache.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ServiceWorkerState : sig
  type t = ([`L_s118_activated[@js "activated"] | `L_s119_activating[@js "activating"] | `L_s522_installed[@js "installed"] | `L_s523_installing[@js "installing"] | `L_s726_parsed[@js "parsed"] | `L_s805_redundant[@js "redundant"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module ErrorEventInit : sig
  type t = [`ErrorEventInit | `EventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ErrorEventInit | `EventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ErrorEventInit | `EventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ErrorEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_colno: 'tags this -> float option [@@js.get "colno"]
  val set_colno: 'tags this -> float -> unit [@@js.set "colno"]
  val get_error: 'tags this -> any option [@@js.get "error"]
  val set_error: 'tags this -> any -> unit [@@js.set "error"]
  val get_filename: 'tags this -> string option [@@js.get "filename"]
  val set_filename: 'tags this -> string -> unit [@@js.set "filename"]
  val get_lineno: 'tags this -> float option [@@js.get "lineno"]
  val set_lineno: 'tags this -> float -> unit [@@js.set "lineno"]
  val get_message: 'tags this -> string option [@@js.get "message"]
  val set_message: 'tags this -> string -> unit [@@js.set "message"]
  val create: ?colno:float -> ?error:any -> ?filename:string -> ?lineno:float -> ?message:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Events providing information related to errors in scripts or in files.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ErrorEvent)
*)
module[@js.scope "ErrorEvent"] ErrorEvent : sig
  type t = [`ErrorEvent | `Event] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ErrorEvent | `Event]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ErrorEvent | `Event]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ErrorEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ErrorEvent/colno) *)
  val get_colno: 'tags this -> float [@@js.get "colno"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ErrorEvent/error) *)
  val get_error: 'tags this -> any [@@js.get "error"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ErrorEvent/filename) *)
  val get_filename: 'tags this -> string [@@js.get "filename"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ErrorEvent/lineno) *)
  val get_lineno: 'tags this -> float [@@js.get "lineno"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ErrorEvent/message) *)
  val get_message: 'tags this -> string [@@js.get "message"]
  val create: colno:float -> error:any -> filename:string -> lineno:float -> message:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> ?eventInitDict:ErrorEventInit.t -> unit -> t [@@js.create]
end
module AbstractWorker : sig
  type t = [`AbstractWorker] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AbstractWorker]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AbstractWorker]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AbstractWorker ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorker/error_event) *)
  val get_onerror: 'tags this -> (this:t -> ev:ErrorEvent.t -> any) option [@@js.get "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorker/error_event) *)
  val set_onerror: 'tags this -> (this:t -> ev:ErrorEvent.t -> any) option -> unit [@@js.set "onerror"]
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'AbstractWorkerEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'AbstractWorkerEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController) *)
module[@js.scope "TransformStreamDefaultController"] TransformStreamDefaultController : sig
  type 'O t = [`TransformStreamDefaultController of 'O] intf [@@js.custom { of_js=(fun _O -> Obj.magic); to_js=(fun _O -> Obj.magic) }]
  type t_0 = any t
  [@@@js.stop]
  type 'O tags = [`TransformStreamDefaultController of 'O]
  type tags_0 = any tags
  [@@@js.start]
  [@@@js.implem 
    type 'O tags = [`TransformStreamDefaultController of 'O]
    type tags_0 = any tags
  ]
  type ('tags, 'O) this = 'tags intf constraint 'tags = [> `TransformStreamDefaultController of 'O ]
  val t_to_js: ('O -> Ojs.t) -> 'O t -> Ojs.t
  val t_of_js: (Ojs.t -> 'O) -> Ojs.t -> 'O t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController/desiredSize) *)
  val get_desiredSize: ('tags, 'O) this -> float option [@@js.get "desiredSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController/enqueue) *)
  val enqueue: ('tags, 'O) this -> ?chunk:'O -> unit -> unit [@@js.call "enqueue"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController/error) *)
  val error: ('tags, 'O) this -> ?reason:any -> unit -> unit [@@js.call "error"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController/terminate) *)
  val terminate: ('tags, 'O) this -> unit [@@js.call "terminate"]
  val cast_from: ('tags, 'O) this -> 'O t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t_0 [@@js.get "prototype"]
  val create: unit -> t_0 [@@js.create]
end
module TransformerTransformCallback : sig
  type ('I, 'O) t = [`TransformerTransformCallback of ('I * 'O)] intf [@@js.custom { of_js=(fun _I _O -> Obj.magic); to_js=(fun _I _O -> Obj.magic) }]
  [@@@js.stop]
  type ('I, 'O) tags = [`TransformerTransformCallback of ('I * 'O)]
  [@@@js.start]
  [@@@js.implem 
    type ('I, 'O) tags = [`TransformerTransformCallback of ('I * 'O)]
  ]
  type ('tags, 'I, 'O) this = 'tags intf constraint 'tags = [> `TransformerTransformCallback of ('I * 'O) ]
  val t_to_js: ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t -> Ojs.t
  val t_of_js: (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t
  val apply: ('tags, 'I, 'O) this -> chunk:'I -> controller:'O TransformStreamDefaultController.t -> (unit, unit PromiseLike.t) union2 [@@js.apply]
  val cast_from: ('tags, 'I, 'O) this -> ('I, 'O) t [@@js.custom let cast_from = Obj.magic]
end
module TransformerStartCallback : sig
  type 'O t = [`TransformerStartCallback of 'O] intf [@@js.custom { of_js=(fun _O -> Obj.magic); to_js=(fun _O -> Obj.magic) }]
  [@@@js.stop]
  type 'O tags = [`TransformerStartCallback of 'O]
  [@@@js.start]
  [@@@js.implem 
    type 'O tags = [`TransformerStartCallback of 'O]
  ]
  type ('tags, 'O) this = 'tags intf constraint 'tags = [> `TransformerStartCallback of 'O ]
  val t_to_js: ('O -> Ojs.t) -> 'O t -> Ojs.t
  val t_of_js: (Ojs.t -> 'O) -> Ojs.t -> 'O t
  val apply: ('tags, 'O) this -> controller:'O TransformStreamDefaultController.t -> any [@@js.apply]
  val cast_from: ('tags, 'O) this -> 'O t [@@js.custom let cast_from = Obj.magic]
end
module TransformerFlushCallback : sig
  type 'O t = [`TransformerFlushCallback of 'O] intf [@@js.custom { of_js=(fun _O -> Obj.magic); to_js=(fun _O -> Obj.magic) }]
  [@@@js.stop]
  type 'O tags = [`TransformerFlushCallback of 'O]
  [@@@js.start]
  [@@@js.implem 
    type 'O tags = [`TransformerFlushCallback of 'O]
  ]
  type ('tags, 'O) this = 'tags intf constraint 'tags = [> `TransformerFlushCallback of 'O ]
  val t_to_js: ('O -> Ojs.t) -> 'O t -> Ojs.t
  val t_of_js: (Ojs.t -> 'O) -> Ojs.t -> 'O t
  val apply: ('tags, 'O) this -> controller:'O TransformStreamDefaultController.t -> (unit, unit PromiseLike.t) union2 [@@js.apply]
  val cast_from: ('tags, 'O) this -> 'O t [@@js.custom let cast_from = Obj.magic]
end
module Transformer : sig
  type ('I, 'O) t = [`Transformer of ('I * 'O)] intf [@@js.custom { of_js=(fun _I _O -> Obj.magic); to_js=(fun _I _O -> Obj.magic) }]
  type 'I t_1 = ('I, any) t
  type t_0 = (any, any) t
  [@@@js.stop]
  type ('I, 'O) tags = [`Transformer of ('I * 'O)]
  type 'I tags_1 = ('I, any) tags
  type tags_0 = (any, any) tags
  [@@@js.start]
  [@@@js.implem 
    type ('I, 'O) tags = [`Transformer of ('I * 'O)]
    type 'I tags_1 = ('I, any) tags
    type tags_0 = (any, any) tags
  ]
  type ('tags, 'I, 'O) this = 'tags intf constraint 'tags = [> `Transformer of ('I * 'O) ]
  val t_to_js: ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t -> Ojs.t
  val t_of_js: (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t
  val t_1_to_js: ('I -> Ojs.t) -> 'I t_1 -> Ojs.t
  val t_1_of_js: (Ojs.t -> 'I) -> Ojs.t -> 'I t_1
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val get_flush: ('tags, 'I, 'O) this -> 'O TransformerFlushCallback.t option [@@js.get "flush"]
  val set_flush: ('tags, 'I, 'O) this -> 'O TransformerFlushCallback.t -> unit [@@js.set "flush"]
  val get_readableType: ('tags, 'I, 'O) this -> undefined [@@js.get "readableType"]
  val set_readableType: ('tags, 'I, 'O) this -> undefined -> unit [@@js.set "readableType"]
  val get_start: ('tags, 'I, 'O) this -> 'O TransformerStartCallback.t option [@@js.get "start"]
  val set_start: ('tags, 'I, 'O) this -> 'O TransformerStartCallback.t -> unit [@@js.set "start"]
  val get_transform: ('tags, 'I, 'O) this -> ('I, 'O) TransformerTransformCallback.t option [@@js.get "transform"]
  val set_transform: ('tags, 'I, 'O) this -> ('I, 'O) TransformerTransformCallback.t -> unit [@@js.set "transform"]
  val get_writableType: ('tags, 'I, 'O) this -> undefined [@@js.get "writableType"]
  val set_writableType: ('tags, 'I, 'O) this -> undefined -> unit [@@js.set "writableType"]
  val create: ?flush:'O TransformerFlushCallback.t -> ?readableType:never -> ?start:'O TransformerStartCallback.t -> ?transform:('I, 'O) TransformerTransformCallback.t -> ?writableType:never -> unit -> ('I, 'O) t [@@js.builder]
  val cast_from: ('tags, 'I, 'O) this -> ('I, 'O) t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TransformStream) *)
module[@js.scope "TransformStream"] TransformStream : sig
  type ('I, 'O) t = [`TransformStream of ('I * 'O)] intf [@@js.custom { of_js=(fun _I _O -> Obj.magic); to_js=(fun _I _O -> Obj.magic) }]
  type 'I t_1 = ('I, any) t
  type t_0 = (any, any) t
  [@@@js.stop]
  type ('I, 'O) tags = [`TransformStream of ('I * 'O)]
  type 'I tags_1 = ('I, any) tags
  type tags_0 = (any, any) tags
  [@@@js.start]
  [@@@js.implem 
    type ('I, 'O) tags = [`TransformStream of ('I * 'O)]
    type 'I tags_1 = ('I, any) tags
    type tags_0 = (any, any) tags
  ]
  type ('tags, 'I, 'O) this = 'tags intf constraint 'tags = [> `TransformStream of ('I * 'O) ]
  val t_to_js: ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t -> Ojs.t
  val t_of_js: (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t
  val t_1_to_js: ('I -> Ojs.t) -> 'I t_1 -> Ojs.t
  val t_1_of_js: (Ojs.t -> 'I) -> Ojs.t -> 'I t_1
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TransformStream/readable) *)
  val get_readable: ('tags, 'I, 'O) this -> 'O ReadableStream.t [@@js.get "readable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TransformStream/writable) *)
  val get_writable: ('tags, 'I, 'O) this -> 'I WritableStream.t [@@js.get "writable"]
  val create: readable:'O ReadableStream.t -> writable:'I WritableStream.t -> unit -> ('I, 'O) t [@@js.builder]
  val cast_from: ('tags, 'I, 'O) this -> ('I, 'O) t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t_0 [@@js.get "prototype"]
  val create': ?transformer:('I, 'O) Transformer.t -> ?writableStrategy:'I QueuingStrategy.t -> ?readableStrategy:'O QueuingStrategy.t -> unit -> ('I, 'O) t [@@js.create]
end
module OffscreenRenderingContextId : sig
  type t = ([`L_s1048_webgl[@js "webgl"] | `L_s1049_webgl2[@js "webgl2"] | `L_s1050_webgpu[@js "webgpu"] | `L_s1_2d[@js "2d"] | `L_s201_bitmaprenderer[@js "bitmaprenderer"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module ImageEncodeOptions : sig
  type t = [`ImageEncodeOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ImageEncodeOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ImageEncodeOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ImageEncodeOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_quality: 'tags this -> float option [@@js.get "quality"]
  val set_quality: 'tags this -> float -> unit [@@js.set "quality"]
  val get_type: 'tags this -> string option [@@js.get "type"]
  val set_type: 'tags this -> string -> unit [@@js.set "type"]
  val create: ?quality:float -> ?type_:(string[@js "type"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module GLint : sig
  type t = float
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  Part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getShaderPrecisionFormat() method.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLShaderPrecisionFormat)
*)
module[@js.scope "WebGLShaderPrecisionFormat"] WebGLShaderPrecisionFormat : sig
  type t = [`WebGLShaderPrecisionFormat] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLShaderPrecisionFormat]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLShaderPrecisionFormat]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLShaderPrecisionFormat ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLShaderPrecisionFormat/precision) *)
  val get_precision: 'tags this -> GLint.t [@@js.get "precision"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLShaderPrecisionFormat/rangeMax) *)
  val get_rangeMax: 'tags this -> GLint.t [@@js.get "rangeMax"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLShaderPrecisionFormat/rangeMin) *)
  val get_rangeMin: 'tags this -> GLint.t [@@js.get "rangeMin"]
  val create: precision:GLint.t -> rangeMax:GLint.t -> rangeMin:GLint.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(**
  Part of the WebGL API and represents a buffer that can contain an image, or can be source or target of an rendering operation.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderbuffer)
*)
module[@js.scope "WebGLRenderbuffer"] WebGLRenderbuffer : sig
  type t = [`WebGLRenderbuffer] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLRenderbuffer]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLRenderbuffer]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLRenderbuffer ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Part of the WebGL API and represents a collection of buffers that serve as a rendering destination.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLFramebuffer)
*)
module[@js.scope "WebGLFramebuffer"] WebGLFramebuffer : sig
  type t = [`WebGLFramebuffer] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLFramebuffer]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLFramebuffer]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLFramebuffer ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module WebGLPowerPreference : sig
  type t = ([`L_s305_default[@js "default"] | `L_s480_high_performance[@js "high-performance"] | `L_s583_low_power[@js "low-power"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module WebGLContextAttributes : sig
  type t = [`WebGLContextAttributes] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLContextAttributes]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLContextAttributes]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLContextAttributes ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_alpha: 'tags this -> bool option [@@js.get "alpha"]
  val set_alpha: 'tags this -> bool -> unit [@@js.set "alpha"]
  val get_antialias: 'tags this -> bool option [@@js.get "antialias"]
  val set_antialias: 'tags this -> bool -> unit [@@js.set "antialias"]
  val get_depth: 'tags this -> bool option [@@js.get "depth"]
  val set_depth: 'tags this -> bool -> unit [@@js.set "depth"]
  val get_desynchronized: 'tags this -> bool option [@@js.get "desynchronized"]
  val set_desynchronized: 'tags this -> bool -> unit [@@js.set "desynchronized"]
  val get_failIfMajorPerformanceCaveat: 'tags this -> bool option [@@js.get "failIfMajorPerformanceCaveat"]
  val set_failIfMajorPerformanceCaveat: 'tags this -> bool -> unit [@@js.set "failIfMajorPerformanceCaveat"]
  val get_powerPreference: 'tags this -> WebGLPowerPreference.t option [@@js.get "powerPreference"]
  val set_powerPreference: 'tags this -> WebGLPowerPreference.t -> unit [@@js.set "powerPreference"]
  val get_premultipliedAlpha: 'tags this -> bool option [@@js.get "premultipliedAlpha"]
  val set_premultipliedAlpha: 'tags this -> bool -> unit [@@js.set "premultipliedAlpha"]
  val get_preserveDrawingBuffer: 'tags this -> bool option [@@js.get "preserveDrawingBuffer"]
  val set_preserveDrawingBuffer: 'tags this -> bool -> unit [@@js.set "preserveDrawingBuffer"]
  val get_stencil: 'tags this -> bool option [@@js.get "stencil"]
  val set_stencil: 'tags this -> bool -> unit [@@js.set "stencil"]
  val create: ?alpha:bool -> ?antialias:bool -> ?depth:bool -> ?desynchronized:bool -> ?failIfMajorPerformanceCaveat:bool -> ?powerPreference:WebGLPowerPreference.t -> ?premultipliedAlpha:bool -> ?preserveDrawingBuffer:bool -> ?stencil:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module GLsizei : sig
  type t = float
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module GLenum : sig
  type t = float
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw) *)
module WEBGL_multi_draw : sig
  type t = [`WEBGL_multi_draw] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WEBGL_multi_draw]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WEBGL_multi_draw]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_multi_draw ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawArraysInstancedWEBGL) *)
  val multiDrawArraysInstancedWEBGL: 'tags this -> mode:GLenum.t -> firstsList:([`U1 of Int32Array.t | `U2 of GLint.t Iterable.t] [@js.union]) -> firstsOffset:float -> countsList:([`U1 of Int32Array.t | `U2 of GLsizei.t Iterable.t] [@js.union]) -> countsOffset:float -> instanceCountsList:([`U1 of Int32Array.t | `U2 of GLsizei.t Iterable.t] [@js.union]) -> instanceCountsOffset:float -> drawcount:GLsizei.t -> unit [@@js.call "multiDrawArraysInstancedWEBGL"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawArraysWEBGL) *)
  val multiDrawArraysWEBGL: 'tags this -> mode:GLenum.t -> firstsList:([`U1 of Int32Array.t | `U2 of GLint.t Iterable.t] [@js.union]) -> firstsOffset:float -> countsList:([`U1 of Int32Array.t | `U2 of GLsizei.t Iterable.t] [@js.union]) -> countsOffset:float -> drawcount:GLsizei.t -> unit [@@js.call "multiDrawArraysWEBGL"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawElementsInstancedWEBGL) *)
  val multiDrawElementsInstancedWEBGL: 'tags this -> mode:GLenum.t -> countsList:([`U1 of Int32Array.t | `U2 of GLsizei.t Iterable.t] [@js.union]) -> countsOffset:float -> type_:GLenum.t -> offsetsList:([`U1 of Int32Array.t | `U2 of GLsizei.t Iterable.t] [@js.union]) -> offsetsOffset:float -> instanceCountsList:([`U1 of Int32Array.t | `U2 of GLsizei.t Iterable.t] [@js.union]) -> instanceCountsOffset:float -> drawcount:GLsizei.t -> unit [@@js.call "multiDrawElementsInstancedWEBGL"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawElementsWEBGL) *)
  val multiDrawElementsWEBGL: 'tags this -> mode:GLenum.t -> countsList:([`U1 of Int32Array.t | `U2 of GLsizei.t Iterable.t] [@js.union]) -> countsOffset:float -> type_:GLenum.t -> offsetsList:([`U1 of Int32Array.t | `U2 of GLsizei.t Iterable.t] [@js.union]) -> offsetsOffset:float -> drawcount:GLsizei.t -> unit [@@js.call "multiDrawElementsWEBGL"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawArraysInstancedWEBGL) *)
  val multiDrawArraysInstancedWEBGL': 'tags this -> mode:GLenum.t -> firstsList:([`U1 of Int32Array.t | `U2 of GLint.t list] [@js.union]) -> firstsOffset:float -> countsList:([`U1 of Int32Array.t | `U2 of GLsizei.t list] [@js.union]) -> countsOffset:float -> instanceCountsList:([`U1 of Int32Array.t | `U2 of GLsizei.t list] [@js.union]) -> instanceCountsOffset:float -> drawcount:GLsizei.t -> unit [@@js.call "multiDrawArraysInstancedWEBGL"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawArraysWEBGL) *)
  val multiDrawArraysWEBGL': 'tags this -> mode:GLenum.t -> firstsList:([`U1 of Int32Array.t | `U2 of GLint.t list] [@js.union]) -> firstsOffset:float -> countsList:([`U1 of Int32Array.t | `U2 of GLsizei.t list] [@js.union]) -> countsOffset:float -> drawcount:GLsizei.t -> unit [@@js.call "multiDrawArraysWEBGL"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawElementsInstancedWEBGL) *)
  val multiDrawElementsInstancedWEBGL': 'tags this -> mode:GLenum.t -> countsList:([`U1 of Int32Array.t | `U2 of GLsizei.t list] [@js.union]) -> countsOffset:float -> type_:GLenum.t -> offsetsList:([`U1 of Int32Array.t | `U2 of GLsizei.t list] [@js.union]) -> offsetsOffset:float -> instanceCountsList:([`U1 of Int32Array.t | `U2 of GLsizei.t list] [@js.union]) -> instanceCountsOffset:float -> drawcount:GLsizei.t -> unit [@@js.call "multiDrawElementsInstancedWEBGL"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawElementsWEBGL) *)
  val multiDrawElementsWEBGL': 'tags this -> mode:GLenum.t -> countsList:([`U1 of Int32Array.t | `U2 of GLsizei.t list] [@js.union]) -> countsOffset:float -> type_:GLenum.t -> offsetsList:([`U1 of Int32Array.t | `U2 of GLsizei.t list] [@js.union]) -> offsetsOffset:float -> drawcount:GLsizei.t -> unit [@@js.call "multiDrawElementsWEBGL"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_lose_context) *)
module WEBGL_lose_context : sig
  type t = [`WEBGL_lose_context] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WEBGL_lose_context]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WEBGL_lose_context]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_lose_context ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_lose_context/loseContext) *)
  val loseContext: 'tags this -> unit [@@js.call "loseContext"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_lose_context/restoreContext) *)
  val restoreContext: 'tags this -> unit [@@js.call "restoreContext"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_draw_buffers) *)
module WEBGL_draw_buffers : sig
  type t = [`WEBGL_draw_buffers] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WEBGL_draw_buffers]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WEBGL_draw_buffers]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_draw_buffers ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_draw_buffers/drawBuffersWEBGL) *)
  val drawBuffersWEBGL: 'tags this -> buffers:GLenum.t Iterable.t -> unit [@@js.call "drawBuffersWEBGL"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_draw_buffers/drawBuffersWEBGL) *)
  val drawBuffersWEBGL': 'tags this -> buffers:GLenum.t list -> unit [@@js.call "drawBuffersWEBGL"]
  val get_COLOR_ATTACHMENT0_WEBGL: 'tags this -> ([`L_n_36064[@js 36064]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT0_WEBGL"]
  val get_COLOR_ATTACHMENT1_WEBGL: 'tags this -> ([`L_n_36065[@js 36065]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT1_WEBGL"]
  val get_COLOR_ATTACHMENT2_WEBGL: 'tags this -> ([`L_n_36066[@js 36066]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT2_WEBGL"]
  val get_COLOR_ATTACHMENT3_WEBGL: 'tags this -> ([`L_n_36067[@js 36067]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT3_WEBGL"]
  val get_COLOR_ATTACHMENT4_WEBGL: 'tags this -> ([`L_n_36068[@js 36068]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT4_WEBGL"]
  val get_COLOR_ATTACHMENT5_WEBGL: 'tags this -> ([`L_n_36069[@js 36069]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT5_WEBGL"]
  val get_COLOR_ATTACHMENT6_WEBGL: 'tags this -> ([`L_n_36070[@js 36070]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT6_WEBGL"]
  val get_COLOR_ATTACHMENT7_WEBGL: 'tags this -> ([`L_n_36071[@js 36071]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT7_WEBGL"]
  val get_COLOR_ATTACHMENT8_WEBGL: 'tags this -> ([`L_n_36072[@js 36072]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT8_WEBGL"]
  val get_COLOR_ATTACHMENT9_WEBGL: 'tags this -> ([`L_n_36073[@js 36073]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT9_WEBGL"]
  val get_COLOR_ATTACHMENT10_WEBGL: 'tags this -> ([`L_n_36074[@js 36074]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT10_WEBGL"]
  val get_COLOR_ATTACHMENT11_WEBGL: 'tags this -> ([`L_n_36075[@js 36075]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT11_WEBGL"]
  val get_COLOR_ATTACHMENT12_WEBGL: 'tags this -> ([`L_n_36076[@js 36076]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT12_WEBGL"]
  val get_COLOR_ATTACHMENT13_WEBGL: 'tags this -> ([`L_n_36077[@js 36077]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT13_WEBGL"]
  val get_COLOR_ATTACHMENT14_WEBGL: 'tags this -> ([`L_n_36078[@js 36078]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT14_WEBGL"]
  val get_COLOR_ATTACHMENT15_WEBGL: 'tags this -> ([`L_n_36079[@js 36079]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT15_WEBGL"]
  val get_DRAW_BUFFER0_WEBGL: 'tags this -> ([`L_n_34853[@js 34853]] [@js.enum]) [@@js.get "DRAW_BUFFER0_WEBGL"]
  val get_DRAW_BUFFER1_WEBGL: 'tags this -> ([`L_n_34854[@js 34854]] [@js.enum]) [@@js.get "DRAW_BUFFER1_WEBGL"]
  val get_DRAW_BUFFER2_WEBGL: 'tags this -> ([`L_n_34855[@js 34855]] [@js.enum]) [@@js.get "DRAW_BUFFER2_WEBGL"]
  val get_DRAW_BUFFER3_WEBGL: 'tags this -> ([`L_n_34856[@js 34856]] [@js.enum]) [@@js.get "DRAW_BUFFER3_WEBGL"]
  val get_DRAW_BUFFER4_WEBGL: 'tags this -> ([`L_n_34857[@js 34857]] [@js.enum]) [@@js.get "DRAW_BUFFER4_WEBGL"]
  val get_DRAW_BUFFER5_WEBGL: 'tags this -> ([`L_n_34858[@js 34858]] [@js.enum]) [@@js.get "DRAW_BUFFER5_WEBGL"]
  val get_DRAW_BUFFER6_WEBGL: 'tags this -> ([`L_n_34859[@js 34859]] [@js.enum]) [@@js.get "DRAW_BUFFER6_WEBGL"]
  val get_DRAW_BUFFER7_WEBGL: 'tags this -> ([`L_n_34860[@js 34860]] [@js.enum]) [@@js.get "DRAW_BUFFER7_WEBGL"]
  val get_DRAW_BUFFER8_WEBGL: 'tags this -> ([`L_n_34861[@js 34861]] [@js.enum]) [@@js.get "DRAW_BUFFER8_WEBGL"]
  val get_DRAW_BUFFER9_WEBGL: 'tags this -> ([`L_n_34862[@js 34862]] [@js.enum]) [@@js.get "DRAW_BUFFER9_WEBGL"]
  val get_DRAW_BUFFER10_WEBGL: 'tags this -> ([`L_n_34863[@js 34863]] [@js.enum]) [@@js.get "DRAW_BUFFER10_WEBGL"]
  val get_DRAW_BUFFER11_WEBGL: 'tags this -> ([`L_n_34864[@js 34864]] [@js.enum]) [@@js.get "DRAW_BUFFER11_WEBGL"]
  val get_DRAW_BUFFER12_WEBGL: 'tags this -> ([`L_n_34865[@js 34865]] [@js.enum]) [@@js.get "DRAW_BUFFER12_WEBGL"]
  val get_DRAW_BUFFER13_WEBGL: 'tags this -> ([`L_n_34866[@js 34866]] [@js.enum]) [@@js.get "DRAW_BUFFER13_WEBGL"]
  val get_DRAW_BUFFER14_WEBGL: 'tags this -> ([`L_n_34867[@js 34867]] [@js.enum]) [@@js.get "DRAW_BUFFER14_WEBGL"]
  val get_DRAW_BUFFER15_WEBGL: 'tags this -> ([`L_n_34868[@js 34868]] [@js.enum]) [@@js.get "DRAW_BUFFER15_WEBGL"]
  val get_MAX_COLOR_ATTACHMENTS_WEBGL: 'tags this -> ([`L_n_36063[@js 36063]] [@js.enum]) [@@js.get "MAX_COLOR_ATTACHMENTS_WEBGL"]
  val get_MAX_DRAW_BUFFERS_WEBGL: 'tags this -> ([`L_n_34852[@js 34852]] [@js.enum]) [@@js.get "MAX_DRAW_BUFFERS_WEBGL"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The WEBGL_depth_texture extension is part of the WebGL API and defines 2D depth and depth-stencil textures.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_depth_texture)
*)
module WEBGL_depth_texture : sig
  type t = [`WEBGL_depth_texture] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WEBGL_depth_texture]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WEBGL_depth_texture]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_depth_texture ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_UNSIGNED_INT_24_8_WEBGL: 'tags this -> ([`L_n_34042[@js 34042]] [@js.enum]) [@@js.get "UNSIGNED_INT_24_8_WEBGL"]
  val create: unsigned_int_24_8_webgl:(([`L_n_34042[@js 34042]] [@js.enum])[@js "UNSIGNED_INT_24_8_WEBGL"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The WebGLShader is part of the WebGL API and can either be a vertex or a fragment shader. A WebGLProgram requires both types of shaders.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLShader)
*)
module[@js.scope "WebGLShader"] WebGLShader : sig
  type t = [`WebGLShader] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLShader]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLShader]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLShader ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_debug_shaders) *)
module WEBGL_debug_shaders : sig
  type t = [`WEBGL_debug_shaders] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WEBGL_debug_shaders]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WEBGL_debug_shaders]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_debug_shaders ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_debug_shaders/getTranslatedShaderSource) *)
  val getTranslatedShaderSource: 'tags this -> shader:WebGLShader.t -> string [@@js.call "getTranslatedShaderSource"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The WEBGL_debug_renderer_info extension is part of the WebGL API and exposes two constants with information about the graphics driver for debugging purposes.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_debug_renderer_info)
*)
module WEBGL_debug_renderer_info : sig
  type t = [`WEBGL_debug_renderer_info] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WEBGL_debug_renderer_info]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WEBGL_debug_renderer_info]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_debug_renderer_info ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_UNMASKED_VENDOR_WEBGL: 'tags this -> ([`L_n_37445[@js 37445]] [@js.enum]) [@@js.get "UNMASKED_VENDOR_WEBGL"]
  val get_UNMASKED_RENDERER_WEBGL: 'tags this -> ([`L_n_37446[@js 37446]] [@js.enum]) [@@js.get "UNMASKED_RENDERER_WEBGL"]
  val create: unmasked_vendor_webgl:(([`L_n_37445[@js 37445]] [@js.enum])[@js "UNMASKED_VENDOR_WEBGL"]) -> unmasked_renderer_webgl:(([`L_n_37446[@js 37446]] [@js.enum])[@js "UNMASKED_RENDERER_WEBGL"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_s3tc_srgb) *)
module WEBGL_compressed_texture_s3tc_srgb : sig
  type t = [`WEBGL_compressed_texture_s3tc_srgb] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WEBGL_compressed_texture_s3tc_srgb]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WEBGL_compressed_texture_s3tc_srgb]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_compressed_texture_s3tc_srgb ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_COMPRESSED_SRGB_S3TC_DXT1_EXT: 'tags this -> ([`L_n_35916[@js 35916]] [@js.enum]) [@@js.get "COMPRESSED_SRGB_S3TC_DXT1_EXT"]
  val get_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT: 'tags this -> ([`L_n_35917[@js 35917]] [@js.enum]) [@@js.get "COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT"]
  val get_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT: 'tags this -> ([`L_n_35918[@js 35918]] [@js.enum]) [@@js.get "COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT"]
  val get_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT: 'tags this -> ([`L_n_35919[@js 35919]] [@js.enum]) [@@js.get "COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT"]
  val create: compressed_srgb_s3tc_dxt1_ext:(([`L_n_35916[@js 35916]] [@js.enum])[@js "COMPRESSED_SRGB_S3TC_DXT1_EXT"]) -> compressed_srgb_alpha_s3tc_dxt1_ext:(([`L_n_35917[@js 35917]] [@js.enum])[@js "COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT"]) -> compressed_srgb_alpha_s3tc_dxt3_ext:(([`L_n_35918[@js 35918]] [@js.enum])[@js "COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT"]) -> compressed_srgb_alpha_s3tc_dxt5_ext:(([`L_n_35919[@js 35919]] [@js.enum])[@js "COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The WEBGL_compressed_texture_s3tc extension is part of the WebGL API and exposes four S3TC compressed texture formats.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_s3tc)
*)
module WEBGL_compressed_texture_s3tc : sig
  type t = [`WEBGL_compressed_texture_s3tc] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WEBGL_compressed_texture_s3tc]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WEBGL_compressed_texture_s3tc]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_compressed_texture_s3tc ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_COMPRESSED_RGB_S3TC_DXT1_EXT: 'tags this -> ([`L_n_33776[@js 33776]] [@js.enum]) [@@js.get "COMPRESSED_RGB_S3TC_DXT1_EXT"]
  val get_COMPRESSED_RGBA_S3TC_DXT1_EXT: 'tags this -> ([`L_n_33777[@js 33777]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_S3TC_DXT1_EXT"]
  val get_COMPRESSED_RGBA_S3TC_DXT3_EXT: 'tags this -> ([`L_n_33778[@js 33778]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_S3TC_DXT3_EXT"]
  val get_COMPRESSED_RGBA_S3TC_DXT5_EXT: 'tags this -> ([`L_n_33779[@js 33779]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_S3TC_DXT5_EXT"]
  val create: compressed_rgb_s3tc_dxt1_ext:(([`L_n_33776[@js 33776]] [@js.enum])[@js "COMPRESSED_RGB_S3TC_DXT1_EXT"]) -> compressed_rgba_s3tc_dxt1_ext:(([`L_n_33777[@js 33777]] [@js.enum])[@js "COMPRESSED_RGBA_S3TC_DXT1_EXT"]) -> compressed_rgba_s3tc_dxt3_ext:(([`L_n_33778[@js 33778]] [@js.enum])[@js "COMPRESSED_RGBA_S3TC_DXT3_EXT"]) -> compressed_rgba_s3tc_dxt5_ext:(([`L_n_33779[@js 33779]] [@js.enum])[@js "COMPRESSED_RGBA_S3TC_DXT5_EXT"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_pvrtc) *)
module WEBGL_compressed_texture_pvrtc : sig
  type t = [`WEBGL_compressed_texture_pvrtc] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WEBGL_compressed_texture_pvrtc]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WEBGL_compressed_texture_pvrtc]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_compressed_texture_pvrtc ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_COMPRESSED_RGB_PVRTC_4BPPV1_IMG: 'tags this -> ([`L_n_35840[@js 35840]] [@js.enum]) [@@js.get "COMPRESSED_RGB_PVRTC_4BPPV1_IMG"]
  val get_COMPRESSED_RGB_PVRTC_2BPPV1_IMG: 'tags this -> ([`L_n_35841[@js 35841]] [@js.enum]) [@@js.get "COMPRESSED_RGB_PVRTC_2BPPV1_IMG"]
  val get_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG: 'tags this -> ([`L_n_35842[@js 35842]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG"]
  val get_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG: 'tags this -> ([`L_n_35843[@js 35843]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG"]
  val create: compressed_rgb_pvrtc_4bppv1_img:(([`L_n_35840[@js 35840]] [@js.enum])[@js "COMPRESSED_RGB_PVRTC_4BPPV1_IMG"]) -> compressed_rgb_pvrtc_2bppv1_img:(([`L_n_35841[@js 35841]] [@js.enum])[@js "COMPRESSED_RGB_PVRTC_2BPPV1_IMG"]) -> compressed_rgba_pvrtc_4bppv1_img:(([`L_n_35842[@js 35842]] [@js.enum])[@js "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG"]) -> compressed_rgba_pvrtc_2bppv1_img:(([`L_n_35843[@js 35843]] [@js.enum])[@js "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_etc1) *)
module WEBGL_compressed_texture_etc1 : sig
  type t = [`WEBGL_compressed_texture_etc1] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WEBGL_compressed_texture_etc1]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WEBGL_compressed_texture_etc1]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_compressed_texture_etc1 ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_COMPRESSED_RGB_ETC1_WEBGL: 'tags this -> ([`L_n_36196[@js 36196]] [@js.enum]) [@@js.get "COMPRESSED_RGB_ETC1_WEBGL"]
  val create: compressed_rgb_etc1_webgl:(([`L_n_36196[@js 36196]] [@js.enum])[@js "COMPRESSED_RGB_ETC1_WEBGL"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_etc) *)
module WEBGL_compressed_texture_etc : sig
  type t = [`WEBGL_compressed_texture_etc] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WEBGL_compressed_texture_etc]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WEBGL_compressed_texture_etc]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_compressed_texture_etc ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_COMPRESSED_R11_EAC: 'tags this -> ([`L_n_37488[@js 37488]] [@js.enum]) [@@js.get "COMPRESSED_R11_EAC"]
  val get_COMPRESSED_SIGNED_R11_EAC: 'tags this -> ([`L_n_37489[@js 37489]] [@js.enum]) [@@js.get "COMPRESSED_SIGNED_R11_EAC"]
  val get_COMPRESSED_RG11_EAC: 'tags this -> ([`L_n_37490[@js 37490]] [@js.enum]) [@@js.get "COMPRESSED_RG11_EAC"]
  val get_COMPRESSED_SIGNED_RG11_EAC: 'tags this -> ([`L_n_37491[@js 37491]] [@js.enum]) [@@js.get "COMPRESSED_SIGNED_RG11_EAC"]
  val get_COMPRESSED_RGB8_ETC2: 'tags this -> ([`L_n_37492[@js 37492]] [@js.enum]) [@@js.get "COMPRESSED_RGB8_ETC2"]
  val get_COMPRESSED_SRGB8_ETC2: 'tags this -> ([`L_n_37493[@js 37493]] [@js.enum]) [@@js.get "COMPRESSED_SRGB8_ETC2"]
  val get_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: 'tags this -> ([`L_n_37494[@js 37494]] [@js.enum]) [@@js.get "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2"]
  val get_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: 'tags this -> ([`L_n_37495[@js 37495]] [@js.enum]) [@@js.get "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2"]
  val get_COMPRESSED_RGBA8_ETC2_EAC: 'tags this -> ([`L_n_37496[@js 37496]] [@js.enum]) [@@js.get "COMPRESSED_RGBA8_ETC2_EAC"]
  val get_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: 'tags this -> ([`L_n_37497[@js 37497]] [@js.enum]) [@@js.get "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC"]
  val create: compressed_r11_eac:(([`L_n_37488[@js 37488]] [@js.enum])[@js "COMPRESSED_R11_EAC"]) -> compressed_signed_r11_eac:(([`L_n_37489[@js 37489]] [@js.enum])[@js "COMPRESSED_SIGNED_R11_EAC"]) -> compressed_rg11_eac:(([`L_n_37490[@js 37490]] [@js.enum])[@js "COMPRESSED_RG11_EAC"]) -> compressed_signed_rg11_eac:(([`L_n_37491[@js 37491]] [@js.enum])[@js "COMPRESSED_SIGNED_RG11_EAC"]) -> compressed_rgb8_etc2:(([`L_n_37492[@js 37492]] [@js.enum])[@js "COMPRESSED_RGB8_ETC2"]) -> compressed_srgb8_etc2:(([`L_n_37493[@js 37493]] [@js.enum])[@js "COMPRESSED_SRGB8_ETC2"]) -> compressed_rgb8_punchthrough_alpha1_etc2:(([`L_n_37494[@js 37494]] [@js.enum])[@js "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2"]) -> compressed_srgb8_punchthrough_alpha1_etc2:(([`L_n_37495[@js 37495]] [@js.enum])[@js "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2"]) -> compressed_rgba8_etc2_eac:(([`L_n_37496[@js 37496]] [@js.enum])[@js "COMPRESSED_RGBA8_ETC2_EAC"]) -> compressed_srgb8_alpha8_etc2_eac:(([`L_n_37497[@js 37497]] [@js.enum])[@js "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_astc) *)
module WEBGL_compressed_texture_astc : sig
  type t = [`WEBGL_compressed_texture_astc] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WEBGL_compressed_texture_astc]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WEBGL_compressed_texture_astc]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_compressed_texture_astc ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_astc/getSupportedProfiles) *)
  val getSupportedProfiles: 'tags this -> string list [@@js.call "getSupportedProfiles"]
  val get_COMPRESSED_RGBA_ASTC_4x4_KHR: 'tags this -> ([`L_n_37808[@js 37808]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_ASTC_4x4_KHR"]
  val get_COMPRESSED_RGBA_ASTC_5x4_KHR: 'tags this -> ([`L_n_37809[@js 37809]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_ASTC_5x4_KHR"]
  val get_COMPRESSED_RGBA_ASTC_5x5_KHR: 'tags this -> ([`L_n_37810[@js 37810]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_ASTC_5x5_KHR"]
  val get_COMPRESSED_RGBA_ASTC_6x5_KHR: 'tags this -> ([`L_n_37811[@js 37811]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_ASTC_6x5_KHR"]
  val get_COMPRESSED_RGBA_ASTC_6x6_KHR: 'tags this -> ([`L_n_37812[@js 37812]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_ASTC_6x6_KHR"]
  val get_COMPRESSED_RGBA_ASTC_8x5_KHR: 'tags this -> ([`L_n_37813[@js 37813]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_ASTC_8x5_KHR"]
  val get_COMPRESSED_RGBA_ASTC_8x6_KHR: 'tags this -> ([`L_n_37814[@js 37814]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_ASTC_8x6_KHR"]
  val get_COMPRESSED_RGBA_ASTC_8x8_KHR: 'tags this -> ([`L_n_37815[@js 37815]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_ASTC_8x8_KHR"]
  val get_COMPRESSED_RGBA_ASTC_10x5_KHR: 'tags this -> ([`L_n_37816[@js 37816]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_ASTC_10x5_KHR"]
  val get_COMPRESSED_RGBA_ASTC_10x6_KHR: 'tags this -> ([`L_n_37817[@js 37817]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_ASTC_10x6_KHR"]
  val get_COMPRESSED_RGBA_ASTC_10x8_KHR: 'tags this -> ([`L_n_37818[@js 37818]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_ASTC_10x8_KHR"]
  val get_COMPRESSED_RGBA_ASTC_10x10_KHR: 'tags this -> ([`L_n_37819[@js 37819]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_ASTC_10x10_KHR"]
  val get_COMPRESSED_RGBA_ASTC_12x10_KHR: 'tags this -> ([`L_n_37820[@js 37820]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_ASTC_12x10_KHR"]
  val get_COMPRESSED_RGBA_ASTC_12x12_KHR: 'tags this -> ([`L_n_37821[@js 37821]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_ASTC_12x12_KHR"]
  val get_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR: 'tags this -> ([`L_n_37840[@js 37840]] [@js.enum]) [@@js.get "COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR"]
  val get_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR: 'tags this -> ([`L_n_37841[@js 37841]] [@js.enum]) [@@js.get "COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR"]
  val get_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR: 'tags this -> ([`L_n_37842[@js 37842]] [@js.enum]) [@@js.get "COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR"]
  val get_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR: 'tags this -> ([`L_n_37843[@js 37843]] [@js.enum]) [@@js.get "COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR"]
  val get_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR: 'tags this -> ([`L_n_37844[@js 37844]] [@js.enum]) [@@js.get "COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR"]
  val get_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR: 'tags this -> ([`L_n_37845[@js 37845]] [@js.enum]) [@@js.get "COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR"]
  val get_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR: 'tags this -> ([`L_n_37846[@js 37846]] [@js.enum]) [@@js.get "COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR"]
  val get_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR: 'tags this -> ([`L_n_37847[@js 37847]] [@js.enum]) [@@js.get "COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR"]
  val get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR: 'tags this -> ([`L_n_37848[@js 37848]] [@js.enum]) [@@js.get "COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR"]
  val get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR: 'tags this -> ([`L_n_37849[@js 37849]] [@js.enum]) [@@js.get "COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR"]
  val get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR: 'tags this -> ([`L_n_37850[@js 37850]] [@js.enum]) [@@js.get "COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR"]
  val get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR: 'tags this -> ([`L_n_37851[@js 37851]] [@js.enum]) [@@js.get "COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR"]
  val get_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR: 'tags this -> ([`L_n_37852[@js 37852]] [@js.enum]) [@@js.get "COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR"]
  val get_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR: 'tags this -> ([`L_n_37853[@js 37853]] [@js.enum]) [@@js.get "COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WEBGL_color_buffer_float) *)
module WEBGL_color_buffer_float : sig
  type t = [`WEBGL_color_buffer_float] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WEBGL_color_buffer_float]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WEBGL_color_buffer_float]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_color_buffer_float ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_RGBA32F_EXT: 'tags this -> ([`L_n_34836[@js 34836]] [@js.enum]) [@@js.get "RGBA32F_EXT"]
  val get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: 'tags this -> ([`L_n_33297[@js 33297]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT"]
  val get_UNSIGNED_NORMALIZED_EXT: 'tags this -> ([`L_n_35863[@js 35863]] [@js.enum]) [@@js.get "UNSIGNED_NORMALIZED_EXT"]
  val create: rgba32f_ext:(([`L_n_34836[@js 34836]] [@js.enum])[@js "RGBA32F_EXT"]) -> framebuffer_attachment_component_type_ext:(([`L_n_33297[@js 33297]] [@js.enum])[@js "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT"]) -> unsigned_normalized_ext:(([`L_n_35863[@js 35863]] [@js.enum])[@js "UNSIGNED_NORMALIZED_EXT"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Part of the WebGL API and represents an opaque texture object providing storage and state for texturing operations.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLTexture)
*)
module[@js.scope "WebGLTexture"] WebGLTexture : sig
  type t = [`WebGLTexture] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLTexture]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLTexture]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLTexture ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OVR_multiview2) *)
module OVR_multiview2 : sig
  type t = [`OVR_multiview2] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`OVR_multiview2]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`OVR_multiview2]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OVR_multiview2 ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OVR_multiview2/framebufferTextureMultiviewOVR) *)
  val framebufferTextureMultiviewOVR: 'tags this -> target:GLenum.t -> attachment:GLenum.t -> texture:WebGLTexture.t option -> level:GLint.t -> baseViewIndex:GLint.t -> numViews:GLsizei.t -> unit [@@js.call "framebufferTextureMultiviewOVR"]
  val get_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR: 'tags this -> ([`L_n_38448[@js 38448]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR"]
  val get_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR: 'tags this -> ([`L_n_38450[@js 38450]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR"]
  val get_MAX_VIEWS_OVR: 'tags this -> ([`L_n_38449[@js 38449]] [@js.enum]) [@@js.get "MAX_VIEWS_OVR"]
  val get_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR: 'tags this -> ([`L_n_38451[@js 38451]] [@js.enum]) [@@js.get "FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLVertexArrayObjectOES) *)
module WebGLVertexArrayObjectOES : sig
  type t = [`WebGLVertexArrayObjectOES] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLVertexArrayObjectOES]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLVertexArrayObjectOES]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLVertexArrayObjectOES ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module GLboolean : sig
  type t = bool
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_vertex_array_object) *)
module OES_vertex_array_object : sig
  type t = [`OES_vertex_array_object] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`OES_vertex_array_object]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`OES_vertex_array_object]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OES_vertex_array_object ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_vertex_array_object/bindVertexArrayOES) *)
  val bindVertexArrayOES: 'tags this -> arrayObject:WebGLVertexArrayObjectOES.t option -> unit [@@js.call "bindVertexArrayOES"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_vertex_array_object/createVertexArrayOES) *)
  val createVertexArrayOES: 'tags this -> WebGLVertexArrayObjectOES.t option [@@js.call "createVertexArrayOES"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_vertex_array_object/deleteVertexArrayOES) *)
  val deleteVertexArrayOES: 'tags this -> arrayObject:WebGLVertexArrayObjectOES.t option -> unit [@@js.call "deleteVertexArrayOES"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_vertex_array_object/isVertexArrayOES) *)
  val isVertexArrayOES: 'tags this -> arrayObject:WebGLVertexArrayObjectOES.t option -> GLboolean.t [@@js.call "isVertexArrayOES"]
  val get_VERTEX_ARRAY_BINDING_OES: 'tags this -> ([`L_n_34229[@js 34229]] [@js.enum]) [@@js.get "VERTEX_ARRAY_BINDING_OES"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The OES_texture_half_float_linear extension is part of the WebGL API and allows linear filtering with half floating-point pixel types for textures.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_texture_half_float_linear)
*)
module OES_texture_half_float_linear : sig
  type t = [`OES_texture_half_float_linear] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`OES_texture_half_float_linear]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`OES_texture_half_float_linear]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OES_texture_half_float_linear ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The OES_texture_half_float extension is part of the WebGL API and adds texture formats with 16- (aka half float) and 32-bit floating-point components.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_texture_half_float)
*)
module OES_texture_half_float : sig
  type t = [`OES_texture_half_float] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`OES_texture_half_float]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`OES_texture_half_float]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OES_texture_half_float ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_HALF_FLOAT_OES: 'tags this -> ([`L_n_36193[@js 36193]] [@js.enum]) [@@js.get "HALF_FLOAT_OES"]
  val create: half_float_oes:(([`L_n_36193[@js 36193]] [@js.enum])[@js "HALF_FLOAT_OES"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The OES_texture_float_linear extension is part of the WebGL API and allows linear filtering with floating-point pixel types for textures.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_texture_float_linear)
*)
module OES_texture_float_linear : sig
  type t = [`OES_texture_float_linear] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`OES_texture_float_linear]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`OES_texture_float_linear]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OES_texture_float_linear ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The OES_texture_float extension is part of the WebGL API and exposes floating-point pixel types for textures.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_texture_float)
*)
module OES_texture_float : sig
  type t = [`OES_texture_float] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`OES_texture_float]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`OES_texture_float]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OES_texture_float ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The OES_standard_derivatives extension is part of the WebGL API and adds the GLSL derivative functions dFdx, dFdy, and fwidth.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_standard_derivatives)
*)
module OES_standard_derivatives : sig
  type t = [`OES_standard_derivatives] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`OES_standard_derivatives]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`OES_standard_derivatives]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OES_standard_derivatives ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_FRAGMENT_SHADER_DERIVATIVE_HINT_OES: 'tags this -> ([`L_n_35723[@js 35723]] [@js.enum]) [@@js.get "FRAGMENT_SHADER_DERIVATIVE_HINT_OES"]
  val create: fragment_shader_derivative_hint_oes:(([`L_n_35723[@js 35723]] [@js.enum])[@js "FRAGMENT_SHADER_DERIVATIVE_HINT_OES"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_fbo_render_mipmap) *)
module OES_fbo_render_mipmap : sig
  type t = [`OES_fbo_render_mipmap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`OES_fbo_render_mipmap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`OES_fbo_render_mipmap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OES_fbo_render_mipmap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The OES_element_index_uint extension is part of the WebGL API and adds support for gl.UNSIGNED_INT types to WebGLRenderingContext.drawElements().
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_element_index_uint)
*)
module OES_element_index_uint : sig
  type t = [`OES_element_index_uint] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`OES_element_index_uint]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`OES_element_index_uint]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OES_element_index_uint ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/KHR_parallel_shader_compile) *)
module KHR_parallel_shader_compile : sig
  type t = [`KHR_parallel_shader_compile] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`KHR_parallel_shader_compile]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`KHR_parallel_shader_compile]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `KHR_parallel_shader_compile ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_COMPLETION_STATUS_KHR: 'tags this -> ([`L_n_37297[@js 37297]] [@js.enum]) [@@js.get "COMPLETION_STATUS_KHR"]
  val create: completion_status_khr:(([`L_n_37297[@js 37297]] [@js.enum])[@js "COMPLETION_STATUS_KHR"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module GLclampf : sig
  type t = float
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  The EXT_texture_filter_anisotropic extension is part of the WebGL API and exposes two constants for anisotropic filtering (AF).
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EXT_texture_filter_anisotropic)
*)
module EXT_texture_filter_anisotropic : sig
  type t = [`EXT_texture_filter_anisotropic] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EXT_texture_filter_anisotropic]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EXT_texture_filter_anisotropic]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EXT_texture_filter_anisotropic ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_TEXTURE_MAX_ANISOTROPY_EXT: 'tags this -> ([`L_n_34046[@js 34046]] [@js.enum]) [@@js.get "TEXTURE_MAX_ANISOTROPY_EXT"]
  val get_MAX_TEXTURE_MAX_ANISOTROPY_EXT: 'tags this -> ([`L_n_34047[@js 34047]] [@js.enum]) [@@js.get "MAX_TEXTURE_MAX_ANISOTROPY_EXT"]
  val create: texture_max_anisotropy_ext:(([`L_n_34046[@js 34046]] [@js.enum])[@js "TEXTURE_MAX_ANISOTROPY_EXT"]) -> max_texture_max_anisotropy_ext:(([`L_n_34047[@js 34047]] [@js.enum])[@js "MAX_TEXTURE_MAX_ANISOTROPY_EXT"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EXT_texture_compression_rgtc) *)
module EXT_texture_compression_rgtc : sig
  type t = [`EXT_texture_compression_rgtc] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EXT_texture_compression_rgtc]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EXT_texture_compression_rgtc]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EXT_texture_compression_rgtc ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_COMPRESSED_RED_RGTC1_EXT: 'tags this -> ([`L_n_36283[@js 36283]] [@js.enum]) [@@js.get "COMPRESSED_RED_RGTC1_EXT"]
  val get_COMPRESSED_SIGNED_RED_RGTC1_EXT: 'tags this -> ([`L_n_36284[@js 36284]] [@js.enum]) [@@js.get "COMPRESSED_SIGNED_RED_RGTC1_EXT"]
  val get_COMPRESSED_RED_GREEN_RGTC2_EXT: 'tags this -> ([`L_n_36285[@js 36285]] [@js.enum]) [@@js.get "COMPRESSED_RED_GREEN_RGTC2_EXT"]
  val get_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT: 'tags this -> ([`L_n_36286[@js 36286]] [@js.enum]) [@@js.get "COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT"]
  val create: compressed_red_rgtc1_ext:(([`L_n_36283[@js 36283]] [@js.enum])[@js "COMPRESSED_RED_RGTC1_EXT"]) -> compressed_signed_red_rgtc1_ext:(([`L_n_36284[@js 36284]] [@js.enum])[@js "COMPRESSED_SIGNED_RED_RGTC1_EXT"]) -> compressed_red_green_rgtc2_ext:(([`L_n_36285[@js 36285]] [@js.enum])[@js "COMPRESSED_RED_GREEN_RGTC2_EXT"]) -> compressed_signed_red_green_rgtc2_ext:(([`L_n_36286[@js 36286]] [@js.enum])[@js "COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EXT_texture_compression_bptc) *)
module EXT_texture_compression_bptc : sig
  type t = [`EXT_texture_compression_bptc] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EXT_texture_compression_bptc]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EXT_texture_compression_bptc]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EXT_texture_compression_bptc ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_COMPRESSED_RGBA_BPTC_UNORM_EXT: 'tags this -> ([`L_n_36492[@js 36492]] [@js.enum]) [@@js.get "COMPRESSED_RGBA_BPTC_UNORM_EXT"]
  val get_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT: 'tags this -> ([`L_n_36493[@js 36493]] [@js.enum]) [@@js.get "COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT"]
  val get_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT: 'tags this -> ([`L_n_36494[@js 36494]] [@js.enum]) [@@js.get "COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT"]
  val get_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT: 'tags this -> ([`L_n_36495[@js 36495]] [@js.enum]) [@@js.get "COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT"]
  val create: compressed_rgba_bptc_unorm_ext:(([`L_n_36492[@js 36492]] [@js.enum])[@js "COMPRESSED_RGBA_BPTC_UNORM_EXT"]) -> compressed_srgb_alpha_bptc_unorm_ext:(([`L_n_36493[@js 36493]] [@js.enum])[@js "COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT"]) -> compressed_rgb_bptc_signed_float_ext:(([`L_n_36494[@js 36494]] [@js.enum])[@js "COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT"]) -> compressed_rgb_bptc_unsigned_float_ext:(([`L_n_36495[@js 36495]] [@js.enum])[@js "COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EXT_shader_texture_lod) *)
module EXT_shader_texture_lod : sig
  type t = [`EXT_shader_texture_lod] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EXT_shader_texture_lod]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EXT_shader_texture_lod]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EXT_shader_texture_lod ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EXT_sRGB) *)
module EXT_sRGB : sig
  type t = [`EXT_sRGB] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EXT_sRGB]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EXT_sRGB]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EXT_sRGB ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_SRGB_EXT: 'tags this -> ([`L_n_35904[@js 35904]] [@js.enum]) [@@js.get "SRGB_EXT"]
  val get_SRGB_ALPHA_EXT: 'tags this -> ([`L_n_35906[@js 35906]] [@js.enum]) [@@js.get "SRGB_ALPHA_EXT"]
  val get_SRGB8_ALPHA8_EXT: 'tags this -> ([`L_n_35907[@js 35907]] [@js.enum]) [@@js.get "SRGB8_ALPHA8_EXT"]
  val get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT: 'tags this -> ([`L_n_33296[@js 33296]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT"]
  val create: srgb_ext:(([`L_n_35904[@js 35904]] [@js.enum])[@js "SRGB_EXT"]) -> srgb_alpha_ext:(([`L_n_35906[@js 35906]] [@js.enum])[@js "SRGB_ALPHA_EXT"]) -> srgb8_alpha8_ext:(([`L_n_35907[@js 35907]] [@js.enum])[@js "SRGB8_ALPHA8_EXT"]) -> framebuffer_attachment_color_encoding_ext:(([`L_n_33296[@js 33296]] [@js.enum])[@js "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The EXT_frag_depth extension is part of the WebGL API and enables to set a depth value of a fragment from within the fragment shader.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EXT_frag_depth)
*)
module EXT_frag_depth : sig
  type t = [`EXT_frag_depth] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EXT_frag_depth]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EXT_frag_depth]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EXT_frag_depth ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EXT_float_blend) *)
module EXT_float_blend : sig
  type t = [`EXT_float_blend] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EXT_float_blend]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EXT_float_blend]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EXT_float_blend ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EXT_color_buffer_half_float) *)
module EXT_color_buffer_half_float : sig
  type t = [`EXT_color_buffer_half_float] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EXT_color_buffer_half_float]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EXT_color_buffer_half_float]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EXT_color_buffer_half_float ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_RGBA16F_EXT: 'tags this -> ([`L_n_34842[@js 34842]] [@js.enum]) [@@js.get "RGBA16F_EXT"]
  val get_RGB16F_EXT: 'tags this -> ([`L_n_34843[@js 34843]] [@js.enum]) [@@js.get "RGB16F_EXT"]
  val get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: 'tags this -> ([`L_n_33297[@js 33297]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT"]
  val get_UNSIGNED_NORMALIZED_EXT: 'tags this -> ([`L_n_35863[@js 35863]] [@js.enum]) [@@js.get "UNSIGNED_NORMALIZED_EXT"]
  val create: rgba16f_ext:(([`L_n_34842[@js 34842]] [@js.enum])[@js "RGBA16F_EXT"]) -> rgb16f_ext:(([`L_n_34843[@js 34843]] [@js.enum])[@js "RGB16F_EXT"]) -> framebuffer_attachment_component_type_ext:(([`L_n_33297[@js 33297]] [@js.enum])[@js "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT"]) -> unsigned_normalized_ext:(([`L_n_35863[@js 35863]] [@js.enum])[@js "UNSIGNED_NORMALIZED_EXT"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EXT_color_buffer_float) *)
module EXT_color_buffer_float : sig
  type t = [`EXT_color_buffer_float] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EXT_color_buffer_float]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EXT_color_buffer_float]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EXT_color_buffer_float ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EXT_blend_minmax) *)
module EXT_blend_minmax : sig
  type t = [`EXT_blend_minmax] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EXT_blend_minmax]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EXT_blend_minmax]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EXT_blend_minmax ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_MIN_EXT: 'tags this -> ([`L_n_32775[@js 32775]] [@js.enum]) [@@js.get "MIN_EXT"]
  val get_MAX_EXT: 'tags this -> ([`L_n_32776[@js 32776]] [@js.enum]) [@@js.get "MAX_EXT"]
  val create: min_ext:(([`L_n_32775[@js 32775]] [@js.enum])[@js "MIN_EXT"]) -> max_ext:(([`L_n_32776[@js 32776]] [@js.enum])[@js "MAX_EXT"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLVertexArrayObject) *)
module[@js.scope "WebGLVertexArrayObject"] WebGLVertexArrayObject : sig
  type t = [`WebGLVertexArrayObject] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLVertexArrayObject]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLVertexArrayObject]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLVertexArrayObject ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Part of the WebGL API and represents the location of a uniform variable in a shader program.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLUniformLocation)
*)
module[@js.scope "WebGLUniformLocation"] WebGLUniformLocation : sig
  type t = [`WebGLUniformLocation] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLUniformLocation]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLUniformLocation]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLUniformLocation ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLTransformFeedback) *)
module[@js.scope "WebGLTransformFeedback"] WebGLTransformFeedback : sig
  type t = [`WebGLTransformFeedback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLTransformFeedback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLTransformFeedback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLTransformFeedback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLSync) *)
module[@js.scope "WebGLSync"] WebGLSync : sig
  type t = [`WebGLSync] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLSync]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLSync]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLSync ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLSampler) *)
module[@js.scope "WebGLSampler"] WebGLSampler : sig
  type t = [`WebGLSampler] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLSampler]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLSampler]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLSampler ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLQuery) *)
module[@js.scope "WebGLQuery"] WebGLQuery : sig
  type t = [`WebGLQuery] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLQuery]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLQuery]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLQuery ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  The WebGLProgram is part of the WebGL API and is a combination of two compiled WebGLShaders consisting of a vertex shader and a fragment shader (both written in GLSL).
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLProgram)
*)
module[@js.scope "WebGLProgram"] WebGLProgram : sig
  type t = [`WebGLProgram] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLProgram]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLProgram]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLProgram ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Part of the WebGL API and represents an opaque buffer object storing data such as vertices or colors.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLBuffer)
*)
module[@js.scope "WebGLBuffer"] WebGLBuffer : sig
  type t = [`WebGLBuffer] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLBuffer]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLBuffer]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLBuffer ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getActiveAttrib() and WebGLRenderingContext.getActiveUniform() methods.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLActiveInfo)
*)
module[@js.scope "WebGLActiveInfo"] WebGLActiveInfo : sig
  type t = [`WebGLActiveInfo] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLActiveInfo]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLActiveInfo]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLActiveInfo ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLActiveInfo/name) *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLActiveInfo/size) *)
  val get_size: 'tags this -> GLint.t [@@js.get "size"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLActiveInfo/type) *)
  val get_type: 'tags this -> GLenum.t [@@js.get "type"]
  val create: name:string -> size:GLint.t -> type_:(GLenum.t[@js "type"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end
module GLuint : sig
  type t = float
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module Uint32List : sig
  type t = (GLuint.t list, Uint32Array.t) union2
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module Int32List : sig
  type t = (GLint.t list, Int32Array.t) union2
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module GLuint64 : sig
  type t = float
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module GLsizeiptr : sig
  type t = float
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module GLint64 : sig
  type t = float
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module GLbitfield : sig
  type t = float
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module GLfloat : sig
  type t = float
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module Float32List : sig
  type t = (GLfloat.t list, Float32Array.t) union2
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module ImageBitmapRenderingContextSettings : sig
  type t = [`ImageBitmapRenderingContextSettings] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ImageBitmapRenderingContextSettings]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ImageBitmapRenderingContextSettings]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ImageBitmapRenderingContextSettings ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_alpha: 'tags this -> bool option [@@js.get "alpha"]
  val set_alpha: 'tags this -> bool -> unit [@@js.set "alpha"]
  val create: ?alpha:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module DOMPointInit : sig
  type t = [`DOMPointInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DOMPointInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DOMPointInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DOMPointInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_w: 'tags this -> float option [@@js.get "w"]
  val set_w: 'tags this -> float -> unit [@@js.set "w"]
  val get_x: 'tags this -> float option [@@js.get "x"]
  val set_x: 'tags this -> float -> unit [@@js.set "x"]
  val get_y: 'tags this -> float option [@@js.get "y"]
  val set_y: 'tags this -> float -> unit [@@js.set "y"]
  val get_z: 'tags this -> float option [@@js.get "z"]
  val set_z: 'tags this -> float -> unit [@@js.set "z"]
  val create: ?w:float -> ?x:float -> ?y:float -> ?z:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module DOMMatrix2DInit : sig
  type t = [`DOMMatrix2DInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DOMMatrix2DInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DOMMatrix2DInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrix2DInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_a: 'tags this -> float option [@@js.get "a"]
  val set_a: 'tags this -> float -> unit [@@js.set "a"]
  val get_b: 'tags this -> float option [@@js.get "b"]
  val set_b: 'tags this -> float -> unit [@@js.set "b"]
  val get_c: 'tags this -> float option [@@js.get "c"]
  val set_c: 'tags this -> float -> unit [@@js.set "c"]
  val get_d: 'tags this -> float option [@@js.get "d"]
  val set_d: 'tags this -> float -> unit [@@js.set "d"]
  val get_e: 'tags this -> float option [@@js.get "e"]
  val set_e: 'tags this -> float -> unit [@@js.set "e"]
  val get_f: 'tags this -> float option [@@js.get "f"]
  val set_f: 'tags this -> float -> unit [@@js.set "f"]
  val get_m11: 'tags this -> float option [@@js.get "m11"]
  val set_m11: 'tags this -> float -> unit [@@js.set "m11"]
  val get_m12: 'tags this -> float option [@@js.get "m12"]
  val set_m12: 'tags this -> float -> unit [@@js.set "m12"]
  val get_m21: 'tags this -> float option [@@js.get "m21"]
  val set_m21: 'tags this -> float -> unit [@@js.set "m21"]
  val get_m22: 'tags this -> float option [@@js.get "m22"]
  val set_m22: 'tags this -> float -> unit [@@js.set "m22"]
  val get_m41: 'tags this -> float option [@@js.get "m41"]
  val set_m41: 'tags this -> float -> unit [@@js.set "m41"]
  val get_m42: 'tags this -> float option [@@js.get "m42"]
  val set_m42: 'tags this -> float -> unit [@@js.set "m42"]
  val create: ?a:float -> ?b:float -> ?c:float -> ?d:float -> ?e:float -> ?f:float -> ?m11:float -> ?m12:float -> ?m21:float -> ?m22:float -> ?m41:float -> ?m42:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module DOMMatrixInit : sig
  type t = [`DOMMatrix2DInit | `DOMMatrixInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DOMMatrix2DInit | `DOMMatrixInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DOMMatrix2DInit | `DOMMatrixInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrixInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_is2D: 'tags this -> bool option [@@js.get "is2D"]
  val set_is2D: 'tags this -> bool -> unit [@@js.set "is2D"]
  val get_m13: 'tags this -> float option [@@js.get "m13"]
  val set_m13: 'tags this -> float -> unit [@@js.set "m13"]
  val get_m14: 'tags this -> float option [@@js.get "m14"]
  val set_m14: 'tags this -> float -> unit [@@js.set "m14"]
  val get_m23: 'tags this -> float option [@@js.get "m23"]
  val set_m23: 'tags this -> float -> unit [@@js.set "m23"]
  val get_m24: 'tags this -> float option [@@js.get "m24"]
  val set_m24: 'tags this -> float -> unit [@@js.set "m24"]
  val get_m31: 'tags this -> float option [@@js.get "m31"]
  val set_m31: 'tags this -> float -> unit [@@js.set "m31"]
  val get_m32: 'tags this -> float option [@@js.get "m32"]
  val set_m32: 'tags this -> float -> unit [@@js.set "m32"]
  val get_m33: 'tags this -> float option [@@js.get "m33"]
  val set_m33: 'tags this -> float -> unit [@@js.set "m33"]
  val get_m34: 'tags this -> float option [@@js.get "m34"]
  val set_m34: 'tags this -> float -> unit [@@js.set "m34"]
  val get_m43: 'tags this -> float option [@@js.get "m43"]
  val set_m43: 'tags this -> float -> unit [@@js.set "m43"]
  val get_m44: 'tags this -> float option [@@js.get "m44"]
  val set_m44: 'tags this -> float -> unit [@@js.set "m44"]
  val create: ?is2D:bool -> ?m13:float -> ?m14:float -> ?m23:float -> ?m24:float -> ?m31:float -> ?m32:float -> ?m33:float -> ?m34:float -> ?m43:float -> ?m44:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMPoint) *)
module[@js.scope "DOMPoint"] rec DOMPoint : sig
  type t = [`DOMPoint | `DOMPointReadOnly] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DOMPoint | `DOMPointReadOnly]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DOMPoint | `DOMPointReadOnly]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DOMPoint ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMPoint/w) *)
  val get_w: 'tags this -> float [@@js.get "w"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMPoint/w) *)
  val set_w: 'tags this -> float -> unit [@@js.set "w"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMPoint/x) *)
  val get_x: 'tags this -> float [@@js.get "x"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMPoint/x) *)
  val set_x: 'tags this -> float -> unit [@@js.set "x"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMPoint/y) *)
  val get_y: 'tags this -> float [@@js.get "y"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMPoint/y) *)
  val set_y: 'tags this -> float -> unit [@@js.set "y"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMPoint/z) *)
  val get_z: 'tags this -> float [@@js.get "z"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMPoint/z) *)
  val set_z: 'tags this -> float -> unit [@@js.set "z"]
  val create: w:float -> x:float -> y:float -> z:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': ?x:float -> ?y:float -> ?z:float -> ?w:float -> unit -> t [@@js.create]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMPoint/fromPoint_static) *)
  val fromPoint: ?other:DOMPointInit.t -> unit -> t [@@js.global "fromPoint"]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly) *)
and[@js.scope "DOMPointReadOnly"] DOMPointReadOnly : sig
  type t = [`DOMPointReadOnly] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DOMPointReadOnly]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DOMPointReadOnly]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DOMPointReadOnly ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/w) *)
  val get_w: 'tags this -> float [@@js.get "w"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/x) *)
  val get_x: 'tags this -> float [@@js.get "x"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/y) *)
  val get_y: 'tags this -> float [@@js.get "y"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/z) *)
  val get_z: 'tags this -> float [@@js.get "z"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/matrixTransform) *)
  val matrixTransform: 'tags this -> ?matrix:DOMMatrixInit.t -> unit -> DOMPoint.t [@@js.call "matrixTransform"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/toJSON) *)
  val toJSON: 'tags this -> any [@@js.call "toJSON"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: ?x:float -> ?y:float -> ?z:float -> ?w:float -> unit -> t [@@js.create]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/fromPoint_static) *)
  val fromPoint: ?other:DOMPointInit.t -> unit -> t [@@js.global "fromPoint"]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrix) *)
module[@js.scope "DOMMatrix"] rec DOMMatrix : sig
  type t = [`DOMMatrix | `DOMMatrixReadOnly] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DOMMatrix | `DOMMatrixReadOnly]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DOMMatrix | `DOMMatrixReadOnly]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrix ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/a) *)
  val get_a: 'tags this -> float [@@js.get "a"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/a) *)
  val set_a: 'tags this -> float -> unit [@@js.set "a"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/b) *)
  val get_b: 'tags this -> float [@@js.get "b"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/b) *)
  val set_b: 'tags this -> float -> unit [@@js.set "b"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/c) *)
  val get_c: 'tags this -> float [@@js.get "c"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/c) *)
  val set_c: 'tags this -> float -> unit [@@js.set "c"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/d) *)
  val get_d: 'tags this -> float [@@js.get "d"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/d) *)
  val set_d: 'tags this -> float -> unit [@@js.set "d"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/e) *)
  val get_e: 'tags this -> float [@@js.get "e"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/e) *)
  val set_e: 'tags this -> float -> unit [@@js.set "e"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/f) *)
  val get_f: 'tags this -> float [@@js.get "f"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/f) *)
  val set_f: 'tags this -> float -> unit [@@js.set "f"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m11) *)
  val get_m11: 'tags this -> float [@@js.get "m11"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m11) *)
  val set_m11: 'tags this -> float -> unit [@@js.set "m11"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m12) *)
  val get_m12: 'tags this -> float [@@js.get "m12"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m12) *)
  val set_m12: 'tags this -> float -> unit [@@js.set "m12"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m13) *)
  val get_m13: 'tags this -> float [@@js.get "m13"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m13) *)
  val set_m13: 'tags this -> float -> unit [@@js.set "m13"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m14) *)
  val get_m14: 'tags this -> float [@@js.get "m14"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m14) *)
  val set_m14: 'tags this -> float -> unit [@@js.set "m14"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m21) *)
  val get_m21: 'tags this -> float [@@js.get "m21"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m21) *)
  val set_m21: 'tags this -> float -> unit [@@js.set "m21"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m22) *)
  val get_m22: 'tags this -> float [@@js.get "m22"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m22) *)
  val set_m22: 'tags this -> float -> unit [@@js.set "m22"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m23) *)
  val get_m23: 'tags this -> float [@@js.get "m23"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m23) *)
  val set_m23: 'tags this -> float -> unit [@@js.set "m23"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m24) *)
  val get_m24: 'tags this -> float [@@js.get "m24"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m24) *)
  val set_m24: 'tags this -> float -> unit [@@js.set "m24"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m31) *)
  val get_m31: 'tags this -> float [@@js.get "m31"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m31) *)
  val set_m31: 'tags this -> float -> unit [@@js.set "m31"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m32) *)
  val get_m32: 'tags this -> float [@@js.get "m32"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m32) *)
  val set_m32: 'tags this -> float -> unit [@@js.set "m32"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m33) *)
  val get_m33: 'tags this -> float [@@js.get "m33"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m33) *)
  val set_m33: 'tags this -> float -> unit [@@js.set "m33"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m34) *)
  val get_m34: 'tags this -> float [@@js.get "m34"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m34) *)
  val set_m34: 'tags this -> float -> unit [@@js.set "m34"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m41) *)
  val get_m41: 'tags this -> float [@@js.get "m41"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m41) *)
  val set_m41: 'tags this -> float -> unit [@@js.set "m41"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m42) *)
  val get_m42: 'tags this -> float [@@js.get "m42"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m42) *)
  val set_m42: 'tags this -> float -> unit [@@js.set "m42"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m43) *)
  val get_m43: 'tags this -> float [@@js.get "m43"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m43) *)
  val set_m43: 'tags this -> float -> unit [@@js.set "m43"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m44) *)
  val get_m44: 'tags this -> float [@@js.get "m44"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m44) *)
  val set_m44: 'tags this -> float -> unit [@@js.set "m44"]
  val invertSelf: 'tags this -> t [@@js.call "invertSelf"]
  val multiplySelf: 'tags this -> ?other:DOMMatrixInit.t -> unit -> t [@@js.call "multiplySelf"]
  val preMultiplySelf: 'tags this -> ?other:DOMMatrixInit.t -> unit -> t [@@js.call "preMultiplySelf"]
  val rotateAxisAngleSelf: 'tags this -> ?x:float -> ?y:float -> ?z:float -> ?angle:float -> unit -> t [@@js.call "rotateAxisAngleSelf"]
  val rotateFromVectorSelf: 'tags this -> ?x:float -> ?y:float -> unit -> t [@@js.call "rotateFromVectorSelf"]
  val rotateSelf: 'tags this -> ?rotX:float -> ?rotY:float -> ?rotZ:float -> unit -> t [@@js.call "rotateSelf"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrix/scale3dSelf) *)
  val scale3dSelf: 'tags this -> ?scale:float -> ?originX:float -> ?originY:float -> ?originZ:float -> unit -> t [@@js.call "scale3dSelf"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrix/scaleSelf) *)
  val scaleSelf: 'tags this -> ?scaleX:float -> ?scaleY:float -> ?scaleZ:float -> ?originX:float -> ?originY:float -> ?originZ:float -> unit -> t [@@js.call "scaleSelf"]
  val setMatrixValue: 'tags this -> transformList:string -> t [@@js.call "setMatrixValue"]
  val skewXSelf: 'tags this -> ?sx:float -> unit -> t [@@js.call "skewXSelf"]
  val skewYSelf: 'tags this -> ?sy:float -> unit -> t [@@js.call "skewYSelf"]
  val translateSelf: 'tags this -> ?tx:float -> ?ty:float -> ?tz:float -> unit -> t [@@js.call "translateSelf"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: ?init:([`U1 of string | `U2 of float list] [@js.union]) -> unit -> t [@@js.create]
  val fromFloat32Array: Float32Array.t -> t [@@js.global "fromFloat32Array"]
  val fromFloat64Array: Float64Array.t -> t [@@js.global "fromFloat64Array"]
  val fromMatrix: ?other:DOMMatrixInit.t -> unit -> t [@@js.global "fromMatrix"]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly) *)
and[@js.scope "DOMMatrixReadOnly"] DOMMatrixReadOnly : sig
  type t = [`DOMMatrixReadOnly] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DOMMatrixReadOnly]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DOMMatrixReadOnly]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrixReadOnly ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/a) *)
  val get_a: 'tags this -> float [@@js.get "a"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/b) *)
  val get_b: 'tags this -> float [@@js.get "b"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/c) *)
  val get_c: 'tags this -> float [@@js.get "c"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/d) *)
  val get_d: 'tags this -> float [@@js.get "d"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/e) *)
  val get_e: 'tags this -> float [@@js.get "e"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/f) *)
  val get_f: 'tags this -> float [@@js.get "f"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/is2D) *)
  val get_is2D: 'tags this -> bool [@@js.get "is2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/isIdentity) *)
  val get_isIdentity: 'tags this -> bool [@@js.get "isIdentity"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m11) *)
  val get_m11: 'tags this -> float [@@js.get "m11"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m12) *)
  val get_m12: 'tags this -> float [@@js.get "m12"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m13) *)
  val get_m13: 'tags this -> float [@@js.get "m13"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m14) *)
  val get_m14: 'tags this -> float [@@js.get "m14"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m21) *)
  val get_m21: 'tags this -> float [@@js.get "m21"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m22) *)
  val get_m22: 'tags this -> float [@@js.get "m22"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m23) *)
  val get_m23: 'tags this -> float [@@js.get "m23"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m24) *)
  val get_m24: 'tags this -> float [@@js.get "m24"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m31) *)
  val get_m31: 'tags this -> float [@@js.get "m31"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m32) *)
  val get_m32: 'tags this -> float [@@js.get "m32"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m33) *)
  val get_m33: 'tags this -> float [@@js.get "m33"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m34) *)
  val get_m34: 'tags this -> float [@@js.get "m34"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m41) *)
  val get_m41: 'tags this -> float [@@js.get "m41"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m42) *)
  val get_m42: 'tags this -> float [@@js.get "m42"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m43) *)
  val get_m43: 'tags this -> float [@@js.get "m43"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m44) *)
  val get_m44: 'tags this -> float [@@js.get "m44"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/flipX) *)
  val flipX: 'tags this -> DOMMatrix.t [@@js.call "flipX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/flipY) *)
  val flipY: 'tags this -> DOMMatrix.t [@@js.call "flipY"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/inverse) *)
  val inverse: 'tags this -> DOMMatrix.t [@@js.call "inverse"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/multiply) *)
  val multiply: 'tags this -> ?other:DOMMatrixInit.t -> unit -> DOMMatrix.t [@@js.call "multiply"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/rotate) *)
  val rotate: 'tags this -> ?rotX:float -> ?rotY:float -> ?rotZ:float -> unit -> DOMMatrix.t [@@js.call "rotate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/rotateAxisAngle) *)
  val rotateAxisAngle: 'tags this -> ?x:float -> ?y:float -> ?z:float -> ?angle:float -> unit -> DOMMatrix.t [@@js.call "rotateAxisAngle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/rotateFromVector) *)
  val rotateFromVector: 'tags this -> ?x:float -> ?y:float -> unit -> DOMMatrix.t [@@js.call "rotateFromVector"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/scale) *)
  val scale: 'tags this -> ?scaleX:float -> ?scaleY:float -> ?scaleZ:float -> ?originX:float -> ?originY:float -> ?originZ:float -> unit -> DOMMatrix.t [@@js.call "scale"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/scale3d) *)
  val scale3d: 'tags this -> ?scale:float -> ?originX:float -> ?originY:float -> ?originZ:float -> unit -> DOMMatrix.t [@@js.call "scale3d"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/scaleNonUniform) *)
  val scaleNonUniform: 'tags this -> ?scaleX:float -> ?scaleY:float -> unit -> DOMMatrix.t [@@js.call "scaleNonUniform"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/skewX) *)
  val skewX: 'tags this -> ?sx:float -> unit -> DOMMatrix.t [@@js.call "skewX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/skewY) *)
  val skewY: 'tags this -> ?sy:float -> unit -> DOMMatrix.t [@@js.call "skewY"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/toFloat32Array) *)
  val toFloat32Array: 'tags this -> Float32Array.t [@@js.call "toFloat32Array"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/toFloat64Array) *)
  val toFloat64Array: 'tags this -> Float64Array.t [@@js.call "toFloat64Array"]
  val toJSON: 'tags this -> any [@@js.call "toJSON"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/transformPoint) *)
  val transformPoint: 'tags this -> ?point:DOMPointInit.t -> unit -> DOMPoint.t [@@js.call "transformPoint"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/translate) *)
  val translate: 'tags this -> ?tx:float -> ?ty:float -> ?tz:float -> unit -> DOMMatrix.t [@@js.call "translate"]
  val toString: 'tags this -> string [@@js.call "toString"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: ?init:([`U1 of string | `U2 of float list] [@js.union]) -> unit -> t [@@js.create]
  val fromFloat32Array: Float32Array.t -> t [@@js.global "fromFloat32Array"]
  val fromFloat64Array: Float64Array.t -> t [@@js.global "fromFloat64Array"]
  val fromMatrix: ?other:DOMMatrixInit.t -> unit -> t [@@js.global "fromMatrix"]
end
module CanvasTransform : sig
  type t = [`CanvasTransform] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasTransform]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasTransform]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasTransform ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/getTransform) *)
  val getTransform: 'tags this -> DOMMatrix.t [@@js.call "getTransform"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/resetTransform) *)
  val resetTransform: 'tags this -> unit [@@js.call "resetTransform"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/rotate) *)
  val rotate: 'tags this -> angle:float -> unit [@@js.call "rotate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/scale) *)
  val scale: 'tags this -> x:float -> y:float -> unit [@@js.call "scale"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setTransform) *)
  val setTransform: 'tags this -> a:float -> b:float -> c:float -> d:float -> e:float -> f:float -> unit [@@js.call "setTransform"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setTransform) *)
  val setTransform': 'tags this -> ?transform:DOMMatrix2DInit.t -> unit -> unit [@@js.call "setTransform"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/transform) *)
  val transform: 'tags this -> a:float -> b:float -> c:float -> d:float -> e:float -> f:float -> unit [@@js.call "transform"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/translate) *)
  val translate: 'tags this -> x:float -> y:float -> unit [@@js.call "translate"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module CanvasTextRendering : sig
  type t = ([`L_s174_auto[@js "auto"] | `L_s451_geometricPrecision[@js "geometricPrecision"] | `L_s706_optimizeLegibility[@js "optimizeLegibility"] | `L_s707_optimizeSpeed[@js "optimizeSpeed"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module CanvasTextBaseline : sig
  type t = ([`L_s140_alphabetic[@js "alphabetic"] | `L_s212_bottom[@js "bottom"] | `L_s464_hanging[@js "hanging"] | `L_s503_ideographic[@js "ideographic"] | `L_s619_middle[@js "middle"] | `L_s982_top[@js "top"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module CanvasTextAlign : sig
  type t = ([`L_s240_center[@js "center"] | `L_s364_end[@js "end"] | `L_s552_left[@js "left"] | `L_s832_right[@js "right"] | `L_s919_start[@js "start"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module CanvasFontVariantCaps : sig
  type t = ([`L_s1008_unicase[@js "unicase"] | `L_s137_all_petite_caps[@js "all-petite-caps"] | `L_s138_all_small_caps[@js "all-small-caps"] | `L_s687_normal[@js "normal"] | `L_s741_petite_caps[@js "petite-caps"] | `L_s892_small_caps[@js "small-caps"] | `L_s979_titling_caps[@js "titling-caps"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module CanvasFontStretch : sig
  type t = ([`L_s1004_ultra_condensed[@js "ultra-condensed"] | `L_s1005_ultra_expanded[@js "ultra-expanded"] | `L_s270_condensed[@js "condensed"] | `L_s377_expanded[@js "expanded"] | `L_s382_extra_condensed[@js "extra-condensed"] | `L_s383_extra_expanded[@js "extra-expanded"] | `L_s687_normal[@js "normal"] | `L_s872_semi_condensed[@js "semi-condensed"] | `L_s873_semi_expanded[@js "semi-expanded"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module CanvasFontKerning : sig
  type t = ([`L_s174_auto[@js "auto"] | `L_s685_none[@js "none"] | `L_s687_normal[@js "normal"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module CanvasDirection : sig
  type t = ([`L_s517_inherit[@js "inherit"] | `L_s587_ltr[@js "ltr"] | `L_s840_rtl[@js "rtl"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module CanvasTextDrawingStyles : sig
  type t = [`CanvasTextDrawingStyles] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasTextDrawingStyles]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasTextDrawingStyles]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasTextDrawingStyles ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/direction) *)
  val get_direction: 'tags this -> CanvasDirection.t [@@js.get "direction"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/direction) *)
  val set_direction: 'tags this -> CanvasDirection.t -> unit [@@js.set "direction"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/font) *)
  val get_font: 'tags this -> string [@@js.get "font"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/font) *)
  val set_font: 'tags this -> string -> unit [@@js.set "font"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fontKerning) *)
  val get_fontKerning: 'tags this -> CanvasFontKerning.t [@@js.get "fontKerning"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fontKerning) *)
  val set_fontKerning: 'tags this -> CanvasFontKerning.t -> unit [@@js.set "fontKerning"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fontStretch) *)
  val get_fontStretch: 'tags this -> CanvasFontStretch.t [@@js.get "fontStretch"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fontStretch) *)
  val set_fontStretch: 'tags this -> CanvasFontStretch.t -> unit [@@js.set "fontStretch"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fontVariantCaps) *)
  val get_fontVariantCaps: 'tags this -> CanvasFontVariantCaps.t [@@js.get "fontVariantCaps"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fontVariantCaps) *)
  val set_fontVariantCaps: 'tags this -> CanvasFontVariantCaps.t -> unit [@@js.set "fontVariantCaps"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/letterSpacing) *)
  val get_letterSpacing: 'tags this -> string [@@js.get "letterSpacing"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/letterSpacing) *)
  val set_letterSpacing: 'tags this -> string -> unit [@@js.set "letterSpacing"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textAlign) *)
  val get_textAlign: 'tags this -> CanvasTextAlign.t [@@js.get "textAlign"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textAlign) *)
  val set_textAlign: 'tags this -> CanvasTextAlign.t -> unit [@@js.set "textAlign"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textBaseline) *)
  val get_textBaseline: 'tags this -> CanvasTextBaseline.t [@@js.get "textBaseline"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textBaseline) *)
  val set_textBaseline: 'tags this -> CanvasTextBaseline.t -> unit [@@js.set "textBaseline"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textRendering) *)
  val get_textRendering: 'tags this -> CanvasTextRendering.t [@@js.get "textRendering"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textRendering) *)
  val set_textRendering: 'tags this -> CanvasTextRendering.t -> unit [@@js.set "textRendering"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/wordSpacing) *)
  val get_wordSpacing: 'tags this -> string [@@js.get "wordSpacing"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/wordSpacing) *)
  val set_wordSpacing: 'tags this -> string -> unit [@@js.set "wordSpacing"]
  val create: direction:CanvasDirection.t -> font:string -> fontKerning:CanvasFontKerning.t -> fontStretch:CanvasFontStretch.t -> fontVariantCaps:CanvasFontVariantCaps.t -> letterSpacing:string -> textAlign:CanvasTextAlign.t -> textBaseline:CanvasTextBaseline.t -> textRendering:CanvasTextRendering.t -> wordSpacing:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The dimensions of a piece of text in the canvas, as created by the CanvasRenderingContext2D.measureText() method.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextMetrics)
*)
module[@js.scope "TextMetrics"] TextMetrics : sig
  type t = [`TextMetrics] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`TextMetrics]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`TextMetrics]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `TextMetrics ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the measurement described below.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextMetrics/actualBoundingBoxAscent)
  *)
  val get_actualBoundingBoxAscent: 'tags this -> float [@@js.get "actualBoundingBoxAscent"]
  
  (**
    Returns the measurement described below.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextMetrics/actualBoundingBoxDescent)
  *)
  val get_actualBoundingBoxDescent: 'tags this -> float [@@js.get "actualBoundingBoxDescent"]
  
  (**
    Returns the measurement described below.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextMetrics/actualBoundingBoxLeft)
  *)
  val get_actualBoundingBoxLeft: 'tags this -> float [@@js.get "actualBoundingBoxLeft"]
  
  (**
    Returns the measurement described below.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextMetrics/actualBoundingBoxRight)
  *)
  val get_actualBoundingBoxRight: 'tags this -> float [@@js.get "actualBoundingBoxRight"]
  
  (**
    Returns the measurement described below.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextMetrics/alphabeticBaseline)
  *)
  val get_alphabeticBaseline: 'tags this -> float [@@js.get "alphabeticBaseline"]
  
  (**
    Returns the measurement described below.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextMetrics/emHeightAscent)
  *)
  val get_emHeightAscent: 'tags this -> float [@@js.get "emHeightAscent"]
  
  (**
    Returns the measurement described below.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextMetrics/emHeightDescent)
  *)
  val get_emHeightDescent: 'tags this -> float [@@js.get "emHeightDescent"]
  
  (**
    Returns the measurement described below.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextMetrics/fontBoundingBoxAscent)
  *)
  val get_fontBoundingBoxAscent: 'tags this -> float [@@js.get "fontBoundingBoxAscent"]
  
  (**
    Returns the measurement described below.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextMetrics/fontBoundingBoxDescent)
  *)
  val get_fontBoundingBoxDescent: 'tags this -> float [@@js.get "fontBoundingBoxDescent"]
  
  (**
    Returns the measurement described below.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextMetrics/hangingBaseline)
  *)
  val get_hangingBaseline: 'tags this -> float [@@js.get "hangingBaseline"]
  
  (**
    Returns the measurement described below.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextMetrics/ideographicBaseline)
  *)
  val get_ideographicBaseline: 'tags this -> float [@@js.get "ideographicBaseline"]
  
  (**
    Returns the measurement described below.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextMetrics/width)
  *)
  val get_width: 'tags this -> float [@@js.get "width"]
  val create: actualBoundingBoxAscent:float -> actualBoundingBoxDescent:float -> actualBoundingBoxLeft:float -> actualBoundingBoxRight:float -> alphabeticBaseline:float -> emHeightAscent:float -> emHeightDescent:float -> fontBoundingBoxAscent:float -> fontBoundingBoxDescent:float -> hangingBaseline:float -> ideographicBaseline:float -> width:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end
module CanvasText : sig
  type t = [`CanvasText] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasText]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasText]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasText ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fillText) *)
  val fillText: 'tags this -> text:string -> x:float -> y:float -> ?maxWidth:float -> unit -> unit [@@js.call "fillText"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/measureText) *)
  val measureText: 'tags this -> text:string -> TextMetrics.t [@@js.call "measureText"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/strokeText) *)
  val strokeText: 'tags this -> text:string -> x:float -> y:float -> ?maxWidth:float -> unit -> unit [@@js.call "strokeText"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module CanvasState : sig
  type t = [`CanvasState] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasState]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasState]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasState ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/reset) *)
  val reset: 'tags this -> unit [@@js.call "reset"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/restore) *)
  val restore: 'tags this -> unit [@@js.call "restore"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/save) *)
  val save: 'tags this -> unit [@@js.call "save"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module CanvasShadowStyles : sig
  type t = [`CanvasShadowStyles] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasShadowStyles]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasShadowStyles]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasShadowStyles ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowBlur) *)
  val get_shadowBlur: 'tags this -> float [@@js.get "shadowBlur"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowBlur) *)
  val set_shadowBlur: 'tags this -> float -> unit [@@js.set "shadowBlur"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowColor) *)
  val get_shadowColor: 'tags this -> string [@@js.get "shadowColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowColor) *)
  val set_shadowColor: 'tags this -> string -> unit [@@js.set "shadowColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowOffsetX) *)
  val get_shadowOffsetX: 'tags this -> float [@@js.get "shadowOffsetX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowOffsetX) *)
  val set_shadowOffsetX: 'tags this -> float -> unit [@@js.set "shadowOffsetX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowOffsetY) *)
  val get_shadowOffsetY: 'tags this -> float [@@js.get "shadowOffsetY"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowOffsetY) *)
  val set_shadowOffsetY: 'tags this -> float -> unit [@@js.set "shadowOffsetY"]
  val create: shadowBlur:float -> shadowColor:string -> shadowOffsetX:float -> shadowOffsetY:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module PredefinedColorSpace : sig
  type t = ([`L_s339_display_p3[@js "display-p3"] | `L_s915_srgb[@js "srgb"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module CanvasRenderingContext2DSettings : sig
  type t = [`CanvasRenderingContext2DSettings] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasRenderingContext2DSettings]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasRenderingContext2DSettings]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasRenderingContext2DSettings ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_alpha: 'tags this -> bool option [@@js.get "alpha"]
  val set_alpha: 'tags this -> bool -> unit [@@js.set "alpha"]
  val get_colorSpace: 'tags this -> PredefinedColorSpace.t option [@@js.get "colorSpace"]
  val set_colorSpace: 'tags this -> PredefinedColorSpace.t -> unit [@@js.set "colorSpace"]
  val get_desynchronized: 'tags this -> bool option [@@js.get "desynchronized"]
  val set_desynchronized: 'tags this -> bool -> unit [@@js.set "desynchronized"]
  val get_willReadFrequently: 'tags this -> bool option [@@js.get "willReadFrequently"]
  val set_willReadFrequently: 'tags this -> bool -> unit [@@js.set "willReadFrequently"]
  val create: ?alpha:bool -> ?colorSpace:PredefinedColorSpace.t -> ?desynchronized:bool -> ?willReadFrequently:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module CanvasRect : sig
  type t = [`CanvasRect] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasRect]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasRect]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasRect ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/clearRect) *)
  val clearRect: 'tags this -> x:float -> y:float -> w:float -> h:float -> unit [@@js.call "clearRect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fillRect) *)
  val fillRect: 'tags this -> x:float -> y:float -> w:float -> h:float -> unit [@@js.call "fillRect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/strokeRect) *)
  val strokeRect: 'tags this -> x:float -> y:float -> w:float -> h:float -> unit [@@js.call "strokeRect"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module CanvasLineJoin : sig
  type t = ([`L_s197_bevel[@js "bevel"] | `L_s622_miter[@js "miter"] | `L_s835_round[@js "round"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module CanvasLineCap : sig
  type t = ([`L_s219_butt[@js "butt"] | `L_s835_round[@js "round"] | `L_s913_square[@js "square"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module CanvasPathDrawingStyles : sig
  type t = [`CanvasPathDrawingStyles] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasPathDrawingStyles]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasPathDrawingStyles]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasPathDrawingStyles ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setLineDash) *)
  val setLineDash: 'tags this -> segments:float Iterable.t -> unit [@@js.call "setLineDash"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineCap) *)
  val get_lineCap: 'tags this -> CanvasLineCap.t [@@js.get "lineCap"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineCap) *)
  val set_lineCap: 'tags this -> CanvasLineCap.t -> unit [@@js.set "lineCap"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) *)
  val get_lineDashOffset: 'tags this -> float [@@js.get "lineDashOffset"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) *)
  val set_lineDashOffset: 'tags this -> float -> unit [@@js.set "lineDashOffset"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineJoin) *)
  val get_lineJoin: 'tags this -> CanvasLineJoin.t [@@js.get "lineJoin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineJoin) *)
  val set_lineJoin: 'tags this -> CanvasLineJoin.t -> unit [@@js.set "lineJoin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineWidth) *)
  val get_lineWidth: 'tags this -> float [@@js.get "lineWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineWidth) *)
  val set_lineWidth: 'tags this -> float -> unit [@@js.set "lineWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/miterLimit) *)
  val get_miterLimit: 'tags this -> float [@@js.get "miterLimit"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/miterLimit) *)
  val set_miterLimit: 'tags this -> float -> unit [@@js.set "miterLimit"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/getLineDash) *)
  val getLineDash: 'tags this -> float list [@@js.call "getLineDash"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setLineDash) *)
  val setLineDash': 'tags this -> segments:float list -> unit [@@js.call "setLineDash"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ImageSmoothingQuality : sig
  type t = ([`L_s479_high[@js "high"] | `L_s581_low[@js "low"] | `L_s607_medium[@js "medium"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module CanvasImageSmoothing : sig
  type t = [`CanvasImageSmoothing] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasImageSmoothing]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasImageSmoothing]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasImageSmoothing ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled) *)
  val get_imageSmoothingEnabled: 'tags this -> bool [@@js.get "imageSmoothingEnabled"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled) *)
  val set_imageSmoothingEnabled: 'tags this -> bool -> unit [@@js.set "imageSmoothingEnabled"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/imageSmoothingQuality) *)
  val get_imageSmoothingQuality: 'tags this -> ImageSmoothingQuality.t [@@js.get "imageSmoothingQuality"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/imageSmoothingQuality) *)
  val set_imageSmoothingQuality: 'tags this -> ImageSmoothingQuality.t -> unit [@@js.set "imageSmoothingQuality"]
  val create: imageSmoothingEnabled:bool -> imageSmoothingQuality:ImageSmoothingQuality.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ImageDataSettings : sig
  type t = [`ImageDataSettings] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ImageDataSettings]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ImageDataSettings]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ImageDataSettings ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_colorSpace: 'tags this -> PredefinedColorSpace.t option [@@js.get "colorSpace"]
  val set_colorSpace: 'tags this -> PredefinedColorSpace.t -> unit [@@js.set "colorSpace"]
  val create: ?colorSpace:PredefinedColorSpace.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The underlying pixel data of an area of a <canvas> element. It is created using the ImageData() constructor or creator methods on the CanvasRenderingContext2D object associated with a canvas: createImageData() and getImageData(). It can also be used to set a part of the canvas by using putImageData().
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ImageData)
*)
module[@js.scope "ImageData"] ImageData : sig
  type t = [`ImageData] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ImageData]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ImageData]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ImageData ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ImageData/colorSpace) *)
  val get_colorSpace: 'tags this -> PredefinedColorSpace.t [@@js.get "colorSpace"]
  
  (**
    Returns the one-dimensional array containing the data in RGBA order, as integers in the range 0 to 255.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ImageData/data)
  *)
  val get_data: 'tags this -> Uint8ClampedArray.t [@@js.get "data"]
  
  (**
    Returns the actual dimensions of the data in the ImageData object, in pixels.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ImageData/height)
  *)
  val get_height: 'tags this -> float [@@js.get "height"]
  
  (**
    Returns the actual dimensions of the data in the ImageData object, in pixels.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ImageData/width)
  *)
  val get_width: 'tags this -> float [@@js.get "width"]
  val create: colorSpace:PredefinedColorSpace.t -> data:Uint8ClampedArray.t -> height:float -> width:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': sw:float -> sh:float -> ?settings:ImageDataSettings.t -> unit -> t [@@js.create]
  val create'': data:Uint8ClampedArray.t -> sw:float -> ?sh:float -> ?settings:ImageDataSettings.t -> unit -> t [@@js.create]
end
module CanvasImageData : sig
  type t = [`CanvasImageData] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasImageData]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasImageData]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasImageData ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/createImageData) *)
  val createImageData: 'tags this -> sw:float -> sh:float -> ?settings:ImageDataSettings.t -> unit -> ImageData.t [@@js.call "createImageData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/createImageData) *)
  val createImageData': 'tags this -> imagedata:ImageData.t -> ImageData.t [@@js.call "createImageData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/getImageData) *)
  val getImageData: 'tags this -> sx:float -> sy:float -> sw:float -> sh:float -> ?settings:ImageDataSettings.t -> unit -> ImageData.t [@@js.call "getImageData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/putImageData) *)
  val putImageData: 'tags this -> imagedata:ImageData.t -> dx:float -> dy:float -> unit [@@js.call "putImageData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/putImageData) *)
  val putImageData': 'tags this -> imagedata:ImageData.t -> dx:float -> dy:float -> dirtyX:float -> dirtyY:float -> dirtyWidth:float -> dirtyHeight:float -> unit [@@js.call "putImageData"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module CanvasFilters : sig
  type t = [`CanvasFilters] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasFilters]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasFilters]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasFilters ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/filter) *)
  val get_filter: 'tags this -> string [@@js.get "filter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/filter) *)
  val set_filter: 'tags this -> string -> unit [@@js.set "filter"]
  val create: filter:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  An opaque object describing a pattern, based on an image, a canvas, or a video, created by the CanvasRenderingContext2D.createPattern() method.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasPattern)
*)
module[@js.scope "CanvasPattern"] CanvasPattern : sig
  type t = [`CanvasPattern] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasPattern]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasPattern]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasPattern ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Sets the transformation matrix that will be used when rendering the pattern during a fill or stroke painting operation.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasPattern/setTransform)
  *)
  val setTransform: 'tags this -> ?transform:DOMMatrix2DInit.t -> unit -> unit [@@js.call "setTransform"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  An opaque object describing a gradient. It is returned by the methods CanvasRenderingContext2D.createLinearGradient() or CanvasRenderingContext2D.createRadialGradient().
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasGradient)
*)
module[@js.scope "CanvasGradient"] CanvasGradient : sig
  type t = [`CanvasGradient] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasGradient]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasGradient]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasGradient ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Adds a color stop with the given color to the gradient at the given offset. 0.0 is the offset at one end of the gradient, 1.0 is the offset at the other end.
    
    Throws an "IndexSizeError" DOMException if the offset is out of range. Throws a "SyntaxError" DOMException if the color cannot be parsed.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasGradient/addColorStop)
  *)
  val addColorStop: 'tags this -> offset:float -> color:string -> unit [@@js.call "addColorStop"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module CanvasPath : sig
  type t = [`CanvasPath] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasPath]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasPath]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasPath ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/roundRect) *)
  val roundRect: 'tags this -> x:float -> y:float -> w:float -> h:float -> ?radii:([`U1 of float | `U2 of DOMPointInit.t | `U3 of ([`U1 of float | `U2 of DOMPointInit.t] [@js.union]) Iterable.t] [@js.union]) -> unit -> unit [@@js.call "roundRect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/arc) *)
  val arc: 'tags this -> x:float -> y:float -> radius:float -> startAngle:float -> endAngle:float -> ?counterclockwise:bool -> unit -> unit [@@js.call "arc"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/arcTo) *)
  val arcTo: 'tags this -> x1:float -> y1:float -> x2:float -> y2:float -> radius:float -> unit [@@js.call "arcTo"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo) *)
  val bezierCurveTo: 'tags this -> cp1x:float -> cp1y:float -> cp2x:float -> cp2y:float -> x:float -> y:float -> unit [@@js.call "bezierCurveTo"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/closePath) *)
  val closePath: 'tags this -> unit [@@js.call "closePath"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/ellipse) *)
  val ellipse: 'tags this -> x:float -> y:float -> radiusX:float -> radiusY:float -> rotation:float -> startAngle:float -> endAngle:float -> ?counterclockwise:bool -> unit -> unit [@@js.call "ellipse"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineTo) *)
  val lineTo: 'tags this -> x:float -> y:float -> unit [@@js.call "lineTo"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/moveTo) *)
  val moveTo: 'tags this -> x:float -> y:float -> unit [@@js.call "moveTo"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/quadraticCurveTo) *)
  val quadraticCurveTo: 'tags this -> cpx:float -> cpy:float -> x:float -> y:float -> unit [@@js.call "quadraticCurveTo"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/rect) *)
  val rect: 'tags this -> x:float -> y:float -> w:float -> h:float -> unit [@@js.call "rect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/roundRect) *)
  val roundRect': 'tags this -> x:float -> y:float -> w:float -> h:float -> ?radii:([`U1 of float | `U2 of DOMPointInit.t | `U3 of ([`U1 of float | `U2 of DOMPointInit.t] [@js.union]) list] [@js.union]) -> unit -> unit [@@js.call "roundRect"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  This Canvas 2D API interface is used to declare a path that can then be used on a CanvasRenderingContext2D object. The path methods of the CanvasRenderingContext2D interface are also present on this interface, which gives you the convenience of being able to retain and replay your path whenever desired.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Path2D)
*)
module[@js.scope "Path2D"] Path2D : sig
  type t = [`CanvasPath | `Path2D] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasPath | `Path2D]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasPath | `Path2D]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Path2D ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Adds to the path the path given by the argument.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Path2D/addPath)
  *)
  val addPath: 'tags this -> path:t -> ?transform:DOMMatrix2DInit.t -> unit -> unit [@@js.call "addPath"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: ?path:([`U1 of t | `U2 of string] [@js.union]) -> unit -> t [@@js.create]
end
module CanvasFillRule : sig
  type t = ([`L_s373_evenodd[@js "evenodd"] | `L_s686_nonzero[@js "nonzero"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module CanvasDrawPath : sig
  type t = [`CanvasDrawPath] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasDrawPath]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasDrawPath]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasDrawPath ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/beginPath) *)
  val beginPath: 'tags this -> unit [@@js.call "beginPath"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/clip) *)
  val clip: 'tags this -> ?fillRule:CanvasFillRule.t -> unit -> unit [@@js.call "clip"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/clip) *)
  val clip': 'tags this -> path:Path2D.t -> ?fillRule:CanvasFillRule.t -> unit -> unit [@@js.call "clip"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fill) *)
  val fill: 'tags this -> ?fillRule:CanvasFillRule.t -> unit -> unit [@@js.call "fill"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fill) *)
  val fill': 'tags this -> path:Path2D.t -> ?fillRule:CanvasFillRule.t -> unit -> unit [@@js.call "fill"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/isPointInPath) *)
  val isPointInPath: 'tags this -> x:float -> y:float -> ?fillRule:CanvasFillRule.t -> unit -> bool [@@js.call "isPointInPath"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/isPointInPath) *)
  val isPointInPath': 'tags this -> path:Path2D.t -> x:float -> y:float -> ?fillRule:CanvasFillRule.t -> unit -> bool [@@js.call "isPointInPath"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/isPointInStroke) *)
  val isPointInStroke: 'tags this -> x:float -> y:float -> bool [@@js.call "isPointInStroke"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/isPointInStroke) *)
  val isPointInStroke': 'tags this -> path:Path2D.t -> x:float -> y:float -> bool [@@js.call "isPointInStroke"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/stroke) *)
  val stroke: 'tags this -> unit [@@js.call "stroke"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/stroke) *)
  val stroke': 'tags this -> path:Path2D.t -> unit [@@js.call "stroke"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module AlphaOption : sig
  type t = ([`L_s334_discard[@js "discard"] | `L_s538_keep[@js "keep"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module DOMRectInit : sig
  type t = [`DOMRectInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DOMRectInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DOMRectInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DOMRectInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_height: 'tags this -> float option [@@js.get "height"]
  val set_height: 'tags this -> float -> unit [@@js.set "height"]
  val get_width: 'tags this -> float option [@@js.get "width"]
  val set_width: 'tags this -> float -> unit [@@js.set "width"]
  val get_x: 'tags this -> float option [@@js.get "x"]
  val set_x: 'tags this -> float -> unit [@@js.set "x"]
  val get_y: 'tags this -> float option [@@js.get "y"]
  val set_y: 'tags this -> float -> unit [@@js.set "y"]
  val create: ?height:float -> ?width:float -> ?x:float -> ?y:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module VideoFrameInit : sig
  type t = [`VideoFrameInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VideoFrameInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VideoFrameInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoFrameInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_alpha: 'tags this -> AlphaOption.t option [@@js.get "alpha"]
  val set_alpha: 'tags this -> AlphaOption.t -> unit [@@js.set "alpha"]
  val get_displayHeight: 'tags this -> float option [@@js.get "displayHeight"]
  val set_displayHeight: 'tags this -> float -> unit [@@js.set "displayHeight"]
  val get_displayWidth: 'tags this -> float option [@@js.get "displayWidth"]
  val set_displayWidth: 'tags this -> float -> unit [@@js.set "displayWidth"]
  val get_duration: 'tags this -> float option [@@js.get "duration"]
  val set_duration: 'tags this -> float -> unit [@@js.set "duration"]
  val get_timestamp: 'tags this -> float option [@@js.get "timestamp"]
  val set_timestamp: 'tags this -> float -> unit [@@js.set "timestamp"]
  val get_visibleRect: 'tags this -> DOMRectInit.t option [@@js.get "visibleRect"]
  val set_visibleRect: 'tags this -> DOMRectInit.t -> unit [@@js.set "visibleRect"]
  val create: ?alpha:AlphaOption.t -> ?displayHeight:float -> ?displayWidth:float -> ?duration:float -> ?timestamp:float -> ?visibleRect:DOMRectInit.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module PlaneLayout : sig
  type t = [`PlaneLayout] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PlaneLayout]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PlaneLayout]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PlaneLayout ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_offset: 'tags this -> float [@@js.get "offset"]
  val set_offset: 'tags this -> float -> unit [@@js.set "offset"]
  val get_stride: 'tags this -> float [@@js.get "stride"]
  val set_stride: 'tags this -> float -> unit [@@js.set "stride"]
  val create: offset:float -> stride:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module VideoFrameCopyToOptions : sig
  type t = [`VideoFrameCopyToOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VideoFrameCopyToOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VideoFrameCopyToOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoFrameCopyToOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_layout: 'tags this -> PlaneLayout.t list option [@@js.get "layout"]
  val set_layout: 'tags this -> PlaneLayout.t list -> unit [@@js.set "layout"]
  val get_rect: 'tags this -> DOMRectInit.t option [@@js.get "rect"]
  val set_rect: 'tags this -> DOMRectInit.t -> unit [@@js.set "rect"]
  val create: ?layout:PlaneLayout.t list -> ?rect:DOMRectInit.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module VideoPixelFormat : sig
  type t = ([`L_s40_I420[@js "I420"] | `L_s41_I420A[@js "I420A"] | `L_s42_I422[@js "I422"] | `L_s43_I444[@js "I444"] | `L_s59_NV12[@js "NV12"] | `L_s78_RGBA[@js "RGBA"] | `L_s79_RGBX[@js "RGBX"] | `L_s8_BGRA[@js "BGRA"] | `L_s9_BGRX[@js "BGRX"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module VideoTransferCharacteristics : sig
  type t = ([`L_s217_bt709[@js "bt709"] | `L_s505_iec61966_2_1[@js "iec61966-2-1"] | `L_s894_smpte170m[@js "smpte170m"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module VideoMatrixCoefficients : sig
  type t = ([`L_s216_bt470bg[@js "bt470bg"] | `L_s217_bt709[@js "bt709"] | `L_s831_rgb[@js "rgb"] | `L_s894_smpte170m[@js "smpte170m"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module VideoColorPrimaries : sig
  type t = ([`L_s216_bt470bg[@js "bt470bg"] | `L_s217_bt709[@js "bt709"] | `L_s894_smpte170m[@js "smpte170m"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module VideoColorSpaceInit : sig
  type t = [`VideoColorSpaceInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VideoColorSpaceInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VideoColorSpaceInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoColorSpaceInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_fullRange: 'tags this -> bool option [@@js.get "fullRange"]
  val set_fullRange: 'tags this -> bool option -> unit [@@js.set "fullRange"]
  val get_matrix: 'tags this -> VideoMatrixCoefficients.t option [@@js.get "matrix"]
  val set_matrix: 'tags this -> VideoMatrixCoefficients.t option -> unit [@@js.set "matrix"]
  val get_primaries: 'tags this -> VideoColorPrimaries.t option [@@js.get "primaries"]
  val set_primaries: 'tags this -> VideoColorPrimaries.t option -> unit [@@js.set "primaries"]
  val get_transfer: 'tags this -> VideoTransferCharacteristics.t option [@@js.get "transfer"]
  val set_transfer: 'tags this -> VideoTransferCharacteristics.t option -> unit [@@js.set "transfer"]
  val create: ?fullRange:bool -> ?matrix:VideoMatrixCoefficients.t -> ?primaries:VideoColorPrimaries.t -> ?transfer:VideoTransferCharacteristics.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module VideoFrameBufferInit : sig
  type t = [`VideoFrameBufferInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VideoFrameBufferInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VideoFrameBufferInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoFrameBufferInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_codedHeight: 'tags this -> float [@@js.get "codedHeight"]
  val set_codedHeight: 'tags this -> float -> unit [@@js.set "codedHeight"]
  val get_codedWidth: 'tags this -> float [@@js.get "codedWidth"]
  val set_codedWidth: 'tags this -> float -> unit [@@js.set "codedWidth"]
  val get_colorSpace: 'tags this -> VideoColorSpaceInit.t option [@@js.get "colorSpace"]
  val set_colorSpace: 'tags this -> VideoColorSpaceInit.t -> unit [@@js.set "colorSpace"]
  val get_displayHeight: 'tags this -> float option [@@js.get "displayHeight"]
  val set_displayHeight: 'tags this -> float -> unit [@@js.set "displayHeight"]
  val get_displayWidth: 'tags this -> float option [@@js.get "displayWidth"]
  val set_displayWidth: 'tags this -> float -> unit [@@js.set "displayWidth"]
  val get_duration: 'tags this -> float option [@@js.get "duration"]
  val set_duration: 'tags this -> float -> unit [@@js.set "duration"]
  val get_format: 'tags this -> VideoPixelFormat.t [@@js.get "format"]
  val set_format: 'tags this -> VideoPixelFormat.t -> unit [@@js.set "format"]
  val get_layout: 'tags this -> PlaneLayout.t list option [@@js.get "layout"]
  val set_layout: 'tags this -> PlaneLayout.t list -> unit [@@js.set "layout"]
  val get_timestamp: 'tags this -> float [@@js.get "timestamp"]
  val set_timestamp: 'tags this -> float -> unit [@@js.set "timestamp"]
  val get_visibleRect: 'tags this -> DOMRectInit.t option [@@js.get "visibleRect"]
  val set_visibleRect: 'tags this -> DOMRectInit.t -> unit [@@js.set "visibleRect"]
  val create: codedHeight:float -> codedWidth:float -> ?colorSpace:VideoColorSpaceInit.t -> ?displayHeight:float -> ?displayWidth:float -> ?duration:float -> format:VideoPixelFormat.t -> ?layout:PlaneLayout.t list -> timestamp:float -> ?visibleRect:DOMRectInit.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoColorSpace) *)
module[@js.scope "VideoColorSpace"] VideoColorSpace : sig
  type t = [`VideoColorSpace] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VideoColorSpace]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VideoColorSpace]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoColorSpace ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoColorSpace/fullRange) *)
  val get_fullRange: 'tags this -> bool option [@@js.get "fullRange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoColorSpace/matrix) *)
  val get_matrix: 'tags this -> VideoMatrixCoefficients.t option [@@js.get "matrix"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoColorSpace/primaries) *)
  val get_primaries: 'tags this -> VideoColorPrimaries.t option [@@js.get "primaries"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoColorSpace/transfer) *)
  val get_transfer: 'tags this -> VideoTransferCharacteristics.t option [@@js.get "transfer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoColorSpace/toJSON) *)
  val toJSON: 'tags this -> VideoColorSpaceInit.t [@@js.call "toJSON"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: ?init:VideoColorSpaceInit.t -> unit -> t [@@js.create]
end
module AllowSharedBufferSource : sig
  type t = (ArrayBuffer.t, ArrayBufferView.t) union2
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  Returned by the HTMLVideoElement.getVideoPlaybackQuality() method and contains metrics that can be used to determine the playback quality of a video.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoPlaybackQuality)
*)
module[@js.scope "VideoPlaybackQuality"] VideoPlaybackQuality : sig
  type t = [`VideoPlaybackQuality] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VideoPlaybackQuality]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VideoPlaybackQuality]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoPlaybackQuality ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoPlaybackQuality/corruptedVideoFrames) *)
  val get_corruptedVideoFrames: 'tags this -> float [@@js.get "corruptedVideoFrames"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoPlaybackQuality/creationTime) *)
  val get_creationTime: 'tags this -> DOMHighResTimeStamp.t [@@js.get "creationTime"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoPlaybackQuality/droppedVideoFrames) *)
  val get_droppedVideoFrames: 'tags this -> float [@@js.get "droppedVideoFrames"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoPlaybackQuality/totalVideoFrames) *)
  val get_totalVideoFrames: 'tags this -> float [@@js.get "totalVideoFrames"]
  val create: corruptedVideoFrames:float -> creationTime:DOMHighResTimeStamp.t -> droppedVideoFrames:float -> totalVideoFrames:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end
module VideoFrameCallbackMetadata : sig
  type t = [`VideoFrameCallbackMetadata] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VideoFrameCallbackMetadata]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VideoFrameCallbackMetadata]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoFrameCallbackMetadata ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_captureTime: 'tags this -> DOMHighResTimeStamp.t option [@@js.get "captureTime"]
  val set_captureTime: 'tags this -> DOMHighResTimeStamp.t -> unit [@@js.set "captureTime"]
  val get_expectedDisplayTime: 'tags this -> DOMHighResTimeStamp.t [@@js.get "expectedDisplayTime"]
  val set_expectedDisplayTime: 'tags this -> DOMHighResTimeStamp.t -> unit [@@js.set "expectedDisplayTime"]
  val get_height: 'tags this -> float [@@js.get "height"]
  val set_height: 'tags this -> float -> unit [@@js.set "height"]
  val get_mediaTime: 'tags this -> float [@@js.get "mediaTime"]
  val set_mediaTime: 'tags this -> float -> unit [@@js.set "mediaTime"]
  val get_presentationTime: 'tags this -> DOMHighResTimeStamp.t [@@js.get "presentationTime"]
  val set_presentationTime: 'tags this -> DOMHighResTimeStamp.t -> unit [@@js.set "presentationTime"]
  val get_presentedFrames: 'tags this -> float [@@js.get "presentedFrames"]
  val set_presentedFrames: 'tags this -> float -> unit [@@js.set "presentedFrames"]
  val get_processingDuration: 'tags this -> float option [@@js.get "processingDuration"]
  val set_processingDuration: 'tags this -> float -> unit [@@js.set "processingDuration"]
  val get_receiveTime: 'tags this -> DOMHighResTimeStamp.t option [@@js.get "receiveTime"]
  val set_receiveTime: 'tags this -> DOMHighResTimeStamp.t -> unit [@@js.set "receiveTime"]
  val get_rtpTimestamp: 'tags this -> float option [@@js.get "rtpTimestamp"]
  val set_rtpTimestamp: 'tags this -> float -> unit [@@js.set "rtpTimestamp"]
  val get_width: 'tags this -> float [@@js.get "width"]
  val set_width: 'tags this -> float -> unit [@@js.set "width"]
  val create: ?captureTime:DOMHighResTimeStamp.t -> expectedDisplayTime:DOMHighResTimeStamp.t -> height:float -> mediaTime:float -> presentationTime:DOMHighResTimeStamp.t -> presentedFrames:float -> ?processingDuration:float -> ?receiveTime:DOMHighResTimeStamp.t -> ?rtpTimestamp:float -> width:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module VideoFrameRequestCallback : sig
  type t = [`VideoFrameRequestCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VideoFrameRequestCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VideoFrameRequestCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoFrameRequestCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> now:DOMHighResTimeStamp.t -> metadata:VideoFrameCallbackMetadata.t -> unit [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module TextTrackMode : sig
  type t = ([`L_s333_disabled[@js "disabled"] | `L_s477_hidden[@js "hidden"] | `L_s883_showing[@js "showing"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module TextTrackKind : sig
  type t = ([`L_s230_captions[@js "captions"] | `L_s243_chapters[@js "chapters"] | `L_s316_descriptions[@js "descriptions"] | `L_s615_metadata[@js "metadata"] | `L_s936_subtitles[@js "subtitles"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  This interface also inherits properties from EventTarget.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrack)
*)
module[@js.scope "TextTrack"] rec TextTrack : sig
  type t = [`EventTarget | `TextTrack] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `TextTrack]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `TextTrack]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `TextTrack ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the text track cues from the text track list of cues that are currently active (i.e. that start before the current playback position and end after it), as a TextTrackCueList object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrack/activeCues)
  *)
  val get_activeCues: 'tags this -> TextTrackCueList.t option [@@js.get "activeCues"]
  
  (**
    Returns the text track list of cues, as a TextTrackCueList object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrack/cues)
  *)
  val get_cues: 'tags this -> TextTrackCueList.t option [@@js.get "cues"]
  
  (**
    Returns the ID of the given track.
    
    For in-band tracks, this is the ID that can be used with a fragment if the format supports media fragment syntax, and that can be used with the getTrackById() method.
    
    For TextTrack objects corresponding to track elements, this is the ID of the track element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrack/id)
  *)
  val get_id: 'tags this -> string [@@js.get "id"]
  
  (**
    Returns the text track in-band metadata track dispatch type string.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrack/inBandMetadataTrackDispatchType)
  *)
  val get_inBandMetadataTrackDispatchType: 'tags this -> string [@@js.get "inBandMetadataTrackDispatchType"]
  
  (**
    Returns the text track kind string.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrack/kind)
  *)
  val get_kind: 'tags this -> TextTrackKind.t [@@js.get "kind"]
  
  (**
    Returns the text track label, if there is one, or the empty string otherwise (indicating that a custom label probably needs to be generated from the other attributes of the object if the object is exposed to the user).
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrack/label)
  *)
  val get_label: 'tags this -> string [@@js.get "label"]
  
  (**
    Returns the text track language string.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrack/language)
  *)
  val get_language: 'tags this -> string [@@js.get "language"]
  
  (**
    Returns the text track mode, represented by a string from the following list:
    
    Can be set, to change the mode.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrack/mode)
  *)
  val get_mode: 'tags this -> TextTrackMode.t [@@js.get "mode"]
  
  (**
    Returns the text track mode, represented by a string from the following list:
    
    Can be set, to change the mode.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrack/mode)
  *)
  val set_mode: 'tags this -> TextTrackMode.t -> unit [@@js.set "mode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrack/cuechange_event) *)
  val get_oncuechange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "oncuechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrack/cuechange_event) *)
  val set_oncuechange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "oncuechange"]
  
  (**
    Adds the given cue to textTrack's text track list of cues.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrack/addCue)
  *)
  val addCue: 'tags this -> cue:TextTrackCue.t -> unit [@@js.call "addCue"]
  
  (**
    Removes the given cue from textTrack's text track list of cues.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrack/removeCue)
  *)
  val removeCue: 'tags this -> cue:TextTrackCue.t -> unit [@@js.call "removeCue"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'TextTrackEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'TextTrackEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  TextTrackCues represent a string of text that will be displayed for some duration of time on a TextTrack. This includes the start and end times that the cue will be displayed. A TextTrackCue cannot be used directly, instead one of the derived types (e.g. VTTCue) must be used.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrackCue)
*)
and[@js.scope "TextTrackCue"] TextTrackCue : sig
  type t = [`EventTarget | `TextTrackCue] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `TextTrackCue]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `TextTrackCue]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `TextTrackCue ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the text track cue end time, in seconds.
    
    Can be set.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrackCue/endTime)
  *)
  val get_endTime: 'tags this -> float [@@js.get "endTime"]
  
  (**
    Returns the text track cue end time, in seconds.
    
    Can be set.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrackCue/endTime)
  *)
  val set_endTime: 'tags this -> float -> unit [@@js.set "endTime"]
  
  (**
    Returns the text track cue identifier.
    
    Can be set.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrackCue/id)
  *)
  val get_id: 'tags this -> string [@@js.get "id"]
  
  (**
    Returns the text track cue identifier.
    
    Can be set.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrackCue/id)
  *)
  val set_id: 'tags this -> string -> unit [@@js.set "id"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrackCue/enter_event) *)
  val get_onenter: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onenter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrackCue/enter_event) *)
  val set_onenter: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onenter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrackCue/exit_event) *)
  val get_onexit: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onexit"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrackCue/exit_event) *)
  val set_onexit: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onexit"]
  
  (**
    Returns true if the text track cue pause-on-exit flag is set, false otherwise.
    
    Can be set.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrackCue/pauseOnExit)
  *)
  val get_pauseOnExit: 'tags this -> bool [@@js.get "pauseOnExit"]
  
  (**
    Returns true if the text track cue pause-on-exit flag is set, false otherwise.
    
    Can be set.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrackCue/pauseOnExit)
  *)
  val set_pauseOnExit: 'tags this -> bool -> unit [@@js.set "pauseOnExit"]
  
  (**
    Returns the text track cue start time, in seconds.
    
    Can be set.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrackCue/startTime)
  *)
  val get_startTime: 'tags this -> float [@@js.get "startTime"]
  
  (**
    Returns the text track cue start time, in seconds.
    
    Can be set.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrackCue/startTime)
  *)
  val set_startTime: 'tags this -> float -> unit [@@js.set "startTime"]
  
  (**
    Returns the TextTrack object to which this text track cue belongs, if any, or null otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrackCue/track)
  *)
  val get_track: 'tags this -> TextTrack.t option [@@js.get "track"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'TextTrackCueEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'TextTrackCueEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrackCueList) *)
and[@js.scope "TextTrackCueList"] TextTrackCueList : sig
  type t = [`TextTrackCueList] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`TextTrackCueList]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`TextTrackCueList]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `TextTrackCueList ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> TextTrackCue.t IterableIterator.t *)
  
  (**
    Returns the number of cues in the list.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrackCueList/length)
  *)
  val get_length: 'tags this -> float [@@js.get "length"]
  
  (**
    Returns the first text track cue (in text track cue order) with text track cue identifier id.
    
    Returns null if none of the cues have the given identifier or if the argument is the empty string.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrackCueList/getCueById)
  *)
  val getCueById: 'tags this -> id:string -> TextTrackCue.t option [@@js.call "getCueById"]
  val get: 'tags this -> float -> TextTrackCue.t [@@js.index_get]
  val set: 'tags this -> float -> TextTrackCue.t -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module TrackEventInit : sig
  type t = [`EventInit | `TrackEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `TrackEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `TrackEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `TrackEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_track: 'tags this -> TextTrack.t option [@@js.get "track"]
  val set_track: 'tags this -> TextTrack.t option -> unit [@@js.set "track"]
  val create: ?track:TextTrack.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The TrackEvent interface, part of the HTML DOM specification, is used for events which represent changes to the set of available tracks on an HTML media element; these events are addtrack and removetrack.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TrackEvent)
*)
module[@js.scope "TrackEvent"] TrackEvent : sig
  type t = [`Event | `TrackEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `TrackEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `TrackEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `TrackEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the track object (TextTrack, AudioTrack, or VideoTrack) to which the event relates.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TrackEvent/track)
  *)
  val get_track: 'tags this -> TextTrack.t option [@@js.get "track"]
  val create: ?track:TextTrack.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> ?eventInitDict:TrackEventInit.t -> unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrackList) *)
module[@js.scope "TextTrackList"] TextTrackList : sig
  type t = [`EventTarget | `TextTrackList] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `TextTrackList]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `TextTrackList]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `TextTrackList ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> TextTrack.t IterableIterator.t *)
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrackList/length) *)
  val get_length: 'tags this -> float [@@js.get "length"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrackList/addtrack_event) *)
  val get_onaddtrack: 'tags this -> (this:t -> ev:TrackEvent.t -> any) option [@@js.get "onaddtrack"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrackList/addtrack_event) *)
  val set_onaddtrack: 'tags this -> (this:t -> ev:TrackEvent.t -> any) option -> unit [@@js.set "onaddtrack"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrackList/change_event) *)
  val get_onchange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onchange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrackList/change_event) *)
  val set_onchange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onchange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrackList/removetrack_event) *)
  val get_onremovetrack: 'tags this -> (this:t -> ev:TrackEvent.t -> any) option [@@js.get "onremovetrack"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrackList/removetrack_event) *)
  val set_onremovetrack: 'tags this -> (this:t -> ev:TrackEvent.t -> any) option -> unit [@@js.set "onremovetrack"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextTrackList/getTrackById) *)
  val getTrackById: 'tags this -> id:string -> TextTrack.t option [@@js.call "getTrackById"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'TextTrackListEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'TextTrackListEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val get: 'tags this -> float -> TextTrack.t [@@js.index_get]
  val set: 'tags this -> float -> TextTrack.t -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module RemotePlaybackState : sig
  type t = ([`L_s274_connected[@js "connected"] | `L_s275_connecting[@js "connecting"] | `L_s336_disconnected[@js "disconnected"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RemotePlaybackAvailabilityCallback : sig
  type t = [`RemotePlaybackAvailabilityCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RemotePlaybackAvailabilityCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RemotePlaybackAvailabilityCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RemotePlaybackAvailabilityCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> available:bool -> unit [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RemotePlayback) *)
module[@js.scope "RemotePlayback"] RemotePlayback : sig
  type t = [`EventTarget | `RemotePlayback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `RemotePlayback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `RemotePlayback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RemotePlayback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RemotePlayback/connect_event) *)
  val get_onconnect: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onconnect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RemotePlayback/connect_event) *)
  val set_onconnect: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onconnect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RemotePlayback/connecting_event) *)
  val get_onconnecting: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onconnecting"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RemotePlayback/connecting_event) *)
  val set_onconnecting: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onconnecting"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RemotePlayback/disconnect_event) *)
  val get_ondisconnect: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "ondisconnect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RemotePlayback/disconnect_event) *)
  val set_ondisconnect: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "ondisconnect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RemotePlayback/state) *)
  val get_state: 'tags this -> RemotePlaybackState.t [@@js.get "state"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RemotePlayback/cancelWatchAvailability) *)
  val cancelWatchAvailability: 'tags this -> ?id:float -> unit -> unit Promise.t [@@js.call "cancelWatchAvailability"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RemotePlayback/prompt) *)
  val prompt: 'tags this -> unit Promise.t [@@js.call "prompt"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RemotePlayback/watchAvailability) *)
  val watchAvailability: 'tags this -> callback:RemotePlaybackAvailabilityCallback.t -> float Promise.t [@@js.call "watchAvailability"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'RemotePlaybackEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'RemotePlaybackEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module MediaTrackSettings : sig
  type t = [`MediaTrackSettings] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaTrackSettings]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaTrackSettings]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaTrackSettings ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_aspectRatio: 'tags this -> float option [@@js.get "aspectRatio"]
  val set_aspectRatio: 'tags this -> float -> unit [@@js.set "aspectRatio"]
  val get_autoGainControl: 'tags this -> bool option [@@js.get "autoGainControl"]
  val set_autoGainControl: 'tags this -> bool -> unit [@@js.set "autoGainControl"]
  val get_channelCount: 'tags this -> float option [@@js.get "channelCount"]
  val set_channelCount: 'tags this -> float -> unit [@@js.set "channelCount"]
  val get_deviceId: 'tags this -> string option [@@js.get "deviceId"]
  val set_deviceId: 'tags this -> string -> unit [@@js.set "deviceId"]
  val get_displaySurface: 'tags this -> string option [@@js.get "displaySurface"]
  val set_displaySurface: 'tags this -> string -> unit [@@js.set "displaySurface"]
  val get_echoCancellation: 'tags this -> bool option [@@js.get "echoCancellation"]
  val set_echoCancellation: 'tags this -> bool -> unit [@@js.set "echoCancellation"]
  val get_facingMode: 'tags this -> string option [@@js.get "facingMode"]
  val set_facingMode: 'tags this -> string -> unit [@@js.set "facingMode"]
  val get_frameRate: 'tags this -> float option [@@js.get "frameRate"]
  val set_frameRate: 'tags this -> float -> unit [@@js.set "frameRate"]
  val get_groupId: 'tags this -> string option [@@js.get "groupId"]
  val set_groupId: 'tags this -> string -> unit [@@js.set "groupId"]
  val get_height: 'tags this -> float option [@@js.get "height"]
  val set_height: 'tags this -> float -> unit [@@js.set "height"]
  val get_noiseSuppression: 'tags this -> bool option [@@js.get "noiseSuppression"]
  val set_noiseSuppression: 'tags this -> bool -> unit [@@js.set "noiseSuppression"]
  val get_sampleRate: 'tags this -> float option [@@js.get "sampleRate"]
  val set_sampleRate: 'tags this -> float -> unit [@@js.set "sampleRate"]
  val get_sampleSize: 'tags this -> float option [@@js.get "sampleSize"]
  val set_sampleSize: 'tags this -> float -> unit [@@js.set "sampleSize"]
  val get_width: 'tags this -> float option [@@js.get "width"]
  val set_width: 'tags this -> float -> unit [@@js.set "width"]
  val create: ?aspectRatio:float -> ?autoGainControl:bool -> ?channelCount:float -> ?deviceId:string -> ?displaySurface:string -> ?echoCancellation:bool -> ?facingMode:string -> ?frameRate:float -> ?groupId:string -> ?height:float -> ?noiseSuppression:bool -> ?sampleRate:float -> ?sampleSize:float -> ?width:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ULongRange : sig
  type t = [`ULongRange] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ULongRange]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ULongRange]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ULongRange ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_max: 'tags this -> float option [@@js.get "max"]
  val set_max: 'tags this -> float -> unit [@@js.set "max"]
  val get_min: 'tags this -> float option [@@js.get "min"]
  val set_min: 'tags this -> float -> unit [@@js.set "min"]
  val create: ?max:float -> ?min:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module DoubleRange : sig
  type t = [`DoubleRange] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DoubleRange]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DoubleRange]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DoubleRange ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_max: 'tags this -> float option [@@js.get "max"]
  val set_max: 'tags this -> float -> unit [@@js.set "max"]
  val get_min: 'tags this -> float option [@@js.get "min"]
  val set_min: 'tags this -> float -> unit [@@js.set "min"]
  val create: ?max:float -> ?min:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MediaTrackCapabilities : sig
  type t = [`MediaTrackCapabilities] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaTrackCapabilities]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaTrackCapabilities]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaTrackCapabilities ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_aspectRatio: 'tags this -> DoubleRange.t option [@@js.get "aspectRatio"]
  val set_aspectRatio: 'tags this -> DoubleRange.t -> unit [@@js.set "aspectRatio"]
  val get_autoGainControl: 'tags this -> bool list option [@@js.get "autoGainControl"]
  val set_autoGainControl: 'tags this -> bool list -> unit [@@js.set "autoGainControl"]
  val get_channelCount: 'tags this -> ULongRange.t option [@@js.get "channelCount"]
  val set_channelCount: 'tags this -> ULongRange.t -> unit [@@js.set "channelCount"]
  val get_deviceId: 'tags this -> string option [@@js.get "deviceId"]
  val set_deviceId: 'tags this -> string -> unit [@@js.set "deviceId"]
  val get_displaySurface: 'tags this -> string option [@@js.get "displaySurface"]
  val set_displaySurface: 'tags this -> string -> unit [@@js.set "displaySurface"]
  val get_echoCancellation: 'tags this -> bool list option [@@js.get "echoCancellation"]
  val set_echoCancellation: 'tags this -> bool list -> unit [@@js.set "echoCancellation"]
  val get_facingMode: 'tags this -> string list option [@@js.get "facingMode"]
  val set_facingMode: 'tags this -> string list -> unit [@@js.set "facingMode"]
  val get_frameRate: 'tags this -> DoubleRange.t option [@@js.get "frameRate"]
  val set_frameRate: 'tags this -> DoubleRange.t -> unit [@@js.set "frameRate"]
  val get_groupId: 'tags this -> string option [@@js.get "groupId"]
  val set_groupId: 'tags this -> string -> unit [@@js.set "groupId"]
  val get_height: 'tags this -> ULongRange.t option [@@js.get "height"]
  val set_height: 'tags this -> ULongRange.t -> unit [@@js.set "height"]
  val get_noiseSuppression: 'tags this -> bool list option [@@js.get "noiseSuppression"]
  val set_noiseSuppression: 'tags this -> bool list -> unit [@@js.set "noiseSuppression"]
  val get_sampleRate: 'tags this -> ULongRange.t option [@@js.get "sampleRate"]
  val set_sampleRate: 'tags this -> ULongRange.t -> unit [@@js.set "sampleRate"]
  val get_sampleSize: 'tags this -> ULongRange.t option [@@js.get "sampleSize"]
  val set_sampleSize: 'tags this -> ULongRange.t -> unit [@@js.set "sampleSize"]
  val get_width: 'tags this -> ULongRange.t option [@@js.get "width"]
  val set_width: 'tags this -> ULongRange.t -> unit [@@js.set "width"]
  val create: ?aspectRatio:DoubleRange.t -> ?autoGainControl:bool list -> ?channelCount:ULongRange.t -> ?deviceId:string -> ?displaySurface:string -> ?echoCancellation:bool list -> ?facingMode:string list -> ?frameRate:DoubleRange.t -> ?groupId:string -> ?height:ULongRange.t -> ?noiseSuppression:bool list -> ?sampleRate:ULongRange.t -> ?sampleSize:ULongRange.t -> ?width:ULongRange.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MediaStreamTrackState : sig
  type t = ([`L_s365_ended[@js "ended"] | `L_s569_live[@js "live"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module ConstrainULongRange : sig
  type t = [`ConstrainULongRange | `ULongRange] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ConstrainULongRange | `ULongRange]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ConstrainULongRange | `ULongRange]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ConstrainULongRange ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_exact: 'tags this -> float option [@@js.get "exact"]
  val set_exact: 'tags this -> float -> unit [@@js.set "exact"]
  val get_ideal: 'tags this -> float option [@@js.get "ideal"]
  val set_ideal: 'tags this -> float -> unit [@@js.set "ideal"]
  val create: ?exact:float -> ?ideal:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ConstrainULong : sig
  type t = ([`Number of float | `Other of ConstrainULongRange.t] [@js.union on_field "dummy"]) Primitive.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module ConstrainDoubleRange : sig
  type t = [`ConstrainDoubleRange | `DoubleRange] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ConstrainDoubleRange | `DoubleRange]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ConstrainDoubleRange | `DoubleRange]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ConstrainDoubleRange ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_exact: 'tags this -> float option [@@js.get "exact"]
  val set_exact: 'tags this -> float -> unit [@@js.set "exact"]
  val get_ideal: 'tags this -> float option [@@js.get "ideal"]
  val set_ideal: 'tags this -> float -> unit [@@js.set "ideal"]
  val create: ?exact:float -> ?ideal:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ConstrainDouble : sig
  type t = ([`Number of float | `Other of ConstrainDoubleRange.t] [@js.union on_field "dummy"]) Primitive.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module ConstrainDOMStringParameters : sig
  type t = [`ConstrainDOMStringParameters] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ConstrainDOMStringParameters]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ConstrainDOMStringParameters]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ConstrainDOMStringParameters ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_exact: 'tags this -> ([`String of string | `Undefined | `Other of string list] [@js.union on_field "dummy"]) Primitive.t [@@js.get "exact"]
  val set_exact: 'tags this -> ([`U1 of string | `U2 of string list] [@js.union]) -> unit [@@js.set "exact"]
  val get_ideal: 'tags this -> ([`String of string | `Undefined | `Other of string list] [@js.union on_field "dummy"]) Primitive.t [@@js.get "ideal"]
  val set_ideal: 'tags this -> ([`U1 of string | `U2 of string list] [@js.union]) -> unit [@@js.set "ideal"]
  val create: ?exact:([`String of string | `Other of string list] [@js.union on_field "dummy"]) Primitive.t -> ?ideal:([`String of string | `Other of string list] [@js.union on_field "dummy"]) Primitive.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ConstrainDOMString : sig
  type t = ([`String of string | `Other of (string list, ConstrainDOMStringParameters.t) union2] [@js.union on_field "dummy"]) Primitive.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module ConstrainBooleanParameters : sig
  type t = [`ConstrainBooleanParameters] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ConstrainBooleanParameters]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ConstrainBooleanParameters]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ConstrainBooleanParameters ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_exact: 'tags this -> bool option [@@js.get "exact"]
  val set_exact: 'tags this -> bool -> unit [@@js.set "exact"]
  val get_ideal: 'tags this -> bool option [@@js.get "ideal"]
  val set_ideal: 'tags this -> bool -> unit [@@js.set "ideal"]
  val create: ?exact:bool -> ?ideal:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ConstrainBoolean : sig
  type t = ([`Boolean of bool | `Other of ConstrainBooleanParameters.t] [@js.union on_field "dummy"]) Primitive.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module MediaTrackConstraintSet : sig
  type t = [`MediaTrackConstraintSet] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaTrackConstraintSet]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaTrackConstraintSet]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaTrackConstraintSet ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_aspectRatio: 'tags this -> ConstrainDouble.t option [@@js.get "aspectRatio"]
  val set_aspectRatio: 'tags this -> ConstrainDouble.t -> unit [@@js.set "aspectRatio"]
  val get_autoGainControl: 'tags this -> ConstrainBoolean.t option [@@js.get "autoGainControl"]
  val set_autoGainControl: 'tags this -> ConstrainBoolean.t -> unit [@@js.set "autoGainControl"]
  val get_channelCount: 'tags this -> ConstrainULong.t option [@@js.get "channelCount"]
  val set_channelCount: 'tags this -> ConstrainULong.t -> unit [@@js.set "channelCount"]
  val get_deviceId: 'tags this -> ConstrainDOMString.t option [@@js.get "deviceId"]
  val set_deviceId: 'tags this -> ConstrainDOMString.t -> unit [@@js.set "deviceId"]
  val get_displaySurface: 'tags this -> ConstrainDOMString.t option [@@js.get "displaySurface"]
  val set_displaySurface: 'tags this -> ConstrainDOMString.t -> unit [@@js.set "displaySurface"]
  val get_echoCancellation: 'tags this -> ConstrainBoolean.t option [@@js.get "echoCancellation"]
  val set_echoCancellation: 'tags this -> ConstrainBoolean.t -> unit [@@js.set "echoCancellation"]
  val get_facingMode: 'tags this -> ConstrainDOMString.t option [@@js.get "facingMode"]
  val set_facingMode: 'tags this -> ConstrainDOMString.t -> unit [@@js.set "facingMode"]
  val get_frameRate: 'tags this -> ConstrainDouble.t option [@@js.get "frameRate"]
  val set_frameRate: 'tags this -> ConstrainDouble.t -> unit [@@js.set "frameRate"]
  val get_groupId: 'tags this -> ConstrainDOMString.t option [@@js.get "groupId"]
  val set_groupId: 'tags this -> ConstrainDOMString.t -> unit [@@js.set "groupId"]
  val get_height: 'tags this -> ConstrainULong.t option [@@js.get "height"]
  val set_height: 'tags this -> ConstrainULong.t -> unit [@@js.set "height"]
  val get_noiseSuppression: 'tags this -> ConstrainBoolean.t option [@@js.get "noiseSuppression"]
  val set_noiseSuppression: 'tags this -> ConstrainBoolean.t -> unit [@@js.set "noiseSuppression"]
  val get_sampleRate: 'tags this -> ConstrainULong.t option [@@js.get "sampleRate"]
  val set_sampleRate: 'tags this -> ConstrainULong.t -> unit [@@js.set "sampleRate"]
  val get_sampleSize: 'tags this -> ConstrainULong.t option [@@js.get "sampleSize"]
  val set_sampleSize: 'tags this -> ConstrainULong.t -> unit [@@js.set "sampleSize"]
  val get_width: 'tags this -> ConstrainULong.t option [@@js.get "width"]
  val set_width: 'tags this -> ConstrainULong.t -> unit [@@js.set "width"]
  val create: ?aspectRatio:ConstrainDouble.t -> ?autoGainControl:ConstrainBoolean.t -> ?channelCount:ConstrainULong.t -> ?deviceId:ConstrainDOMString.t -> ?displaySurface:ConstrainDOMString.t -> ?echoCancellation:ConstrainBoolean.t -> ?facingMode:ConstrainDOMString.t -> ?frameRate:ConstrainDouble.t -> ?groupId:ConstrainDOMString.t -> ?height:ConstrainULong.t -> ?noiseSuppression:ConstrainBoolean.t -> ?sampleRate:ConstrainULong.t -> ?sampleSize:ConstrainULong.t -> ?width:ConstrainULong.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MediaTrackConstraints : sig
  type t = [`MediaTrackConstraintSet | `MediaTrackConstraints] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaTrackConstraintSet | `MediaTrackConstraints]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaTrackConstraintSet | `MediaTrackConstraints]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaTrackConstraints ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_advanced: 'tags this -> MediaTrackConstraintSet.t list option [@@js.get "advanced"]
  val set_advanced: 'tags this -> MediaTrackConstraintSet.t list -> unit [@@js.set "advanced"]
  val create: ?advanced:MediaTrackConstraintSet.t list -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  A single media track within a stream; typically, these are audio or video tracks, but other track types may exist as well.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack)
*)
module[@js.scope "MediaStreamTrack"] MediaStreamTrack : sig
  type t = [`EventTarget | `MediaStreamTrack] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `MediaStreamTrack]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `MediaStreamTrack]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaStreamTrack ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/contentHint) *)
  val get_contentHint: 'tags this -> string [@@js.get "contentHint"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/contentHint) *)
  val set_contentHint: 'tags this -> string -> unit [@@js.set "contentHint"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/enabled) *)
  val get_enabled: 'tags this -> bool [@@js.get "enabled"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/enabled) *)
  val set_enabled: 'tags this -> bool -> unit [@@js.set "enabled"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/id) *)
  val get_id: 'tags this -> string [@@js.get "id"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/kind) *)
  val get_kind: 'tags this -> string [@@js.get "kind"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/label) *)
  val get_label: 'tags this -> string [@@js.get "label"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/muted) *)
  val get_muted: 'tags this -> bool [@@js.get "muted"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/ended_event) *)
  val get_onended: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onended"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/ended_event) *)
  val set_onended: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onended"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/mute_event) *)
  val get_onmute: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onmute"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/mute_event) *)
  val set_onmute: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onmute"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/unmute_event) *)
  val get_onunmute: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onunmute"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/unmute_event) *)
  val set_onunmute: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onunmute"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/readyState) *)
  val get_readyState: 'tags this -> MediaStreamTrackState.t [@@js.get "readyState"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/applyConstraints) *)
  val applyConstraints: 'tags this -> ?constraints:MediaTrackConstraints.t -> unit -> unit Promise.t [@@js.call "applyConstraints"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/clone) *)
  val clone: 'tags this -> t [@@js.call "clone"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/getCapabilities) *)
  val getCapabilities: 'tags this -> MediaTrackCapabilities.t [@@js.call "getCapabilities"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/getConstraints) *)
  val getConstraints: 'tags this -> MediaTrackConstraints.t [@@js.call "getConstraints"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/getSettings) *)
  val getSettings: 'tags this -> MediaTrackSettings.t [@@js.call "getSettings"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/stop) *)
  val stop: 'tags this -> unit [@@js.call "stop"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'MediaStreamTrackEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'MediaStreamTrackEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module MediaStreamTrackEventInit : sig
  type t = [`EventInit | `MediaStreamTrackEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `MediaStreamTrackEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `MediaStreamTrackEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaStreamTrackEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_track: 'tags this -> MediaStreamTrack.t [@@js.get "track"]
  val set_track: 'tags this -> MediaStreamTrack.t -> unit [@@js.set "track"]
  val create: track:MediaStreamTrack.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Events which indicate that a MediaStream has had tracks added to or removed from the stream through calls to Media Stream API methods. These events are sent to the stream when these changes occur.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStreamTrackEvent)
*)
module[@js.scope "MediaStreamTrackEvent"] MediaStreamTrackEvent : sig
  type t = [`Event | `MediaStreamTrackEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `MediaStreamTrackEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `MediaStreamTrackEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaStreamTrackEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStreamTrackEvent/track) *)
  val get_track: 'tags this -> MediaStreamTrack.t [@@js.get "track"]
  val create: track:MediaStreamTrack.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> eventInitDict:MediaStreamTrackEventInit.t -> t [@@js.create]
end

(**
  A stream of media content. A stream consists of several tracks such asÂ video or audio tracks. Each track is specified as an instance of MediaStreamTrack.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStream)
*)
module[@js.scope "MediaStream"] MediaStream : sig
  type t = [`EventTarget | `MediaStream] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `MediaStream]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `MediaStream]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaStream ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStream/active) *)
  val get_active: 'tags this -> bool [@@js.get "active"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStream/id) *)
  val get_id: 'tags this -> string [@@js.get "id"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStream/addtrack_event) *)
  val get_onaddtrack: 'tags this -> (this:t -> ev:MediaStreamTrackEvent.t -> any) option [@@js.get "onaddtrack"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStream/addtrack_event) *)
  val set_onaddtrack: 'tags this -> (this:t -> ev:MediaStreamTrackEvent.t -> any) option -> unit [@@js.set "onaddtrack"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStream/removetrack_event) *)
  val get_onremovetrack: 'tags this -> (this:t -> ev:MediaStreamTrackEvent.t -> any) option [@@js.get "onremovetrack"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStream/removetrack_event) *)
  val set_onremovetrack: 'tags this -> (this:t -> ev:MediaStreamTrackEvent.t -> any) option -> unit [@@js.set "onremovetrack"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStream/addTrack) *)
  val addTrack: 'tags this -> track:MediaStreamTrack.t -> unit [@@js.call "addTrack"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStream/clone) *)
  val clone: 'tags this -> t [@@js.call "clone"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStream/getAudioTracks) *)
  val getAudioTracks: 'tags this -> MediaStreamTrack.t list [@@js.call "getAudioTracks"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStream/getTrackById) *)
  val getTrackById: 'tags this -> trackId:string -> MediaStreamTrack.t option [@@js.call "getTrackById"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStream/getTracks) *)
  val getTracks: 'tags this -> MediaStreamTrack.t list [@@js.call "getTracks"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStream/getVideoTracks) *)
  val getVideoTracks: 'tags this -> MediaStreamTrack.t list [@@js.call "getVideoTracks"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStream/removeTrack) *)
  val removeTrack: 'tags this -> track:MediaStreamTrack.t -> unit [@@js.call "removeTrack"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'MediaStreamEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'MediaStreamEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  val create': t -> t [@@js.create]
  val create'': MediaStreamTrack.t list -> t [@@js.create]
end
module MediaProvider : sig
  type t = (Blob.t, MediaSource.t, MediaStream.t) union3
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  An error which occurred while handling media in an HTML media element based on HTMLMediaElement, such as <audio> or <video>.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaError)
*)
module[@js.scope "MediaError"] MediaError : sig
  type t = [`MediaError] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaError]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaError]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaError ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaError/code) *)
  val get_code: 'tags this -> float [@@js.get "code"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaError/message) *)
  val get_message: 'tags this -> string [@@js.get "message"]
  val get_MEDIA_ERR_ABORTED: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "MEDIA_ERR_ABORTED"]
  val get_MEDIA_ERR_NETWORK: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "MEDIA_ERR_NETWORK"]
  val get_MEDIA_ERR_DECODE: 'tags this -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "MEDIA_ERR_DECODE"]
  val get_MEDIA_ERR_SRC_NOT_SUPPORTED: 'tags this -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "MEDIA_ERR_SRC_NOT_SUPPORTED"]
  val create: code:float -> message:string -> media_err_aborted:(([`L_n_1[@js 1]] [@js.enum])[@js "MEDIA_ERR_ABORTED"]) -> media_err_network:(([`L_n_2[@js 2]] [@js.enum])[@js "MEDIA_ERR_NETWORK"]) -> media_err_decode:(([`L_n_3[@js 3]] [@js.enum])[@js "MEDIA_ERR_DECODE"]) -> media_err_src_not_supported:(([`L_n_4[@js 4]] [@js.enum])[@js "MEDIA_ERR_SRC_NOT_SUPPORTED"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
  val media_err_aborted: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "MEDIA_ERR_ABORTED"]
  val media_err_network: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "MEDIA_ERR_NETWORK"]
  val media_err_decode: unit -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "MEDIA_ERR_DECODE"]
  val media_err_src_not_supported: unit -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "MEDIA_ERR_SRC_NOT_SUPPORTED"]
end
module MediaEncryptedEventInit : sig
  type t = [`EventInit | `MediaEncryptedEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `MediaEncryptedEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `MediaEncryptedEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaEncryptedEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_initData: 'tags this -> ArrayBuffer.t option [@@js.get "initData"]
  val set_initData: 'tags this -> ArrayBuffer.t option -> unit [@@js.set "initData"]
  val get_initDataType: 'tags this -> string option [@@js.get "initDataType"]
  val set_initDataType: 'tags this -> string -> unit [@@js.set "initDataType"]
  val create: ?initData:ArrayBuffer.t -> ?initDataType:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaEncryptedEvent) *)
module[@js.scope "MediaEncryptedEvent"] MediaEncryptedEvent : sig
  type t = [`Event | `MediaEncryptedEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `MediaEncryptedEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `MediaEncryptedEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaEncryptedEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaEncryptedEvent/initData) *)
  val get_initData: 'tags this -> ArrayBuffer.t option [@@js.get "initData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaEncryptedEvent/initDataType) *)
  val get_initDataType: 'tags this -> string [@@js.get "initDataType"]
  val create: ?initData:ArrayBuffer.t -> initDataType:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> ?eventInitDict:MediaEncryptedEventInit.t -> unit -> t [@@js.create]
end
module CanPlayTypeResult : sig
  type t = ([`L_s0[@js ""] | `L_s604_maybe[@js "maybe"] | `L_s781_probably[@js "probably"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  The SVGStringList defines a list of DOMString objects.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGStringList)
*)
module[@js.scope "SVGStringList"] SVGStringList : sig
  type t = [`SVGStringList] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SVGStringList]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SVGStringList]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGStringList ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> string IterableIterator.t *)
  val get_length: 'tags this -> float [@@js.get "length"]
  val get_numberOfItems: 'tags this -> float [@@js.get "numberOfItems"]
  val appendItem: 'tags this -> newItem:string -> string [@@js.call "appendItem"]
  val clear: 'tags this -> unit [@@js.call "clear"]
  val getItem: 'tags this -> index:float -> string [@@js.call "getItem"]
  val initialize: 'tags this -> newItem:string -> string [@@js.call "initialize"]
  val insertItemBefore: 'tags this -> newItem:string -> index:float -> string [@@js.call "insertItemBefore"]
  val removeItem: 'tags this -> index:float -> string [@@js.call "removeItem"]
  val replaceItem: 'tags this -> newItem:string -> index:float -> string [@@js.call "replaceItem"]
  val get: 'tags this -> float -> string [@@js.index_get]
  val set: 'tags this -> float -> string -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module SVGTests : sig
  type t = [`SVGTests] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SVGTests]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SVGTests]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGTests ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_requiredExtensions: 'tags this -> SVGStringList.t [@@js.get "requiredExtensions"]
  val get_systemLanguage: 'tags this -> SVGStringList.t [@@js.get "systemLanguage"]
  val create: requiredExtensions:SVGStringList.t -> systemLanguage:SVGStringList.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module StorageEventInit : sig
  type t = [`EventInit | `StorageEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `StorageEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `StorageEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `StorageEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_key: 'tags this -> string option [@@js.get "key"]
  val set_key: 'tags this -> string option -> unit [@@js.set "key"]
  val get_newValue: 'tags this -> string option [@@js.get "newValue"]
  val set_newValue: 'tags this -> string option -> unit [@@js.set "newValue"]
  val get_oldValue: 'tags this -> string option [@@js.get "oldValue"]
  val set_oldValue: 'tags this -> string option -> unit [@@js.set "oldValue"]
  val get_storageArea: 'tags this -> Storage.t option [@@js.get "storageArea"]
  val set_storageArea: 'tags this -> Storage.t option -> unit [@@js.set "storageArea"]
  val get_url: 'tags this -> string option [@@js.get "url"]
  val set_url: 'tags this -> string -> unit [@@js.set "url"]
  val create: ?key:string -> ?newValue:string -> ?oldValue:string -> ?storageArea:Storage.t -> ?url:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  A StorageEvent is sent to a window when a storage area it has access to is changed within the context of another document.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StorageEvent)
*)
module[@js.scope "StorageEvent"] StorageEvent : sig
  type t = [`Event | `StorageEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `StorageEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `StorageEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `StorageEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the key of the storage item being changed.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StorageEvent/key)
  *)
  val get_key: 'tags this -> string option [@@js.get "key"]
  
  (**
    Returns the new value of the key of the storage item whose value is being changed.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StorageEvent/newValue)
  *)
  val get_newValue: 'tags this -> string option [@@js.get "newValue"]
  
  (**
    Returns the old value of the key of the storage item whose value is being changed.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StorageEvent/oldValue)
  *)
  val get_oldValue: 'tags this -> string option [@@js.get "oldValue"]
  
  (**
    Returns the Storage object that was affected.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StorageEvent/storageArea)
  *)
  val get_storageArea: 'tags this -> Storage.t option [@@js.get "storageArea"]
  
  (**
    Returns the URL of the document whose storage item changed.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StorageEvent/url)
  *)
  val get_url: 'tags this -> string [@@js.get "url"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StorageEvent/initStorageEvent) *)
  val initStorageEvent: 'tags this -> type_:string -> ?bubbles:bool -> ?cancelable:bool -> ?key:string option -> ?oldValue:string option -> ?newValue:string option -> ?url:([`U1 of string | `U2 of URL.t] [@js.union]) -> ?storageArea:Storage.t option -> unit -> unit [@@js.call "initStorageEvent"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: type_:string -> ?eventInitDict:StorageEventInit.t -> unit -> t [@@js.create]
end
module PromiseRejectionEventInit : sig
  type t = [`EventInit | `PromiseRejectionEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `PromiseRejectionEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `PromiseRejectionEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PromiseRejectionEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_promise: 'tags this -> any Promise.t [@@js.get "promise"]
  val set_promise: 'tags this -> any Promise.t -> unit [@@js.set "promise"]
  val get_reason: 'tags this -> any option [@@js.get "reason"]
  val set_reason: 'tags this -> any -> unit [@@js.set "reason"]
  val create: promise:any Promise.t -> ?reason:any -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PromiseRejectionEvent) *)
module[@js.scope "PromiseRejectionEvent"] PromiseRejectionEvent : sig
  type t = [`Event | `PromiseRejectionEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `PromiseRejectionEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `PromiseRejectionEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PromiseRejectionEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PromiseRejectionEvent/promise) *)
  val get_promise: 'tags this -> any Promise.t [@@js.get "promise"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PromiseRejectionEvent/reason) *)
  val get_reason: 'tags this -> any [@@js.get "reason"]
  val create: promise:any Promise.t -> reason:any -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> eventInitDict:PromiseRejectionEventInit.t -> t [@@js.create]
end
module PopStateEventInit : sig
  type t = [`EventInit | `PopStateEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `PopStateEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `PopStateEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PopStateEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_state: 'tags this -> any option [@@js.get "state"]
  val set_state: 'tags this -> any -> unit [@@js.set "state"]
  val create: ?state:any -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  PopStateEvent is an event handler for the popstate event on the window.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PopStateEvent)
*)
module[@js.scope "PopStateEvent"] PopStateEvent : sig
  type t = [`Event | `PopStateEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `PopStateEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `PopStateEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PopStateEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns a copy of the information that was provided to pushState() or replaceState().
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PopStateEvent/state)
  *)
  val get_state: 'tags this -> any [@@js.get "state"]
  val create: state:any -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> ?eventInitDict:PopStateEventInit.t -> unit -> t [@@js.create]
end
module PageTransitionEventInit : sig
  type t = [`EventInit | `PageTransitionEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `PageTransitionEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `PageTransitionEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PageTransitionEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_persisted: 'tags this -> bool option [@@js.get "persisted"]
  val set_persisted: 'tags this -> bool -> unit [@@js.set "persisted"]
  val create: ?persisted:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The PageTransitionEvent is fired when a document is being loaded or unloaded.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PageTransitionEvent)
*)
module[@js.scope "PageTransitionEvent"] PageTransitionEvent : sig
  type t = [`Event | `PageTransitionEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `PageTransitionEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `PageTransitionEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PageTransitionEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    For the pageshow event, returns false if the page is newly being loaded (and the load event will fire). Otherwise, returns true.
    
    For the pagehide event, returns false if the page is going away for the last time. Otherwise, returns true, meaning that (if nothing conspires to make the page unsalvageable) the page might be reused if the user navigates back to this page.
    
    Things that can cause the page to be unsalvageable include:
    
    The user agent decided to not keep the Document alive in a session history entry after unload
    Having iframes that are not salvageable
    Active WebSocket objects
    Aborting a Document
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PageTransitionEvent/persisted)
  *)
  val get_persisted: 'tags this -> bool [@@js.get "persisted"]
  val create: persisted:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> ?eventInitDict:PageTransitionEventInit.t -> unit -> t [@@js.create]
end
module HashChangeEventInit : sig
  type t = [`EventInit | `HashChangeEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `HashChangeEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `HashChangeEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HashChangeEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_newURL: 'tags this -> string option [@@js.get "newURL"]
  val set_newURL: 'tags this -> string -> unit [@@js.set "newURL"]
  val get_oldURL: 'tags this -> string option [@@js.get "oldURL"]
  val set_oldURL: 'tags this -> string -> unit [@@js.set "oldURL"]
  val create: ?newURL:string -> ?oldURL:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Events that fire when the fragment identifier of the URL has changed.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HashChangeEvent)
*)
module[@js.scope "HashChangeEvent"] HashChangeEvent : sig
  type t = [`Event | `HashChangeEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `HashChangeEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `HashChangeEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HashChangeEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the URL of the session history entry that is now current.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HashChangeEvent/newURL)
  *)
  val get_newURL: 'tags this -> string [@@js.get "newURL"]
  
  (**
    Returns the URL of the session history entry that was previously current.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HashChangeEvent/oldURL)
  *)
  val get_oldURL: 'tags this -> string [@@js.get "oldURL"]
  val create: newURL:string -> oldURL:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> ?eventInitDict:HashChangeEventInit.t -> unit -> t [@@js.create]
end
module GamepadMappingType : sig
  type t = ([`L_s0[@js ""] | `L_s1065_xr_standard[@js "xr-standard"] | `L_s918_standard[@js "standard"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module GamepadHapticsResult : sig
  type t = ([`L_s265_complete[@js "complete"] | `L_s769_preempted[@js "preempted"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module GamepadHapticEffectType : sig
  type t = ([`L_s353_dual_rumble[@js "dual-rumble"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module GamepadHapticActuatorType : sig
  type t = ([`L_s1035_vibration[@js "vibration"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module GamepadEffectParameters : sig
  type t = [`GamepadEffectParameters] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`GamepadEffectParameters]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`GamepadEffectParameters]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `GamepadEffectParameters ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_duration: 'tags this -> float option [@@js.get "duration"]
  val set_duration: 'tags this -> float -> unit [@@js.set "duration"]
  val get_startDelay: 'tags this -> float option [@@js.get "startDelay"]
  val set_startDelay: 'tags this -> float -> unit [@@js.set "startDelay"]
  val get_strongMagnitude: 'tags this -> float option [@@js.get "strongMagnitude"]
  val set_strongMagnitude: 'tags this -> float -> unit [@@js.set "strongMagnitude"]
  val get_weakMagnitude: 'tags this -> float option [@@js.get "weakMagnitude"]
  val set_weakMagnitude: 'tags this -> float -> unit [@@js.set "weakMagnitude"]
  val create: ?duration:float -> ?startDelay:float -> ?strongMagnitude:float -> ?weakMagnitude:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  This Gamepad API interface represents hardware in the controller designed to provide haptic feedback to the user (if available), most commonly vibration hardware.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/GamepadHapticActuator)
*)
module[@js.scope "GamepadHapticActuator"] GamepadHapticActuator : sig
  type t = [`GamepadHapticActuator] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`GamepadHapticActuator]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`GamepadHapticActuator]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `GamepadHapticActuator ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/GamepadHapticActuator/type) *)
  val get_type: 'tags this -> GamepadHapticActuatorType.t [@@js.get "type"]
  val playEffect: 'tags this -> type_:GamepadHapticEffectType.t -> ?params:GamepadEffectParameters.t -> unit -> GamepadHapticsResult.t Promise.t [@@js.call "playEffect"]
  val reset: 'tags this -> GamepadHapticsResult.t Promise.t [@@js.call "reset"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  An individual button of a gamepad or other controller, allowing access to the current state of different types of buttons available on the control device.
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/GamepadButton)
*)
module[@js.scope "GamepadButton"] GamepadButton : sig
  type t = [`GamepadButton] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`GamepadButton]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`GamepadButton]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `GamepadButton ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/GamepadButton/pressed) *)
  val get_pressed: 'tags this -> bool [@@js.get "pressed"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/GamepadButton/touched) *)
  val get_touched: 'tags this -> bool [@@js.get "touched"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/GamepadButton/value) *)
  val get_value: 'tags this -> float [@@js.get "value"]
  val create: pressed:bool -> touched:bool -> value:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(**
  This Gamepad API interface defines an individual gamepad or other controller, allowing access to information such as button presses, axis positions, and id.
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Gamepad)
*)
module[@js.scope "Gamepad"] Gamepad : sig
  type t = [`Gamepad] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Gamepad]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Gamepad]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Gamepad ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Gamepad/axes) *)
  val get_axes: 'tags this -> float list [@@js.get "axes"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Gamepad/buttons) *)
  val get_buttons: 'tags this -> GamepadButton.t list [@@js.get "buttons"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Gamepad/connected) *)
  val get_connected: 'tags this -> bool [@@js.get "connected"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Gamepad/id) *)
  val get_id: 'tags this -> string [@@js.get "id"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Gamepad/index) *)
  val get_index: 'tags this -> float [@@js.get "index"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Gamepad/mapping) *)
  val get_mapping: 'tags this -> GamepadMappingType.t [@@js.get "mapping"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Gamepad/timestamp) *)
  val get_timestamp: 'tags this -> DOMHighResTimeStamp.t [@@js.get "timestamp"]
  val get_vibrationActuator: 'tags this -> GamepadHapticActuator.t option [@@js.get "vibrationActuator"]
  val create: axes:float list -> buttons:GamepadButton.t list -> connected:bool -> id:string -> index:float -> mapping:GamepadMappingType.t -> timestamp:DOMHighResTimeStamp.t -> ?vibrationActuator:GamepadHapticActuator.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end
module GamepadEventInit : sig
  type t = [`EventInit | `GamepadEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `GamepadEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `GamepadEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `GamepadEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_gamepad: 'tags this -> Gamepad.t [@@js.get "gamepad"]
  val set_gamepad: 'tags this -> Gamepad.t -> unit [@@js.set "gamepad"]
  val create: gamepad:Gamepad.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  This Gamepad API interface contains references to gamepads connected to the system, which is what the gamepad events Window.gamepadconnected and Window.gamepaddisconnected are fired in response to.
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/GamepadEvent)
*)
module[@js.scope "GamepadEvent"] GamepadEvent : sig
  type t = [`Event | `GamepadEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `GamepadEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `GamepadEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `GamepadEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/GamepadEvent/gamepad) *)
  val get_gamepad: 'tags this -> Gamepad.t [@@js.get "gamepad"]
  val create: gamepad:Gamepad.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> eventInitDict:GamepadEventInit.t -> t [@@js.create]
end

(**
  The beforeunload event is fired when the window, the document and its resources are about to be unloaded.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BeforeUnloadEvent)
*)
module[@js.scope "BeforeUnloadEvent"] BeforeUnloadEvent : sig
  type t = [`BeforeUnloadEvent | `Event] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`BeforeUnloadEvent | `Event]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`BeforeUnloadEvent | `Event]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `BeforeUnloadEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** @deprecated  *)
  val get_returnValue: 'tags this -> any [@@js.get "returnValue"]
  
  (** @deprecated  *)
  val set_returnValue: 'tags this -> any -> unit [@@js.set "returnValue"]
  val create: returnValue:any -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(**
  The SVGAnimatedStringÂ interface represents string attributes which can be animated from each SVG declaration. You need to create SVG attribute before doing anything else, everything should be declaredÂ inside this.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGAnimatedString)
*)
module[@js.scope "SVGAnimatedString"] SVGAnimatedString : sig
  type t = [`SVGAnimatedString] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SVGAnimatedString]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SVGAnimatedString]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGAnimatedString ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGAnimatedString/animVal) *)
  val get_animVal: 'tags this -> string [@@js.get "animVal"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGAnimatedString/baseVal) *)
  val get_baseVal: 'tags this -> string [@@js.get "baseVal"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGAnimatedString/baseVal) *)
  val set_baseVal: 'tags this -> string -> unit [@@js.set "baseVal"]
  val create: animVal:string -> baseVal:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end
module SVGURIReference : sig
  type t = [`SVGURIReference] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SVGURIReference]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SVGURIReference]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGURIReference ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_href: 'tags this -> SVGAnimatedString.t [@@js.get "href"]
  val create: href:SVGAnimatedString.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Used for attributes whose value must be a constant from a particular enumeration and which can be animated.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGAnimatedEnumeration)
*)
module[@js.scope "SVGAnimatedEnumeration"] SVGAnimatedEnumeration : sig
  type t = [`SVGAnimatedEnumeration] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SVGAnimatedEnumeration]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SVGAnimatedEnumeration]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGAnimatedEnumeration ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_animVal: 'tags this -> float [@@js.get "animVal"]
  val get_baseVal: 'tags this -> float [@@js.get "baseVal"]
  val set_baseVal: 'tags this -> float -> unit [@@js.set "baseVal"]
  val create: animVal:float -> baseVal:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(**
  Corresponds to the <number> basic data type.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGNumber)
*)
module[@js.scope "SVGNumber"] SVGNumber : sig
  type t = [`SVGNumber] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SVGNumber]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SVGNumber]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGNumber ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_value: 'tags this -> float [@@js.get "value"]
  val set_value: 'tags this -> float -> unit [@@js.set "value"]
  val create: value:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(**
  The SVGNumberList defines a list of SVGNumber objects.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGNumberList)
*)
module[@js.scope "SVGNumberList"] SVGNumberList : sig
  type t = [`SVGNumberList] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SVGNumberList]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SVGNumberList]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGNumberList ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> SVGNumber.t IterableIterator.t *)
  val get_length: 'tags this -> float [@@js.get "length"]
  val get_numberOfItems: 'tags this -> float [@@js.get "numberOfItems"]
  val appendItem: 'tags this -> newItem:SVGNumber.t -> SVGNumber.t [@@js.call "appendItem"]
  val clear: 'tags this -> unit [@@js.call "clear"]
  val getItem: 'tags this -> index:float -> SVGNumber.t [@@js.call "getItem"]
  val initialize: 'tags this -> newItem:SVGNumber.t -> SVGNumber.t [@@js.call "initialize"]
  val insertItemBefore: 'tags this -> newItem:SVGNumber.t -> index:float -> SVGNumber.t [@@js.call "insertItemBefore"]
  val removeItem: 'tags this -> index:float -> SVGNumber.t [@@js.call "removeItem"]
  val replaceItem: 'tags this -> newItem:SVGNumber.t -> index:float -> SVGNumber.t [@@js.call "replaceItem"]
  val get: 'tags this -> float -> SVGNumber.t [@@js.index_get]
  val set: 'tags this -> float -> SVGNumber.t -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  The SVGAnimatedNumber interface is used for attributes which take a list of numbers and which can be animated.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGAnimatedNumberList)
*)
module[@js.scope "SVGAnimatedNumberList"] SVGAnimatedNumberList : sig
  type t = [`SVGAnimatedNumberList] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SVGAnimatedNumberList]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SVGAnimatedNumberList]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGAnimatedNumberList ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_animVal: 'tags this -> SVGNumberList.t [@@js.get "animVal"]
  val get_baseVal: 'tags this -> SVGNumberList.t [@@js.get "baseVal"]
  val create: animVal:SVGNumberList.t -> baseVal:SVGNumberList.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(**
  Correspond to the <length> basic data type.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGLength)
*)
module[@js.scope "SVGLength"] SVGLength : sig
  type t = [`SVGLength] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SVGLength]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SVGLength]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGLength ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_unitType: 'tags this -> float [@@js.get "unitType"]
  val get_value: 'tags this -> float [@@js.get "value"]
  val set_value: 'tags this -> float -> unit [@@js.set "value"]
  val get_valueAsString: 'tags this -> string [@@js.get "valueAsString"]
  val set_valueAsString: 'tags this -> string -> unit [@@js.set "valueAsString"]
  val get_valueInSpecifiedUnits: 'tags this -> float [@@js.get "valueInSpecifiedUnits"]
  val set_valueInSpecifiedUnits: 'tags this -> float -> unit [@@js.set "valueInSpecifiedUnits"]
  val convertToSpecifiedUnits: 'tags this -> unitType:float -> unit [@@js.call "convertToSpecifiedUnits"]
  val newValueSpecifiedUnits: 'tags this -> unitType:float -> valueInSpecifiedUnits:float -> unit [@@js.call "newValueSpecifiedUnits"]
  val get_SVG_LENGTHTYPE_UNKNOWN: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "SVG_LENGTHTYPE_UNKNOWN"]
  val get_SVG_LENGTHTYPE_NUMBER: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SVG_LENGTHTYPE_NUMBER"]
  val get_SVG_LENGTHTYPE_PERCENTAGE: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "SVG_LENGTHTYPE_PERCENTAGE"]
  val get_SVG_LENGTHTYPE_EMS: 'tags this -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "SVG_LENGTHTYPE_EMS"]
  val get_SVG_LENGTHTYPE_EXS: 'tags this -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "SVG_LENGTHTYPE_EXS"]
  val get_SVG_LENGTHTYPE_PX: 'tags this -> ([`L_n_5[@js 5]] [@js.enum]) [@@js.get "SVG_LENGTHTYPE_PX"]
  val get_SVG_LENGTHTYPE_CM: 'tags this -> ([`L_n_6[@js 6]] [@js.enum]) [@@js.get "SVG_LENGTHTYPE_CM"]
  val get_SVG_LENGTHTYPE_MM: 'tags this -> ([`L_n_7[@js 7]] [@js.enum]) [@@js.get "SVG_LENGTHTYPE_MM"]
  val get_SVG_LENGTHTYPE_IN: 'tags this -> ([`L_n_8[@js 8]] [@js.enum]) [@@js.get "SVG_LENGTHTYPE_IN"]
  val get_SVG_LENGTHTYPE_PT: 'tags this -> ([`L_n_9[@js 9]] [@js.enum]) [@@js.get "SVG_LENGTHTYPE_PT"]
  val get_SVG_LENGTHTYPE_PC: 'tags this -> ([`L_n_10[@js 10]] [@js.enum]) [@@js.get "SVG_LENGTHTYPE_PC"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  val svg_lengthtype_unknown: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "SVG_LENGTHTYPE_UNKNOWN"]
  val svg_lengthtype_number: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SVG_LENGTHTYPE_NUMBER"]
  val svg_lengthtype_percentage: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "SVG_LENGTHTYPE_PERCENTAGE"]
  val svg_lengthtype_ems: unit -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "SVG_LENGTHTYPE_EMS"]
  val svg_lengthtype_exs: unit -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "SVG_LENGTHTYPE_EXS"]
  val svg_lengthtype_px: unit -> ([`L_n_5[@js 5]] [@js.enum]) [@@js.get "SVG_LENGTHTYPE_PX"]
  val svg_lengthtype_cm: unit -> ([`L_n_6[@js 6]] [@js.enum]) [@@js.get "SVG_LENGTHTYPE_CM"]
  val svg_lengthtype_mm: unit -> ([`L_n_7[@js 7]] [@js.enum]) [@@js.get "SVG_LENGTHTYPE_MM"]
  val svg_lengthtype_in: unit -> ([`L_n_8[@js 8]] [@js.enum]) [@@js.get "SVG_LENGTHTYPE_IN"]
  val svg_lengthtype_pt: unit -> ([`L_n_9[@js 9]] [@js.enum]) [@@js.get "SVG_LENGTHTYPE_PT"]
  val svg_lengthtype_pc: unit -> ([`L_n_10[@js 10]] [@js.enum]) [@@js.get "SVG_LENGTHTYPE_PC"]
end

(**
  The SVGLengthList defines a list of SVGLength objects.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGLengthList)
*)
module[@js.scope "SVGLengthList"] SVGLengthList : sig
  type t = [`SVGLengthList] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SVGLengthList]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SVGLengthList]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGLengthList ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> SVGLength.t IterableIterator.t *)
  val get_length: 'tags this -> float [@@js.get "length"]
  val get_numberOfItems: 'tags this -> float [@@js.get "numberOfItems"]
  val appendItem: 'tags this -> newItem:SVGLength.t -> SVGLength.t [@@js.call "appendItem"]
  val clear: 'tags this -> unit [@@js.call "clear"]
  val getItem: 'tags this -> index:float -> SVGLength.t [@@js.call "getItem"]
  val initialize: 'tags this -> newItem:SVGLength.t -> SVGLength.t [@@js.call "initialize"]
  val insertItemBefore: 'tags this -> newItem:SVGLength.t -> index:float -> SVGLength.t [@@js.call "insertItemBefore"]
  val removeItem: 'tags this -> index:float -> SVGLength.t [@@js.call "removeItem"]
  val replaceItem: 'tags this -> newItem:SVGLength.t -> index:float -> SVGLength.t [@@js.call "replaceItem"]
  val get: 'tags this -> float -> SVGLength.t [@@js.index_get]
  val set: 'tags this -> float -> SVGLength.t -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Used for attributes of type SVGLengthList which can be animated.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGAnimatedLengthList)
*)
module[@js.scope "SVGAnimatedLengthList"] SVGAnimatedLengthList : sig
  type t = [`SVGAnimatedLengthList] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SVGAnimatedLengthList]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SVGAnimatedLengthList]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGAnimatedLengthList ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_animVal: 'tags this -> SVGLengthList.t [@@js.get "animVal"]
  val get_baseVal: 'tags this -> SVGLengthList.t [@@js.get "baseVal"]
  val create: animVal:SVGLengthList.t -> baseVal:SVGLengthList.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGPointList) *)
module[@js.scope "SVGPointList"] SVGPointList : sig
  type t = [`SVGPointList] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SVGPointList]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SVGPointList]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGPointList ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> DOMPoint.t IterableIterator.t *)
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGPointList/length) *)
  val get_length: 'tags this -> float [@@js.get "length"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGPointList/numberOfItems) *)
  val get_numberOfItems: 'tags this -> float [@@js.get "numberOfItems"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGPointList/appendItem) *)
  val appendItem: 'tags this -> newItem:DOMPoint.t -> DOMPoint.t [@@js.call "appendItem"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGPointList/clear) *)
  val clear: 'tags this -> unit [@@js.call "clear"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGPointList/getItem) *)
  val getItem: 'tags this -> index:float -> DOMPoint.t [@@js.call "getItem"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGPointList/initialize) *)
  val initialize: 'tags this -> newItem:DOMPoint.t -> DOMPoint.t [@@js.call "initialize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGPointList/insertItemBefore) *)
  val insertItemBefore: 'tags this -> newItem:DOMPoint.t -> index:float -> DOMPoint.t [@@js.call "insertItemBefore"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGPointList/removeItem) *)
  val removeItem: 'tags this -> index:float -> DOMPoint.t [@@js.call "removeItem"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGPointList/replaceItem) *)
  val replaceItem: 'tags this -> newItem:DOMPoint.t -> index:float -> DOMPoint.t [@@js.call "replaceItem"]
  val get: 'tags this -> float -> DOMPoint.t [@@js.index_get]
  val set: 'tags this -> float -> DOMPoint.t -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module SVGAnimatedPoints : sig
  type t = [`SVGAnimatedPoints] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SVGAnimatedPoints]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SVGAnimatedPoints]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGAnimatedPoints ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_animatedPoints: 'tags this -> SVGPointList.t [@@js.get "animatedPoints"]
  val get_points: 'tags this -> SVGPointList.t [@@js.get "points"]
  val create: animatedPoints:SVGPointList.t -> points:SVGPointList.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly) *)
module[@js.scope "DOMRectReadOnly"] DOMRectReadOnly : sig
  type t = [`DOMRectReadOnly] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DOMRectReadOnly]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DOMRectReadOnly]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DOMRectReadOnly ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/bottom) *)
  val get_bottom: 'tags this -> float [@@js.get "bottom"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/height) *)
  val get_height: 'tags this -> float [@@js.get "height"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/left) *)
  val get_left: 'tags this -> float [@@js.get "left"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/right) *)
  val get_right: 'tags this -> float [@@js.get "right"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/top) *)
  val get_top: 'tags this -> float [@@js.get "top"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/width) *)
  val get_width: 'tags this -> float [@@js.get "width"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/x) *)
  val get_x: 'tags this -> float [@@js.get "x"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/y) *)
  val get_y: 'tags this -> float [@@js.get "y"]
  val toJSON: 'tags this -> any [@@js.call "toJSON"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: ?x:float -> ?y:float -> ?width:float -> ?height:float -> unit -> t [@@js.create]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/fromRect_static) *)
  val fromRect: ?other:DOMRectInit.t -> unit -> t [@@js.global "fromRect"]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRect) *)
module[@js.scope "DOMRect"] DOMRect : sig
  type t = [`DOMRect | `DOMRectReadOnly] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DOMRect | `DOMRectReadOnly]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DOMRect | `DOMRectReadOnly]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DOMRect ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/height) *)
  val get_height: 'tags this -> float [@@js.get "height"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/height) *)
  val set_height: 'tags this -> float -> unit [@@js.set "height"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/width) *)
  val get_width: 'tags this -> float [@@js.get "width"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/width) *)
  val set_width: 'tags this -> float -> unit [@@js.set "width"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/x) *)
  val get_x: 'tags this -> float [@@js.get "x"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/x) *)
  val set_x: 'tags this -> float -> unit [@@js.set "x"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/y) *)
  val get_y: 'tags this -> float [@@js.get "y"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/y) *)
  val set_y: 'tags this -> float -> unit [@@js.set "y"]
  val create: height:float -> width:float -> x:float -> y:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': ?x:float -> ?y:float -> ?width:float -> ?height:float -> unit -> t [@@js.create]
  val fromRect: ?other:DOMRectInit.t -> unit -> t [@@js.global "fromRect"]
end

(**
  Used for attributes of basic SVGRect which can be animated.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGAnimatedRect)
*)
module[@js.scope "SVGAnimatedRect"] SVGAnimatedRect : sig
  type t = [`SVGAnimatedRect] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SVGAnimatedRect]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SVGAnimatedRect]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGAnimatedRect ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_animVal: 'tags this -> DOMRectReadOnly.t [@@js.get "animVal"]
  val get_baseVal: 'tags this -> DOMRect.t [@@js.get "baseVal"]
  val create: animVal:DOMRectReadOnly.t -> baseVal:DOMRect.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(**
  Corresponds to the preserveAspectRatio attribute, which is available for some of SVG's elements.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGPreserveAspectRatio)
*)
module[@js.scope "SVGPreserveAspectRatio"] SVGPreserveAspectRatio : sig
  type t = [`SVGPreserveAspectRatio] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SVGPreserveAspectRatio]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SVGPreserveAspectRatio]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGPreserveAspectRatio ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_align: 'tags this -> float [@@js.get "align"]
  val set_align: 'tags this -> float -> unit [@@js.set "align"]
  val get_meetOrSlice: 'tags this -> float [@@js.get "meetOrSlice"]
  val set_meetOrSlice: 'tags this -> float -> unit [@@js.set "meetOrSlice"]
  val get_SVG_PRESERVEASPECTRATIO_UNKNOWN: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "SVG_PRESERVEASPECTRATIO_UNKNOWN"]
  val get_SVG_PRESERVEASPECTRATIO_NONE: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SVG_PRESERVEASPECTRATIO_NONE"]
  val get_SVG_PRESERVEASPECTRATIO_XMINYMIN: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "SVG_PRESERVEASPECTRATIO_XMINYMIN"]
  val get_SVG_PRESERVEASPECTRATIO_XMIDYMIN: 'tags this -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "SVG_PRESERVEASPECTRATIO_XMIDYMIN"]
  val get_SVG_PRESERVEASPECTRATIO_XMAXYMIN: 'tags this -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "SVG_PRESERVEASPECTRATIO_XMAXYMIN"]
  val get_SVG_PRESERVEASPECTRATIO_XMINYMID: 'tags this -> ([`L_n_5[@js 5]] [@js.enum]) [@@js.get "SVG_PRESERVEASPECTRATIO_XMINYMID"]
  val get_SVG_PRESERVEASPECTRATIO_XMIDYMID: 'tags this -> ([`L_n_6[@js 6]] [@js.enum]) [@@js.get "SVG_PRESERVEASPECTRATIO_XMIDYMID"]
  val get_SVG_PRESERVEASPECTRATIO_XMAXYMID: 'tags this -> ([`L_n_7[@js 7]] [@js.enum]) [@@js.get "SVG_PRESERVEASPECTRATIO_XMAXYMID"]
  val get_SVG_PRESERVEASPECTRATIO_XMINYMAX: 'tags this -> ([`L_n_8[@js 8]] [@js.enum]) [@@js.get "SVG_PRESERVEASPECTRATIO_XMINYMAX"]
  val get_SVG_PRESERVEASPECTRATIO_XMIDYMAX: 'tags this -> ([`L_n_9[@js 9]] [@js.enum]) [@@js.get "SVG_PRESERVEASPECTRATIO_XMIDYMAX"]
  val get_SVG_PRESERVEASPECTRATIO_XMAXYMAX: 'tags this -> ([`L_n_10[@js 10]] [@js.enum]) [@@js.get "SVG_PRESERVEASPECTRATIO_XMAXYMAX"]
  val get_SVG_MEETORSLICE_UNKNOWN: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "SVG_MEETORSLICE_UNKNOWN"]
  val get_SVG_MEETORSLICE_MEET: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SVG_MEETORSLICE_MEET"]
  val get_SVG_MEETORSLICE_SLICE: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "SVG_MEETORSLICE_SLICE"]
  val create: align:float -> meetOrSlice:float -> svg_preserveaspectratio_unknown:(([`L_n_0[@js 0]] [@js.enum])[@js "SVG_PRESERVEASPECTRATIO_UNKNOWN"]) -> svg_preserveaspectratio_none:(([`L_n_1[@js 1]] [@js.enum])[@js "SVG_PRESERVEASPECTRATIO_NONE"]) -> svg_preserveaspectratio_xminymin:(([`L_n_2[@js 2]] [@js.enum])[@js "SVG_PRESERVEASPECTRATIO_XMINYMIN"]) -> svg_preserveaspectratio_xmidymin:(([`L_n_3[@js 3]] [@js.enum])[@js "SVG_PRESERVEASPECTRATIO_XMIDYMIN"]) -> svg_preserveaspectratio_xmaxymin:(([`L_n_4[@js 4]] [@js.enum])[@js "SVG_PRESERVEASPECTRATIO_XMAXYMIN"]) -> svg_preserveaspectratio_xminymid:(([`L_n_5[@js 5]] [@js.enum])[@js "SVG_PRESERVEASPECTRATIO_XMINYMID"]) -> svg_preserveaspectratio_xmidymid:(([`L_n_6[@js 6]] [@js.enum])[@js "SVG_PRESERVEASPECTRATIO_XMIDYMID"]) -> svg_preserveaspectratio_xmaxymid:(([`L_n_7[@js 7]] [@js.enum])[@js "SVG_PRESERVEASPECTRATIO_XMAXYMID"]) -> svg_preserveaspectratio_xminymax:(([`L_n_8[@js 8]] [@js.enum])[@js "SVG_PRESERVEASPECTRATIO_XMINYMAX"]) -> svg_preserveaspectratio_xmidymax:(([`L_n_9[@js 9]] [@js.enum])[@js "SVG_PRESERVEASPECTRATIO_XMIDYMAX"]) -> svg_preserveaspectratio_xmaxymax:(([`L_n_10[@js 10]] [@js.enum])[@js "SVG_PRESERVEASPECTRATIO_XMAXYMAX"]) -> svg_meetorslice_unknown:(([`L_n_0[@js 0]] [@js.enum])[@js "SVG_MEETORSLICE_UNKNOWN"]) -> svg_meetorslice_meet:(([`L_n_1[@js 1]] [@js.enum])[@js "SVG_MEETORSLICE_MEET"]) -> svg_meetorslice_slice:(([`L_n_2[@js 2]] [@js.enum])[@js "SVG_MEETORSLICE_SLICE"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
  val svg_preserveaspectratio_unknown: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "SVG_PRESERVEASPECTRATIO_UNKNOWN"]
  val svg_preserveaspectratio_none: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SVG_PRESERVEASPECTRATIO_NONE"]
  val svg_preserveaspectratio_xminymin: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "SVG_PRESERVEASPECTRATIO_XMINYMIN"]
  val svg_preserveaspectratio_xmidymin: unit -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "SVG_PRESERVEASPECTRATIO_XMIDYMIN"]
  val svg_preserveaspectratio_xmaxymin: unit -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "SVG_PRESERVEASPECTRATIO_XMAXYMIN"]
  val svg_preserveaspectratio_xminymid: unit -> ([`L_n_5[@js 5]] [@js.enum]) [@@js.get "SVG_PRESERVEASPECTRATIO_XMINYMID"]
  val svg_preserveaspectratio_xmidymid: unit -> ([`L_n_6[@js 6]] [@js.enum]) [@@js.get "SVG_PRESERVEASPECTRATIO_XMIDYMID"]
  val svg_preserveaspectratio_xmaxymid: unit -> ([`L_n_7[@js 7]] [@js.enum]) [@@js.get "SVG_PRESERVEASPECTRATIO_XMAXYMID"]
  val svg_preserveaspectratio_xminymax: unit -> ([`L_n_8[@js 8]] [@js.enum]) [@@js.get "SVG_PRESERVEASPECTRATIO_XMINYMAX"]
  val svg_preserveaspectratio_xmidymax: unit -> ([`L_n_9[@js 9]] [@js.enum]) [@@js.get "SVG_PRESERVEASPECTRATIO_XMIDYMAX"]
  val svg_preserveaspectratio_xmaxymax: unit -> ([`L_n_10[@js 10]] [@js.enum]) [@@js.get "SVG_PRESERVEASPECTRATIO_XMAXYMAX"]
  val svg_meetorslice_unknown: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "SVG_MEETORSLICE_UNKNOWN"]
  val svg_meetorslice_meet: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SVG_MEETORSLICE_MEET"]
  val svg_meetorslice_slice: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "SVG_MEETORSLICE_SLICE"]
end

(**
  Used for attributes of type SVGPreserveAspectRatio which can be animated.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGAnimatedPreserveAspectRatio)
*)
module[@js.scope "SVGAnimatedPreserveAspectRatio"] SVGAnimatedPreserveAspectRatio : sig
  type t = [`SVGAnimatedPreserveAspectRatio] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SVGAnimatedPreserveAspectRatio]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SVGAnimatedPreserveAspectRatio]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGAnimatedPreserveAspectRatio ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_animVal: 'tags this -> SVGPreserveAspectRatio.t [@@js.get "animVal"]
  val get_baseVal: 'tags this -> SVGPreserveAspectRatio.t [@@js.get "baseVal"]
  val create: animVal:SVGPreserveAspectRatio.t -> baseVal:SVGPreserveAspectRatio.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end
module SVGFitToViewBox : sig
  type t = [`SVGFitToViewBox] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SVGFitToViewBox]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SVGFitToViewBox]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGFitToViewBox ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/preserveAspectRatio) *)
  val get_preserveAspectRatio: 'tags this -> SVGAnimatedPreserveAspectRatio.t [@@js.get "preserveAspectRatio"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/viewBox) *)
  val get_viewBox: 'tags this -> SVGAnimatedRect.t [@@js.get "viewBox"]
  val create: preserveAspectRatio:SVGAnimatedPreserveAspectRatio.t -> viewBox:SVGAnimatedRect.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Used for attributes of basic type <Number> which can be animated.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGAnimatedNumber)
*)
module[@js.scope "SVGAnimatedNumber"] SVGAnimatedNumber : sig
  type t = [`SVGAnimatedNumber] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SVGAnimatedNumber]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SVGAnimatedNumber]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGAnimatedNumber ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_animVal: 'tags this -> float [@@js.get "animVal"]
  val get_baseVal: 'tags this -> float [@@js.get "baseVal"]
  val set_baseVal: 'tags this -> float -> unit [@@js.set "baseVal"]
  val create: animVal:float -> baseVal:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(**
  Used to represent a value that can be an <angle> or <number> value. An SVGAngle reflected through the animVal attribute is always read only.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGAngle)
*)
module[@js.scope "SVGAngle"] SVGAngle : sig
  type t = [`SVGAngle] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SVGAngle]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SVGAngle]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGAngle ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_unitType: 'tags this -> float [@@js.get "unitType"]
  val get_value: 'tags this -> float [@@js.get "value"]
  val set_value: 'tags this -> float -> unit [@@js.set "value"]
  val get_valueAsString: 'tags this -> string [@@js.get "valueAsString"]
  val set_valueAsString: 'tags this -> string -> unit [@@js.set "valueAsString"]
  val get_valueInSpecifiedUnits: 'tags this -> float [@@js.get "valueInSpecifiedUnits"]
  val set_valueInSpecifiedUnits: 'tags this -> float -> unit [@@js.set "valueInSpecifiedUnits"]
  val convertToSpecifiedUnits: 'tags this -> unitType:float -> unit [@@js.call "convertToSpecifiedUnits"]
  val newValueSpecifiedUnits: 'tags this -> unitType:float -> valueInSpecifiedUnits:float -> unit [@@js.call "newValueSpecifiedUnits"]
  val get_SVG_ANGLETYPE_UNKNOWN: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "SVG_ANGLETYPE_UNKNOWN"]
  val get_SVG_ANGLETYPE_UNSPECIFIED: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SVG_ANGLETYPE_UNSPECIFIED"]
  val get_SVG_ANGLETYPE_DEG: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "SVG_ANGLETYPE_DEG"]
  val get_SVG_ANGLETYPE_RAD: 'tags this -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "SVG_ANGLETYPE_RAD"]
  val get_SVG_ANGLETYPE_GRAD: 'tags this -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "SVG_ANGLETYPE_GRAD"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  val svg_angletype_unknown: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "SVG_ANGLETYPE_UNKNOWN"]
  val svg_angletype_unspecified: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SVG_ANGLETYPE_UNSPECIFIED"]
  val svg_angletype_deg: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "SVG_ANGLETYPE_DEG"]
  val svg_angletype_rad: unit -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "SVG_ANGLETYPE_RAD"]
  val svg_angletype_grad: unit -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "SVG_ANGLETYPE_GRAD"]
end
module FocusOptions : sig
  type t = [`FocusOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FocusOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FocusOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FocusOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_preventScroll: 'tags this -> bool option [@@js.get "preventScroll"]
  val set_preventScroll: 'tags this -> bool -> unit [@@js.set "preventScroll"]
  val create: ?preventScroll:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Used by the datasetÂ HTMLÂ attribute to represent data for custom attributes added to elements.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMStringMap)
*)
module[@js.scope "DOMStringMap"] DOMStringMap : sig
  type t = [`DOMStringMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DOMStringMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DOMStringMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DOMStringMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get: 'tags this -> string -> string option [@@js.index_get]
  val set: 'tags this -> string -> ([`Undefined of undefined | `U1 of string] [@js.union]) -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module HTMLOrSVGElement : sig
  type t = [`HTMLOrSVGElement] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`HTMLOrSVGElement]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`HTMLOrSVGElement]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLOrSVGElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/autofocus) *)
  val get_autofocus: 'tags this -> bool [@@js.get "autofocus"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/autofocus) *)
  val set_autofocus: 'tags this -> bool -> unit [@@js.set "autofocus"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/dataset) *)
  val get_dataset: 'tags this -> DOMStringMap.t [@@js.get "dataset"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/nonce) *)
  val get_nonce: 'tags this -> string option [@@js.get "nonce"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/nonce) *)
  val set_nonce: 'tags this -> string -> unit [@@js.set "nonce"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/tabIndex) *)
  val get_tabIndex: 'tags this -> float [@@js.get "tabIndex"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/tabIndex) *)
  val set_tabIndex: 'tags this -> float -> unit [@@js.set "tabIndex"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/blur) *)
  val blur: 'tags this -> unit [@@js.call "blur"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/focus) *)
  val focus: 'tags this -> ?options:FocusOptions.t -> unit -> unit [@@js.call "focus"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module SVGBoundingBoxOptions : sig
  type t = [`SVGBoundingBoxOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SVGBoundingBoxOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SVGBoundingBoxOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGBoundingBoxOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_clipped: 'tags this -> bool option [@@js.get "clipped"]
  val set_clipped: 'tags this -> bool -> unit [@@js.set "clipped"]
  val get_fill: 'tags this -> bool option [@@js.get "fill"]
  val set_fill: 'tags this -> bool -> unit [@@js.set "fill"]
  val get_markers: 'tags this -> bool option [@@js.get "markers"]
  val set_markers: 'tags this -> bool -> unit [@@js.set "markers"]
  val get_stroke: 'tags this -> bool option [@@js.get "stroke"]
  val set_stroke: 'tags this -> bool -> unit [@@js.set "stroke"]
  val create: ?clipped:bool -> ?fill:bool -> ?markers:bool -> ?stroke:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  SVGTransform is the interface for one of the component transformations within an SVGTransformList; thus, an SVGTransform object corresponds to a single component (e.g., scale(â¦) or matrix(â¦)) within a transform attribute.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGTransform)
*)
module[@js.scope "SVGTransform"] SVGTransform : sig
  type t = [`SVGTransform] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SVGTransform]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SVGTransform]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGTransform ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_angle: 'tags this -> float [@@js.get "angle"]
  val get_matrix: 'tags this -> DOMMatrix.t [@@js.get "matrix"]
  val get_type: 'tags this -> float [@@js.get "type"]
  val setMatrix: 'tags this -> ?matrix:DOMMatrix2DInit.t -> unit -> unit [@@js.call "setMatrix"]
  val setRotate: 'tags this -> angle:float -> cx:float -> cy:float -> unit [@@js.call "setRotate"]
  val setScale: 'tags this -> sx:float -> sy:float -> unit [@@js.call "setScale"]
  val setSkewX: 'tags this -> angle:float -> unit [@@js.call "setSkewX"]
  val setSkewY: 'tags this -> angle:float -> unit [@@js.call "setSkewY"]
  val setTranslate: 'tags this -> tx:float -> ty:float -> unit [@@js.call "setTranslate"]
  val get_SVG_TRANSFORM_UNKNOWN: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "SVG_TRANSFORM_UNKNOWN"]
  val get_SVG_TRANSFORM_MATRIX: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SVG_TRANSFORM_MATRIX"]
  val get_SVG_TRANSFORM_TRANSLATE: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "SVG_TRANSFORM_TRANSLATE"]
  val get_SVG_TRANSFORM_SCALE: 'tags this -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "SVG_TRANSFORM_SCALE"]
  val get_SVG_TRANSFORM_ROTATE: 'tags this -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "SVG_TRANSFORM_ROTATE"]
  val get_SVG_TRANSFORM_SKEWX: 'tags this -> ([`L_n_5[@js 5]] [@js.enum]) [@@js.get "SVG_TRANSFORM_SKEWX"]
  val get_SVG_TRANSFORM_SKEWY: 'tags this -> ([`L_n_6[@js 6]] [@js.enum]) [@@js.get "SVG_TRANSFORM_SKEWY"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  val svg_transform_unknown: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "SVG_TRANSFORM_UNKNOWN"]
  val svg_transform_matrix: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SVG_TRANSFORM_MATRIX"]
  val svg_transform_translate: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "SVG_TRANSFORM_TRANSLATE"]
  val svg_transform_scale: unit -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "SVG_TRANSFORM_SCALE"]
  val svg_transform_rotate: unit -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "SVG_TRANSFORM_ROTATE"]
  val svg_transform_skewx: unit -> ([`L_n_5[@js 5]] [@js.enum]) [@@js.get "SVG_TRANSFORM_SKEWX"]
  val svg_transform_skewy: unit -> ([`L_n_6[@js 6]] [@js.enum]) [@@js.get "SVG_TRANSFORM_SKEWY"]
end

(**
  The SVGTransformList defines a list of SVGTransform objects.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGTransformList)
*)
module[@js.scope "SVGTransformList"] SVGTransformList : sig
  type t = [`SVGTransformList] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SVGTransformList]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SVGTransformList]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGTransformList ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> SVGTransform.t IterableIterator.t *)
  val get_length: 'tags this -> float [@@js.get "length"]
  val get_numberOfItems: 'tags this -> float [@@js.get "numberOfItems"]
  val appendItem: 'tags this -> newItem:SVGTransform.t -> SVGTransform.t [@@js.call "appendItem"]
  val clear: 'tags this -> unit [@@js.call "clear"]
  val consolidate: 'tags this -> SVGTransform.t option [@@js.call "consolidate"]
  val createSVGTransformFromMatrix: 'tags this -> ?matrix:DOMMatrix2DInit.t -> unit -> SVGTransform.t [@@js.call "createSVGTransformFromMatrix"]
  val getItem: 'tags this -> index:float -> SVGTransform.t [@@js.call "getItem"]
  val initialize: 'tags this -> newItem:SVGTransform.t -> SVGTransform.t [@@js.call "initialize"]
  val insertItemBefore: 'tags this -> newItem:SVGTransform.t -> index:float -> SVGTransform.t [@@js.call "insertItemBefore"]
  val removeItem: 'tags this -> index:float -> SVGTransform.t [@@js.call "removeItem"]
  val replaceItem: 'tags this -> newItem:SVGTransform.t -> index:float -> SVGTransform.t [@@js.call "replaceItem"]
  val get: 'tags this -> float -> SVGTransform.t [@@js.index_get]
  val set: 'tags this -> float -> SVGTransform.t -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Used for attributes which take a list of numbers and which can be animated.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGAnimatedTransformList)
*)
module[@js.scope "SVGAnimatedTransformList"] SVGAnimatedTransformList : sig
  type t = [`SVGAnimatedTransformList] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SVGAnimatedTransformList]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SVGAnimatedTransformList]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGAnimatedTransformList ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_animVal: 'tags this -> SVGTransformList.t [@@js.get "animVal"]
  val get_baseVal: 'tags this -> SVGTransformList.t [@@js.get "baseVal"]
  val create: animVal:SVGTransformList.t -> baseVal:SVGTransformList.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(**
  Used for attributes of basic type <length> which can be animated.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGAnimatedLength)
*)
module[@js.scope "SVGAnimatedLength"] SVGAnimatedLength : sig
  type t = [`SVGAnimatedLength] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SVGAnimatedLength]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SVGAnimatedLength]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGAnimatedLength ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_animVal: 'tags this -> SVGLength.t [@@js.get "animVal"]
  val get_baseVal: 'tags this -> SVGLength.t [@@js.get "baseVal"]
  val create: animVal:SVGLength.t -> baseVal:SVGLength.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end
module GlobalCompositeOperation : sig
  type t = ([`L_s1063_xor[@js "xor"] | `L_s262_color[@js "color"] | `L_s263_color_burn[@js "color-burn"] | `L_s264_color_dodge[@js "color-dodge"] | `L_s283_copy[@js "copy"] | `L_s294_darken[@js "darken"] | `L_s317_destination_atop[@js "destination-atop"] | `L_s318_destination_in[@js "destination-in"] | `L_s319_destination_out[@js "destination-out"] | `L_s320_destination_over[@js "destination-over"] | `L_s329_difference[@js "difference"] | `L_s374_exclusion[@js "exclusion"] | `L_s465_hard_light[@js "hard-light"] | `L_s494_hue[@js "hue"] | `L_s559_lighten[@js "lighten"] | `L_s560_lighter[@js "lighter"] | `L_s588_luminosity[@js "luminosity"] | `L_s656_multiply[@js "multiply"] | `L_s718_overlay[@js "overlay"] | `L_s847_saturation[@js "saturation"] | `L_s849_screen[@js "screen"] | `L_s899_soft_light[@js "soft-light"] | `L_s901_source_atop[@js "source-atop"] | `L_s902_source_in[@js "source-in"] | `L_s903_source_out[@js "source-out"] | `L_s904_source_over[@js "source-over"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module CanvasCompositing : sig
  type t = [`CanvasCompositing] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasCompositing]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasCompositing]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasCompositing ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/globalAlpha) *)
  val get_globalAlpha: 'tags this -> float [@@js.get "globalAlpha"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/globalAlpha) *)
  val set_globalAlpha: 'tags this -> float -> unit [@@js.set "globalAlpha"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation) *)
  val get_globalCompositeOperation: 'tags this -> GlobalCompositeOperation.t [@@js.get "globalCompositeOperation"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation) *)
  val set_globalCompositeOperation: 'tags this -> GlobalCompositeOperation.t -> unit [@@js.set "globalCompositeOperation"]
  val create: globalAlpha:float -> globalCompositeOperation:GlobalCompositeOperation.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module BlobCallback : sig
  type t = [`BlobCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`BlobCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`BlobCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `BlobCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> blob:Blob.t option -> unit [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ImageBitmap) *)
module[@js.scope "ImageBitmap"] ImageBitmap : sig
  type t = [`ImageBitmap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ImageBitmap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ImageBitmap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ImageBitmap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the intrinsic height of the image, in CSS pixels.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ImageBitmap/height)
  *)
  val get_height: 'tags this -> float [@@js.get "height"]
  
  (**
    Returns the intrinsic width of the image, in CSS pixels.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ImageBitmap/width)
  *)
  val get_width: 'tags this -> float [@@js.get "width"]
  
  (**
    Releases imageBitmap's underlying bitmap data.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ImageBitmap/close)
  *)
  val close: 'tags this -> unit [@@js.call "close"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PermissionStatus) *)
module[@js.scope "PermissionStatus"] PermissionStatus : sig
  type t = [`EventTarget | `PermissionStatus] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `PermissionStatus]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `PermissionStatus]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PermissionStatus ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PermissionStatus/name) *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PermissionStatus/change_event) *)
  val get_onchange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onchange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PermissionStatus/change_event) *)
  val set_onchange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onchange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PermissionStatus/state) *)
  val get_state: 'tags this -> PermissionState.t [@@js.get "state"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'PermissionStatusEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'PermissionStatusEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module PermissionName : sig
  type t = ([`L_s1064_xr_spatial_tracking[@js "xr-spatial-tracking"] | `L_s450_geolocation[@js "geolocation"] | `L_s691_notifications[@js "notifications"] | `L_s740_persistent_storage[@js "persistent-storage"] | `L_s788_push[@js "push"] | `L_s850_screen_wake_lock[@js "screen-wake-lock"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module PermissionDescriptor : sig
  type t = [`PermissionDescriptor] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PermissionDescriptor]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PermissionDescriptor]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PermissionDescriptor ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_name: 'tags this -> PermissionName.t [@@js.get "name"]
  val set_name: 'tags this -> PermissionName.t -> unit [@@js.set "name"]
  val create: name:PermissionName.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Permissions) *)
module[@js.scope "Permissions"] Permissions : sig
  type t = [`Permissions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Permissions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Permissions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Permissions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Permissions/query) *)
  val query: 'tags this -> permissionDesc:PermissionDescriptor.t -> PermissionStatus.t Promise.t [@@js.call "query"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module StorageEstimate : sig
  type t = [`StorageEstimate] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`StorageEstimate]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`StorageEstimate]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `StorageEstimate ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_quota: 'tags this -> float option [@@js.get "quota"]
  val set_quota: 'tags this -> float -> unit [@@js.set "quota"]
  val get_usage: 'tags this -> float option [@@js.get "usage"]
  val set_usage: 'tags this -> float -> unit [@@js.set "usage"]
  val create: ?quota:float -> ?usage:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module FileSystemRemoveOptions : sig
  type t = [`FileSystemRemoveOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FileSystemRemoveOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FileSystemRemoveOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FileSystemRemoveOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_recursive: 'tags this -> bool option [@@js.get "recursive"]
  val set_recursive: 'tags this -> bool -> unit [@@js.set "recursive"]
  val create: ?recursive:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module FileSystemGetFileOptions : sig
  type t = [`FileSystemGetFileOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FileSystemGetFileOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FileSystemGetFileOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FileSystemGetFileOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_create: 'tags this -> bool option [@@js.get "create"]
  val set_create: 'tags this -> bool -> unit [@@js.set "create"]
  val create: ?create_:(bool[@js "create"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module FileSystemGetDirectoryOptions : sig
  type t = [`FileSystemGetDirectoryOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FileSystemGetDirectoryOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FileSystemGetDirectoryOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FileSystemGetDirectoryOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_create: 'tags this -> bool option [@@js.get "create"]
  val set_create: 'tags this -> bool -> unit [@@js.set "create"]
  val create: ?create_:(bool[@js "create"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module WriteCommandType : sig
  type t = ([`L_s1061_write[@js "write"] | `L_s860_seek[@js "seek"] | `L_s998_truncate[@js "truncate"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module WriteParams : sig
  type t = [`WriteParams] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WriteParams]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WriteParams]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WriteParams ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_data: 'tags this -> ([`String of string | `Null | `Undefined | `Other of (Blob.t, BufferSource.t) union2] [@js.union on_field "dummy"]) Primitive.t [@@js.get "data"]
  val set_data: 'tags this -> ([`Null | `U1 of BufferSource.t | `U2 of Blob.t | `U3 of string] [@js.union]) -> unit [@@js.set "data"]
  val get_position: 'tags this -> float option [@@js.get "position"]
  val set_position: 'tags this -> float option -> unit [@@js.set "position"]
  val get_size: 'tags this -> float option [@@js.get "size"]
  val set_size: 'tags this -> float option -> unit [@@js.set "size"]
  val get_type: 'tags this -> WriteCommandType.t [@@js.get "type"]
  val set_type: 'tags this -> WriteCommandType.t -> unit [@@js.set "type"]
  val create: ?data:([`String of string | `Other of (Blob.t, BufferSource.t) union2] [@js.union on_field "dummy"]) Primitive.t -> ?position:float -> ?size:float -> type_:(WriteCommandType.t[@js "type"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module FileSystemWriteChunkType : sig
  type t = ([`String of string | `Other of (Blob.t, BufferSource.t, WriteParams.t) union3] [@js.union on_field "dummy"]) Primitive.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemWritableFileStream)
*)
module[@js.scope "FileSystemWritableFileStream"] FileSystemWritableFileStream : sig
  type t = [`FileSystemWritableFileStream | `WritableStream of any] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FileSystemWritableFileStream | `WritableStream of any]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FileSystemWritableFileStream | `WritableStream of any]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FileSystemWritableFileStream ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemWritableFileStream/seek) *)
  val seek: 'tags this -> position:float -> unit Promise.t [@@js.call "seek"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemWritableFileStream/truncate) *)
  val truncate: 'tags this -> size:float -> unit Promise.t [@@js.call "truncate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemWritableFileStream/write) *)
  val write: 'tags this -> data:FileSystemWriteChunkType.t -> unit Promise.t [@@js.call "write"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module FileSystemHandleKind : sig
  type t = ([`L_s332_directory[@js "directory"] | `L_s418_file[@js "file"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemHandle)
*)
module[@js.scope "FileSystemHandle"] FileSystemHandle : sig
  type t = [`FileSystemHandle] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FileSystemHandle]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FileSystemHandle]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FileSystemHandle ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemHandle/kind) *)
  val get_kind: 'tags this -> FileSystemHandleKind.t [@@js.get "kind"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemHandle/name) *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemHandle/isSameEntry) *)
  val isSameEntry: 'tags this -> other:t -> bool Promise.t [@@js.call "isSameEntry"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module FileSystemCreateWritableOptions : sig
  type t = [`FileSystemCreateWritableOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FileSystemCreateWritableOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FileSystemCreateWritableOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FileSystemCreateWritableOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_keepExistingData: 'tags this -> bool option [@@js.get "keepExistingData"]
  val set_keepExistingData: 'tags this -> bool -> unit [@@js.set "keepExistingData"]
  val create: ?keepExistingData:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemFileHandle)
*)
module[@js.scope "FileSystemFileHandle"] FileSystemFileHandle : sig
  type t = [`FileSystemFileHandle | `FileSystemHandle] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FileSystemFileHandle | `FileSystemHandle]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FileSystemFileHandle | `FileSystemHandle]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FileSystemFileHandle ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemHandle/kind) *)
  val get_kind: 'tags this -> ([`L_s418_file[@js "file"]] [@js.enum]) [@@js.get "kind"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemFileHandle/createWritable) *)
  val createWritable: 'tags this -> ?options:FileSystemCreateWritableOptions.t -> unit -> FileSystemWritableFileStream.t Promise.t [@@js.call "createWritable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemFileHandle/getFile) *)
  val getFile: 'tags this -> File.t Promise.t [@@js.call "getFile"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryHandle)
*)
module[@js.scope "FileSystemDirectoryHandle"] FileSystemDirectoryHandle : sig
  type t = [`FileSystemDirectoryHandle | `FileSystemHandle] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FileSystemDirectoryHandle | `FileSystemHandle]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FileSystemDirectoryHandle | `FileSystemHandle]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FileSystemDirectoryHandle ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.asyncIterator]: unit -> (string * FileSystemHandle.t) AsyncIterableIterator.t *)
  val entries: 'tags this -> (string * FileSystemHandle.t) AsyncIterableIterator.t [@@js.call "entries"]
  val keys: 'tags this -> string AsyncIterableIterator.t [@@js.call "keys"]
  val values: 'tags this -> FileSystemHandle.t AsyncIterableIterator.t [@@js.call "values"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemHandle/kind) *)
  val get_kind: 'tags this -> ([`L_s332_directory[@js "directory"]] [@js.enum]) [@@js.get "kind"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryHandle/getDirectoryHandle) *)
  val getDirectoryHandle: 'tags this -> name:string -> ?options:FileSystemGetDirectoryOptions.t -> unit -> t Promise.t [@@js.call "getDirectoryHandle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryHandle/getFileHandle) *)
  val getFileHandle: 'tags this -> name:string -> ?options:FileSystemGetFileOptions.t -> unit -> FileSystemFileHandle.t Promise.t [@@js.call "getFileHandle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryHandle/removeEntry) *)
  val removeEntry: 'tags this -> name:string -> ?options:FileSystemRemoveOptions.t -> unit -> unit Promise.t [@@js.call "removeEntry"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryHandle/resolve) *)
  val resolve: 'tags this -> possibleDescendant:FileSystemHandle.t -> string list option Promise.t [@@js.call "resolve"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StorageManager)
*)
module[@js.scope "StorageManager"] StorageManager : sig
  type t = [`StorageManager] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`StorageManager]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`StorageManager]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `StorageManager ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StorageManager/estimate) *)
  val estimate: 'tags this -> StorageEstimate.t Promise.t [@@js.call "estimate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StorageManager/getDirectory) *)
  val getDirectory: 'tags this -> FileSystemDirectoryHandle.t Promise.t [@@js.call "getDirectory"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StorageManager/persist) *)
  val persist: 'tags this -> bool Promise.t [@@js.call "persist"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StorageManager/persisted) *)
  val persisted: 'tags this -> bool Promise.t [@@js.call "persisted"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** Available only in secure contexts. *)
module NavigatorStorage : sig
  type t = [`NavigatorStorage] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`NavigatorStorage]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`NavigatorStorage]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `NavigatorStorage ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/storage) *)
  val get_storage: 'tags this -> StorageManager.t [@@js.get "storage"]
  val create: storage:StorageManager.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** Provides contains information about a MIME type associated with a particular plugin. NavigatorPlugins.mimeTypes returns an array of this object. *)
module[@js.scope "MimeType"] rec MimeType : sig
  type t = [`MimeType] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MimeType]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MimeType]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MimeType ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the MIME type's description.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MimeType/description)
  *)
  val get_description: 'tags this -> string [@@js.get "description"]
  
  (**
    Returns the Plugin object that implements this MIME type.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MimeType/enabledPlugin)
  *)
  val get_enabledPlugin: 'tags this -> Plugin.t [@@js.get "enabledPlugin"]
  
  (**
    Returns the MIME type's typical file extensions, in a comma-separated list.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MimeType/suffixes)
  *)
  val get_suffixes: 'tags this -> string [@@js.get "suffixes"]
  
  (**
    Returns the MIME type.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MimeType/type)
  *)
  val get_type: 'tags this -> string [@@js.get "type"]
  val create: description:string -> enabledPlugin:Plugin.t -> suffixes:string -> type_:(string[@js "type"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(** Provides information about a browser plugin. *)
and[@js.scope "Plugin"] Plugin : sig
  type t = [`Plugin] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Plugin]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Plugin]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Plugin ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> MimeType.t IterableIterator.t *)
  
  (**
    Returns the plugin's description.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Plugin/description)
  *)
  val get_description: 'tags this -> string [@@js.get "description"]
  
  (**
    Returns the plugin library's filename, if applicable on the current platform.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Plugin/filename)
  *)
  val get_filename: 'tags this -> string [@@js.get "filename"]
  
  (**
    Returns the number of MIME types, represented by MimeType objects, supported by the plugin.
    @deprecated 
  *)
  val get_length: 'tags this -> float [@@js.get "length"]
  
  (**
    Returns the plugin's name.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Plugin/name)
  *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (**
    Returns the specified MimeType object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Plugin/item)
  *)
  val item: 'tags this -> index:float -> MimeType.t option [@@js.call "item"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Plugin/namedItem) *)
  val namedItem: 'tags this -> name:string -> MimeType.t option [@@js.call "namedItem"]
  val get: 'tags this -> float -> MimeType.t [@@js.index_get]
  val set: 'tags this -> float -> MimeType.t -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** Used to store a list of Plugin objects describing the available plugins; it's returned by the window.navigator.pluginsÂ property. The PluginArray is not a JavaScript array, but has the length property and supports accessing individual items using bracket notation (plugins\[2\]), as well as via item(index) and namedItem("name") methods. *)
module[@js.scope "PluginArray"] PluginArray : sig
  type t = [`PluginArray] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PluginArray]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PluginArray]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PluginArray ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> Plugin.t IterableIterator.t *)
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PluginArray/length) *)
  val get_length: 'tags this -> float [@@js.get "length"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PluginArray/item) *)
  val item: 'tags this -> index:float -> Plugin.t option [@@js.call "item"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PluginArray/namedItem) *)
  val namedItem: 'tags this -> name:string -> Plugin.t option [@@js.call "namedItem"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PluginArray/refresh) *)
  val refresh: 'tags this -> unit [@@js.call "refresh"]
  val get: 'tags this -> float -> Plugin.t [@@js.index_get]
  val set: 'tags this -> float -> Plugin.t -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** Returns an array of MimeType instances, each of which contains informationÂ about a supported browser plugins. This object is returned by NavigatorPlugins.mimeTypes. *)
module[@js.scope "MimeTypeArray"] MimeTypeArray : sig
  type t = [`MimeTypeArray] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MimeTypeArray]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MimeTypeArray]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MimeTypeArray ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> MimeType.t IterableIterator.t *)
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MimeTypeArray/length) *)
  val get_length: 'tags this -> float [@@js.get "length"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MimeTypeArray/item) *)
  val item: 'tags this -> index:float -> MimeType.t option [@@js.call "item"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MimeTypeArray/namedItem) *)
  val namedItem: 'tags this -> name:string -> MimeType.t option [@@js.call "namedItem"]
  val get: 'tags this -> float -> MimeType.t [@@js.index_get]
  val set: 'tags this -> float -> MimeType.t -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module NavigatorPlugins : sig
  type t = [`NavigatorPlugins] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`NavigatorPlugins]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`NavigatorPlugins]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `NavigatorPlugins ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/NavigatorPlugins/mimeTypes) *)
  val get_mimeTypes: 'tags this -> MimeTypeArray.t [@@js.get "mimeTypes"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/pdfViewerEnabled) *)
  val get_pdfViewerEnabled: 'tags this -> bool [@@js.get "pdfViewerEnabled"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/plugins) *)
  val get_plugins: 'tags this -> PluginArray.t [@@js.get "plugins"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/javaEnabled) *)
  val javaEnabled: 'tags this -> bool [@@js.call "javaEnabled"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module NavigatorOnLine : sig
  type t = [`NavigatorOnLine] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`NavigatorOnLine]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`NavigatorOnLine]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `NavigatorOnLine ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/onLine) *)
  val get_onLine: 'tags this -> bool [@@js.get "onLine"]
  val create: onLine:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module LockMode : sig
  type t = ([`L_s375_exclusive[@js "exclusive"] | `L_s879_shared[@js "shared"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module LockOptions : sig
  type t = [`LockOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`LockOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`LockOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `LockOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_ifAvailable: 'tags this -> bool option [@@js.get "ifAvailable"]
  val set_ifAvailable: 'tags this -> bool -> unit [@@js.set "ifAvailable"]
  val get_mode: 'tags this -> LockMode.t option [@@js.get "mode"]
  val set_mode: 'tags this -> LockMode.t -> unit [@@js.set "mode"]
  val get_signal: 'tags this -> AbortSignal.t option [@@js.get "signal"]
  val set_signal: 'tags this -> AbortSignal.t -> unit [@@js.set "signal"]
  val get_steal: 'tags this -> bool option [@@js.get "steal"]
  val set_steal: 'tags this -> bool -> unit [@@js.set "steal"]
  val create: ?ifAvailable:bool -> ?mode:LockMode.t -> ?signal:AbortSignal.t -> ?steal:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module LockInfo : sig
  type t = [`LockInfo] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`LockInfo]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`LockInfo]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `LockInfo ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_clientId: 'tags this -> string option [@@js.get "clientId"]
  val set_clientId: 'tags this -> string -> unit [@@js.set "clientId"]
  val get_mode: 'tags this -> LockMode.t option [@@js.get "mode"]
  val set_mode: 'tags this -> LockMode.t -> unit [@@js.set "mode"]
  val get_name: 'tags this -> string option [@@js.get "name"]
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  val create: ?clientId:string -> ?mode:LockMode.t -> ?name:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module LockManagerSnapshot : sig
  type t = [`LockManagerSnapshot] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`LockManagerSnapshot]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`LockManagerSnapshot]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `LockManagerSnapshot ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_held: 'tags this -> LockInfo.t list option [@@js.get "held"]
  val set_held: 'tags this -> LockInfo.t list -> unit [@@js.set "held"]
  val get_pending: 'tags this -> LockInfo.t list option [@@js.get "pending"]
  val set_pending: 'tags this -> LockInfo.t list -> unit [@@js.set "pending"]
  val create: ?held:LockInfo.t list -> ?pending:LockInfo.t list -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Lock)
*)
module[@js.scope "Lock"] Lock : sig
  type t = [`Lock] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Lock]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Lock]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Lock ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Lock/mode) *)
  val get_mode: 'tags this -> LockMode.t [@@js.get "mode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Lock/name) *)
  val get_name: 'tags this -> string [@@js.get "name"]
  val create: mode:LockMode.t -> name:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end
module LockGrantedCallback : sig
  type t = [`LockGrantedCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`LockGrantedCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`LockGrantedCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `LockGrantedCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> lock:Lock.t option -> any [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/LockManager)
*)
module[@js.scope "LockManager"] LockManager : sig
  type t = [`LockManager] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`LockManager]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`LockManager]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `LockManager ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/LockManager/query) *)
  val query: 'tags this -> LockManagerSnapshot.t Promise.t [@@js.call "query"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/LockManager/request) *)
  val request: 'tags this -> name:string -> callback:LockGrantedCallback.t -> any Promise.t [@@js.call "request"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/LockManager/request) *)
  val request': 'tags this -> name:string -> options:LockOptions.t -> callback:LockGrantedCallback.t -> any Promise.t [@@js.call "request"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** Available only in secure contexts. *)
module NavigatorLocks : sig
  type t = [`NavigatorLocks] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`NavigatorLocks]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`NavigatorLocks]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `NavigatorLocks ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/locks) *)
  val get_locks: 'tags this -> LockManager.t [@@js.get "locks"]
  val create: locks:LockManager.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module NavigatorLanguage : sig
  type t = [`NavigatorLanguage] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`NavigatorLanguage]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`NavigatorLanguage]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `NavigatorLanguage ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/language) *)
  val get_language: 'tags this -> string [@@js.get "language"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/languages) *)
  val get_languages: 'tags this -> string list [@@js.get "languages"]
  val create: language:string -> languages:string list -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module NavigatorID : sig
  type t = [`NavigatorID] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`NavigatorID]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`NavigatorID]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `NavigatorID ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/appCodeName) *)
  val get_appCodeName: 'tags this -> string [@@js.get "appCodeName"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/appName) *)
  val get_appName: 'tags this -> string [@@js.get "appName"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/appVersion) *)
  val get_appVersion: 'tags this -> string [@@js.get "appVersion"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/platform) *)
  val get_platform: 'tags this -> string [@@js.get "platform"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/product) *)
  val get_product: 'tags this -> string [@@js.get "product"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/productSub) *)
  val get_productSub: 'tags this -> string [@@js.get "productSub"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/userAgent) *)
  val get_userAgent: 'tags this -> string [@@js.get "userAgent"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/vendor) *)
  val get_vendor: 'tags this -> string [@@js.get "vendor"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/vendorSub) *)
  val get_vendorSub: 'tags this -> string [@@js.get "vendorSub"]
  val create: appCodeName:string -> appName:string -> appVersion:string -> platform:string -> product:string -> productSub:string -> userAgent:string -> vendor:string -> vendorSub:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module NavigatorCookies : sig
  type t = [`NavigatorCookies] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`NavigatorCookies]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`NavigatorCookies]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `NavigatorCookies ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/cookieEnabled) *)
  val get_cookieEnabled: 'tags this -> bool [@@js.get "cookieEnabled"]
  val create: cookieEnabled:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module NavigatorContentUtils : sig
  type t = [`NavigatorContentUtils] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`NavigatorContentUtils]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`NavigatorContentUtils]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `NavigatorContentUtils ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/registerProtocolHandler)
  *)
  val registerProtocolHandler: 'tags this -> scheme:string -> url:([`U1 of string | `U2 of URL.t] [@js.union]) -> unit [@@js.call "registerProtocolHandler"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module NavigatorConcurrentHardware : sig
  type t = [`NavigatorConcurrentHardware] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`NavigatorConcurrentHardware]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`NavigatorConcurrentHardware]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `NavigatorConcurrentHardware ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/hardwareConcurrency) *)
  val get_hardwareConcurrency: 'tags this -> float [@@js.get "hardwareConcurrency"]
  val create: hardwareConcurrency:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** Available only in secure contexts. *)
module NavigatorBadge : sig
  type t = [`NavigatorBadge] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`NavigatorBadge]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`NavigatorBadge]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `NavigatorBadge ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/clearAppBadge) *)
  val clearAppBadge: 'tags this -> unit Promise.t [@@js.call "clearAppBadge"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/setAppBadge) *)
  val setAppBadge: 'tags this -> ?contents:float -> unit -> unit Promise.t [@@js.call "setAppBadge"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module NavigatorAutomationInformation : sig
  type t = [`NavigatorAutomationInformation] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`NavigatorAutomationInformation]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`NavigatorAutomationInformation]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `NavigatorAutomationInformation ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/webdriver) *)
  val get_webdriver: 'tags this -> bool [@@js.get "webdriver"]
  val create: webdriver:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MediaSessionPlaybackState : sig
  type t = ([`L_s685_none[@js "none"] | `L_s732_paused[@js "paused"] | `L_s749_playing[@js "playing"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module MediaSessionAction : sig
  type t = ([`L_s673_nexttrack[@js "nexttrack"] | `L_s731_pause[@js "pause"] | `L_s747_play[@js "play"] | `L_s777_previoustrack[@js "previoustrack"] | `L_s861_seekbackward[@js "seekbackward"] | `L_s863_seekforward[@js "seekforward"] | `L_s865_seekto[@js "seekto"] | `L_s888_skipad[@js "skipad"] | `L_s922_stop[@js "stop"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module MediaSessionActionDetails : sig
  type t = [`MediaSessionActionDetails] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaSessionActionDetails]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaSessionActionDetails]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaSessionActionDetails ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_action: 'tags this -> MediaSessionAction.t [@@js.get "action"]
  val set_action: 'tags this -> MediaSessionAction.t -> unit [@@js.set "action"]
  val get_fastSeek: 'tags this -> bool option [@@js.get "fastSeek"]
  val set_fastSeek: 'tags this -> bool -> unit [@@js.set "fastSeek"]
  val get_seekOffset: 'tags this -> float option [@@js.get "seekOffset"]
  val set_seekOffset: 'tags this -> float -> unit [@@js.set "seekOffset"]
  val get_seekTime: 'tags this -> float option [@@js.get "seekTime"]
  val set_seekTime: 'tags this -> float -> unit [@@js.set "seekTime"]
  val create: action:MediaSessionAction.t -> ?fastSeek:bool -> ?seekOffset:float -> ?seekTime:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MediaSessionActionHandler : sig
  type t = [`MediaSessionActionHandler] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaSessionActionHandler]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaSessionActionHandler]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaSessionActionHandler ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> details:MediaSessionActionDetails.t -> unit [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MediaPositionState : sig
  type t = [`MediaPositionState] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaPositionState]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaPositionState]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaPositionState ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_duration: 'tags this -> float option [@@js.get "duration"]
  val set_duration: 'tags this -> float -> unit [@@js.set "duration"]
  val get_playbackRate: 'tags this -> float option [@@js.get "playbackRate"]
  val set_playbackRate: 'tags this -> float -> unit [@@js.set "playbackRate"]
  val get_position: 'tags this -> float option [@@js.get "position"]
  val set_position: 'tags this -> float -> unit [@@js.set "position"]
  val create: ?duration:float -> ?playbackRate:float -> ?position:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MediaImage : sig
  type t = [`MediaImage] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaImage]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaImage]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaImage ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_sizes: 'tags this -> string option [@@js.get "sizes"]
  val set_sizes: 'tags this -> string -> unit [@@js.set "sizes"]
  val get_src: 'tags this -> string [@@js.get "src"]
  val set_src: 'tags this -> string -> unit [@@js.set "src"]
  val get_type: 'tags this -> string option [@@js.get "type"]
  val set_type: 'tags this -> string -> unit [@@js.set "type"]
  val create: ?sizes:string -> src:string -> ?type_:(string[@js "type"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MediaMetadataInit : sig
  type t = [`MediaMetadataInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaMetadataInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaMetadataInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaMetadataInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_album: 'tags this -> string option [@@js.get "album"]
  val set_album: 'tags this -> string -> unit [@@js.set "album"]
  val get_artist: 'tags this -> string option [@@js.get "artist"]
  val set_artist: 'tags this -> string -> unit [@@js.set "artist"]
  val get_artwork: 'tags this -> MediaImage.t list option [@@js.get "artwork"]
  val set_artwork: 'tags this -> MediaImage.t list -> unit [@@js.set "artwork"]
  val get_title: 'tags this -> string option [@@js.get "title"]
  val set_title: 'tags this -> string -> unit [@@js.set "title"]
  val create: ?album:string -> ?artist:string -> ?artwork:MediaImage.t list -> ?title:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaMetadata) *)
module[@js.scope "MediaMetadata"] MediaMetadata : sig
  type t = [`MediaMetadata] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaMetadata]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaMetadata]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaMetadata ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaMetadata/album) *)
  val get_album: 'tags this -> string [@@js.get "album"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaMetadata/album) *)
  val set_album: 'tags this -> string -> unit [@@js.set "album"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaMetadata/artist) *)
  val get_artist: 'tags this -> string [@@js.get "artist"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaMetadata/artist) *)
  val set_artist: 'tags this -> string -> unit [@@js.set "artist"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaMetadata/artwork) *)
  val get_artwork: 'tags this -> MediaImage.t list [@@js.get "artwork"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaMetadata/artwork) *)
  val set_artwork: 'tags this -> MediaImage.t list -> unit [@@js.set "artwork"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaMetadata/title) *)
  val get_title: 'tags this -> string [@@js.get "title"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaMetadata/title) *)
  val set_title: 'tags this -> string -> unit [@@js.set "title"]
  val create: album:string -> artist:string -> artwork:MediaImage.t list -> title:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': ?init:MediaMetadataInit.t -> unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaSession) *)
module[@js.scope "MediaSession"] MediaSession : sig
  type t = [`MediaSession] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaSession]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaSession]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaSession ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaSession/metadata) *)
  val get_metadata: 'tags this -> MediaMetadata.t option [@@js.get "metadata"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaSession/metadata) *)
  val set_metadata: 'tags this -> MediaMetadata.t option -> unit [@@js.set "metadata"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaSession/playbackState) *)
  val get_playbackState: 'tags this -> MediaSessionPlaybackState.t [@@js.get "playbackState"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaSession/playbackState) *)
  val set_playbackState: 'tags this -> MediaSessionPlaybackState.t -> unit [@@js.set "playbackState"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaSession/setActionHandler) *)
  val setActionHandler: 'tags this -> action:MediaSessionAction.t -> handler:MediaSessionActionHandler.t option -> unit [@@js.call "setActionHandler"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaSession/setPositionState) *)
  val setPositionState: 'tags this -> ?state:MediaPositionState.t -> unit -> unit [@@js.call "setPositionState"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module MediaKeySessionType : sig
  type t = ([`L_s739_persistent_license[@js "persistent-license"] | `L_s964_temporary[@js "temporary"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module MediaKeyStatus : sig
  type t = ([`L_s1023_usable[@js "usable"] | `L_s1024_usable_in_future[@js "usable-in-future"] | `L_s378_expired[@js "expired"] | `L_s527_internal_error[@js "internal-error"] | `L_s716_output_downscaled[@js "output-downscaled"] | `L_s717_output_restricted[@js "output-restricted"] | `L_s811_released[@js "released"] | `L_s921_status_pending[@js "status-pending"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  This EncryptedMediaExtensions API interface is a read-only map of media key statuses by key IDs.
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaKeyStatusMap)
*)
module[@js.scope "MediaKeyStatusMap"] MediaKeyStatusMap : sig
  type t = [`MediaKeyStatusMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaKeyStatusMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaKeyStatusMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaKeyStatusMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> (BufferSource.t * MediaKeyStatus.t) IterableIterator.t *)
  val entries: 'tags this -> (BufferSource.t * MediaKeyStatus.t) IterableIterator.t [@@js.call "entries"]
  val keys: 'tags this -> BufferSource.t IterableIterator.t [@@js.call "keys"]
  val values: 'tags this -> MediaKeyStatus.t IterableIterator.t [@@js.call "values"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaKeyStatusMap/size) *)
  val get_size: 'tags this -> float [@@js.get "size"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaKeyStatusMap/get) *)
  val get_: 'tags this -> keyId:BufferSource.t -> MediaKeyStatus.t option [@@js.call "get"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaKeyStatusMap/has) *)
  val has: 'tags this -> keyId:BufferSource.t -> bool [@@js.call "has"]
  val forEach: 'tags this -> callbackfn:(value:MediaKeyStatus.t -> key:BufferSource.t -> parent:t -> unit) -> ?thisArg:any -> unit -> unit [@@js.call "forEach"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module MediaKeySessionClosedReason : sig
  type t = ([`L_s256_closed_by_application[@js "closed-by-application"] | `L_s466_hardware_context_reset[@js "hardware-context-reset"] | `L_s527_internal_error[@js "internal-error"] | `L_s810_release_acknowledged[@js "release-acknowledged"] | `L_s827_resource_evicted[@js "resource-evicted"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module MediaKeyMessageType : sig
  type t = ([`L_s516_individualization_request[@js "individualization-request"] | `L_s556_license_release[@js "license-release"] | `L_s557_license_renewal[@js "license-renewal"] | `L_s558_license_request[@js "license-request"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module MediaKeyMessageEventInit : sig
  type t = [`EventInit | `MediaKeyMessageEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `MediaKeyMessageEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `MediaKeyMessageEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaKeyMessageEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_message: 'tags this -> ArrayBuffer.t [@@js.get "message"]
  val set_message: 'tags this -> ArrayBuffer.t -> unit [@@js.set "message"]
  val get_messageType: 'tags this -> MediaKeyMessageType.t [@@js.get "messageType"]
  val set_messageType: 'tags this -> MediaKeyMessageType.t -> unit [@@js.set "messageType"]
  val create: message:ArrayBuffer.t -> messageType:MediaKeyMessageType.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  This EncryptedMediaExtensions API interface contains the content and related data when the content decryption module generates a message for the session.
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaKeyMessageEvent)
*)
module[@js.scope "MediaKeyMessageEvent"] MediaKeyMessageEvent : sig
  type t = [`Event | `MediaKeyMessageEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `MediaKeyMessageEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `MediaKeyMessageEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaKeyMessageEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaKeyMessageEvent/message) *)
  val get_message: 'tags this -> ArrayBuffer.t [@@js.get "message"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaKeyMessageEvent/messageType) *)
  val get_messageType: 'tags this -> MediaKeyMessageType.t [@@js.get "messageType"]
  val create: message:ArrayBuffer.t -> messageType:MediaKeyMessageType.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> eventInitDict:MediaKeyMessageEventInit.t -> t [@@js.create]
end

(**
  This EncryptedMediaExtensions API interface represents aÂ context for message exchange with a content decryption module (CDM).
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaKeySession)
*)
module[@js.scope "MediaKeySession"] MediaKeySession : sig
  type t = [`EventTarget | `MediaKeySession] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `MediaKeySession]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `MediaKeySession]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaKeySession ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaKeySession/closed) *)
  val get_closed: 'tags this -> MediaKeySessionClosedReason.t Promise.t [@@js.get "closed"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaKeySession/expiration) *)
  val get_expiration: 'tags this -> float [@@js.get "expiration"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaKeySession/keyStatuses) *)
  val get_keyStatuses: 'tags this -> MediaKeyStatusMap.t [@@js.get "keyStatuses"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaKeySession/keystatuseschange_event) *)
  val get_onkeystatuseschange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onkeystatuseschange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaKeySession/keystatuseschange_event) *)
  val set_onkeystatuseschange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onkeystatuseschange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaKeySession/message_event) *)
  val get_onmessage: 'tags this -> (this:t -> ev:MediaKeyMessageEvent.t -> any) option [@@js.get "onmessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaKeySession/message_event) *)
  val set_onmessage: 'tags this -> (this:t -> ev:MediaKeyMessageEvent.t -> any) option -> unit [@@js.set "onmessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaKeySession/sessionId) *)
  val get_sessionId: 'tags this -> string [@@js.get "sessionId"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaKeySession/close) *)
  val close: 'tags this -> unit Promise.t [@@js.call "close"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaKeySession/generateRequest) *)
  val generateRequest: 'tags this -> initDataType:string -> initData:BufferSource.t -> unit Promise.t [@@js.call "generateRequest"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaKeySession/load) *)
  val load: 'tags this -> sessionId:string -> bool Promise.t [@@js.call "load"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaKeySession/remove) *)
  val remove: 'tags this -> unit Promise.t [@@js.call "remove"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaKeySession/update) *)
  val update: 'tags this -> response:BufferSource.t -> unit Promise.t [@@js.call "update"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'MediaKeySessionEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'MediaKeySessionEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  This EncryptedMediaExtensions API interface the represents a set of keys that an associated HTMLMediaElement can use for decryption of media data during playback.
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaKeys)
*)
module[@js.scope "MediaKeys"] MediaKeys : sig
  type t = [`MediaKeys] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaKeys]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaKeys]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaKeys ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaKeys/createSession) *)
  val createSession: 'tags this -> ?sessionType:MediaKeySessionType.t -> unit -> MediaKeySession.t [@@js.call "createSession"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaKeys/setServerCertificate) *)
  val setServerCertificate: 'tags this -> serverCertificate:BufferSource.t -> bool Promise.t [@@js.call "setServerCertificate"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module MediaKeysRequirement : sig
  type t = ([`L_s689_not_allowed[@js "not-allowed"] | `L_s709_optional[@js "optional"] | `L_s823_required[@js "required"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module MediaKeySystemMediaCapability : sig
  type t = [`MediaKeySystemMediaCapability] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaKeySystemMediaCapability]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaKeySystemMediaCapability]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaKeySystemMediaCapability ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_contentType: 'tags this -> string option [@@js.get "contentType"]
  val set_contentType: 'tags this -> string -> unit [@@js.set "contentType"]
  val get_encryptionScheme: 'tags this -> string option [@@js.get "encryptionScheme"]
  val set_encryptionScheme: 'tags this -> string option -> unit [@@js.set "encryptionScheme"]
  val get_robustness: 'tags this -> string option [@@js.get "robustness"]
  val set_robustness: 'tags this -> string -> unit [@@js.set "robustness"]
  val create: ?contentType:string -> ?encryptionScheme:string -> ?robustness:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MediaKeySystemConfiguration : sig
  type t = [`MediaKeySystemConfiguration] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaKeySystemConfiguration]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaKeySystemConfiguration]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaKeySystemConfiguration ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_audioCapabilities: 'tags this -> MediaKeySystemMediaCapability.t list option [@@js.get "audioCapabilities"]
  val set_audioCapabilities: 'tags this -> MediaKeySystemMediaCapability.t list -> unit [@@js.set "audioCapabilities"]
  val get_distinctiveIdentifier: 'tags this -> MediaKeysRequirement.t option [@@js.get "distinctiveIdentifier"]
  val set_distinctiveIdentifier: 'tags this -> MediaKeysRequirement.t -> unit [@@js.set "distinctiveIdentifier"]
  val get_initDataTypes: 'tags this -> string list option [@@js.get "initDataTypes"]
  val set_initDataTypes: 'tags this -> string list -> unit [@@js.set "initDataTypes"]
  val get_label: 'tags this -> string option [@@js.get "label"]
  val set_label: 'tags this -> string -> unit [@@js.set "label"]
  val get_persistentState: 'tags this -> MediaKeysRequirement.t option [@@js.get "persistentState"]
  val set_persistentState: 'tags this -> MediaKeysRequirement.t -> unit [@@js.set "persistentState"]
  val get_sessionTypes: 'tags this -> string list option [@@js.get "sessionTypes"]
  val set_sessionTypes: 'tags this -> string list -> unit [@@js.set "sessionTypes"]
  val get_videoCapabilities: 'tags this -> MediaKeySystemMediaCapability.t list option [@@js.get "videoCapabilities"]
  val set_videoCapabilities: 'tags this -> MediaKeySystemMediaCapability.t list -> unit [@@js.set "videoCapabilities"]
  val create: ?audioCapabilities:MediaKeySystemMediaCapability.t list -> ?distinctiveIdentifier:MediaKeysRequirement.t -> ?initDataTypes:string list -> ?label:string -> ?persistentState:MediaKeysRequirement.t -> ?sessionTypes:string list -> ?videoCapabilities:MediaKeySystemMediaCapability.t list -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  This EncryptedMediaExtensions API interface provides access to a Key System for decryption and/or a content protection provider. You can request an instance of this object using the Navigator.requestMediaKeySystemAccess method.
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaKeySystemAccess)
*)
module[@js.scope "MediaKeySystemAccess"] MediaKeySystemAccess : sig
  type t = [`MediaKeySystemAccess] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaKeySystemAccess]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaKeySystemAccess]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaKeySystemAccess ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaKeySystemAccess/keySystem) *)
  val get_keySystem: 'tags this -> string [@@js.get "keySystem"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaKeySystemAccess/createMediaKeys) *)
  val createMediaKeys: 'tags this -> MediaKeys.t Promise.t [@@js.call "createMediaKeys"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaKeySystemAccess/getConfiguration) *)
  val getConfiguration: 'tags this -> MediaKeySystemConfiguration.t [@@js.call "getConfiguration"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module MediaTrackSupportedConstraints : sig
  type t = [`MediaTrackSupportedConstraints] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaTrackSupportedConstraints]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaTrackSupportedConstraints]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaTrackSupportedConstraints ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_aspectRatio: 'tags this -> bool option [@@js.get "aspectRatio"]
  val set_aspectRatio: 'tags this -> bool -> unit [@@js.set "aspectRatio"]
  val get_autoGainControl: 'tags this -> bool option [@@js.get "autoGainControl"]
  val set_autoGainControl: 'tags this -> bool -> unit [@@js.set "autoGainControl"]
  val get_channelCount: 'tags this -> bool option [@@js.get "channelCount"]
  val set_channelCount: 'tags this -> bool -> unit [@@js.set "channelCount"]
  val get_deviceId: 'tags this -> bool option [@@js.get "deviceId"]
  val set_deviceId: 'tags this -> bool -> unit [@@js.set "deviceId"]
  val get_displaySurface: 'tags this -> bool option [@@js.get "displaySurface"]
  val set_displaySurface: 'tags this -> bool -> unit [@@js.set "displaySurface"]
  val get_echoCancellation: 'tags this -> bool option [@@js.get "echoCancellation"]
  val set_echoCancellation: 'tags this -> bool -> unit [@@js.set "echoCancellation"]
  val get_facingMode: 'tags this -> bool option [@@js.get "facingMode"]
  val set_facingMode: 'tags this -> bool -> unit [@@js.set "facingMode"]
  val get_frameRate: 'tags this -> bool option [@@js.get "frameRate"]
  val set_frameRate: 'tags this -> bool -> unit [@@js.set "frameRate"]
  val get_groupId: 'tags this -> bool option [@@js.get "groupId"]
  val set_groupId: 'tags this -> bool -> unit [@@js.set "groupId"]
  val get_height: 'tags this -> bool option [@@js.get "height"]
  val set_height: 'tags this -> bool -> unit [@@js.set "height"]
  val get_noiseSuppression: 'tags this -> bool option [@@js.get "noiseSuppression"]
  val set_noiseSuppression: 'tags this -> bool -> unit [@@js.set "noiseSuppression"]
  val get_sampleRate: 'tags this -> bool option [@@js.get "sampleRate"]
  val set_sampleRate: 'tags this -> bool -> unit [@@js.set "sampleRate"]
  val get_sampleSize: 'tags this -> bool option [@@js.get "sampleSize"]
  val set_sampleSize: 'tags this -> bool -> unit [@@js.set "sampleSize"]
  val get_width: 'tags this -> bool option [@@js.get "width"]
  val set_width: 'tags this -> bool -> unit [@@js.set "width"]
  val create: ?aspectRatio:bool -> ?autoGainControl:bool -> ?channelCount:bool -> ?deviceId:bool -> ?displaySurface:bool -> ?echoCancellation:bool -> ?facingMode:bool -> ?frameRate:bool -> ?groupId:bool -> ?height:bool -> ?noiseSuppression:bool -> ?sampleRate:bool -> ?sampleSize:bool -> ?width:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MediaStreamConstraints : sig
  type t = [`MediaStreamConstraints] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaStreamConstraints]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaStreamConstraints]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaStreamConstraints ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_audio: 'tags this -> ([`Boolean of bool | `Undefined | `Other of MediaTrackConstraints.t] [@js.union on_field "dummy"]) Primitive.t [@@js.get "audio"]
  val set_audio: 'tags this -> ([`U1 of bool | `U2 of MediaTrackConstraints.t] [@js.union]) -> unit [@@js.set "audio"]
  val get_peerIdentity: 'tags this -> string option [@@js.get "peerIdentity"]
  val set_peerIdentity: 'tags this -> string -> unit [@@js.set "peerIdentity"]
  val get_preferCurrentTab: 'tags this -> bool option [@@js.get "preferCurrentTab"]
  val set_preferCurrentTab: 'tags this -> bool -> unit [@@js.set "preferCurrentTab"]
  val get_video: 'tags this -> ([`Boolean of bool | `Undefined | `Other of MediaTrackConstraints.t] [@js.union on_field "dummy"]) Primitive.t [@@js.get "video"]
  val set_video: 'tags this -> ([`U1 of bool | `U2 of MediaTrackConstraints.t] [@js.union]) -> unit [@@js.set "video"]
  val create: ?audio:([`Boolean of bool | `Other of MediaTrackConstraints.t] [@js.union on_field "dummy"]) Primitive.t -> ?peerIdentity:string -> ?preferCurrentTab:bool -> ?video:([`Boolean of bool | `Other of MediaTrackConstraints.t] [@js.union on_field "dummy"]) Primitive.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MediaDeviceKind : sig
  type t = ([`L_s1037_videoinput[@js "videoinput"] | `L_s169_audioinput[@js "audioinput"] | `L_s170_audiooutput[@js "audiooutput"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  The MediaDevicesInfo interface contains information that describes a single media input or output device.
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaDeviceInfo)
*)
module[@js.scope "MediaDeviceInfo"] MediaDeviceInfo : sig
  type t = [`MediaDeviceInfo] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaDeviceInfo]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaDeviceInfo]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaDeviceInfo ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaDeviceInfo/deviceId) *)
  val get_deviceId: 'tags this -> string [@@js.get "deviceId"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaDeviceInfo/groupId) *)
  val get_groupId: 'tags this -> string [@@js.get "groupId"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaDeviceInfo/kind) *)
  val get_kind: 'tags this -> MediaDeviceKind.t [@@js.get "kind"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaDeviceInfo/label) *)
  val get_label: 'tags this -> string [@@js.get "label"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaDeviceInfo/toJSON) *)
  val toJSON: 'tags this -> any [@@js.call "toJSON"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module DisplayMediaStreamOptions : sig
  type t = [`DisplayMediaStreamOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DisplayMediaStreamOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DisplayMediaStreamOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DisplayMediaStreamOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_audio: 'tags this -> ([`Boolean of bool | `Undefined | `Other of MediaTrackConstraints.t] [@js.union on_field "dummy"]) Primitive.t [@@js.get "audio"]
  val set_audio: 'tags this -> ([`U1 of bool | `U2 of MediaTrackConstraints.t] [@js.union]) -> unit [@@js.set "audio"]
  val get_video: 'tags this -> ([`Boolean of bool | `Undefined | `Other of MediaTrackConstraints.t] [@js.union on_field "dummy"]) Primitive.t [@@js.get "video"]
  val set_video: 'tags this -> ([`U1 of bool | `U2 of MediaTrackConstraints.t] [@js.union]) -> unit [@@js.set "video"]
  val create: ?audio:([`Boolean of bool | `Other of MediaTrackConstraints.t] [@js.union on_field "dummy"]) Primitive.t -> ?video:([`Boolean of bool | `Other of MediaTrackConstraints.t] [@js.union on_field "dummy"]) Primitive.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Provides access to connected media input devices like cameras and microphones, as well as screen sharing. In essence, it lets you obtain access to any hardware source of media data.
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaDevices)
*)
module[@js.scope "MediaDevices"] MediaDevices : sig
  type t = [`EventTarget | `MediaDevices] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `MediaDevices]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `MediaDevices]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaDevices ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaDevices/devicechange_event) *)
  val get_ondevicechange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "ondevicechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaDevices/devicechange_event) *)
  val set_ondevicechange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "ondevicechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaDevices/enumerateDevices) *)
  val enumerateDevices: 'tags this -> MediaDeviceInfo.t list Promise.t [@@js.call "enumerateDevices"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaDevices/getDisplayMedia) *)
  val getDisplayMedia: 'tags this -> ?options:DisplayMediaStreamOptions.t -> unit -> MediaStream.t Promise.t [@@js.call "getDisplayMedia"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaDevices/getSupportedConstraints) *)
  val getSupportedConstraints: 'tags this -> MediaTrackSupportedConstraints.t [@@js.call "getSupportedConstraints"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaDevices/getUserMedia) *)
  val getUserMedia: 'tags this -> ?constraints:MediaStreamConstraints.t -> unit -> MediaStream.t Promise.t [@@js.call "getUserMedia"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'MediaDevicesEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'MediaDevicesEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module MediaEncodingType : sig
  type t = ([`L_s1055_webrtc[@js "webrtc"] | `L_s801_record[@js "record"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module TransferFunction : sig
  type t = ([`L_s484_hlg[@js "hlg"] | `L_s766_pq[@js "pq"] | `L_s915_srgb[@js "srgb"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module HdrMetadataType : sig
  type t = ([`L_s895_smpteSt2086[@js "smpteSt2086"] | `L_s896_smpteSt2094_10[@js "smpteSt2094-10"] | `L_s897_smpteSt2094_40[@js "smpteSt2094-40"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module ColorGamut : sig
  type t = ([`L_s721_p3[@js "p3"] | `L_s800_rec2020[@js "rec2020"] | `L_s915_srgb[@js "srgb"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module VideoConfiguration : sig
  type t = [`VideoConfiguration] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VideoConfiguration]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VideoConfiguration]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoConfiguration ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_bitrate: 'tags this -> float [@@js.get "bitrate"]
  val set_bitrate: 'tags this -> float -> unit [@@js.set "bitrate"]
  val get_colorGamut: 'tags this -> ColorGamut.t option [@@js.get "colorGamut"]
  val set_colorGamut: 'tags this -> ColorGamut.t -> unit [@@js.set "colorGamut"]
  val get_contentType: 'tags this -> string [@@js.get "contentType"]
  val set_contentType: 'tags this -> string -> unit [@@js.set "contentType"]
  val get_framerate: 'tags this -> float [@@js.get "framerate"]
  val set_framerate: 'tags this -> float -> unit [@@js.set "framerate"]
  val get_hdrMetadataType: 'tags this -> HdrMetadataType.t option [@@js.get "hdrMetadataType"]
  val set_hdrMetadataType: 'tags this -> HdrMetadataType.t -> unit [@@js.set "hdrMetadataType"]
  val get_height: 'tags this -> float [@@js.get "height"]
  val set_height: 'tags this -> float -> unit [@@js.set "height"]
  val get_scalabilityMode: 'tags this -> string option [@@js.get "scalabilityMode"]
  val set_scalabilityMode: 'tags this -> string -> unit [@@js.set "scalabilityMode"]
  val get_transferFunction: 'tags this -> TransferFunction.t option [@@js.get "transferFunction"]
  val set_transferFunction: 'tags this -> TransferFunction.t -> unit [@@js.set "transferFunction"]
  val get_width: 'tags this -> float [@@js.get "width"]
  val set_width: 'tags this -> float -> unit [@@js.set "width"]
  val create: bitrate:float -> ?colorGamut:ColorGamut.t -> contentType:string -> framerate:float -> ?hdrMetadataType:HdrMetadataType.t -> height:float -> ?scalabilityMode:string -> ?transferFunction:TransferFunction.t -> width:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module AudioConfiguration : sig
  type t = [`AudioConfiguration] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioConfiguration]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioConfiguration]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AudioConfiguration ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_bitrate: 'tags this -> float option [@@js.get "bitrate"]
  val set_bitrate: 'tags this -> float -> unit [@@js.set "bitrate"]
  val get_channels: 'tags this -> string option [@@js.get "channels"]
  val set_channels: 'tags this -> string -> unit [@@js.set "channels"]
  val get_contentType: 'tags this -> string [@@js.get "contentType"]
  val set_contentType: 'tags this -> string -> unit [@@js.set "contentType"]
  val get_samplerate: 'tags this -> float option [@@js.get "samplerate"]
  val set_samplerate: 'tags this -> float -> unit [@@js.set "samplerate"]
  val get_spatialRendering: 'tags this -> bool option [@@js.get "spatialRendering"]
  val set_spatialRendering: 'tags this -> bool -> unit [@@js.set "spatialRendering"]
  val create: ?bitrate:float -> ?channels:string -> contentType:string -> ?samplerate:float -> ?spatialRendering:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MediaConfiguration : sig
  type t = [`MediaConfiguration] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaConfiguration]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaConfiguration]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaConfiguration ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_audio: 'tags this -> AudioConfiguration.t option [@@js.get "audio"]
  val set_audio: 'tags this -> AudioConfiguration.t -> unit [@@js.set "audio"]
  val get_video: 'tags this -> VideoConfiguration.t option [@@js.get "video"]
  val set_video: 'tags this -> VideoConfiguration.t -> unit [@@js.set "video"]
  val create: ?audio:AudioConfiguration.t -> ?video:VideoConfiguration.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MediaEncodingConfiguration : sig
  type t = [`MediaConfiguration | `MediaEncodingConfiguration] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaConfiguration | `MediaEncodingConfiguration]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaConfiguration | `MediaEncodingConfiguration]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaEncodingConfiguration ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_type: 'tags this -> MediaEncodingType.t [@@js.get "type"]
  val set_type: 'tags this -> MediaEncodingType.t -> unit [@@js.set "type"]
  val create: type_:(MediaEncodingType.t[@js "type"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MediaCapabilitiesInfo : sig
  type t = [`MediaCapabilitiesInfo] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaCapabilitiesInfo]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaCapabilitiesInfo]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaCapabilitiesInfo ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_powerEfficient: 'tags this -> bool [@@js.get "powerEfficient"]
  val set_powerEfficient: 'tags this -> bool -> unit [@@js.set "powerEfficient"]
  val get_smooth: 'tags this -> bool [@@js.get "smooth"]
  val set_smooth: 'tags this -> bool -> unit [@@js.set "smooth"]
  val get_supported: 'tags this -> bool [@@js.get "supported"]
  val set_supported: 'tags this -> bool -> unit [@@js.set "supported"]
  val create: powerEfficient:bool -> smooth:bool -> supported:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MediaCapabilitiesEncodingInfo : sig
  type t = [`MediaCapabilitiesEncodingInfo | `MediaCapabilitiesInfo] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaCapabilitiesEncodingInfo | `MediaCapabilitiesInfo]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaCapabilitiesEncodingInfo | `MediaCapabilitiesInfo]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaCapabilitiesEncodingInfo ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_configuration: 'tags this -> MediaEncodingConfiguration.t option [@@js.get "configuration"]
  val set_configuration: 'tags this -> MediaEncodingConfiguration.t -> unit [@@js.set "configuration"]
  val create: ?configuration:MediaEncodingConfiguration.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MediaDecodingType : sig
  type t = ([`L_s1055_webrtc[@js "webrtc"] | `L_s418_file[@js "file"] | `L_s606_media_source[@js "media-source"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module MediaDecodingConfiguration : sig
  type t = [`MediaConfiguration | `MediaDecodingConfiguration] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaConfiguration | `MediaDecodingConfiguration]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaConfiguration | `MediaDecodingConfiguration]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaDecodingConfiguration ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_type: 'tags this -> MediaDecodingType.t [@@js.get "type"]
  val set_type: 'tags this -> MediaDecodingType.t -> unit [@@js.set "type"]
  val create: type_:(MediaDecodingType.t[@js "type"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MediaCapabilitiesDecodingInfo : sig
  type t = [`MediaCapabilitiesDecodingInfo | `MediaCapabilitiesInfo] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaCapabilitiesDecodingInfo | `MediaCapabilitiesInfo]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaCapabilitiesDecodingInfo | `MediaCapabilitiesInfo]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaCapabilitiesDecodingInfo ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_configuration: 'tags this -> MediaDecodingConfiguration.t option [@@js.get "configuration"]
  val set_configuration: 'tags this -> MediaDecodingConfiguration.t -> unit [@@js.set "configuration"]
  val create: ?configuration:MediaDecodingConfiguration.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaCapabilities) *)
module[@js.scope "MediaCapabilities"] MediaCapabilities : sig
  type t = [`MediaCapabilities] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaCapabilities]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaCapabilities]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaCapabilities ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaCapabilities/decodingInfo) *)
  val decodingInfo: 'tags this -> configuration:MediaDecodingConfiguration.t -> MediaCapabilitiesDecodingInfo.t Promise.t [@@js.call "decodingInfo"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaCapabilities/encodingInfo) *)
  val encodingInfo: 'tags this -> configuration:MediaEncodingConfiguration.t -> MediaCapabilitiesEncodingInfo.t Promise.t [@@js.call "encodingInfo"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module MIDIOptions : sig
  type t = [`MIDIOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MIDIOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MIDIOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MIDIOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_software: 'tags this -> bool option [@@js.get "software"]
  val set_software: 'tags this -> bool -> unit [@@js.set "software"]
  val get_sysex: 'tags this -> bool option [@@js.get "sysex"]
  val set_sysex: 'tags this -> bool -> unit [@@js.set "sysex"]
  val create: ?software:bool -> ?sysex:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MIDIPortType : sig
  type t = ([`L_s520_input[@js "input"] | `L_s715_output[@js "output"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module MIDIPortDeviceState : sig
  type t = ([`L_s274_connected[@js "connected"] | `L_s336_disconnected[@js "disconnected"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module MIDIPortConnectionState : sig
  type t = ([`L_s255_closed[@js "closed"] | `L_s704_open[@js "open"] | `L_s736_pending[@js "pending"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MIDIConnectionEvent)
*)
module[@js.scope "MIDIConnectionEvent"] rec MIDIConnectionEvent : sig
  type t = [`Event | `MIDIConnectionEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `MIDIConnectionEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `MIDIConnectionEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MIDIConnectionEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MIDIConnectionEvent/port) *)
  val get_port: 'tags this -> MIDIPort.t option [@@js.get "port"]
  val create: ?port:MIDIPort.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> ?eventInitDict:MIDIConnectionEventInit.t -> unit -> t [@@js.create]
end
and MIDIConnectionEventInit : sig
  type t = [`EventInit | `MIDIConnectionEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `MIDIConnectionEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `MIDIConnectionEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MIDIConnectionEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_port: 'tags this -> MIDIPort.t option [@@js.get "port"]
  val set_port: 'tags this -> MIDIPort.t -> unit [@@js.set "port"]
  val create: ?port:MIDIPort.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MIDIPort)
*)
and[@js.scope "MIDIPort"] MIDIPort : sig
  type t = [`EventTarget | `MIDIPort] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `MIDIPort]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `MIDIPort]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MIDIPort ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MIDIPort/connection) *)
  val get_connection: 'tags this -> MIDIPortConnectionState.t [@@js.get "connection"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MIDIPort/id) *)
  val get_id: 'tags this -> string [@@js.get "id"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MIDIPort/manufacturer) *)
  val get_manufacturer: 'tags this -> string option [@@js.get "manufacturer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MIDIPort/name) *)
  val get_name: 'tags this -> string option [@@js.get "name"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MIDIPort/statechange_event) *)
  val get_onstatechange: 'tags this -> (this:t -> ev:MIDIConnectionEvent.t -> any) option [@@js.get "onstatechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MIDIPort/statechange_event) *)
  val set_onstatechange: 'tags this -> (this:t -> ev:MIDIConnectionEvent.t -> any) option -> unit [@@js.set "onstatechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MIDIPort/state) *)
  val get_state: 'tags this -> MIDIPortDeviceState.t [@@js.get "state"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MIDIPort/type) *)
  val get_type: 'tags this -> MIDIPortType.t [@@js.get "type"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MIDIPort/version) *)
  val get_version: 'tags this -> string option [@@js.get "version"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MIDIPort/close) *)
  val close: 'tags this -> t Promise.t [@@js.call "close"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MIDIPort/open) *)
  val open_: 'tags this -> t Promise.t [@@js.call "open"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'MIDIPortEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'MIDIPortEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MIDIOutput)
*)
module[@js.scope "MIDIOutput"] MIDIOutput : sig
  type t = [`EventTarget | `MIDIOutput | `MIDIPort] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `MIDIOutput | `MIDIPort]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `MIDIOutput | `MIDIPort]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MIDIOutput ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MIDIOutput/send) *)
  val send: 'tags this -> data:float Iterable.t -> ?timestamp:DOMHighResTimeStamp.t -> unit -> unit [@@js.call "send"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MIDIOutput/send) *)
  val send': 'tags this -> data:float list -> ?timestamp:DOMHighResTimeStamp.t -> unit -> unit [@@js.call "send"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'MIDIPortEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'MIDIPortEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MIDIOutputMap)
*)
module[@js.scope "MIDIOutputMap"] MIDIOutputMap : sig
  type t = [`MIDIOutputMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MIDIOutputMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MIDIOutputMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MIDIOutputMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val forEach: 'tags this -> callbackfn:(value:MIDIOutput.t -> key:string -> parent:t -> unit) -> ?thisArg:any -> unit -> unit [@@js.call "forEach"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module MIDIMessageEventInit : sig
  type t = [`EventInit | `MIDIMessageEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `MIDIMessageEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `MIDIMessageEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MIDIMessageEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_data: 'tags this -> Uint8Array.t option [@@js.get "data"]
  val set_data: 'tags this -> Uint8Array.t -> unit [@@js.set "data"]
  val create: ?data:Uint8Array.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MIDIMessageEvent)
*)
module[@js.scope "MIDIMessageEvent"] MIDIMessageEvent : sig
  type t = [`Event | `MIDIMessageEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `MIDIMessageEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `MIDIMessageEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MIDIMessageEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MIDIMessageEvent/data) *)
  val get_data: 'tags this -> Uint8Array.t option [@@js.get "data"]
  val create: ?data:Uint8Array.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> ?eventInitDict:MIDIMessageEventInit.t -> unit -> t [@@js.create]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MIDIInput)
*)
module[@js.scope "MIDIInput"] MIDIInput : sig
  type t = [`EventTarget | `MIDIInput | `MIDIPort] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `MIDIInput | `MIDIPort]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `MIDIInput | `MIDIPort]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MIDIInput ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MIDIInput/midimessage_event) *)
  val get_onmidimessage: 'tags this -> (this:t -> ev:MIDIMessageEvent.t -> any) option [@@js.get "onmidimessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MIDIInput/midimessage_event) *)
  val set_onmidimessage: 'tags this -> (this:t -> ev:MIDIMessageEvent.t -> any) option -> unit [@@js.set "onmidimessage"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'MIDIInputEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'MIDIInputEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MIDIInputMap)
*)
module[@js.scope "MIDIInputMap"] MIDIInputMap : sig
  type t = [`MIDIInputMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MIDIInputMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MIDIInputMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MIDIInputMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val forEach: 'tags this -> callbackfn:(value:MIDIInput.t -> key:string -> parent:t -> unit) -> ?thisArg:any -> unit -> unit [@@js.call "forEach"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MIDIAccess)
*)
module[@js.scope "MIDIAccess"] MIDIAccess : sig
  type t = [`EventTarget | `MIDIAccess] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `MIDIAccess]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `MIDIAccess]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MIDIAccess ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MIDIAccess/inputs) *)
  val get_inputs: 'tags this -> MIDIInputMap.t [@@js.get "inputs"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MIDIAccess/statechange_event) *)
  val get_onstatechange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onstatechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MIDIAccess/statechange_event) *)
  val set_onstatechange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onstatechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MIDIAccess/outputs) *)
  val get_outputs: 'tags this -> MIDIOutputMap.t [@@js.get "outputs"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MIDIAccess/sysexEnabled) *)
  val get_sysexEnabled: 'tags this -> bool [@@js.get "sysexEnabled"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'MIDIAccessEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'MIDIAccessEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module PositionOptions : sig
  type t = [`PositionOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PositionOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PositionOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PositionOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_enableHighAccuracy: 'tags this -> bool option [@@js.get "enableHighAccuracy"]
  val set_enableHighAccuracy: 'tags this -> bool -> unit [@@js.set "enableHighAccuracy"]
  val get_maximumAge: 'tags this -> float option [@@js.get "maximumAge"]
  val set_maximumAge: 'tags this -> float -> unit [@@js.set "maximumAge"]
  val get_timeout: 'tags this -> float option [@@js.get "timeout"]
  val set_timeout: 'tags this -> float -> unit [@@js.set "timeout"]
  val create: ?enableHighAccuracy:bool -> ?maximumAge:float -> ?timeout:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/GeolocationPositionError) *)
module[@js.scope "GeolocationPositionError"] GeolocationPositionError : sig
  type t = [`GeolocationPositionError] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`GeolocationPositionError]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`GeolocationPositionError]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `GeolocationPositionError ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/GeolocationPositionError/code) *)
  val get_code: 'tags this -> float [@@js.get "code"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/GeolocationPositionError/message) *)
  val get_message: 'tags this -> string [@@js.get "message"]
  val get_PERMISSION_DENIED: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "PERMISSION_DENIED"]
  val get_POSITION_UNAVAILABLE: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "POSITION_UNAVAILABLE"]
  val get_TIMEOUT: 'tags this -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "TIMEOUT"]
  val create: code:float -> message:string -> permission_denied:(([`L_n_1[@js 1]] [@js.enum])[@js "PERMISSION_DENIED"]) -> position_unavailable:(([`L_n_2[@js 2]] [@js.enum])[@js "POSITION_UNAVAILABLE"]) -> timeout:(([`L_n_3[@js 3]] [@js.enum])[@js "TIMEOUT"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
  val permission_denied: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "PERMISSION_DENIED"]
  val position_unavailable: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "POSITION_UNAVAILABLE"]
  val timeout: unit -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "TIMEOUT"]
end
module PositionErrorCallback : sig
  type t = [`PositionErrorCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PositionErrorCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PositionErrorCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PositionErrorCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> positionError:GeolocationPositionError.t -> unit [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates)
*)
module[@js.scope "GeolocationCoordinates"] GeolocationCoordinates : sig
  type t = [`GeolocationCoordinates] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`GeolocationCoordinates]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`GeolocationCoordinates]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `GeolocationCoordinates ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/accuracy) *)
  val get_accuracy: 'tags this -> float [@@js.get "accuracy"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/altitude) *)
  val get_altitude: 'tags this -> float option [@@js.get "altitude"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/altitudeAccuracy) *)
  val get_altitudeAccuracy: 'tags this -> float option [@@js.get "altitudeAccuracy"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/heading) *)
  val get_heading: 'tags this -> float option [@@js.get "heading"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/latitude) *)
  val get_latitude: 'tags this -> float [@@js.get "latitude"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/longitude) *)
  val get_longitude: 'tags this -> float [@@js.get "longitude"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/speed) *)
  val get_speed: 'tags this -> float option [@@js.get "speed"]
  val create: accuracy:float -> ?altitude:float -> ?altitudeAccuracy:float -> ?heading:float -> latitude:float -> longitude:float -> ?speed:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/GeolocationPosition)
*)
module[@js.scope "GeolocationPosition"] GeolocationPosition : sig
  type t = [`GeolocationPosition] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`GeolocationPosition]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`GeolocationPosition]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `GeolocationPosition ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/GeolocationPosition/coords) *)
  val get_coords: 'tags this -> GeolocationCoordinates.t [@@js.get "coords"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/GeolocationPosition/timestamp) *)
  val get_timestamp: 'tags this -> EpochTimeStamp.t [@@js.get "timestamp"]
  val create: coords:GeolocationCoordinates.t -> timestamp:EpochTimeStamp.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end
module PositionCallback : sig
  type t = [`PositionCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PositionCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PositionCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PositionCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> position:GeolocationPosition.t -> unit [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  An object able to programmatically obtain the position of the device. It gives Web content access to the location of the device. This allows a Web site or app to offer customized results based on the user's location.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Geolocation)
*)
module[@js.scope "Geolocation"] Geolocation : sig
  type t = [`Geolocation] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Geolocation]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Geolocation]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Geolocation ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Geolocation/clearWatch) *)
  val clearWatch: 'tags this -> watchId:float -> unit [@@js.call "clearWatch"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Geolocation/getCurrentPosition) *)
  val getCurrentPosition: 'tags this -> successCallback:PositionCallback.t -> ?errorCallback:PositionErrorCallback.t option -> ?options:PositionOptions.t -> unit -> unit [@@js.call "getCurrentPosition"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Geolocation/watchPosition) *)
  val watchPosition: 'tags this -> successCallback:PositionCallback.t -> ?errorCallback:PositionErrorCallback.t option -> ?options:PositionOptions.t -> unit -> float [@@js.call "watchPosition"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module PublicKeyCredentialType : sig
  type t = ([`L_s787_public_key[@js "public-key"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module AuthenticatorTransport : sig
  type t = ([`L_s1025_usb[@js "usb"] | `L_s202_ble[@js "ble"] | `L_s495_hybrid[@js "hybrid"] | `L_s526_internal[@js "internal"] | `L_s675_nfc[@js "nfc"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module PublicKeyCredentialDescriptor : sig
  type t = [`PublicKeyCredentialDescriptor] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PublicKeyCredentialDescriptor]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PublicKeyCredentialDescriptor]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PublicKeyCredentialDescriptor ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_id: 'tags this -> BufferSource.t [@@js.get "id"]
  val set_id: 'tags this -> BufferSource.t -> unit [@@js.set "id"]
  val get_transports: 'tags this -> AuthenticatorTransport.t list option [@@js.get "transports"]
  val set_transports: 'tags this -> AuthenticatorTransport.t list -> unit [@@js.set "transports"]
  val get_type: 'tags this -> PublicKeyCredentialType.t [@@js.get "type"]
  val set_type: 'tags this -> PublicKeyCredentialType.t -> unit [@@js.set "type"]
  val create: id:BufferSource.t -> ?transports:AuthenticatorTransport.t list -> type_:(PublicKeyCredentialType.t[@js "type"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module UserVerificationRequirement : sig
  type t = ([`L_s337_discouraged[@js "discouraged"] | `L_s772_preferred[@js "preferred"] | `L_s823_required[@js "required"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module AuthenticationExtensionsClientInputs : sig
  type t = [`AuthenticationExtensionsClientInputs] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AuthenticationExtensionsClientInputs]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AuthenticationExtensionsClientInputs]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AuthenticationExtensionsClientInputs ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_appid: 'tags this -> string option [@@js.get "appid"]
  val set_appid: 'tags this -> string -> unit [@@js.set "appid"]
  val get_credProps: 'tags this -> bool option [@@js.get "credProps"]
  val set_credProps: 'tags this -> bool -> unit [@@js.set "credProps"]
  val get_hmacCreateSecret: 'tags this -> bool option [@@js.get "hmacCreateSecret"]
  val set_hmacCreateSecret: 'tags this -> bool -> unit [@@js.set "hmacCreateSecret"]
  val get_minPinLength: 'tags this -> bool option [@@js.get "minPinLength"]
  val set_minPinLength: 'tags this -> bool -> unit [@@js.set "minPinLength"]
  val create: ?appid:string -> ?credProps:bool -> ?hmacCreateSecret:bool -> ?minPinLength:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module PublicKeyCredentialRequestOptions : sig
  type t = [`PublicKeyCredentialRequestOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PublicKeyCredentialRequestOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PublicKeyCredentialRequestOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PublicKeyCredentialRequestOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_allowCredentials: 'tags this -> PublicKeyCredentialDescriptor.t list option [@@js.get "allowCredentials"]
  val set_allowCredentials: 'tags this -> PublicKeyCredentialDescriptor.t list -> unit [@@js.set "allowCredentials"]
  val get_challenge: 'tags this -> BufferSource.t [@@js.get "challenge"]
  val set_challenge: 'tags this -> BufferSource.t -> unit [@@js.set "challenge"]
  val get_extensions: 'tags this -> AuthenticationExtensionsClientInputs.t option [@@js.get "extensions"]
  val set_extensions: 'tags this -> AuthenticationExtensionsClientInputs.t -> unit [@@js.set "extensions"]
  val get_rpId: 'tags this -> string option [@@js.get "rpId"]
  val set_rpId: 'tags this -> string -> unit [@@js.set "rpId"]
  val get_timeout: 'tags this -> float option [@@js.get "timeout"]
  val set_timeout: 'tags this -> float -> unit [@@js.set "timeout"]
  val get_userVerification: 'tags this -> UserVerificationRequirement.t option [@@js.get "userVerification"]
  val set_userVerification: 'tags this -> UserVerificationRequirement.t -> unit [@@js.set "userVerification"]
  val create: ?allowCredentials:PublicKeyCredentialDescriptor.t list -> challenge:BufferSource.t -> ?extensions:AuthenticationExtensionsClientInputs.t -> ?rpId:string -> ?timeout:float -> ?userVerification:UserVerificationRequirement.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module CredentialMediationRequirement : sig
  type t = ([`L_s271_conditional[@js "conditional"] | `L_s709_optional[@js "optional"] | `L_s823_required[@js "required"] | `L_s886_silent[@js "silent"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module CredentialRequestOptions : sig
  type t = [`CredentialRequestOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CredentialRequestOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CredentialRequestOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CredentialRequestOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_mediation: 'tags this -> CredentialMediationRequirement.t option [@@js.get "mediation"]
  val set_mediation: 'tags this -> CredentialMediationRequirement.t -> unit [@@js.set "mediation"]
  val get_publicKey: 'tags this -> PublicKeyCredentialRequestOptions.t option [@@js.get "publicKey"]
  val set_publicKey: 'tags this -> PublicKeyCredentialRequestOptions.t -> unit [@@js.set "publicKey"]
  val get_signal: 'tags this -> AbortSignal.t option [@@js.get "signal"]
  val set_signal: 'tags this -> AbortSignal.t -> unit [@@js.set "signal"]
  val create: ?mediation:CredentialMediationRequirement.t -> ?publicKey:PublicKeyCredentialRequestOptions.t -> ?signal:AbortSignal.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module PublicKeyCredentialEntity : sig
  type t = [`PublicKeyCredentialEntity] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PublicKeyCredentialEntity]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PublicKeyCredentialEntity]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PublicKeyCredentialEntity ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_name: 'tags this -> string [@@js.get "name"]
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  val create: name:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module PublicKeyCredentialUserEntity : sig
  type t = [`PublicKeyCredentialEntity | `PublicKeyCredentialUserEntity] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PublicKeyCredentialEntity | `PublicKeyCredentialUserEntity]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PublicKeyCredentialEntity | `PublicKeyCredentialUserEntity]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PublicKeyCredentialUserEntity ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_displayName: 'tags this -> string [@@js.get "displayName"]
  val set_displayName: 'tags this -> string -> unit [@@js.set "displayName"]
  val get_id: 'tags this -> BufferSource.t [@@js.get "id"]
  val set_id: 'tags this -> BufferSource.t -> unit [@@js.set "id"]
  val create: displayName:string -> id:BufferSource.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module PublicKeyCredentialRpEntity : sig
  type t = [`PublicKeyCredentialEntity | `PublicKeyCredentialRpEntity] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PublicKeyCredentialEntity | `PublicKeyCredentialRpEntity]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PublicKeyCredentialEntity | `PublicKeyCredentialRpEntity]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PublicKeyCredentialRpEntity ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_id: 'tags this -> string option [@@js.get "id"]
  val set_id: 'tags this -> string -> unit [@@js.set "id"]
  val create: ?id:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module COSEAlgorithmIdentifier : sig
  type t = float
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module PublicKeyCredentialParameters : sig
  type t = [`PublicKeyCredentialParameters] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PublicKeyCredentialParameters]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PublicKeyCredentialParameters]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PublicKeyCredentialParameters ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_alg: 'tags this -> COSEAlgorithmIdentifier.t [@@js.get "alg"]
  val set_alg: 'tags this -> COSEAlgorithmIdentifier.t -> unit [@@js.set "alg"]
  val get_type: 'tags this -> PublicKeyCredentialType.t [@@js.get "type"]
  val set_type: 'tags this -> PublicKeyCredentialType.t -> unit [@@js.set "type"]
  val create: alg:COSEAlgorithmIdentifier.t -> type_:(PublicKeyCredentialType.t[@js "type"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ResidentKeyRequirement : sig
  type t = ([`L_s337_discouraged[@js "discouraged"] | `L_s772_preferred[@js "preferred"] | `L_s823_required[@js "required"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module AuthenticatorAttachment : sig
  type t = ([`L_s289_cross_platform[@js "cross-platform"] | `L_s746_platform[@js "platform"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module AuthenticatorSelectionCriteria : sig
  type t = [`AuthenticatorSelectionCriteria] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AuthenticatorSelectionCriteria]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AuthenticatorSelectionCriteria]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AuthenticatorSelectionCriteria ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_authenticatorAttachment: 'tags this -> AuthenticatorAttachment.t option [@@js.get "authenticatorAttachment"]
  val set_authenticatorAttachment: 'tags this -> AuthenticatorAttachment.t -> unit [@@js.set "authenticatorAttachment"]
  val get_requireResidentKey: 'tags this -> bool option [@@js.get "requireResidentKey"]
  val set_requireResidentKey: 'tags this -> bool -> unit [@@js.set "requireResidentKey"]
  val get_residentKey: 'tags this -> ResidentKeyRequirement.t option [@@js.get "residentKey"]
  val set_residentKey: 'tags this -> ResidentKeyRequirement.t -> unit [@@js.set "residentKey"]
  val get_userVerification: 'tags this -> UserVerificationRequirement.t option [@@js.get "userVerification"]
  val set_userVerification: 'tags this -> UserVerificationRequirement.t -> unit [@@js.set "userVerification"]
  val create: ?authenticatorAttachment:AuthenticatorAttachment.t -> ?requireResidentKey:bool -> ?residentKey:ResidentKeyRequirement.t -> ?userVerification:UserVerificationRequirement.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module AttestationConveyancePreference : sig
  type t = ([`L_s331_direct[@js "direct"] | `L_s369_enterprise[@js "enterprise"] | `L_s515_indirect[@js "indirect"] | `L_s685_none[@js "none"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module PublicKeyCredentialCreationOptions : sig
  type t = [`PublicKeyCredentialCreationOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PublicKeyCredentialCreationOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PublicKeyCredentialCreationOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PublicKeyCredentialCreationOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_attestation: 'tags this -> AttestationConveyancePreference.t option [@@js.get "attestation"]
  val set_attestation: 'tags this -> AttestationConveyancePreference.t -> unit [@@js.set "attestation"]
  val get_authenticatorSelection: 'tags this -> AuthenticatorSelectionCriteria.t option [@@js.get "authenticatorSelection"]
  val set_authenticatorSelection: 'tags this -> AuthenticatorSelectionCriteria.t -> unit [@@js.set "authenticatorSelection"]
  val get_challenge: 'tags this -> BufferSource.t [@@js.get "challenge"]
  val set_challenge: 'tags this -> BufferSource.t -> unit [@@js.set "challenge"]
  val get_excludeCredentials: 'tags this -> PublicKeyCredentialDescriptor.t list option [@@js.get "excludeCredentials"]
  val set_excludeCredentials: 'tags this -> PublicKeyCredentialDescriptor.t list -> unit [@@js.set "excludeCredentials"]
  val get_extensions: 'tags this -> AuthenticationExtensionsClientInputs.t option [@@js.get "extensions"]
  val set_extensions: 'tags this -> AuthenticationExtensionsClientInputs.t -> unit [@@js.set "extensions"]
  val get_pubKeyCredParams: 'tags this -> PublicKeyCredentialParameters.t list [@@js.get "pubKeyCredParams"]
  val set_pubKeyCredParams: 'tags this -> PublicKeyCredentialParameters.t list -> unit [@@js.set "pubKeyCredParams"]
  val get_rp: 'tags this -> PublicKeyCredentialRpEntity.t [@@js.get "rp"]
  val set_rp: 'tags this -> PublicKeyCredentialRpEntity.t -> unit [@@js.set "rp"]
  val get_timeout: 'tags this -> float option [@@js.get "timeout"]
  val set_timeout: 'tags this -> float -> unit [@@js.set "timeout"]
  val get_user: 'tags this -> PublicKeyCredentialUserEntity.t [@@js.get "user"]
  val set_user: 'tags this -> PublicKeyCredentialUserEntity.t -> unit [@@js.set "user"]
  val create: ?attestation:AttestationConveyancePreference.t -> ?authenticatorSelection:AuthenticatorSelectionCriteria.t -> challenge:BufferSource.t -> ?excludeCredentials:PublicKeyCredentialDescriptor.t list -> ?extensions:AuthenticationExtensionsClientInputs.t -> pubKeyCredParams:PublicKeyCredentialParameters.t list -> rp:PublicKeyCredentialRpEntity.t -> ?timeout:float -> user:PublicKeyCredentialUserEntity.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module CredentialCreationOptions : sig
  type t = [`CredentialCreationOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CredentialCreationOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CredentialCreationOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CredentialCreationOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_publicKey: 'tags this -> PublicKeyCredentialCreationOptions.t option [@@js.get "publicKey"]
  val set_publicKey: 'tags this -> PublicKeyCredentialCreationOptions.t -> unit [@@js.set "publicKey"]
  val get_signal: 'tags this -> AbortSignal.t option [@@js.get "signal"]
  val set_signal: 'tags this -> AbortSignal.t -> unit [@@js.set "signal"]
  val create: ?publicKey:PublicKeyCredentialCreationOptions.t -> ?signal:AbortSignal.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Credential)
*)
module[@js.scope "Credential"] Credential : sig
  type t = [`Credential] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Credential]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Credential]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Credential ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Credential/id) *)
  val get_id: 'tags this -> string [@@js.get "id"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Credential/type) *)
  val get_type: 'tags this -> string [@@js.get "type"]
  val create: id:string -> type_:(string[@js "type"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CredentialsContainer)
*)
module[@js.scope "CredentialsContainer"] CredentialsContainer : sig
  type t = [`CredentialsContainer] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CredentialsContainer]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CredentialsContainer]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CredentialsContainer ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CredentialsContainer/create) *)
  val create_: 'tags this -> ?options:CredentialCreationOptions.t -> unit -> Credential.t option Promise.t [@@js.call "create"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CredentialsContainer/get) *)
  val get_: 'tags this -> ?options:CredentialRequestOptions.t -> unit -> Credential.t option Promise.t [@@js.call "get"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CredentialsContainer/preventSilentAccess) *)
  val preventSilentAccess: 'tags this -> unit Promise.t [@@js.call "preventSilentAccess"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CredentialsContainer/store) *)
  val store: 'tags this -> credential:Credential.t -> unit Promise.t [@@js.call "store"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module PresentationStyle : sig
  type t = ([`L_s1015_unspecified[@js "unspecified"] | `L_s164_attachment[@js "attachment"] | `L_s518_inline[@js "inline"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module ClipboardItemOptions : sig
  type t = [`ClipboardItemOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ClipboardItemOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ClipboardItemOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ClipboardItemOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_presentationStyle: 'tags this -> PresentationStyle.t option [@@js.get "presentationStyle"]
  val set_presentationStyle: 'tags this -> PresentationStyle.t -> unit [@@js.set "presentationStyle"]
  val create: ?presentationStyle:PresentationStyle.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ClipboardItem)
*)
module[@js.scope "ClipboardItem"] ClipboardItem : sig
  type t = [`ClipboardItem] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ClipboardItem]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ClipboardItem]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ClipboardItem ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ClipboardItem/types) *)
  val get_types: 'tags this -> string list [@@js.get "types"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ClipboardItem/getType) *)
  val getType: 'tags this -> type_:string -> Blob.t Promise.t [@@js.call "getType"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: items:(string, ([`U1 of string | `U2 of Blob.t | `U3 of ([`U1 of string | `U2 of Blob.t] [@js.union]) PromiseLike.t] [@js.union])) Record.t -> ?options:ClipboardItemOptions.t -> unit -> t [@@js.create]
end
module ClipboardItems : sig
  type t = ClipboardItem.t list
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Clipboard)
*)
module[@js.scope "Clipboard"] Clipboard : sig
  type t = [`Clipboard | `EventTarget] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Clipboard | `EventTarget]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Clipboard | `EventTarget]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Clipboard ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Clipboard/read) *)
  val read: 'tags this -> ClipboardItems.t Promise.t [@@js.call "read"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Clipboard/readText) *)
  val readText: 'tags this -> string Promise.t [@@js.call "readText"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Clipboard/write) *)
  val write: 'tags this -> data:ClipboardItems.t -> unit Promise.t [@@js.call "write"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Clipboard/writeText) *)
  val writeText: 'tags this -> data:string -> unit Promise.t [@@js.call "writeText"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module MediaQueryListEventInit : sig
  type t = [`EventInit | `MediaQueryListEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `MediaQueryListEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `MediaQueryListEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaQueryListEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_matches: 'tags this -> bool option [@@js.get "matches"]
  val set_matches: 'tags this -> bool -> unit [@@js.set "matches"]
  val get_media: 'tags this -> string option [@@js.get "media"]
  val set_media: 'tags this -> string -> unit [@@js.set "media"]
  val create: ?matches:bool -> ?media:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaQueryListEvent) *)
module[@js.scope "MediaQueryListEvent"] MediaQueryListEvent : sig
  type t = [`Event | `MediaQueryListEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `MediaQueryListEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `MediaQueryListEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaQueryListEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaQueryListEvent/matches) *)
  val get_matches: 'tags this -> bool [@@js.get "matches"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaQueryListEvent/media) *)
  val get_media: 'tags this -> string [@@js.get "media"]
  val create: matches:bool -> media:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> ?eventInitDict:MediaQueryListEventInit.t -> unit -> t [@@js.create]
end

(**
  Stores information on a media query applied to a document, and handles sending notifications to listeners when the media query state change (i.e. when the media query test starts or stops evaluating to true).
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaQueryList)
*)
module[@js.scope "MediaQueryList"] MediaQueryList : sig
  type t = [`EventTarget | `MediaQueryList] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `MediaQueryList]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `MediaQueryList]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaQueryList ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaQueryList/matches) *)
  val get_matches: 'tags this -> bool [@@js.get "matches"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaQueryList/media) *)
  val get_media: 'tags this -> string [@@js.get "media"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaQueryList/change_event) *)
  val get_onchange: 'tags this -> (this:t -> ev:MediaQueryListEvent.t -> any) option [@@js.get "onchange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaQueryList/change_event) *)
  val set_onchange: 'tags this -> (this:t -> ev:MediaQueryListEvent.t -> any) option -> unit [@@js.set "onchange"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaQueryList/addListener) *)
  val addListener: 'tags this -> callback:(this:t -> ev:MediaQueryListEvent.t -> any) option -> unit [@@js.call "addListener"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaQueryList/removeListener) *)
  val removeListener: 'tags this -> callback:(this:t -> ev:MediaQueryListEvent.t -> any) option -> unit [@@js.call "removeListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'MediaQueryListEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'MediaQueryListEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  The location (URL) of the object it is linked to. Changes done on it are reflected on the object it relates to. Both the Document and Window interface have such a linked Location, accessible via Document.location and Window.location respectively.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Location)
*)
module[@js.scope "Location"] Location : sig
  type t = [`Location] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Location]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Location]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Location ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns a DOMStringList object listing the origins of the ancestor browsing contexts, from the parent browsing context to the top-level browsing context.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Location/ancestorOrigins)
  *)
  val get_ancestorOrigins: 'tags this -> DOMStringList.t [@@js.get "ancestorOrigins"]
  
  (**
    Returns the Location object's URL's fragment (includes leading "#" if non-empty).
    
    Can be set, to navigate to the same URL with a changed fragment (ignores leading "#").
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Location/hash)
  *)
  val get_hash: 'tags this -> string [@@js.get "hash"]
  
  (**
    Returns the Location object's URL's fragment (includes leading "#" if non-empty).
    
    Can be set, to navigate to the same URL with a changed fragment (ignores leading "#").
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Location/hash)
  *)
  val set_hash: 'tags this -> string -> unit [@@js.set "hash"]
  
  (**
    Returns the Location object's URL's host and port (if different from the default port for the scheme).
    
    Can be set, to navigate to the same URL with a changed host and port.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Location/host)
  *)
  val get_host: 'tags this -> string [@@js.get "host"]
  
  (**
    Returns the Location object's URL's host and port (if different from the default port for the scheme).
    
    Can be set, to navigate to the same URL with a changed host and port.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Location/host)
  *)
  val set_host: 'tags this -> string -> unit [@@js.set "host"]
  
  (**
    Returns the Location object's URL's host.
    
    Can be set, to navigate to the same URL with a changed host.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Location/hostname)
  *)
  val get_hostname: 'tags this -> string [@@js.get "hostname"]
  
  (**
    Returns the Location object's URL's host.
    
    Can be set, to navigate to the same URL with a changed host.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Location/hostname)
  *)
  val set_hostname: 'tags this -> string -> unit [@@js.set "hostname"]
  
  (**
    Returns the Location object's URL.
    
    Can be set, to navigate to the given URL.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Location/href)
  *)
  val get_href: 'tags this -> string [@@js.get "href"]
  
  (**
    Returns the Location object's URL.
    
    Can be set, to navigate to the given URL.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Location/href)
  *)
  val set_href: 'tags this -> string -> unit [@@js.set "href"]
  val toString: 'tags this -> string [@@js.call "toString"]
  
  (**
    Returns the Location object's URL's origin.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Location/origin)
  *)
  val get_origin: 'tags this -> string [@@js.get "origin"]
  
  (**
    Returns the Location object's URL's path.
    
    Can be set, to navigate to the same URL with a changed path.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Location/pathname)
  *)
  val get_pathname: 'tags this -> string [@@js.get "pathname"]
  
  (**
    Returns the Location object's URL's path.
    
    Can be set, to navigate to the same URL with a changed path.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Location/pathname)
  *)
  val set_pathname: 'tags this -> string -> unit [@@js.set "pathname"]
  
  (**
    Returns the Location object's URL's port.
    
    Can be set, to navigate to the same URL with a changed port.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Location/port)
  *)
  val get_port: 'tags this -> string [@@js.get "port"]
  
  (**
    Returns the Location object's URL's port.
    
    Can be set, to navigate to the same URL with a changed port.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Location/port)
  *)
  val set_port: 'tags this -> string -> unit [@@js.set "port"]
  
  (**
    Returns the Location object's URL's scheme.
    
    Can be set, to navigate to the same URL with a changed scheme.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Location/protocol)
  *)
  val get_protocol: 'tags this -> string [@@js.get "protocol"]
  
  (**
    Returns the Location object's URL's scheme.
    
    Can be set, to navigate to the same URL with a changed scheme.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Location/protocol)
  *)
  val set_protocol: 'tags this -> string -> unit [@@js.set "protocol"]
  
  (**
    Returns the Location object's URL's query (includes leading "?" if non-empty).
    
    Can be set, to navigate to the same URL with a changed query (ignores leading "?").
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Location/search)
  *)
  val get_search: 'tags this -> string [@@js.get "search"]
  
  (**
    Returns the Location object's URL's query (includes leading "?" if non-empty).
    
    Can be set, to navigate to the same URL with a changed query (ignores leading "?").
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Location/search)
  *)
  val set_search: 'tags this -> string -> unit [@@js.set "search"]
  
  (**
    Navigates to the given URL.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Location/assign)
  *)
  val assign: 'tags this -> url:([`U1 of string | `U2 of URL.t] [@js.union]) -> unit [@@js.call "assign"]
  
  (**
    Reloads the current page.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Location/reload)
  *)
  val reload: 'tags this -> unit [@@js.call "reload"]
  
  (**
    Removes the current page from the session history and navigates to the given URL.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Location/replace)
  *)
  val replace: 'tags this -> url:([`U1 of string | `U2 of URL.t] [@js.union]) -> unit [@@js.call "replace"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module IdleRequestOptions : sig
  type t = [`IdleRequestOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`IdleRequestOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`IdleRequestOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IdleRequestOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_timeout: 'tags this -> float option [@@js.get "timeout"]
  val set_timeout: 'tags this -> float -> unit [@@js.set "timeout"]
  val create: ?timeout:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IdleDeadline) *)
module[@js.scope "IdleDeadline"] IdleDeadline : sig
  type t = [`IdleDeadline] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`IdleDeadline]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`IdleDeadline]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IdleDeadline ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IdleDeadline/didTimeout) *)
  val get_didTimeout: 'tags this -> bool [@@js.get "didTimeout"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IdleDeadline/timeRemaining) *)
  val timeRemaining: 'tags this -> DOMHighResTimeStamp.t [@@js.call "timeRemaining"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module IdleRequestCallback : sig
  type t = [`IdleRequestCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`IdleRequestCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`IdleRequestCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IdleRequestCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> deadline:IdleDeadline.t -> unit [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ScrollRestoration : sig
  type t = ([`L_s174_auto[@js "auto"] | `L_s594_manual[@js "manual"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  AllowsÂ manipulation ofÂ the browser session history, that is the pages visited in the tab or frame that the current page is loaded in.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/History)
*)
module[@js.scope "History"] History : sig
  type t = [`History] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`History]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`History]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `History ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/History/length) *)
  val get_length: 'tags this -> float [@@js.get "length"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/History/scrollRestoration) *)
  val get_scrollRestoration: 'tags this -> ScrollRestoration.t [@@js.get "scrollRestoration"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/History/scrollRestoration) *)
  val set_scrollRestoration: 'tags this -> ScrollRestoration.t -> unit [@@js.set "scrollRestoration"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/History/state) *)
  val get_state: 'tags this -> any [@@js.get "state"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/History/back) *)
  val back: 'tags this -> unit [@@js.call "back"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/History/forward) *)
  val forward: 'tags this -> unit [@@js.call "forward"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/History/go) *)
  val go: 'tags this -> ?delta:float -> unit -> unit [@@js.call "go"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/History/pushState) *)
  val pushState: 'tags this -> data:any -> unused:string -> ?url:([`Null | `U1 of string | `U2 of URL.t] [@js.union]) -> unit -> unit [@@js.call "pushState"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/History/replaceState) *)
  val replaceState: 'tags this -> data:any -> unused:string -> ?url:([`Null | `U1 of string | `U2 of URL.t] [@js.union]) -> unit -> unit [@@js.call "replaceState"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/External) *)
module[@js.scope "External"] External : sig
  type t = [`External] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`External]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`External]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `External ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/External/AddSearchProvider) *)
  val addSearchProvider: 'tags this -> unit [@@js.call "AddSearchProvider"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/External/IsSearchProviderInstalled) *)
  val isSearchProviderInstalled: 'tags this -> unit [@@js.call "IsSearchProviderInstalled"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module DeviceOrientationEventInit : sig
  type t = [`DeviceOrientationEventInit | `EventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DeviceOrientationEventInit | `EventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DeviceOrientationEventInit | `EventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DeviceOrientationEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_absolute: 'tags this -> bool option [@@js.get "absolute"]
  val set_absolute: 'tags this -> bool -> unit [@@js.set "absolute"]
  val get_alpha: 'tags this -> float option [@@js.get "alpha"]
  val set_alpha: 'tags this -> float option -> unit [@@js.set "alpha"]
  val get_beta: 'tags this -> float option [@@js.get "beta"]
  val set_beta: 'tags this -> float option -> unit [@@js.set "beta"]
  val get_gamma: 'tags this -> float option [@@js.get "gamma"]
  val set_gamma: 'tags this -> float option -> unit [@@js.set "gamma"]
  val create: ?absolute:bool -> ?alpha:float -> ?beta:float -> ?gamma:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The DeviceOrientationEvent provides web developers with information from the physical orientation of the device running the web page.
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DeviceOrientationEvent)
*)
module[@js.scope "DeviceOrientationEvent"] DeviceOrientationEvent : sig
  type t = [`DeviceOrientationEvent | `Event] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DeviceOrientationEvent | `Event]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DeviceOrientationEvent | `Event]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DeviceOrientationEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DeviceOrientationEvent/absolute) *)
  val get_absolute: 'tags this -> bool [@@js.get "absolute"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DeviceOrientationEvent/alpha) *)
  val get_alpha: 'tags this -> float option [@@js.get "alpha"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DeviceOrientationEvent/beta) *)
  val get_beta: 'tags this -> float option [@@js.get "beta"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DeviceOrientationEvent/gamma) *)
  val get_gamma: 'tags this -> float option [@@js.get "gamma"]
  val create: absolute:bool -> ?alpha:float -> ?beta:float -> ?gamma:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> ?eventInitDict:DeviceOrientationEventInit.t -> unit -> t [@@js.create]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventRotationRate)
*)
module DeviceMotionEventRotationRate : sig
  type t = [`DeviceMotionEventRotationRate] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DeviceMotionEventRotationRate]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DeviceMotionEventRotationRate]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DeviceMotionEventRotationRate ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventRotationRate/alpha) *)
  val get_alpha: 'tags this -> float option [@@js.get "alpha"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventRotationRate/beta) *)
  val get_beta: 'tags this -> float option [@@js.get "beta"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventRotationRate/gamma) *)
  val get_gamma: 'tags this -> float option [@@js.get "gamma"]
  val create: ?alpha:float -> ?beta:float -> ?gamma:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module DeviceMotionEventRotationRateInit : sig
  type t = [`DeviceMotionEventRotationRateInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DeviceMotionEventRotationRateInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DeviceMotionEventRotationRateInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DeviceMotionEventRotationRateInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_alpha: 'tags this -> float option [@@js.get "alpha"]
  val set_alpha: 'tags this -> float option -> unit [@@js.set "alpha"]
  val get_beta: 'tags this -> float option [@@js.get "beta"]
  val set_beta: 'tags this -> float option -> unit [@@js.set "beta"]
  val get_gamma: 'tags this -> float option [@@js.get "gamma"]
  val set_gamma: 'tags this -> float option -> unit [@@js.set "gamma"]
  val create: ?alpha:float -> ?beta:float -> ?gamma:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module DeviceMotionEventAccelerationInit : sig
  type t = [`DeviceMotionEventAccelerationInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DeviceMotionEventAccelerationInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DeviceMotionEventAccelerationInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DeviceMotionEventAccelerationInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_x: 'tags this -> float option [@@js.get "x"]
  val set_x: 'tags this -> float option -> unit [@@js.set "x"]
  val get_y: 'tags this -> float option [@@js.get "y"]
  val set_y: 'tags this -> float option -> unit [@@js.set "y"]
  val get_z: 'tags this -> float option [@@js.get "z"]
  val set_z: 'tags this -> float option -> unit [@@js.set "z"]
  val create: ?x:float -> ?y:float -> ?z:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module DeviceMotionEventInit : sig
  type t = [`DeviceMotionEventInit | `EventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DeviceMotionEventInit | `EventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DeviceMotionEventInit | `EventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DeviceMotionEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_acceleration: 'tags this -> DeviceMotionEventAccelerationInit.t option [@@js.get "acceleration"]
  val set_acceleration: 'tags this -> DeviceMotionEventAccelerationInit.t -> unit [@@js.set "acceleration"]
  val get_accelerationIncludingGravity: 'tags this -> DeviceMotionEventAccelerationInit.t option [@@js.get "accelerationIncludingGravity"]
  val set_accelerationIncludingGravity: 'tags this -> DeviceMotionEventAccelerationInit.t -> unit [@@js.set "accelerationIncludingGravity"]
  val get_interval: 'tags this -> float option [@@js.get "interval"]
  val set_interval: 'tags this -> float -> unit [@@js.set "interval"]
  val get_rotationRate: 'tags this -> DeviceMotionEventRotationRateInit.t option [@@js.get "rotationRate"]
  val set_rotationRate: 'tags this -> DeviceMotionEventRotationRateInit.t -> unit [@@js.set "rotationRate"]
  val create: ?acceleration:DeviceMotionEventAccelerationInit.t -> ?accelerationIncludingGravity:DeviceMotionEventAccelerationInit.t -> ?interval:float -> ?rotationRate:DeviceMotionEventRotationRateInit.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventAcceleration)
*)
module DeviceMotionEventAcceleration : sig
  type t = [`DeviceMotionEventAcceleration] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DeviceMotionEventAcceleration]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DeviceMotionEventAcceleration]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DeviceMotionEventAcceleration ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventAcceleration/x) *)
  val get_x: 'tags this -> float option [@@js.get "x"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventAcceleration/y) *)
  val get_y: 'tags this -> float option [@@js.get "y"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventAcceleration/z) *)
  val get_z: 'tags this -> float option [@@js.get "z"]
  val create: ?x:float -> ?y:float -> ?z:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The DeviceMotionEvent provides web developers with information about the speed of changes for the device's position and orientation.
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DeviceMotionEvent)
*)
module[@js.scope "DeviceMotionEvent"] DeviceMotionEvent : sig
  type t = [`DeviceMotionEvent | `Event] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DeviceMotionEvent | `Event]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DeviceMotionEvent | `Event]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DeviceMotionEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DeviceMotionEvent/acceleration) *)
  val get_acceleration: 'tags this -> DeviceMotionEventAcceleration.t option [@@js.get "acceleration"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DeviceMotionEvent/accelerationIncludingGravity) *)
  val get_accelerationIncludingGravity: 'tags this -> DeviceMotionEventAcceleration.t option [@@js.get "accelerationIncludingGravity"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DeviceMotionEvent/interval) *)
  val get_interval: 'tags this -> float [@@js.get "interval"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DeviceMotionEvent/rotationRate) *)
  val get_rotationRate: 'tags this -> DeviceMotionEventRotationRate.t option [@@js.get "rotationRate"]
  val create: ?acceleration:DeviceMotionEventAcceleration.t -> ?accelerationIncludingGravity:DeviceMotionEventAcceleration.t -> interval:float -> ?rotationRate:DeviceMotionEventRotationRate.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> ?eventInitDict:DeviceMotionEventInit.t -> unit -> t [@@js.create]
end
module ElementDefinitionOptions : sig
  type t = [`ElementDefinitionOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ElementDefinitionOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ElementDefinitionOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ElementDefinitionOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_extends: 'tags this -> string option [@@js.get "extends"]
  val set_extends: 'tags this -> string -> unit [@@js.set "extends"]
  val create: ?extends:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BarProp) *)
module[@js.scope "BarProp"] BarProp : sig
  type t = [`BarProp] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`BarProp]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`BarProp]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `BarProp ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BarProp/visible) *)
  val get_visible: 'tags this -> bool [@@js.get "visible"]
  val create: visible:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end
module FrameRequestCallback : sig
  type t = [`FrameRequestCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FrameRequestCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FrameRequestCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FrameRequestCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> time:DOMHighResTimeStamp.t -> unit [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module AnimationFrameProvider : sig
  type t = [`AnimationFrameProvider] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AnimationFrameProvider]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AnimationFrameProvider]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AnimationFrameProvider ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/cancelAnimationFrame) *)
  val cancelAnimationFrame: 'tags this -> handle:float -> unit [@@js.call "cancelAnimationFrame"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/requestAnimationFrame) *)
  val requestAnimationFrame: 'tags this -> callback:FrameRequestCallback.t -> float [@@js.call "requestAnimationFrame"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  An object of this type is returned by the files property of the HTML <input> element; this lets you access the list of files selected with the <input type="file"> element. It's also used for a list of files dropped into web content when using the drag and drop API; see the DataTransfer object for details on this usage.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileList)
*)
module[@js.scope "FileList"] FileList : sig
  type t = [`FileList] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FileList]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FileList]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FileList ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> File.t IterableIterator.t *)
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileList/length) *)
  val get_length: 'tags this -> float [@@js.get "length"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileList/item) *)
  val item: 'tags this -> index:float -> File.t option [@@js.call "item"]
  val get: 'tags this -> float -> File.t [@@js.index_get]
  val set: 'tags this -> float -> File.t -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module FunctionStringCallback : sig
  type t = [`FunctionStringCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FunctionStringCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FunctionStringCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FunctionStringCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> data:string -> unit [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module FileSystemFlags : sig
  type t = [`FileSystemFlags] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FileSystemFlags]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FileSystemFlags]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FileSystemFlags ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_create: 'tags this -> bool option [@@js.get "create"]
  val set_create: 'tags this -> bool -> unit [@@js.set "create"]
  val get_exclusive: 'tags this -> bool option [@@js.get "exclusive"]
  val set_exclusive: 'tags this -> bool -> unit [@@js.set "exclusive"]
  val create: ?create_:(bool[@js "create"]) -> ?exclusive:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ErrorCallback : sig
  type t = [`ErrorCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ErrorCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ErrorCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ErrorCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> err:DOMException.t -> unit [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystem) *)
module[@js.scope "FileSystem"] rec FileSystem : sig
  type t = [`FileSystem] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FileSystem]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FileSystem]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FileSystem ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystem/name) *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystem/root) *)
  val get_root: 'tags this -> FileSystemDirectoryEntry.t [@@js.get "root"]
  val create: name:string -> root:FileSystemDirectoryEntry.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryEntry) *)
and[@js.scope "FileSystemDirectoryEntry"] FileSystemDirectoryEntry : sig
  type t = [`FileSystemDirectoryEntry | `FileSystemEntry] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FileSystemDirectoryEntry | `FileSystemEntry]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FileSystemDirectoryEntry | `FileSystemEntry]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FileSystemDirectoryEntry ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryEntry/createReader) *)
  val createReader: 'tags this -> FileSystemDirectoryReader.t [@@js.call "createReader"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryEntry/getDirectory) *)
  val getDirectory: 'tags this -> ?path:string option -> ?options:FileSystemFlags.t -> ?successCallback:FileSystemEntryCallback.t -> ?errorCallback:ErrorCallback.t -> unit -> unit [@@js.call "getDirectory"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryEntry/getFile) *)
  val getFile: 'tags this -> ?path:string option -> ?options:FileSystemFlags.t -> ?successCallback:FileSystemEntryCallback.t -> ?errorCallback:ErrorCallback.t -> unit -> unit [@@js.call "getFile"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryReader) *)
and[@js.scope "FileSystemDirectoryReader"] FileSystemDirectoryReader : sig
  type t = [`FileSystemDirectoryReader] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FileSystemDirectoryReader]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FileSystemDirectoryReader]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FileSystemDirectoryReader ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryReader/readEntries) *)
  val readEntries: 'tags this -> successCallback:FileSystemEntriesCallback.t -> ?errorCallback:ErrorCallback.t -> unit -> unit [@@js.call "readEntries"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
and FileSystemEntriesCallback : sig
  type t = [`FileSystemEntriesCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FileSystemEntriesCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FileSystemEntriesCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FileSystemEntriesCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> entries:FileSystemEntry.t list -> unit [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemEntry) *)
and[@js.scope "FileSystemEntry"] FileSystemEntry : sig
  type t = [`FileSystemEntry] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FileSystemEntry]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FileSystemEntry]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FileSystemEntry ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemEntry/filesystem) *)
  val get_filesystem: 'tags this -> FileSystem.t [@@js.get "filesystem"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemEntry/fullPath) *)
  val get_fullPath: 'tags this -> string [@@js.get "fullPath"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemEntry/isDirectory) *)
  val get_isDirectory: 'tags this -> bool [@@js.get "isDirectory"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemEntry/isFile) *)
  val get_isFile: 'tags this -> bool [@@js.get "isFile"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemEntry/name) *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemEntry/getParent) *)
  val getParent: 'tags this -> ?successCallback:FileSystemEntryCallback.t -> ?errorCallback:ErrorCallback.t -> unit -> unit [@@js.call "getParent"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
and FileSystemEntryCallback : sig
  type t = [`FileSystemEntryCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FileSystemEntryCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FileSystemEntryCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FileSystemEntryCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> entry:FileSystemEntry.t -> unit [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  One drag data item. During a drag operation, each drag event has a dataTransfer property which contains a list of drag data items. Each item in the list is a DataTransferItem object.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DataTransferItem)
*)
module[@js.scope "DataTransferItem"] DataTransferItem : sig
  type t = [`DataTransferItem] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DataTransferItem]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DataTransferItem]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DataTransferItem ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the drag data item kind, one of: "string", "file".
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DataTransferItem/kind)
  *)
  val get_kind: 'tags this -> string [@@js.get "kind"]
  
  (**
    Returns the drag data item type string.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DataTransferItem/type)
  *)
  val get_type: 'tags this -> string [@@js.get "type"]
  
  (**
    Returns a File object, if the drag data item kind is File.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DataTransferItem/getAsFile)
  *)
  val getAsFile: 'tags this -> File.t option [@@js.call "getAsFile"]
  
  (**
    Invokes the callback with the string data as the argument, if the drag data item kind is text.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DataTransferItem/getAsString)
  *)
  val getAsString: 'tags this -> callback:FunctionStringCallback.t option -> unit [@@js.call "getAsString"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DataTransferItem/webkitGetAsEntry) *)
  val webkitGetAsEntry: 'tags this -> FileSystemEntry.t option [@@js.call "webkitGetAsEntry"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  A list of DataTransferItem objects representing items being dragged. During a drag operation, each DragEvent has a dataTransfer property and that property is a DataTransferItemList.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DataTransferItemList)
*)
module[@js.scope "DataTransferItemList"] DataTransferItemList : sig
  type t = [`DataTransferItemList] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DataTransferItemList]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DataTransferItemList]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DataTransferItemList ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> DataTransferItem.t IterableIterator.t *)
  
  (**
    Returns the number of items in the drag data store.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DataTransferItemList/length)
  *)
  val get_length: 'tags this -> float [@@js.get "length"]
  
  (**
    Adds a new entry for the given data to the drag data store. If the data is plain text then a type string has to be provided also.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DataTransferItemList/add)
  *)
  val add: 'tags this -> data:string -> type_:string -> DataTransferItem.t option [@@js.call "add"]
  
  (**
    Adds a new entry for the given data to the drag data store. If the data is plain text then a type string has to be provided also.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DataTransferItemList/add)
  *)
  val add': 'tags this -> data:File.t -> DataTransferItem.t option [@@js.call "add"]
  
  (**
    Removes all the entries in the drag data store.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DataTransferItemList/clear)
  *)
  val clear: 'tags this -> unit [@@js.call "clear"]
  
  (**
    Removes the indexth entry in the drag data store.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DataTransferItemList/remove)
  *)
  val remove: 'tags this -> index:float -> unit [@@js.call "remove"]
  val get: 'tags this -> float -> DataTransferItem.t [@@js.index_get]
  val set: 'tags this -> float -> DataTransferItem.t -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module ValidityStateFlags : sig
  type t = [`ValidityStateFlags] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ValidityStateFlags]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ValidityStateFlags]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ValidityStateFlags ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_badInput: 'tags this -> bool option [@@js.get "badInput"]
  val set_badInput: 'tags this -> bool -> unit [@@js.set "badInput"]
  val get_customError: 'tags this -> bool option [@@js.get "customError"]
  val set_customError: 'tags this -> bool -> unit [@@js.set "customError"]
  val get_patternMismatch: 'tags this -> bool option [@@js.get "patternMismatch"]
  val set_patternMismatch: 'tags this -> bool -> unit [@@js.set "patternMismatch"]
  val get_rangeOverflow: 'tags this -> bool option [@@js.get "rangeOverflow"]
  val set_rangeOverflow: 'tags this -> bool -> unit [@@js.set "rangeOverflow"]
  val get_rangeUnderflow: 'tags this -> bool option [@@js.get "rangeUnderflow"]
  val set_rangeUnderflow: 'tags this -> bool -> unit [@@js.set "rangeUnderflow"]
  val get_stepMismatch: 'tags this -> bool option [@@js.get "stepMismatch"]
  val set_stepMismatch: 'tags this -> bool -> unit [@@js.set "stepMismatch"]
  val get_tooLong: 'tags this -> bool option [@@js.get "tooLong"]
  val set_tooLong: 'tags this -> bool -> unit [@@js.set "tooLong"]
  val get_tooShort: 'tags this -> bool option [@@js.get "tooShort"]
  val set_tooShort: 'tags this -> bool -> unit [@@js.set "tooShort"]
  val get_typeMismatch: 'tags this -> bool option [@@js.get "typeMismatch"]
  val set_typeMismatch: 'tags this -> bool -> unit [@@js.set "typeMismatch"]
  val get_valueMissing: 'tags this -> bool option [@@js.get "valueMissing"]
  val set_valueMissing: 'tags this -> bool -> unit [@@js.set "valueMissing"]
  val create: ?badInput:bool -> ?customError:bool -> ?patternMismatch:bool -> ?rangeOverflow:bool -> ?rangeUnderflow:bool -> ?stepMismatch:bool -> ?tooLong:bool -> ?tooShort:bool -> ?typeMismatch:bool -> ?valueMissing:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The validity states that an element can be in, with respect to constraint validation. Together, they help explain why an element's value fails to validate, if it's not valid.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ValidityState)
*)
module[@js.scope "ValidityState"] ValidityState : sig
  type t = [`ValidityState] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ValidityState]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ValidityState]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ValidityState ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ValidityState/badInput) *)
  val get_badInput: 'tags this -> bool [@@js.get "badInput"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ValidityState/customError) *)
  val get_customError: 'tags this -> bool [@@js.get "customError"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ValidityState/patternMismatch) *)
  val get_patternMismatch: 'tags this -> bool [@@js.get "patternMismatch"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ValidityState/rangeOverflow) *)
  val get_rangeOverflow: 'tags this -> bool [@@js.get "rangeOverflow"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ValidityState/rangeUnderflow) *)
  val get_rangeUnderflow: 'tags this -> bool [@@js.get "rangeUnderflow"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ValidityState/stepMismatch) *)
  val get_stepMismatch: 'tags this -> bool [@@js.get "stepMismatch"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ValidityState/tooLong) *)
  val get_tooLong: 'tags this -> bool [@@js.get "tooLong"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ValidityState/tooShort) *)
  val get_tooShort: 'tags this -> bool [@@js.get "tooShort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ValidityState/typeMismatch) *)
  val get_typeMismatch: 'tags this -> bool [@@js.get "typeMismatch"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ValidityState/valid) *)
  val get_valid: 'tags this -> bool [@@js.get "valid"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ValidityState/valueMissing) *)
  val get_valueMissing: 'tags this -> bool [@@js.get "valueMissing"]
  val create: badInput:bool -> customError:bool -> patternMismatch:bool -> rangeOverflow:bool -> rangeUnderflow:bool -> stepMismatch:bool -> tooLong:bool -> tooShort:bool -> typeMismatch:bool -> valid:bool -> valueMissing:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end
module InnerHTML : sig
  type t = [`InnerHTML] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`InnerHTML]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`InnerHTML]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `InnerHTML ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/innerHTML) *)
  val get_innerHTML: 'tags this -> string [@@js.get "innerHTML"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/innerHTML) *)
  val set_innerHTML: 'tags this -> string -> unit [@@js.set "innerHTML"]
  val create: innerHTML:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module AutoFillBase : sig
  type t = ([`L_s0[@js ""] | `L_s693_off[@js "off"] | `L_s698_on[@js "on"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module FormDataEntryValue : sig
  type t = ([`String of string | `Other of File.t] [@js.union on_field "dummy"]) Primitive.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module ElementContentEditable : sig
  type t = [`ElementContentEditable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ElementContentEditable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ElementContentEditable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ElementContentEditable ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/contentEditable) *)
  val get_contentEditable: 'tags this -> string [@@js.get "contentEditable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/contentEditable) *)
  val set_contentEditable: 'tags this -> string -> unit [@@js.set "contentEditable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/enterKeyHint) *)
  val get_enterKeyHint: 'tags this -> string [@@js.get "enterKeyHint"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/enterKeyHint) *)
  val set_enterKeyHint: 'tags this -> string -> unit [@@js.set "enterKeyHint"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/inputMode) *)
  val get_inputMode: 'tags this -> string [@@js.get "inputMode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/inputMode) *)
  val set_inputMode: 'tags this -> string -> unit [@@js.set "inputMode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/isContentEditable) *)
  val get_isContentEditable: 'tags this -> bool [@@js.get "isContentEditable"]
  val create: contentEditable:string -> enterKeyHint:string -> inputMode:string -> isContentEditable:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StylePropertyMapReadOnly) *)
module[@js.scope "StylePropertyMapReadOnly"] StylePropertyMapReadOnly : sig
  type t = [`StylePropertyMapReadOnly] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`StylePropertyMapReadOnly]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`StylePropertyMapReadOnly]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `StylePropertyMapReadOnly ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> (string * CSSStyleValue.t Iterable.t) IterableIterator.t *)
  val entries: 'tags this -> (string * CSSStyleValue.t Iterable.t) IterableIterator.t [@@js.call "entries"]
  val keys: 'tags this -> string IterableIterator.t [@@js.call "keys"]
  val values: 'tags this -> CSSStyleValue.t Iterable.t IterableIterator.t [@@js.call "values"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StylePropertyMapReadOnly/size) *)
  val get_size: 'tags this -> float [@@js.get "size"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StylePropertyMapReadOnly/get) *)
  val get_: 'tags this -> property:string -> CSSStyleValue.t option [@@js.call "get"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StylePropertyMapReadOnly/getAll) *)
  val getAll: 'tags this -> property:string -> CSSStyleValue.t list [@@js.call "getAll"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StylePropertyMapReadOnly/has) *)
  val has: 'tags this -> property:string -> bool [@@js.call "has"]
  val forEach: 'tags this -> callbackfn:(value:CSSStyleValue.t list -> key:string -> parent:t -> unit) -> ?thisArg:any -> unit -> unit [@@js.call "forEach"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StylePropertyMap) *)
module[@js.scope "StylePropertyMap"] StylePropertyMap : sig
  type t = [`StylePropertyMap | `StylePropertyMapReadOnly] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`StylePropertyMap | `StylePropertyMapReadOnly]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`StylePropertyMap | `StylePropertyMapReadOnly]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `StylePropertyMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StylePropertyMap/append) *)
  val append: 'tags this -> property:string -> values:(([`U1 of CSSStyleValue.t | `U2 of string] [@js.union]) list [@js.variadic]) -> unit [@@js.call "append"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StylePropertyMap/clear) *)
  val clear: 'tags this -> unit [@@js.call "clear"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StylePropertyMap/delete) *)
  val delete: 'tags this -> property:string -> unit [@@js.call "delete"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StylePropertyMap/set) *)
  val set_: 'tags this -> property:string -> values:(([`U1 of CSSStyleValue.t | `U2 of string] [@js.union]) list [@js.variadic]) -> unit [@@js.call "set"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaList) *)
module[@js.scope "MediaList"] MediaList : sig
  type t = [`MediaList] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaList]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaList]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaList ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> string IterableIterator.t *)
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaList/length) *)
  val get_length: 'tags this -> float [@@js.get "length"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaList/mediaText) *)
  val get_mediaText: 'tags this -> string [@@js.get "mediaText"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaList/mediaText) *)
  val set_mediaText: 'tags this -> string -> unit [@@js.set "mediaText"]
  val toString: 'tags this -> string [@@js.call "toString"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaList/appendMedium) *)
  val appendMedium: 'tags this -> medium:string -> unit [@@js.call "appendMedium"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaList/deleteMedium) *)
  val deleteMedium: 'tags this -> medium:string -> unit [@@js.call "deleteMedium"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaList/item) *)
  val item: 'tags this -> index:float -> string option [@@js.call "item"]
  val get: 'tags this -> float -> string [@@js.index_get]
  val set: 'tags this -> float -> string -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module CSSStyleSheetInit : sig
  type t = [`CSSStyleSheetInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSStyleSheetInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSStyleSheetInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSStyleSheetInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_baseURL: 'tags this -> string option [@@js.get "baseURL"]
  val set_baseURL: 'tags this -> string -> unit [@@js.set "baseURL"]
  val get_disabled: 'tags this -> bool option [@@js.get "disabled"]
  val set_disabled: 'tags this -> bool -> unit [@@js.set "disabled"]
  val get_media: 'tags this -> ([`String of string | `Undefined | `Other of MediaList.t] [@js.union on_field "dummy"]) Primitive.t [@@js.get "media"]
  val set_media: 'tags this -> ([`U1 of MediaList.t | `U2 of string] [@js.union]) -> unit [@@js.set "media"]
  val create: ?baseURL:string -> ?disabled:bool -> ?media:([`String of string | `Other of MediaList.t] [@js.union on_field "dummy"]) Primitive.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module FullscreenNavigationUI : sig
  type t = ([`L_s174_auto[@js "auto"] | `L_s478_hide[@js "hide"] | `L_s882_show[@js "show"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module FullscreenOptions : sig
  type t = [`FullscreenOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FullscreenOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FullscreenOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FullscreenOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_navigationUI: 'tags this -> FullscreenNavigationUI.t option [@@js.get "navigationUI"]
  val set_navigationUI: 'tags this -> FullscreenNavigationUI.t -> unit [@@js.set "navigationUI"]
  val create: ?navigationUI:FullscreenNavigationUI.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  A set of space-separated tokens. Such a set is returned by Element.classList, HTMLLinkElement.relList, HTMLAnchorElement.relList, HTMLAreaElement.relList, HTMLIframeElement.sandbox, or HTMLOutputElement.htmlFor. It is indexed beginning with 0 as with JavaScript Array objects. DOMTokenList is always case-sensitive.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMTokenList)
*)
module[@js.scope "DOMTokenList"] DOMTokenList : sig
  type t = [`DOMTokenList] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DOMTokenList]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DOMTokenList]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DOMTokenList ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> string IterableIterator.t *)
  val entries: 'tags this -> (float * string) IterableIterator.t [@@js.call "entries"]
  val keys: 'tags this -> float IterableIterator.t [@@js.call "keys"]
  val values: 'tags this -> string IterableIterator.t [@@js.call "values"]
  
  (**
    Returns the number of tokens.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMTokenList/length)
  *)
  val get_length: 'tags this -> float [@@js.get "length"]
  
  (**
    Returns the associated set as string.
    
    Can be set, to change the associated attribute.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMTokenList/value)
  *)
  val get_value: 'tags this -> string [@@js.get "value"]
  
  (**
    Returns the associated set as string.
    
    Can be set, to change the associated attribute.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMTokenList/value)
  *)
  val set_value: 'tags this -> string -> unit [@@js.set "value"]
  val toString: 'tags this -> string [@@js.call "toString"]
  
  (**
    Adds all arguments passed, except those already present.
    
    Throws a "SyntaxError" DOMException if one of the arguments is the empty string.
    
    Throws an "InvalidCharacterError" DOMException if one of the arguments contains any ASCII whitespace.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMTokenList/add)
  *)
  val add: 'tags this -> tokens:(string list [@js.variadic]) -> unit [@@js.call "add"]
  
  (**
    Returns true if token is present, and false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMTokenList/contains)
  *)
  val contains: 'tags this -> token:string -> bool [@@js.call "contains"]
  
  (**
    Returns the token with index index.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMTokenList/item)
  *)
  val item: 'tags this -> index:float -> string option [@@js.call "item"]
  
  (**
    Removes arguments passed, if they are present.
    
    Throws a "SyntaxError" DOMException if one of the arguments is the empty string.
    
    Throws an "InvalidCharacterError" DOMException if one of the arguments contains any ASCII whitespace.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMTokenList/remove)
  *)
  val remove: 'tags this -> tokens:(string list [@js.variadic]) -> unit [@@js.call "remove"]
  
  (**
    Replaces token with newToken.
    
    Returns true if token was replaced with newToken, and false otherwise.
    
    Throws a "SyntaxError" DOMException if one of the arguments is the empty string.
    
    Throws an "InvalidCharacterError" DOMException if one of the arguments contains any ASCII whitespace.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMTokenList/replace)
  *)
  val replace: 'tags this -> token:string -> newToken:string -> bool [@@js.call "replace"]
  
  (**
    Returns true if token is in the associated attribute's supported tokens. Returns false otherwise.
    
    Throws a TypeError if the associated attribute has no supported tokens defined.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMTokenList/supports)
  *)
  val supports: 'tags this -> token:string -> bool [@@js.call "supports"]
  
  (**
    If force is not given, "toggles" token, removing it if it's present and adding it if it's not present. If force is true, adds token (same as add()). If force is false, removes token (same as remove()).
    
    Returns true if token is now present, and false otherwise.
    
    Throws a "SyntaxError" DOMException if token is empty.
    
    Throws an "InvalidCharacterError" DOMException if token contains any spaces.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMTokenList/toggle)
  *)
  val toggle: 'tags this -> token:string -> ?force:bool -> unit -> bool [@@js.call "toggle"]
  val forEach: 'tags this -> callbackfn:(value:string -> key:float -> parent:t -> unit) -> ?thisArg:any -> unit -> unit [@@js.call "forEach"]
  val get: 'tags this -> float -> string [@@js.index_get]
  val set: 'tags this -> float -> string -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module[@js.scope "DOMRectList"] DOMRectList : sig
  type t = [`DOMRectList] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DOMRectList]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DOMRectList]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DOMRectList ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> DOMRect.t IterableIterator.t *)
  val get_length: 'tags this -> float [@@js.get "length"]
  val item: 'tags this -> index:float -> DOMRect.t option [@@js.call "item"]
  val get: 'tags this -> float -> DOMRect.t [@@js.index_get]
  val set: 'tags this -> float -> DOMRect.t -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module CheckVisibilityOptions : sig
  type t = [`CheckVisibilityOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CheckVisibilityOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CheckVisibilityOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CheckVisibilityOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_checkOpacity: 'tags this -> bool option [@@js.get "checkOpacity"]
  val set_checkOpacity: 'tags this -> bool -> unit [@@js.set "checkOpacity"]
  val get_checkVisibilityCSS: 'tags this -> bool option [@@js.get "checkVisibilityCSS"]
  val set_checkVisibilityCSS: 'tags this -> bool -> unit [@@js.set "checkVisibilityCSS"]
  val create: ?checkOpacity:bool -> ?checkVisibilityCSS:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module CompositeOperationOrAuto : sig
  type t = ([`L_s116_accumulate[@js "accumulate"] | `L_s121_add[@js "add"] | `L_s174_auto[@js "auto"] | `L_s820_replace[@js "replace"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module PropertyIndexedKeyframes : sig
  type t = [`PropertyIndexedKeyframes] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PropertyIndexedKeyframes]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PropertyIndexedKeyframes]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PropertyIndexedKeyframes ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_composite: 'tags this -> (CompositeOperationOrAuto.t list, CompositeOperationOrAuto.t) union2 option [@@js.get "composite"]
  val set_composite: 'tags this -> ([`U1 of CompositeOperationOrAuto.t | `U2 of CompositeOperationOrAuto.t list] [@js.union]) -> unit [@@js.set "composite"]
  val get_easing: 'tags this -> ([`String of string | `Undefined | `Other of string list] [@js.union on_field "dummy"]) Primitive.t [@@js.get "easing"]
  val set_easing: 'tags this -> ([`U1 of string | `U2 of string list] [@js.union]) -> unit [@@js.set "easing"]
  val get_offset: 'tags this -> ([`Number of float | `Undefined | `Other of float option list] [@js.union on_field "dummy"]) Primitive.t [@@js.get "offset"]
  val set_offset: 'tags this -> ([`U1 of float | `U2 of float option list] [@js.union]) -> unit [@@js.set "offset"]
  val get: 'tags this -> string -> ([`Number of float | `String of string | `Null | `Undefined | `Other of ([`Number of float | `String of string | `Null] [@js.union on_field "dummy"]) Primitive.t list] [@js.union on_field "dummy"]) Primitive.t [@@js.index_get]
  val set: 'tags this -> string -> ([`Null | `Undefined of undefined | `U1 of string | `U2 of string list | `U3 of float | `U4 of float option list] [@js.union]) -> unit [@@js.index_set]
  val create: ?composite:(CompositeOperationOrAuto.t list, CompositeOperationOrAuto.t) union2 -> ?easing:([`String of string | `Other of string list] [@js.union on_field "dummy"]) Primitive.t -> ?offset:([`Number of float | `Other of float option list] [@js.union on_field "dummy"]) Primitive.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module IterationCompositeOperation : sig
  type t = ([`L_s116_accumulate[@js "accumulate"] | `L_s820_replace[@js "replace"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module CompositeOperation : sig
  type t = ([`L_s116_accumulate[@js "accumulate"] | `L_s121_add[@js "add"] | `L_s820_replace[@js "replace"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module PlaybackDirection : sig
  type t = ([`L_s141_alternate[@js "alternate"] | `L_s142_alternate_reverse[@js "alternate-reverse"] | `L_s687_normal[@js "normal"] | `L_s830_reverse[@js "reverse"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module FillMode : sig
  type t = ([`L_s174_auto[@js "auto"] | `L_s180_backwards[@js "backwards"] | `L_s211_both[@js "both"] | `L_s436_forwards[@js "forwards"] | `L_s685_none[@js "none"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module EffectTiming : sig
  type t = [`EffectTiming] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EffectTiming]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EffectTiming]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EffectTiming ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_delay: 'tags this -> float option [@@js.get "delay"]
  val set_delay: 'tags this -> float -> unit [@@js.set "delay"]
  val get_direction: 'tags this -> PlaybackDirection.t option [@@js.get "direction"]
  val set_direction: 'tags this -> PlaybackDirection.t -> unit [@@js.set "direction"]
  val get_duration: 'tags this -> ([`Number of float | `String of string | `Undefined | `Other of CSSNumericValue.t] [@js.union on_field "dummy"]) Primitive.t [@@js.get "duration"]
  val set_duration: 'tags this -> ([`U1 of float | `U2 of CSSNumericValue.t | `U3 of string] [@js.union]) -> unit [@@js.set "duration"]
  val get_easing: 'tags this -> string option [@@js.get "easing"]
  val set_easing: 'tags this -> string -> unit [@@js.set "easing"]
  val get_endDelay: 'tags this -> float option [@@js.get "endDelay"]
  val set_endDelay: 'tags this -> float -> unit [@@js.set "endDelay"]
  val get_fill: 'tags this -> FillMode.t option [@@js.get "fill"]
  val set_fill: 'tags this -> FillMode.t -> unit [@@js.set "fill"]
  val get_iterationStart: 'tags this -> float option [@@js.get "iterationStart"]
  val set_iterationStart: 'tags this -> float -> unit [@@js.set "iterationStart"]
  val get_iterations: 'tags this -> float option [@@js.get "iterations"]
  val set_iterations: 'tags this -> float -> unit [@@js.set "iterations"]
  val get_playbackRate: 'tags this -> float option [@@js.get "playbackRate"]
  val set_playbackRate: 'tags this -> float -> unit [@@js.set "playbackRate"]
  val create: ?delay:float -> ?direction:PlaybackDirection.t -> ?duration:([`Number of float | `String of string | `Other of CSSNumericValue.t] [@js.union on_field "dummy"]) Primitive.t -> ?easing:string -> ?endDelay:float -> ?fill:FillMode.t -> ?iterationStart:float -> ?iterations:float -> ?playbackRate:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module KeyframeEffectOptions : sig
  type t = [`EffectTiming | `KeyframeEffectOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EffectTiming | `KeyframeEffectOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EffectTiming | `KeyframeEffectOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `KeyframeEffectOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_composite: 'tags this -> CompositeOperation.t option [@@js.get "composite"]
  val set_composite: 'tags this -> CompositeOperation.t -> unit [@@js.set "composite"]
  val get_iterationComposite: 'tags this -> IterationCompositeOperation.t option [@@js.get "iterationComposite"]
  val set_iterationComposite: 'tags this -> IterationCompositeOperation.t -> unit [@@js.set "iterationComposite"]
  val get_pseudoElement: 'tags this -> string option [@@js.get "pseudoElement"]
  val set_pseudoElement: 'tags this -> string option -> unit [@@js.set "pseudoElement"]
  val create: ?composite:CompositeOperation.t -> ?iterationComposite:IterationCompositeOperation.t -> ?pseudoElement:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module KeyframeAnimationOptions : sig
  type t = [`EffectTiming | `KeyframeAnimationOptions | `KeyframeEffectOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EffectTiming | `KeyframeAnimationOptions | `KeyframeEffectOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EffectTiming | `KeyframeAnimationOptions | `KeyframeEffectOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `KeyframeAnimationOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_id: 'tags this -> string option [@@js.get "id"]
  val set_id: 'tags this -> string -> unit [@@js.set "id"]
  val get_timeline: 'tags this -> AnimationTimeline.t option [@@js.get "timeline"]
  val set_timeline: 'tags this -> AnimationTimeline.t option -> unit [@@js.set "timeline"]
  val create: ?id:string -> ?timeline:AnimationTimeline.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module Keyframe : sig
  type t = [`Keyframe] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Keyframe]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Keyframe]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Keyframe ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_composite: 'tags this -> CompositeOperationOrAuto.t option [@@js.get "composite"]
  val set_composite: 'tags this -> CompositeOperationOrAuto.t -> unit [@@js.set "composite"]
  val get_easing: 'tags this -> string option [@@js.get "easing"]
  val set_easing: 'tags this -> string -> unit [@@js.set "easing"]
  val get_offset: 'tags this -> float option [@@js.get "offset"]
  val set_offset: 'tags this -> float option -> unit [@@js.set "offset"]
  val get: 'tags this -> string -> ([`Number of float | `String of string | `Null | `Undefined] [@js.union on_field "dummy"]) Primitive.t [@@js.index_get]
  val set: 'tags this -> string -> ([`Null | `Undefined of undefined | `U1 of string | `U2 of float] [@js.union]) -> unit [@@js.index_set]
  val create: ?composite:CompositeOperationOrAuto.t -> ?easing:string -> ?offset:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module GetAnimationsOptions : sig
  type t = [`GetAnimationsOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`GetAnimationsOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`GetAnimationsOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `GetAnimationsOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_subtree: 'tags this -> bool option [@@js.get "subtree"]
  val set_subtree: 'tags this -> bool -> unit [@@js.set "subtree"]
  val create: ?subtree:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module AnimationReplaceState : sig
  type t = ([`L_s120_active[@js "active"] | `L_s738_persisted[@js "persisted"] | `L_s817_removed[@js "removed"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module AnimationPlayState : sig
  type t = ([`L_s422_finished[@js "finished"] | `L_s504_idle[@js "idle"] | `L_s732_paused[@js "paused"] | `L_s843_running[@js "running"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module OptionalEffectTiming : sig
  type t = [`OptionalEffectTiming] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`OptionalEffectTiming]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`OptionalEffectTiming]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OptionalEffectTiming ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_delay: 'tags this -> float option [@@js.get "delay"]
  val set_delay: 'tags this -> float -> unit [@@js.set "delay"]
  val get_direction: 'tags this -> PlaybackDirection.t option [@@js.get "direction"]
  val set_direction: 'tags this -> PlaybackDirection.t -> unit [@@js.set "direction"]
  val get_duration: 'tags this -> ([`Number of float | `String of string | `Undefined] [@js.union on_field "dummy"]) Primitive.t [@@js.get "duration"]
  val set_duration: 'tags this -> ([`U1 of float | `U2 of string] [@js.union]) -> unit [@@js.set "duration"]
  val get_easing: 'tags this -> string option [@@js.get "easing"]
  val set_easing: 'tags this -> string -> unit [@@js.set "easing"]
  val get_endDelay: 'tags this -> float option [@@js.get "endDelay"]
  val set_endDelay: 'tags this -> float -> unit [@@js.set "endDelay"]
  val get_fill: 'tags this -> FillMode.t option [@@js.get "fill"]
  val set_fill: 'tags this -> FillMode.t -> unit [@@js.set "fill"]
  val get_iterationStart: 'tags this -> float option [@@js.get "iterationStart"]
  val set_iterationStart: 'tags this -> float -> unit [@@js.set "iterationStart"]
  val get_iterations: 'tags this -> float option [@@js.get "iterations"]
  val set_iterations: 'tags this -> float -> unit [@@js.set "iterations"]
  val get_playbackRate: 'tags this -> float option [@@js.get "playbackRate"]
  val set_playbackRate: 'tags this -> float -> unit [@@js.set "playbackRate"]
  val create: ?delay:float -> ?direction:PlaybackDirection.t -> ?duration:([`Number of float | `String of string] [@js.union on_field "dummy"]) Primitive.t -> ?easing:string -> ?endDelay:float -> ?fill:FillMode.t -> ?iterationStart:float -> ?iterations:float -> ?playbackRate:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ComputedEffectTiming : sig
  type t = [`ComputedEffectTiming | `EffectTiming] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ComputedEffectTiming | `EffectTiming]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ComputedEffectTiming | `EffectTiming]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ComputedEffectTiming ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_activeDuration: 'tags this -> CSSNumberish.t option [@@js.get "activeDuration"]
  val set_activeDuration: 'tags this -> CSSNumberish.t -> unit [@@js.set "activeDuration"]
  val get_currentIteration: 'tags this -> float option [@@js.get "currentIteration"]
  val set_currentIteration: 'tags this -> float option -> unit [@@js.set "currentIteration"]
  val get_endTime: 'tags this -> CSSNumberish.t option [@@js.get "endTime"]
  val set_endTime: 'tags this -> CSSNumberish.t -> unit [@@js.set "endTime"]
  val get_localTime: 'tags this -> CSSNumberish.t option [@@js.get "localTime"]
  val set_localTime: 'tags this -> CSSNumberish.t option -> unit [@@js.set "localTime"]
  val get_progress: 'tags this -> float option [@@js.get "progress"]
  val set_progress: 'tags this -> float option -> unit [@@js.set "progress"]
  val get_startTime: 'tags this -> CSSNumberish.t option [@@js.get "startTime"]
  val set_startTime: 'tags this -> CSSNumberish.t -> unit [@@js.set "startTime"]
  val create: ?activeDuration:CSSNumberish.t -> ?currentIteration:float -> ?endTime:CSSNumberish.t -> ?localTime:CSSNumberish.t -> ?progress:float -> ?startTime:CSSNumberish.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AnimationEffect) *)
module[@js.scope "AnimationEffect"] AnimationEffect : sig
  type t = [`AnimationEffect] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AnimationEffect]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AnimationEffect]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AnimationEffect ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AnimationEffect/getComputedTiming) *)
  val getComputedTiming: 'tags this -> ComputedEffectTiming.t [@@js.call "getComputedTiming"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AnimationEffect/getTiming) *)
  val getTiming: 'tags this -> EffectTiming.t [@@js.call "getTiming"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AnimationEffect/updateTiming) *)
  val updateTiming: 'tags this -> ?timing:OptionalEffectTiming.t -> unit -> unit [@@js.call "updateTiming"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module AnimationPlaybackEventInit : sig
  type t = [`AnimationPlaybackEventInit | `EventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AnimationPlaybackEventInit | `EventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AnimationPlaybackEventInit | `EventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AnimationPlaybackEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_currentTime: 'tags this -> CSSNumberish.t option [@@js.get "currentTime"]
  val set_currentTime: 'tags this -> CSSNumberish.t option -> unit [@@js.set "currentTime"]
  val get_timelineTime: 'tags this -> CSSNumberish.t option [@@js.get "timelineTime"]
  val set_timelineTime: 'tags this -> CSSNumberish.t option -> unit [@@js.set "timelineTime"]
  val create: ?currentTime:CSSNumberish.t -> ?timelineTime:CSSNumberish.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AnimationPlaybackEvent) *)
module[@js.scope "AnimationPlaybackEvent"] AnimationPlaybackEvent : sig
  type t = [`AnimationPlaybackEvent | `Event] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AnimationPlaybackEvent | `Event]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AnimationPlaybackEvent | `Event]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AnimationPlaybackEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AnimationPlaybackEvent/currentTime) *)
  val get_currentTime: 'tags this -> CSSNumberish.t option [@@js.get "currentTime"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AnimationPlaybackEvent/timelineTime) *)
  val get_timelineTime: 'tags this -> CSSNumberish.t option [@@js.get "timelineTime"]
  val create: ?currentTime:CSSNumberish.t -> ?timelineTime:CSSNumberish.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> ?eventInitDict:AnimationPlaybackEventInit.t -> unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Animation) *)
module[@js.scope "Animation"] Animation : sig
  type t = [`Animation | `EventTarget] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Animation | `EventTarget]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Animation | `EventTarget]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Animation ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Animation/currentTime) *)
  val get_currentTime: 'tags this -> CSSNumberish.t option [@@js.get "currentTime"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Animation/currentTime) *)
  val set_currentTime: 'tags this -> CSSNumberish.t option -> unit [@@js.set "currentTime"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Animation/effect) *)
  val get_effect: 'tags this -> AnimationEffect.t option [@@js.get "effect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Animation/effect) *)
  val set_effect: 'tags this -> AnimationEffect.t option -> unit [@@js.set "effect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Animation/finished) *)
  val get_finished: 'tags this -> t Promise.t [@@js.get "finished"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Animation/id) *)
  val get_id: 'tags this -> string [@@js.get "id"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Animation/id) *)
  val set_id: 'tags this -> string -> unit [@@js.set "id"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Animation/cancel_event) *)
  val get_oncancel: 'tags this -> (this:t -> ev:AnimationPlaybackEvent.t -> any) option [@@js.get "oncancel"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Animation/cancel_event) *)
  val set_oncancel: 'tags this -> (this:t -> ev:AnimationPlaybackEvent.t -> any) option -> unit [@@js.set "oncancel"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Animation/finish_event) *)
  val get_onfinish: 'tags this -> (this:t -> ev:AnimationPlaybackEvent.t -> any) option [@@js.get "onfinish"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Animation/finish_event) *)
  val set_onfinish: 'tags this -> (this:t -> ev:AnimationPlaybackEvent.t -> any) option -> unit [@@js.set "onfinish"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Animation/remove_event) *)
  val get_onremove: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onremove"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Animation/remove_event) *)
  val set_onremove: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onremove"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Animation/pending) *)
  val get_pending: 'tags this -> bool [@@js.get "pending"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Animation/playState) *)
  val get_playState: 'tags this -> AnimationPlayState.t [@@js.get "playState"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Animation/playbackRate) *)
  val get_playbackRate: 'tags this -> float [@@js.get "playbackRate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Animation/playbackRate) *)
  val set_playbackRate: 'tags this -> float -> unit [@@js.set "playbackRate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Animation/ready) *)
  val get_ready: 'tags this -> t Promise.t [@@js.get "ready"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Animation/replaceState) *)
  val get_replaceState: 'tags this -> AnimationReplaceState.t [@@js.get "replaceState"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Animation/startTime) *)
  val get_startTime: 'tags this -> CSSNumberish.t option [@@js.get "startTime"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Animation/startTime) *)
  val set_startTime: 'tags this -> CSSNumberish.t option -> unit [@@js.set "startTime"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Animation/timeline) *)
  val get_timeline: 'tags this -> AnimationTimeline.t option [@@js.get "timeline"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Animation/timeline) *)
  val set_timeline: 'tags this -> AnimationTimeline.t option -> unit [@@js.set "timeline"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Animation/cancel) *)
  val cancel: 'tags this -> unit [@@js.call "cancel"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Animation/commitStyles) *)
  val commitStyles: 'tags this -> unit [@@js.call "commitStyles"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Animation/finish) *)
  val finish: 'tags this -> unit [@@js.call "finish"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Animation/pause) *)
  val pause: 'tags this -> unit [@@js.call "pause"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Animation/persist) *)
  val persist: 'tags this -> unit [@@js.call "persist"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Animation/play) *)
  val play: 'tags this -> unit [@@js.call "play"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Animation/reverse) *)
  val reverse: 'tags this -> unit [@@js.call "reverse"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Animation/updatePlaybackRate) *)
  val updatePlaybackRate: 'tags this -> playbackRate:float -> unit [@@js.call "updatePlaybackRate"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'AnimationEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'AnimationEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: ?effect:AnimationEffect.t option -> ?timeline:AnimationTimeline.t option -> unit -> t [@@js.create]
end
module Animatable : sig
  type t = [`Animatable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Animatable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Animatable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Animatable ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/animate) *)
  val animate: 'tags this -> keyframes:([`Null | `U1 of Keyframe.t list | `U2 of PropertyIndexedKeyframes.t] [@js.union]) -> ?options:([`U1 of float | `U2 of KeyframeAnimationOptions.t] [@js.union]) -> unit -> Animation.t [@@js.call "animate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/getAnimations) *)
  val getAnimations: 'tags this -> ?options:GetAnimationsOptions.t -> unit -> Animation.t list [@@js.call "getAnimations"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module AnimationEventInit : sig
  type t = [`AnimationEventInit | `EventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AnimationEventInit | `EventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AnimationEventInit | `EventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AnimationEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_animationName: 'tags this -> string option [@@js.get "animationName"]
  val set_animationName: 'tags this -> string -> unit [@@js.set "animationName"]
  val get_elapsedTime: 'tags this -> float option [@@js.get "elapsedTime"]
  val set_elapsedTime: 'tags this -> float -> unit [@@js.set "elapsedTime"]
  val get_pseudoElement: 'tags this -> string option [@@js.get "pseudoElement"]
  val set_pseudoElement: 'tags this -> string -> unit [@@js.set "pseudoElement"]
  val create: ?animationName:string -> ?elapsedTime:float -> ?pseudoElement:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Events providing information related to animations.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AnimationEvent)
*)
module[@js.scope "AnimationEvent"] AnimationEvent : sig
  type t = [`AnimationEvent | `Event] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AnimationEvent | `Event]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AnimationEvent | `Event]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AnimationEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AnimationEvent/animationName) *)
  val get_animationName: 'tags this -> string [@@js.get "animationName"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AnimationEvent/elapsedTime) *)
  val get_elapsedTime: 'tags this -> float [@@js.get "elapsedTime"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AnimationEvent/pseudoElement) *)
  val get_pseudoElement: 'tags this -> string [@@js.get "pseudoElement"]
  val create: animationName:string -> elapsedTime:float -> pseudoElement:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> ?animationEventInitDict:AnimationEventInit.t -> unit -> t [@@js.create]
end
module ARIAMixin : sig
  type t = [`ARIAMixin] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ARIAMixin ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaAtomic) *)
  val get_ariaAtomic: 'tags this -> string option [@@js.get "ariaAtomic"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaAtomic) *)
  val set_ariaAtomic: 'tags this -> string option -> unit [@@js.set "ariaAtomic"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaAutoComplete) *)
  val get_ariaAutoComplete: 'tags this -> string option [@@js.get "ariaAutoComplete"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaAutoComplete) *)
  val set_ariaAutoComplete: 'tags this -> string option -> unit [@@js.set "ariaAutoComplete"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaBusy) *)
  val get_ariaBusy: 'tags this -> string option [@@js.get "ariaBusy"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaBusy) *)
  val set_ariaBusy: 'tags this -> string option -> unit [@@js.set "ariaBusy"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaChecked) *)
  val get_ariaChecked: 'tags this -> string option [@@js.get "ariaChecked"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaChecked) *)
  val set_ariaChecked: 'tags this -> string option -> unit [@@js.set "ariaChecked"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaColCount) *)
  val get_ariaColCount: 'tags this -> string option [@@js.get "ariaColCount"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaColCount) *)
  val set_ariaColCount: 'tags this -> string option -> unit [@@js.set "ariaColCount"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaColIndex) *)
  val get_ariaColIndex: 'tags this -> string option [@@js.get "ariaColIndex"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaColIndex) *)
  val set_ariaColIndex: 'tags this -> string option -> unit [@@js.set "ariaColIndex"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaColSpan) *)
  val get_ariaColSpan: 'tags this -> string option [@@js.get "ariaColSpan"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaColSpan) *)
  val set_ariaColSpan: 'tags this -> string option -> unit [@@js.set "ariaColSpan"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaCurrent) *)
  val get_ariaCurrent: 'tags this -> string option [@@js.get "ariaCurrent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaCurrent) *)
  val set_ariaCurrent: 'tags this -> string option -> unit [@@js.set "ariaCurrent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaDescription) *)
  val get_ariaDescription: 'tags this -> string option [@@js.get "ariaDescription"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaDescription) *)
  val set_ariaDescription: 'tags this -> string option -> unit [@@js.set "ariaDescription"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaDisabled) *)
  val get_ariaDisabled: 'tags this -> string option [@@js.get "ariaDisabled"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaDisabled) *)
  val set_ariaDisabled: 'tags this -> string option -> unit [@@js.set "ariaDisabled"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaExpanded) *)
  val get_ariaExpanded: 'tags this -> string option [@@js.get "ariaExpanded"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaExpanded) *)
  val set_ariaExpanded: 'tags this -> string option -> unit [@@js.set "ariaExpanded"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaHasPopup) *)
  val get_ariaHasPopup: 'tags this -> string option [@@js.get "ariaHasPopup"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaHasPopup) *)
  val set_ariaHasPopup: 'tags this -> string option -> unit [@@js.set "ariaHasPopup"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaHidden) *)
  val get_ariaHidden: 'tags this -> string option [@@js.get "ariaHidden"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaHidden) *)
  val set_ariaHidden: 'tags this -> string option -> unit [@@js.set "ariaHidden"]
  val get_ariaInvalid: 'tags this -> string option [@@js.get "ariaInvalid"]
  val set_ariaInvalid: 'tags this -> string option -> unit [@@js.set "ariaInvalid"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaKeyShortcuts) *)
  val get_ariaKeyShortcuts: 'tags this -> string option [@@js.get "ariaKeyShortcuts"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaKeyShortcuts) *)
  val set_ariaKeyShortcuts: 'tags this -> string option -> unit [@@js.set "ariaKeyShortcuts"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaLabel) *)
  val get_ariaLabel: 'tags this -> string option [@@js.get "ariaLabel"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaLabel) *)
  val set_ariaLabel: 'tags this -> string option -> unit [@@js.set "ariaLabel"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaLevel) *)
  val get_ariaLevel: 'tags this -> string option [@@js.get "ariaLevel"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaLevel) *)
  val set_ariaLevel: 'tags this -> string option -> unit [@@js.set "ariaLevel"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaLive) *)
  val get_ariaLive: 'tags this -> string option [@@js.get "ariaLive"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaLive) *)
  val set_ariaLive: 'tags this -> string option -> unit [@@js.set "ariaLive"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaModal) *)
  val get_ariaModal: 'tags this -> string option [@@js.get "ariaModal"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaModal) *)
  val set_ariaModal: 'tags this -> string option -> unit [@@js.set "ariaModal"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaMultiLine) *)
  val get_ariaMultiLine: 'tags this -> string option [@@js.get "ariaMultiLine"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaMultiLine) *)
  val set_ariaMultiLine: 'tags this -> string option -> unit [@@js.set "ariaMultiLine"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaMultiSelectable) *)
  val get_ariaMultiSelectable: 'tags this -> string option [@@js.get "ariaMultiSelectable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaMultiSelectable) *)
  val set_ariaMultiSelectable: 'tags this -> string option -> unit [@@js.set "ariaMultiSelectable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaOrientation) *)
  val get_ariaOrientation: 'tags this -> string option [@@js.get "ariaOrientation"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaOrientation) *)
  val set_ariaOrientation: 'tags this -> string option -> unit [@@js.set "ariaOrientation"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaPlaceholder) *)
  val get_ariaPlaceholder: 'tags this -> string option [@@js.get "ariaPlaceholder"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaPlaceholder) *)
  val set_ariaPlaceholder: 'tags this -> string option -> unit [@@js.set "ariaPlaceholder"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaPosInSet) *)
  val get_ariaPosInSet: 'tags this -> string option [@@js.get "ariaPosInSet"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaPosInSet) *)
  val set_ariaPosInSet: 'tags this -> string option -> unit [@@js.set "ariaPosInSet"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaPressed) *)
  val get_ariaPressed: 'tags this -> string option [@@js.get "ariaPressed"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaPressed) *)
  val set_ariaPressed: 'tags this -> string option -> unit [@@js.set "ariaPressed"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaReadOnly) *)
  val get_ariaReadOnly: 'tags this -> string option [@@js.get "ariaReadOnly"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaReadOnly) *)
  val set_ariaReadOnly: 'tags this -> string option -> unit [@@js.set "ariaReadOnly"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaRequired) *)
  val get_ariaRequired: 'tags this -> string option [@@js.get "ariaRequired"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaRequired) *)
  val set_ariaRequired: 'tags this -> string option -> unit [@@js.set "ariaRequired"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaRoleDescription) *)
  val get_ariaRoleDescription: 'tags this -> string option [@@js.get "ariaRoleDescription"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaRoleDescription) *)
  val set_ariaRoleDescription: 'tags this -> string option -> unit [@@js.set "ariaRoleDescription"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaRowCount) *)
  val get_ariaRowCount: 'tags this -> string option [@@js.get "ariaRowCount"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaRowCount) *)
  val set_ariaRowCount: 'tags this -> string option -> unit [@@js.set "ariaRowCount"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaRowIndex) *)
  val get_ariaRowIndex: 'tags this -> string option [@@js.get "ariaRowIndex"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaRowIndex) *)
  val set_ariaRowIndex: 'tags this -> string option -> unit [@@js.set "ariaRowIndex"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaRowSpan) *)
  val get_ariaRowSpan: 'tags this -> string option [@@js.get "ariaRowSpan"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaRowSpan) *)
  val set_ariaRowSpan: 'tags this -> string option -> unit [@@js.set "ariaRowSpan"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaSelected) *)
  val get_ariaSelected: 'tags this -> string option [@@js.get "ariaSelected"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaSelected) *)
  val set_ariaSelected: 'tags this -> string option -> unit [@@js.set "ariaSelected"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaSetSize) *)
  val get_ariaSetSize: 'tags this -> string option [@@js.get "ariaSetSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaSetSize) *)
  val set_ariaSetSize: 'tags this -> string option -> unit [@@js.set "ariaSetSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaSort) *)
  val get_ariaSort: 'tags this -> string option [@@js.get "ariaSort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaSort) *)
  val set_ariaSort: 'tags this -> string option -> unit [@@js.set "ariaSort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaValueMax) *)
  val get_ariaValueMax: 'tags this -> string option [@@js.get "ariaValueMax"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaValueMax) *)
  val set_ariaValueMax: 'tags this -> string option -> unit [@@js.set "ariaValueMax"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaValueMin) *)
  val get_ariaValueMin: 'tags this -> string option [@@js.get "ariaValueMin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaValueMin) *)
  val set_ariaValueMin: 'tags this -> string option -> unit [@@js.set "ariaValueMin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaValueNow) *)
  val get_ariaValueNow: 'tags this -> string option [@@js.get "ariaValueNow"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaValueNow) *)
  val set_ariaValueNow: 'tags this -> string option -> unit [@@js.set "ariaValueNow"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaValueText) *)
  val get_ariaValueText: 'tags this -> string option [@@js.get "ariaValueText"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/ariaValueText) *)
  val set_ariaValueText: 'tags this -> string option -> unit [@@js.set "ariaValueText"]
  val get_role: 'tags this -> string option [@@js.get "role"]
  val set_role: 'tags this -> string option -> unit [@@js.set "role"]
  val create: ?ariaAtomic:string -> ?ariaAutoComplete:string -> ?ariaBusy:string -> ?ariaChecked:string -> ?ariaColCount:string -> ?ariaColIndex:string -> ?ariaColSpan:string -> ?ariaCurrent:string -> ?ariaDescription:string -> ?ariaDisabled:string -> ?ariaExpanded:string -> ?ariaHasPopup:string -> ?ariaHidden:string -> ?ariaInvalid:string -> ?ariaKeyShortcuts:string -> ?ariaLabel:string -> ?ariaLevel:string -> ?ariaLive:string -> ?ariaModal:string -> ?ariaMultiLine:string -> ?ariaMultiSelectable:string -> ?ariaOrientation:string -> ?ariaPlaceholder:string -> ?ariaPosInSet:string -> ?ariaPressed:string -> ?ariaReadOnly:string -> ?ariaRequired:string -> ?ariaRoleDescription:string -> ?ariaRowCount:string -> ?ariaRowIndex:string -> ?ariaRowSpan:string -> ?ariaSelected:string -> ?ariaSetSize:string -> ?ariaSort:string -> ?ariaValueMax:string -> ?ariaValueMin:string -> ?ariaValueNow:string -> ?ariaValueText:string -> ?role:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module GLintptr : sig
  type t = float
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  The ANGLE_instanced_arrays extension is part of the WebGL API and allows to draw the same object, or groups of similar objects multiple times, if they share the same vertex data, primitive count and type.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ANGLE_instanced_arrays)
*)
module ANGLE_instanced_arrays : sig
  type t = [`ANGLE_instanced_arrays] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ANGLE_instanced_arrays]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ANGLE_instanced_arrays]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ANGLE_instanced_arrays ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ANGLE_instanced_arrays/drawArraysInstancedANGLE) *)
  val drawArraysInstancedANGLE: 'tags this -> mode:GLenum.t -> first:GLint.t -> count:GLsizei.t -> primcount:GLsizei.t -> unit [@@js.call "drawArraysInstancedANGLE"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ANGLE_instanced_arrays/drawElementsInstancedANGLE) *)
  val drawElementsInstancedANGLE: 'tags this -> mode:GLenum.t -> count:GLsizei.t -> type_:GLenum.t -> offset:GLintptr.t -> primcount:GLsizei.t -> unit [@@js.call "drawElementsInstancedANGLE"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ANGLE_instanced_arrays/vertexAttribDivisorANGLE) *)
  val vertexAttribDivisorANGLE: 'tags this -> index:GLuint.t -> divisor:GLuint.t -> unit [@@js.call "vertexAttribDivisorANGLE"]
  val get_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: 'tags this -> ([`L_n_35070[@js 35070]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AbstractRange) *)
module[@js.scope "AbstractRange"] rec AbstractRange : sig
  type t = [`AbstractRange] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AbstractRange]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AbstractRange]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AbstractRange ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns true if range is collapsed, and false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AbstractRange/collapsed)
  *)
  val get_collapsed: 'tags this -> bool [@@js.get "collapsed"]
  
  (**
    Returns range's end node.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AbstractRange/endContainer)
  *)
  val get_endContainer: 'tags this -> Node.t [@@js.get "endContainer"]
  
  (**
    Returns range's end offset.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AbstractRange/endOffset)
  *)
  val get_endOffset: 'tags this -> float [@@js.get "endOffset"]
  
  (**
    Returns range's start node.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AbstractRange/startContainer)
  *)
  val get_startContainer: 'tags this -> Node.t [@@js.get "startContainer"]
  
  (**
    Returns range's start offset.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AbstractRange/startOffset)
  *)
  val get_startOffset: 'tags this -> float [@@js.get "startOffset"]
  val create: collapsed:bool -> endContainer:Node.t -> endOffset:float -> startContainer:Node.t -> startOffset:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(**
  A DOM element's attribute as an object. In most DOM methods, you will probably directly retrieve the attribute as a string (e.g., Element.getAttribute(), but certain functions (e.g., Element.getAttributeNode()) or means of iterating give Attr types.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Attr)
*)
and[@js.scope "Attr"] Attr : sig
  type t = [`Attr | `EventTarget | `Node] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Attr | `EventTarget | `Node]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Attr | `EventTarget | `Node]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Attr ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Attr/localName) *)
  val get_localName: 'tags this -> string [@@js.get "localName"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Attr/name) *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Attr/namespaceURI) *)
  val get_namespaceURI: 'tags this -> string option [@@js.get "namespaceURI"]
  
  (**
    Returns the node document. Returns null for documents.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/ownerDocument)
  *)
  val get_ownerDocument: 'tags this -> Document.t [@@js.get "ownerDocument"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Attr/ownerElement) *)
  val get_ownerElement: 'tags this -> Element.t option [@@js.get "ownerElement"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Attr/prefix) *)
  val get_prefix: 'tags this -> string option [@@js.get "prefix"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Attr/specified) *)
  val get_specified: 'tags this -> bool [@@js.get "specified"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Attr/value) *)
  val get_value: 'tags this -> string [@@js.get "value"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Attr/value) *)
  val set_value: 'tags this -> string -> unit [@@js.set "value"]
  val create: localName:string -> name:string -> ?namespaceURI:string -> ownerDocument:Document.t -> ?ownerElement:Element.t -> ?prefix:string -> specified:bool -> value:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end
and Body : sig
  type t = [`Body] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Body]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Body]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Body ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/body) *)
  val get_body: 'tags this -> Uint8Array.t ReadableStream.t option [@@js.get "body"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/bodyUsed) *)
  val get_bodyUsed: 'tags this -> bool [@@js.get "bodyUsed"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/arrayBuffer) *)
  val arrayBuffer: 'tags this -> ArrayBuffer.t Promise.t [@@js.call "arrayBuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/blob) *)
  val blob: 'tags this -> Blob.t Promise.t [@@js.call "blob"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/formData) *)
  val formData: 'tags this -> FormData.t Promise.t [@@js.call "formData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/json) *)
  val json: 'tags this -> any Promise.t [@@js.call "json"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/text) *)
  val text: 'tags this -> string Promise.t [@@js.call "text"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
and BodyInit : sig
  type t = (ReadableStream.t_0, XMLHttpRequestBodyInit.t) union2
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  A CDATA section that can be used within XML to include extended portions of unescaped text. The symbols < and & donât need escaping as they normally do when inside a CDATA section.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CDATASection)
*)
and[@js.scope "CDATASection"] CDATASection : sig
  type t = [`CDATASection | `CharacterData | `ChildNode | `EventTarget | `Node | `NonDocumentTypeChildNode | `Slottable | `Text] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CDATASection | `CharacterData | `ChildNode | `EventTarget | `Node | `NonDocumentTypeChildNode | `Slottable | `Text]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CDATASection | `CharacterData | `ChildNode | `EventTarget | `Node | `NonDocumentTypeChildNode | `Slottable | `Text]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CDATASection ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  A single CSS rule. There are several types of rules, listed in the Type constants section below.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSRule)
*)
and[@js.scope "CSSRule"] CSSRule : sig
  type t = [`CSSRule] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSRule]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSRule]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSRule ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSRule/cssText) *)
  val get_cssText: 'tags this -> string [@@js.get "cssText"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSRule/cssText) *)
  val set_cssText: 'tags this -> string -> unit [@@js.set "cssText"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSRule/parentRule) *)
  val get_parentRule: 'tags this -> t option [@@js.get "parentRule"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSRule/parentStyleSheet) *)
  val get_parentStyleSheet: 'tags this -> CSSStyleSheet.t option [@@js.get "parentStyleSheet"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSRule/type) *)
  val get_type: 'tags this -> float [@@js.get "type"]
  val get_STYLE_RULE: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "STYLE_RULE"]
  val get_CHARSET_RULE: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "CHARSET_RULE"]
  val get_IMPORT_RULE: 'tags this -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "IMPORT_RULE"]
  val get_MEDIA_RULE: 'tags this -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "MEDIA_RULE"]
  val get_FONT_FACE_RULE: 'tags this -> ([`L_n_5[@js 5]] [@js.enum]) [@@js.get "FONT_FACE_RULE"]
  val get_PAGE_RULE: 'tags this -> ([`L_n_6[@js 6]] [@js.enum]) [@@js.get "PAGE_RULE"]
  val get_NAMESPACE_RULE: 'tags this -> ([`L_n_10[@js 10]] [@js.enum]) [@@js.get "NAMESPACE_RULE"]
  val get_KEYFRAMES_RULE: 'tags this -> ([`L_n_7[@js 7]] [@js.enum]) [@@js.get "KEYFRAMES_RULE"]
  val get_KEYFRAME_RULE: 'tags this -> ([`L_n_8[@js 8]] [@js.enum]) [@@js.get "KEYFRAME_RULE"]
  val get_SUPPORTS_RULE: 'tags this -> ([`L_n_12[@js 12]] [@js.enum]) [@@js.get "SUPPORTS_RULE"]
  val get_COUNTER_STYLE_RULE: 'tags this -> ([`L_n_11[@js 11]] [@js.enum]) [@@js.get "COUNTER_STYLE_RULE"]
  val get_FONT_FEATURE_VALUES_RULE: 'tags this -> ([`L_n_14[@js 14]] [@js.enum]) [@@js.get "FONT_FEATURE_VALUES_RULE"]
  val create: cssText:string -> ?parentRule:t -> ?parentStyleSheet:CSSStyleSheet.t -> type_:(float[@js "type"]) -> style_rule:(([`L_n_1[@js 1]] [@js.enum])[@js "STYLE_RULE"]) -> charset_rule:(([`L_n_2[@js 2]] [@js.enum])[@js "CHARSET_RULE"]) -> import_rule:(([`L_n_3[@js 3]] [@js.enum])[@js "IMPORT_RULE"]) -> media_rule:(([`L_n_4[@js 4]] [@js.enum])[@js "MEDIA_RULE"]) -> font_face_rule:(([`L_n_5[@js 5]] [@js.enum])[@js "FONT_FACE_RULE"]) -> page_rule:(([`L_n_6[@js 6]] [@js.enum])[@js "PAGE_RULE"]) -> namespace_rule:(([`L_n_10[@js 10]] [@js.enum])[@js "NAMESPACE_RULE"]) -> keyframes_rule:(([`L_n_7[@js 7]] [@js.enum])[@js "KEYFRAMES_RULE"]) -> keyframe_rule:(([`L_n_8[@js 8]] [@js.enum])[@js "KEYFRAME_RULE"]) -> supports_rule:(([`L_n_12[@js 12]] [@js.enum])[@js "SUPPORTS_RULE"]) -> counter_style_rule:(([`L_n_11[@js 11]] [@js.enum])[@js "COUNTER_STYLE_RULE"]) -> font_feature_values_rule:(([`L_n_14[@js 14]] [@js.enum])[@js "FONT_FEATURE_VALUES_RULE"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
  val style_rule: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "STYLE_RULE"]
  val charset_rule: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "CHARSET_RULE"]
  val import_rule: unit -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "IMPORT_RULE"]
  val media_rule: unit -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "MEDIA_RULE"]
  val font_face_rule: unit -> ([`L_n_5[@js 5]] [@js.enum]) [@@js.get "FONT_FACE_RULE"]
  val page_rule: unit -> ([`L_n_6[@js 6]] [@js.enum]) [@@js.get "PAGE_RULE"]
  val namespace_rule: unit -> ([`L_n_10[@js 10]] [@js.enum]) [@@js.get "NAMESPACE_RULE"]
  val keyframes_rule: unit -> ([`L_n_7[@js 7]] [@js.enum]) [@@js.get "KEYFRAMES_RULE"]
  val keyframe_rule: unit -> ([`L_n_8[@js 8]] [@js.enum]) [@@js.get "KEYFRAME_RULE"]
  val supports_rule: unit -> ([`L_n_12[@js 12]] [@js.enum]) [@@js.get "SUPPORTS_RULE"]
  val counter_style_rule: unit -> ([`L_n_11[@js 11]] [@js.enum]) [@@js.get "COUNTER_STYLE_RULE"]
  val font_feature_values_rule: unit -> ([`L_n_14[@js 14]] [@js.enum]) [@@js.get "FONT_FEATURE_VALUES_RULE"]
end

(**
  A CSSRuleList is an (indirect-modify only) array-like object containing an ordered collection of CSSRule objects.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSRuleList)
*)
and[@js.scope "CSSRuleList"] CSSRuleList : sig
  type t = [`CSSRuleList] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSRuleList]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSRuleList]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSRuleList ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> CSSRule.t IterableIterator.t *)
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSRuleList/length) *)
  val get_length: 'tags this -> float [@@js.get "length"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSRuleList/item) *)
  val item: 'tags this -> index:float -> CSSRule.t option [@@js.call "item"]
  val get: 'tags this -> float -> CSSRule.t [@@js.index_get]
  val set: 'tags this -> float -> CSSRule.t -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  An object that is a CSS declaration block, and exposes style information and various style-related methods and properties.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration)
*)
and[@js.scope "CSSStyleDeclaration"] CSSStyleDeclaration : sig
  type t = [`CSSStyleDeclaration] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSStyleDeclaration]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSStyleDeclaration]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSStyleDeclaration ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> string IterableIterator.t *)
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/accent-color) *)
  val get_accentColor: 'tags this -> string [@@js.get "accentColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/accent-color) *)
  val set_accentColor: 'tags this -> string -> unit [@@js.set "accentColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/align-content) *)
  val get_alignContent: 'tags this -> string [@@js.get "alignContent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/align-content) *)
  val set_alignContent: 'tags this -> string -> unit [@@js.set "alignContent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/align-items) *)
  val get_alignItems: 'tags this -> string [@@js.get "alignItems"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/align-items) *)
  val set_alignItems: 'tags this -> string -> unit [@@js.set "alignItems"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/align-self) *)
  val get_alignSelf: 'tags this -> string [@@js.get "alignSelf"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/align-self) *)
  val set_alignSelf: 'tags this -> string -> unit [@@js.set "alignSelf"]
  val get_alignmentBaseline: 'tags this -> string [@@js.get "alignmentBaseline"]
  val set_alignmentBaseline: 'tags this -> string -> unit [@@js.set "alignmentBaseline"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/all) *)
  val get_all: 'tags this -> string [@@js.get "all"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/all) *)
  val set_all: 'tags this -> string -> unit [@@js.set "all"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation) *)
  val get_animation: 'tags this -> string [@@js.get "animation"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation) *)
  val set_animation: 'tags this -> string -> unit [@@js.set "animation"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation-composition) *)
  val get_animationComposition: 'tags this -> string [@@js.get "animationComposition"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation-composition) *)
  val set_animationComposition: 'tags this -> string -> unit [@@js.set "animationComposition"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation-delay) *)
  val get_animationDelay: 'tags this -> string [@@js.get "animationDelay"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation-delay) *)
  val set_animationDelay: 'tags this -> string -> unit [@@js.set "animationDelay"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation-direction) *)
  val get_animationDirection: 'tags this -> string [@@js.get "animationDirection"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation-direction) *)
  val set_animationDirection: 'tags this -> string -> unit [@@js.set "animationDirection"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation-duration) *)
  val get_animationDuration: 'tags this -> string [@@js.get "animationDuration"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation-duration) *)
  val set_animationDuration: 'tags this -> string -> unit [@@js.set "animationDuration"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode) *)
  val get_animationFillMode: 'tags this -> string [@@js.get "animationFillMode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode) *)
  val set_animationFillMode: 'tags this -> string -> unit [@@js.set "animationFillMode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count) *)
  val get_animationIterationCount: 'tags this -> string [@@js.get "animationIterationCount"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count) *)
  val set_animationIterationCount: 'tags this -> string -> unit [@@js.set "animationIterationCount"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation-name) *)
  val get_animationName: 'tags this -> string [@@js.get "animationName"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation-name) *)
  val set_animationName: 'tags this -> string -> unit [@@js.set "animationName"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation-play-state) *)
  val get_animationPlayState: 'tags this -> string [@@js.get "animationPlayState"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation-play-state) *)
  val set_animationPlayState: 'tags this -> string -> unit [@@js.set "animationPlayState"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation-timing-function) *)
  val get_animationTimingFunction: 'tags this -> string [@@js.get "animationTimingFunction"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation-timing-function) *)
  val set_animationTimingFunction: 'tags this -> string -> unit [@@js.set "animationTimingFunction"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/appearance) *)
  val get_appearance: 'tags this -> string [@@js.get "appearance"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/appearance) *)
  val set_appearance: 'tags this -> string -> unit [@@js.set "appearance"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/aspect-ratio) *)
  val get_aspectRatio: 'tags this -> string [@@js.get "aspectRatio"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/aspect-ratio) *)
  val set_aspectRatio: 'tags this -> string -> unit [@@js.set "aspectRatio"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/backdrop-filter) *)
  val get_backdropFilter: 'tags this -> string [@@js.get "backdropFilter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/backdrop-filter) *)
  val set_backdropFilter: 'tags this -> string -> unit [@@js.set "backdropFilter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/backface-visibility) *)
  val get_backfaceVisibility: 'tags this -> string [@@js.get "backfaceVisibility"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/backface-visibility) *)
  val set_backfaceVisibility: 'tags this -> string -> unit [@@js.set "backfaceVisibility"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/background) *)
  val get_background: 'tags this -> string [@@js.get "background"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/background) *)
  val set_background: 'tags this -> string -> unit [@@js.set "background"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/background-attachment) *)
  val get_backgroundAttachment: 'tags this -> string [@@js.get "backgroundAttachment"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/background-attachment) *)
  val set_backgroundAttachment: 'tags this -> string -> unit [@@js.set "backgroundAttachment"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/background-blend-mode) *)
  val get_backgroundBlendMode: 'tags this -> string [@@js.get "backgroundBlendMode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/background-blend-mode) *)
  val set_backgroundBlendMode: 'tags this -> string -> unit [@@js.set "backgroundBlendMode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/background-clip) *)
  val get_backgroundClip: 'tags this -> string [@@js.get "backgroundClip"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/background-clip) *)
  val set_backgroundClip: 'tags this -> string -> unit [@@js.set "backgroundClip"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/background-color) *)
  val get_backgroundColor: 'tags this -> string [@@js.get "backgroundColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/background-color) *)
  val set_backgroundColor: 'tags this -> string -> unit [@@js.set "backgroundColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/background-image) *)
  val get_backgroundImage: 'tags this -> string [@@js.get "backgroundImage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/background-image) *)
  val set_backgroundImage: 'tags this -> string -> unit [@@js.set "backgroundImage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/background-origin) *)
  val get_backgroundOrigin: 'tags this -> string [@@js.get "backgroundOrigin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/background-origin) *)
  val set_backgroundOrigin: 'tags this -> string -> unit [@@js.set "backgroundOrigin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/background-position) *)
  val get_backgroundPosition: 'tags this -> string [@@js.get "backgroundPosition"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/background-position) *)
  val set_backgroundPosition: 'tags this -> string -> unit [@@js.set "backgroundPosition"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/background-position-x) *)
  val get_backgroundPositionX: 'tags this -> string [@@js.get "backgroundPositionX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/background-position-x) *)
  val set_backgroundPositionX: 'tags this -> string -> unit [@@js.set "backgroundPositionX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/background-position-y) *)
  val get_backgroundPositionY: 'tags this -> string [@@js.get "backgroundPositionY"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/background-position-y) *)
  val set_backgroundPositionY: 'tags this -> string -> unit [@@js.set "backgroundPositionY"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/background-repeat) *)
  val get_backgroundRepeat: 'tags this -> string [@@js.get "backgroundRepeat"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/background-repeat) *)
  val set_backgroundRepeat: 'tags this -> string -> unit [@@js.set "backgroundRepeat"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/background-size) *)
  val get_backgroundSize: 'tags this -> string [@@js.get "backgroundSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/background-size) *)
  val set_backgroundSize: 'tags this -> string -> unit [@@js.set "backgroundSize"]
  val get_baselineShift: 'tags this -> string [@@js.get "baselineShift"]
  val set_baselineShift: 'tags this -> string -> unit [@@js.set "baselineShift"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/baseline-source) *)
  val get_baselineSource: 'tags this -> string [@@js.get "baselineSource"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/baseline-source) *)
  val set_baselineSource: 'tags this -> string -> unit [@@js.set "baselineSource"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/block-size) *)
  val get_blockSize: 'tags this -> string [@@js.get "blockSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/block-size) *)
  val set_blockSize: 'tags this -> string -> unit [@@js.set "blockSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border) *)
  val get_border: 'tags this -> string [@@js.get "border"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border) *)
  val set_border: 'tags this -> string -> unit [@@js.set "border"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-block) *)
  val get_borderBlock: 'tags this -> string [@@js.get "borderBlock"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-block) *)
  val set_borderBlock: 'tags this -> string -> unit [@@js.set "borderBlock"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-block-color) *)
  val get_borderBlockColor: 'tags this -> string [@@js.get "borderBlockColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-block-color) *)
  val set_borderBlockColor: 'tags this -> string -> unit [@@js.set "borderBlockColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-block-end) *)
  val get_borderBlockEnd: 'tags this -> string [@@js.get "borderBlockEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-block-end) *)
  val set_borderBlockEnd: 'tags this -> string -> unit [@@js.set "borderBlockEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-block-end-color) *)
  val get_borderBlockEndColor: 'tags this -> string [@@js.get "borderBlockEndColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-block-end-color) *)
  val set_borderBlockEndColor: 'tags this -> string -> unit [@@js.set "borderBlockEndColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-block-end-style) *)
  val get_borderBlockEndStyle: 'tags this -> string [@@js.get "borderBlockEndStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-block-end-style) *)
  val set_borderBlockEndStyle: 'tags this -> string -> unit [@@js.set "borderBlockEndStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-block-end-width) *)
  val get_borderBlockEndWidth: 'tags this -> string [@@js.get "borderBlockEndWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-block-end-width) *)
  val set_borderBlockEndWidth: 'tags this -> string -> unit [@@js.set "borderBlockEndWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-block-start) *)
  val get_borderBlockStart: 'tags this -> string [@@js.get "borderBlockStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-block-start) *)
  val set_borderBlockStart: 'tags this -> string -> unit [@@js.set "borderBlockStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-block-start-color) *)
  val get_borderBlockStartColor: 'tags this -> string [@@js.get "borderBlockStartColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-block-start-color) *)
  val set_borderBlockStartColor: 'tags this -> string -> unit [@@js.set "borderBlockStartColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-block-start-style) *)
  val get_borderBlockStartStyle: 'tags this -> string [@@js.get "borderBlockStartStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-block-start-style) *)
  val set_borderBlockStartStyle: 'tags this -> string -> unit [@@js.set "borderBlockStartStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-block-start-width) *)
  val get_borderBlockStartWidth: 'tags this -> string [@@js.get "borderBlockStartWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-block-start-width) *)
  val set_borderBlockStartWidth: 'tags this -> string -> unit [@@js.set "borderBlockStartWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-block-style) *)
  val get_borderBlockStyle: 'tags this -> string [@@js.get "borderBlockStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-block-style) *)
  val set_borderBlockStyle: 'tags this -> string -> unit [@@js.set "borderBlockStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-block-width) *)
  val get_borderBlockWidth: 'tags this -> string [@@js.get "borderBlockWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-block-width) *)
  val set_borderBlockWidth: 'tags this -> string -> unit [@@js.set "borderBlockWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-bottom) *)
  val get_borderBottom: 'tags this -> string [@@js.get "borderBottom"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-bottom) *)
  val set_borderBottom: 'tags this -> string -> unit [@@js.set "borderBottom"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-bottom-color) *)
  val get_borderBottomColor: 'tags this -> string [@@js.get "borderBottomColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-bottom-color) *)
  val set_borderBottomColor: 'tags this -> string -> unit [@@js.set "borderBottomColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius) *)
  val get_borderBottomLeftRadius: 'tags this -> string [@@js.get "borderBottomLeftRadius"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius) *)
  val set_borderBottomLeftRadius: 'tags this -> string -> unit [@@js.set "borderBottomLeftRadius"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius) *)
  val get_borderBottomRightRadius: 'tags this -> string [@@js.get "borderBottomRightRadius"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius) *)
  val set_borderBottomRightRadius: 'tags this -> string -> unit [@@js.set "borderBottomRightRadius"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-bottom-style) *)
  val get_borderBottomStyle: 'tags this -> string [@@js.get "borderBottomStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-bottom-style) *)
  val set_borderBottomStyle: 'tags this -> string -> unit [@@js.set "borderBottomStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-bottom-width) *)
  val get_borderBottomWidth: 'tags this -> string [@@js.get "borderBottomWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-bottom-width) *)
  val set_borderBottomWidth: 'tags this -> string -> unit [@@js.set "borderBottomWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-collapse) *)
  val get_borderCollapse: 'tags this -> string [@@js.get "borderCollapse"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-collapse) *)
  val set_borderCollapse: 'tags this -> string -> unit [@@js.set "borderCollapse"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-color) *)
  val get_borderColor: 'tags this -> string [@@js.get "borderColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-color) *)
  val set_borderColor: 'tags this -> string -> unit [@@js.set "borderColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-end-end-radius) *)
  val get_borderEndEndRadius: 'tags this -> string [@@js.get "borderEndEndRadius"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-end-end-radius) *)
  val set_borderEndEndRadius: 'tags this -> string -> unit [@@js.set "borderEndEndRadius"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-end-start-radius) *)
  val get_borderEndStartRadius: 'tags this -> string [@@js.get "borderEndStartRadius"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-end-start-radius) *)
  val set_borderEndStartRadius: 'tags this -> string -> unit [@@js.set "borderEndStartRadius"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-image) *)
  val get_borderImage: 'tags this -> string [@@js.get "borderImage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-image) *)
  val set_borderImage: 'tags this -> string -> unit [@@js.set "borderImage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-image-outset) *)
  val get_borderImageOutset: 'tags this -> string [@@js.get "borderImageOutset"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-image-outset) *)
  val set_borderImageOutset: 'tags this -> string -> unit [@@js.set "borderImageOutset"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-image-repeat) *)
  val get_borderImageRepeat: 'tags this -> string [@@js.get "borderImageRepeat"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-image-repeat) *)
  val set_borderImageRepeat: 'tags this -> string -> unit [@@js.set "borderImageRepeat"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-image-slice) *)
  val get_borderImageSlice: 'tags this -> string [@@js.get "borderImageSlice"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-image-slice) *)
  val set_borderImageSlice: 'tags this -> string -> unit [@@js.set "borderImageSlice"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-image-source) *)
  val get_borderImageSource: 'tags this -> string [@@js.get "borderImageSource"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-image-source) *)
  val set_borderImageSource: 'tags this -> string -> unit [@@js.set "borderImageSource"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-image-width) *)
  val get_borderImageWidth: 'tags this -> string [@@js.get "borderImageWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-image-width) *)
  val set_borderImageWidth: 'tags this -> string -> unit [@@js.set "borderImageWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-inline) *)
  val get_borderInline: 'tags this -> string [@@js.get "borderInline"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-inline) *)
  val set_borderInline: 'tags this -> string -> unit [@@js.set "borderInline"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-inline-color) *)
  val get_borderInlineColor: 'tags this -> string [@@js.get "borderInlineColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-inline-color) *)
  val set_borderInlineColor: 'tags this -> string -> unit [@@js.set "borderInlineColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-inline-end) *)
  val get_borderInlineEnd: 'tags this -> string [@@js.get "borderInlineEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-inline-end) *)
  val set_borderInlineEnd: 'tags this -> string -> unit [@@js.set "borderInlineEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-inline-end-color) *)
  val get_borderInlineEndColor: 'tags this -> string [@@js.get "borderInlineEndColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-inline-end-color) *)
  val set_borderInlineEndColor: 'tags this -> string -> unit [@@js.set "borderInlineEndColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-inline-end-style) *)
  val get_borderInlineEndStyle: 'tags this -> string [@@js.get "borderInlineEndStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-inline-end-style) *)
  val set_borderInlineEndStyle: 'tags this -> string -> unit [@@js.set "borderInlineEndStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-inline-end-width) *)
  val get_borderInlineEndWidth: 'tags this -> string [@@js.get "borderInlineEndWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-inline-end-width) *)
  val set_borderInlineEndWidth: 'tags this -> string -> unit [@@js.set "borderInlineEndWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-inline-start) *)
  val get_borderInlineStart: 'tags this -> string [@@js.get "borderInlineStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-inline-start) *)
  val set_borderInlineStart: 'tags this -> string -> unit [@@js.set "borderInlineStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-inline-start-color) *)
  val get_borderInlineStartColor: 'tags this -> string [@@js.get "borderInlineStartColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-inline-start-color) *)
  val set_borderInlineStartColor: 'tags this -> string -> unit [@@js.set "borderInlineStartColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-inline-start-style) *)
  val get_borderInlineStartStyle: 'tags this -> string [@@js.get "borderInlineStartStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-inline-start-style) *)
  val set_borderInlineStartStyle: 'tags this -> string -> unit [@@js.set "borderInlineStartStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-inline-start-width) *)
  val get_borderInlineStartWidth: 'tags this -> string [@@js.get "borderInlineStartWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-inline-start-width) *)
  val set_borderInlineStartWidth: 'tags this -> string -> unit [@@js.set "borderInlineStartWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-inline-style) *)
  val get_borderInlineStyle: 'tags this -> string [@@js.get "borderInlineStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-inline-style) *)
  val set_borderInlineStyle: 'tags this -> string -> unit [@@js.set "borderInlineStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-inline-width) *)
  val get_borderInlineWidth: 'tags this -> string [@@js.get "borderInlineWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-inline-width) *)
  val set_borderInlineWidth: 'tags this -> string -> unit [@@js.set "borderInlineWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-left) *)
  val get_borderLeft: 'tags this -> string [@@js.get "borderLeft"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-left) *)
  val set_borderLeft: 'tags this -> string -> unit [@@js.set "borderLeft"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-left-color) *)
  val get_borderLeftColor: 'tags this -> string [@@js.get "borderLeftColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-left-color) *)
  val set_borderLeftColor: 'tags this -> string -> unit [@@js.set "borderLeftColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-left-style) *)
  val get_borderLeftStyle: 'tags this -> string [@@js.get "borderLeftStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-left-style) *)
  val set_borderLeftStyle: 'tags this -> string -> unit [@@js.set "borderLeftStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-left-width) *)
  val get_borderLeftWidth: 'tags this -> string [@@js.get "borderLeftWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-left-width) *)
  val set_borderLeftWidth: 'tags this -> string -> unit [@@js.set "borderLeftWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-radius) *)
  val get_borderRadius: 'tags this -> string [@@js.get "borderRadius"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-radius) *)
  val set_borderRadius: 'tags this -> string -> unit [@@js.set "borderRadius"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-right) *)
  val get_borderRight: 'tags this -> string [@@js.get "borderRight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-right) *)
  val set_borderRight: 'tags this -> string -> unit [@@js.set "borderRight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-right-color) *)
  val get_borderRightColor: 'tags this -> string [@@js.get "borderRightColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-right-color) *)
  val set_borderRightColor: 'tags this -> string -> unit [@@js.set "borderRightColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-right-style) *)
  val get_borderRightStyle: 'tags this -> string [@@js.get "borderRightStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-right-style) *)
  val set_borderRightStyle: 'tags this -> string -> unit [@@js.set "borderRightStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-right-width) *)
  val get_borderRightWidth: 'tags this -> string [@@js.get "borderRightWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-right-width) *)
  val set_borderRightWidth: 'tags this -> string -> unit [@@js.set "borderRightWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-spacing) *)
  val get_borderSpacing: 'tags this -> string [@@js.get "borderSpacing"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-spacing) *)
  val set_borderSpacing: 'tags this -> string -> unit [@@js.set "borderSpacing"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-start-end-radius) *)
  val get_borderStartEndRadius: 'tags this -> string [@@js.get "borderStartEndRadius"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-start-end-radius) *)
  val set_borderStartEndRadius: 'tags this -> string -> unit [@@js.set "borderStartEndRadius"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-start-start-radius) *)
  val get_borderStartStartRadius: 'tags this -> string [@@js.get "borderStartStartRadius"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-start-start-radius) *)
  val set_borderStartStartRadius: 'tags this -> string -> unit [@@js.set "borderStartStartRadius"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-style) *)
  val get_borderStyle: 'tags this -> string [@@js.get "borderStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-style) *)
  val set_borderStyle: 'tags this -> string -> unit [@@js.set "borderStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-top) *)
  val get_borderTop: 'tags this -> string [@@js.get "borderTop"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-top) *)
  val set_borderTop: 'tags this -> string -> unit [@@js.set "borderTop"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-top-color) *)
  val get_borderTopColor: 'tags this -> string [@@js.get "borderTopColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-top-color) *)
  val set_borderTopColor: 'tags this -> string -> unit [@@js.set "borderTopColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius) *)
  val get_borderTopLeftRadius: 'tags this -> string [@@js.get "borderTopLeftRadius"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius) *)
  val set_borderTopLeftRadius: 'tags this -> string -> unit [@@js.set "borderTopLeftRadius"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius) *)
  val get_borderTopRightRadius: 'tags this -> string [@@js.get "borderTopRightRadius"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius) *)
  val set_borderTopRightRadius: 'tags this -> string -> unit [@@js.set "borderTopRightRadius"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-top-style) *)
  val get_borderTopStyle: 'tags this -> string [@@js.get "borderTopStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-top-style) *)
  val set_borderTopStyle: 'tags this -> string -> unit [@@js.set "borderTopStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-top-width) *)
  val get_borderTopWidth: 'tags this -> string [@@js.get "borderTopWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-top-width) *)
  val set_borderTopWidth: 'tags this -> string -> unit [@@js.set "borderTopWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-width) *)
  val get_borderWidth: 'tags this -> string [@@js.get "borderWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-width) *)
  val set_borderWidth: 'tags this -> string -> unit [@@js.set "borderWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/bottom) *)
  val get_bottom: 'tags this -> string [@@js.get "bottom"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/bottom) *)
  val set_bottom: 'tags this -> string -> unit [@@js.set "bottom"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/box-shadow) *)
  val get_boxShadow: 'tags this -> string [@@js.get "boxShadow"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/box-shadow) *)
  val set_boxShadow: 'tags this -> string -> unit [@@js.set "boxShadow"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/box-sizing) *)
  val get_boxSizing: 'tags this -> string [@@js.get "boxSizing"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/box-sizing) *)
  val set_boxSizing: 'tags this -> string -> unit [@@js.set "boxSizing"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/break-after) *)
  val get_breakAfter: 'tags this -> string [@@js.get "breakAfter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/break-after) *)
  val set_breakAfter: 'tags this -> string -> unit [@@js.set "breakAfter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/break-before) *)
  val get_breakBefore: 'tags this -> string [@@js.get "breakBefore"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/break-before) *)
  val set_breakBefore: 'tags this -> string -> unit [@@js.set "breakBefore"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/break-inside) *)
  val get_breakInside: 'tags this -> string [@@js.get "breakInside"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/break-inside) *)
  val set_breakInside: 'tags this -> string -> unit [@@js.set "breakInside"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/caption-side) *)
  val get_captionSide: 'tags this -> string [@@js.get "captionSide"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/caption-side) *)
  val set_captionSide: 'tags this -> string -> unit [@@js.set "captionSide"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/caret-color) *)
  val get_caretColor: 'tags this -> string [@@js.get "caretColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/caret-color) *)
  val set_caretColor: 'tags this -> string -> unit [@@js.set "caretColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/clear) *)
  val get_clear: 'tags this -> string [@@js.get "clear"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/clear) *)
  val set_clear: 'tags this -> string -> unit [@@js.set "clear"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/clip) *)
  val get_clip: 'tags this -> string [@@js.get "clip"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/clip) *)
  val set_clip: 'tags this -> string -> unit [@@js.set "clip"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/clip-path) *)
  val get_clipPath: 'tags this -> string [@@js.get "clipPath"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/clip-path) *)
  val set_clipPath: 'tags this -> string -> unit [@@js.set "clipPath"]
  val get_clipRule: 'tags this -> string [@@js.get "clipRule"]
  val set_clipRule: 'tags this -> string -> unit [@@js.set "clipRule"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/color) *)
  val get_color: 'tags this -> string [@@js.get "color"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/color) *)
  val set_color: 'tags this -> string -> unit [@@js.set "color"]
  val get_colorInterpolation: 'tags this -> string [@@js.get "colorInterpolation"]
  val set_colorInterpolation: 'tags this -> string -> unit [@@js.set "colorInterpolation"]
  val get_colorInterpolationFilters: 'tags this -> string [@@js.get "colorInterpolationFilters"]
  val set_colorInterpolationFilters: 'tags this -> string -> unit [@@js.set "colorInterpolationFilters"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/color-scheme) *)
  val get_colorScheme: 'tags this -> string [@@js.get "colorScheme"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/color-scheme) *)
  val set_colorScheme: 'tags this -> string -> unit [@@js.set "colorScheme"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/column-count) *)
  val get_columnCount: 'tags this -> string [@@js.get "columnCount"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/column-count) *)
  val set_columnCount: 'tags this -> string -> unit [@@js.set "columnCount"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/column-fill) *)
  val get_columnFill: 'tags this -> string [@@js.get "columnFill"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/column-fill) *)
  val set_columnFill: 'tags this -> string -> unit [@@js.set "columnFill"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/column-gap) *)
  val get_columnGap: 'tags this -> string [@@js.get "columnGap"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/column-gap) *)
  val set_columnGap: 'tags this -> string -> unit [@@js.set "columnGap"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/column-rule) *)
  val get_columnRule: 'tags this -> string [@@js.get "columnRule"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/column-rule) *)
  val set_columnRule: 'tags this -> string -> unit [@@js.set "columnRule"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/column-rule-color) *)
  val get_columnRuleColor: 'tags this -> string [@@js.get "columnRuleColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/column-rule-color) *)
  val set_columnRuleColor: 'tags this -> string -> unit [@@js.set "columnRuleColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/column-rule-style) *)
  val get_columnRuleStyle: 'tags this -> string [@@js.get "columnRuleStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/column-rule-style) *)
  val set_columnRuleStyle: 'tags this -> string -> unit [@@js.set "columnRuleStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/column-rule-width) *)
  val get_columnRuleWidth: 'tags this -> string [@@js.get "columnRuleWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/column-rule-width) *)
  val set_columnRuleWidth: 'tags this -> string -> unit [@@js.set "columnRuleWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/column-span) *)
  val get_columnSpan: 'tags this -> string [@@js.get "columnSpan"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/column-span) *)
  val set_columnSpan: 'tags this -> string -> unit [@@js.set "columnSpan"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/column-width) *)
  val get_columnWidth: 'tags this -> string [@@js.get "columnWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/column-width) *)
  val set_columnWidth: 'tags this -> string -> unit [@@js.set "columnWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/columns) *)
  val get_columns: 'tags this -> string [@@js.get "columns"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/columns) *)
  val set_columns: 'tags this -> string -> unit [@@js.set "columns"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/contain) *)
  val get_contain: 'tags this -> string [@@js.get "contain"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/contain) *)
  val set_contain: 'tags this -> string -> unit [@@js.set "contain"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-contain-intrinsic-block-size) *)
  val get_containIntrinsicBlockSize: 'tags this -> string [@@js.get "containIntrinsicBlockSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-contain-intrinsic-block-size) *)
  val set_containIntrinsicBlockSize: 'tags this -> string -> unit [@@js.set "containIntrinsicBlockSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-height) *)
  val get_containIntrinsicHeight: 'tags this -> string [@@js.get "containIntrinsicHeight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-height) *)
  val set_containIntrinsicHeight: 'tags this -> string -> unit [@@js.set "containIntrinsicHeight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-contain-intrinsic-inline-size) *)
  val get_containIntrinsicInlineSize: 'tags this -> string [@@js.get "containIntrinsicInlineSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-contain-intrinsic-inline-size) *)
  val set_containIntrinsicInlineSize: 'tags this -> string -> unit [@@js.set "containIntrinsicInlineSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-size) *)
  val get_containIntrinsicSize: 'tags this -> string [@@js.get "containIntrinsicSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-size) *)
  val set_containIntrinsicSize: 'tags this -> string -> unit [@@js.set "containIntrinsicSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-width) *)
  val get_containIntrinsicWidth: 'tags this -> string [@@js.get "containIntrinsicWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-width) *)
  val set_containIntrinsicWidth: 'tags this -> string -> unit [@@js.set "containIntrinsicWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/container) *)
  val get_container: 'tags this -> string [@@js.get "container"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/container) *)
  val set_container: 'tags this -> string -> unit [@@js.set "container"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/container-name) *)
  val get_containerName: 'tags this -> string [@@js.get "containerName"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/container-name) *)
  val set_containerName: 'tags this -> string -> unit [@@js.set "containerName"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/container-type) *)
  val get_containerType: 'tags this -> string [@@js.get "containerType"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/container-type) *)
  val set_containerType: 'tags this -> string -> unit [@@js.set "containerType"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/content) *)
  val get_content: 'tags this -> string [@@js.get "content"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/content) *)
  val set_content: 'tags this -> string -> unit [@@js.set "content"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/counter-increment) *)
  val get_counterIncrement: 'tags this -> string [@@js.get "counterIncrement"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/counter-increment) *)
  val set_counterIncrement: 'tags this -> string -> unit [@@js.set "counterIncrement"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/counter-reset) *)
  val get_counterReset: 'tags this -> string [@@js.get "counterReset"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/counter-reset) *)
  val set_counterReset: 'tags this -> string -> unit [@@js.set "counterReset"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/counter-set) *)
  val get_counterSet: 'tags this -> string [@@js.get "counterSet"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/counter-set) *)
  val set_counterSet: 'tags this -> string -> unit [@@js.set "counterSet"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/cssFloat) *)
  val get_cssFloat: 'tags this -> string [@@js.get "cssFloat"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/cssFloat) *)
  val set_cssFloat: 'tags this -> string -> unit [@@js.set "cssFloat"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/cssText) *)
  val get_cssText: 'tags this -> string [@@js.get "cssText"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/cssText) *)
  val set_cssText: 'tags this -> string -> unit [@@js.set "cssText"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/cursor) *)
  val get_cursor: 'tags this -> string [@@js.get "cursor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/cursor) *)
  val set_cursor: 'tags this -> string -> unit [@@js.set "cursor"]
  val get_cx: 'tags this -> string [@@js.get "cx"]
  val set_cx: 'tags this -> string -> unit [@@js.set "cx"]
  val get_cy: 'tags this -> string [@@js.get "cy"]
  val set_cy: 'tags this -> string -> unit [@@js.set "cy"]
  val get_d: 'tags this -> string [@@js.get "d"]
  val set_d: 'tags this -> string -> unit [@@js.set "d"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/direction) *)
  val get_direction: 'tags this -> string [@@js.get "direction"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/direction) *)
  val set_direction: 'tags this -> string -> unit [@@js.set "direction"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/display) *)
  val get_display: 'tags this -> string [@@js.get "display"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/display) *)
  val set_display: 'tags this -> string -> unit [@@js.set "display"]
  val get_dominantBaseline: 'tags this -> string [@@js.get "dominantBaseline"]
  val set_dominantBaseline: 'tags this -> string -> unit [@@js.set "dominantBaseline"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/empty-cells) *)
  val get_emptyCells: 'tags this -> string [@@js.get "emptyCells"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/empty-cells) *)
  val set_emptyCells: 'tags this -> string -> unit [@@js.set "emptyCells"]
  val get_fill: 'tags this -> string [@@js.get "fill"]
  val set_fill: 'tags this -> string -> unit [@@js.set "fill"]
  val get_fillOpacity: 'tags this -> string [@@js.get "fillOpacity"]
  val set_fillOpacity: 'tags this -> string -> unit [@@js.set "fillOpacity"]
  val get_fillRule: 'tags this -> string [@@js.get "fillRule"]
  val set_fillRule: 'tags this -> string -> unit [@@js.set "fillRule"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/filter) *)
  val get_filter: 'tags this -> string [@@js.get "filter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/filter) *)
  val set_filter: 'tags this -> string -> unit [@@js.set "filter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/flex) *)
  val get_flex: 'tags this -> string [@@js.get "flex"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/flex) *)
  val set_flex: 'tags this -> string -> unit [@@js.set "flex"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/flex-basis) *)
  val get_flexBasis: 'tags this -> string [@@js.get "flexBasis"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/flex-basis) *)
  val set_flexBasis: 'tags this -> string -> unit [@@js.set "flexBasis"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/flex-direction) *)
  val get_flexDirection: 'tags this -> string [@@js.get "flexDirection"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/flex-direction) *)
  val set_flexDirection: 'tags this -> string -> unit [@@js.set "flexDirection"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/flex-flow) *)
  val get_flexFlow: 'tags this -> string [@@js.get "flexFlow"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/flex-flow) *)
  val set_flexFlow: 'tags this -> string -> unit [@@js.set "flexFlow"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/flex-grow) *)
  val get_flexGrow: 'tags this -> string [@@js.get "flexGrow"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/flex-grow) *)
  val set_flexGrow: 'tags this -> string -> unit [@@js.set "flexGrow"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/flex-shrink) *)
  val get_flexShrink: 'tags this -> string [@@js.get "flexShrink"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/flex-shrink) *)
  val set_flexShrink: 'tags this -> string -> unit [@@js.set "flexShrink"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/flex-wrap) *)
  val get_flexWrap: 'tags this -> string [@@js.get "flexWrap"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/flex-wrap) *)
  val set_flexWrap: 'tags this -> string -> unit [@@js.set "flexWrap"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/float) *)
  val get_float: 'tags this -> string [@@js.get "float"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/float) *)
  val set_float: 'tags this -> string -> unit [@@js.set "float"]
  val get_floodColor: 'tags this -> string [@@js.get "floodColor"]
  val set_floodColor: 'tags this -> string -> unit [@@js.set "floodColor"]
  val get_floodOpacity: 'tags this -> string [@@js.get "floodOpacity"]
  val set_floodOpacity: 'tags this -> string -> unit [@@js.set "floodOpacity"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font) *)
  val get_font: 'tags this -> string [@@js.get "font"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font) *)
  val set_font: 'tags this -> string -> unit [@@js.set "font"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-family) *)
  val get_fontFamily: 'tags this -> string [@@js.get "fontFamily"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-family) *)
  val set_fontFamily: 'tags this -> string -> unit [@@js.set "fontFamily"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-feature-settings) *)
  val get_fontFeatureSettings: 'tags this -> string [@@js.get "fontFeatureSettings"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-feature-settings) *)
  val set_fontFeatureSettings: 'tags this -> string -> unit [@@js.set "fontFeatureSettings"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-kerning) *)
  val get_fontKerning: 'tags this -> string [@@js.get "fontKerning"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-kerning) *)
  val set_fontKerning: 'tags this -> string -> unit [@@js.set "fontKerning"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-optical-sizing) *)
  val get_fontOpticalSizing: 'tags this -> string [@@js.get "fontOpticalSizing"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-optical-sizing) *)
  val set_fontOpticalSizing: 'tags this -> string -> unit [@@js.set "fontOpticalSizing"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-palette) *)
  val get_fontPalette: 'tags this -> string [@@js.get "fontPalette"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-palette) *)
  val set_fontPalette: 'tags this -> string -> unit [@@js.set "fontPalette"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-size) *)
  val get_fontSize: 'tags this -> string [@@js.get "fontSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-size) *)
  val set_fontSize: 'tags this -> string -> unit [@@js.set "fontSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-size-adjust) *)
  val get_fontSizeAdjust: 'tags this -> string [@@js.get "fontSizeAdjust"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-size-adjust) *)
  val set_fontSizeAdjust: 'tags this -> string -> unit [@@js.set "fontSizeAdjust"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-stretch) *)
  val get_fontStretch: 'tags this -> string [@@js.get "fontStretch"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-stretch) *)
  val set_fontStretch: 'tags this -> string -> unit [@@js.set "fontStretch"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-style) *)
  val get_fontStyle: 'tags this -> string [@@js.get "fontStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-style) *)
  val set_fontStyle: 'tags this -> string -> unit [@@js.set "fontStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-synthesis) *)
  val get_fontSynthesis: 'tags this -> string [@@js.get "fontSynthesis"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-synthesis) *)
  val set_fontSynthesis: 'tags this -> string -> unit [@@js.set "fontSynthesis"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-synthesis-small-caps) *)
  val get_fontSynthesisSmallCaps: 'tags this -> string [@@js.get "fontSynthesisSmallCaps"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-synthesis-small-caps) *)
  val set_fontSynthesisSmallCaps: 'tags this -> string -> unit [@@js.set "fontSynthesisSmallCaps"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-synthesis-style) *)
  val get_fontSynthesisStyle: 'tags this -> string [@@js.get "fontSynthesisStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-synthesis-style) *)
  val set_fontSynthesisStyle: 'tags this -> string -> unit [@@js.set "fontSynthesisStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-synthesis-weight) *)
  val get_fontSynthesisWeight: 'tags this -> string [@@js.get "fontSynthesisWeight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-synthesis-weight) *)
  val set_fontSynthesisWeight: 'tags this -> string -> unit [@@js.set "fontSynthesisWeight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-variant) *)
  val get_fontVariant: 'tags this -> string [@@js.get "fontVariant"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-variant) *)
  val set_fontVariant: 'tags this -> string -> unit [@@js.set "fontVariant"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-variant-alternates) *)
  val get_fontVariantAlternates: 'tags this -> string [@@js.get "fontVariantAlternates"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-variant-alternates) *)
  val set_fontVariantAlternates: 'tags this -> string -> unit [@@js.set "fontVariantAlternates"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-variant-caps) *)
  val get_fontVariantCaps: 'tags this -> string [@@js.get "fontVariantCaps"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-variant-caps) *)
  val set_fontVariantCaps: 'tags this -> string -> unit [@@js.set "fontVariantCaps"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-variant-east-asian) *)
  val get_fontVariantEastAsian: 'tags this -> string [@@js.get "fontVariantEastAsian"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-variant-east-asian) *)
  val set_fontVariantEastAsian: 'tags this -> string -> unit [@@js.set "fontVariantEastAsian"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-variant-ligatures) *)
  val get_fontVariantLigatures: 'tags this -> string [@@js.get "fontVariantLigatures"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-variant-ligatures) *)
  val set_fontVariantLigatures: 'tags this -> string -> unit [@@js.set "fontVariantLigatures"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-variant-numeric) *)
  val get_fontVariantNumeric: 'tags this -> string [@@js.get "fontVariantNumeric"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-variant-numeric) *)
  val set_fontVariantNumeric: 'tags this -> string -> unit [@@js.set "fontVariantNumeric"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-variant-position) *)
  val get_fontVariantPosition: 'tags this -> string [@@js.get "fontVariantPosition"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-variant-position) *)
  val set_fontVariantPosition: 'tags this -> string -> unit [@@js.set "fontVariantPosition"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-variation-settings) *)
  val get_fontVariationSettings: 'tags this -> string [@@js.get "fontVariationSettings"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-variation-settings) *)
  val set_fontVariationSettings: 'tags this -> string -> unit [@@js.set "fontVariationSettings"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-weight) *)
  val get_fontWeight: 'tags this -> string [@@js.get "fontWeight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/font-weight) *)
  val set_fontWeight: 'tags this -> string -> unit [@@js.set "fontWeight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/forced-color-adjust) *)
  val get_forcedColorAdjust: 'tags this -> string [@@js.get "forcedColorAdjust"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/forced-color-adjust) *)
  val set_forcedColorAdjust: 'tags this -> string -> unit [@@js.set "forcedColorAdjust"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/gap) *)
  val get_gap: 'tags this -> string [@@js.get "gap"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/gap) *)
  val set_gap: 'tags this -> string -> unit [@@js.set "gap"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/grid) *)
  val get_grid: 'tags this -> string [@@js.get "grid"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/grid) *)
  val set_grid: 'tags this -> string -> unit [@@js.set "grid"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/grid-area) *)
  val get_gridArea: 'tags this -> string [@@js.get "gridArea"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/grid-area) *)
  val set_gridArea: 'tags this -> string -> unit [@@js.set "gridArea"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/grid-auto-columns) *)
  val get_gridAutoColumns: 'tags this -> string [@@js.get "gridAutoColumns"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/grid-auto-columns) *)
  val set_gridAutoColumns: 'tags this -> string -> unit [@@js.set "gridAutoColumns"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/grid-auto-flow) *)
  val get_gridAutoFlow: 'tags this -> string [@@js.get "gridAutoFlow"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/grid-auto-flow) *)
  val set_gridAutoFlow: 'tags this -> string -> unit [@@js.set "gridAutoFlow"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/grid-auto-rows) *)
  val get_gridAutoRows: 'tags this -> string [@@js.get "gridAutoRows"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/grid-auto-rows) *)
  val set_gridAutoRows: 'tags this -> string -> unit [@@js.set "gridAutoRows"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/grid-column) *)
  val get_gridColumn: 'tags this -> string [@@js.get "gridColumn"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/grid-column) *)
  val set_gridColumn: 'tags this -> string -> unit [@@js.set "gridColumn"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/grid-column-end) *)
  val get_gridColumnEnd: 'tags this -> string [@@js.get "gridColumnEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/grid-column-end) *)
  val set_gridColumnEnd: 'tags this -> string -> unit [@@js.set "gridColumnEnd"]
  
  (** @deprecated This is a legacy alias of `columnGap`. *)
  val get_gridColumnGap: 'tags this -> string [@@js.get "gridColumnGap"]
  
  (** @deprecated This is a legacy alias of `columnGap`. *)
  val set_gridColumnGap: 'tags this -> string -> unit [@@js.set "gridColumnGap"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/grid-column-start) *)
  val get_gridColumnStart: 'tags this -> string [@@js.get "gridColumnStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/grid-column-start) *)
  val set_gridColumnStart: 'tags this -> string -> unit [@@js.set "gridColumnStart"]
  
  (** @deprecated This is a legacy alias of `gap`. *)
  val get_gridGap: 'tags this -> string [@@js.get "gridGap"]
  
  (** @deprecated This is a legacy alias of `gap`. *)
  val set_gridGap: 'tags this -> string -> unit [@@js.set "gridGap"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/grid-row) *)
  val get_gridRow: 'tags this -> string [@@js.get "gridRow"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/grid-row) *)
  val set_gridRow: 'tags this -> string -> unit [@@js.set "gridRow"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/grid-row-end) *)
  val get_gridRowEnd: 'tags this -> string [@@js.get "gridRowEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/grid-row-end) *)
  val set_gridRowEnd: 'tags this -> string -> unit [@@js.set "gridRowEnd"]
  
  (** @deprecated This is a legacy alias of `rowGap`. *)
  val get_gridRowGap: 'tags this -> string [@@js.get "gridRowGap"]
  
  (** @deprecated This is a legacy alias of `rowGap`. *)
  val set_gridRowGap: 'tags this -> string -> unit [@@js.set "gridRowGap"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/grid-row-start) *)
  val get_gridRowStart: 'tags this -> string [@@js.get "gridRowStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/grid-row-start) *)
  val set_gridRowStart: 'tags this -> string -> unit [@@js.set "gridRowStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/grid-template) *)
  val get_gridTemplate: 'tags this -> string [@@js.get "gridTemplate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/grid-template) *)
  val set_gridTemplate: 'tags this -> string -> unit [@@js.set "gridTemplate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/grid-template-areas) *)
  val get_gridTemplateAreas: 'tags this -> string [@@js.get "gridTemplateAreas"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/grid-template-areas) *)
  val set_gridTemplateAreas: 'tags this -> string -> unit [@@js.set "gridTemplateAreas"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/grid-template-columns) *)
  val get_gridTemplateColumns: 'tags this -> string [@@js.get "gridTemplateColumns"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/grid-template-columns) *)
  val set_gridTemplateColumns: 'tags this -> string -> unit [@@js.set "gridTemplateColumns"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/grid-template-rows) *)
  val get_gridTemplateRows: 'tags this -> string [@@js.get "gridTemplateRows"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/grid-template-rows) *)
  val set_gridTemplateRows: 'tags this -> string -> unit [@@js.set "gridTemplateRows"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/height) *)
  val get_height: 'tags this -> string [@@js.get "height"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/height) *)
  val set_height: 'tags this -> string -> unit [@@js.set "height"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/hyphenate-character) *)
  val get_hyphenateCharacter: 'tags this -> string [@@js.get "hyphenateCharacter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/hyphenate-character) *)
  val set_hyphenateCharacter: 'tags this -> string -> unit [@@js.set "hyphenateCharacter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/hyphens) *)
  val get_hyphens: 'tags this -> string [@@js.get "hyphens"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/hyphens) *)
  val set_hyphens: 'tags this -> string -> unit [@@js.set "hyphens"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/image-orientation) *)
  val get_imageOrientation: 'tags this -> string [@@js.get "imageOrientation"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/image-orientation) *)
  val set_imageOrientation: 'tags this -> string -> unit [@@js.set "imageOrientation"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/image-rendering) *)
  val get_imageRendering: 'tags this -> string [@@js.get "imageRendering"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/image-rendering) *)
  val set_imageRendering: 'tags this -> string -> unit [@@js.set "imageRendering"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/inline-size) *)
  val get_inlineSize: 'tags this -> string [@@js.get "inlineSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/inline-size) *)
  val set_inlineSize: 'tags this -> string -> unit [@@js.set "inlineSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/inset) *)
  val get_inset: 'tags this -> string [@@js.get "inset"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/inset) *)
  val set_inset: 'tags this -> string -> unit [@@js.set "inset"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/inset-block) *)
  val get_insetBlock: 'tags this -> string [@@js.get "insetBlock"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/inset-block) *)
  val set_insetBlock: 'tags this -> string -> unit [@@js.set "insetBlock"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/inset-block-end) *)
  val get_insetBlockEnd: 'tags this -> string [@@js.get "insetBlockEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/inset-block-end) *)
  val set_insetBlockEnd: 'tags this -> string -> unit [@@js.set "insetBlockEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/inset-block-start) *)
  val get_insetBlockStart: 'tags this -> string [@@js.get "insetBlockStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/inset-block-start) *)
  val set_insetBlockStart: 'tags this -> string -> unit [@@js.set "insetBlockStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/inset-inline) *)
  val get_insetInline: 'tags this -> string [@@js.get "insetInline"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/inset-inline) *)
  val set_insetInline: 'tags this -> string -> unit [@@js.set "insetInline"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/inset-inline-end) *)
  val get_insetInlineEnd: 'tags this -> string [@@js.get "insetInlineEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/inset-inline-end) *)
  val set_insetInlineEnd: 'tags this -> string -> unit [@@js.set "insetInlineEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/inset-inline-start) *)
  val get_insetInlineStart: 'tags this -> string [@@js.get "insetInlineStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/inset-inline-start) *)
  val set_insetInlineStart: 'tags this -> string -> unit [@@js.set "insetInlineStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/isolation) *)
  val get_isolation: 'tags this -> string [@@js.get "isolation"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/isolation) *)
  val set_isolation: 'tags this -> string -> unit [@@js.set "isolation"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/justify-content) *)
  val get_justifyContent: 'tags this -> string [@@js.get "justifyContent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/justify-content) *)
  val set_justifyContent: 'tags this -> string -> unit [@@js.set "justifyContent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/justify-items) *)
  val get_justifyItems: 'tags this -> string [@@js.get "justifyItems"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/justify-items) *)
  val set_justifyItems: 'tags this -> string -> unit [@@js.set "justifyItems"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/justify-self) *)
  val get_justifySelf: 'tags this -> string [@@js.get "justifySelf"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/justify-self) *)
  val set_justifySelf: 'tags this -> string -> unit [@@js.set "justifySelf"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/left) *)
  val get_left: 'tags this -> string [@@js.get "left"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/left) *)
  val set_left: 'tags this -> string -> unit [@@js.set "left"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/length) *)
  val get_length: 'tags this -> float [@@js.get "length"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/letter-spacing) *)
  val get_letterSpacing: 'tags this -> string [@@js.get "letterSpacing"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/letter-spacing) *)
  val set_letterSpacing: 'tags this -> string -> unit [@@js.set "letterSpacing"]
  val get_lightingColor: 'tags this -> string [@@js.get "lightingColor"]
  val set_lightingColor: 'tags this -> string -> unit [@@js.set "lightingColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/line-break) *)
  val get_lineBreak: 'tags this -> string [@@js.get "lineBreak"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/line-break) *)
  val set_lineBreak: 'tags this -> string -> unit [@@js.set "lineBreak"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/line-height) *)
  val get_lineHeight: 'tags this -> string [@@js.get "lineHeight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/line-height) *)
  val set_lineHeight: 'tags this -> string -> unit [@@js.set "lineHeight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/list-style) *)
  val get_listStyle: 'tags this -> string [@@js.get "listStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/list-style) *)
  val set_listStyle: 'tags this -> string -> unit [@@js.set "listStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/list-style-image) *)
  val get_listStyleImage: 'tags this -> string [@@js.get "listStyleImage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/list-style-image) *)
  val set_listStyleImage: 'tags this -> string -> unit [@@js.set "listStyleImage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/list-style-position) *)
  val get_listStylePosition: 'tags this -> string [@@js.get "listStylePosition"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/list-style-position) *)
  val set_listStylePosition: 'tags this -> string -> unit [@@js.set "listStylePosition"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/list-style-type) *)
  val get_listStyleType: 'tags this -> string [@@js.get "listStyleType"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/list-style-type) *)
  val set_listStyleType: 'tags this -> string -> unit [@@js.set "listStyleType"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/margin) *)
  val get_margin: 'tags this -> string [@@js.get "margin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/margin) *)
  val set_margin: 'tags this -> string -> unit [@@js.set "margin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/margin-block) *)
  val get_marginBlock: 'tags this -> string [@@js.get "marginBlock"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/margin-block) *)
  val set_marginBlock: 'tags this -> string -> unit [@@js.set "marginBlock"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/margin-block-end) *)
  val get_marginBlockEnd: 'tags this -> string [@@js.get "marginBlockEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/margin-block-end) *)
  val set_marginBlockEnd: 'tags this -> string -> unit [@@js.set "marginBlockEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/margin-block-start) *)
  val get_marginBlockStart: 'tags this -> string [@@js.get "marginBlockStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/margin-block-start) *)
  val set_marginBlockStart: 'tags this -> string -> unit [@@js.set "marginBlockStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/margin-bottom) *)
  val get_marginBottom: 'tags this -> string [@@js.get "marginBottom"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/margin-bottom) *)
  val set_marginBottom: 'tags this -> string -> unit [@@js.set "marginBottom"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/margin-inline) *)
  val get_marginInline: 'tags this -> string [@@js.get "marginInline"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/margin-inline) *)
  val set_marginInline: 'tags this -> string -> unit [@@js.set "marginInline"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/margin-inline-end) *)
  val get_marginInlineEnd: 'tags this -> string [@@js.get "marginInlineEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/margin-inline-end) *)
  val set_marginInlineEnd: 'tags this -> string -> unit [@@js.set "marginInlineEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/margin-inline-start) *)
  val get_marginInlineStart: 'tags this -> string [@@js.get "marginInlineStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/margin-inline-start) *)
  val set_marginInlineStart: 'tags this -> string -> unit [@@js.set "marginInlineStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/margin-left) *)
  val get_marginLeft: 'tags this -> string [@@js.get "marginLeft"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/margin-left) *)
  val set_marginLeft: 'tags this -> string -> unit [@@js.set "marginLeft"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/margin-right) *)
  val get_marginRight: 'tags this -> string [@@js.get "marginRight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/margin-right) *)
  val set_marginRight: 'tags this -> string -> unit [@@js.set "marginRight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/margin-top) *)
  val get_marginTop: 'tags this -> string [@@js.get "marginTop"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/margin-top) *)
  val set_marginTop: 'tags this -> string -> unit [@@js.set "marginTop"]
  val get_marker: 'tags this -> string [@@js.get "marker"]
  val set_marker: 'tags this -> string -> unit [@@js.set "marker"]
  val get_markerEnd: 'tags this -> string [@@js.get "markerEnd"]
  val set_markerEnd: 'tags this -> string -> unit [@@js.set "markerEnd"]
  val get_markerMid: 'tags this -> string [@@js.get "markerMid"]
  val set_markerMid: 'tags this -> string -> unit [@@js.set "markerMid"]
  val get_markerStart: 'tags this -> string [@@js.get "markerStart"]
  val set_markerStart: 'tags this -> string -> unit [@@js.set "markerStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask) *)
  val get_mask: 'tags this -> string [@@js.get "mask"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask) *)
  val set_mask: 'tags this -> string -> unit [@@js.set "mask"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-clip) *)
  val get_maskClip: 'tags this -> string [@@js.get "maskClip"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-clip) *)
  val set_maskClip: 'tags this -> string -> unit [@@js.set "maskClip"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-composite) *)
  val get_maskComposite: 'tags this -> string [@@js.get "maskComposite"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-composite) *)
  val set_maskComposite: 'tags this -> string -> unit [@@js.set "maskComposite"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-image) *)
  val get_maskImage: 'tags this -> string [@@js.get "maskImage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-image) *)
  val set_maskImage: 'tags this -> string -> unit [@@js.set "maskImage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-mode) *)
  val get_maskMode: 'tags this -> string [@@js.get "maskMode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-mode) *)
  val set_maskMode: 'tags this -> string -> unit [@@js.set "maskMode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-origin) *)
  val get_maskOrigin: 'tags this -> string [@@js.get "maskOrigin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-origin) *)
  val set_maskOrigin: 'tags this -> string -> unit [@@js.set "maskOrigin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-position) *)
  val get_maskPosition: 'tags this -> string [@@js.get "maskPosition"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-position) *)
  val set_maskPosition: 'tags this -> string -> unit [@@js.set "maskPosition"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-repeat) *)
  val get_maskRepeat: 'tags this -> string [@@js.get "maskRepeat"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-repeat) *)
  val set_maskRepeat: 'tags this -> string -> unit [@@js.set "maskRepeat"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-size) *)
  val get_maskSize: 'tags this -> string [@@js.get "maskSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-size) *)
  val set_maskSize: 'tags this -> string -> unit [@@js.set "maskSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-type) *)
  val get_maskType: 'tags this -> string [@@js.get "maskType"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-type) *)
  val set_maskType: 'tags this -> string -> unit [@@js.set "maskType"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/math-depth) *)
  val get_mathDepth: 'tags this -> string [@@js.get "mathDepth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/math-depth) *)
  val set_mathDepth: 'tags this -> string -> unit [@@js.set "mathDepth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/math-style) *)
  val get_mathStyle: 'tags this -> string [@@js.get "mathStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/math-style) *)
  val set_mathStyle: 'tags this -> string -> unit [@@js.set "mathStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/max-block-size) *)
  val get_maxBlockSize: 'tags this -> string [@@js.get "maxBlockSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/max-block-size) *)
  val set_maxBlockSize: 'tags this -> string -> unit [@@js.set "maxBlockSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/max-height) *)
  val get_maxHeight: 'tags this -> string [@@js.get "maxHeight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/max-height) *)
  val set_maxHeight: 'tags this -> string -> unit [@@js.set "maxHeight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/max-inline-size) *)
  val get_maxInlineSize: 'tags this -> string [@@js.get "maxInlineSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/max-inline-size) *)
  val set_maxInlineSize: 'tags this -> string -> unit [@@js.set "maxInlineSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/max-width) *)
  val get_maxWidth: 'tags this -> string [@@js.get "maxWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/max-width) *)
  val set_maxWidth: 'tags this -> string -> unit [@@js.set "maxWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/min-block-size) *)
  val get_minBlockSize: 'tags this -> string [@@js.get "minBlockSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/min-block-size) *)
  val set_minBlockSize: 'tags this -> string -> unit [@@js.set "minBlockSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/min-height) *)
  val get_minHeight: 'tags this -> string [@@js.get "minHeight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/min-height) *)
  val set_minHeight: 'tags this -> string -> unit [@@js.set "minHeight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/min-inline-size) *)
  val get_minInlineSize: 'tags this -> string [@@js.get "minInlineSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/min-inline-size) *)
  val set_minInlineSize: 'tags this -> string -> unit [@@js.set "minInlineSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/min-width) *)
  val get_minWidth: 'tags this -> string [@@js.get "minWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/min-width) *)
  val set_minWidth: 'tags this -> string -> unit [@@js.set "minWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mix-blend-mode) *)
  val get_mixBlendMode: 'tags this -> string [@@js.get "mixBlendMode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mix-blend-mode) *)
  val set_mixBlendMode: 'tags this -> string -> unit [@@js.set "mixBlendMode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/object-fit) *)
  val get_objectFit: 'tags this -> string [@@js.get "objectFit"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/object-fit) *)
  val set_objectFit: 'tags this -> string -> unit [@@js.set "objectFit"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/object-position) *)
  val get_objectPosition: 'tags this -> string [@@js.get "objectPosition"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/object-position) *)
  val set_objectPosition: 'tags this -> string -> unit [@@js.set "objectPosition"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/offset) *)
  val get_offset: 'tags this -> string [@@js.get "offset"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/offset) *)
  val set_offset: 'tags this -> string -> unit [@@js.set "offset"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/offset-anchor) *)
  val get_offsetAnchor: 'tags this -> string [@@js.get "offsetAnchor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/offset-anchor) *)
  val set_offsetAnchor: 'tags this -> string -> unit [@@js.set "offsetAnchor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/offset-distance) *)
  val get_offsetDistance: 'tags this -> string [@@js.get "offsetDistance"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/offset-distance) *)
  val set_offsetDistance: 'tags this -> string -> unit [@@js.set "offsetDistance"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/offset-path) *)
  val get_offsetPath: 'tags this -> string [@@js.get "offsetPath"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/offset-path) *)
  val set_offsetPath: 'tags this -> string -> unit [@@js.set "offsetPath"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/offset-position) *)
  val get_offsetPosition: 'tags this -> string [@@js.get "offsetPosition"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/offset-position) *)
  val set_offsetPosition: 'tags this -> string -> unit [@@js.set "offsetPosition"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/offset-rotate) *)
  val get_offsetRotate: 'tags this -> string [@@js.get "offsetRotate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/offset-rotate) *)
  val set_offsetRotate: 'tags this -> string -> unit [@@js.set "offsetRotate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/opacity) *)
  val get_opacity: 'tags this -> string [@@js.get "opacity"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/opacity) *)
  val set_opacity: 'tags this -> string -> unit [@@js.set "opacity"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/order) *)
  val get_order: 'tags this -> string [@@js.get "order"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/order) *)
  val set_order: 'tags this -> string -> unit [@@js.set "order"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/orphans) *)
  val get_orphans: 'tags this -> string [@@js.get "orphans"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/orphans) *)
  val set_orphans: 'tags this -> string -> unit [@@js.set "orphans"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/outline) *)
  val get_outline: 'tags this -> string [@@js.get "outline"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/outline) *)
  val set_outline: 'tags this -> string -> unit [@@js.set "outline"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/outline-color) *)
  val get_outlineColor: 'tags this -> string [@@js.get "outlineColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/outline-color) *)
  val set_outlineColor: 'tags this -> string -> unit [@@js.set "outlineColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/outline-offset) *)
  val get_outlineOffset: 'tags this -> string [@@js.get "outlineOffset"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/outline-offset) *)
  val set_outlineOffset: 'tags this -> string -> unit [@@js.set "outlineOffset"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/outline-style) *)
  val get_outlineStyle: 'tags this -> string [@@js.get "outlineStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/outline-style) *)
  val set_outlineStyle: 'tags this -> string -> unit [@@js.set "outlineStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/outline-width) *)
  val get_outlineWidth: 'tags this -> string [@@js.get "outlineWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/outline-width) *)
  val set_outlineWidth: 'tags this -> string -> unit [@@js.set "outlineWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/overflow) *)
  val get_overflow: 'tags this -> string [@@js.get "overflow"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/overflow) *)
  val set_overflow: 'tags this -> string -> unit [@@js.set "overflow"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/overflow-anchor) *)
  val get_overflowAnchor: 'tags this -> string [@@js.get "overflowAnchor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/overflow-anchor) *)
  val set_overflowAnchor: 'tags this -> string -> unit [@@js.set "overflowAnchor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/overflow-clip-margin) *)
  val get_overflowClipMargin: 'tags this -> string [@@js.get "overflowClipMargin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/overflow-clip-margin) *)
  val set_overflowClipMargin: 'tags this -> string -> unit [@@js.set "overflowClipMargin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/overflow-wrap) *)
  val get_overflowWrap: 'tags this -> string [@@js.get "overflowWrap"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/overflow-wrap) *)
  val set_overflowWrap: 'tags this -> string -> unit [@@js.set "overflowWrap"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/overflow-x) *)
  val get_overflowX: 'tags this -> string [@@js.get "overflowX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/overflow-x) *)
  val set_overflowX: 'tags this -> string -> unit [@@js.set "overflowX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/overflow-y) *)
  val get_overflowY: 'tags this -> string [@@js.get "overflowY"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/overflow-y) *)
  val set_overflowY: 'tags this -> string -> unit [@@js.set "overflowY"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior) *)
  val get_overscrollBehavior: 'tags this -> string [@@js.get "overscrollBehavior"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior) *)
  val set_overscrollBehavior: 'tags this -> string -> unit [@@js.set "overscrollBehavior"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-block) *)
  val get_overscrollBehaviorBlock: 'tags this -> string [@@js.get "overscrollBehaviorBlock"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-block) *)
  val set_overscrollBehaviorBlock: 'tags this -> string -> unit [@@js.set "overscrollBehaviorBlock"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-inline) *)
  val get_overscrollBehaviorInline: 'tags this -> string [@@js.get "overscrollBehaviorInline"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-inline) *)
  val set_overscrollBehaviorInline: 'tags this -> string -> unit [@@js.set "overscrollBehaviorInline"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-x) *)
  val get_overscrollBehaviorX: 'tags this -> string [@@js.get "overscrollBehaviorX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-x) *)
  val set_overscrollBehaviorX: 'tags this -> string -> unit [@@js.set "overscrollBehaviorX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-y) *)
  val get_overscrollBehaviorY: 'tags this -> string [@@js.get "overscrollBehaviorY"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-y) *)
  val set_overscrollBehaviorY: 'tags this -> string -> unit [@@js.set "overscrollBehaviorY"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/padding) *)
  val get_padding: 'tags this -> string [@@js.get "padding"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/padding) *)
  val set_padding: 'tags this -> string -> unit [@@js.set "padding"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/padding-block) *)
  val get_paddingBlock: 'tags this -> string [@@js.get "paddingBlock"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/padding-block) *)
  val set_paddingBlock: 'tags this -> string -> unit [@@js.set "paddingBlock"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/padding-block-end) *)
  val get_paddingBlockEnd: 'tags this -> string [@@js.get "paddingBlockEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/padding-block-end) *)
  val set_paddingBlockEnd: 'tags this -> string -> unit [@@js.set "paddingBlockEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/padding-block-start) *)
  val get_paddingBlockStart: 'tags this -> string [@@js.get "paddingBlockStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/padding-block-start) *)
  val set_paddingBlockStart: 'tags this -> string -> unit [@@js.set "paddingBlockStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/padding-bottom) *)
  val get_paddingBottom: 'tags this -> string [@@js.get "paddingBottom"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/padding-bottom) *)
  val set_paddingBottom: 'tags this -> string -> unit [@@js.set "paddingBottom"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/padding-inline) *)
  val get_paddingInline: 'tags this -> string [@@js.get "paddingInline"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/padding-inline) *)
  val set_paddingInline: 'tags this -> string -> unit [@@js.set "paddingInline"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/padding-inline-end) *)
  val get_paddingInlineEnd: 'tags this -> string [@@js.get "paddingInlineEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/padding-inline-end) *)
  val set_paddingInlineEnd: 'tags this -> string -> unit [@@js.set "paddingInlineEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/padding-inline-start) *)
  val get_paddingInlineStart: 'tags this -> string [@@js.get "paddingInlineStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/padding-inline-start) *)
  val set_paddingInlineStart: 'tags this -> string -> unit [@@js.set "paddingInlineStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/padding-left) *)
  val get_paddingLeft: 'tags this -> string [@@js.get "paddingLeft"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/padding-left) *)
  val set_paddingLeft: 'tags this -> string -> unit [@@js.set "paddingLeft"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/padding-right) *)
  val get_paddingRight: 'tags this -> string [@@js.get "paddingRight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/padding-right) *)
  val set_paddingRight: 'tags this -> string -> unit [@@js.set "paddingRight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/padding-top) *)
  val get_paddingTop: 'tags this -> string [@@js.get "paddingTop"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/padding-top) *)
  val set_paddingTop: 'tags this -> string -> unit [@@js.set "paddingTop"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/page) *)
  val get_page: 'tags this -> string [@@js.get "page"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/page) *)
  val set_page: 'tags this -> string -> unit [@@js.set "page"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/page-break-after) *)
  val get_pageBreakAfter: 'tags this -> string [@@js.get "pageBreakAfter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/page-break-after) *)
  val set_pageBreakAfter: 'tags this -> string -> unit [@@js.set "pageBreakAfter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/page-break-before) *)
  val get_pageBreakBefore: 'tags this -> string [@@js.get "pageBreakBefore"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/page-break-before) *)
  val set_pageBreakBefore: 'tags this -> string -> unit [@@js.set "pageBreakBefore"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/page-break-inside) *)
  val get_pageBreakInside: 'tags this -> string [@@js.get "pageBreakInside"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/page-break-inside) *)
  val set_pageBreakInside: 'tags this -> string -> unit [@@js.set "pageBreakInside"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/paint-order) *)
  val get_paintOrder: 'tags this -> string [@@js.get "paintOrder"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/paint-order) *)
  val set_paintOrder: 'tags this -> string -> unit [@@js.set "paintOrder"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/parentRule) *)
  val get_parentRule: 'tags this -> CSSRule.t option [@@js.get "parentRule"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/perspective) *)
  val get_perspective: 'tags this -> string [@@js.get "perspective"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/perspective) *)
  val set_perspective: 'tags this -> string -> unit [@@js.set "perspective"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/perspective-origin) *)
  val get_perspectiveOrigin: 'tags this -> string [@@js.get "perspectiveOrigin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/perspective-origin) *)
  val set_perspectiveOrigin: 'tags this -> string -> unit [@@js.set "perspectiveOrigin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/place-content) *)
  val get_placeContent: 'tags this -> string [@@js.get "placeContent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/place-content) *)
  val set_placeContent: 'tags this -> string -> unit [@@js.set "placeContent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/place-items) *)
  val get_placeItems: 'tags this -> string [@@js.get "placeItems"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/place-items) *)
  val set_placeItems: 'tags this -> string -> unit [@@js.set "placeItems"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/place-self) *)
  val get_placeSelf: 'tags this -> string [@@js.get "placeSelf"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/place-self) *)
  val set_placeSelf: 'tags this -> string -> unit [@@js.set "placeSelf"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/pointer-events) *)
  val get_pointerEvents: 'tags this -> string [@@js.get "pointerEvents"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/pointer-events) *)
  val set_pointerEvents: 'tags this -> string -> unit [@@js.set "pointerEvents"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/position) *)
  val get_position: 'tags this -> string [@@js.get "position"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/position) *)
  val set_position: 'tags this -> string -> unit [@@js.set "position"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/print-color-adjust) *)
  val get_printColorAdjust: 'tags this -> string [@@js.get "printColorAdjust"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/print-color-adjust) *)
  val set_printColorAdjust: 'tags this -> string -> unit [@@js.set "printColorAdjust"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/quotes) *)
  val get_quotes: 'tags this -> string [@@js.get "quotes"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/quotes) *)
  val set_quotes: 'tags this -> string -> unit [@@js.set "quotes"]
  val get_r: 'tags this -> string [@@js.get "r"]
  val set_r: 'tags this -> string -> unit [@@js.set "r"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/resize) *)
  val get_resize: 'tags this -> string [@@js.get "resize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/resize) *)
  val set_resize: 'tags this -> string -> unit [@@js.set "resize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/right) *)
  val get_right: 'tags this -> string [@@js.get "right"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/right) *)
  val set_right: 'tags this -> string -> unit [@@js.set "right"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/rotate) *)
  val get_rotate: 'tags this -> string [@@js.get "rotate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/rotate) *)
  val set_rotate: 'tags this -> string -> unit [@@js.set "rotate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/row-gap) *)
  val get_rowGap: 'tags this -> string [@@js.get "rowGap"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/row-gap) *)
  val set_rowGap: 'tags this -> string -> unit [@@js.set "rowGap"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/ruby-position) *)
  val get_rubyPosition: 'tags this -> string [@@js.get "rubyPosition"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/ruby-position) *)
  val set_rubyPosition: 'tags this -> string -> unit [@@js.set "rubyPosition"]
  val get_rx: 'tags this -> string [@@js.get "rx"]
  val set_rx: 'tags this -> string -> unit [@@js.set "rx"]
  val get_ry: 'tags this -> string [@@js.get "ry"]
  val set_ry: 'tags this -> string -> unit [@@js.set "ry"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scale) *)
  val get_scale: 'tags this -> string [@@js.get "scale"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scale) *)
  val set_scale: 'tags this -> string -> unit [@@js.set "scale"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-behavior) *)
  val get_scrollBehavior: 'tags this -> string [@@js.get "scrollBehavior"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-behavior) *)
  val set_scrollBehavior: 'tags this -> string -> unit [@@js.set "scrollBehavior"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-margin) *)
  val get_scrollMargin: 'tags this -> string [@@js.get "scrollMargin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-margin) *)
  val set_scrollMargin: 'tags this -> string -> unit [@@js.set "scrollMargin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block) *)
  val get_scrollMarginBlock: 'tags this -> string [@@js.get "scrollMarginBlock"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block) *)
  val set_scrollMarginBlock: 'tags this -> string -> unit [@@js.set "scrollMarginBlock"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-end) *)
  val get_scrollMarginBlockEnd: 'tags this -> string [@@js.get "scrollMarginBlockEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-end) *)
  val set_scrollMarginBlockEnd: 'tags this -> string -> unit [@@js.set "scrollMarginBlockEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-start) *)
  val get_scrollMarginBlockStart: 'tags this -> string [@@js.get "scrollMarginBlockStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-start) *)
  val set_scrollMarginBlockStart: 'tags this -> string -> unit [@@js.set "scrollMarginBlockStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom) *)
  val get_scrollMarginBottom: 'tags this -> string [@@js.get "scrollMarginBottom"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom) *)
  val set_scrollMarginBottom: 'tags this -> string -> unit [@@js.set "scrollMarginBottom"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline) *)
  val get_scrollMarginInline: 'tags this -> string [@@js.get "scrollMarginInline"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline) *)
  val set_scrollMarginInline: 'tags this -> string -> unit [@@js.set "scrollMarginInline"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-end) *)
  val get_scrollMarginInlineEnd: 'tags this -> string [@@js.get "scrollMarginInlineEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-end) *)
  val set_scrollMarginInlineEnd: 'tags this -> string -> unit [@@js.set "scrollMarginInlineEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-start) *)
  val get_scrollMarginInlineStart: 'tags this -> string [@@js.get "scrollMarginInlineStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-start) *)
  val set_scrollMarginInlineStart: 'tags this -> string -> unit [@@js.set "scrollMarginInlineStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left) *)
  val get_scrollMarginLeft: 'tags this -> string [@@js.get "scrollMarginLeft"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left) *)
  val set_scrollMarginLeft: 'tags this -> string -> unit [@@js.set "scrollMarginLeft"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right) *)
  val get_scrollMarginRight: 'tags this -> string [@@js.get "scrollMarginRight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right) *)
  val set_scrollMarginRight: 'tags this -> string -> unit [@@js.set "scrollMarginRight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top) *)
  val get_scrollMarginTop: 'tags this -> string [@@js.get "scrollMarginTop"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top) *)
  val set_scrollMarginTop: 'tags this -> string -> unit [@@js.set "scrollMarginTop"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-padding) *)
  val get_scrollPadding: 'tags this -> string [@@js.get "scrollPadding"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-padding) *)
  val set_scrollPadding: 'tags this -> string -> unit [@@js.set "scrollPadding"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block) *)
  val get_scrollPaddingBlock: 'tags this -> string [@@js.get "scrollPaddingBlock"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block) *)
  val set_scrollPaddingBlock: 'tags this -> string -> unit [@@js.set "scrollPaddingBlock"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-end) *)
  val get_scrollPaddingBlockEnd: 'tags this -> string [@@js.get "scrollPaddingBlockEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-end) *)
  val set_scrollPaddingBlockEnd: 'tags this -> string -> unit [@@js.set "scrollPaddingBlockEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-start) *)
  val get_scrollPaddingBlockStart: 'tags this -> string [@@js.get "scrollPaddingBlockStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-start) *)
  val set_scrollPaddingBlockStart: 'tags this -> string -> unit [@@js.set "scrollPaddingBlockStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-bottom) *)
  val get_scrollPaddingBottom: 'tags this -> string [@@js.get "scrollPaddingBottom"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-bottom) *)
  val set_scrollPaddingBottom: 'tags this -> string -> unit [@@js.set "scrollPaddingBottom"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline) *)
  val get_scrollPaddingInline: 'tags this -> string [@@js.get "scrollPaddingInline"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline) *)
  val set_scrollPaddingInline: 'tags this -> string -> unit [@@js.set "scrollPaddingInline"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-end) *)
  val get_scrollPaddingInlineEnd: 'tags this -> string [@@js.get "scrollPaddingInlineEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-end) *)
  val set_scrollPaddingInlineEnd: 'tags this -> string -> unit [@@js.set "scrollPaddingInlineEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-start) *)
  val get_scrollPaddingInlineStart: 'tags this -> string [@@js.get "scrollPaddingInlineStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-start) *)
  val set_scrollPaddingInlineStart: 'tags this -> string -> unit [@@js.set "scrollPaddingInlineStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-left) *)
  val get_scrollPaddingLeft: 'tags this -> string [@@js.get "scrollPaddingLeft"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-left) *)
  val set_scrollPaddingLeft: 'tags this -> string -> unit [@@js.set "scrollPaddingLeft"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-right) *)
  val get_scrollPaddingRight: 'tags this -> string [@@js.get "scrollPaddingRight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-right) *)
  val set_scrollPaddingRight: 'tags this -> string -> unit [@@js.set "scrollPaddingRight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-top) *)
  val get_scrollPaddingTop: 'tags this -> string [@@js.get "scrollPaddingTop"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-top) *)
  val set_scrollPaddingTop: 'tags this -> string -> unit [@@js.set "scrollPaddingTop"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-snap-align) *)
  val get_scrollSnapAlign: 'tags this -> string [@@js.get "scrollSnapAlign"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-snap-align) *)
  val set_scrollSnapAlign: 'tags this -> string -> unit [@@js.set "scrollSnapAlign"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-snap-stop) *)
  val get_scrollSnapStop: 'tags this -> string [@@js.get "scrollSnapStop"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-snap-stop) *)
  val set_scrollSnapStop: 'tags this -> string -> unit [@@js.set "scrollSnapStop"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type) *)
  val get_scrollSnapType: 'tags this -> string [@@js.get "scrollSnapType"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type) *)
  val set_scrollSnapType: 'tags this -> string -> unit [@@js.set "scrollSnapType"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scrollbar-color) *)
  val get_scrollbarColor: 'tags this -> string [@@js.get "scrollbarColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scrollbar-color) *)
  val set_scrollbarColor: 'tags this -> string -> unit [@@js.set "scrollbarColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scrollbar-gutter) *)
  val get_scrollbarGutter: 'tags this -> string [@@js.get "scrollbarGutter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scrollbar-gutter) *)
  val set_scrollbarGutter: 'tags this -> string -> unit [@@js.set "scrollbarGutter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scrollbar-width) *)
  val get_scrollbarWidth: 'tags this -> string [@@js.get "scrollbarWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/scrollbar-width) *)
  val set_scrollbarWidth: 'tags this -> string -> unit [@@js.set "scrollbarWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/shape-image-threshold) *)
  val get_shapeImageThreshold: 'tags this -> string [@@js.get "shapeImageThreshold"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/shape-image-threshold) *)
  val set_shapeImageThreshold: 'tags this -> string -> unit [@@js.set "shapeImageThreshold"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/shape-margin) *)
  val get_shapeMargin: 'tags this -> string [@@js.get "shapeMargin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/shape-margin) *)
  val set_shapeMargin: 'tags this -> string -> unit [@@js.set "shapeMargin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/shape-outside) *)
  val get_shapeOutside: 'tags this -> string [@@js.get "shapeOutside"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/shape-outside) *)
  val set_shapeOutside: 'tags this -> string -> unit [@@js.set "shapeOutside"]
  val get_shapeRendering: 'tags this -> string [@@js.get "shapeRendering"]
  val set_shapeRendering: 'tags this -> string -> unit [@@js.set "shapeRendering"]
  val get_stopColor: 'tags this -> string [@@js.get "stopColor"]
  val set_stopColor: 'tags this -> string -> unit [@@js.set "stopColor"]
  val get_stopOpacity: 'tags this -> string [@@js.get "stopOpacity"]
  val set_stopOpacity: 'tags this -> string -> unit [@@js.set "stopOpacity"]
  val get_stroke: 'tags this -> string [@@js.get "stroke"]
  val set_stroke: 'tags this -> string -> unit [@@js.set "stroke"]
  val get_strokeDasharray: 'tags this -> string [@@js.get "strokeDasharray"]
  val set_strokeDasharray: 'tags this -> string -> unit [@@js.set "strokeDasharray"]
  val get_strokeDashoffset: 'tags this -> string [@@js.get "strokeDashoffset"]
  val set_strokeDashoffset: 'tags this -> string -> unit [@@js.set "strokeDashoffset"]
  val get_strokeLinecap: 'tags this -> string [@@js.get "strokeLinecap"]
  val set_strokeLinecap: 'tags this -> string -> unit [@@js.set "strokeLinecap"]
  val get_strokeLinejoin: 'tags this -> string [@@js.get "strokeLinejoin"]
  val set_strokeLinejoin: 'tags this -> string -> unit [@@js.set "strokeLinejoin"]
  val get_strokeMiterlimit: 'tags this -> string [@@js.get "strokeMiterlimit"]
  val set_strokeMiterlimit: 'tags this -> string -> unit [@@js.set "strokeMiterlimit"]
  val get_strokeOpacity: 'tags this -> string [@@js.get "strokeOpacity"]
  val set_strokeOpacity: 'tags this -> string -> unit [@@js.set "strokeOpacity"]
  val get_strokeWidth: 'tags this -> string [@@js.get "strokeWidth"]
  val set_strokeWidth: 'tags this -> string -> unit [@@js.set "strokeWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/tab-size) *)
  val get_tabSize: 'tags this -> string [@@js.get "tabSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/tab-size) *)
  val set_tabSize: 'tags this -> string -> unit [@@js.set "tabSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/table-layout) *)
  val get_tableLayout: 'tags this -> string [@@js.get "tableLayout"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/table-layout) *)
  val set_tableLayout: 'tags this -> string -> unit [@@js.set "tableLayout"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-align) *)
  val get_textAlign: 'tags this -> string [@@js.get "textAlign"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-align) *)
  val set_textAlign: 'tags this -> string -> unit [@@js.set "textAlign"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-align-last) *)
  val get_textAlignLast: 'tags this -> string [@@js.get "textAlignLast"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-align-last) *)
  val set_textAlignLast: 'tags this -> string -> unit [@@js.set "textAlignLast"]
  val get_textAnchor: 'tags this -> string [@@js.get "textAnchor"]
  val set_textAnchor: 'tags this -> string -> unit [@@js.set "textAnchor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-combine-upright) *)
  val get_textCombineUpright: 'tags this -> string [@@js.get "textCombineUpright"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-combine-upright) *)
  val set_textCombineUpright: 'tags this -> string -> unit [@@js.set "textCombineUpright"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-decoration) *)
  val get_textDecoration: 'tags this -> string [@@js.get "textDecoration"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-decoration) *)
  val set_textDecoration: 'tags this -> string -> unit [@@js.set "textDecoration"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-decoration-color) *)
  val get_textDecorationColor: 'tags this -> string [@@js.get "textDecorationColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-decoration-color) *)
  val set_textDecorationColor: 'tags this -> string -> unit [@@js.set "textDecorationColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-decoration-line) *)
  val get_textDecorationLine: 'tags this -> string [@@js.get "textDecorationLine"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-decoration-line) *)
  val set_textDecorationLine: 'tags this -> string -> unit [@@js.set "textDecorationLine"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip-ink) *)
  val get_textDecorationSkipInk: 'tags this -> string [@@js.get "textDecorationSkipInk"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip-ink) *)
  val set_textDecorationSkipInk: 'tags this -> string -> unit [@@js.set "textDecorationSkipInk"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-decoration-style) *)
  val get_textDecorationStyle: 'tags this -> string [@@js.get "textDecorationStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-decoration-style) *)
  val set_textDecorationStyle: 'tags this -> string -> unit [@@js.set "textDecorationStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness) *)
  val get_textDecorationThickness: 'tags this -> string [@@js.get "textDecorationThickness"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness) *)
  val set_textDecorationThickness: 'tags this -> string -> unit [@@js.set "textDecorationThickness"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-emphasis) *)
  val get_textEmphasis: 'tags this -> string [@@js.get "textEmphasis"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-emphasis) *)
  val set_textEmphasis: 'tags this -> string -> unit [@@js.set "textEmphasis"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-emphasis-color) *)
  val get_textEmphasisColor: 'tags this -> string [@@js.get "textEmphasisColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-emphasis-color) *)
  val set_textEmphasisColor: 'tags this -> string -> unit [@@js.set "textEmphasisColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-emphasis-position) *)
  val get_textEmphasisPosition: 'tags this -> string [@@js.get "textEmphasisPosition"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-emphasis-position) *)
  val set_textEmphasisPosition: 'tags this -> string -> unit [@@js.set "textEmphasisPosition"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-emphasis-style) *)
  val get_textEmphasisStyle: 'tags this -> string [@@js.get "textEmphasisStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-emphasis-style) *)
  val set_textEmphasisStyle: 'tags this -> string -> unit [@@js.set "textEmphasisStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-indent) *)
  val get_textIndent: 'tags this -> string [@@js.get "textIndent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-indent) *)
  val set_textIndent: 'tags this -> string -> unit [@@js.set "textIndent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-orientation) *)
  val get_textOrientation: 'tags this -> string [@@js.get "textOrientation"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-orientation) *)
  val set_textOrientation: 'tags this -> string -> unit [@@js.set "textOrientation"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-overflow) *)
  val get_textOverflow: 'tags this -> string [@@js.get "textOverflow"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-overflow) *)
  val set_textOverflow: 'tags this -> string -> unit [@@js.set "textOverflow"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-rendering) *)
  val get_textRendering: 'tags this -> string [@@js.get "textRendering"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-rendering) *)
  val set_textRendering: 'tags this -> string -> unit [@@js.set "textRendering"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-shadow) *)
  val get_textShadow: 'tags this -> string [@@js.get "textShadow"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-shadow) *)
  val set_textShadow: 'tags this -> string -> unit [@@js.set "textShadow"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-transform) *)
  val get_textTransform: 'tags this -> string [@@js.get "textTransform"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-transform) *)
  val set_textTransform: 'tags this -> string -> unit [@@js.set "textTransform"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-underline-offset) *)
  val get_textUnderlineOffset: 'tags this -> string [@@js.get "textUnderlineOffset"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-underline-offset) *)
  val set_textUnderlineOffset: 'tags this -> string -> unit [@@js.set "textUnderlineOffset"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-underline-position) *)
  val get_textUnderlinePosition: 'tags this -> string [@@js.get "textUnderlinePosition"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-underline-position) *)
  val set_textUnderlinePosition: 'tags this -> string -> unit [@@js.set "textUnderlinePosition"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-wrap) *)
  val get_textWrap: 'tags this -> string [@@js.get "textWrap"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-wrap) *)
  val set_textWrap: 'tags this -> string -> unit [@@js.set "textWrap"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/top) *)
  val get_top: 'tags this -> string [@@js.get "top"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/top) *)
  val set_top: 'tags this -> string -> unit [@@js.set "top"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/touch-action) *)
  val get_touchAction: 'tags this -> string [@@js.get "touchAction"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/touch-action) *)
  val set_touchAction: 'tags this -> string -> unit [@@js.set "touchAction"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/transform) *)
  val get_transform: 'tags this -> string [@@js.get "transform"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/transform) *)
  val set_transform: 'tags this -> string -> unit [@@js.set "transform"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/transform-box) *)
  val get_transformBox: 'tags this -> string [@@js.get "transformBox"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/transform-box) *)
  val set_transformBox: 'tags this -> string -> unit [@@js.set "transformBox"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/transform-origin) *)
  val get_transformOrigin: 'tags this -> string [@@js.get "transformOrigin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/transform-origin) *)
  val set_transformOrigin: 'tags this -> string -> unit [@@js.set "transformOrigin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/transform-style) *)
  val get_transformStyle: 'tags this -> string [@@js.get "transformStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/transform-style) *)
  val set_transformStyle: 'tags this -> string -> unit [@@js.set "transformStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/transition) *)
  val get_transition: 'tags this -> string [@@js.get "transition"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/transition) *)
  val set_transition: 'tags this -> string -> unit [@@js.set "transition"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/transition-delay) *)
  val get_transitionDelay: 'tags this -> string [@@js.get "transitionDelay"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/transition-delay) *)
  val set_transitionDelay: 'tags this -> string -> unit [@@js.set "transitionDelay"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/transition-duration) *)
  val get_transitionDuration: 'tags this -> string [@@js.get "transitionDuration"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/transition-duration) *)
  val set_transitionDuration: 'tags this -> string -> unit [@@js.set "transitionDuration"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/transition-property) *)
  val get_transitionProperty: 'tags this -> string [@@js.get "transitionProperty"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/transition-property) *)
  val set_transitionProperty: 'tags this -> string -> unit [@@js.set "transitionProperty"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/transition-timing-function) *)
  val get_transitionTimingFunction: 'tags this -> string [@@js.get "transitionTimingFunction"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/transition-timing-function) *)
  val set_transitionTimingFunction: 'tags this -> string -> unit [@@js.set "transitionTimingFunction"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/translate) *)
  val get_translate: 'tags this -> string [@@js.get "translate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/translate) *)
  val set_translate: 'tags this -> string -> unit [@@js.set "translate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/unicode-bidi) *)
  val get_unicodeBidi: 'tags this -> string [@@js.get "unicodeBidi"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/unicode-bidi) *)
  val set_unicodeBidi: 'tags this -> string -> unit [@@js.set "unicodeBidi"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/user-select) *)
  val get_userSelect: 'tags this -> string [@@js.get "userSelect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/user-select) *)
  val set_userSelect: 'tags this -> string -> unit [@@js.set "userSelect"]
  val get_vectorEffect: 'tags this -> string [@@js.get "vectorEffect"]
  val set_vectorEffect: 'tags this -> string -> unit [@@js.set "vectorEffect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/vertical-align) *)
  val get_verticalAlign: 'tags this -> string [@@js.get "verticalAlign"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/vertical-align) *)
  val set_verticalAlign: 'tags this -> string -> unit [@@js.set "verticalAlign"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/visibility) *)
  val get_visibility: 'tags this -> string [@@js.get "visibility"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/visibility) *)
  val set_visibility: 'tags this -> string -> unit [@@js.set "visibility"]
  
  (**
    @deprecated This is a legacy alias of `alignContent`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/align-content)
  *)
  val get_webkitAlignContent: 'tags this -> string [@@js.get "webkitAlignContent"]
  
  (**
    @deprecated This is a legacy alias of `alignContent`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/align-content)
  *)
  val set_webkitAlignContent: 'tags this -> string -> unit [@@js.set "webkitAlignContent"]
  
  (**
    @deprecated This is a legacy alias of `alignItems`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/align-items)
  *)
  val get_webkitAlignItems: 'tags this -> string [@@js.get "webkitAlignItems"]
  
  (**
    @deprecated This is a legacy alias of `alignItems`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/align-items)
  *)
  val set_webkitAlignItems: 'tags this -> string -> unit [@@js.set "webkitAlignItems"]
  
  (**
    @deprecated This is a legacy alias of `alignSelf`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/align-self)
  *)
  val get_webkitAlignSelf: 'tags this -> string [@@js.get "webkitAlignSelf"]
  
  (**
    @deprecated This is a legacy alias of `alignSelf`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/align-self)
  *)
  val set_webkitAlignSelf: 'tags this -> string -> unit [@@js.set "webkitAlignSelf"]
  
  (**
    @deprecated This is a legacy alias of `animation`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation)
  *)
  val get_webkitAnimation: 'tags this -> string [@@js.get "webkitAnimation"]
  
  (**
    @deprecated This is a legacy alias of `animation`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation)
  *)
  val set_webkitAnimation: 'tags this -> string -> unit [@@js.set "webkitAnimation"]
  
  (**
    @deprecated This is a legacy alias of `animationDelay`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation-delay)
  *)
  val get_webkitAnimationDelay: 'tags this -> string [@@js.get "webkitAnimationDelay"]
  
  (**
    @deprecated This is a legacy alias of `animationDelay`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation-delay)
  *)
  val set_webkitAnimationDelay: 'tags this -> string -> unit [@@js.set "webkitAnimationDelay"]
  
  (**
    @deprecated This is a legacy alias of `animationDirection`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation-direction)
  *)
  val get_webkitAnimationDirection: 'tags this -> string [@@js.get "webkitAnimationDirection"]
  
  (**
    @deprecated This is a legacy alias of `animationDirection`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation-direction)
  *)
  val set_webkitAnimationDirection: 'tags this -> string -> unit [@@js.set "webkitAnimationDirection"]
  
  (**
    @deprecated This is a legacy alias of `animationDuration`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation-duration)
  *)
  val get_webkitAnimationDuration: 'tags this -> string [@@js.get "webkitAnimationDuration"]
  
  (**
    @deprecated This is a legacy alias of `animationDuration`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation-duration)
  *)
  val set_webkitAnimationDuration: 'tags this -> string -> unit [@@js.set "webkitAnimationDuration"]
  
  (**
    @deprecated This is a legacy alias of `animationFillMode`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode)
  *)
  val get_webkitAnimationFillMode: 'tags this -> string [@@js.get "webkitAnimationFillMode"]
  
  (**
    @deprecated This is a legacy alias of `animationFillMode`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode)
  *)
  val set_webkitAnimationFillMode: 'tags this -> string -> unit [@@js.set "webkitAnimationFillMode"]
  
  (**
    @deprecated This is a legacy alias of `animationIterationCount`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count)
  *)
  val get_webkitAnimationIterationCount: 'tags this -> string [@@js.get "webkitAnimationIterationCount"]
  
  (**
    @deprecated This is a legacy alias of `animationIterationCount`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count)
  *)
  val set_webkitAnimationIterationCount: 'tags this -> string -> unit [@@js.set "webkitAnimationIterationCount"]
  
  (**
    @deprecated This is a legacy alias of `animationName`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation-name)
  *)
  val get_webkitAnimationName: 'tags this -> string [@@js.get "webkitAnimationName"]
  
  (**
    @deprecated This is a legacy alias of `animationName`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation-name)
  *)
  val set_webkitAnimationName: 'tags this -> string -> unit [@@js.set "webkitAnimationName"]
  
  (**
    @deprecated This is a legacy alias of `animationPlayState`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation-play-state)
  *)
  val get_webkitAnimationPlayState: 'tags this -> string [@@js.get "webkitAnimationPlayState"]
  
  (**
    @deprecated This is a legacy alias of `animationPlayState`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation-play-state)
  *)
  val set_webkitAnimationPlayState: 'tags this -> string -> unit [@@js.set "webkitAnimationPlayState"]
  
  (**
    @deprecated This is a legacy alias of `animationTimingFunction`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation-timing-function)
  *)
  val get_webkitAnimationTimingFunction: 'tags this -> string [@@js.get "webkitAnimationTimingFunction"]
  
  (**
    @deprecated This is a legacy alias of `animationTimingFunction`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/animation-timing-function)
  *)
  val set_webkitAnimationTimingFunction: 'tags this -> string -> unit [@@js.set "webkitAnimationTimingFunction"]
  
  (**
    @deprecated This is a legacy alias of `appearance`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/appearance)
  *)
  val get_webkitAppearance: 'tags this -> string [@@js.get "webkitAppearance"]
  
  (**
    @deprecated This is a legacy alias of `appearance`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/appearance)
  *)
  val set_webkitAppearance: 'tags this -> string -> unit [@@js.set "webkitAppearance"]
  
  (**
    @deprecated This is a legacy alias of `backfaceVisibility`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/backface-visibility)
  *)
  val get_webkitBackfaceVisibility: 'tags this -> string [@@js.get "webkitBackfaceVisibility"]
  
  (**
    @deprecated This is a legacy alias of `backfaceVisibility`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/backface-visibility)
  *)
  val set_webkitBackfaceVisibility: 'tags this -> string -> unit [@@js.set "webkitBackfaceVisibility"]
  
  (**
    @deprecated This is a legacy alias of `backgroundClip`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/background-clip)
  *)
  val get_webkitBackgroundClip: 'tags this -> string [@@js.get "webkitBackgroundClip"]
  
  (**
    @deprecated This is a legacy alias of `backgroundClip`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/background-clip)
  *)
  val set_webkitBackgroundClip: 'tags this -> string -> unit [@@js.set "webkitBackgroundClip"]
  
  (**
    @deprecated This is a legacy alias of `backgroundOrigin`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/background-origin)
  *)
  val get_webkitBackgroundOrigin: 'tags this -> string [@@js.get "webkitBackgroundOrigin"]
  
  (**
    @deprecated This is a legacy alias of `backgroundOrigin`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/background-origin)
  *)
  val set_webkitBackgroundOrigin: 'tags this -> string -> unit [@@js.set "webkitBackgroundOrigin"]
  
  (**
    @deprecated This is a legacy alias of `backgroundSize`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/background-size)
  *)
  val get_webkitBackgroundSize: 'tags this -> string [@@js.get "webkitBackgroundSize"]
  
  (**
    @deprecated This is a legacy alias of `backgroundSize`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/background-size)
  *)
  val set_webkitBackgroundSize: 'tags this -> string -> unit [@@js.set "webkitBackgroundSize"]
  
  (**
    @deprecated This is a legacy alias of `borderBottomLeftRadius`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius)
  *)
  val get_webkitBorderBottomLeftRadius: 'tags this -> string [@@js.get "webkitBorderBottomLeftRadius"]
  
  (**
    @deprecated This is a legacy alias of `borderBottomLeftRadius`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius)
  *)
  val set_webkitBorderBottomLeftRadius: 'tags this -> string -> unit [@@js.set "webkitBorderBottomLeftRadius"]
  
  (**
    @deprecated This is a legacy alias of `borderBottomRightRadius`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius)
  *)
  val get_webkitBorderBottomRightRadius: 'tags this -> string [@@js.get "webkitBorderBottomRightRadius"]
  
  (**
    @deprecated This is a legacy alias of `borderBottomRightRadius`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius)
  *)
  val set_webkitBorderBottomRightRadius: 'tags this -> string -> unit [@@js.set "webkitBorderBottomRightRadius"]
  
  (**
    @deprecated This is a legacy alias of `borderRadius`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-radius)
  *)
  val get_webkitBorderRadius: 'tags this -> string [@@js.get "webkitBorderRadius"]
  
  (**
    @deprecated This is a legacy alias of `borderRadius`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-radius)
  *)
  val set_webkitBorderRadius: 'tags this -> string -> unit [@@js.set "webkitBorderRadius"]
  
  (**
    @deprecated This is a legacy alias of `borderTopLeftRadius`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius)
  *)
  val get_webkitBorderTopLeftRadius: 'tags this -> string [@@js.get "webkitBorderTopLeftRadius"]
  
  (**
    @deprecated This is a legacy alias of `borderTopLeftRadius`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius)
  *)
  val set_webkitBorderTopLeftRadius: 'tags this -> string -> unit [@@js.set "webkitBorderTopLeftRadius"]
  
  (**
    @deprecated This is a legacy alias of `borderTopRightRadius`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius)
  *)
  val get_webkitBorderTopRightRadius: 'tags this -> string [@@js.get "webkitBorderTopRightRadius"]
  
  (**
    @deprecated This is a legacy alias of `borderTopRightRadius`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius)
  *)
  val set_webkitBorderTopRightRadius: 'tags this -> string -> unit [@@js.set "webkitBorderTopRightRadius"]
  
  (**
    @deprecated This is a legacy alias of `boxAlign`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/box-align)
  *)
  val get_webkitBoxAlign: 'tags this -> string [@@js.get "webkitBoxAlign"]
  
  (**
    @deprecated This is a legacy alias of `boxAlign`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/box-align)
  *)
  val set_webkitBoxAlign: 'tags this -> string -> unit [@@js.set "webkitBoxAlign"]
  
  (**
    @deprecated This is a legacy alias of `boxFlex`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/box-flex)
  *)
  val get_webkitBoxFlex: 'tags this -> string [@@js.get "webkitBoxFlex"]
  
  (**
    @deprecated This is a legacy alias of `boxFlex`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/box-flex)
  *)
  val set_webkitBoxFlex: 'tags this -> string -> unit [@@js.set "webkitBoxFlex"]
  
  (**
    @deprecated This is a legacy alias of `boxOrdinalGroup`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/box-ordinal-group)
  *)
  val get_webkitBoxOrdinalGroup: 'tags this -> string [@@js.get "webkitBoxOrdinalGroup"]
  
  (**
    @deprecated This is a legacy alias of `boxOrdinalGroup`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/box-ordinal-group)
  *)
  val set_webkitBoxOrdinalGroup: 'tags this -> string -> unit [@@js.set "webkitBoxOrdinalGroup"]
  
  (**
    @deprecated This is a legacy alias of `boxOrient`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/box-orient)
  *)
  val get_webkitBoxOrient: 'tags this -> string [@@js.get "webkitBoxOrient"]
  
  (**
    @deprecated This is a legacy alias of `boxOrient`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/box-orient)
  *)
  val set_webkitBoxOrient: 'tags this -> string -> unit [@@js.set "webkitBoxOrient"]
  
  (**
    @deprecated This is a legacy alias of `boxPack`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/box-pack)
  *)
  val get_webkitBoxPack: 'tags this -> string [@@js.get "webkitBoxPack"]
  
  (**
    @deprecated This is a legacy alias of `boxPack`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/box-pack)
  *)
  val set_webkitBoxPack: 'tags this -> string -> unit [@@js.set "webkitBoxPack"]
  
  (**
    @deprecated This is a legacy alias of `boxShadow`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/box-shadow)
  *)
  val get_webkitBoxShadow: 'tags this -> string [@@js.get "webkitBoxShadow"]
  
  (**
    @deprecated This is a legacy alias of `boxShadow`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/box-shadow)
  *)
  val set_webkitBoxShadow: 'tags this -> string -> unit [@@js.set "webkitBoxShadow"]
  
  (**
    @deprecated This is a legacy alias of `boxSizing`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/box-sizing)
  *)
  val get_webkitBoxSizing: 'tags this -> string [@@js.get "webkitBoxSizing"]
  
  (**
    @deprecated This is a legacy alias of `boxSizing`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/box-sizing)
  *)
  val set_webkitBoxSizing: 'tags this -> string -> unit [@@js.set "webkitBoxSizing"]
  
  (**
    @deprecated This is a legacy alias of `filter`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/filter)
  *)
  val get_webkitFilter: 'tags this -> string [@@js.get "webkitFilter"]
  
  (**
    @deprecated This is a legacy alias of `filter`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/filter)
  *)
  val set_webkitFilter: 'tags this -> string -> unit [@@js.set "webkitFilter"]
  
  (**
    @deprecated This is a legacy alias of `flex`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/flex)
  *)
  val get_webkitFlex: 'tags this -> string [@@js.get "webkitFlex"]
  
  (**
    @deprecated This is a legacy alias of `flex`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/flex)
  *)
  val set_webkitFlex: 'tags this -> string -> unit [@@js.set "webkitFlex"]
  
  (**
    @deprecated This is a legacy alias of `flexBasis`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/flex-basis)
  *)
  val get_webkitFlexBasis: 'tags this -> string [@@js.get "webkitFlexBasis"]
  
  (**
    @deprecated This is a legacy alias of `flexBasis`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/flex-basis)
  *)
  val set_webkitFlexBasis: 'tags this -> string -> unit [@@js.set "webkitFlexBasis"]
  
  (**
    @deprecated This is a legacy alias of `flexDirection`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/flex-direction)
  *)
  val get_webkitFlexDirection: 'tags this -> string [@@js.get "webkitFlexDirection"]
  
  (**
    @deprecated This is a legacy alias of `flexDirection`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/flex-direction)
  *)
  val set_webkitFlexDirection: 'tags this -> string -> unit [@@js.set "webkitFlexDirection"]
  
  (**
    @deprecated This is a legacy alias of `flexFlow`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/flex-flow)
  *)
  val get_webkitFlexFlow: 'tags this -> string [@@js.get "webkitFlexFlow"]
  
  (**
    @deprecated This is a legacy alias of `flexFlow`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/flex-flow)
  *)
  val set_webkitFlexFlow: 'tags this -> string -> unit [@@js.set "webkitFlexFlow"]
  
  (**
    @deprecated This is a legacy alias of `flexGrow`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/flex-grow)
  *)
  val get_webkitFlexGrow: 'tags this -> string [@@js.get "webkitFlexGrow"]
  
  (**
    @deprecated This is a legacy alias of `flexGrow`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/flex-grow)
  *)
  val set_webkitFlexGrow: 'tags this -> string -> unit [@@js.set "webkitFlexGrow"]
  
  (**
    @deprecated This is a legacy alias of `flexShrink`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/flex-shrink)
  *)
  val get_webkitFlexShrink: 'tags this -> string [@@js.get "webkitFlexShrink"]
  
  (**
    @deprecated This is a legacy alias of `flexShrink`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/flex-shrink)
  *)
  val set_webkitFlexShrink: 'tags this -> string -> unit [@@js.set "webkitFlexShrink"]
  
  (**
    @deprecated This is a legacy alias of `flexWrap`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/flex-wrap)
  *)
  val get_webkitFlexWrap: 'tags this -> string [@@js.get "webkitFlexWrap"]
  
  (**
    @deprecated This is a legacy alias of `flexWrap`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/flex-wrap)
  *)
  val set_webkitFlexWrap: 'tags this -> string -> unit [@@js.set "webkitFlexWrap"]
  
  (**
    @deprecated This is a legacy alias of `justifyContent`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/justify-content)
  *)
  val get_webkitJustifyContent: 'tags this -> string [@@js.get "webkitJustifyContent"]
  
  (**
    @deprecated This is a legacy alias of `justifyContent`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/justify-content)
  *)
  val set_webkitJustifyContent: 'tags this -> string -> unit [@@js.set "webkitJustifyContent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/-webkit-line-clamp) *)
  val get_webkitLineClamp: 'tags this -> string [@@js.get "webkitLineClamp"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/-webkit-line-clamp) *)
  val set_webkitLineClamp: 'tags this -> string -> unit [@@js.set "webkitLineClamp"]
  
  (**
    @deprecated This is a legacy alias of `mask`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask)
  *)
  val get_webkitMask: 'tags this -> string [@@js.get "webkitMask"]
  
  (**
    @deprecated This is a legacy alias of `mask`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask)
  *)
  val set_webkitMask: 'tags this -> string -> unit [@@js.set "webkitMask"]
  
  (**
    @deprecated This is a legacy alias of `maskBorder`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-border)
  *)
  val get_webkitMaskBoxImage: 'tags this -> string [@@js.get "webkitMaskBoxImage"]
  
  (**
    @deprecated This is a legacy alias of `maskBorder`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-border)
  *)
  val set_webkitMaskBoxImage: 'tags this -> string -> unit [@@js.set "webkitMaskBoxImage"]
  
  (**
    @deprecated This is a legacy alias of `maskBorderOutset`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-border-outset)
  *)
  val get_webkitMaskBoxImageOutset: 'tags this -> string [@@js.get "webkitMaskBoxImageOutset"]
  
  (**
    @deprecated This is a legacy alias of `maskBorderOutset`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-border-outset)
  *)
  val set_webkitMaskBoxImageOutset: 'tags this -> string -> unit [@@js.set "webkitMaskBoxImageOutset"]
  
  (**
    @deprecated This is a legacy alias of `maskBorderRepeat`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-border-repeat)
  *)
  val get_webkitMaskBoxImageRepeat: 'tags this -> string [@@js.get "webkitMaskBoxImageRepeat"]
  
  (**
    @deprecated This is a legacy alias of `maskBorderRepeat`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-border-repeat)
  *)
  val set_webkitMaskBoxImageRepeat: 'tags this -> string -> unit [@@js.set "webkitMaskBoxImageRepeat"]
  
  (**
    @deprecated This is a legacy alias of `maskBorderSlice`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-border-slice)
  *)
  val get_webkitMaskBoxImageSlice: 'tags this -> string [@@js.get "webkitMaskBoxImageSlice"]
  
  (**
    @deprecated This is a legacy alias of `maskBorderSlice`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-border-slice)
  *)
  val set_webkitMaskBoxImageSlice: 'tags this -> string -> unit [@@js.set "webkitMaskBoxImageSlice"]
  
  (**
    @deprecated This is a legacy alias of `maskBorderSource`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-border-source)
  *)
  val get_webkitMaskBoxImageSource: 'tags this -> string [@@js.get "webkitMaskBoxImageSource"]
  
  (**
    @deprecated This is a legacy alias of `maskBorderSource`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-border-source)
  *)
  val set_webkitMaskBoxImageSource: 'tags this -> string -> unit [@@js.set "webkitMaskBoxImageSource"]
  
  (**
    @deprecated This is a legacy alias of `maskBorderWidth`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-border-width)
  *)
  val get_webkitMaskBoxImageWidth: 'tags this -> string [@@js.get "webkitMaskBoxImageWidth"]
  
  (**
    @deprecated This is a legacy alias of `maskBorderWidth`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-border-width)
  *)
  val set_webkitMaskBoxImageWidth: 'tags this -> string -> unit [@@js.set "webkitMaskBoxImageWidth"]
  
  (**
    @deprecated This is a legacy alias of `maskClip`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-clip)
  *)
  val get_webkitMaskClip: 'tags this -> string [@@js.get "webkitMaskClip"]
  
  (**
    @deprecated This is a legacy alias of `maskClip`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-clip)
  *)
  val set_webkitMaskClip: 'tags this -> string -> unit [@@js.set "webkitMaskClip"]
  
  (**
    @deprecated This is a legacy alias of `maskComposite`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-composite)
  *)
  val get_webkitMaskComposite: 'tags this -> string [@@js.get "webkitMaskComposite"]
  
  (**
    @deprecated This is a legacy alias of `maskComposite`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-composite)
  *)
  val set_webkitMaskComposite: 'tags this -> string -> unit [@@js.set "webkitMaskComposite"]
  
  (**
    @deprecated This is a legacy alias of `maskImage`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-image)
  *)
  val get_webkitMaskImage: 'tags this -> string [@@js.get "webkitMaskImage"]
  
  (**
    @deprecated This is a legacy alias of `maskImage`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-image)
  *)
  val set_webkitMaskImage: 'tags this -> string -> unit [@@js.set "webkitMaskImage"]
  
  (**
    @deprecated This is a legacy alias of `maskOrigin`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-origin)
  *)
  val get_webkitMaskOrigin: 'tags this -> string [@@js.get "webkitMaskOrigin"]
  
  (**
    @deprecated This is a legacy alias of `maskOrigin`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-origin)
  *)
  val set_webkitMaskOrigin: 'tags this -> string -> unit [@@js.set "webkitMaskOrigin"]
  
  (**
    @deprecated This is a legacy alias of `maskPosition`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-position)
  *)
  val get_webkitMaskPosition: 'tags this -> string [@@js.get "webkitMaskPosition"]
  
  (**
    @deprecated This is a legacy alias of `maskPosition`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-position)
  *)
  val set_webkitMaskPosition: 'tags this -> string -> unit [@@js.set "webkitMaskPosition"]
  
  (**
    @deprecated This is a legacy alias of `maskRepeat`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-repeat)
  *)
  val get_webkitMaskRepeat: 'tags this -> string [@@js.get "webkitMaskRepeat"]
  
  (**
    @deprecated This is a legacy alias of `maskRepeat`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-repeat)
  *)
  val set_webkitMaskRepeat: 'tags this -> string -> unit [@@js.set "webkitMaskRepeat"]
  
  (**
    @deprecated This is a legacy alias of `maskSize`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-size)
  *)
  val get_webkitMaskSize: 'tags this -> string [@@js.get "webkitMaskSize"]
  
  (**
    @deprecated This is a legacy alias of `maskSize`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/mask-size)
  *)
  val set_webkitMaskSize: 'tags this -> string -> unit [@@js.set "webkitMaskSize"]
  
  (**
    @deprecated This is a legacy alias of `order`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/order)
  *)
  val get_webkitOrder: 'tags this -> string [@@js.get "webkitOrder"]
  
  (**
    @deprecated This is a legacy alias of `order`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/order)
  *)
  val set_webkitOrder: 'tags this -> string -> unit [@@js.set "webkitOrder"]
  
  (**
    @deprecated This is a legacy alias of `perspective`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/perspective)
  *)
  val get_webkitPerspective: 'tags this -> string [@@js.get "webkitPerspective"]
  
  (**
    @deprecated This is a legacy alias of `perspective`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/perspective)
  *)
  val set_webkitPerspective: 'tags this -> string -> unit [@@js.set "webkitPerspective"]
  
  (**
    @deprecated This is a legacy alias of `perspectiveOrigin`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/perspective-origin)
  *)
  val get_webkitPerspectiveOrigin: 'tags this -> string [@@js.get "webkitPerspectiveOrigin"]
  
  (**
    @deprecated This is a legacy alias of `perspectiveOrigin`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/perspective-origin)
  *)
  val set_webkitPerspectiveOrigin: 'tags this -> string -> unit [@@js.set "webkitPerspectiveOrigin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/-webkit-text-fill-color) *)
  val get_webkitTextFillColor: 'tags this -> string [@@js.get "webkitTextFillColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/-webkit-text-fill-color) *)
  val set_webkitTextFillColor: 'tags this -> string -> unit [@@js.set "webkitTextFillColor"]
  
  (**
    @deprecated This is a legacy alias of `textSizeAdjust`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-size-adjust)
  *)
  val get_webkitTextSizeAdjust: 'tags this -> string [@@js.get "webkitTextSizeAdjust"]
  
  (**
    @deprecated This is a legacy alias of `textSizeAdjust`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/text-size-adjust)
  *)
  val set_webkitTextSizeAdjust: 'tags this -> string -> unit [@@js.set "webkitTextSizeAdjust"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke) *)
  val get_webkitTextStroke: 'tags this -> string [@@js.get "webkitTextStroke"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke) *)
  val set_webkitTextStroke: 'tags this -> string -> unit [@@js.set "webkitTextStroke"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke-color) *)
  val get_webkitTextStrokeColor: 'tags this -> string [@@js.get "webkitTextStrokeColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke-color) *)
  val set_webkitTextStrokeColor: 'tags this -> string -> unit [@@js.set "webkitTextStrokeColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke-width) *)
  val get_webkitTextStrokeWidth: 'tags this -> string [@@js.get "webkitTextStrokeWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke-width) *)
  val set_webkitTextStrokeWidth: 'tags this -> string -> unit [@@js.set "webkitTextStrokeWidth"]
  
  (**
    @deprecated This is a legacy alias of `transform`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/transform)
  *)
  val get_webkitTransform: 'tags this -> string [@@js.get "webkitTransform"]
  
  (**
    @deprecated This is a legacy alias of `transform`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/transform)
  *)
  val set_webkitTransform: 'tags this -> string -> unit [@@js.set "webkitTransform"]
  
  (**
    @deprecated This is a legacy alias of `transformOrigin`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/transform-origin)
  *)
  val get_webkitTransformOrigin: 'tags this -> string [@@js.get "webkitTransformOrigin"]
  
  (**
    @deprecated This is a legacy alias of `transformOrigin`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/transform-origin)
  *)
  val set_webkitTransformOrigin: 'tags this -> string -> unit [@@js.set "webkitTransformOrigin"]
  
  (**
    @deprecated This is a legacy alias of `transformStyle`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/transform-style)
  *)
  val get_webkitTransformStyle: 'tags this -> string [@@js.get "webkitTransformStyle"]
  
  (**
    @deprecated This is a legacy alias of `transformStyle`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/transform-style)
  *)
  val set_webkitTransformStyle: 'tags this -> string -> unit [@@js.set "webkitTransformStyle"]
  
  (**
    @deprecated This is a legacy alias of `transition`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/transition)
  *)
  val get_webkitTransition: 'tags this -> string [@@js.get "webkitTransition"]
  
  (**
    @deprecated This is a legacy alias of `transition`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/transition)
  *)
  val set_webkitTransition: 'tags this -> string -> unit [@@js.set "webkitTransition"]
  
  (**
    @deprecated This is a legacy alias of `transitionDelay`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/transition-delay)
  *)
  val get_webkitTransitionDelay: 'tags this -> string [@@js.get "webkitTransitionDelay"]
  
  (**
    @deprecated This is a legacy alias of `transitionDelay`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/transition-delay)
  *)
  val set_webkitTransitionDelay: 'tags this -> string -> unit [@@js.set "webkitTransitionDelay"]
  
  (**
    @deprecated This is a legacy alias of `transitionDuration`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/transition-duration)
  *)
  val get_webkitTransitionDuration: 'tags this -> string [@@js.get "webkitTransitionDuration"]
  
  (**
    @deprecated This is a legacy alias of `transitionDuration`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/transition-duration)
  *)
  val set_webkitTransitionDuration: 'tags this -> string -> unit [@@js.set "webkitTransitionDuration"]
  
  (**
    @deprecated This is a legacy alias of `transitionProperty`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/transition-property)
  *)
  val get_webkitTransitionProperty: 'tags this -> string [@@js.get "webkitTransitionProperty"]
  
  (**
    @deprecated This is a legacy alias of `transitionProperty`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/transition-property)
  *)
  val set_webkitTransitionProperty: 'tags this -> string -> unit [@@js.set "webkitTransitionProperty"]
  
  (**
    @deprecated This is a legacy alias of `transitionTimingFunction`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/transition-timing-function)
  *)
  val get_webkitTransitionTimingFunction: 'tags this -> string [@@js.get "webkitTransitionTimingFunction"]
  
  (**
    @deprecated This is a legacy alias of `transitionTimingFunction`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/transition-timing-function)
  *)
  val set_webkitTransitionTimingFunction: 'tags this -> string -> unit [@@js.set "webkitTransitionTimingFunction"]
  
  (**
    @deprecated This is a legacy alias of `userSelect`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/user-select)
  *)
  val get_webkitUserSelect: 'tags this -> string [@@js.get "webkitUserSelect"]
  
  (**
    @deprecated This is a legacy alias of `userSelect`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/user-select)
  *)
  val set_webkitUserSelect: 'tags this -> string -> unit [@@js.set "webkitUserSelect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/white-space) *)
  val get_whiteSpace: 'tags this -> string [@@js.get "whiteSpace"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/white-space) *)
  val set_whiteSpace: 'tags this -> string -> unit [@@js.set "whiteSpace"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/widows) *)
  val get_widows: 'tags this -> string [@@js.get "widows"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/widows) *)
  val set_widows: 'tags this -> string -> unit [@@js.set "widows"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/width) *)
  val get_width: 'tags this -> string [@@js.get "width"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/width) *)
  val set_width: 'tags this -> string -> unit [@@js.set "width"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/will-change) *)
  val get_willChange: 'tags this -> string [@@js.get "willChange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/will-change) *)
  val set_willChange: 'tags this -> string -> unit [@@js.set "willChange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/word-break) *)
  val get_wordBreak: 'tags this -> string [@@js.get "wordBreak"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/word-break) *)
  val set_wordBreak: 'tags this -> string -> unit [@@js.set "wordBreak"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/word-spacing) *)
  val get_wordSpacing: 'tags this -> string [@@js.get "wordSpacing"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/word-spacing) *)
  val set_wordSpacing: 'tags this -> string -> unit [@@js.set "wordSpacing"]
  
  (** @deprecated  *)
  val get_wordWrap: 'tags this -> string [@@js.get "wordWrap"]
  
  (** @deprecated  *)
  val set_wordWrap: 'tags this -> string -> unit [@@js.set "wordWrap"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/writing-mode) *)
  val get_writingMode: 'tags this -> string [@@js.get "writingMode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/writing-mode) *)
  val set_writingMode: 'tags this -> string -> unit [@@js.set "writingMode"]
  val get_x: 'tags this -> string [@@js.get "x"]
  val set_x: 'tags this -> string -> unit [@@js.set "x"]
  val get_y: 'tags this -> string [@@js.get "y"]
  val set_y: 'tags this -> string -> unit [@@js.set "y"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/z-index) *)
  val get_zIndex: 'tags this -> string [@@js.get "zIndex"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/CSS/z-index) *)
  val set_zIndex: 'tags this -> string -> unit [@@js.set "zIndex"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/getPropertyPriority) *)
  val getPropertyPriority: 'tags this -> property:string -> string [@@js.call "getPropertyPriority"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/getPropertyValue) *)
  val getPropertyValue: 'tags this -> property:string -> string [@@js.call "getPropertyValue"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/item) *)
  val item: 'tags this -> index:float -> string [@@js.call "item"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/removeProperty) *)
  val removeProperty: 'tags this -> property:string -> string [@@js.call "removeProperty"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/setProperty) *)
  val setProperty: 'tags this -> property:string -> value:string option -> ?priority:string -> unit -> unit [@@js.call "setProperty"]
  val get: 'tags this -> float -> string [@@js.index_get]
  val set: 'tags this -> float -> string -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  A single CSS style sheet. It inherits properties and methods from its parent, StyleSheet.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet)
*)
and[@js.scope "CSSStyleSheet"] CSSStyleSheet : sig
  type t = [`CSSStyleSheet | `StyleSheet] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSStyleSheet | `StyleSheet]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSStyleSheet | `StyleSheet]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSStyleSheet ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/cssRules) *)
  val get_cssRules: 'tags this -> CSSRuleList.t [@@js.get "cssRules"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/ownerRule) *)
  val get_ownerRule: 'tags this -> CSSRule.t option [@@js.get "ownerRule"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/rules) *)
  val get_rules: 'tags this -> CSSRuleList.t [@@js.get "rules"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/addRule) *)
  val addRule: 'tags this -> ?selector:string -> ?style:string -> ?index:float -> unit -> float [@@js.call "addRule"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/deleteRule) *)
  val deleteRule: 'tags this -> index:float -> unit [@@js.call "deleteRule"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/insertRule) *)
  val insertRule: 'tags this -> rule:string -> ?index:float -> unit -> float [@@js.call "insertRule"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/removeRule) *)
  val removeRule: 'tags this -> ?index:float -> unit -> unit [@@js.call "removeRule"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/replace) *)
  val replace: 'tags this -> text:string -> t Promise.t [@@js.call "replace"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/replaceSync) *)
  val replaceSync: 'tags this -> text:string -> unit [@@js.call "replaceSync"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: ?options:CSSStyleSheetInit.t -> unit -> t [@@js.create]
end

(**
  Provides a storage mechanism for Request / Response object pairs that are cached, for example as part of the ServiceWorker life cycle. Note that the Cache interface is exposed to windowed scopes as well as workers. You don't have to use it in conjunction with service workers, even though it is defined in the service worker spec.
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Cache)
*)
and[@js.scope "Cache"] Cache : sig
  type t = [`Cache] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Cache]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Cache]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Cache ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Cache/addAll) *)
  val addAll: 'tags this -> requests:RequestInfo.t Iterable.t -> unit Promise.t [@@js.call "addAll"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Cache/add) *)
  val add: 'tags this -> request:([`U1 of RequestInfo.t | `U2 of URL.t] [@js.union]) -> unit Promise.t [@@js.call "add"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Cache/addAll) *)
  val addAll': 'tags this -> requests:RequestInfo.t list -> unit Promise.t [@@js.call "addAll"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Cache/delete) *)
  val delete: 'tags this -> request:([`U1 of RequestInfo.t | `U2 of URL.t] [@js.union]) -> ?options:CacheQueryOptions.t -> unit -> bool Promise.t [@@js.call "delete"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Cache/keys) *)
  val keys: 'tags this -> ?request:([`U1 of RequestInfo.t | `U2 of URL.t] [@js.union]) -> ?options:CacheQueryOptions.t -> unit -> Request.t list Promise.t [@@js.call "keys"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Cache/match) *)
  val match_: 'tags this -> request:([`U1 of RequestInfo.t | `U2 of URL.t] [@js.union]) -> ?options:CacheQueryOptions.t -> unit -> Response.t option Promise.t [@@js.call "match"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Cache/matchAll) *)
  val matchAll: 'tags this -> ?request:([`U1 of RequestInfo.t | `U2 of URL.t] [@js.union]) -> ?options:CacheQueryOptions.t -> unit -> Response.t list Promise.t [@@js.call "matchAll"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Cache/put) *)
  val put: 'tags this -> request:([`U1 of RequestInfo.t | `U2 of URL.t] [@js.union]) -> response:Response.t -> unit Promise.t [@@js.call "put"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  The storage for Cache objects.
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CacheStorage)
*)
and[@js.scope "CacheStorage"] CacheStorage : sig
  type t = [`CacheStorage] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CacheStorage]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CacheStorage]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CacheStorage ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CacheStorage/delete) *)
  val delete: 'tags this -> cacheName:string -> bool Promise.t [@@js.call "delete"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CacheStorage/has) *)
  val has: 'tags this -> cacheName:string -> bool Promise.t [@@js.call "has"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CacheStorage/keys) *)
  val keys: 'tags this -> string list Promise.t [@@js.call "keys"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CacheStorage/match) *)
  val match_: 'tags this -> request:([`U1 of RequestInfo.t | `U2 of URL.t] [@js.union]) -> ?options:MultiCacheQueryOptions.t -> unit -> Response.t option Promise.t [@@js.call "match"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CacheStorage/open) *)
  val open_: 'tags this -> cacheName:string -> Cache.t Promise.t [@@js.call "open"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
and CanvasDrawImage : sig
  type t = [`CanvasDrawImage] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasDrawImage]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasDrawImage]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasDrawImage ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/drawImage) *)
  val drawImage: 'tags this -> image:CanvasImageSource.t -> dx:float -> dy:float -> unit [@@js.call "drawImage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/drawImage) *)
  val drawImage': 'tags this -> image:CanvasImageSource.t -> dx:float -> dy:float -> dw:float -> dh:float -> unit [@@js.call "drawImage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/drawImage) *)
  val drawImage'': 'tags this -> image:CanvasImageSource.t -> sx:float -> sy:float -> sw:float -> sh:float -> dx:float -> dy:float -> dw:float -> dh:float -> unit [@@js.call "drawImage"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
and CanvasFillStrokeStyles : sig
  type t = [`CanvasFillStrokeStyles] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasFillStrokeStyles]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasFillStrokeStyles]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasFillStrokeStyles ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fillStyle) *)
  val get_fillStyle: 'tags this -> ([`String of string | `Other of (CanvasGradient.t, CanvasPattern.t) union2] [@js.union on_field "dummy"]) Primitive.t [@@js.get "fillStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fillStyle) *)
  val set_fillStyle: 'tags this -> ([`U1 of string | `U2 of CanvasGradient.t | `U3 of CanvasPattern.t] [@js.union]) -> unit [@@js.set "fillStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/strokeStyle) *)
  val get_strokeStyle: 'tags this -> ([`String of string | `Other of (CanvasGradient.t, CanvasPattern.t) union2] [@js.union on_field "dummy"]) Primitive.t [@@js.get "strokeStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/strokeStyle) *)
  val set_strokeStyle: 'tags this -> ([`U1 of string | `U2 of CanvasGradient.t | `U3 of CanvasPattern.t] [@js.union]) -> unit [@@js.set "strokeStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/createConicGradient) *)
  val createConicGradient: 'tags this -> startAngle:float -> x:float -> y:float -> CanvasGradient.t [@@js.call "createConicGradient"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/createLinearGradient) *)
  val createLinearGradient: 'tags this -> x0:float -> y0:float -> x1:float -> y1:float -> CanvasGradient.t [@@js.call "createLinearGradient"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/createPattern) *)
  val createPattern: 'tags this -> image:CanvasImageSource.t -> repetition:string option -> CanvasPattern.t option [@@js.call "createPattern"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/createRadialGradient) *)
  val createRadialGradient: 'tags this -> x0:float -> y0:float -> r0:float -> x1:float -> y1:float -> r1:float -> CanvasGradient.t [@@js.call "createRadialGradient"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
and CanvasImageSource : sig
  type t = (HTMLCanvasElement.t, HTMLOrSVGImageElement.t, HTMLVideoElement.t, ImageBitmap.t, OffscreenCanvas.t, VideoFrame.t) union6
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  The CanvasRenderingContext2D interface, part of the Canvas API, provides the 2D rendering context for the drawing surface of a <canvas> element. It is used for drawing shapes, text, images, and other objects.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D)
*)
and[@js.scope "CanvasRenderingContext2D"] CanvasRenderingContext2D : sig
  type t = [`CanvasCompositing | `CanvasDrawImage | `CanvasDrawPath | `CanvasFillStrokeStyles | `CanvasFilters | `CanvasImageData | `CanvasImageSmoothing | `CanvasPath | `CanvasPathDrawingStyles | `CanvasRect | `CanvasRenderingContext2D | `CanvasShadowStyles | `CanvasState | `CanvasText | `CanvasTextDrawingStyles | `CanvasTransform | `CanvasUserInterface] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasCompositing | `CanvasDrawImage | `CanvasDrawPath | `CanvasFillStrokeStyles | `CanvasFilters | `CanvasImageData | `CanvasImageSmoothing | `CanvasPath | `CanvasPathDrawingStyles | `CanvasRect | `CanvasRenderingContext2D | `CanvasShadowStyles | `CanvasState | `CanvasText | `CanvasTextDrawingStyles | `CanvasTransform | `CanvasUserInterface]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasCompositing | `CanvasDrawImage | `CanvasDrawPath | `CanvasFillStrokeStyles | `CanvasFilters | `CanvasImageData | `CanvasImageSmoothing | `CanvasPath | `CanvasPathDrawingStyles | `CanvasRect | `CanvasRenderingContext2D | `CanvasShadowStyles | `CanvasState | `CanvasText | `CanvasTextDrawingStyles | `CanvasTransform | `CanvasUserInterface]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasRenderingContext2D ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/canvas) *)
  val get_canvas: 'tags this -> HTMLCanvasElement.t [@@js.get "canvas"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/getContextAttributes) *)
  val getContextAttributes: 'tags this -> CanvasRenderingContext2DSettings.t [@@js.call "getContextAttributes"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
and CanvasUserInterface : sig
  type t = [`CanvasUserInterface] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasUserInterface]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasUserInterface]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasUserInterface ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/drawFocusIfNeeded) *)
  val drawFocusIfNeeded: 'tags this -> element:Element.t -> unit [@@js.call "drawFocusIfNeeded"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/drawFocusIfNeeded) *)
  val drawFocusIfNeeded': 'tags this -> path:Path2D.t -> element:Element.t -> unit [@@js.call "drawFocusIfNeeded"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The CharacterData abstract interface represents a Node object that contains characters. This is an abstract interface, meaning there aren't any object of type CharacterData: it is implemented by other interfaces, like Text, Comment, or ProcessingInstruction which aren't abstract.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CharacterData)
*)
and[@js.scope "CharacterData"] CharacterData : sig
  type t = [`CharacterData | `ChildNode | `EventTarget | `Node | `NonDocumentTypeChildNode] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CharacterData | `ChildNode | `EventTarget | `Node | `NonDocumentTypeChildNode]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CharacterData | `ChildNode | `EventTarget | `Node | `NonDocumentTypeChildNode]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CharacterData ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CharacterData/data) *)
  val get_data: 'tags this -> string [@@js.get "data"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CharacterData/data) *)
  val set_data: 'tags this -> string -> unit [@@js.set "data"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CharacterData/length) *)
  val get_length: 'tags this -> float [@@js.get "length"]
  
  (**
    Returns the node document. Returns null for documents.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/ownerDocument)
  *)
  val get_ownerDocument: 'tags this -> Document.t [@@js.get "ownerDocument"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CharacterData/appendData) *)
  val appendData: 'tags this -> data:string -> unit [@@js.call "appendData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CharacterData/deleteData) *)
  val deleteData: 'tags this -> offset:float -> count:float -> unit [@@js.call "deleteData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CharacterData/insertData) *)
  val insertData: 'tags this -> offset:float -> data:string -> unit [@@js.call "insertData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CharacterData/replaceData) *)
  val replaceData: 'tags this -> offset:float -> count:float -> data:string -> unit [@@js.call "replaceData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CharacterData/substringData) *)
  val substringData: 'tags this -> offset:float -> count:float -> string [@@js.call "substringData"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
and ChildNode : sig
  type t = [`ChildNode | `EventTarget | `Node] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ChildNode | `EventTarget | `Node]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ChildNode | `EventTarget | `Node]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ChildNode ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Inserts nodes just after node, while replacing strings in nodes with equivalent Text nodes.
    
    Throws a "HierarchyRequestError" DOMException if the constraints of the node tree are violated.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CharacterData/after)
  *)
  val after: 'tags this -> nodes:(([`U1 of Node.t | `U2 of string] [@js.union]) list [@js.variadic]) -> unit [@@js.call "after"]
  
  (**
    Inserts nodes just before node, while replacing strings in nodes with equivalent Text nodes.
    
    Throws a "HierarchyRequestError" DOMException if the constraints of the node tree are violated.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CharacterData/before)
  *)
  val before: 'tags this -> nodes:(([`U1 of Node.t | `U2 of string] [@js.union]) list [@js.variadic]) -> unit [@@js.call "before"]
  
  (**
    Removes node.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CharacterData/remove)
  *)
  val remove: 'tags this -> unit [@@js.call "remove"]
  
  (**
    Replaces node with nodes, while replacing strings in nodes with equivalent Text nodes.
    
    Throws a "HierarchyRequestError" DOMException if the constraints of the node tree are violated.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CharacterData/replaceWith)
  *)
  val replaceWith: 'tags this -> nodes:(([`U1 of Node.t | `U2 of string] [@js.union]) list [@js.variadic]) -> unit [@@js.call "replaceWith"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Events providing information related to modification of the clipboard, that is cut, copy, and paste events.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ClipboardEvent)
*)
and[@js.scope "ClipboardEvent"] ClipboardEvent : sig
  type t = [`ClipboardEvent | `Event] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ClipboardEvent | `Event]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ClipboardEvent | `Event]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ClipboardEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ClipboardEvent/clipboardData) *)
  val get_clipboardData: 'tags this -> DataTransfer.t option [@@js.get "clipboardData"]
  val create: ?clipboardData:DataTransfer.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> ?eventInitDict:ClipboardEventInit.t -> unit -> t [@@js.create]
end
and ClipboardEventInit : sig
  type t = [`ClipboardEventInit | `EventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ClipboardEventInit | `EventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ClipboardEventInit | `EventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ClipboardEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_clipboardData: 'tags this -> DataTransfer.t option [@@js.get "clipboardData"]
  val set_clipboardData: 'tags this -> DataTransfer.t option -> unit [@@js.set "clipboardData"]
  val create: ?clipboardData:DataTransfer.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Textual notations within markup; although it is generally not visually shown, such comments are available to be read in the source view.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Comment)
*)
and[@js.scope "Comment"] Comment : sig
  type t = [`CharacterData | `ChildNode | `Comment | `EventTarget | `Node | `NonDocumentTypeChildNode] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CharacterData | `ChildNode | `Comment | `EventTarget | `Node | `NonDocumentTypeChildNode]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CharacterData | `ChildNode | `Comment | `EventTarget | `Node | `NonDocumentTypeChildNode]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Comment ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: ?data:string -> unit -> t [@@js.create]
end

(**
  The DOM CompositionEvent represents events that occur due to the user indirectly entering text.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CompositionEvent)
*)
and[@js.scope "CompositionEvent"] CompositionEvent : sig
  type t = [`CompositionEvent | `Event | `UIEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CompositionEvent | `Event | `UIEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CompositionEvent | `Event | `UIEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CompositionEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CompositionEvent/data) *)
  val get_data: 'tags this -> string [@@js.get "data"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CompositionEvent/initCompositionEvent) *)
  val initCompositionEvent: 'tags this -> typeArg:string -> ?bubblesArg:bool -> ?cancelableArg:bool -> ?viewArg:WindowProxy.t option -> ?dataArg:string -> unit -> unit [@@js.call "initCompositionEvent"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: type_:string -> ?eventInitDict:CompositionEventInit.t -> unit -> t [@@js.create]
end
and CompositionEventInit : sig
  type t = [`CompositionEventInit | `EventInit | `UIEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CompositionEventInit | `EventInit | `UIEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CompositionEventInit | `EventInit | `UIEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CompositionEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_data: 'tags this -> string option [@@js.get "data"]
  val set_data: 'tags this -> string -> unit [@@js.set "data"]
  val create: ?data:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
and CustomElementConstructor : sig
  type t = [`CustomElementConstructor] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CustomElementConstructor]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CustomElementConstructor]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CustomElementConstructor ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val create: 'tags this -> params:(any list [@js.variadic]) -> HTMLElement.t [@@js.apply_newable]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CustomElementRegistry) *)
and[@js.scope "CustomElementRegistry"] CustomElementRegistry : sig
  type t = [`CustomElementRegistry] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CustomElementRegistry]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CustomElementRegistry]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CustomElementRegistry ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CustomElementRegistry/define) *)
  val define: 'tags this -> name:string -> constructor:CustomElementConstructor.t -> ?options:ElementDefinitionOptions.t -> unit -> unit [@@js.call "define"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CustomElementRegistry/get) *)
  val get_: 'tags this -> name:string -> CustomElementConstructor.t option [@@js.call "get"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CustomElementRegistry/getName) *)
  val getName: 'tags this -> constructor:CustomElementConstructor.t -> string option [@@js.call "getName"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CustomElementRegistry/upgrade) *)
  val upgrade: 'tags this -> root:Node.t -> unit [@@js.call "upgrade"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CustomElementRegistry/whenDefined) *)
  val whenDefined: 'tags this -> name:string -> CustomElementConstructor.t Promise.t [@@js.call "whenDefined"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  An object providing methods which are not dependent on any particular document. Such an object is returned by the Document.implementation property.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMImplementation)
*)
and[@js.scope "DOMImplementation"] DOMImplementation : sig
  type t = [`DOMImplementation] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DOMImplementation]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DOMImplementation]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DOMImplementation ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMImplementation/createDocument) *)
  val createDocument: 'tags this -> namespace:string option -> qualifiedName:string option -> ?doctype:DocumentType.t option -> unit -> XMLDocument.t [@@js.call "createDocument"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMImplementation/createDocumentType) *)
  val createDocumentType: 'tags this -> qualifiedName:string -> publicId:string -> systemId:string -> DocumentType.t [@@js.call "createDocumentType"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMImplementation/createHTMLDocument) *)
  val createHTMLDocument: 'tags this -> ?title:string -> unit -> Document.t [@@js.call "createHTMLDocument"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMImplementation/hasFeature) *)
  val hasFeature: 'tags this -> args:(any list [@js.variadic]) -> ([`L_b_true[@js true]] [@js.enum]) [@@js.call "hasFeature"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Used to hold the data that is being dragged during a drag and drop operation. It may hold one or more data items, each of one or more data types. For more information about drag and drop, see HTML Drag and Drop API.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DataTransfer)
*)
and[@js.scope "DataTransfer"] DataTransfer : sig
  type t = [`DataTransfer] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DataTransfer]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DataTransfer]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DataTransfer ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the kind of operation that is currently selected. If the kind of operation isn't one of those that is allowed by the effectAllowed attribute, then the operation will fail.
    
    Can be set, to change the selected operation.
    
    The possible values are "none", "copy", "link", and "move".
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DataTransfer/dropEffect)
  *)
  val get_dropEffect: 'tags this -> ([`L_s283_copy[@js "copy"] | `L_s566_link[@js "link"] | `L_s636_move[@js "move"] | `L_s685_none[@js "none"]] [@js.enum]) [@@js.get "dropEffect"]
  
  (**
    Returns the kind of operation that is currently selected. If the kind of operation isn't one of those that is allowed by the effectAllowed attribute, then the operation will fail.
    
    Can be set, to change the selected operation.
    
    The possible values are "none", "copy", "link", and "move".
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DataTransfer/dropEffect)
  *)
  val set_dropEffect: 'tags this -> ([`U1 of ([`L_s685_none[@js "none"]] [@js.enum]) | `U2 of ([`L_s283_copy[@js "copy"]] [@js.enum]) | `U3 of ([`L_s566_link[@js "link"]] [@js.enum]) | `U4 of ([`L_s636_move[@js "move"]] [@js.enum])] [@js.union]) -> unit [@@js.set "dropEffect"]
  
  (**
    Returns the kinds of operations that are to be allowed.
    
    Can be set (during the dragstart event), to change the allowed operations.
    
    The possible values are "none", "copy", "copyLink", "copyMove", "link", "linkMove", "move", "all", and "uninitialized",
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DataTransfer/effectAllowed)
  *)
  val get_effectAllowed: 'tags this -> ([`L_s1009_uninitialized[@js "uninitialized"] | `L_s136_all[@js "all"] | `L_s283_copy[@js "copy"] | `L_s284_copyLink[@js "copyLink"] | `L_s285_copyMove[@js "copyMove"] | `L_s566_link[@js "link"] | `L_s567_linkMove[@js "linkMove"] | `L_s636_move[@js "move"] | `L_s685_none[@js "none"]] [@js.enum]) [@@js.get "effectAllowed"]
  
  (**
    Returns the kinds of operations that are to be allowed.
    
    Can be set (during the dragstart event), to change the allowed operations.
    
    The possible values are "none", "copy", "copyLink", "copyMove", "link", "linkMove", "move", "all", and "uninitialized",
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DataTransfer/effectAllowed)
  *)
  val set_effectAllowed: 'tags this -> ([`U1 of ([`L_s685_none[@js "none"]] [@js.enum]) | `U2 of ([`L_s283_copy[@js "copy"]] [@js.enum]) | `U3 of ([`L_s284_copyLink[@js "copyLink"]] [@js.enum]) | `U4 of ([`L_s285_copyMove[@js "copyMove"]] [@js.enum]) | `U5 of ([`L_s566_link[@js "link"]] [@js.enum]) | `U6 of ([`L_s567_linkMove[@js "linkMove"]] [@js.enum]) | `U7 of ([`L_s636_move[@js "move"]] [@js.enum]) | `U8 of ([`L_s136_all[@js "all"]] [@js.enum]) | `U9 of ([`L_s1009_uninitialized[@js "uninitialized"]] [@js.enum])] [@js.union]) -> unit [@@js.set "effectAllowed"]
  
  (**
    Returns a FileList of the files being dragged, if any.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DataTransfer/files)
  *)
  val get_files: 'tags this -> FileList.t [@@js.get "files"]
  
  (**
    Returns a DataTransferItemList object, with the drag data.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DataTransfer/items)
  *)
  val get_items: 'tags this -> DataTransferItemList.t [@@js.get "items"]
  
  (**
    Returns a frozen array listing the formats that were set in the dragstart event. In addition, if any files are being dragged, then one of the types will be the string "Files".
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DataTransfer/types)
  *)
  val get_types: 'tags this -> string list [@@js.get "types"]
  
  (**
    Removes the data of the specified formats. Removes all data if the argument is omitted.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DataTransfer/clearData)
  *)
  val clearData: 'tags this -> ?format:string -> unit -> unit [@@js.call "clearData"]
  
  (**
    Returns the specified data. If there is no such data, returns the empty string.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DataTransfer/getData)
  *)
  val getData: 'tags this -> format:string -> string [@@js.call "getData"]
  
  (**
    Adds the specified data.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DataTransfer/setData)
  *)
  val setData: 'tags this -> format:string -> data:string -> unit [@@js.call "setData"]
  
  (**
    Uses the given element to update the drag feedback, replacing any previously specified feedback.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DataTransfer/setDragImage)
  *)
  val setDragImage: 'tags this -> image:Element.t -> x:float -> y:float -> unit [@@js.call "setDragImage"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document)
*)
and[@js.scope "Document"] Document : sig
  type t = [`Document | `DocumentOrShadowRoot | `EventTarget | `FontFaceSource | `GlobalEventHandlers | `Node | `NonElementParentNode | `ParentNode | `XPathEvaluatorBase] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Document | `DocumentOrShadowRoot | `EventTarget | `FontFaceSource | `GlobalEventHandlers | `Node | `NonElementParentNode | `ParentNode | `XPathEvaluatorBase]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Document | `DocumentOrShadowRoot | `EventTarget | `FontFaceSource | `GlobalEventHandlers | `Node | `NonElementParentNode | `ParentNode | `XPathEvaluatorBase]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Document ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Sets or gets the URL for the current document.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/URL)
  *)
  val get_URL: 'tags this -> string [@@js.get "URL"]
  
  (**
    Sets or gets the color of all active links in the document.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/alinkColor)
  *)
  val get_alinkColor: 'tags this -> string [@@js.get "alinkColor"]
  
  (**
    Sets or gets the color of all active links in the document.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/alinkColor)
  *)
  val set_alinkColor: 'tags this -> string -> unit [@@js.set "alinkColor"]
  
  (**
    Returns a reference to the collection of elements contained by the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/all)
  *)
  val get_all: 'tags this -> HTMLAllCollection.t [@@js.get "all"]
  
  (**
    Retrieves a collection of all a objects that have a name and/or id property. Objects in this collection are in HTML source order.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/anchors)
  *)
  val get_anchors: 'tags this -> HTMLAnchorElement.t HTMLCollectionOf.t [@@js.get "anchors"]
  
  (**
    Retrieves a collection of all applet objects in the document.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/applets)
  *)
  val get_applets: 'tags this -> HTMLCollection.t [@@js.get "applets"]
  
  (**
    Deprecated. Sets or retrieves a value that indicates the background color behind the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/bgColor)
  *)
  val get_bgColor: 'tags this -> string [@@js.get "bgColor"]
  
  (**
    Deprecated. Sets or retrieves a value that indicates the background color behind the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/bgColor)
  *)
  val set_bgColor: 'tags this -> string -> unit [@@js.set "bgColor"]
  
  (**
    Specifies the beginning and end of the document body.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/body)
  *)
  val get_body: 'tags this -> HTMLElement.t [@@js.get "body"]
  
  (**
    Specifies the beginning and end of the document body.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/body)
  *)
  val set_body: 'tags this -> HTMLElement.t -> unit [@@js.set "body"]
  
  (**
    Returns document's encoding.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/characterSet)
  *)
  val get_characterSet: 'tags this -> string [@@js.get "characterSet"]
  
  (**
    Gets or sets the character set used to encode the object.
    @deprecated This is a legacy alias of `characterSet`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/characterSet)
  *)
  val get_charset: 'tags this -> string [@@js.get "charset"]
  
  (**
    Gets a value that indicates whether standards-compliant mode is switched on for the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/compatMode)
  *)
  val get_compatMode: 'tags this -> string [@@js.get "compatMode"]
  
  (**
    Returns document's content type.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/contentType)
  *)
  val get_contentType: 'tags this -> string [@@js.get "contentType"]
  
  (**
    Returns the HTTP cookies that apply to the Document. If there are no cookies or cookies can't be applied to this resource, the empty string will be returned.
    
    Can be set, to add a new cookie to the element's set of HTTP cookies.
    
    If the contents are sandboxed into a unique origin (e.g. in an iframe with the sandbox attribute), a "SecurityError" DOMException will be thrown on getting and setting.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/cookie)
  *)
  val get_cookie: 'tags this -> string [@@js.get "cookie"]
  
  (**
    Returns the HTTP cookies that apply to the Document. If there are no cookies or cookies can't be applied to this resource, the empty string will be returned.
    
    Can be set, to add a new cookie to the element's set of HTTP cookies.
    
    If the contents are sandboxed into a unique origin (e.g. in an iframe with the sandbox attribute), a "SecurityError" DOMException will be thrown on getting and setting.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/cookie)
  *)
  val set_cookie: 'tags this -> string -> unit [@@js.set "cookie"]
  
  (**
    Returns the script element, or the SVG script element, that is currently executing, as long as the element represents a classic script. In the case of reentrant script execution, returns the one that most recently started executing amongst those that have not yet finished executing.
    
    Returns null if the Document is not currently executing a script or SVG script element (e.g., because the running script is an event handler, or a timeout), or if the currently executing script or SVG script element represents a module script.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/currentScript)
  *)
  val get_currentScript: 'tags this -> HTMLOrSVGScriptElement.t option [@@js.get "currentScript"]
  
  (**
    Returns the Window object of the active document.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/defaultView)
  *)
  val get_defaultView: 'tags this -> (WindowProxy.t, (* FIXME: unknown type 'typeof globalThis' *)any) intersection2 option [@@js.get "defaultView"]
  
  (**
    Sets or gets a value that indicates whether the document can be edited.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/designMode)
  *)
  val get_designMode: 'tags this -> string [@@js.get "designMode"]
  
  (**
    Sets or gets a value that indicates whether the document can be edited.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/designMode)
  *)
  val set_designMode: 'tags this -> string -> unit [@@js.set "designMode"]
  
  (**
    Sets or retrieves a value that indicates the reading order of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/dir)
  *)
  val get_dir: 'tags this -> string [@@js.get "dir"]
  
  (**
    Sets or retrieves a value that indicates the reading order of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/dir)
  *)
  val set_dir: 'tags this -> string -> unit [@@js.set "dir"]
  
  (**
    Gets an object representing the document type declaration associated with the current document.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/doctype)
  *)
  val get_doctype: 'tags this -> DocumentType.t option [@@js.get "doctype"]
  
  (**
    Gets a reference to the root node of the document.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/documentElement)
  *)
  val get_documentElement: 'tags this -> HTMLElement.t [@@js.get "documentElement"]
  
  (**
    Returns document's URL.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/documentURI)
  *)
  val get_documentURI: 'tags this -> string [@@js.get "documentURI"]
  
  (**
    Sets or gets the security domain of the document.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/domain)
  *)
  val get_domain: 'tags this -> string [@@js.get "domain"]
  
  (**
    Sets or gets the security domain of the document.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/domain)
  *)
  val set_domain: 'tags this -> string -> unit [@@js.set "domain"]
  
  (**
    Retrieves a collection of all embed objects in the document.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/embeds)
  *)
  val get_embeds: 'tags this -> HTMLEmbedElement.t HTMLCollectionOf.t [@@js.get "embeds"]
  
  (**
    Sets or gets the foreground (text) color of the document.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/fgColor)
  *)
  val get_fgColor: 'tags this -> string [@@js.get "fgColor"]
  
  (**
    Sets or gets the foreground (text) color of the document.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/fgColor)
  *)
  val set_fgColor: 'tags this -> string -> unit [@@js.set "fgColor"]
  
  (**
    Retrieves a collection, in source order, of all form objects in the document.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/forms)
  *)
  val get_forms: 'tags this -> HTMLFormElement.t HTMLCollectionOf.t [@@js.get "forms"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/fullscreen) *)
  val get_fullscreen: 'tags this -> bool [@@js.get "fullscreen"]
  
  (**
    Returns true if document has the ability to display elements fullscreen and fullscreen is supported, or false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/fullscreenEnabled)
  *)
  val get_fullscreenEnabled: 'tags this -> bool [@@js.get "fullscreenEnabled"]
  
  (**
    Returns the head element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/head)
  *)
  val get_head: 'tags this -> HTMLHeadElement.t [@@js.get "head"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/hidden) *)
  val get_hidden: 'tags this -> bool [@@js.get "hidden"]
  
  (**
    Retrieves a collection, in source order, of img objects in the document.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/images)
  *)
  val get_images: 'tags this -> HTMLImageElement.t HTMLCollectionOf.t [@@js.get "images"]
  
  (**
    Gets the implementation object of the current document.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/implementation)
  *)
  val get_implementation: 'tags this -> DOMImplementation.t [@@js.get "implementation"]
  
  (**
    Returns the character encoding used to create the webpage that is loaded into the document object.
    @deprecated This is a legacy alias of `characterSet`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/characterSet)
  *)
  val get_inputEncoding: 'tags this -> string [@@js.get "inputEncoding"]
  
  (**
    Gets the date that the page was last modified, if the page supplies one.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/lastModified)
  *)
  val get_lastModified: 'tags this -> string [@@js.get "lastModified"]
  
  (**
    Sets or gets the color of the document links.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/linkColor)
  *)
  val get_linkColor: 'tags this -> string [@@js.get "linkColor"]
  
  (**
    Sets or gets the color of the document links.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/linkColor)
  *)
  val set_linkColor: 'tags this -> string -> unit [@@js.set "linkColor"]
  
  (**
    Retrieves a collection of all a objects that specify the href property and all area objects in the document.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/links)
  *)
  val get_links: 'tags this -> (HTMLAnchorElement.t, HTMLAreaElement.t) union2 HTMLCollectionOf.t [@@js.get "links"]
  
  (**
    Contains information about the current URL.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/location)
  *)
  val get_location: 'tags this -> Location.t [@@js.get "location"]
  
  (**
    Contains information about the current URL.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/location)
  *)
  val set_location: 'tags this -> ([`U1 of string | `U2 of Location.t] [@js.union]) -> unit [@@js.set "location"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/fullscreenchange_event) *)
  val get_onfullscreenchange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onfullscreenchange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/fullscreenchange_event) *)
  val set_onfullscreenchange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onfullscreenchange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/fullscreenerror_event) *)
  val get_onfullscreenerror: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onfullscreenerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/fullscreenerror_event) *)
  val set_onfullscreenerror: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onfullscreenerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/pointerlockchange_event) *)
  val get_onpointerlockchange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onpointerlockchange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/pointerlockchange_event) *)
  val set_onpointerlockchange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onpointerlockchange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/pointerlockerror_event) *)
  val get_onpointerlockerror: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onpointerlockerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/pointerlockerror_event) *)
  val set_onpointerlockerror: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onpointerlockerror"]
  
  (**
    Fires when the state of the object has changed.
    @param ev The event
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/readystatechange_event)
  *)
  val get_onreadystatechange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onreadystatechange"]
  
  (**
    Fires when the state of the object has changed.
    @param ev The event
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/readystatechange_event)
  *)
  val set_onreadystatechange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onreadystatechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/visibilitychange_event) *)
  val get_onvisibilitychange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onvisibilitychange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/visibilitychange_event) *)
  val set_onvisibilitychange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onvisibilitychange"]
  
  (**
    Returns the node document. Returns null for documents.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/ownerDocument)
  *)
  val get_ownerDocument: 'tags this -> null [@@js.get "ownerDocument"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/pictureInPictureEnabled) *)
  val get_pictureInPictureEnabled: 'tags this -> bool [@@js.get "pictureInPictureEnabled"]
  
  (**
    Return an HTMLCollection of the embed elements in the Document.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/plugins)
  *)
  val get_plugins: 'tags this -> HTMLEmbedElement.t HTMLCollectionOf.t [@@js.get "plugins"]
  
  (**
    Retrieves a value that indicates the current state of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/readyState)
  *)
  val get_readyState: 'tags this -> DocumentReadyState.t [@@js.get "readyState"]
  
  (**
    Gets the URL of the location that referred the user to the current page.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/referrer)
  *)
  val get_referrer: 'tags this -> string [@@js.get "referrer"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/rootElement) *)
  val get_rootElement: 'tags this -> SVGSVGElement.t option [@@js.get "rootElement"]
  
  (**
    Retrieves a collection of all script objects in the document.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/scripts)
  *)
  val get_scripts: 'tags this -> HTMLScriptElement.t HTMLCollectionOf.t [@@js.get "scripts"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/scrollingElement) *)
  val get_scrollingElement: 'tags this -> Element.t option [@@js.get "scrollingElement"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/timeline) *)
  val get_timeline: 'tags this -> DocumentTimeline.t [@@js.get "timeline"]
  
  (**
    Contains the title of the document.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/title)
  *)
  val get_title: 'tags this -> string [@@js.get "title"]
  
  (**
    Contains the title of the document.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/title)
  *)
  val set_title: 'tags this -> string -> unit [@@js.set "title"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/visibilityState) *)
  val get_visibilityState: 'tags this -> DocumentVisibilityState.t [@@js.get "visibilityState"]
  
  (**
    Sets or gets the color of the links that the user has visited.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/vlinkColor)
  *)
  val get_vlinkColor: 'tags this -> string [@@js.get "vlinkColor"]
  
  (**
    Sets or gets the color of the links that the user has visited.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/vlinkColor)
  *)
  val set_vlinkColor: 'tags this -> string -> unit [@@js.set "vlinkColor"]
  
  (**
    Moves node from another document and returns it.
    
    If node is a document, throws a "NotSupportedError" DOMException or, if node is a shadow root, throws a "HierarchyRequestError" DOMException.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/adoptNode)
  *)
  val adoptNode: 'tags this -> node:'T -> 'T [@@js.call "adoptNode"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/captureEvents) *)
  val captureEvents: 'tags this -> unit [@@js.call "captureEvents"]
  
  (** @deprecated  *)
  val caretRangeFromPoint: 'tags this -> x:float -> y:float -> Range.t option [@@js.call "caretRangeFromPoint"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/clear) *)
  val clear: 'tags this -> unit [@@js.call "clear"]
  
  (**
    Closes an output stream and forces the sent data to display.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/close)
  *)
  val close: 'tags this -> unit [@@js.call "close"]
  
  (**
    Creates an attribute object with a specified name.
    @param name String that sets the attribute object's name.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createAttribute)
  *)
  val createAttribute: 'tags this -> localName:string -> Attr.t [@@js.call "createAttribute"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createAttributeNS) *)
  val createAttributeNS: 'tags this -> namespace:string option -> qualifiedName:string -> Attr.t [@@js.call "createAttributeNS"]
  
  (**
    Returns a CDATASection node whose data is data.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createCDATASection)
  *)
  val createCDATASection: 'tags this -> data:string -> CDATASection.t [@@js.call "createCDATASection"]
  
  (**
    Creates a comment object with the specified data.
    @param data Sets the comment object's data.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createComment)
  *)
  val createComment: 'tags this -> data:string -> Comment.t [@@js.call "createComment"]
  
  (**
    Creates a new document.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createDocumentFragment)
  *)
  val createDocumentFragment: 'tags this -> DocumentFragment.t [@@js.call "createDocumentFragment"]
  
  (**
    Creates an instance of the element for the specified tag.
    @param tagName The name of an element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createElement)
  *)
  val createElement: 'tags this -> tagName:'K -> ?options:ElementCreationOptions.t -> unit -> (* FIXME: unknown type 'HTMLElementTagNameMap[K]' *)any [@@js.call "createElement"]
  
  (** @deprecated  *)
  val createElement': 'tags this -> tagName:'K -> ?options:ElementCreationOptions.t -> unit -> (* FIXME: unknown type 'HTMLElementDeprecatedTagNameMap[K]' *)any [@@js.call "createElement"]
  
  (** Creates an instance of the element for the specified tag. *)
  val createElement'': 'tags this -> tagName:string -> ?options:ElementCreationOptions.t -> unit -> HTMLElement.t [@@js.call "createElement"]
  
  (**
    Returns an element with namespace namespace. Its namespace prefix will be everything before ":" (U+003E) in qualifiedName or null. Its local name will be everything after ":" (U+003E) in qualifiedName or qualifiedName.
    
    If localName does not match the Name production an "InvalidCharacterError" DOMException will be thrown.
    
    If one of the following conditions is true a "NamespaceError" DOMException will be thrown:
    
    localName does not match the QName production.
    Namespace prefix is not null and namespace is the empty string.
    Namespace prefix is "xml" and namespace is not the XML namespace.
    qualifiedName or namespace prefix is "xmlns" and namespace is not the XMLNS namespace.
    namespace is the XMLNS namespace and neither qualifiedName nor namespace prefix is "xmlns".
    
    When supplied, options's is can be used to create a customized built-in element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createElementNS)
  *)
  val createElementNS: 'tags this -> namespaceURI:([`L_s492_http___www_w3_org_1999_xhtml[@js "http://www.w3.org/1999/xhtml"]] [@js.enum]) -> qualifiedName:string -> HTMLElement.t [@@js.call "createElementNS"]
  
  (**
    Returns an element with namespace namespace. Its namespace prefix will be everything before ":" (U+003E) in qualifiedName or null. Its local name will be everything after ":" (U+003E) in qualifiedName or qualifiedName.
    
    If localName does not match the Name production an "InvalidCharacterError" DOMException will be thrown.
    
    If one of the following conditions is true a "NamespaceError" DOMException will be thrown:
    
    localName does not match the QName production.
    Namespace prefix is not null and namespace is the empty string.
    Namespace prefix is "xml" and namespace is not the XML namespace.
    qualifiedName or namespace prefix is "xmlns" and namespace is not the XMLNS namespace.
    namespace is the XMLNS namespace and neither qualifiedName nor namespace prefix is "xmlns".
    
    When supplied, options's is can be used to create a customized built-in element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createElementNS)
  *)
  val createElementNS': 'tags this -> namespaceURI:([`L_s493_http___www_w3_org_2000_svg[@js "http://www.w3.org/2000/svg"]] [@js.enum]) -> qualifiedName:'K -> (* FIXME: unknown type 'SVGElementTagNameMap[K]' *)any [@@js.call "createElementNS"]
  
  (**
    Returns an element with namespace namespace. Its namespace prefix will be everything before ":" (U+003E) in qualifiedName or null. Its local name will be everything after ":" (U+003E) in qualifiedName or qualifiedName.
    
    If localName does not match the Name production an "InvalidCharacterError" DOMException will be thrown.
    
    If one of the following conditions is true a "NamespaceError" DOMException will be thrown:
    
    localName does not match the QName production.
    Namespace prefix is not null and namespace is the empty string.
    Namespace prefix is "xml" and namespace is not the XML namespace.
    qualifiedName or namespace prefix is "xmlns" and namespace is not the XMLNS namespace.
    namespace is the XMLNS namespace and neither qualifiedName nor namespace prefix is "xmlns".
    
    When supplied, options's is can be used to create a customized built-in element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createElementNS)
  *)
  val createElementNS'': 'tags this -> namespaceURI:([`L_s493_http___www_w3_org_2000_svg[@js "http://www.w3.org/2000/svg"]] [@js.enum]) -> qualifiedName:string -> SVGElement.t [@@js.call "createElementNS"]
  
  (**
    Returns an element with namespace namespace. Its namespace prefix will be everything before ":" (U+003E) in qualifiedName or null. Its local name will be everything after ":" (U+003E) in qualifiedName or qualifiedName.
    
    If localName does not match the Name production an "InvalidCharacterError" DOMException will be thrown.
    
    If one of the following conditions is true a "NamespaceError" DOMException will be thrown:
    
    localName does not match the QName production.
    Namespace prefix is not null and namespace is the empty string.
    Namespace prefix is "xml" and namespace is not the XML namespace.
    qualifiedName or namespace prefix is "xmlns" and namespace is not the XMLNS namespace.
    namespace is the XMLNS namespace and neither qualifiedName nor namespace prefix is "xmlns".
    
    When supplied, options's is can be used to create a customized built-in element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createElementNS)
  *)
  val createElementNS''': 'tags this -> namespaceURI:([`L_s491_http___www_w3_org_1998_Math_MathML[@js "http://www.w3.org/1998/Math/MathML"]] [@js.enum]) -> qualifiedName:'K -> (* FIXME: unknown type 'MathMLElementTagNameMap[K]' *)any [@@js.call "createElementNS"]
  
  (**
    Returns an element with namespace namespace. Its namespace prefix will be everything before ":" (U+003E) in qualifiedName or null. Its local name will be everything after ":" (U+003E) in qualifiedName or qualifiedName.
    
    If localName does not match the Name production an "InvalidCharacterError" DOMException will be thrown.
    
    If one of the following conditions is true a "NamespaceError" DOMException will be thrown:
    
    localName does not match the QName production.
    Namespace prefix is not null and namespace is the empty string.
    Namespace prefix is "xml" and namespace is not the XML namespace.
    qualifiedName or namespace prefix is "xmlns" and namespace is not the XMLNS namespace.
    namespace is the XMLNS namespace and neither qualifiedName nor namespace prefix is "xmlns".
    
    When supplied, options's is can be used to create a customized built-in element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createElementNS)
  *)
  val createElementNS'''': 'tags this -> namespaceURI:([`L_s491_http___www_w3_org_1998_Math_MathML[@js "http://www.w3.org/1998/Math/MathML"]] [@js.enum]) -> qualifiedName:string -> MathMLElement.t [@@js.call "createElementNS"]
  
  (**
    Returns an element with namespace namespace. Its namespace prefix will be everything before ":" (U+003E) in qualifiedName or null. Its local name will be everything after ":" (U+003E) in qualifiedName or qualifiedName.
    
    If localName does not match the Name production an "InvalidCharacterError" DOMException will be thrown.
    
    If one of the following conditions is true a "NamespaceError" DOMException will be thrown:
    
    localName does not match the QName production.
    Namespace prefix is not null and namespace is the empty string.
    Namespace prefix is "xml" and namespace is not the XML namespace.
    qualifiedName or namespace prefix is "xmlns" and namespace is not the XMLNS namespace.
    namespace is the XMLNS namespace and neither qualifiedName nor namespace prefix is "xmlns".
    
    When supplied, options's is can be used to create a customized built-in element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createElementNS)
  *)
  val createElementNS''''': 'tags this -> namespaceURI:string option -> qualifiedName:string -> ?options:ElementCreationOptions.t -> unit -> Element.t [@@js.call "createElementNS"]
  
  (**
    Returns an element with namespace namespace. Its namespace prefix will be everything before ":" (U+003E) in qualifiedName or null. Its local name will be everything after ":" (U+003E) in qualifiedName or qualifiedName.
    
    If localName does not match the Name production an "InvalidCharacterError" DOMException will be thrown.
    
    If one of the following conditions is true a "NamespaceError" DOMException will be thrown:
    
    localName does not match the QName production.
    Namespace prefix is not null and namespace is the empty string.
    Namespace prefix is "xml" and namespace is not the XML namespace.
    qualifiedName or namespace prefix is "xmlns" and namespace is not the XMLNS namespace.
    namespace is the XMLNS namespace and neither qualifiedName nor namespace prefix is "xmlns".
    
    When supplied, options's is can be used to create a customized built-in element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createElementNS)
  *)
  val createElementNS'''''': 'tags this -> namespace:string option -> qualifiedName:string -> ?options:([`U1 of string | `U2 of ElementCreationOptions.t] [@js.union]) -> unit -> Element.t [@@js.call "createElementNS"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent: 'tags this -> eventInterface:([`L_s5_AnimationEvent[@js "AnimationEvent"]] [@js.enum]) -> AnimationEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent': 'tags this -> eventInterface:([`L_s6_AnimationPlaybackEvent[@js "AnimationPlaybackEvent"]] [@js.enum]) -> AnimationPlaybackEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'': 'tags this -> eventInterface:([`L_s7_AudioProcessingEvent[@js "AudioProcessingEvent"]] [@js.enum]) -> AudioProcessingEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''': 'tags this -> eventInterface:([`L_s10_BeforeUnloadEvent[@js "BeforeUnloadEvent"]] [@js.enum]) -> BeforeUnloadEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''': 'tags this -> eventInterface:([`L_s11_BlobEvent[@js "BlobEvent"]] [@js.enum]) -> BlobEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''': 'tags this -> eventInterface:([`L_s12_ClipboardEvent[@js "ClipboardEvent"]] [@js.enum]) -> ClipboardEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''': 'tags this -> eventInterface:([`L_s13_CloseEvent[@js "CloseEvent"]] [@js.enum]) -> CloseEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''': 'tags this -> eventInterface:([`L_s14_CompositionEvent[@js "CompositionEvent"]] [@js.enum]) -> CompositionEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''': 'tags this -> eventInterface:([`L_s15_CustomEvent[@js "CustomEvent"]] [@js.enum]) -> CustomEvent.t_0 [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''': 'tags this -> eventInterface:([`L_s17_DeviceMotionEvent[@js "DeviceMotionEvent"]] [@js.enum]) -> DeviceMotionEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''': 'tags this -> eventInterface:([`L_s18_DeviceOrientationEvent[@js "DeviceOrientationEvent"]] [@js.enum]) -> DeviceOrientationEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''': 'tags this -> eventInterface:([`L_s19_DragEvent[@js "DragEvent"]] [@js.enum]) -> DragEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''': 'tags this -> eventInterface:([`L_s31_ErrorEvent[@js "ErrorEvent"]] [@js.enum]) -> ErrorEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''': 'tags this -> eventInterface:([`L_s32_Event[@js "Event"]] [@js.enum]) -> Event.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''': 'tags this -> eventInterface:([`L_s33_Events[@js "Events"]] [@js.enum]) -> Event.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''': 'tags this -> eventInterface:([`L_s34_FocusEvent[@js "FocusEvent"]] [@js.enum]) -> FocusEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''': 'tags this -> eventInterface:([`L_s35_FontFaceSetLoadEvent[@js "FontFaceSetLoadEvent"]] [@js.enum]) -> FontFaceSetLoadEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''': 'tags this -> eventInterface:([`L_s36_FormDataEvent[@js "FormDataEvent"]] [@js.enum]) -> FormDataEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''': 'tags this -> eventInterface:([`L_s37_GamepadEvent[@js "GamepadEvent"]] [@js.enum]) -> GamepadEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''': 'tags this -> eventInterface:([`L_s39_HashChangeEvent[@js "HashChangeEvent"]] [@js.enum]) -> HashChangeEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''': 'tags this -> eventInterface:([`L_s44_IDBVersionChangeEvent[@js "IDBVersionChangeEvent"]] [@js.enum]) -> IDBVersionChangeEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''': 'tags this -> eventInterface:([`L_s45_InputEvent[@js "InputEvent"]] [@js.enum]) -> InputEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''': 'tags this -> eventInterface:([`L_s47_KeyboardEvent[@js "KeyboardEvent"]] [@js.enum]) -> KeyboardEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s48_MIDIConnectionEvent[@js "MIDIConnectionEvent"]] [@js.enum]) -> MIDIConnectionEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s49_MIDIMessageEvent[@js "MIDIMessageEvent"]] [@js.enum]) -> MIDIMessageEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s50_MediaEncryptedEvent[@js "MediaEncryptedEvent"]] [@js.enum]) -> MediaEncryptedEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s51_MediaKeyMessageEvent[@js "MediaKeyMessageEvent"]] [@js.enum]) -> MediaKeyMessageEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s52_MediaQueryListEvent[@js "MediaQueryListEvent"]] [@js.enum]) -> MediaQueryListEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s53_MediaStreamTrackEvent[@js "MediaStreamTrackEvent"]] [@js.enum]) -> MediaStreamTrackEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s54_MessageEvent[@js "MessageEvent"]] [@js.enum]) -> MessageEvent.t_0 [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s55_MouseEvent[@js "MouseEvent"]] [@js.enum]) -> MouseEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s56_MouseEvents[@js "MouseEvents"]] [@js.enum]) -> MouseEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s57_MutationEvent[@js "MutationEvent"]] [@js.enum]) -> MutationEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s58_MutationEvents[@js "MutationEvents"]] [@js.enum]) -> MutationEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s69_OfflineAudioCompletionEvent[@js "OfflineAudioCompletionEvent"]] [@js.enum]) -> OfflineAudioCompletionEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s70_PageTransitionEvent[@js "PageTransitionEvent"]] [@js.enum]) -> PageTransitionEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s71_PaymentMethodChangeEvent[@js "PaymentMethodChangeEvent"]] [@js.enum]) -> PaymentMethodChangeEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s72_PaymentRequestUpdateEvent[@js "PaymentRequestUpdateEvent"]] [@js.enum]) -> PaymentRequestUpdateEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s73_PictureInPictureEvent[@js "PictureInPictureEvent"]] [@js.enum]) -> PictureInPictureEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s74_PointerEvent[@js "PointerEvent"]] [@js.enum]) -> PointerEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s75_PopStateEvent[@js "PopStateEvent"]] [@js.enum]) -> PopStateEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s76_ProgressEvent[@js "ProgressEvent"]] [@js.enum]) -> ProgressEvent.t_0 [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s77_PromiseRejectionEvent[@js "PromiseRejectionEvent"]] [@js.enum]) -> PromiseRejectionEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s80_RTCDTMFToneChangeEvent[@js "RTCDTMFToneChangeEvent"]] [@js.enum]) -> RTCDTMFToneChangeEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s81_RTCDataChannelEvent[@js "RTCDataChannelEvent"]] [@js.enum]) -> RTCDataChannelEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s82_RTCErrorEvent[@js "RTCErrorEvent"]] [@js.enum]) -> RTCErrorEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s83_RTCPeerConnectionIceErrorEvent[@js "RTCPeerConnectionIceErrorEvent"]] [@js.enum]) -> RTCPeerConnectionIceErrorEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s84_RTCPeerConnectionIceEvent[@js "RTCPeerConnectionIceEvent"]] [@js.enum]) -> RTCPeerConnectionIceEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s85_RTCTrackEvent[@js "RTCTrackEvent"]] [@js.enum]) -> RTCTrackEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''''''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s86_SecurityPolicyViolationEvent[@js "SecurityPolicyViolationEvent"]] [@js.enum]) -> SecurityPolicyViolationEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''''''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s87_SpeechSynthesisErrorEvent[@js "SpeechSynthesisErrorEvent"]] [@js.enum]) -> SpeechSynthesisErrorEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''''''''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s88_SpeechSynthesisEvent[@js "SpeechSynthesisEvent"]] [@js.enum]) -> SpeechSynthesisEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''''''''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s89_StorageEvent[@js "StorageEvent"]] [@js.enum]) -> StorageEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''''''''''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s90_SubmitEvent[@js "SubmitEvent"]] [@js.enum]) -> SubmitEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''''''''''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s91_ToggleEvent[@js "ToggleEvent"]] [@js.enum]) -> ToggleEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''''''''''''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s92_TouchEvent[@js "TouchEvent"]] [@js.enum]) -> TouchEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''''''''''''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s93_TrackEvent[@js "TrackEvent"]] [@js.enum]) -> TrackEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''''''''''''''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s94_TransitionEvent[@js "TransitionEvent"]] [@js.enum]) -> TransitionEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''''''''''''''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s95_UIEvent[@js "UIEvent"]] [@js.enum]) -> UIEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''''''''''''''''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s96_UIEvents[@js "UIEvents"]] [@js.enum]) -> UIEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s110_WebGLContextEvent[@js "WebGLContextEvent"]] [@js.enum]) -> WebGLContextEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''': 'tags this -> eventInterface:([`L_s111_WheelEvent[@js "WheelEvent"]] [@js.enum]) -> WheelEvent.t [@@js.call "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''': 'tags this -> eventInterface:string -> Event.t [@@js.call "createEvent"]
  
  (**
    Creates a NodeIterator object that you can use to traverse filtered lists of nodes or elements in a document.
    @param root The root element or node to start traversing on.
    @param whatToShow The type of nodes or elements to appear in the node list
    @param filter A custom NodeFilter function to use. For more information, see filter. Use null for no filter.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createNodeIterator)
  *)
  val createNodeIterator: 'tags this -> root:Node.t -> ?whatToShow:float -> ?filter:NodeFilter.t option -> unit -> NodeIterator.t [@@js.call "createNodeIterator"]
  
  (**
    Returns a ProcessingInstruction node whose target is target and data is data. If target does not match the Name production an "InvalidCharacterError" DOMException will be thrown. If data contains "?>" an "InvalidCharacterError" DOMException will be thrown.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createProcessingInstruction)
  *)
  val createProcessingInstruction: 'tags this -> target:string -> data:string -> ProcessingInstruction.t [@@js.call "createProcessingInstruction"]
  
  (**
    Returns an empty range object that has both of its boundary points positioned at the beginning of the document.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createRange)
  *)
  val createRange: 'tags this -> Range.t [@@js.call "createRange"]
  
  (**
    Creates a text string from the specified value.
    @param data String that specifies the nodeValue property of the text node.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createTextNode)
  *)
  val createTextNode: 'tags this -> data:string -> Text.t [@@js.call "createTextNode"]
  
  (**
    Creates a TreeWalker object that you can use to traverse filtered lists of nodes or elements in a document.
    @param root The root element or node to start traversing on.
    @param whatToShow The type of nodes or elements to appear in the node list. For more information, see whatToShow.
    @param filter A custom NodeFilter function to use.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createTreeWalker)
  *)
  val createTreeWalker: 'tags this -> root:Node.t -> ?whatToShow:float -> ?filter:NodeFilter.t option -> unit -> TreeWalker.t [@@js.call "createTreeWalker"]
  
  (**
    Executes a command on the current document, current selection, or the given range.
    @param commandId String that specifies the command to execute. This command can be any of the command identifiers that can be executed in script.
    @param showUI Display the user interface, defaults to false.
    @param value Value to assign.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/execCommand)
  *)
  val execCommand: 'tags this -> commandId:string -> ?showUI:bool -> ?value:string -> unit -> bool [@@js.call "execCommand"]
  
  (**
    Stops document's fullscreen element from being displayed fullscreen and resolves promise when done.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/exitFullscreen)
  *)
  val exitFullscreen: 'tags this -> unit Promise.t [@@js.call "exitFullscreen"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/exitPictureInPicture) *)
  val exitPictureInPicture: 'tags this -> unit Promise.t [@@js.call "exitPictureInPicture"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/exitPointerLock) *)
  val exitPointerLock: 'tags this -> unit [@@js.call "exitPointerLock"]
  
  (**
    Returns a reference to the first object with the specified value of the ID attribute.
    @param elementId String that specifies the ID value.
  *)
  val getElementById: 'tags this -> elementId:string -> HTMLElement.t option [@@js.call "getElementById"]
  
  (**
    Returns a HTMLCollection of the elements in the object on which the method was invoked (a document or an element) that have all the classes given by classNames. The classNames argument is interpreted as a space-separated list of classes.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/getElementsByClassName)
  *)
  val getElementsByClassName: 'tags this -> classNames:string -> Element.t HTMLCollectionOf.t [@@js.call "getElementsByClassName"]
  
  (**
    Gets a collection of objects based on the value of the NAME or ID attribute.
    @param elementName Gets a collection of objects based on the value of the NAME or ID attribute.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/getElementsByName)
  *)
  val getElementsByName: 'tags this -> elementName:string -> HTMLElement.t NodeListOf.t [@@js.call "getElementsByName"]
  
  (**
    Retrieves a collection of objects based on the specified element name.
    @param name Specifies the name of an element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/getElementsByTagName)
  *)
  val getElementsByTagName: 'tags this -> qualifiedName:'K -> (* FIXME: unknown type 'HTMLElementTagNameMap[K]' *)any HTMLCollectionOf.t [@@js.call "getElementsByTagName"]
  
  (** Retrieves a collection of objects based on the specified element name. *)
  val getElementsByTagName': 'tags this -> qualifiedName:'K -> (* FIXME: unknown type 'SVGElementTagNameMap[K]' *)any HTMLCollectionOf.t [@@js.call "getElementsByTagName"]
  
  (** Retrieves a collection of objects based on the specified element name. *)
  val getElementsByTagName'': 'tags this -> qualifiedName:'K -> (* FIXME: unknown type 'MathMLElementTagNameMap[K]' *)any HTMLCollectionOf.t [@@js.call "getElementsByTagName"]
  
  (** @deprecated  *)
  val getElementsByTagName''': 'tags this -> qualifiedName:'K -> (* FIXME: unknown type 'HTMLElementDeprecatedTagNameMap[K]' *)any HTMLCollectionOf.t [@@js.call "getElementsByTagName"]
  
  (** Retrieves a collection of objects based on the specified element name. *)
  val getElementsByTagName'''': 'tags this -> qualifiedName:string -> Element.t HTMLCollectionOf.t [@@js.call "getElementsByTagName"]
  
  (**
    If namespace and localName are "*" returns a HTMLCollection of all descendant elements.
    
    If only namespace is "*" returns a HTMLCollection of all descendant elements whose local name is localName.
    
    If only localName is "*" returns a HTMLCollection of all descendant elements whose namespace is namespace.
    
    Otherwise, returns a HTMLCollection of all descendant elements whose namespace is namespace and local name is localName.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/getElementsByTagNameNS)
  *)
  val getElementsByTagNameNS: 'tags this -> namespaceURI:([`L_s492_http___www_w3_org_1999_xhtml[@js "http://www.w3.org/1999/xhtml"]] [@js.enum]) -> localName:string -> HTMLElement.t HTMLCollectionOf.t [@@js.call "getElementsByTagNameNS"]
  
  (**
    If namespace and localName are "*" returns a HTMLCollection of all descendant elements.
    
    If only namespace is "*" returns a HTMLCollection of all descendant elements whose local name is localName.
    
    If only localName is "*" returns a HTMLCollection of all descendant elements whose namespace is namespace.
    
    Otherwise, returns a HTMLCollection of all descendant elements whose namespace is namespace and local name is localName.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/getElementsByTagNameNS)
  *)
  val getElementsByTagNameNS': 'tags this -> namespaceURI:([`L_s493_http___www_w3_org_2000_svg[@js "http://www.w3.org/2000/svg"]] [@js.enum]) -> localName:string -> SVGElement.t HTMLCollectionOf.t [@@js.call "getElementsByTagNameNS"]
  
  (**
    If namespace and localName are "*" returns a HTMLCollection of all descendant elements.
    
    If only namespace is "*" returns a HTMLCollection of all descendant elements whose local name is localName.
    
    If only localName is "*" returns a HTMLCollection of all descendant elements whose namespace is namespace.
    
    Otherwise, returns a HTMLCollection of all descendant elements whose namespace is namespace and local name is localName.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/getElementsByTagNameNS)
  *)
  val getElementsByTagNameNS'': 'tags this -> namespaceURI:([`L_s491_http___www_w3_org_1998_Math_MathML[@js "http://www.w3.org/1998/Math/MathML"]] [@js.enum]) -> localName:string -> MathMLElement.t HTMLCollectionOf.t [@@js.call "getElementsByTagNameNS"]
  
  (**
    If namespace and localName are "*" returns a HTMLCollection of all descendant elements.
    
    If only namespace is "*" returns a HTMLCollection of all descendant elements whose local name is localName.
    
    If only localName is "*" returns a HTMLCollection of all descendant elements whose namespace is namespace.
    
    Otherwise, returns a HTMLCollection of all descendant elements whose namespace is namespace and local name is localName.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/getElementsByTagNameNS)
  *)
  val getElementsByTagNameNS''': 'tags this -> namespace:string option -> localName:string -> Element.t HTMLCollectionOf.t [@@js.call "getElementsByTagNameNS"]
  
  (**
    Returns an object representing the current selection of the document that is loaded into the object displaying a webpage.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/getSelection)
  *)
  val getSelection: 'tags this -> Selection.t option [@@js.call "getSelection"]
  
  (**
    Gets a value indicating whether the object currently has focus.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/hasFocus)
  *)
  val hasFocus: 'tags this -> bool [@@js.call "hasFocus"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/hasStorageAccess) *)
  val hasStorageAccess: 'tags this -> bool Promise.t [@@js.call "hasStorageAccess"]
  
  (**
    Returns a copy of node. If deep is true, the copy also includes the node's descendants.
    
    If node is a document or a shadow root, throws a "NotSupportedError" DOMException.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/importNode)
  *)
  val importNode: 'tags this -> node:'T -> ?deep:bool -> unit -> 'T [@@js.call "importNode"]
  
  (**
    Opens a new window and loads a document specified by a given URL. Also, opens a new window that uses the url parameter and the name parameter to collect the output of the write method and the writeln method.
    @param url Specifies a MIME type for the document.
    @param name Specifies the name of the window. This name is used as the value for the TARGET attribute on a form or an anchor element.
    @param features Contains a list of items separated by commas. Each item consists of an option and a value, separated by an equals sign (for example, "fullscreen=yes, toolbar=yes"). The following values are supported.
    @param replace Specifies whether the existing entry for the document is replaced in the history list.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/open)
  *)
  val open_: 'tags this -> ?unused1:string -> ?unused2:string -> unit -> t [@@js.call "open"]
  
  (** Opens a new window and loads a document specified by a given URL. Also, opens a new window that uses the url parameter and the name parameter to collect the output of the write method and the writeln method. *)
  val open_': 'tags this -> url:([`U1 of string | `U2 of URL.t] [@js.union]) -> name:string -> features:string -> WindowProxy.t option [@@js.call "open"]
  
  (**
    Returns a Boolean value that indicates whether a specified command can be successfully executed using execCommand, given the current state of the document.
    @param commandId Specifies a command identifier.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/queryCommandEnabled)
  *)
  val queryCommandEnabled: 'tags this -> commandId:string -> bool [@@js.call "queryCommandEnabled"]
  
  (**
    Returns a Boolean value that indicates whether the specified command is in the indeterminate state.
    @param commandId String that specifies a command identifier.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/queryCommandIndeterm)
  *)
  val queryCommandIndeterm: 'tags this -> commandId:string -> bool [@@js.call "queryCommandIndeterm"]
  
  (**
    Returns a Boolean value that indicates the current state of the command.
    @param commandId String that specifies a command identifier.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/queryCommandState)
  *)
  val queryCommandState: 'tags this -> commandId:string -> bool [@@js.call "queryCommandState"]
  
  (**
    Returns a Boolean value that indicates whether the current command is supported on the current range.
    @param commandId Specifies a command identifier.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/queryCommandSupported)
  *)
  val queryCommandSupported: 'tags this -> commandId:string -> bool [@@js.call "queryCommandSupported"]
  
  (**
    Returns the current value of the document, range, or current selection for the given command.
    @param commandId String that specifies a command identifier.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/queryCommandValue)
  *)
  val queryCommandValue: 'tags this -> commandId:string -> string [@@js.call "queryCommandValue"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/releaseEvents) *)
  val releaseEvents: 'tags this -> unit [@@js.call "releaseEvents"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/requestStorageAccess) *)
  val requestStorageAccess: 'tags this -> unit Promise.t [@@js.call "requestStorageAccess"]
  
  (**
    Writes one or more HTML expressions to a document in the specified window.
    @param content Specifies the text and HTML tags to write.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/write)
  *)
  val write: 'tags this -> text:(string list [@js.variadic]) -> unit [@@js.call "write"]
  
  (**
    Writes one or more HTML expressions, followed by a carriage return, to a document in the specified window.
    @param content The text and HTML tags to write.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/writeln)
  *)
  val writeln: 'tags this -> text:(string list [@js.variadic]) -> unit [@@js.call "writeln"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'DocumentEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'DocumentEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  A minimal document object that has no parent. It is used as a lightweight version of Document that stores a segment of a document structure comprised of nodes just like a standard document. The key difference is that because the document fragment isn't part of the active document tree structure, changes made to the fragment don't affect the document, cause reflow, or incur any performance impact that can occur when changes are made.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DocumentFragment)
*)
and[@js.scope "DocumentFragment"] DocumentFragment : sig
  type t = [`DocumentFragment | `EventTarget | `Node | `NonElementParentNode | `ParentNode] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DocumentFragment | `EventTarget | `Node | `NonElementParentNode | `ParentNode]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DocumentFragment | `EventTarget | `Node | `NonElementParentNode | `ParentNode]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DocumentFragment ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the node document. Returns null for documents.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/ownerDocument)
  *)
  val get_ownerDocument: 'tags this -> Document.t [@@js.get "ownerDocument"]
  
  (**
    Returns the first element within node's descendants whose ID is elementId.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/getElementById)
  *)
  val getElementById: 'tags this -> elementId:string -> HTMLElement.t option [@@js.call "getElementById"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
and DocumentOrShadowRoot : sig
  type t = [`DocumentOrShadowRoot] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DocumentOrShadowRoot]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DocumentOrShadowRoot]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DocumentOrShadowRoot ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the deepest element in the document through which or to which key events are being routed. This is, roughly speaking, the focused element in the document.
    
    For the purposes of this API, when a child browsing context is focused, its container is focused in the parent browsing context. For example, if the user moves the focus to a text control in an iframe, the iframe is the element returned by the activeElement API in the iframe's node document.
    
    Similarly, when the focused element is in a different node tree than documentOrShadowRoot, the element returned will be the host that's located in the same node tree as documentOrShadowRoot if documentOrShadowRoot is a shadow-including inclusive ancestor of the focused element, and null if not.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/activeElement)
  *)
  val get_activeElement: 'tags this -> Element.t option [@@js.get "activeElement"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/adoptedStyleSheets) *)
  val get_adoptedStyleSheets: 'tags this -> CSSStyleSheet.t list [@@js.get "adoptedStyleSheets"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/adoptedStyleSheets) *)
  val set_adoptedStyleSheets: 'tags this -> CSSStyleSheet.t list -> unit [@@js.set "adoptedStyleSheets"]
  
  (**
    Returns document's fullscreen element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/fullscreenElement)
  *)
  val get_fullscreenElement: 'tags this -> Element.t option [@@js.get "fullscreenElement"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/pictureInPictureElement) *)
  val get_pictureInPictureElement: 'tags this -> Element.t option [@@js.get "pictureInPictureElement"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/pointerLockElement) *)
  val get_pointerLockElement: 'tags this -> Element.t option [@@js.get "pointerLockElement"]
  
  (**
    Retrieves a collection of styleSheet objects representing the style sheets that correspond to each instance of a link or style object in the document.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/styleSheets)
  *)
  val get_styleSheets: 'tags this -> StyleSheetList.t [@@js.get "styleSheets"]
  
  (**
    Returns the element for the specified x coordinate and the specified y coordinate.
    @param x The x-offset
    @param y The y-offset
  *)
  val elementFromPoint: 'tags this -> x:float -> y:float -> Element.t option [@@js.call "elementFromPoint"]
  val elementsFromPoint: 'tags this -> x:float -> y:float -> Element.t list [@@js.call "elementsFromPoint"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/getAnimations) *)
  val getAnimations: 'tags this -> Animation.t list [@@js.call "getAnimations"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  A Node containing a doctype.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DocumentType)
*)
and[@js.scope "DocumentType"] DocumentType : sig
  type t = [`ChildNode | `DocumentType | `EventTarget | `Node] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ChildNode | `DocumentType | `EventTarget | `Node]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ChildNode | `DocumentType | `EventTarget | `Node]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DocumentType ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DocumentType/name) *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (**
    Returns the node document. Returns null for documents.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/ownerDocument)
  *)
  val get_ownerDocument: 'tags this -> Document.t [@@js.get "ownerDocument"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DocumentType/publicId) *)
  val get_publicId: 'tags this -> string [@@js.get "publicId"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DocumentType/systemId) *)
  val get_systemId: 'tags this -> string [@@js.get "systemId"]
  val create: name:string -> ownerDocument:Document.t -> publicId:string -> systemId:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(**
  A DOM event that represents a drag and drop interaction. The user initiates a drag by placing a pointer device (such as a mouse) on the touch surface and then dragging the pointer to a new location (such as another DOM element). Applications are free to interpret a drag and drop interaction in an application-specific way.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DragEvent)
*)
and[@js.scope "DragEvent"] DragEvent : sig
  type t = [`DragEvent | `Event | `MouseEvent | `UIEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DragEvent | `Event | `MouseEvent | `UIEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DragEvent | `Event | `MouseEvent | `UIEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DragEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the DataTransfer object for the event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DragEvent/dataTransfer)
  *)
  val get_dataTransfer: 'tags this -> DataTransfer.t option [@@js.get "dataTransfer"]
  val create: ?dataTransfer:DataTransfer.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> ?eventInitDict:DragEventInit.t -> unit -> t [@@js.create]
end
and DragEventInit : sig
  type t = [`DragEventInit | `EventInit | `EventModifierInit | `MouseEventInit | `UIEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DragEventInit | `EventInit | `EventModifierInit | `MouseEventInit | `UIEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DragEventInit | `EventInit | `EventModifierInit | `MouseEventInit | `UIEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DragEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_dataTransfer: 'tags this -> DataTransfer.t option [@@js.get "dataTransfer"]
  val set_dataTransfer: 'tags this -> DataTransfer.t option -> unit [@@js.set "dataTransfer"]
  val create: ?dataTransfer:DataTransfer.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Element is the most general base class from which all objects in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element)
*)
and[@js.scope "Element"] Element : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `EventTarget | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `EventTarget | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `EventTarget | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Element ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/attributes) *)
  val get_attributes: 'tags this -> NamedNodeMap.t [@@js.get "attributes"]
  
  (**
    Allows for manipulation of element's class content attribute as a set of whitespace-separated tokens through a DOMTokenList object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/classList)
  *)
  val get_classList: 'tags this -> DOMTokenList.t [@@js.get "classList"]
  
  (**
    Returns the value of element's class content attribute. Can be set to change it.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/className)
  *)
  val get_className: 'tags this -> string [@@js.get "className"]
  
  (**
    Returns the value of element's class content attribute. Can be set to change it.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/className)
  *)
  val set_className: 'tags this -> string -> unit [@@js.set "className"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/clientHeight) *)
  val get_clientHeight: 'tags this -> float [@@js.get "clientHeight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/clientLeft) *)
  val get_clientLeft: 'tags this -> float [@@js.get "clientLeft"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/clientTop) *)
  val get_clientTop: 'tags this -> float [@@js.get "clientTop"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/clientWidth) *)
  val get_clientWidth: 'tags this -> float [@@js.get "clientWidth"]
  
  (**
    Returns the value of element's id content attribute. Can be set to change it.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/id)
  *)
  val get_id: 'tags this -> string [@@js.get "id"]
  
  (**
    Returns the value of element's id content attribute. Can be set to change it.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/id)
  *)
  val set_id: 'tags this -> string -> unit [@@js.set "id"]
  
  (**
    Returns the local name.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/localName)
  *)
  val get_localName: 'tags this -> string [@@js.get "localName"]
  
  (**
    Returns the namespace.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/namespaceURI)
  *)
  val get_namespaceURI: 'tags this -> string option [@@js.get "namespaceURI"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/fullscreenchange_event) *)
  val get_onfullscreenchange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onfullscreenchange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/fullscreenchange_event) *)
  val set_onfullscreenchange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onfullscreenchange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/fullscreenerror_event) *)
  val get_onfullscreenerror: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onfullscreenerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/fullscreenerror_event) *)
  val set_onfullscreenerror: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onfullscreenerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/outerHTML) *)
  val get_outerHTML: 'tags this -> string [@@js.get "outerHTML"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/outerHTML) *)
  val set_outerHTML: 'tags this -> string -> unit [@@js.set "outerHTML"]
  
  (**
    Returns the node document. Returns null for documents.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/ownerDocument)
  *)
  val get_ownerDocument: 'tags this -> Document.t [@@js.get "ownerDocument"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/part) *)
  val get_part: 'tags this -> DOMTokenList.t [@@js.get "part"]
  
  (**
    Returns the namespace prefix.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/prefix)
  *)
  val get_prefix: 'tags this -> string option [@@js.get "prefix"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/scrollHeight) *)
  val get_scrollHeight: 'tags this -> float [@@js.get "scrollHeight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/scrollLeft) *)
  val get_scrollLeft: 'tags this -> float [@@js.get "scrollLeft"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/scrollLeft) *)
  val set_scrollLeft: 'tags this -> float -> unit [@@js.set "scrollLeft"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/scrollTop) *)
  val get_scrollTop: 'tags this -> float [@@js.get "scrollTop"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/scrollTop) *)
  val set_scrollTop: 'tags this -> float -> unit [@@js.set "scrollTop"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/scrollWidth) *)
  val get_scrollWidth: 'tags this -> float [@@js.get "scrollWidth"]
  
  (**
    Returns element's shadow root, if any, and if shadow root's mode is "open", and null otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/shadowRoot)
  *)
  val get_shadowRoot: 'tags this -> ShadowRoot.t option [@@js.get "shadowRoot"]
  
  (**
    Returns the value of element's slot content attribute. Can be set to change it.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/slot)
  *)
  val get_slot: 'tags this -> string [@@js.get "slot"]
  
  (**
    Returns the value of element's slot content attribute. Can be set to change it.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/slot)
  *)
  val set_slot: 'tags this -> string -> unit [@@js.set "slot"]
  
  (**
    Returns the HTML-uppercased qualified name.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/tagName)
  *)
  val get_tagName: 'tags this -> string [@@js.get "tagName"]
  
  (**
    Creates a shadow root for element and returns it.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/attachShadow)
  *)
  val attachShadow: 'tags this -> init:ShadowRootInit.t -> ShadowRoot.t [@@js.call "attachShadow"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/checkVisibility) *)
  val checkVisibility: 'tags this -> ?options:CheckVisibilityOptions.t -> unit -> bool [@@js.call "checkVisibility"]
  
  (**
    Returns the first (starting at element) inclusive ancestor that matches selectors, and null otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/closest)
  *)
  val closest: 'tags this -> selector:'K -> (* FIXME: unknown type 'HTMLElementTagNameMap[K]' *)any option [@@js.call "closest"]
  
  (**
    Returns the first (starting at element) inclusive ancestor that matches selectors, and null otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/closest)
  *)
  val closest': 'tags this -> selector:'K -> (* FIXME: unknown type 'SVGElementTagNameMap[K]' *)any option [@@js.call "closest"]
  
  (**
    Returns the first (starting at element) inclusive ancestor that matches selectors, and null otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/closest)
  *)
  val closest'': 'tags this -> selector:'K -> (* FIXME: unknown type 'MathMLElementTagNameMap[K]' *)any option [@@js.call "closest"]
  
  (**
    Returns the first (starting at element) inclusive ancestor that matches selectors, and null otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/closest)
  *)
  val closest''': 'tags this -> selectors:string -> 'E option [@@js.call "closest"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/computedStyleMap) *)
  val computedStyleMap: 'tags this -> StylePropertyMapReadOnly.t [@@js.call "computedStyleMap"]
  
  (**
    Returns element's first attribute whose qualified name is qualifiedName, and null if there is no such attribute otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/getAttribute)
  *)
  val getAttribute: 'tags this -> qualifiedName:string -> string option [@@js.call "getAttribute"]
  
  (**
    Returns element's attribute whose namespace is namespace and local name is localName, and null if there is no such attribute otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/getAttributeNS)
  *)
  val getAttributeNS: 'tags this -> namespace:string option -> localName:string -> string option [@@js.call "getAttributeNS"]
  
  (**
    Returns the qualified names of all element's attributes. Can contain duplicates.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/getAttributeNames)
  *)
  val getAttributeNames: 'tags this -> string list [@@js.call "getAttributeNames"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/getAttributeNode) *)
  val getAttributeNode: 'tags this -> qualifiedName:string -> Attr.t option [@@js.call "getAttributeNode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/getAttributeNodeNS) *)
  val getAttributeNodeNS: 'tags this -> namespace:string option -> localName:string -> Attr.t option [@@js.call "getAttributeNodeNS"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/getBoundingClientRect) *)
  val getBoundingClientRect: 'tags this -> DOMRect.t [@@js.call "getBoundingClientRect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/getClientRects) *)
  val getClientRects: 'tags this -> DOMRectList.t [@@js.call "getClientRects"]
  
  (**
    Returns a HTMLCollection of the elements in the object on which the method was invoked (a document or an element) that have all the classes given by classNames. The classNames argument is interpreted as a space-separated list of classes.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/getElementsByClassName)
  *)
  val getElementsByClassName: 'tags this -> classNames:string -> t HTMLCollectionOf.t [@@js.call "getElementsByClassName"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/getElementsByTagName) *)
  val getElementsByTagName: 'tags this -> qualifiedName:'K -> (* FIXME: unknown type 'HTMLElementTagNameMap[K]' *)any HTMLCollectionOf.t [@@js.call "getElementsByTagName"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/getElementsByTagName) *)
  val getElementsByTagName': 'tags this -> qualifiedName:'K -> (* FIXME: unknown type 'SVGElementTagNameMap[K]' *)any HTMLCollectionOf.t [@@js.call "getElementsByTagName"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/getElementsByTagName) *)
  val getElementsByTagName'': 'tags this -> qualifiedName:'K -> (* FIXME: unknown type 'MathMLElementTagNameMap[K]' *)any HTMLCollectionOf.t [@@js.call "getElementsByTagName"]
  
  (** @deprecated  *)
  val getElementsByTagName''': 'tags this -> qualifiedName:'K -> (* FIXME: unknown type 'HTMLElementDeprecatedTagNameMap[K]' *)any HTMLCollectionOf.t [@@js.call "getElementsByTagName"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/getElementsByTagName) *)
  val getElementsByTagName'''': 'tags this -> qualifiedName:string -> t HTMLCollectionOf.t [@@js.call "getElementsByTagName"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/getElementsByTagNameNS) *)
  val getElementsByTagNameNS: 'tags this -> namespaceURI:([`L_s492_http___www_w3_org_1999_xhtml[@js "http://www.w3.org/1999/xhtml"]] [@js.enum]) -> localName:string -> HTMLElement.t HTMLCollectionOf.t [@@js.call "getElementsByTagNameNS"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/getElementsByTagNameNS) *)
  val getElementsByTagNameNS': 'tags this -> namespaceURI:([`L_s493_http___www_w3_org_2000_svg[@js "http://www.w3.org/2000/svg"]] [@js.enum]) -> localName:string -> SVGElement.t HTMLCollectionOf.t [@@js.call "getElementsByTagNameNS"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/getElementsByTagNameNS) *)
  val getElementsByTagNameNS'': 'tags this -> namespaceURI:([`L_s491_http___www_w3_org_1998_Math_MathML[@js "http://www.w3.org/1998/Math/MathML"]] [@js.enum]) -> localName:string -> MathMLElement.t HTMLCollectionOf.t [@@js.call "getElementsByTagNameNS"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/getElementsByTagNameNS) *)
  val getElementsByTagNameNS''': 'tags this -> namespace:string option -> localName:string -> t HTMLCollectionOf.t [@@js.call "getElementsByTagNameNS"]
  
  (**
    Returns true if element has an attribute whose qualified name is qualifiedName, and false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/hasAttribute)
  *)
  val hasAttribute: 'tags this -> qualifiedName:string -> bool [@@js.call "hasAttribute"]
  
  (**
    Returns true if element has an attribute whose namespace is namespace and local name is localName.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/hasAttributeNS)
  *)
  val hasAttributeNS: 'tags this -> namespace:string option -> localName:string -> bool [@@js.call "hasAttributeNS"]
  
  (**
    Returns true if element has attributes, and false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/hasAttributes)
  *)
  val hasAttributes: 'tags this -> bool [@@js.call "hasAttributes"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/hasPointerCapture) *)
  val hasPointerCapture: 'tags this -> pointerId:float -> bool [@@js.call "hasPointerCapture"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/insertAdjacentElement) *)
  val insertAdjacentElement: 'tags this -> where:InsertPosition.t -> element:t -> t option [@@js.call "insertAdjacentElement"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/insertAdjacentHTML) *)
  val insertAdjacentHTML: 'tags this -> position:InsertPosition.t -> text:string -> unit [@@js.call "insertAdjacentHTML"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/insertAdjacentText) *)
  val insertAdjacentText: 'tags this -> where:InsertPosition.t -> data:string -> unit [@@js.call "insertAdjacentText"]
  
  (**
    Returns true if matching selectors against element's root yields element, and false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/matches)
  *)
  val matches: 'tags this -> selectors:string -> bool [@@js.call "matches"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/releasePointerCapture) *)
  val releasePointerCapture: 'tags this -> pointerId:float -> unit [@@js.call "releasePointerCapture"]
  
  (**
    Removes element's first attribute whose qualified name is qualifiedName.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/removeAttribute)
  *)
  val removeAttribute: 'tags this -> qualifiedName:string -> unit [@@js.call "removeAttribute"]
  
  (**
    Removes element's attribute whose namespace is namespace and local name is localName.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/removeAttributeNS)
  *)
  val removeAttributeNS: 'tags this -> namespace:string option -> localName:string -> unit [@@js.call "removeAttributeNS"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/removeAttributeNode) *)
  val removeAttributeNode: 'tags this -> attr:Attr.t -> Attr.t [@@js.call "removeAttributeNode"]
  
  (**
    Displays element fullscreen and resolves promise when done.
    
    When supplied, options's navigationUI member indicates whether showing navigation UI while in fullscreen is preferred or not. If set to "show", navigation simplicity is preferred over screen space, and if set to "hide", more screen space is preferred. User agents are always free to honor user preference over the application's. The default value "auto" indicates no application preference.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/requestFullscreen)
  *)
  val requestFullscreen: 'tags this -> ?options:FullscreenOptions.t -> unit -> unit Promise.t [@@js.call "requestFullscreen"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/requestPointerLock) *)
  val requestPointerLock: 'tags this -> unit [@@js.call "requestPointerLock"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/scroll) *)
  val scroll: 'tags this -> ?options:ScrollToOptions.t -> unit -> unit [@@js.call "scroll"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/scroll) *)
  val scroll': 'tags this -> x:float -> y:float -> unit [@@js.call "scroll"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/scrollBy) *)
  val scrollBy: 'tags this -> ?options:ScrollToOptions.t -> unit -> unit [@@js.call "scrollBy"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/scrollBy) *)
  val scrollBy': 'tags this -> x:float -> y:float -> unit [@@js.call "scrollBy"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/scrollIntoView) *)
  val scrollIntoView: 'tags this -> ?arg:([`U1 of bool | `U2 of ScrollIntoViewOptions.t] [@js.union]) -> unit -> unit [@@js.call "scrollIntoView"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/scrollTo) *)
  val scrollTo: 'tags this -> ?options:ScrollToOptions.t -> unit -> unit [@@js.call "scrollTo"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/scrollTo) *)
  val scrollTo': 'tags this -> x:float -> y:float -> unit [@@js.call "scrollTo"]
  
  (**
    Sets the value of element's first attribute whose qualified name is qualifiedName to value.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/setAttribute)
  *)
  val setAttribute: 'tags this -> qualifiedName:string -> value:string -> unit [@@js.call "setAttribute"]
  
  (**
    Sets the value of element's attribute whose namespace is namespace and local name is localName to value.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/setAttributeNS)
  *)
  val setAttributeNS: 'tags this -> namespace:string option -> qualifiedName:string -> value:string -> unit [@@js.call "setAttributeNS"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/setAttributeNode) *)
  val setAttributeNode: 'tags this -> attr:Attr.t -> Attr.t option [@@js.call "setAttributeNode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/setAttributeNodeNS) *)
  val setAttributeNodeNS: 'tags this -> attr:Attr.t -> Attr.t option [@@js.call "setAttributeNodeNS"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/setPointerCapture) *)
  val setPointerCapture: 'tags this -> pointerId:float -> unit [@@js.call "setPointerCapture"]
  
  (**
    If force is not given, "toggles" qualifiedName, removing it if it is present and adding it if it is not present. If force is true, adds qualifiedName. If force is false, removes qualifiedName.
    
    Returns true if qualifiedName is now present, and false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/toggleAttribute)
  *)
  val toggleAttribute: 'tags this -> qualifiedName:string -> ?force:bool -> unit -> bool [@@js.call "toggleAttribute"]
  
  (**
    @deprecated This is a legacy alias of `matches`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/matches)
  *)
  val webkitMatchesSelector: 'tags this -> selectors:string -> bool [@@js.call "webkitMatchesSelector"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'ElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'ElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
and ElementCSSInlineStyle : sig
  type t = [`ElementCSSInlineStyle] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ElementCSSInlineStyle]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ElementCSSInlineStyle]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ElementCSSInlineStyle ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_attributeStyleMap: 'tags this -> StylePropertyMap.t [@@js.get "attributeStyleMap"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/style) *)
  val get_style: 'tags this -> CSSStyleDeclaration.t [@@js.get "style"]
  val create: attributeStyleMap:StylePropertyMap.t -> style:CSSStyleDeclaration.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ElementInternals) *)
and[@js.scope "ElementInternals"] ElementInternals : sig
  type t = [`ARIAMixin | `ElementInternals] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `ElementInternals]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `ElementInternals]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ElementInternals ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the form owner of internals's target element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ElementInternals/form)
  *)
  val get_form: 'tags this -> HTMLFormElement.t option [@@js.get "form"]
  
  (**
    Returns a NodeList of all the label elements that internals's target element is associated with.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ElementInternals/labels)
  *)
  val get_labels: 'tags this -> NodeList.t [@@js.get "labels"]
  
  (**
    Returns the ShadowRoot for internals's target element, if the target element is a shadow host, or null otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ElementInternals/shadowRoot)
  *)
  val get_shadowRoot: 'tags this -> ShadowRoot.t option [@@js.get "shadowRoot"]
  
  (**
    Returns the error message that would be shown to the user if internals's target element was to be checked for validity.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ElementInternals/validationMessage)
  *)
  val get_validationMessage: 'tags this -> string [@@js.get "validationMessage"]
  
  (**
    Returns the ValidityState object for internals's target element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ElementInternals/validity)
  *)
  val get_validity: 'tags this -> ValidityState.t [@@js.get "validity"]
  
  (**
    Returns true if internals's target element will be validated when the form is submitted; false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ElementInternals/willValidate)
  *)
  val get_willValidate: 'tags this -> bool [@@js.get "willValidate"]
  
  (**
    Returns true if internals's target element has no validity problems; false otherwise. Fires an invalid event at the element in the latter case.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ElementInternals/checkValidity)
  *)
  val checkValidity: 'tags this -> bool [@@js.call "checkValidity"]
  
  (**
    Returns true if internals's target element has no validity problems; otherwise, returns false, fires an invalid event at the element, and (if the event isn't canceled) reports the problem to the user.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ElementInternals/reportValidity)
  *)
  val reportValidity: 'tags this -> bool [@@js.call "reportValidity"]
  
  (**
    Sets both the state and submission value of internals's target element to value.
    
    If value is null, the element won't participate in form submission.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ElementInternals/setFormValue)
  *)
  val setFormValue: 'tags this -> value:([`Null | `U1 of File.t | `U2 of string | `U3 of FormData.t] [@js.union]) -> ?state:([`Null | `U1 of File.t | `U2 of string | `U3 of FormData.t] [@js.union]) -> unit -> unit [@@js.call "setFormValue"]
  
  (**
    Marks internals's target element as suffering from the constraints indicated by the flags argument, and sets the element's validation message to message. If anchor is specified, the user agent might use it to indicate problems with the constraints of internals's target element when the form owner is validated interactively or reportValidity() is called.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ElementInternals/setValidity)
  *)
  val setValidity: 'tags this -> ?flags:ValidityStateFlags.t -> ?message:string -> ?anchor:HTMLElement.t -> unit -> unit [@@js.call "setValidity"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
and EventModifierInit : sig
  type t = [`EventInit | `EventModifierInit | `UIEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `EventModifierInit | `UIEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `EventModifierInit | `UIEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EventModifierInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_altKey: 'tags this -> bool option [@@js.get "altKey"]
  val set_altKey: 'tags this -> bool -> unit [@@js.set "altKey"]
  val get_ctrlKey: 'tags this -> bool option [@@js.get "ctrlKey"]
  val set_ctrlKey: 'tags this -> bool -> unit [@@js.set "ctrlKey"]
  val get_metaKey: 'tags this -> bool option [@@js.get "metaKey"]
  val set_metaKey: 'tags this -> bool -> unit [@@js.set "metaKey"]
  val get_modifierAltGraph: 'tags this -> bool option [@@js.get "modifierAltGraph"]
  val set_modifierAltGraph: 'tags this -> bool -> unit [@@js.set "modifierAltGraph"]
  val get_modifierCapsLock: 'tags this -> bool option [@@js.get "modifierCapsLock"]
  val set_modifierCapsLock: 'tags this -> bool -> unit [@@js.set "modifierCapsLock"]
  val get_modifierFn: 'tags this -> bool option [@@js.get "modifierFn"]
  val set_modifierFn: 'tags this -> bool -> unit [@@js.set "modifierFn"]
  val get_modifierFnLock: 'tags this -> bool option [@@js.get "modifierFnLock"]
  val set_modifierFnLock: 'tags this -> bool -> unit [@@js.set "modifierFnLock"]
  val get_modifierHyper: 'tags this -> bool option [@@js.get "modifierHyper"]
  val set_modifierHyper: 'tags this -> bool -> unit [@@js.set "modifierHyper"]
  val get_modifierNumLock: 'tags this -> bool option [@@js.get "modifierNumLock"]
  val set_modifierNumLock: 'tags this -> bool -> unit [@@js.set "modifierNumLock"]
  val get_modifierScrollLock: 'tags this -> bool option [@@js.get "modifierScrollLock"]
  val set_modifierScrollLock: 'tags this -> bool -> unit [@@js.set "modifierScrollLock"]
  val get_modifierSuper: 'tags this -> bool option [@@js.get "modifierSuper"]
  val set_modifierSuper: 'tags this -> bool -> unit [@@js.set "modifierSuper"]
  val get_modifierSymbol: 'tags this -> bool option [@@js.get "modifierSymbol"]
  val set_modifierSymbol: 'tags this -> bool -> unit [@@js.set "modifierSymbol"]
  val get_modifierSymbolLock: 'tags this -> bool option [@@js.get "modifierSymbolLock"]
  val set_modifierSymbolLock: 'tags this -> bool -> unit [@@js.set "modifierSymbolLock"]
  val get_shiftKey: 'tags this -> bool option [@@js.get "shiftKey"]
  val set_shiftKey: 'tags this -> bool -> unit [@@js.set "shiftKey"]
  val create: ?altKey:bool -> ?ctrlKey:bool -> ?metaKey:bool -> ?modifierAltGraph:bool -> ?modifierCapsLock:bool -> ?modifierFn:bool -> ?modifierFnLock:bool -> ?modifierHyper:bool -> ?modifierNumLock:bool -> ?modifierScrollLock:bool -> ?modifierSuper:bool -> ?modifierSymbol:bool -> ?modifierSymbolLock:bool -> ?shiftKey:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Focus-related events like focus, blur, focusin, or focusout.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FocusEvent)
*)
and[@js.scope "FocusEvent"] FocusEvent : sig
  type t = [`Event | `FocusEvent | `UIEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `FocusEvent | `UIEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `FocusEvent | `UIEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FocusEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FocusEvent/relatedTarget) *)
  val get_relatedTarget: 'tags this -> EventTarget.t option [@@js.get "relatedTarget"]
  val create: ?relatedTarget:EventTarget.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> ?eventInitDict:FocusEventInit.t -> unit -> t [@@js.create]
end
and FocusEventInit : sig
  type t = [`EventInit | `FocusEventInit | `UIEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `FocusEventInit | `UIEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `FocusEventInit | `UIEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FocusEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_relatedTarget: 'tags this -> EventTarget.t option [@@js.get "relatedTarget"]
  val set_relatedTarget: 'tags this -> EventTarget.t option -> unit [@@js.set "relatedTarget"]
  val create: ?relatedTarget:EventTarget.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Provides a way to easily construct a set of key/value pairs representing form fields and their values, which can then be easily sent using the XMLHttpRequest.send() method. It uses the same format a form would use if the encoding type were set to "multipart/form-data".
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FormData)
*)
and[@js.scope "FormData"] FormData : sig
  type t = [`FormData] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FormData]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FormData]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FormData ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> (string * FormDataEntryValue.t) IterableIterator.t *)
  
  (** Returns an array of key, value pairs for every entry in the list. *)
  val entries: 'tags this -> (string * FormDataEntryValue.t) IterableIterator.t [@@js.call "entries"]
  
  (** Returns a list of keys in the list. *)
  val keys: 'tags this -> string IterableIterator.t [@@js.call "keys"]
  
  (** Returns a list of values in the list. *)
  val values: 'tags this -> FormDataEntryValue.t IterableIterator.t [@@js.call "values"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FormData/append) *)
  val append: 'tags this -> name:string -> value:([`U1 of string | `U2 of Blob.t] [@js.union]) -> unit [@@js.call "append"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FormData/append) *)
  val append': 'tags this -> name:string -> value:string -> unit [@@js.call "append"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FormData/append) *)
  val append'': 'tags this -> name:string -> blobValue:Blob.t -> ?filename:string -> unit -> unit [@@js.call "append"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FormData/delete) *)
  val delete: 'tags this -> name:string -> unit [@@js.call "delete"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FormData/get) *)
  val get_: 'tags this -> name:string -> FormDataEntryValue.t option [@@js.call "get"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FormData/getAll) *)
  val getAll: 'tags this -> name:string -> FormDataEntryValue.t list [@@js.call "getAll"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FormData/has) *)
  val has: 'tags this -> name:string -> bool [@@js.call "has"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FormData/set) *)
  val set_: 'tags this -> name:string -> value:([`U1 of string | `U2 of Blob.t] [@js.union]) -> unit [@@js.call "set"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FormData/set) *)
  val set_': 'tags this -> name:string -> value:string -> unit [@@js.call "set"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FormData/set) *)
  val set_'': 'tags this -> name:string -> blobValue:Blob.t -> ?filename:string -> unit -> unit [@@js.call "set"]
  val forEach: 'tags this -> callbackfn:(value:FormDataEntryValue.t -> key:string -> parent:t -> unit) -> ?thisArg:any -> unit -> unit [@@js.call "forEach"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: ?form:HTMLFormElement.t -> ?submitter:HTMLElement.t option -> unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FormDataEvent) *)
and[@js.scope "FormDataEvent"] FormDataEvent : sig
  type t = [`Event | `FormDataEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `FormDataEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `FormDataEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FormDataEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns a FormData object representing names and values of elements associated to the target form. Operations on the FormData object will affect form data to be submitted.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FormDataEvent/formData)
  *)
  val get_formData: 'tags this -> FormData.t [@@js.get "formData"]
  val create: formData:FormData.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> eventInitDict:FormDataEventInit.t -> t [@@js.create]
end
and FormDataEventInit : sig
  type t = [`EventInit | `FormDataEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `FormDataEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `FormDataEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FormDataEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_formData: 'tags this -> FormData.t [@@js.get "formData"]
  val set_formData: 'tags this -> FormData.t -> unit [@@js.set "formData"]
  val create: formData:FormData.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
and GlobalEventHandlers : sig
  type t = [`GlobalEventHandlers] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`GlobalEventHandlers]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`GlobalEventHandlers]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `GlobalEventHandlers ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Fires when the user aborts the download.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/abort_event)
  *)
  val get_onabort: 'tags this -> (this:t -> ev:UIEvent.t -> any) option [@@js.get "onabort"]
  
  (**
    Fires when the user aborts the download.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/abort_event)
  *)
  val set_onabort: 'tags this -> (this:t -> ev:UIEvent.t -> any) option -> unit [@@js.set "onabort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/animationcancel_event) *)
  val get_onanimationcancel: 'tags this -> (this:t -> ev:AnimationEvent.t -> any) option [@@js.get "onanimationcancel"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/animationcancel_event) *)
  val set_onanimationcancel: 'tags this -> (this:t -> ev:AnimationEvent.t -> any) option -> unit [@@js.set "onanimationcancel"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/animationend_event) *)
  val get_onanimationend: 'tags this -> (this:t -> ev:AnimationEvent.t -> any) option [@@js.get "onanimationend"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/animationend_event) *)
  val set_onanimationend: 'tags this -> (this:t -> ev:AnimationEvent.t -> any) option -> unit [@@js.set "onanimationend"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/animationiteration_event) *)
  val get_onanimationiteration: 'tags this -> (this:t -> ev:AnimationEvent.t -> any) option [@@js.get "onanimationiteration"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/animationiteration_event) *)
  val set_onanimationiteration: 'tags this -> (this:t -> ev:AnimationEvent.t -> any) option -> unit [@@js.set "onanimationiteration"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/animationstart_event) *)
  val get_onanimationstart: 'tags this -> (this:t -> ev:AnimationEvent.t -> any) option [@@js.get "onanimationstart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/animationstart_event) *)
  val set_onanimationstart: 'tags this -> (this:t -> ev:AnimationEvent.t -> any) option -> unit [@@js.set "onanimationstart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/auxclick_event) *)
  val get_onauxclick: 'tags this -> (this:t -> ev:MouseEvent.t -> any) option [@@js.get "onauxclick"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/auxclick_event) *)
  val set_onauxclick: 'tags this -> (this:t -> ev:MouseEvent.t -> any) option -> unit [@@js.set "onauxclick"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/beforeinput_event) *)
  val get_onbeforeinput: 'tags this -> (this:t -> ev:InputEvent.t -> any) option [@@js.get "onbeforeinput"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/beforeinput_event) *)
  val set_onbeforeinput: 'tags this -> (this:t -> ev:InputEvent.t -> any) option -> unit [@@js.set "onbeforeinput"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/beforetoggle_event) *)
  val get_onbeforetoggle: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onbeforetoggle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/beforetoggle_event) *)
  val set_onbeforetoggle: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onbeforetoggle"]
  
  (**
    Fires when the object loses the input focus.
    @param ev The focus event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/blur_event)
  *)
  val get_onblur: 'tags this -> (this:t -> ev:FocusEvent.t -> any) option [@@js.get "onblur"]
  
  (**
    Fires when the object loses the input focus.
    @param ev The focus event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/blur_event)
  *)
  val set_onblur: 'tags this -> (this:t -> ev:FocusEvent.t -> any) option -> unit [@@js.set "onblur"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/cancel_event) *)
  val get_oncancel: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "oncancel"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/cancel_event) *)
  val set_oncancel: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "oncancel"]
  
  (**
    Occurs when playback is possible, but would require further buffering.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/canplay_event)
  *)
  val get_oncanplay: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "oncanplay"]
  
  (**
    Occurs when playback is possible, but would require further buffering.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/canplay_event)
  *)
  val set_oncanplay: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "oncanplay"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/canplaythrough_event) *)
  val get_oncanplaythrough: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "oncanplaythrough"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/canplaythrough_event) *)
  val set_oncanplaythrough: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "oncanplaythrough"]
  
  (**
    Fires when the contents of the object or selection have changed.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/change_event)
  *)
  val get_onchange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onchange"]
  
  (**
    Fires when the contents of the object or selection have changed.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/change_event)
  *)
  val set_onchange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onchange"]
  
  (**
    Fires when the user clicks the left mouse button on the object
    @param ev The mouse event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/click_event)
  *)
  val get_onclick: 'tags this -> (this:t -> ev:MouseEvent.t -> any) option [@@js.get "onclick"]
  
  (**
    Fires when the user clicks the left mouse button on the object
    @param ev The mouse event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/click_event)
  *)
  val set_onclick: 'tags this -> (this:t -> ev:MouseEvent.t -> any) option -> unit [@@js.set "onclick"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/close_event) *)
  val get_onclose: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onclose"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/close_event) *)
  val set_onclose: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onclose"]
  
  (**
    Fires when the user clicks the right mouse button in the client area, opening the context menu.
    @param ev The mouse event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/contextmenu_event)
  *)
  val get_oncontextmenu: 'tags this -> (this:t -> ev:MouseEvent.t -> any) option [@@js.get "oncontextmenu"]
  
  (**
    Fires when the user clicks the right mouse button in the client area, opening the context menu.
    @param ev The mouse event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/contextmenu_event)
  *)
  val set_oncontextmenu: 'tags this -> (this:t -> ev:MouseEvent.t -> any) option -> unit [@@js.set "oncontextmenu"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/copy_event) *)
  val get_oncopy: 'tags this -> (this:t -> ev:ClipboardEvent.t -> any) option [@@js.get "oncopy"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/copy_event) *)
  val set_oncopy: 'tags this -> (this:t -> ev:ClipboardEvent.t -> any) option -> unit [@@js.set "oncopy"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/cuechange_event) *)
  val get_oncuechange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "oncuechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/cuechange_event) *)
  val set_oncuechange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "oncuechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/cut_event) *)
  val get_oncut: 'tags this -> (this:t -> ev:ClipboardEvent.t -> any) option [@@js.get "oncut"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/cut_event) *)
  val set_oncut: 'tags this -> (this:t -> ev:ClipboardEvent.t -> any) option -> unit [@@js.set "oncut"]
  
  (**
    Fires when the user double-clicks the object.
    @param ev The mouse event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/dblclick_event)
  *)
  val get_ondblclick: 'tags this -> (this:t -> ev:MouseEvent.t -> any) option [@@js.get "ondblclick"]
  
  (**
    Fires when the user double-clicks the object.
    @param ev The mouse event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/dblclick_event)
  *)
  val set_ondblclick: 'tags this -> (this:t -> ev:MouseEvent.t -> any) option -> unit [@@js.set "ondblclick"]
  
  (**
    Fires on the source object continuously during a drag operation.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/drag_event)
  *)
  val get_ondrag: 'tags this -> (this:t -> ev:DragEvent.t -> any) option [@@js.get "ondrag"]
  
  (**
    Fires on the source object continuously during a drag operation.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/drag_event)
  *)
  val set_ondrag: 'tags this -> (this:t -> ev:DragEvent.t -> any) option -> unit [@@js.set "ondrag"]
  
  (**
    Fires on the source object when the user releases the mouse at the close of a drag operation.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragend_event)
  *)
  val get_ondragend: 'tags this -> (this:t -> ev:DragEvent.t -> any) option [@@js.get "ondragend"]
  
  (**
    Fires on the source object when the user releases the mouse at the close of a drag operation.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragend_event)
  *)
  val set_ondragend: 'tags this -> (this:t -> ev:DragEvent.t -> any) option -> unit [@@js.set "ondragend"]
  
  (**
    Fires on the target element when the user drags the object to a valid drop target.
    @param ev The drag event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragenter_event)
  *)
  val get_ondragenter: 'tags this -> (this:t -> ev:DragEvent.t -> any) option [@@js.get "ondragenter"]
  
  (**
    Fires on the target element when the user drags the object to a valid drop target.
    @param ev The drag event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragenter_event)
  *)
  val set_ondragenter: 'tags this -> (this:t -> ev:DragEvent.t -> any) option -> unit [@@js.set "ondragenter"]
  
  (**
    Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.
    @param ev The drag event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragleave_event)
  *)
  val get_ondragleave: 'tags this -> (this:t -> ev:DragEvent.t -> any) option [@@js.get "ondragleave"]
  
  (**
    Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.
    @param ev The drag event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragleave_event)
  *)
  val set_ondragleave: 'tags this -> (this:t -> ev:DragEvent.t -> any) option -> unit [@@js.set "ondragleave"]
  
  (**
    Fires on the target element continuously while the user drags the object over a valid drop target.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragover_event)
  *)
  val get_ondragover: 'tags this -> (this:t -> ev:DragEvent.t -> any) option [@@js.get "ondragover"]
  
  (**
    Fires on the target element continuously while the user drags the object over a valid drop target.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragover_event)
  *)
  val set_ondragover: 'tags this -> (this:t -> ev:DragEvent.t -> any) option -> unit [@@js.set "ondragover"]
  
  (**
    Fires on the source object when the user starts to drag a text selection or selected object.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragstart_event)
  *)
  val get_ondragstart: 'tags this -> (this:t -> ev:DragEvent.t -> any) option [@@js.get "ondragstart"]
  
  (**
    Fires on the source object when the user starts to drag a text selection or selected object.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragstart_event)
  *)
  val set_ondragstart: 'tags this -> (this:t -> ev:DragEvent.t -> any) option -> unit [@@js.set "ondragstart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/drop_event) *)
  val get_ondrop: 'tags this -> (this:t -> ev:DragEvent.t -> any) option [@@js.get "ondrop"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/drop_event) *)
  val set_ondrop: 'tags this -> (this:t -> ev:DragEvent.t -> any) option -> unit [@@js.set "ondrop"]
  
  (**
    Occurs when the duration attribute is updated.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/durationchange_event)
  *)
  val get_ondurationchange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "ondurationchange"]
  
  (**
    Occurs when the duration attribute is updated.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/durationchange_event)
  *)
  val set_ondurationchange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "ondurationchange"]
  
  (**
    Occurs when the media element is reset to its initial state.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/emptied_event)
  *)
  val get_onemptied: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onemptied"]
  
  (**
    Occurs when the media element is reset to its initial state.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/emptied_event)
  *)
  val set_onemptied: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onemptied"]
  
  (**
    Occurs when the end of playback is reached.
    @param ev The event
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/ended_event)
  *)
  val get_onended: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onended"]
  
  (**
    Occurs when the end of playback is reached.
    @param ev The event
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/ended_event)
  *)
  val set_onended: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onended"]
  
  (**
    Fires when an error occurs during object loading.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/error_event)
  *)
  val get_onerror: 'tags this -> OnErrorEventHandler.t [@@js.get "onerror"]
  
  (**
    Fires when an error occurs during object loading.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/error_event)
  *)
  val set_onerror: 'tags this -> OnErrorEventHandler.t -> unit [@@js.set "onerror"]
  
  (**
    Fires when the object receives focus.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/focus_event)
  *)
  val get_onfocus: 'tags this -> (this:t -> ev:FocusEvent.t -> any) option [@@js.get "onfocus"]
  
  (**
    Fires when the object receives focus.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/focus_event)
  *)
  val set_onfocus: 'tags this -> (this:t -> ev:FocusEvent.t -> any) option -> unit [@@js.set "onfocus"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/formdata_event) *)
  val get_onformdata: 'tags this -> (this:t -> ev:FormDataEvent.t -> any) option [@@js.get "onformdata"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/formdata_event) *)
  val set_onformdata: 'tags this -> (this:t -> ev:FormDataEvent.t -> any) option -> unit [@@js.set "onformdata"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/gotpointercapture_event) *)
  val get_ongotpointercapture: 'tags this -> (this:t -> ev:PointerEvent.t -> any) option [@@js.get "ongotpointercapture"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/gotpointercapture_event) *)
  val set_ongotpointercapture: 'tags this -> (this:t -> ev:PointerEvent.t -> any) option -> unit [@@js.set "ongotpointercapture"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/input_event) *)
  val get_oninput: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "oninput"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/input_event) *)
  val set_oninput: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "oninput"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/invalid_event) *)
  val get_oninvalid: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "oninvalid"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/invalid_event) *)
  val set_oninvalid: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "oninvalid"]
  
  (**
    Fires when the user presses a key.
    @param ev The keyboard event
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/keydown_event)
  *)
  val get_onkeydown: 'tags this -> (this:t -> ev:KeyboardEvent.t -> any) option [@@js.get "onkeydown"]
  
  (**
    Fires when the user presses a key.
    @param ev The keyboard event
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/keydown_event)
  *)
  val set_onkeydown: 'tags this -> (this:t -> ev:KeyboardEvent.t -> any) option -> unit [@@js.set "onkeydown"]
  
  (**
    Fires when the user presses an alphanumeric key.
    @param ev The event.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/keypress_event)
  *)
  val get_onkeypress: 'tags this -> (this:t -> ev:KeyboardEvent.t -> any) option [@@js.get "onkeypress"]
  
  (**
    Fires when the user presses an alphanumeric key.
    @param ev The event.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/keypress_event)
  *)
  val set_onkeypress: 'tags this -> (this:t -> ev:KeyboardEvent.t -> any) option -> unit [@@js.set "onkeypress"]
  
  (**
    Fires when the user releases a key.
    @param ev The keyboard event
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/keyup_event)
  *)
  val get_onkeyup: 'tags this -> (this:t -> ev:KeyboardEvent.t -> any) option [@@js.get "onkeyup"]
  
  (**
    Fires when the user releases a key.
    @param ev The keyboard event
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/keyup_event)
  *)
  val set_onkeyup: 'tags this -> (this:t -> ev:KeyboardEvent.t -> any) option -> unit [@@js.set "onkeyup"]
  
  (**
    Fires immediately after the browser loads the object.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGElement/load_event)
  *)
  val get_onload: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onload"]
  
  (**
    Fires immediately after the browser loads the object.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGElement/load_event)
  *)
  val set_onload: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onload"]
  
  (**
    Occurs when media data is loaded at the current playback position.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadeddata_event)
  *)
  val get_onloadeddata: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onloadeddata"]
  
  (**
    Occurs when media data is loaded at the current playback position.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadeddata_event)
  *)
  val set_onloadeddata: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onloadeddata"]
  
  (**
    Occurs when the duration and dimensions of the media have been determined.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadedmetadata_event)
  *)
  val get_onloadedmetadata: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onloadedmetadata"]
  
  (**
    Occurs when the duration and dimensions of the media have been determined.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadedmetadata_event)
  *)
  val set_onloadedmetadata: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onloadedmetadata"]
  
  (**
    Occurs when Internet Explorer begins looking for media data.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadstart_event)
  *)
  val get_onloadstart: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onloadstart"]
  
  (**
    Occurs when Internet Explorer begins looking for media data.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadstart_event)
  *)
  val set_onloadstart: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onloadstart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/lostpointercapture_event) *)
  val get_onlostpointercapture: 'tags this -> (this:t -> ev:PointerEvent.t -> any) option [@@js.get "onlostpointercapture"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/lostpointercapture_event) *)
  val set_onlostpointercapture: 'tags this -> (this:t -> ev:PointerEvent.t -> any) option -> unit [@@js.set "onlostpointercapture"]
  
  (**
    Fires when the user clicks the object with either mouse button.
    @param ev The mouse event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/mousedown_event)
  *)
  val get_onmousedown: 'tags this -> (this:t -> ev:MouseEvent.t -> any) option [@@js.get "onmousedown"]
  
  (**
    Fires when the user clicks the object with either mouse button.
    @param ev The mouse event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/mousedown_event)
  *)
  val set_onmousedown: 'tags this -> (this:t -> ev:MouseEvent.t -> any) option -> unit [@@js.set "onmousedown"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/mouseenter_event) *)
  val get_onmouseenter: 'tags this -> (this:t -> ev:MouseEvent.t -> any) option [@@js.get "onmouseenter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/mouseenter_event) *)
  val set_onmouseenter: 'tags this -> (this:t -> ev:MouseEvent.t -> any) option -> unit [@@js.set "onmouseenter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/mouseleave_event) *)
  val get_onmouseleave: 'tags this -> (this:t -> ev:MouseEvent.t -> any) option [@@js.get "onmouseleave"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/mouseleave_event) *)
  val set_onmouseleave: 'tags this -> (this:t -> ev:MouseEvent.t -> any) option -> unit [@@js.set "onmouseleave"]
  
  (**
    Fires when the user moves the mouse over the object.
    @param ev The mouse event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/mousemove_event)
  *)
  val get_onmousemove: 'tags this -> (this:t -> ev:MouseEvent.t -> any) option [@@js.get "onmousemove"]
  
  (**
    Fires when the user moves the mouse over the object.
    @param ev The mouse event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/mousemove_event)
  *)
  val set_onmousemove: 'tags this -> (this:t -> ev:MouseEvent.t -> any) option -> unit [@@js.set "onmousemove"]
  
  (**
    Fires when the user moves the mouse pointer outside the boundaries of the object.
    @param ev The mouse event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/mouseout_event)
  *)
  val get_onmouseout: 'tags this -> (this:t -> ev:MouseEvent.t -> any) option [@@js.get "onmouseout"]
  
  (**
    Fires when the user moves the mouse pointer outside the boundaries of the object.
    @param ev The mouse event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/mouseout_event)
  *)
  val set_onmouseout: 'tags this -> (this:t -> ev:MouseEvent.t -> any) option -> unit [@@js.set "onmouseout"]
  
  (**
    Fires when the user moves the mouse pointer into the object.
    @param ev The mouse event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/mouseover_event)
  *)
  val get_onmouseover: 'tags this -> (this:t -> ev:MouseEvent.t -> any) option [@@js.get "onmouseover"]
  
  (**
    Fires when the user moves the mouse pointer into the object.
    @param ev The mouse event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/mouseover_event)
  *)
  val set_onmouseover: 'tags this -> (this:t -> ev:MouseEvent.t -> any) option -> unit [@@js.set "onmouseover"]
  
  (**
    Fires when the user releases a mouse button while the mouse is over the object.
    @param ev The mouse event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/mouseup_event)
  *)
  val get_onmouseup: 'tags this -> (this:t -> ev:MouseEvent.t -> any) option [@@js.get "onmouseup"]
  
  (**
    Fires when the user releases a mouse button while the mouse is over the object.
    @param ev The mouse event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/mouseup_event)
  *)
  val set_onmouseup: 'tags this -> (this:t -> ev:MouseEvent.t -> any) option -> unit [@@js.set "onmouseup"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/paste_event) *)
  val get_onpaste: 'tags this -> (this:t -> ev:ClipboardEvent.t -> any) option [@@js.get "onpaste"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/paste_event) *)
  val set_onpaste: 'tags this -> (this:t -> ev:ClipboardEvent.t -> any) option -> unit [@@js.set "onpaste"]
  
  (**
    Occurs when playback is paused.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/pause_event)
  *)
  val get_onpause: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onpause"]
  
  (**
    Occurs when playback is paused.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/pause_event)
  *)
  val set_onpause: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onpause"]
  
  (**
    Occurs when the play method is requested.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/play_event)
  *)
  val get_onplay: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onplay"]
  
  (**
    Occurs when the play method is requested.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/play_event)
  *)
  val set_onplay: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onplay"]
  
  (**
    Occurs when the audio or video has started playing.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/playing_event)
  *)
  val get_onplaying: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onplaying"]
  
  (**
    Occurs when the audio or video has started playing.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/playing_event)
  *)
  val set_onplaying: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onplaying"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/pointercancel_event) *)
  val get_onpointercancel: 'tags this -> (this:t -> ev:PointerEvent.t -> any) option [@@js.get "onpointercancel"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/pointercancel_event) *)
  val set_onpointercancel: 'tags this -> (this:t -> ev:PointerEvent.t -> any) option -> unit [@@js.set "onpointercancel"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/pointerdown_event) *)
  val get_onpointerdown: 'tags this -> (this:t -> ev:PointerEvent.t -> any) option [@@js.get "onpointerdown"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/pointerdown_event) *)
  val set_onpointerdown: 'tags this -> (this:t -> ev:PointerEvent.t -> any) option -> unit [@@js.set "onpointerdown"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/pointerenter_event) *)
  val get_onpointerenter: 'tags this -> (this:t -> ev:PointerEvent.t -> any) option [@@js.get "onpointerenter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/pointerenter_event) *)
  val set_onpointerenter: 'tags this -> (this:t -> ev:PointerEvent.t -> any) option -> unit [@@js.set "onpointerenter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/pointerleave_event) *)
  val get_onpointerleave: 'tags this -> (this:t -> ev:PointerEvent.t -> any) option [@@js.get "onpointerleave"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/pointerleave_event) *)
  val set_onpointerleave: 'tags this -> (this:t -> ev:PointerEvent.t -> any) option -> unit [@@js.set "onpointerleave"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/pointermove_event) *)
  val get_onpointermove: 'tags this -> (this:t -> ev:PointerEvent.t -> any) option [@@js.get "onpointermove"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/pointermove_event) *)
  val set_onpointermove: 'tags this -> (this:t -> ev:PointerEvent.t -> any) option -> unit [@@js.set "onpointermove"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/pointerout_event) *)
  val get_onpointerout: 'tags this -> (this:t -> ev:PointerEvent.t -> any) option [@@js.get "onpointerout"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/pointerout_event) *)
  val set_onpointerout: 'tags this -> (this:t -> ev:PointerEvent.t -> any) option -> unit [@@js.set "onpointerout"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/pointerover_event) *)
  val get_onpointerover: 'tags this -> (this:t -> ev:PointerEvent.t -> any) option [@@js.get "onpointerover"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/pointerover_event) *)
  val set_onpointerover: 'tags this -> (this:t -> ev:PointerEvent.t -> any) option -> unit [@@js.set "onpointerover"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/pointerup_event) *)
  val get_onpointerup: 'tags this -> (this:t -> ev:PointerEvent.t -> any) option [@@js.get "onpointerup"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/pointerup_event) *)
  val set_onpointerup: 'tags this -> (this:t -> ev:PointerEvent.t -> any) option -> unit [@@js.set "onpointerup"]
  
  (**
    Occurs to indicate progress while downloading media data.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/progress_event)
  *)
  val get_onprogress: 'tags this -> (this:t -> ev:ProgressEvent.t_0 -> any) option [@@js.get "onprogress"]
  
  (**
    Occurs to indicate progress while downloading media data.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/progress_event)
  *)
  val set_onprogress: 'tags this -> (this:t -> ev:ProgressEvent.t_0 -> any) option -> unit [@@js.set "onprogress"]
  
  (**
    Occurs when the playback rate is increased or decreased.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/ratechange_event)
  *)
  val get_onratechange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onratechange"]
  
  (**
    Occurs when the playback rate is increased or decreased.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/ratechange_event)
  *)
  val set_onratechange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onratechange"]
  
  (**
    Fires when the user resets a form.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/reset_event)
  *)
  val get_onreset: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onreset"]
  
  (**
    Fires when the user resets a form.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/reset_event)
  *)
  val set_onreset: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onreset"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/resize_event) *)
  val get_onresize: 'tags this -> (this:t -> ev:UIEvent.t -> any) option [@@js.get "onresize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/resize_event) *)
  val set_onresize: 'tags this -> (this:t -> ev:UIEvent.t -> any) option -> unit [@@js.set "onresize"]
  
  (**
    Fires when the user repositions the scroll box in the scroll bar on the object.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/scroll_event)
  *)
  val get_onscroll: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onscroll"]
  
  (**
    Fires when the user repositions the scroll box in the scroll bar on the object.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/scroll_event)
  *)
  val set_onscroll: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onscroll"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/scrollend_event) *)
  val get_onscrollend: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onscrollend"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/scrollend_event) *)
  val set_onscrollend: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onscrollend"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/securitypolicyviolation_event) *)
  val get_onsecuritypolicyviolation: 'tags this -> (this:t -> ev:SecurityPolicyViolationEvent.t -> any) option [@@js.get "onsecuritypolicyviolation"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/securitypolicyviolation_event) *)
  val set_onsecuritypolicyviolation: 'tags this -> (this:t -> ev:SecurityPolicyViolationEvent.t -> any) option -> unit [@@js.set "onsecuritypolicyviolation"]
  
  (**
    Occurs when the seek operation ends.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seeked_event)
  *)
  val get_onseeked: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onseeked"]
  
  (**
    Occurs when the seek operation ends.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seeked_event)
  *)
  val set_onseeked: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onseeked"]
  
  (**
    Occurs when the current playback position is moved.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seeking_event)
  *)
  val get_onseeking: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onseeking"]
  
  (**
    Occurs when the current playback position is moved.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seeking_event)
  *)
  val set_onseeking: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onseeking"]
  
  (**
    Fires when the current selection changes.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/select_event)
  *)
  val get_onselect: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onselect"]
  
  (**
    Fires when the current selection changes.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/select_event)
  *)
  val set_onselect: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onselect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/selectionchange_event) *)
  val get_onselectionchange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onselectionchange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/selectionchange_event) *)
  val set_onselectionchange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onselectionchange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/selectstart_event) *)
  val get_onselectstart: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onselectstart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/selectstart_event) *)
  val set_onselectstart: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onselectstart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement/slotchange_event) *)
  val get_onslotchange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onslotchange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement/slotchange_event) *)
  val set_onslotchange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onslotchange"]
  
  (**
    Occurs when the download has stopped.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/stalled_event)
  *)
  val get_onstalled: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onstalled"]
  
  (**
    Occurs when the download has stopped.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/stalled_event)
  *)
  val set_onstalled: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onstalled"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/submit_event) *)
  val get_onsubmit: 'tags this -> (this:t -> ev:SubmitEvent.t -> any) option [@@js.get "onsubmit"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/submit_event) *)
  val set_onsubmit: 'tags this -> (this:t -> ev:SubmitEvent.t -> any) option -> unit [@@js.set "onsubmit"]
  
  (**
    Occurs if the load operation has been intentionally halted.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/suspend_event)
  *)
  val get_onsuspend: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onsuspend"]
  
  (**
    Occurs if the load operation has been intentionally halted.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/suspend_event)
  *)
  val set_onsuspend: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onsuspend"]
  
  (**
    Occurs to indicate the current playback position.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/timeupdate_event)
  *)
  val get_ontimeupdate: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "ontimeupdate"]
  
  (**
    Occurs to indicate the current playback position.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/timeupdate_event)
  *)
  val set_ontimeupdate: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "ontimeupdate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLDetailsElement/toggle_event) *)
  val get_ontoggle: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "ontoggle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLDetailsElement/toggle_event) *)
  val set_ontoggle: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "ontoggle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/touchcancel_event) *)
  val get_ontouchcancel: 'tags this -> (this:t -> ev:TouchEvent.t -> any) option [@@js.get "ontouchcancel"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/touchcancel_event) *)
  val set_ontouchcancel: 'tags this -> ([`Null | `Undefined of undefined | `U1 of (this:t -> ev:TouchEvent.t -> any)] [@js.union]) -> unit [@@js.set "ontouchcancel"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/touchend_event) *)
  val get_ontouchend: 'tags this -> (this:t -> ev:TouchEvent.t -> any) option [@@js.get "ontouchend"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/touchend_event) *)
  val set_ontouchend: 'tags this -> ([`Null | `Undefined of undefined | `U1 of (this:t -> ev:TouchEvent.t -> any)] [@js.union]) -> unit [@@js.set "ontouchend"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/touchmove_event) *)
  val get_ontouchmove: 'tags this -> (this:t -> ev:TouchEvent.t -> any) option [@@js.get "ontouchmove"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/touchmove_event) *)
  val set_ontouchmove: 'tags this -> ([`Null | `Undefined of undefined | `U1 of (this:t -> ev:TouchEvent.t -> any)] [@js.union]) -> unit [@@js.set "ontouchmove"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/touchstart_event) *)
  val get_ontouchstart: 'tags this -> (this:t -> ev:TouchEvent.t -> any) option [@@js.get "ontouchstart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/touchstart_event) *)
  val set_ontouchstart: 'tags this -> ([`Null | `Undefined of undefined | `U1 of (this:t -> ev:TouchEvent.t -> any)] [@js.union]) -> unit [@@js.set "ontouchstart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/transitioncancel_event) *)
  val get_ontransitioncancel: 'tags this -> (this:t -> ev:TransitionEvent.t -> any) option [@@js.get "ontransitioncancel"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/transitioncancel_event) *)
  val set_ontransitioncancel: 'tags this -> (this:t -> ev:TransitionEvent.t -> any) option -> unit [@@js.set "ontransitioncancel"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/transitionend_event) *)
  val get_ontransitionend: 'tags this -> (this:t -> ev:TransitionEvent.t -> any) option [@@js.get "ontransitionend"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/transitionend_event) *)
  val set_ontransitionend: 'tags this -> (this:t -> ev:TransitionEvent.t -> any) option -> unit [@@js.set "ontransitionend"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/transitionrun_event) *)
  val get_ontransitionrun: 'tags this -> (this:t -> ev:TransitionEvent.t -> any) option [@@js.get "ontransitionrun"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/transitionrun_event) *)
  val set_ontransitionrun: 'tags this -> (this:t -> ev:TransitionEvent.t -> any) option -> unit [@@js.set "ontransitionrun"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/transitionstart_event) *)
  val get_ontransitionstart: 'tags this -> (this:t -> ev:TransitionEvent.t -> any) option [@@js.get "ontransitionstart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/transitionstart_event) *)
  val set_ontransitionstart: 'tags this -> (this:t -> ev:TransitionEvent.t -> any) option -> unit [@@js.set "ontransitionstart"]
  
  (**
    Occurs when the volume is changed, or playback is muted or unmuted.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/volumechange_event)
  *)
  val get_onvolumechange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onvolumechange"]
  
  (**
    Occurs when the volume is changed, or playback is muted or unmuted.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/volumechange_event)
  *)
  val set_onvolumechange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onvolumechange"]
  
  (**
    Occurs when playback stops because the next frame of a video resource is not available.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/waiting_event)
  *)
  val get_onwaiting: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onwaiting"]
  
  (**
    Occurs when playback stops because the next frame of a video resource is not available.
    @param ev The event.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/waiting_event)
  *)
  val set_onwaiting: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onwaiting"]
  
  (**
    @deprecated This is a legacy alias of `onanimationend`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/animationend_event)
  *)
  val get_onwebkitanimationend: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onwebkitanimationend"]
  
  (**
    @deprecated This is a legacy alias of `onanimationend`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/animationend_event)
  *)
  val set_onwebkitanimationend: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onwebkitanimationend"]
  
  (**
    @deprecated This is a legacy alias of `onanimationiteration`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/animationiteration_event)
  *)
  val get_onwebkitanimationiteration: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onwebkitanimationiteration"]
  
  (**
    @deprecated This is a legacy alias of `onanimationiteration`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/animationiteration_event)
  *)
  val set_onwebkitanimationiteration: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onwebkitanimationiteration"]
  
  (**
    @deprecated This is a legacy alias of `onanimationstart`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/animationstart_event)
  *)
  val get_onwebkitanimationstart: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onwebkitanimationstart"]
  
  (**
    @deprecated This is a legacy alias of `onanimationstart`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/animationstart_event)
  *)
  val set_onwebkitanimationstart: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onwebkitanimationstart"]
  
  (**
    @deprecated This is a legacy alias of `ontransitionend`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/transitionend_event)
  *)
  val get_onwebkittransitionend: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onwebkittransitionend"]
  
  (**
    @deprecated This is a legacy alias of `ontransitionend`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/transitionend_event)
  *)
  val set_onwebkittransitionend: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onwebkittransitionend"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/wheel_event) *)
  val get_onwheel: 'tags this -> (this:t -> ev:WheelEvent.t -> any) option [@@js.get "onwheel"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/wheel_event) *)
  val set_onwheel: 'tags this -> (this:t -> ev:WheelEvent.t -> any) option -> unit [@@js.set "onwheel"]
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'GlobalEventHandlersEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'GlobalEventHandlersEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAllCollection) *)
and[@js.scope "HTMLAllCollection"] HTMLAllCollection : sig
  type t = [`HTMLAllCollection] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`HTMLAllCollection]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`HTMLAllCollection]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLAllCollection ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> Element.t IterableIterator.t *)
  
  (**
    Returns the number of elements in the collection.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAllCollection/length)
  *)
  val get_length: 'tags this -> float [@@js.get "length"]
  
  (**
    Returns the item with index index from the collection (determined by tree order).
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAllCollection/item)
  *)
  val item: 'tags this -> ?nameOrIndex:string -> unit -> (Element.t, HTMLCollection.t) union2 option [@@js.call "item"]
  
  (**
    Returns the item with ID or name name from the collection.
    
    If there are multiple matching items, then an HTMLCollection object containing all those elements is returned.
    
    Only button, form, iframe, input, map, meta, object, select, and textarea elements can have a name for the purpose of this method; their name is given by the value of their name attribute.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAllCollection/namedItem)
  *)
  val namedItem: 'tags this -> name:string -> (Element.t, HTMLCollection.t) union2 option [@@js.call "namedItem"]
  val get: 'tags this -> float -> Element.t [@@js.index_get]
  val set: 'tags this -> float -> Element.t -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Hyperlink elements and provides special properties and methods (beyond those of the regular HTMLElement object interface that they inherit from) for manipulating the layout and presentation of such elements.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement)
*)
and[@js.scope "HTMLAnchorElement"] HTMLAnchorElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLAnchorElement | `HTMLElement | `HTMLHyperlinkElementUtils | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLAnchorElement | `HTMLElement | `HTMLHyperlinkElementUtils | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLAnchorElement | `HTMLElement | `HTMLHyperlinkElementUtils | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLAnchorElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Sets or retrieves the character set used to encode the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/charset)
  *)
  val get_charset: 'tags this -> string [@@js.get "charset"]
  
  (**
    Sets or retrieves the character set used to encode the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/charset)
  *)
  val set_charset: 'tags this -> string -> unit [@@js.set "charset"]
  
  (**
    Sets or retrieves the coordinates of the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/coords)
  *)
  val get_coords: 'tags this -> string [@@js.get "coords"]
  
  (**
    Sets or retrieves the coordinates of the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/coords)
  *)
  val set_coords: 'tags this -> string -> unit [@@js.set "coords"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/download) *)
  val get_download: 'tags this -> string [@@js.get "download"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/download) *)
  val set_download: 'tags this -> string -> unit [@@js.set "download"]
  
  (**
    Sets or retrieves the language code of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/hreflang)
  *)
  val get_hreflang: 'tags this -> string [@@js.get "hreflang"]
  
  (**
    Sets or retrieves the language code of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/hreflang)
  *)
  val set_hreflang: 'tags this -> string -> unit [@@js.set "hreflang"]
  
  (**
    Sets or retrieves the shape of the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/name)
  *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (**
    Sets or retrieves the shape of the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/name)
  *)
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  val get_ping: 'tags this -> string [@@js.get "ping"]
  val set_ping: 'tags this -> string -> unit [@@js.set "ping"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/referrerPolicy) *)
  val get_referrerPolicy: 'tags this -> string [@@js.get "referrerPolicy"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/referrerPolicy) *)
  val set_referrerPolicy: 'tags this -> string -> unit [@@js.set "referrerPolicy"]
  
  (**
    Sets or retrieves the relationship between the object and the destination of the link.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/rel)
  *)
  val get_rel: 'tags this -> string [@@js.get "rel"]
  
  (**
    Sets or retrieves the relationship between the object and the destination of the link.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/rel)
  *)
  val set_rel: 'tags this -> string -> unit [@@js.set "rel"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/relList) *)
  val get_relList: 'tags this -> DOMTokenList.t [@@js.get "relList"]
  
  (**
    Sets or retrieves the relationship between the object and the destination of the link.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/rev)
  *)
  val get_rev: 'tags this -> string [@@js.get "rev"]
  
  (**
    Sets or retrieves the relationship between the object and the destination of the link.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/rev)
  *)
  val set_rev: 'tags this -> string -> unit [@@js.set "rev"]
  
  (**
    Sets or retrieves the shape of the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/shape)
  *)
  val get_shape: 'tags this -> string [@@js.get "shape"]
  
  (**
    Sets or retrieves the shape of the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/shape)
  *)
  val set_shape: 'tags this -> string -> unit [@@js.set "shape"]
  
  (**
    Sets or retrieves the window or frame at which to target content.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/target)
  *)
  val get_target: 'tags this -> string [@@js.get "target"]
  
  (**
    Sets or retrieves the window or frame at which to target content.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/target)
  *)
  val set_target: 'tags this -> string -> unit [@@js.set "target"]
  
  (**
    Retrieves or sets the text of the object as a string.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/text)
  *)
  val get_text: 'tags this -> string [@@js.get "text"]
  
  (**
    Retrieves or sets the text of the object as a string.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/text)
  *)
  val set_text: 'tags this -> string -> unit [@@js.set "text"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/type) *)
  val get_type: 'tags this -> string [@@js.get "type"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/type) *)
  val set_type: 'tags this -> string -> unit [@@js.set "type"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <area> elements.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement)
*)
and[@js.scope "HTMLAreaElement"] HTMLAreaElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLAreaElement | `HTMLElement | `HTMLHyperlinkElementUtils | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLAreaElement | `HTMLElement | `HTMLHyperlinkElementUtils | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLAreaElement | `HTMLElement | `HTMLHyperlinkElementUtils | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLAreaElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Sets or retrieves a text alternative to the graphic.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/alt)
  *)
  val get_alt: 'tags this -> string [@@js.get "alt"]
  
  (**
    Sets or retrieves a text alternative to the graphic.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/alt)
  *)
  val set_alt: 'tags this -> string -> unit [@@js.set "alt"]
  
  (**
    Sets or retrieves the coordinates of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/coords)
  *)
  val get_coords: 'tags this -> string [@@js.get "coords"]
  
  (**
    Sets or retrieves the coordinates of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/coords)
  *)
  val set_coords: 'tags this -> string -> unit [@@js.set "coords"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/download) *)
  val get_download: 'tags this -> string [@@js.get "download"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/download) *)
  val set_download: 'tags this -> string -> unit [@@js.set "download"]
  
  (**
    Sets or gets whether clicks in this region cause action.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/noHref)
  *)
  val get_noHref: 'tags this -> bool [@@js.get "noHref"]
  
  (**
    Sets or gets whether clicks in this region cause action.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/noHref)
  *)
  val set_noHref: 'tags this -> bool -> unit [@@js.set "noHref"]
  val get_ping: 'tags this -> string [@@js.get "ping"]
  val set_ping: 'tags this -> string -> unit [@@js.set "ping"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/referrerPolicy) *)
  val get_referrerPolicy: 'tags this -> string [@@js.get "referrerPolicy"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/referrerPolicy) *)
  val set_referrerPolicy: 'tags this -> string -> unit [@@js.set "referrerPolicy"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/rel) *)
  val get_rel: 'tags this -> string [@@js.get "rel"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/rel) *)
  val set_rel: 'tags this -> string -> unit [@@js.set "rel"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/relList) *)
  val get_relList: 'tags this -> DOMTokenList.t [@@js.get "relList"]
  
  (**
    Sets or retrieves the shape of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/shape)
  *)
  val get_shape: 'tags this -> string [@@js.get "shape"]
  
  (**
    Sets or retrieves the shape of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/shape)
  *)
  val set_shape: 'tags this -> string -> unit [@@js.set "shape"]
  
  (**
    Sets or retrieves the window or frame at which to target content.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/target)
  *)
  val get_target: 'tags this -> string [@@js.get "target"]
  
  (**
    Sets or retrieves the window or frame at which to target content.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/target)
  *)
  val set_target: 'tags this -> string -> unit [@@js.set "target"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides properties and methods for manipulating the layout and presentation of <canvas> elements. The HTMLCanvasElement interface also inherits the properties and methods of the HTMLElement interface.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement)
*)
and[@js.scope "HTMLCanvasElement"] HTMLCanvasElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLCanvasElement | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLCanvasElement | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLCanvasElement | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLCanvasElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Gets or sets the height of a canvas element on a document.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/height)
  *)
  val get_height: 'tags this -> float [@@js.get "height"]
  
  (**
    Gets or sets the height of a canvas element on a document.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/height)
  *)
  val set_height: 'tags this -> float -> unit [@@js.set "height"]
  
  (**
    Gets or sets the width of a canvas element on a document.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/width)
  *)
  val get_width: 'tags this -> float [@@js.get "width"]
  
  (**
    Gets or sets the width of a canvas element on a document.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/width)
  *)
  val set_width: 'tags this -> float -> unit [@@js.set "width"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/captureStream) *)
  val captureStream: 'tags this -> ?frameRequestRate:float -> unit -> MediaStream.t [@@js.call "captureStream"]
  
  (**
    Returns an object that provides methods and properties for drawing and manipulating images and graphics on a canvas element in a document. A context object includes information about colors, line widths, fonts, and other graphic parameters that can be drawn on a canvas.
    @param contextId The identifier (ID) of the type of canvas to create. Internet Explorer 9 and Internet Explorer 10 support only a 2-D context using canvas.getContext("2d"); IE11 Preview also supports 3-D or WebGL context using canvas.getContext("experimental-webgl");
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/getContext)
  *)
  val getContext: 'tags this -> contextId:([`L_s1_2d[@js "2d"]] [@js.enum]) -> ?options:CanvasRenderingContext2DSettings.t -> unit -> CanvasRenderingContext2D.t option [@@js.call "getContext"]
  
  (** Returns an object that provides methods and properties for drawing and manipulating images and graphics on a canvas element in a document. A context object includes information about colors, line widths, fonts, and other graphic parameters that can be drawn on a canvas. *)
  val getContext': 'tags this -> contextId:([`L_s201_bitmaprenderer[@js "bitmaprenderer"]] [@js.enum]) -> ?options:ImageBitmapRenderingContextSettings.t -> unit -> ImageBitmapRenderingContext.t option [@@js.call "getContext"]
  
  (** Returns an object that provides methods and properties for drawing and manipulating images and graphics on a canvas element in a document. A context object includes information about colors, line widths, fonts, and other graphic parameters that can be drawn on a canvas. *)
  val getContext'': 'tags this -> contextId:([`L_s1048_webgl[@js "webgl"]] [@js.enum]) -> ?options:WebGLContextAttributes.t -> unit -> WebGLRenderingContext.t option [@@js.call "getContext"]
  
  (** Returns an object that provides methods and properties for drawing and manipulating images and graphics on a canvas element in a document. A context object includes information about colors, line widths, fonts, and other graphic parameters that can be drawn on a canvas. *)
  val getContext''': 'tags this -> contextId:([`L_s1049_webgl2[@js "webgl2"]] [@js.enum]) -> ?options:WebGLContextAttributes.t -> unit -> WebGL2RenderingContext.t option [@@js.call "getContext"]
  
  (** Returns an object that provides methods and properties for drawing and manipulating images and graphics on a canvas element in a document. A context object includes information about colors, line widths, fonts, and other graphic parameters that can be drawn on a canvas. *)
  val getContext'''': 'tags this -> contextId:string -> ?options:any -> unit -> RenderingContext.t option [@@js.call "getContext"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/toBlob) *)
  val toBlob: 'tags this -> callback:BlobCallback.t -> ?type_:string -> ?quality:any -> unit -> unit [@@js.call "toBlob"]
  
  (**
    Returns the content of the current canvas as an image that you can use as a source for another canvas or an HTML element.
    @param type The standard MIME type for the image format to return. If you do not specify this parameter, the default value is a PNG format image.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/toDataURL)
  *)
  val toDataURL: 'tags this -> ?type_:string -> ?quality:any -> unit -> string [@@js.call "toDataURL"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/transferControlToOffscreen) *)
  val transferControlToOffscreen: 'tags this -> OffscreenCanvas.t [@@js.call "transferControlToOffscreen"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
and[@js.scope "HTMLCollection"] HTMLCollection : sig
  type t = [`HTMLCollection | `HTMLCollectionBase] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`HTMLCollection | `HTMLCollectionBase]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`HTMLCollection | `HTMLCollectionBase]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLCollection ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Retrieves a select object or an object from an options collection.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLCollection/namedItem)
  *)
  val namedItem: 'tags this -> name:string -> Element.t option [@@js.call "namedItem"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  A generic collection (array-like object similar to arguments) of elements (in document order) and offers methods and properties for selecting from the list.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLCollection)
*)
and HTMLCollectionBase : sig
  type t = [`HTMLCollectionBase] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`HTMLCollectionBase]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`HTMLCollectionBase]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLCollectionBase ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> Element.t IterableIterator.t *)
  
  (**
    Sets or retrieves the number of objects in a collection.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLCollection/length)
  *)
  val get_length: 'tags this -> float [@@js.get "length"]
  
  (**
    Retrieves an object from various collections.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLCollection/item)
  *)
  val item: 'tags this -> index:float -> Element.t option [@@js.call "item"]
  val get: 'tags this -> float -> Element.t [@@js.index_get]
  val set: 'tags this -> float -> Element.t -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
and HTMLCollectionOf : sig
  type 'T t = [`HTMLCollectionBase | `HTMLCollectionOf of 'T] intf [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
  [@@@js.stop]
  type 'T tags = [`HTMLCollectionBase | `HTMLCollectionOf of 'T]
  [@@@js.start]
  [@@@js.implem 
    type 'T tags = [`HTMLCollectionBase | `HTMLCollectionOf of 'T]
  ]
  type ('tags, 'T) this = 'tags intf constraint 'tags = [> `HTMLCollectionOf of 'T ]
  val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
  val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
  (* [Symbol.iterator]: unit -> 'T IterableIterator.t *)
  
  (**
    Retrieves an object from various collections.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLCollection/item)
  *)
  val item: ('tags, 'T) this -> index:float -> 'T option [@@js.call "item"]
  val namedItem: ('tags, 'T) this -> name:string -> 'T option [@@js.call "namedItem"]
  val get: ('tags, 'T) this -> float -> 'T [@@js.index_get]
  val set: ('tags, 'T) this -> float -> 'T -> unit [@@js.index_set]
  val cast_from: ('tags, 'T) this -> 'T t [@@js.custom let cast_from = Obj.magic]
end

(**
  Any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement)
*)
and[@js.scope "HTMLElement"] HTMLElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/accessKey) *)
  val get_accessKey: 'tags this -> string [@@js.get "accessKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/accessKey) *)
  val set_accessKey: 'tags this -> string -> unit [@@js.set "accessKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/accessKeyLabel) *)
  val get_accessKeyLabel: 'tags this -> string [@@js.get "accessKeyLabel"]
  val get_autocapitalize: 'tags this -> string [@@js.get "autocapitalize"]
  val set_autocapitalize: 'tags this -> string -> unit [@@js.set "autocapitalize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/dir) *)
  val get_dir: 'tags this -> string [@@js.get "dir"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/dir) *)
  val set_dir: 'tags this -> string -> unit [@@js.set "dir"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/draggable) *)
  val get_draggable: 'tags this -> bool [@@js.get "draggable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/draggable) *)
  val set_draggable: 'tags this -> bool -> unit [@@js.set "draggable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/hidden) *)
  val get_hidden: 'tags this -> bool [@@js.get "hidden"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/hidden) *)
  val set_hidden: 'tags this -> bool -> unit [@@js.set "hidden"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/inert) *)
  val get_inert: 'tags this -> bool [@@js.get "inert"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/inert) *)
  val set_inert: 'tags this -> bool -> unit [@@js.set "inert"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/innerText) *)
  val get_innerText: 'tags this -> string [@@js.get "innerText"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/innerText) *)
  val set_innerText: 'tags this -> string -> unit [@@js.set "innerText"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/lang) *)
  val get_lang: 'tags this -> string [@@js.get "lang"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/lang) *)
  val set_lang: 'tags this -> string -> unit [@@js.set "lang"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/offsetHeight) *)
  val get_offsetHeight: 'tags this -> float [@@js.get "offsetHeight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/offsetLeft) *)
  val get_offsetLeft: 'tags this -> float [@@js.get "offsetLeft"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/offsetParent) *)
  val get_offsetParent: 'tags this -> Element.t option [@@js.get "offsetParent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/offsetTop) *)
  val get_offsetTop: 'tags this -> float [@@js.get "offsetTop"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/offsetWidth) *)
  val get_offsetWidth: 'tags this -> float [@@js.get "offsetWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/outerText) *)
  val get_outerText: 'tags this -> string [@@js.get "outerText"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/outerText) *)
  val set_outerText: 'tags this -> string -> unit [@@js.set "outerText"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/popover) *)
  val get_popover: 'tags this -> string option [@@js.get "popover"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/popover) *)
  val set_popover: 'tags this -> string option -> unit [@@js.set "popover"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/spellcheck) *)
  val get_spellcheck: 'tags this -> bool [@@js.get "spellcheck"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/spellcheck) *)
  val set_spellcheck: 'tags this -> bool -> unit [@@js.set "spellcheck"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/title) *)
  val get_title: 'tags this -> string [@@js.get "title"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/title) *)
  val set_title: 'tags this -> string -> unit [@@js.set "title"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/translate) *)
  val get_translate: 'tags this -> bool [@@js.get "translate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/translate) *)
  val set_translate: 'tags this -> bool -> unit [@@js.set "translate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/attachInternals) *)
  val attachInternals: 'tags this -> ElementInternals.t [@@js.call "attachInternals"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/click) *)
  val click: 'tags this -> unit [@@js.call "click"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/hidePopover) *)
  val hidePopover: 'tags this -> unit [@@js.call "hidePopover"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/showPopover) *)
  val showPopover: 'tags this -> unit [@@js.call "showPopover"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/togglePopover) *)
  val togglePopover: 'tags this -> ?force:bool -> unit -> bool [@@js.call "togglePopover"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <embed> elements.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLEmbedElement)
*)
and[@js.scope "HTMLEmbedElement"] HTMLEmbedElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLEmbedElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLEmbedElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLEmbedElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLEmbedElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** @deprecated  *)
  val get_align: 'tags this -> string [@@js.get "align"]
  
  (** @deprecated  *)
  val set_align: 'tags this -> string -> unit [@@js.set "align"]
  
  (** Sets or retrieves the height of the object. *)
  val get_height: 'tags this -> string [@@js.get "height"]
  
  (** Sets or retrieves the height of the object. *)
  val set_height: 'tags this -> string -> unit [@@js.set "height"]
  
  (**
    Sets or retrieves the name of the object.
    @deprecated 
  *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (**
    Sets or retrieves the name of the object.
    @deprecated 
  *)
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  
  (** Sets or retrieves a URL to be loaded by the object. *)
  val get_src: 'tags this -> string [@@js.get "src"]
  
  (** Sets or retrieves a URL to be loaded by the object. *)
  val set_src: 'tags this -> string -> unit [@@js.set "src"]
  val get_type: 'tags this -> string [@@js.get "type"]
  val set_type: 'tags this -> string -> unit [@@js.set "type"]
  
  (** Sets or retrieves the width of the object. *)
  val get_width: 'tags this -> string [@@js.get "width"]
  
  (** Sets or retrieves the width of the object. *)
  val set_width: 'tags this -> string -> unit [@@js.set "width"]
  val getSVGDocument: 'tags this -> Document.t option [@@js.call "getSVGDocument"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  A collection of HTML form control elements.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFormControlsCollection)
*)
and[@js.scope "HTMLFormControlsCollection"] HTMLFormControlsCollection : sig
  type t = [`HTMLCollectionBase | `HTMLFormControlsCollection] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`HTMLCollectionBase | `HTMLFormControlsCollection]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`HTMLCollectionBase | `HTMLFormControlsCollection]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLFormControlsCollection ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the item with ID or name name from the collection.
    
    If there are multiple matching items, then a RadioNodeList object containing all those elements is returned.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFormControlsCollection/namedItem)
  *)
  val namedItem: 'tags this -> name:string -> (Element.t, RadioNodeList.t) union2 option [@@js.call "namedItem"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  A <form> element in the DOM; it allows access to and in some cases modification of aspects of the form, as well as access to its component elements.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFormElement)
*)
and[@js.scope "HTMLFormElement"] HTMLFormElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLFormElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLFormElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLFormElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLFormElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> Element.t IterableIterator.t *)
  
  (**
    Sets or retrieves a list of character encodings for input data that must be accepted by the server processing the form.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/acceptCharset)
  *)
  val get_acceptCharset: 'tags this -> string [@@js.get "acceptCharset"]
  
  (**
    Sets or retrieves a list of character encodings for input data that must be accepted by the server processing the form.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/acceptCharset)
  *)
  val set_acceptCharset: 'tags this -> string -> unit [@@js.set "acceptCharset"]
  
  (**
    Sets or retrieves the URL to which the form content is sent for processing.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/action)
  *)
  val get_action: 'tags this -> string [@@js.get "action"]
  
  (**
    Sets or retrieves the URL to which the form content is sent for processing.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/action)
  *)
  val set_action: 'tags this -> string -> unit [@@js.set "action"]
  
  (**
    Specifies whether autocomplete is applied to an editable text field.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/autocomplete)
  *)
  val get_autocomplete: 'tags this -> AutoFillBase.t [@@js.get "autocomplete"]
  
  (**
    Specifies whether autocomplete is applied to an editable text field.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/autocomplete)
  *)
  val set_autocomplete: 'tags this -> AutoFillBase.t -> unit [@@js.set "autocomplete"]
  
  (**
    Retrieves a collection, in source order, of all controls in a given form.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/elements)
  *)
  val get_elements: 'tags this -> HTMLFormControlsCollection.t [@@js.get "elements"]
  
  (**
    Sets or retrieves the MIME encoding for the form.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/encoding)
  *)
  val get_encoding: 'tags this -> string [@@js.get "encoding"]
  
  (**
    Sets or retrieves the MIME encoding for the form.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/encoding)
  *)
  val set_encoding: 'tags this -> string -> unit [@@js.set "encoding"]
  
  (**
    Sets or retrieves the encoding type for the form.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/enctype)
  *)
  val get_enctype: 'tags this -> string [@@js.get "enctype"]
  
  (**
    Sets or retrieves the encoding type for the form.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/enctype)
  *)
  val set_enctype: 'tags this -> string -> unit [@@js.set "enctype"]
  
  (**
    Sets or retrieves the number of objects in a collection.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/length)
  *)
  val get_length: 'tags this -> float [@@js.get "length"]
  
  (**
    Sets or retrieves how to send the form data to the server.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/method)
  *)
  val get_method: 'tags this -> string [@@js.get "method"]
  
  (**
    Sets or retrieves how to send the form data to the server.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/method)
  *)
  val set_method: 'tags this -> string -> unit [@@js.set "method"]
  
  (**
    Sets or retrieves the name of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/name)
  *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (**
    Sets or retrieves the name of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/name)
  *)
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  
  (**
    Designates a form that is not validated when submitted.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/noValidate)
  *)
  val get_noValidate: 'tags this -> bool [@@js.get "noValidate"]
  
  (**
    Designates a form that is not validated when submitted.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/noValidate)
  *)
  val set_noValidate: 'tags this -> bool -> unit [@@js.set "noValidate"]
  val get_rel: 'tags this -> string [@@js.get "rel"]
  val set_rel: 'tags this -> string -> unit [@@js.set "rel"]
  val get_relList: 'tags this -> DOMTokenList.t [@@js.get "relList"]
  
  (**
    Sets or retrieves the window or frame at which to target content.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/target)
  *)
  val get_target: 'tags this -> string [@@js.get "target"]
  
  (**
    Sets or retrieves the window or frame at which to target content.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/target)
  *)
  val set_target: 'tags this -> string -> unit [@@js.set "target"]
  
  (**
    Returns whether a form will validate when it is submitted, without having to submit it.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/checkValidity)
  *)
  val checkValidity: 'tags this -> bool [@@js.call "checkValidity"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/reportValidity) *)
  val reportValidity: 'tags this -> bool [@@js.call "reportValidity"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/requestSubmit) *)
  val requestSubmit: 'tags this -> ?submitter:HTMLElement.t option -> unit -> unit [@@js.call "requestSubmit"]
  
  (**
    Fires when the user resets a form.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/reset)
  *)
  val reset: 'tags this -> unit [@@js.call "reset"]
  
  (**
    Fires when a FORM is about to be submitted.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/submit)
  *)
  val submit: 'tags this -> unit [@@js.call "submit"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val get: 'tags this -> float -> Element.t [@@js.index_get]
  val set: 'tags this -> float -> Element.t -> unit [@@js.index_set]
  val get': 'tags this -> string -> any [@@js.index_get]
  val set': 'tags this -> string -> any -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Contains the descriptive information, or metadata, for a document. This object inherits all of the properties and methods described in the HTMLElement interface.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLHeadElement)
*)
and[@js.scope "HTMLHeadElement"] HTMLHeadElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLHeadElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLHeadElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLHeadElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLHeadElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides special properties and methods for manipulating <img> elements.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement)
*)
and[@js.scope "HTMLImageElement"] HTMLImageElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLImageElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLImageElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLImageElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLImageElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Sets or retrieves how the object is aligned with adjacent text.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/align)
  *)
  val get_align: 'tags this -> string [@@js.get "align"]
  
  (**
    Sets or retrieves how the object is aligned with adjacent text.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/align)
  *)
  val set_align: 'tags this -> string -> unit [@@js.set "align"]
  
  (**
    Sets or retrieves a text alternative to the graphic.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/alt)
  *)
  val get_alt: 'tags this -> string [@@js.get "alt"]
  
  (**
    Sets or retrieves a text alternative to the graphic.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/alt)
  *)
  val set_alt: 'tags this -> string -> unit [@@js.set "alt"]
  
  (**
    Specifies the properties of a border drawn around an object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/border)
  *)
  val get_border: 'tags this -> string [@@js.get "border"]
  
  (**
    Specifies the properties of a border drawn around an object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/border)
  *)
  val set_border: 'tags this -> string -> unit [@@js.set "border"]
  
  (**
    Retrieves whether the object is fully loaded.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/complete)
  *)
  val get_complete: 'tags this -> bool [@@js.get "complete"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/crossOrigin) *)
  val get_crossOrigin: 'tags this -> string option [@@js.get "crossOrigin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/crossOrigin) *)
  val set_crossOrigin: 'tags this -> string option -> unit [@@js.set "crossOrigin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/currentSrc) *)
  val get_currentSrc: 'tags this -> string [@@js.get "currentSrc"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/decoding) *)
  val get_decoding: 'tags this -> ([`L_s163_async[@js "async"] | `L_s174_auto[@js "auto"] | `L_s948_sync[@js "sync"]] [@js.enum]) [@@js.get "decoding"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/decoding) *)
  val set_decoding: 'tags this -> ([`U1 of ([`L_s163_async[@js "async"]] [@js.enum]) | `U2 of ([`L_s948_sync[@js "sync"]] [@js.enum]) | `U3 of ([`L_s174_auto[@js "auto"]] [@js.enum])] [@js.union]) -> unit [@@js.set "decoding"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/fetchPriority) *)
  val get_fetchPriority: 'tags this -> string [@@js.get "fetchPriority"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/fetchPriority) *)
  val set_fetchPriority: 'tags this -> string -> unit [@@js.set "fetchPriority"]
  
  (**
    Sets or retrieves the height of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/height)
  *)
  val get_height: 'tags this -> float [@@js.get "height"]
  
  (**
    Sets or retrieves the height of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/height)
  *)
  val set_height: 'tags this -> float -> unit [@@js.set "height"]
  
  (**
    Sets or retrieves the width of the border to draw around the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/hspace)
  *)
  val get_hspace: 'tags this -> float [@@js.get "hspace"]
  
  (**
    Sets or retrieves the width of the border to draw around the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/hspace)
  *)
  val set_hspace: 'tags this -> float -> unit [@@js.set "hspace"]
  
  (**
    Sets or retrieves whether the image is a server-side image map.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/isMap)
  *)
  val get_isMap: 'tags this -> bool [@@js.get "isMap"]
  
  (**
    Sets or retrieves whether the image is a server-side image map.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/isMap)
  *)
  val set_isMap: 'tags this -> bool -> unit [@@js.set "isMap"]
  
  (**
    Sets or retrieves the policy for loading image elements that are outside the viewport.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/loading)
  *)
  val get_loading: 'tags this -> ([`L_s355_eager[@js "eager"] | `L_s550_lazy[@js "lazy"]] [@js.enum]) [@@js.get "loading"]
  
  (**
    Sets or retrieves the policy for loading image elements that are outside the viewport.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/loading)
  *)
  val set_loading: 'tags this -> ([`U1 of ([`L_s355_eager[@js "eager"]] [@js.enum]) | `U2 of ([`L_s550_lazy[@js "lazy"]] [@js.enum])] [@js.union]) -> unit [@@js.set "loading"]
  
  (**
    Sets or retrieves a Uniform Resource Identifier (URI) to a long description of the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/longDesc)
  *)
  val get_longDesc: 'tags this -> string [@@js.get "longDesc"]
  
  (**
    Sets or retrieves a Uniform Resource Identifier (URI) to a long description of the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/longDesc)
  *)
  val set_longDesc: 'tags this -> string -> unit [@@js.set "longDesc"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/lowsrc) *)
  val get_lowsrc: 'tags this -> string [@@js.get "lowsrc"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/lowsrc) *)
  val set_lowsrc: 'tags this -> string -> unit [@@js.set "lowsrc"]
  
  (**
    Sets or retrieves the name of the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/name)
  *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (**
    Sets or retrieves the name of the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/name)
  *)
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  
  (**
    The original height of the image resource before sizing.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/naturalHeight)
  *)
  val get_naturalHeight: 'tags this -> float [@@js.get "naturalHeight"]
  
  (**
    The original width of the image resource before sizing.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/naturalWidth)
  *)
  val get_naturalWidth: 'tags this -> float [@@js.get "naturalWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/referrerPolicy) *)
  val get_referrerPolicy: 'tags this -> string [@@js.get "referrerPolicy"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/referrerPolicy) *)
  val set_referrerPolicy: 'tags this -> string -> unit [@@js.set "referrerPolicy"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/sizes) *)
  val get_sizes: 'tags this -> string [@@js.get "sizes"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/sizes) *)
  val set_sizes: 'tags this -> string -> unit [@@js.set "sizes"]
  
  (**
    The address or URL of the a media resource that is to be considered.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/src)
  *)
  val get_src: 'tags this -> string [@@js.get "src"]
  
  (**
    The address or URL of the a media resource that is to be considered.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/src)
  *)
  val set_src: 'tags this -> string -> unit [@@js.set "src"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/srcset) *)
  val get_srcset: 'tags this -> string [@@js.get "srcset"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/srcset) *)
  val set_srcset: 'tags this -> string -> unit [@@js.set "srcset"]
  
  (**
    Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/useMap)
  *)
  val get_useMap: 'tags this -> string [@@js.get "useMap"]
  
  (**
    Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/useMap)
  *)
  val set_useMap: 'tags this -> string -> unit [@@js.set "useMap"]
  
  (**
    Sets or retrieves the vertical margin for the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/vspace)
  *)
  val get_vspace: 'tags this -> float [@@js.get "vspace"]
  
  (**
    Sets or retrieves the vertical margin for the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/vspace)
  *)
  val set_vspace: 'tags this -> float -> unit [@@js.set "vspace"]
  
  (**
    Sets or retrieves the width of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/width)
  *)
  val get_width: 'tags this -> float [@@js.get "width"]
  
  (**
    Sets or retrieves the width of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/width)
  *)
  val set_width: 'tags this -> float -> unit [@@js.set "width"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/x) *)
  val get_x: 'tags this -> float [@@js.get "x"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/y) *)
  val get_y: 'tags this -> float [@@js.get "y"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/decode) *)
  val decode: 'tags this -> unit Promise.t [@@js.call "decode"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Adds to HTMLElement the properties and methods needed to support basic media-related capabilitiesÂ that areÂ common to audio and video.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement)
*)
and[@js.scope "HTMLMediaElement"] HTMLMediaElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLMediaElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLMediaElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLMediaElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLMediaElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Gets or sets a value that indicates whether to start playing the media automatically.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/autoplay)
  *)
  val get_autoplay: 'tags this -> bool [@@js.get "autoplay"]
  
  (**
    Gets or sets a value that indicates whether to start playing the media automatically.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/autoplay)
  *)
  val set_autoplay: 'tags this -> bool -> unit [@@js.set "autoplay"]
  
  (**
    Gets a collection of buffered time ranges.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/buffered)
  *)
  val get_buffered: 'tags this -> TimeRanges.t [@@js.get "buffered"]
  
  (**
    Gets or sets a flag that indicates whether the client provides a set of controls for the media (in case the developer does not include controls for the player).
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/controls)
  *)
  val get_controls: 'tags this -> bool [@@js.get "controls"]
  
  (**
    Gets or sets a flag that indicates whether the client provides a set of controls for the media (in case the developer does not include controls for the player).
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/controls)
  *)
  val set_controls: 'tags this -> bool -> unit [@@js.set "controls"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/crossOrigin) *)
  val get_crossOrigin: 'tags this -> string option [@@js.get "crossOrigin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/crossOrigin) *)
  val set_crossOrigin: 'tags this -> string option -> unit [@@js.set "crossOrigin"]
  
  (**
    Gets the address or URL of the current media resource that is selected by IHTMLMediaElement.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/currentSrc)
  *)
  val get_currentSrc: 'tags this -> string [@@js.get "currentSrc"]
  
  (**
    Gets or sets the current playback position, in seconds.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/currentTime)
  *)
  val get_currentTime: 'tags this -> float [@@js.get "currentTime"]
  
  (**
    Gets or sets the current playback position, in seconds.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/currentTime)
  *)
  val set_currentTime: 'tags this -> float -> unit [@@js.set "currentTime"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/defaultMuted) *)
  val get_defaultMuted: 'tags this -> bool [@@js.get "defaultMuted"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/defaultMuted) *)
  val set_defaultMuted: 'tags this -> bool -> unit [@@js.set "defaultMuted"]
  
  (**
    Gets or sets the default playback rate when the user is not using fast forward or reverse for a video or audio resource.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/defaultPlaybackRate)
  *)
  val get_defaultPlaybackRate: 'tags this -> float [@@js.get "defaultPlaybackRate"]
  
  (**
    Gets or sets the default playback rate when the user is not using fast forward or reverse for a video or audio resource.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/defaultPlaybackRate)
  *)
  val set_defaultPlaybackRate: 'tags this -> float -> unit [@@js.set "defaultPlaybackRate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/disableRemotePlayback) *)
  val get_disableRemotePlayback: 'tags this -> bool [@@js.get "disableRemotePlayback"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/disableRemotePlayback) *)
  val set_disableRemotePlayback: 'tags this -> bool -> unit [@@js.set "disableRemotePlayback"]
  
  (**
    Returns the duration in seconds of the current media resource. A NaN value is returned if duration is not available, or Infinity if the media resource is streaming.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/duration)
  *)
  val get_duration: 'tags this -> float [@@js.get "duration"]
  
  (**
    Gets information about whether the playback has ended or not.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/ended)
  *)
  val get_ended: 'tags this -> bool [@@js.get "ended"]
  
  (**
    Returns an object representing the current error state of the audio or video element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/error)
  *)
  val get_error: 'tags this -> MediaError.t option [@@js.get "error"]
  
  (**
    Gets or sets a flag to specify whether playback should restart after it completes.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loop)
  *)
  val get_loop: 'tags this -> bool [@@js.get "loop"]
  
  (**
    Gets or sets a flag to specify whether playback should restart after it completes.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loop)
  *)
  val set_loop: 'tags this -> bool -> unit [@@js.set "loop"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/mediaKeys)
  *)
  val get_mediaKeys: 'tags this -> MediaKeys.t option [@@js.get "mediaKeys"]
  
  (**
    Gets or sets a flag that indicates whether the audio (either audio or the audio track on video media) is muted.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/muted)
  *)
  val get_muted: 'tags this -> bool [@@js.get "muted"]
  
  (**
    Gets or sets a flag that indicates whether the audio (either audio or the audio track on video media) is muted.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/muted)
  *)
  val set_muted: 'tags this -> bool -> unit [@@js.set "muted"]
  
  (**
    Gets the current network activity for the element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/networkState)
  *)
  val get_networkState: 'tags this -> float [@@js.get "networkState"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/encrypted_event) *)
  val get_onencrypted: 'tags this -> (this:t -> ev:MediaEncryptedEvent.t -> any) option [@@js.get "onencrypted"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/encrypted_event) *)
  val set_onencrypted: 'tags this -> (this:t -> ev:MediaEncryptedEvent.t -> any) option -> unit [@@js.set "onencrypted"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/waitingforkey_event) *)
  val get_onwaitingforkey: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onwaitingforkey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/waitingforkey_event) *)
  val set_onwaitingforkey: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onwaitingforkey"]
  
  (**
    Gets a flag that specifies whether playback is paused.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/paused)
  *)
  val get_paused: 'tags this -> bool [@@js.get "paused"]
  
  (**
    Gets or sets the current rate of speed for the media resource to play. This speed is expressed as a multiple of the normal speed of the media resource.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/playbackRate)
  *)
  val get_playbackRate: 'tags this -> float [@@js.get "playbackRate"]
  
  (**
    Gets or sets the current rate of speed for the media resource to play. This speed is expressed as a multiple of the normal speed of the media resource.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/playbackRate)
  *)
  val set_playbackRate: 'tags this -> float -> unit [@@js.set "playbackRate"]
  
  (**
    Gets TimeRanges for the current media resource that has been played.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/played)
  *)
  val get_played: 'tags this -> TimeRanges.t [@@js.get "played"]
  
  (**
    Gets or sets a value indicating what data should be preloaded, if any.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/preload)
  *)
  val get_preload: 'tags this -> ([`L_s0[@js ""] | `L_s174_auto[@js "auto"] | `L_s615_metadata[@js "metadata"] | `L_s685_none[@js "none"]] [@js.enum]) [@@js.get "preload"]
  
  (**
    Gets or sets a value indicating what data should be preloaded, if any.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/preload)
  *)
  val set_preload: 'tags this -> ([`U1 of ([`L_s685_none[@js "none"]] [@js.enum]) | `U2 of ([`L_s615_metadata[@js "metadata"]] [@js.enum]) | `U3 of ([`L_s174_auto[@js "auto"]] [@js.enum]) | `U4 of ([`L_s0[@js ""]] [@js.enum])] [@js.union]) -> unit [@@js.set "preload"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/preservesPitch) *)
  val get_preservesPitch: 'tags this -> bool [@@js.get "preservesPitch"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/preservesPitch) *)
  val set_preservesPitch: 'tags this -> bool -> unit [@@js.set "preservesPitch"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/readyState) *)
  val get_readyState: 'tags this -> float [@@js.get "readyState"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/remote) *)
  val get_remote: 'tags this -> RemotePlayback.t [@@js.get "remote"]
  
  (**
    Returns a TimeRanges object that represents the ranges of the current media resource that can be seeked.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seekable)
  *)
  val get_seekable: 'tags this -> TimeRanges.t [@@js.get "seekable"]
  
  (**
    Gets a flag that indicates whether the client is currently moving to a new playback position in the media resource.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seeking)
  *)
  val get_seeking: 'tags this -> bool [@@js.get "seeking"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/sinkId)
  *)
  val get_sinkId: 'tags this -> string [@@js.get "sinkId"]
  
  (**
    The address or URL of the a media resource that is to be considered.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/src)
  *)
  val get_src: 'tags this -> string [@@js.get "src"]
  
  (**
    The address or URL of the a media resource that is to be considered.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/src)
  *)
  val set_src: 'tags this -> string -> unit [@@js.set "src"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/srcObject) *)
  val get_srcObject: 'tags this -> MediaProvider.t option [@@js.get "srcObject"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/srcObject) *)
  val set_srcObject: 'tags this -> MediaProvider.t option -> unit [@@js.set "srcObject"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/textTracks) *)
  val get_textTracks: 'tags this -> TextTrackList.t [@@js.get "textTracks"]
  
  (**
    Gets or sets the volume level for audio portions of the media element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/volume)
  *)
  val get_volume: 'tags this -> float [@@js.get "volume"]
  
  (**
    Gets or sets the volume level for audio portions of the media element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/volume)
  *)
  val set_volume: 'tags this -> float -> unit [@@js.set "volume"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/addTextTrack) *)
  val addTextTrack: 'tags this -> kind:TextTrackKind.t -> ?label:string -> ?language:string -> unit -> TextTrack.t [@@js.call "addTextTrack"]
  
  (**
    Returns a string that specifies whether the client can play a given media resource type.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/canPlayType)
  *)
  val canPlayType: 'tags this -> type_:string -> CanPlayTypeResult.t [@@js.call "canPlayType"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/fastSeek) *)
  val fastSeek: 'tags this -> time:float -> unit [@@js.call "fastSeek"]
  
  (**
    Resets the audio or video object and loads a new media resource.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/load)
  *)
  val load: 'tags this -> unit [@@js.call "load"]
  
  (**
    Pauses the current playback and sets paused to TRUE.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/pause)
  *)
  val pause: 'tags this -> unit [@@js.call "pause"]
  
  (**
    Loads and starts playback of a media resource.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/play)
  *)
  val play: 'tags this -> unit Promise.t [@@js.call "play"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/setMediaKeys)
  *)
  val setMediaKeys: 'tags this -> mediaKeys:MediaKeys.t option -> unit Promise.t [@@js.call "setMediaKeys"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/setSinkId)
  *)
  val setSinkId: 'tags this -> sinkId:string -> unit Promise.t [@@js.call "setSinkId"]
  val get_NETWORK_EMPTY: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "NETWORK_EMPTY"]
  val get_NETWORK_IDLE: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "NETWORK_IDLE"]
  val get_NETWORK_LOADING: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "NETWORK_LOADING"]
  val get_NETWORK_NO_SOURCE: 'tags this -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "NETWORK_NO_SOURCE"]
  val get_HAVE_NOTHING: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "HAVE_NOTHING"]
  val get_HAVE_METADATA: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "HAVE_METADATA"]
  val get_HAVE_CURRENT_DATA: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "HAVE_CURRENT_DATA"]
  val get_HAVE_FUTURE_DATA: 'tags this -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "HAVE_FUTURE_DATA"]
  val get_HAVE_ENOUGH_DATA: 'tags this -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "HAVE_ENOUGH_DATA"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLMediaElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLMediaElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  val network_empty: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "NETWORK_EMPTY"]
  val network_idle: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "NETWORK_IDLE"]
  val network_loading: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "NETWORK_LOADING"]
  val network_no_source: unit -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "NETWORK_NO_SOURCE"]
  val have_nothing: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "HAVE_NOTHING"]
  val have_metadata: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "HAVE_METADATA"]
  val have_current_data: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "HAVE_CURRENT_DATA"]
  val have_future_data: unit -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "HAVE_FUTURE_DATA"]
  val have_enough_data: unit -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "HAVE_ENOUGH_DATA"]
end
and HTMLOrSVGImageElement : sig
  type t = (HTMLImageElement.t, SVGImageElement.t) union2
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
and HTMLOrSVGScriptElement : sig
  type t = (HTMLScriptElement.t, SVGScriptElement.t) union2
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  HTML <script> elements expose the HTMLScriptElement interface, which provides special properties and methods for manipulating the behavior and execution of <script> elements (beyond the inherited HTMLElement interface).
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement)
*)
and[@js.scope "HTMLScriptElement"] HTMLScriptElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLScriptElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLScriptElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLScriptElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLScriptElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_async: 'tags this -> bool [@@js.get "async"]
  val set_async: 'tags this -> bool -> unit [@@js.set "async"]
  
  (**
    Sets or retrieves the character set used to encode the object.
    @deprecated 
  *)
  val get_charset: 'tags this -> string [@@js.get "charset"]
  
  (**
    Sets or retrieves the character set used to encode the object.
    @deprecated 
  *)
  val set_charset: 'tags this -> string -> unit [@@js.set "charset"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/crossOrigin) *)
  val get_crossOrigin: 'tags this -> string option [@@js.get "crossOrigin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/crossOrigin) *)
  val set_crossOrigin: 'tags this -> string option -> unit [@@js.set "crossOrigin"]
  
  (** Sets or retrieves the status of the script. *)
  val get_defer: 'tags this -> bool [@@js.get "defer"]
  
  (** Sets or retrieves the status of the script. *)
  val set_defer: 'tags this -> bool -> unit [@@js.set "defer"]
  
  (**
    Sets or retrieves the event for which the script is written.
    @deprecated 
  *)
  val get_event: 'tags this -> string [@@js.get "event"]
  
  (**
    Sets or retrieves the event for which the script is written.
    @deprecated 
  *)
  val set_event: 'tags this -> string -> unit [@@js.set "event"]
  val get_fetchPriority: 'tags this -> string [@@js.get "fetchPriority"]
  val set_fetchPriority: 'tags this -> string -> unit [@@js.set "fetchPriority"]
  
  (**
    Sets or retrieves the object that is bound to the event script.
    @deprecated 
  *)
  val get_htmlFor: 'tags this -> string [@@js.get "htmlFor"]
  
  (**
    Sets or retrieves the object that is bound to the event script.
    @deprecated 
  *)
  val set_htmlFor: 'tags this -> string -> unit [@@js.set "htmlFor"]
  val get_integrity: 'tags this -> string [@@js.get "integrity"]
  val set_integrity: 'tags this -> string -> unit [@@js.set "integrity"]
  val get_noModule: 'tags this -> bool [@@js.get "noModule"]
  val set_noModule: 'tags this -> bool -> unit [@@js.set "noModule"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/referrerPolicy) *)
  val get_referrerPolicy: 'tags this -> string [@@js.get "referrerPolicy"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/referrerPolicy) *)
  val set_referrerPolicy: 'tags this -> string -> unit [@@js.set "referrerPolicy"]
  
  (** Retrieves the URL to an external file that contains the source code or data. *)
  val get_src: 'tags this -> string [@@js.get "src"]
  
  (** Retrieves the URL to an external file that contains the source code or data. *)
  val set_src: 'tags this -> string -> unit [@@js.set "src"]
  
  (** Retrieves or sets the text of the object as a string. *)
  val get_text: 'tags this -> string [@@js.get "text"]
  
  (** Retrieves or sets the text of the object as a string. *)
  val set_text: 'tags this -> string -> unit [@@js.set "text"]
  
  (** Sets or retrieves the MIME type for the associated scripting engine. *)
  val get_type: 'tags this -> string [@@js.get "type"]
  
  (** Sets or retrieves the MIME type for the associated scripting engine. *)
  val set_type: 'tags this -> string -> unit [@@js.set "type"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/supports_static) *)
  val supports: string -> bool [@@js.global "supports"]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement) *)
and[@js.scope "HTMLSlotElement"] HTMLSlotElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLSlotElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLSlotElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLSlotElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLSlotElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement/name) *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement/name) *)
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement/assign) *)
  val assign: 'tags this -> nodes:(([`U1 of Element.t | `U2 of Text.t] [@js.union]) list [@js.variadic]) -> unit [@@js.call "assign"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement/assignedElements) *)
  val assignedElements: 'tags this -> ?options:AssignedNodesOptions.t -> unit -> Element.t list [@@js.call "assignedElements"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement/assignedNodes) *)
  val assignedNodes: 'tags this -> ?options:AssignedNodesOptions.t -> unit -> Node.t list [@@js.call "assignedNodes"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides special properties and methods for manipulating video objects. It also inherits properties and methods of HTMLMediaElement and HTMLElement.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement)
*)
and[@js.scope "HTMLVideoElement"] HTMLVideoElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLMediaElement | `HTMLOrSVGElement | `HTMLVideoElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLMediaElement | `HTMLOrSVGElement | `HTMLVideoElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLMediaElement | `HTMLOrSVGElement | `HTMLVideoElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLVideoElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/disablePictureInPicture) *)
  val get_disablePictureInPicture: 'tags this -> bool [@@js.get "disablePictureInPicture"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/disablePictureInPicture) *)
  val set_disablePictureInPicture: 'tags this -> bool -> unit [@@js.set "disablePictureInPicture"]
  
  (**
    Gets or sets the height of the video element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/height)
  *)
  val get_height: 'tags this -> float [@@js.get "height"]
  
  (**
    Gets or sets the height of the video element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/height)
  *)
  val set_height: 'tags this -> float -> unit [@@js.set "height"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/enterpictureinpicture_event) *)
  val get_onenterpictureinpicture: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onenterpictureinpicture"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/enterpictureinpicture_event) *)
  val set_onenterpictureinpicture: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onenterpictureinpicture"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/leavepictureinpicture_event) *)
  val get_onleavepictureinpicture: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onleavepictureinpicture"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/leavepictureinpicture_event) *)
  val set_onleavepictureinpicture: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onleavepictureinpicture"]
  
  (** Gets or sets the playsinline of the video element. for example, On iPhone, video elements will now be allowed to play inline, and will not automatically enter fullscreen mode when playback begins. *)
  val get_playsInline: 'tags this -> bool [@@js.get "playsInline"]
  
  (** Gets or sets the playsinline of the video element. for example, On iPhone, video elements will now be allowed to play inline, and will not automatically enter fullscreen mode when playback begins. *)
  val set_playsInline: 'tags this -> bool -> unit [@@js.set "playsInline"]
  
  (**
    Gets or sets a URL of an image to display, for example, like a movie poster. This can be a still frame from the video, or another image if no video data is available.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/poster)
  *)
  val get_poster: 'tags this -> string [@@js.get "poster"]
  
  (**
    Gets or sets a URL of an image to display, for example, like a movie poster. This can be a still frame from the video, or another image if no video data is available.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/poster)
  *)
  val set_poster: 'tags this -> string -> unit [@@js.set "poster"]
  
  (**
    Gets the intrinsic height of a video in CSS pixels, or zero if the dimensions are not known.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/videoHeight)
  *)
  val get_videoHeight: 'tags this -> float [@@js.get "videoHeight"]
  
  (**
    Gets the intrinsic width of a video in CSS pixels, or zero if the dimensions are not known.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/videoWidth)
  *)
  val get_videoWidth: 'tags this -> float [@@js.get "videoWidth"]
  
  (**
    Gets or sets the width of the video element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/width)
  *)
  val get_width: 'tags this -> float [@@js.get "width"]
  
  (**
    Gets or sets the width of the video element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/width)
  *)
  val set_width: 'tags this -> float -> unit [@@js.set "width"]
  val cancelVideoFrameCallback: 'tags this -> handle:float -> unit [@@js.call "cancelVideoFrameCallback"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/getVideoPlaybackQuality) *)
  val getVideoPlaybackQuality: 'tags this -> VideoPlaybackQuality.t [@@js.call "getVideoPlaybackQuality"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/requestPictureInPicture) *)
  val requestPictureInPicture: 'tags this -> PictureInPictureWindow.t Promise.t [@@js.call "requestPictureInPicture"]
  val requestVideoFrameCallback: 'tags this -> callback:VideoFrameRequestCallback.t -> float [@@js.call "requestVideoFrameCallback"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLVideoElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLVideoElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ImageBitmapRenderingContext) *)
and[@js.scope "ImageBitmapRenderingContext"] ImageBitmapRenderingContext : sig
  type t = [`ImageBitmapRenderingContext] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ImageBitmapRenderingContext]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ImageBitmapRenderingContext]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ImageBitmapRenderingContext ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** Returns the canvas element that the context is bound to. *)
  val get_canvas: 'tags this -> (HTMLCanvasElement.t, OffscreenCanvas.t) union2 [@@js.get "canvas"]
  
  (**
    Transfers the underlying bitmap data from imageBitmap to context, and the bitmap becomes the contents of the canvas element to which context is bound.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ImageBitmapRenderingContext/transferFromImageBitmap)
  *)
  val transferFromImageBitmap: 'tags this -> bitmap:ImageBitmap.t option -> unit [@@js.call "transferFromImageBitmap"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
and ImageBitmapSource : sig
  type t = (Blob.t, CanvasImageSource.t, ImageData.t) union3
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/InputEvent) *)
and[@js.scope "InputEvent"] InputEvent : sig
  type t = [`Event | `InputEvent | `UIEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `InputEvent | `UIEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `InputEvent | `UIEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `InputEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/InputEvent/data) *)
  val get_data: 'tags this -> string option [@@js.get "data"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/InputEvent/dataTransfer) *)
  val get_dataTransfer: 'tags this -> DataTransfer.t option [@@js.get "dataTransfer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/InputEvent/inputType) *)
  val get_inputType: 'tags this -> string [@@js.get "inputType"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/InputEvent/isComposing) *)
  val get_isComposing: 'tags this -> bool [@@js.get "isComposing"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/InputEvent/getTargetRanges) *)
  val getTargetRanges: 'tags this -> StaticRange.t list [@@js.call "getTargetRanges"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: type_:string -> ?eventInitDict:InputEventInit.t -> unit -> t [@@js.create]
end
and InputEventInit : sig
  type t = [`EventInit | `InputEventInit | `UIEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `InputEventInit | `UIEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `InputEventInit | `UIEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `InputEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_data: 'tags this -> string option [@@js.get "data"]
  val set_data: 'tags this -> string option -> unit [@@js.set "data"]
  val get_dataTransfer: 'tags this -> DataTransfer.t option [@@js.get "dataTransfer"]
  val set_dataTransfer: 'tags this -> DataTransfer.t option -> unit [@@js.set "dataTransfer"]
  val get_inputType: 'tags this -> string option [@@js.get "inputType"]
  val set_inputType: 'tags this -> string -> unit [@@js.set "inputType"]
  val get_isComposing: 'tags this -> bool option [@@js.get "isComposing"]
  val set_isComposing: 'tags this -> bool -> unit [@@js.set "isComposing"]
  val get_targetRanges: 'tags this -> StaticRange.t list option [@@js.get "targetRanges"]
  val set_targetRanges: 'tags this -> StaticRange.t list -> unit [@@js.set "targetRanges"]
  val create: ?data:string -> ?dataTransfer:DataTransfer.t -> ?inputType:string -> ?isComposing:bool -> ?targetRanges:StaticRange.t list -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  KeyboardEvent objects describe a user interaction with the keyboard; each event describes a single interaction between the user and a key (or combination of a key with modifier keys) on the keyboard.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/KeyboardEvent)
*)
and[@js.scope "KeyboardEvent"] KeyboardEvent : sig
  type t = [`Event | `KeyboardEvent | `UIEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `KeyboardEvent | `UIEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `KeyboardEvent | `UIEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `KeyboardEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/altKey) *)
  val get_altKey: 'tags this -> bool [@@js.get "altKey"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/charCode) *)
  val get_charCode: 'tags this -> float [@@js.get "charCode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/code) *)
  val get_code: 'tags this -> string [@@js.get "code"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/ctrlKey) *)
  val get_ctrlKey: 'tags this -> bool [@@js.get "ctrlKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/isComposing) *)
  val get_isComposing: 'tags this -> bool [@@js.get "isComposing"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/key) *)
  val get_key: 'tags this -> string [@@js.get "key"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/keyCode) *)
  val get_keyCode: 'tags this -> float [@@js.get "keyCode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/location) *)
  val get_location: 'tags this -> float [@@js.get "location"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/metaKey) *)
  val get_metaKey: 'tags this -> bool [@@js.get "metaKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/repeat) *)
  val get_repeat: 'tags this -> bool [@@js.get "repeat"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/shiftKey) *)
  val get_shiftKey: 'tags this -> bool [@@js.get "shiftKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/getModifierState) *)
  val getModifierState: 'tags this -> keyArg:string -> bool [@@js.call "getModifierState"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/initKeyboardEvent) *)
  val initKeyboardEvent: 'tags this -> typeArg:string -> ?bubblesArg:bool -> ?cancelableArg:bool -> ?viewArg:Window.t option -> ?keyArg:string -> ?locationArg:float -> ?ctrlKey:bool -> ?altKey:bool -> ?shiftKey:bool -> ?metaKey:bool -> unit -> unit [@@js.call "initKeyboardEvent"]
  val get_DOM_KEY_LOCATION_STANDARD: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "DOM_KEY_LOCATION_STANDARD"]
  val get_DOM_KEY_LOCATION_LEFT: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "DOM_KEY_LOCATION_LEFT"]
  val get_DOM_KEY_LOCATION_RIGHT: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "DOM_KEY_LOCATION_RIGHT"]
  val get_DOM_KEY_LOCATION_NUMPAD: 'tags this -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "DOM_KEY_LOCATION_NUMPAD"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: type_:string -> ?eventInitDict:KeyboardEventInit.t -> unit -> t [@@js.create]
  val dom_key_location_standard: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "DOM_KEY_LOCATION_STANDARD"]
  val dom_key_location_left: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "DOM_KEY_LOCATION_LEFT"]
  val dom_key_location_right: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "DOM_KEY_LOCATION_RIGHT"]
  val dom_key_location_numpad: unit -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "DOM_KEY_LOCATION_NUMPAD"]
end
and KeyboardEventInit : sig
  type t = [`EventInit | `EventModifierInit | `KeyboardEventInit | `UIEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `EventModifierInit | `KeyboardEventInit | `UIEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `EventModifierInit | `KeyboardEventInit | `UIEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `KeyboardEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** @deprecated  *)
  val get_charCode: 'tags this -> float option [@@js.get "charCode"]
  
  (** @deprecated  *)
  val set_charCode: 'tags this -> float -> unit [@@js.set "charCode"]
  val get_code: 'tags this -> string option [@@js.get "code"]
  val set_code: 'tags this -> string -> unit [@@js.set "code"]
  val get_isComposing: 'tags this -> bool option [@@js.get "isComposing"]
  val set_isComposing: 'tags this -> bool -> unit [@@js.set "isComposing"]
  val get_key: 'tags this -> string option [@@js.get "key"]
  val set_key: 'tags this -> string -> unit [@@js.set "key"]
  
  (** @deprecated  *)
  val get_keyCode: 'tags this -> float option [@@js.get "keyCode"]
  
  (** @deprecated  *)
  val set_keyCode: 'tags this -> float -> unit [@@js.set "keyCode"]
  val get_location: 'tags this -> float option [@@js.get "location"]
  val set_location: 'tags this -> float -> unit [@@js.set "location"]
  val get_repeat: 'tags this -> bool option [@@js.get "repeat"]
  val set_repeat: 'tags this -> bool -> unit [@@js.set "repeat"]
  val create: ?charCode:float -> ?code:string -> ?isComposing:bool -> ?key:string -> ?keyCode:float -> ?location:float -> ?repeat:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
and LinkStyle : sig
  type t = [`LinkStyle] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`LinkStyle]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`LinkStyle]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `LinkStyle ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/sheet) *)
  val get_sheet: 'tags this -> CSSStyleSheet.t option [@@js.get "sheet"]
  val create: ?sheet:CSSStyleSheet.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MathMLElement) *)
and[@js.scope "MathMLElement"] MathMLElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `MathMLElement | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `MathMLElement | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `MathMLElement | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MathMLElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'MathMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'MathMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  A message received by a target object.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessageEvent)
*)
and[@js.scope "MessageEvent"] MessageEvent : sig
  type 'T t = [`Event | `MessageEvent of 'T] intf [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
  type t_0 = any t
  [@@@js.stop]
  type 'T tags = [`Event | `MessageEvent of 'T]
  type tags_0 = any tags
  [@@@js.start]
  [@@@js.implem 
    type 'T tags = [`Event | `MessageEvent of 'T]
    type tags_0 = any tags
  ]
  type ('tags, 'T) this = 'tags intf constraint 'tags = [> `MessageEvent of 'T ]
  val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
  val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessageEvent/initMessageEvent) *)
  val initMessageEvent: ('tags, 'T) this -> type_:string -> ?bubbles:bool -> ?cancelable:bool -> ?data:any -> ?origin:string -> ?lastEventId:string -> ?source:MessageEventSource.t option -> ?ports:MessagePort.t Iterable.t -> unit -> unit [@@js.call "initMessageEvent"]
  
  (**
    Returns the data of the message.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessageEvent/data)
  *)
  val get_data: ('tags, 'T) this -> 'T [@@js.get "data"]
  
  (**
    Returns the last event ID string, for server-sent events.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessageEvent/lastEventId)
  *)
  val get_lastEventId: ('tags, 'T) this -> string [@@js.get "lastEventId"]
  
  (**
    Returns the origin of the message, for server-sent events and cross-document messaging.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessageEvent/origin)
  *)
  val get_origin: ('tags, 'T) this -> string [@@js.get "origin"]
  
  (**
    Returns the MessagePort array sent with the message, for cross-document messaging and channel messaging.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessageEvent/ports)
  *)
  val get_ports: ('tags, 'T) this -> MessagePort.t list [@@js.get "ports"]
  
  (**
    Returns the WindowProxy of the source window, for cross-document messaging, and the MessagePort being attached, in the connect event fired at SharedWorkerGlobalScope objects.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessageEvent/source)
  *)
  val get_source: ('tags, 'T) this -> MessageEventSource.t option [@@js.get "source"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessageEvent/initMessageEvent) *)
  val initMessageEvent': ('tags, 'T) this -> type_:string -> ?bubbles:bool -> ?cancelable:bool -> ?data:any -> ?origin:string -> ?lastEventId:string -> ?source:MessageEventSource.t option -> ?ports:MessagePort.t list -> unit -> unit [@@js.call "initMessageEvent"]
  val cast_from: ('tags, 'T) this -> 'T t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t_0 [@@js.get "prototype"]
  val create: type_:string -> ?eventInitDict:'T MessageEventInit.t -> unit -> 'T t [@@js.create]
end
and MessageEventInit : sig
  type 'T t = [`EventInit | `MessageEventInit of 'T] intf [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
  type t_0 = any t
  [@@@js.stop]
  type 'T tags = [`EventInit | `MessageEventInit of 'T]
  type tags_0 = any tags
  [@@@js.start]
  [@@@js.implem 
    type 'T tags = [`EventInit | `MessageEventInit of 'T]
    type tags_0 = any tags
  ]
  type ('tags, 'T) this = 'tags intf constraint 'tags = [> `MessageEventInit of 'T ]
  val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
  val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val get_data: ('tags, 'T) this -> 'T option [@@js.get "data"]
  val set_data: ('tags, 'T) this -> 'T -> unit [@@js.set "data"]
  val get_lastEventId: ('tags, 'T) this -> string option [@@js.get "lastEventId"]
  val set_lastEventId: ('tags, 'T) this -> string -> unit [@@js.set "lastEventId"]
  val get_origin: ('tags, 'T) this -> string option [@@js.get "origin"]
  val set_origin: ('tags, 'T) this -> string -> unit [@@js.set "origin"]
  val get_ports: ('tags, 'T) this -> MessagePort.t list option [@@js.get "ports"]
  val set_ports: ('tags, 'T) this -> MessagePort.t list -> unit [@@js.set "ports"]
  val get_source: ('tags, 'T) this -> MessageEventSource.t option [@@js.get "source"]
  val set_source: ('tags, 'T) this -> MessageEventSource.t option -> unit [@@js.set "source"]
  val create: ?data:'T -> ?lastEventId:string -> ?origin:string -> ?ports:MessagePort.t list -> ?source:MessageEventSource.t -> unit -> 'T t [@@js.builder]
  val cast_from: ('tags, 'T) this -> 'T t [@@js.custom let cast_from = Obj.magic]
end
and MessageEventSource : sig
  type t = (MessagePort.t, ServiceWorker.t, WindowProxy.t) union3
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  This Channel Messaging API interface represents one of the two ports of a MessageChannel, allowing messages to be sent from one port and listening out for them arriving at the other.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessagePort)
*)
and[@js.scope "MessagePort"] MessagePort : sig
  type t = [`EventTarget | `MessagePort] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `MessagePort]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `MessagePort]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MessagePort ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessagePort/message_event) *)
  val get_onmessage: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option [@@js.get "onmessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessagePort/message_event) *)
  val set_onmessage: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit [@@js.set "onmessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessagePort/messageerror_event) *)
  val get_onmessageerror: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option [@@js.get "onmessageerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessagePort/messageerror_event) *)
  val set_onmessageerror: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit [@@js.set "onmessageerror"]
  
  (**
    Disconnects the port, so that it is no longer active.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessagePort/close)
  *)
  val close: 'tags this -> unit [@@js.call "close"]
  
  (**
    Posts a message through the channel. Objects listed in transfer are transferred, not just cloned, meaning that they are no longer usable on the sending side.
    
    Throws a "DataCloneError" DOMException if transfer contains duplicate objects or port, or if message could not be cloned.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessagePort/postMessage)
  *)
  val postMessage: 'tags this -> message:any -> transfer:Transferable.t list -> unit [@@js.call "postMessage"]
  
  (**
    Posts a message through the channel. Objects listed in transfer are transferred, not just cloned, meaning that they are no longer usable on the sending side.
    
    Throws a "DataCloneError" DOMException if transfer contains duplicate objects or port, or if message could not be cloned.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessagePort/postMessage)
  *)
  val postMessage': 'tags this -> message:any -> ?options:StructuredSerializeOptions.t -> unit -> unit [@@js.call "postMessage"]
  
  (**
    Begins dispatching messages received on the port.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessagePort/start)
  *)
  val start: 'tags this -> unit [@@js.call "start"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'MessagePortEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'MessagePortEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Events that occur due to the user interacting with a pointing device (such as a mouse). Common events using this interface include click, dblclick, mouseup, mousedown.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MouseEvent)
*)
and[@js.scope "MouseEvent"] MouseEvent : sig
  type t = [`Event | `MouseEvent | `UIEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `MouseEvent | `UIEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `MouseEvent | `UIEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MouseEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MouseEvent/altKey) *)
  val get_altKey: 'tags this -> bool [@@js.get "altKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MouseEvent/button) *)
  val get_button: 'tags this -> float [@@js.get "button"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MouseEvent/buttons) *)
  val get_buttons: 'tags this -> float [@@js.get "buttons"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MouseEvent/clientX) *)
  val get_clientX: 'tags this -> float [@@js.get "clientX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MouseEvent/clientY) *)
  val get_clientY: 'tags this -> float [@@js.get "clientY"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MouseEvent/ctrlKey) *)
  val get_ctrlKey: 'tags this -> bool [@@js.get "ctrlKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MouseEvent/layerX) *)
  val get_layerX: 'tags this -> float [@@js.get "layerX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MouseEvent/layerY) *)
  val get_layerY: 'tags this -> float [@@js.get "layerY"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MouseEvent/metaKey) *)
  val get_metaKey: 'tags this -> bool [@@js.get "metaKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MouseEvent/movementX) *)
  val get_movementX: 'tags this -> float [@@js.get "movementX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MouseEvent/movementY) *)
  val get_movementY: 'tags this -> float [@@js.get "movementY"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MouseEvent/offsetX) *)
  val get_offsetX: 'tags this -> float [@@js.get "offsetX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MouseEvent/offsetY) *)
  val get_offsetY: 'tags this -> float [@@js.get "offsetY"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MouseEvent/pageX) *)
  val get_pageX: 'tags this -> float [@@js.get "pageX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MouseEvent/pageY) *)
  val get_pageY: 'tags this -> float [@@js.get "pageY"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MouseEvent/relatedTarget) *)
  val get_relatedTarget: 'tags this -> EventTarget.t option [@@js.get "relatedTarget"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MouseEvent/screenX) *)
  val get_screenX: 'tags this -> float [@@js.get "screenX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MouseEvent/screenY) *)
  val get_screenY: 'tags this -> float [@@js.get "screenY"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MouseEvent/shiftKey) *)
  val get_shiftKey: 'tags this -> bool [@@js.get "shiftKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MouseEvent/x) *)
  val get_x: 'tags this -> float [@@js.get "x"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MouseEvent/y) *)
  val get_y: 'tags this -> float [@@js.get "y"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MouseEvent/getModifierState) *)
  val getModifierState: 'tags this -> keyArg:string -> bool [@@js.call "getModifierState"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MouseEvent/initMouseEvent) *)
  val initMouseEvent: 'tags this -> typeArg:string -> canBubbleArg:bool -> cancelableArg:bool -> viewArg:Window.t -> detailArg:float -> screenXArg:float -> screenYArg:float -> clientXArg:float -> clientYArg:float -> ctrlKeyArg:bool -> altKeyArg:bool -> shiftKeyArg:bool -> metaKeyArg:bool -> buttonArg:float -> relatedTargetArg:EventTarget.t option -> unit [@@js.call "initMouseEvent"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: type_:string -> ?eventInitDict:MouseEventInit.t -> unit -> t [@@js.create]
end
and MouseEventInit : sig
  type t = [`EventInit | `EventModifierInit | `MouseEventInit | `UIEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `EventModifierInit | `MouseEventInit | `UIEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `EventModifierInit | `MouseEventInit | `UIEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MouseEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_button: 'tags this -> float option [@@js.get "button"]
  val set_button: 'tags this -> float -> unit [@@js.set "button"]
  val get_buttons: 'tags this -> float option [@@js.get "buttons"]
  val set_buttons: 'tags this -> float -> unit [@@js.set "buttons"]
  val get_clientX: 'tags this -> float option [@@js.get "clientX"]
  val set_clientX: 'tags this -> float -> unit [@@js.set "clientX"]
  val get_clientY: 'tags this -> float option [@@js.get "clientY"]
  val set_clientY: 'tags this -> float -> unit [@@js.set "clientY"]
  val get_movementX: 'tags this -> float option [@@js.get "movementX"]
  val set_movementX: 'tags this -> float -> unit [@@js.set "movementX"]
  val get_movementY: 'tags this -> float option [@@js.get "movementY"]
  val set_movementY: 'tags this -> float -> unit [@@js.set "movementY"]
  val get_relatedTarget: 'tags this -> EventTarget.t option [@@js.get "relatedTarget"]
  val set_relatedTarget: 'tags this -> EventTarget.t option -> unit [@@js.set "relatedTarget"]
  val get_screenX: 'tags this -> float option [@@js.get "screenX"]
  val set_screenX: 'tags this -> float -> unit [@@js.set "screenX"]
  val get_screenY: 'tags this -> float option [@@js.get "screenY"]
  val set_screenY: 'tags this -> float -> unit [@@js.set "screenY"]
  val create: ?button:float -> ?buttons:float -> ?clientX:float -> ?clientY:float -> ?movementX:float -> ?movementY:float -> ?relatedTarget:EventTarget.t -> ?screenX:float -> ?screenY:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** Provides event properties that are specific to modifications to the Document Object Model (DOM) hierarchy and nodes. *)
and[@js.scope "MutationEvent"] MutationEvent : sig
  type t = [`Event | `MutationEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `MutationEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `MutationEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MutationEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MutationEvent/attrChange) *)
  val get_attrChange: 'tags this -> float [@@js.get "attrChange"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MutationEvent/attrName) *)
  val get_attrName: 'tags this -> string [@@js.get "attrName"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MutationEvent/newValue) *)
  val get_newValue: 'tags this -> string [@@js.get "newValue"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MutationEvent/prevValue) *)
  val get_prevValue: 'tags this -> string [@@js.get "prevValue"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MutationEvent/relatedNode) *)
  val get_relatedNode: 'tags this -> Node.t option [@@js.get "relatedNode"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MutationEvent/initMutationEvent) *)
  val initMutationEvent: 'tags this -> typeArg:string -> ?bubblesArg:bool -> ?cancelableArg:bool -> ?relatedNodeArg:Node.t option -> ?prevValueArg:string -> ?newValueArg:string -> ?attrNameArg:string -> ?attrChangeArg:float -> unit -> unit [@@js.call "initMutationEvent"]
  val get_MODIFICATION: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "MODIFICATION"]
  val get_ADDITION: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "ADDITION"]
  val get_REMOVAL: 'tags this -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "REMOVAL"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  val modification: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "MODIFICATION"]
  val addition: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "ADDITION"]
  val removal: unit -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "REMOVAL"]
end

(**
  A collection of Attr objects. Objects inside a NamedNodeMap are not in any particular order, unlike NodeList, although they may be accessed by an index as in an array.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/NamedNodeMap)
*)
and[@js.scope "NamedNodeMap"] NamedNodeMap : sig
  type t = [`NamedNodeMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`NamedNodeMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`NamedNodeMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `NamedNodeMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> Attr.t IterableIterator.t *)
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/NamedNodeMap/length) *)
  val get_length: 'tags this -> float [@@js.get "length"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/NamedNodeMap/getNamedItem) *)
  val getNamedItem: 'tags this -> qualifiedName:string -> Attr.t option [@@js.call "getNamedItem"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/NamedNodeMap/getNamedItemNS) *)
  val getNamedItemNS: 'tags this -> namespace:string option -> localName:string -> Attr.t option [@@js.call "getNamedItemNS"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/NamedNodeMap/item) *)
  val item: 'tags this -> index:float -> Attr.t option [@@js.call "item"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/NamedNodeMap/removeNamedItem) *)
  val removeNamedItem: 'tags this -> qualifiedName:string -> Attr.t [@@js.call "removeNamedItem"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/NamedNodeMap/removeNamedItemNS) *)
  val removeNamedItemNS: 'tags this -> namespace:string option -> localName:string -> Attr.t [@@js.call "removeNamedItemNS"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/NamedNodeMap/setNamedItem) *)
  val setNamedItem: 'tags this -> attr:Attr.t -> Attr.t option [@@js.call "setNamedItem"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/NamedNodeMap/setNamedItemNS) *)
  val setNamedItemNS: 'tags this -> attr:Attr.t -> Attr.t option [@@js.call "setNamedItemNS"]
  val get: 'tags this -> float -> Attr.t [@@js.index_get]
  val set: 'tags this -> float -> Attr.t -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  The state and the identity of the user agent. It allows scripts to query it and to register themselves to carry on some activities.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator)
*)
and[@js.scope "Navigator"] Navigator : sig
  type t = [`Navigator | `NavigatorAutomationInformation | `NavigatorBadge | `NavigatorConcurrentHardware | `NavigatorContentUtils | `NavigatorCookies | `NavigatorID | `NavigatorLanguage | `NavigatorLocks | `NavigatorOnLine | `NavigatorPlugins | `NavigatorStorage] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Navigator | `NavigatorAutomationInformation | `NavigatorBadge | `NavigatorConcurrentHardware | `NavigatorContentUtils | `NavigatorCookies | `NavigatorID | `NavigatorLanguage | `NavigatorLocks | `NavigatorOnLine | `NavigatorPlugins | `NavigatorStorage]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Navigator | `NavigatorAutomationInformation | `NavigatorBadge | `NavigatorConcurrentHardware | `NavigatorContentUtils | `NavigatorCookies | `NavigatorID | `NavigatorLanguage | `NavigatorLocks | `NavigatorOnLine | `NavigatorPlugins | `NavigatorStorage]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Navigator ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/requestMediaKeySystemAccess)
  *)
  val requestMediaKeySystemAccess: 'tags this -> keySystem:string -> supportedConfigurations:MediaKeySystemConfiguration.t Iterable.t -> MediaKeySystemAccess.t Promise.t [@@js.call "requestMediaKeySystemAccess"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/vibrate) *)
  val vibrate: 'tags this -> pattern:float Iterable.t -> bool [@@js.call "vibrate"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/clipboard)
  *)
  val get_clipboard: 'tags this -> Clipboard.t [@@js.get "clipboard"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/credentials)
  *)
  val get_credentials: 'tags this -> CredentialsContainer.t [@@js.get "credentials"]
  val get_doNotTrack: 'tags this -> string option [@@js.get "doNotTrack"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/geolocation) *)
  val get_geolocation: 'tags this -> Geolocation.t [@@js.get "geolocation"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/maxTouchPoints) *)
  val get_maxTouchPoints: 'tags this -> float [@@js.get "maxTouchPoints"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/mediaCapabilities) *)
  val get_mediaCapabilities: 'tags this -> MediaCapabilities.t [@@js.get "mediaCapabilities"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/mediaDevices)
  *)
  val get_mediaDevices: 'tags this -> MediaDevices.t [@@js.get "mediaDevices"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/mediaSession) *)
  val get_mediaSession: 'tags this -> MediaSession.t [@@js.get "mediaSession"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/permissions) *)
  val get_permissions: 'tags this -> Permissions.t [@@js.get "permissions"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/serviceWorker)
  *)
  val get_serviceWorker: 'tags this -> ServiceWorkerContainer.t [@@js.get "serviceWorker"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/userActivation) *)
  val get_userActivation: 'tags this -> UserActivation.t [@@js.get "userActivation"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/wakeLock) *)
  val get_wakeLock: 'tags this -> WakeLock.t [@@js.get "wakeLock"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/canShare)
  *)
  val canShare: 'tags this -> ?data:ShareData.t -> unit -> bool [@@js.call "canShare"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/getGamepads) *)
  val getGamepads: 'tags this -> Gamepad.t option list [@@js.call "getGamepads"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/requestMIDIAccess)
  *)
  val requestMIDIAccess: 'tags this -> ?options:MIDIOptions.t -> unit -> MIDIAccess.t Promise.t [@@js.call "requestMIDIAccess"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/requestMediaKeySystemAccess)
  *)
  val requestMediaKeySystemAccess': 'tags this -> keySystem:string -> supportedConfigurations:MediaKeySystemConfiguration.t list -> MediaKeySystemAccess.t Promise.t [@@js.call "requestMediaKeySystemAccess"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/sendBeacon) *)
  val sendBeacon: 'tags this -> url:([`U1 of string | `U2 of URL.t] [@js.union]) -> ?data:BodyInit.t option -> unit -> bool [@@js.call "sendBeacon"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/share)
  *)
  val share: 'tags this -> ?data:ShareData.t -> unit -> unit Promise.t [@@js.call "share"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/vibrate) *)
  val vibrate': 'tags this -> pattern:VibratePattern.t -> bool [@@js.call "vibrate"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Node is an interface from which a number of DOM API object types inherit. It allows those types to be treated similarly; for example, inheriting the same set of methods, or being tested in the same way.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node)
*)
and[@js.scope "Node"] Node : sig
  type t = [`EventTarget | `Node] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `Node]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `Node]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Node ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns node's node document's document base URL.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/baseURI)
  *)
  val get_baseURI: 'tags this -> string [@@js.get "baseURI"]
  
  (**
    Returns the children.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/childNodes)
  *)
  val get_childNodes: 'tags this -> ChildNode.t NodeListOf.t [@@js.get "childNodes"]
  
  (**
    Returns the first child.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/firstChild)
  *)
  val get_firstChild: 'tags this -> ChildNode.t option [@@js.get "firstChild"]
  
  (**
    Returns true if node is connected and false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/isConnected)
  *)
  val get_isConnected: 'tags this -> bool [@@js.get "isConnected"]
  
  (**
    Returns the last child.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/lastChild)
  *)
  val get_lastChild: 'tags this -> ChildNode.t option [@@js.get "lastChild"]
  
  (**
    Returns the next sibling.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/nextSibling)
  *)
  val get_nextSibling: 'tags this -> ChildNode.t option [@@js.get "nextSibling"]
  
  (**
    Returns a string appropriate for the type of node.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/nodeName)
  *)
  val get_nodeName: 'tags this -> string [@@js.get "nodeName"]
  
  (**
    Returns the type of node.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/nodeType)
  *)
  val get_nodeType: 'tags this -> float [@@js.get "nodeType"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/nodeValue) *)
  val get_nodeValue: 'tags this -> string option [@@js.get "nodeValue"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/nodeValue) *)
  val set_nodeValue: 'tags this -> string option -> unit [@@js.set "nodeValue"]
  
  (**
    Returns the node document. Returns null for documents.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/ownerDocument)
  *)
  val get_ownerDocument: 'tags this -> Document.t option [@@js.get "ownerDocument"]
  
  (**
    Returns the parent element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/parentElement)
  *)
  val get_parentElement: 'tags this -> HTMLElement.t option [@@js.get "parentElement"]
  
  (**
    Returns the parent.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/parentNode)
  *)
  val get_parentNode: 'tags this -> ParentNode.t option [@@js.get "parentNode"]
  
  (**
    Returns the previous sibling.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/previousSibling)
  *)
  val get_previousSibling: 'tags this -> ChildNode.t option [@@js.get "previousSibling"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/textContent) *)
  val get_textContent: 'tags this -> string option [@@js.get "textContent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/textContent) *)
  val set_textContent: 'tags this -> string option -> unit [@@js.set "textContent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/appendChild) *)
  val appendChild: 'tags this -> node:'T -> 'T [@@js.call "appendChild"]
  
  (**
    Returns a copy of node. If deep is true, the copy also includes the node's descendants.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/cloneNode)
  *)
  val cloneNode: 'tags this -> ?deep:bool -> unit -> t [@@js.call "cloneNode"]
  
  (**
    Returns a bitmask indicating the position of other relative to node.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/compareDocumentPosition)
  *)
  val compareDocumentPosition: 'tags this -> other:t -> float [@@js.call "compareDocumentPosition"]
  
  (**
    Returns true if other is an inclusive descendant of node, and false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/contains)
  *)
  val contains: 'tags this -> other:t option -> bool [@@js.call "contains"]
  
  (**
    Returns node's root.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/getRootNode)
  *)
  val getRootNode: 'tags this -> ?options:GetRootNodeOptions.t -> unit -> t [@@js.call "getRootNode"]
  
  (**
    Returns whether node has children.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/hasChildNodes)
  *)
  val hasChildNodes: 'tags this -> bool [@@js.call "hasChildNodes"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/insertBefore) *)
  val insertBefore: 'tags this -> node:'T -> child:t option -> 'T [@@js.call "insertBefore"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/isDefaultNamespace) *)
  val isDefaultNamespace: 'tags this -> namespace:string option -> bool [@@js.call "isDefaultNamespace"]
  
  (**
    Returns whether node and otherNode have the same properties.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/isEqualNode)
  *)
  val isEqualNode: 'tags this -> otherNode:t option -> bool [@@js.call "isEqualNode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/isSameNode) *)
  val isSameNode: 'tags this -> otherNode:t option -> bool [@@js.call "isSameNode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/lookupNamespaceURI) *)
  val lookupNamespaceURI: 'tags this -> prefix:string option -> string option [@@js.call "lookupNamespaceURI"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/lookupPrefix) *)
  val lookupPrefix: 'tags this -> namespace:string option -> string option [@@js.call "lookupPrefix"]
  
  (**
    Removes empty exclusive Text nodes and concatenates the data of remaining contiguous exclusive Text nodes into the first of their nodes.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/normalize)
  *)
  val normalize: 'tags this -> unit [@@js.call "normalize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/removeChild) *)
  val removeChild: 'tags this -> child:'T -> 'T [@@js.call "removeChild"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/replaceChild) *)
  val replaceChild: 'tags this -> node:t -> child:'T -> 'T [@@js.call "replaceChild"]
  
  (** node is an element. *)
  val get_ELEMENT_NODE: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "ELEMENT_NODE"]
  val get_ATTRIBUTE_NODE: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "ATTRIBUTE_NODE"]
  
  (** node is a Text node. *)
  val get_TEXT_NODE: 'tags this -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "TEXT_NODE"]
  
  (** node is a CDATASection node. *)
  val get_CDATA_SECTION_NODE: 'tags this -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "CDATA_SECTION_NODE"]
  val get_ENTITY_REFERENCE_NODE: 'tags this -> ([`L_n_5[@js 5]] [@js.enum]) [@@js.get "ENTITY_REFERENCE_NODE"]
  val get_ENTITY_NODE: 'tags this -> ([`L_n_6[@js 6]] [@js.enum]) [@@js.get "ENTITY_NODE"]
  
  (** node is a ProcessingInstruction node. *)
  val get_PROCESSING_INSTRUCTION_NODE: 'tags this -> ([`L_n_7[@js 7]] [@js.enum]) [@@js.get "PROCESSING_INSTRUCTION_NODE"]
  
  (** node is a Comment node. *)
  val get_COMMENT_NODE: 'tags this -> ([`L_n_8[@js 8]] [@js.enum]) [@@js.get "COMMENT_NODE"]
  
  (** node is a document. *)
  val get_DOCUMENT_NODE: 'tags this -> ([`L_n_9[@js 9]] [@js.enum]) [@@js.get "DOCUMENT_NODE"]
  
  (** node is a doctype. *)
  val get_DOCUMENT_TYPE_NODE: 'tags this -> ([`L_n_10[@js 10]] [@js.enum]) [@@js.get "DOCUMENT_TYPE_NODE"]
  
  (** node is a DocumentFragment node. *)
  val get_DOCUMENT_FRAGMENT_NODE: 'tags this -> ([`L_n_11[@js 11]] [@js.enum]) [@@js.get "DOCUMENT_FRAGMENT_NODE"]
  val get_NOTATION_NODE: 'tags this -> ([`L_n_12[@js 12]] [@js.enum]) [@@js.get "NOTATION_NODE"]
  
  (** Set when node and other are not in the same tree. *)
  val get_DOCUMENT_POSITION_DISCONNECTED: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "DOCUMENT_POSITION_DISCONNECTED"]
  
  (** Set when other is preceding node. *)
  val get_DOCUMENT_POSITION_PRECEDING: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "DOCUMENT_POSITION_PRECEDING"]
  
  (** Set when other is following node. *)
  val get_DOCUMENT_POSITION_FOLLOWING: 'tags this -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "DOCUMENT_POSITION_FOLLOWING"]
  
  (** Set when other is an ancestor of node. *)
  val get_DOCUMENT_POSITION_CONTAINS: 'tags this -> ([`L_n_8[@js 8]] [@js.enum]) [@@js.get "DOCUMENT_POSITION_CONTAINS"]
  
  (** Set when other is a descendant of node. *)
  val get_DOCUMENT_POSITION_CONTAINED_BY: 'tags this -> ([`L_n_16[@js 16]] [@js.enum]) [@@js.get "DOCUMENT_POSITION_CONTAINED_BY"]
  val get_DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 'tags this -> ([`L_n_32[@js 32]] [@js.enum]) [@@js.get "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  
  (** node is an element. *)
  val element_node: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "ELEMENT_NODE"]
  val attribute_node: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "ATTRIBUTE_NODE"]
  
  (** node is a Text node. *)
  val text_node: unit -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "TEXT_NODE"]
  
  (** node is a CDATASection node. *)
  val cdata_section_node: unit -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "CDATA_SECTION_NODE"]
  val entity_reference_node: unit -> ([`L_n_5[@js 5]] [@js.enum]) [@@js.get "ENTITY_REFERENCE_NODE"]
  val entity_node: unit -> ([`L_n_6[@js 6]] [@js.enum]) [@@js.get "ENTITY_NODE"]
  
  (** node is a ProcessingInstruction node. *)
  val processing_instruction_node: unit -> ([`L_n_7[@js 7]] [@js.enum]) [@@js.get "PROCESSING_INSTRUCTION_NODE"]
  
  (** node is a Comment node. *)
  val comment_node: unit -> ([`L_n_8[@js 8]] [@js.enum]) [@@js.get "COMMENT_NODE"]
  
  (** node is a document. *)
  val document_node: unit -> ([`L_n_9[@js 9]] [@js.enum]) [@@js.get "DOCUMENT_NODE"]
  
  (** node is a doctype. *)
  val document_type_node: unit -> ([`L_n_10[@js 10]] [@js.enum]) [@@js.get "DOCUMENT_TYPE_NODE"]
  
  (** node is a DocumentFragment node. *)
  val document_fragment_node: unit -> ([`L_n_11[@js 11]] [@js.enum]) [@@js.get "DOCUMENT_FRAGMENT_NODE"]
  val notation_node: unit -> ([`L_n_12[@js 12]] [@js.enum]) [@@js.get "NOTATION_NODE"]
  
  (** Set when node and other are not in the same tree. *)
  val document_position_disconnected: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "DOCUMENT_POSITION_DISCONNECTED"]
  
  (** Set when other is preceding node. *)
  val document_position_preceding: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "DOCUMENT_POSITION_PRECEDING"]
  
  (** Set when other is following node. *)
  val document_position_following: unit -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "DOCUMENT_POSITION_FOLLOWING"]
  
  (** Set when other is an ancestor of node. *)
  val document_position_contains: unit -> ([`L_n_8[@js 8]] [@js.enum]) [@@js.get "DOCUMENT_POSITION_CONTAINS"]
  
  (** Set when other is a descendant of node. *)
  val document_position_contained_by: unit -> ([`L_n_16[@js 16]] [@js.enum]) [@@js.get "DOCUMENT_POSITION_CONTAINED_BY"]
  val document_position_implementation_specific: unit -> ([`L_n_32[@js 32]] [@js.enum]) [@@js.get "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC"]
end
and[@js.scope "NodeFilter"] NodeFilter : sig
  module AnonymousInterface624 : sig
    type t = private Ojs.t
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    val acceptNode: t -> node:Node.t -> float [@@js.call "acceptNode"]
  end
  type t = (AnonymousInterface624.t, (Node.t -> float)) union2
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val filter_accept: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "FILTER_ACCEPT"]
  val filter_reject: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "FILTER_REJECT"]
  val filter_skip: unit -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "FILTER_SKIP"]
  val show_all: unit -> ([`L_n_minus1[@js -1]] [@js.enum]) [@@js.get "SHOW_ALL"]
  val show_element: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SHOW_ELEMENT"]
  val show_attribute: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "SHOW_ATTRIBUTE"]
  val show_text: unit -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "SHOW_TEXT"]
  val show_cdata_section: unit -> ([`L_n_8[@js 8]] [@js.enum]) [@@js.get "SHOW_CDATA_SECTION"]
  val show_entity_reference: unit -> ([`L_n_16[@js 16]] [@js.enum]) [@@js.get "SHOW_ENTITY_REFERENCE"]
  val show_entity: unit -> ([`L_n_32[@js 32]] [@js.enum]) [@@js.get "SHOW_ENTITY"]
  val show_processing_instruction: unit -> ([`L_n_64[@js 64]] [@js.enum]) [@@js.get "SHOW_PROCESSING_INSTRUCTION"]
  val show_comment: unit -> ([`L_n_128[@js 128]] [@js.enum]) [@@js.get "SHOW_COMMENT"]
  val show_document: unit -> ([`L_n_256[@js 256]] [@js.enum]) [@@js.get "SHOW_DOCUMENT"]
  val show_document_type: unit -> ([`L_n_512[@js 512]] [@js.enum]) [@@js.get "SHOW_DOCUMENT_TYPE"]
  val show_document_fragment: unit -> ([`L_n_1024[@js 1024]] [@js.enum]) [@@js.get "SHOW_DOCUMENT_FRAGMENT"]
  val show_notation: unit -> ([`L_n_2048[@js 2048]] [@js.enum]) [@@js.get "SHOW_NOTATION"]
end

(**
  An iterator over the members of a list of the nodes in a subtree of the DOM. The nodes will be returned in document order.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/NodeIterator)
*)
and[@js.scope "NodeIterator"] NodeIterator : sig
  type t = [`NodeIterator] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`NodeIterator]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`NodeIterator]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `NodeIterator ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/NodeIterator/filter) *)
  val get_filter: 'tags this -> NodeFilter.t option [@@js.get "filter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/NodeIterator/pointerBeforeReferenceNode) *)
  val get_pointerBeforeReferenceNode: 'tags this -> bool [@@js.get "pointerBeforeReferenceNode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/NodeIterator/referenceNode) *)
  val get_referenceNode: 'tags this -> Node.t [@@js.get "referenceNode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/NodeIterator/root) *)
  val get_root: 'tags this -> Node.t [@@js.get "root"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/NodeIterator/whatToShow) *)
  val get_whatToShow: 'tags this -> float [@@js.get "whatToShow"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/NodeIterator/detach) *)
  val detach: 'tags this -> unit [@@js.call "detach"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/NodeIterator/nextNode) *)
  val nextNode: 'tags this -> Node.t option [@@js.call "nextNode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/NodeIterator/previousNode) *)
  val previousNode: 'tags this -> Node.t option [@@js.call "previousNode"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  NodeList objects are collections of nodes, usually returned by properties such as Node.childNodes and methods such as document.querySelectorAll().
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/NodeList)
*)
and[@js.scope "NodeList"] NodeList : sig
  type t = [`NodeList] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`NodeList]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`NodeList]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `NodeList ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> Node.t IterableIterator.t *)
  
  (** Returns an array of key, value pairs for every entry in the list. *)
  val entries: 'tags this -> (float * Node.t) IterableIterator.t [@@js.call "entries"]
  
  (** Returns an list of keys in the list. *)
  val keys: 'tags this -> float IterableIterator.t [@@js.call "keys"]
  
  (** Returns an list of values in the list. *)
  val values: 'tags this -> Node.t IterableIterator.t [@@js.call "values"]
  
  (**
    Returns the number of nodes in the collection.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/NodeList/length)
  *)
  val get_length: 'tags this -> float [@@js.get "length"]
  
  (**
    Returns the node with index index from the collection. The nodes are sorted in tree order.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/NodeList/item)
  *)
  val item: 'tags this -> index:float -> Node.t option [@@js.call "item"]
  
  (**
    Performs the specified action for each node in an list.
    @param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the list.
    @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
  *)
  val forEach: 'tags this -> callbackfn:(value:Node.t -> key:float -> parent:t -> unit) -> ?thisArg:any -> unit -> unit [@@js.call "forEach"]
  val get: 'tags this -> float -> Node.t [@@js.index_get]
  val set: 'tags this -> float -> Node.t -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
and NodeListOf : sig
  type 'TNode t = [`NodeList | `NodeListOf of 'TNode] intf [@@js.custom { of_js=(fun _TNode -> Obj.magic); to_js=(fun _TNode -> Obj.magic) }]
  [@@@js.stop]
  type 'TNode tags = [`NodeList | `NodeListOf of 'TNode]
  [@@@js.start]
  [@@@js.implem 
    type 'TNode tags = [`NodeList | `NodeListOf of 'TNode]
  ]
  type ('tags, 'TNode) this = 'tags intf constraint 'tags = [> `NodeListOf of 'TNode ]
  val t_to_js: ('TNode -> Ojs.t) -> 'TNode t -> Ojs.t
  val t_of_js: (Ojs.t -> 'TNode) -> Ojs.t -> 'TNode t
  (* [Symbol.iterator]: unit -> 'TNode IterableIterator.t *)
  
  (** Returns an array of key, value pairs for every entry in the list. *)
  val entries: ('tags, 'TNode) this -> (float * 'TNode) IterableIterator.t [@@js.call "entries"]
  
  (** Returns an list of keys in the list. *)
  val keys: ('tags, 'TNode) this -> float IterableIterator.t [@@js.call "keys"]
  
  (** Returns an list of values in the list. *)
  val values: ('tags, 'TNode) this -> 'TNode IterableIterator.t [@@js.call "values"]
  
  (**
    Returns the node with index index from the collection. The nodes are sorted in tree order.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/NodeList/item)
  *)
  val item: ('tags, 'TNode) this -> index:float -> 'TNode [@@js.call "item"]
  
  (**
    Performs the specified action for each node in an list.
    @param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the list.
    @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
  *)
  val forEach: ('tags, 'TNode) this -> callbackfn:(value:'TNode -> key:float -> parent:'TNode t -> unit) -> ?thisArg:any -> unit -> unit [@@js.call "forEach"]
  val get: ('tags, 'TNode) this -> float -> 'TNode [@@js.index_get]
  val set: ('tags, 'TNode) this -> float -> 'TNode -> unit [@@js.index_set]
  val cast_from: ('tags, 'TNode) this -> 'TNode t [@@js.custom let cast_from = Obj.magic]
end
and NonDocumentTypeChildNode : sig
  type t = [`NonDocumentTypeChildNode] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`NonDocumentTypeChildNode]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`NonDocumentTypeChildNode]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `NonDocumentTypeChildNode ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the first following sibling that is an element, and null otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CharacterData/nextElementSibling)
  *)
  val get_nextElementSibling: 'tags this -> Element.t option [@@js.get "nextElementSibling"]
  
  (**
    Returns the first preceding sibling that is an element, and null otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CharacterData/previousElementSibling)
  *)
  val get_previousElementSibling: 'tags this -> Element.t option [@@js.get "previousElementSibling"]
  val create: ?nextElementSibling:Element.t -> ?previousElementSibling:Element.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
and NonElementParentNode : sig
  type t = [`NonElementParentNode] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`NonElementParentNode]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`NonElementParentNode]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `NonElementParentNode ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the first element within node's descendants whose ID is elementId.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/getElementById)
  *)
  val getElementById: 'tags this -> elementId:string -> Element.t option [@@js.call "getElementById"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas) *)
and[@js.scope "OffscreenCanvas"] OffscreenCanvas : sig
  type t = [`EventTarget | `OffscreenCanvas] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `OffscreenCanvas]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `OffscreenCanvas]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OffscreenCanvas ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    These attributes return the dimensions of the OffscreenCanvas object's bitmap.
    
    They can be set, to replace the bitmap with a new, transparent black bitmap of the specified dimensions (effectively resizing it).
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/height)
  *)
  val get_height: 'tags this -> float [@@js.get "height"]
  
  (**
    These attributes return the dimensions of the OffscreenCanvas object's bitmap.
    
    They can be set, to replace the bitmap with a new, transparent black bitmap of the specified dimensions (effectively resizing it).
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/height)
  *)
  val set_height: 'tags this -> float -> unit [@@js.set "height"]
  val get_oncontextlost: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "oncontextlost"]
  val set_oncontextlost: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "oncontextlost"]
  val get_oncontextrestored: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "oncontextrestored"]
  val set_oncontextrestored: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "oncontextrestored"]
  
  (**
    These attributes return the dimensions of the OffscreenCanvas object's bitmap.
    
    They can be set, to replace the bitmap with a new, transparent black bitmap of the specified dimensions (effectively resizing it).
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/width)
  *)
  val get_width: 'tags this -> float [@@js.get "width"]
  
  (**
    These attributes return the dimensions of the OffscreenCanvas object's bitmap.
    
    They can be set, to replace the bitmap with a new, transparent black bitmap of the specified dimensions (effectively resizing it).
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/width)
  *)
  val set_width: 'tags this -> float -> unit [@@js.set "width"]
  
  (**
    Returns a promise that will fulfill with a new Blob object representing a file containing the image in the OffscreenCanvas object.
    
    The argument, if provided, is a dictionary that controls the encoding options of the image file to be created. The type field specifies the file format and has a default value of "image/png"; that type is also used if the requested type isn't supported. If the image format supports variable quality (such as "image/jpeg"), then the quality field is a number in the range 0.0 to 1.0 inclusive indicating the desired quality level for the resulting image.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/convertToBlob)
  *)
  val convertToBlob: 'tags this -> ?options:ImageEncodeOptions.t -> unit -> Blob.t Promise.t [@@js.call "convertToBlob"]
  
  (**
    Returns an object that exposes an API for drawing on the OffscreenCanvas object. contextId specifies the desired API: "2d", "bitmaprenderer", "webgl", or "webgl2". options is handled by that API.
    
    This specification defines the "2d" context below, which is similar but distinct from the "2d" context that is created from a canvas element. The WebGL specifications define the "webgl" and "webgl2" contexts. \[WEBGL\]
    
    Returns null if the canvas has already been initialized with another context type (e.g., trying to get a "2d" context after getting a "webgl" context).
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/getContext)
  *)
  val getContext: 'tags this -> contextId:([`L_s1_2d[@js "2d"]] [@js.enum]) -> ?options:any -> unit -> OffscreenCanvasRenderingContext2D.t option [@@js.call "getContext"]
  
  (**
    Returns an object that exposes an API for drawing on the OffscreenCanvas object. contextId specifies the desired API: "2d", "bitmaprenderer", "webgl", or "webgl2". options is handled by that API.
    
    This specification defines the "2d" context below, which is similar but distinct from the "2d" context that is created from a canvas element. The WebGL specifications define the "webgl" and "webgl2" contexts. \[WEBGL\]
    
    Returns null if the canvas has already been initialized with another context type (e.g., trying to get a "2d" context after getting a "webgl" context).
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/getContext)
  *)
  val getContext': 'tags this -> contextId:([`L_s201_bitmaprenderer[@js "bitmaprenderer"]] [@js.enum]) -> ?options:any -> unit -> ImageBitmapRenderingContext.t option [@@js.call "getContext"]
  
  (**
    Returns an object that exposes an API for drawing on the OffscreenCanvas object. contextId specifies the desired API: "2d", "bitmaprenderer", "webgl", or "webgl2". options is handled by that API.
    
    This specification defines the "2d" context below, which is similar but distinct from the "2d" context that is created from a canvas element. The WebGL specifications define the "webgl" and "webgl2" contexts. \[WEBGL\]
    
    Returns null if the canvas has already been initialized with another context type (e.g., trying to get a "2d" context after getting a "webgl" context).
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/getContext)
  *)
  val getContext'': 'tags this -> contextId:([`L_s1048_webgl[@js "webgl"]] [@js.enum]) -> ?options:any -> unit -> WebGLRenderingContext.t option [@@js.call "getContext"]
  
  (**
    Returns an object that exposes an API for drawing on the OffscreenCanvas object. contextId specifies the desired API: "2d", "bitmaprenderer", "webgl", or "webgl2". options is handled by that API.
    
    This specification defines the "2d" context below, which is similar but distinct from the "2d" context that is created from a canvas element. The WebGL specifications define the "webgl" and "webgl2" contexts. \[WEBGL\]
    
    Returns null if the canvas has already been initialized with another context type (e.g., trying to get a "2d" context after getting a "webgl" context).
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/getContext)
  *)
  val getContext''': 'tags this -> contextId:([`L_s1049_webgl2[@js "webgl2"]] [@js.enum]) -> ?options:any -> unit -> WebGL2RenderingContext.t option [@@js.call "getContext"]
  
  (**
    Returns an object that exposes an API for drawing on the OffscreenCanvas object. contextId specifies the desired API: "2d", "bitmaprenderer", "webgl", or "webgl2". options is handled by that API.
    
    This specification defines the "2d" context below, which is similar but distinct from the "2d" context that is created from a canvas element. The WebGL specifications define the "webgl" and "webgl2" contexts. \[WEBGL\]
    
    Returns null if the canvas has already been initialized with another context type (e.g., trying to get a "2d" context after getting a "webgl" context).
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/getContext)
  *)
  val getContext'''': 'tags this -> contextId:OffscreenRenderingContextId.t -> ?options:any -> unit -> OffscreenRenderingContext.t option [@@js.call "getContext"]
  
  (**
    Returns a newly created ImageBitmap object with the image in the OffscreenCanvas object. The image in the OffscreenCanvas object is replaced with a new blank image.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/transferToImageBitmap)
  *)
  val transferToImageBitmap: 'tags this -> ImageBitmap.t [@@js.call "transferToImageBitmap"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'OffscreenCanvasEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'OffscreenCanvasEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: width:float -> height:float -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OffscreenCanvasRenderingContext2D) *)
and[@js.scope "OffscreenCanvasRenderingContext2D"] OffscreenCanvasRenderingContext2D : sig
  type t = [`CanvasCompositing | `CanvasDrawImage | `CanvasDrawPath | `CanvasFillStrokeStyles | `CanvasFilters | `CanvasImageData | `CanvasImageSmoothing | `CanvasPath | `CanvasPathDrawingStyles | `CanvasRect | `CanvasShadowStyles | `CanvasState | `CanvasText | `CanvasTextDrawingStyles | `CanvasTransform | `OffscreenCanvasRenderingContext2D] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasCompositing | `CanvasDrawImage | `CanvasDrawPath | `CanvasFillStrokeStyles | `CanvasFilters | `CanvasImageData | `CanvasImageSmoothing | `CanvasPath | `CanvasPathDrawingStyles | `CanvasRect | `CanvasShadowStyles | `CanvasState | `CanvasText | `CanvasTextDrawingStyles | `CanvasTransform | `OffscreenCanvasRenderingContext2D]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasCompositing | `CanvasDrawImage | `CanvasDrawPath | `CanvasFillStrokeStyles | `CanvasFilters | `CanvasImageData | `CanvasImageSmoothing | `CanvasPath | `CanvasPathDrawingStyles | `CanvasRect | `CanvasShadowStyles | `CanvasState | `CanvasText | `CanvasTextDrawingStyles | `CanvasTransform | `OffscreenCanvasRenderingContext2D]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OffscreenCanvasRenderingContext2D ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_canvas: 'tags this -> OffscreenCanvas.t [@@js.get "canvas"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OffscreenCanvasRenderingContext2D/commit) *)
  val commit: 'tags this -> unit [@@js.call "commit"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
and OffscreenRenderingContext : sig
  type t = (ImageBitmapRenderingContext.t, OffscreenCanvasRenderingContext2D.t, WebGL2RenderingContext.t, WebGLRenderingContext.t) union4
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
and ParentNode : sig
  type t = [`EventTarget | `Node | `ParentNode] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `Node | `ParentNode]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `Node | `ParentNode]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ParentNode ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/childElementCount) *)
  val get_childElementCount: 'tags this -> float [@@js.get "childElementCount"]
  
  (**
    Returns the child elements.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/children)
  *)
  val get_children: 'tags this -> HTMLCollection.t [@@js.get "children"]
  
  (**
    Returns the first child that is an element, and null otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/firstElementChild)
  *)
  val get_firstElementChild: 'tags this -> Element.t option [@@js.get "firstElementChild"]
  
  (**
    Returns the last child that is an element, and null otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/lastElementChild)
  *)
  val get_lastElementChild: 'tags this -> Element.t option [@@js.get "lastElementChild"]
  
  (**
    Inserts nodes after the last child of node, while replacing strings in nodes with equivalent Text nodes.
    
    Throws a "HierarchyRequestError" DOMException if the constraints of the node tree are violated.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/append)
  *)
  val append: 'tags this -> nodes:(([`U1 of Node.t | `U2 of string] [@js.union]) list [@js.variadic]) -> unit [@@js.call "append"]
  
  (**
    Inserts nodes before the first child of node, while replacing strings in nodes with equivalent Text nodes.
    
    Throws a "HierarchyRequestError" DOMException if the constraints of the node tree are violated.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/prepend)
  *)
  val prepend: 'tags this -> nodes:(([`U1 of Node.t | `U2 of string] [@js.union]) list [@js.variadic]) -> unit [@@js.call "prepend"]
  
  (**
    Returns the first element that is a descendant of node that matches selectors.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/querySelector)
  *)
  val querySelector: 'tags this -> selectors:'K -> (* FIXME: unknown type 'HTMLElementTagNameMap[K]' *)any option [@@js.call "querySelector"]
  
  (**
    Returns the first element that is a descendant of node that matches selectors.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/querySelector)
  *)
  val querySelector': 'tags this -> selectors:'K -> (* FIXME: unknown type 'SVGElementTagNameMap[K]' *)any option [@@js.call "querySelector"]
  
  (**
    Returns the first element that is a descendant of node that matches selectors.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/querySelector)
  *)
  val querySelector'': 'tags this -> selectors:'K -> (* FIXME: unknown type 'MathMLElementTagNameMap[K]' *)any option [@@js.call "querySelector"]
  
  (** @deprecated  *)
  val querySelector''': 'tags this -> selectors:'K -> (* FIXME: unknown type 'HTMLElementDeprecatedTagNameMap[K]' *)any option [@@js.call "querySelector"]
  
  (**
    Returns the first element that is a descendant of node that matches selectors.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/querySelector)
  *)
  val querySelector'''': 'tags this -> selectors:string -> 'E option [@@js.call "querySelector"]
  
  (**
    Returns all element descendants of node that match selectors.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/querySelectorAll)
  *)
  val querySelectorAll: 'tags this -> selectors:'K -> (* FIXME: unknown type 'HTMLElementTagNameMap[K]' *)any NodeListOf.t [@@js.call "querySelectorAll"]
  
  (**
    Returns all element descendants of node that match selectors.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/querySelectorAll)
  *)
  val querySelectorAll': 'tags this -> selectors:'K -> (* FIXME: unknown type 'SVGElementTagNameMap[K]' *)any NodeListOf.t [@@js.call "querySelectorAll"]
  
  (**
    Returns all element descendants of node that match selectors.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/querySelectorAll)
  *)
  val querySelectorAll'': 'tags this -> selectors:'K -> (* FIXME: unknown type 'MathMLElementTagNameMap[K]' *)any NodeListOf.t [@@js.call "querySelectorAll"]
  
  (** @deprecated  *)
  val querySelectorAll''': 'tags this -> selectors:'K -> (* FIXME: unknown type 'HTMLElementDeprecatedTagNameMap[K]' *)any NodeListOf.t [@@js.call "querySelectorAll"]
  
  (**
    Returns all element descendants of node that match selectors.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/querySelectorAll)
  *)
  val querySelectorAll'''': 'tags this -> selectors:string -> 'E NodeListOf.t [@@js.call "querySelectorAll"]
  
  (**
    Replace all children of node with nodes, while replacing strings in nodes with equivalent Text nodes.
    
    Throws a "HierarchyRequestError" DOMException if the constraints of the node tree are violated.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/replaceChildren)
  *)
  val replaceChildren: 'tags this -> nodes:(([`U1 of Node.t | `U2 of string] [@js.union]) list [@js.variadic]) -> unit [@@js.call "replaceChildren"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  The state of a DOM event produced by a pointer such as the geometry of the contact point, the device type that generated the event, the amount of pressure that was applied on the contact surface, etc.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PointerEvent)
*)
and[@js.scope "PointerEvent"] PointerEvent : sig
  type t = [`Event | `MouseEvent | `PointerEvent | `UIEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `MouseEvent | `PointerEvent | `UIEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `MouseEvent | `PointerEvent | `UIEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PointerEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PointerEvent/height) *)
  val get_height: 'tags this -> float [@@js.get "height"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PointerEvent/isPrimary) *)
  val get_isPrimary: 'tags this -> bool [@@js.get "isPrimary"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PointerEvent/pointerId) *)
  val get_pointerId: 'tags this -> float [@@js.get "pointerId"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PointerEvent/pointerType) *)
  val get_pointerType: 'tags this -> string [@@js.get "pointerType"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PointerEvent/pressure) *)
  val get_pressure: 'tags this -> float [@@js.get "pressure"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PointerEvent/tangentialPressure) *)
  val get_tangentialPressure: 'tags this -> float [@@js.get "tangentialPressure"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PointerEvent/tiltX) *)
  val get_tiltX: 'tags this -> float [@@js.get "tiltX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PointerEvent/tiltY) *)
  val get_tiltY: 'tags this -> float [@@js.get "tiltY"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PointerEvent/twist) *)
  val get_twist: 'tags this -> float [@@js.get "twist"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PointerEvent/width) *)
  val get_width: 'tags this -> float [@@js.get "width"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PointerEvent/getCoalescedEvents)
  *)
  val getCoalescedEvents: 'tags this -> t list [@@js.call "getCoalescedEvents"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PointerEvent/getPredictedEvents) *)
  val getPredictedEvents: 'tags this -> t list [@@js.call "getPredictedEvents"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: type_:string -> ?eventInitDict:PointerEventInit.t -> unit -> t [@@js.create]
end
and PointerEventInit : sig
  type t = [`EventInit | `EventModifierInit | `MouseEventInit | `PointerEventInit | `UIEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `EventModifierInit | `MouseEventInit | `PointerEventInit | `UIEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `EventModifierInit | `MouseEventInit | `PointerEventInit | `UIEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PointerEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_coalescedEvents: 'tags this -> PointerEvent.t list option [@@js.get "coalescedEvents"]
  val set_coalescedEvents: 'tags this -> PointerEvent.t list -> unit [@@js.set "coalescedEvents"]
  val get_height: 'tags this -> float option [@@js.get "height"]
  val set_height: 'tags this -> float -> unit [@@js.set "height"]
  val get_isPrimary: 'tags this -> bool option [@@js.get "isPrimary"]
  val set_isPrimary: 'tags this -> bool -> unit [@@js.set "isPrimary"]
  val get_pointerId: 'tags this -> float option [@@js.get "pointerId"]
  val set_pointerId: 'tags this -> float -> unit [@@js.set "pointerId"]
  val get_pointerType: 'tags this -> string option [@@js.get "pointerType"]
  val set_pointerType: 'tags this -> string -> unit [@@js.set "pointerType"]
  val get_predictedEvents: 'tags this -> PointerEvent.t list option [@@js.get "predictedEvents"]
  val set_predictedEvents: 'tags this -> PointerEvent.t list -> unit [@@js.set "predictedEvents"]
  val get_pressure: 'tags this -> float option [@@js.get "pressure"]
  val set_pressure: 'tags this -> float -> unit [@@js.set "pressure"]
  val get_tangentialPressure: 'tags this -> float option [@@js.get "tangentialPressure"]
  val set_tangentialPressure: 'tags this -> float -> unit [@@js.set "tangentialPressure"]
  val get_tiltX: 'tags this -> float option [@@js.get "tiltX"]
  val set_tiltX: 'tags this -> float -> unit [@@js.set "tiltX"]
  val get_tiltY: 'tags this -> float option [@@js.get "tiltY"]
  val set_tiltY: 'tags this -> float -> unit [@@js.set "tiltY"]
  val get_twist: 'tags this -> float option [@@js.get "twist"]
  val set_twist: 'tags this -> float -> unit [@@js.set "twist"]
  val get_width: 'tags this -> float option [@@js.get "width"]
  val set_width: 'tags this -> float -> unit [@@js.set "width"]
  val create: ?coalescedEvents:PointerEvent.t list -> ?height:float -> ?isPrimary:bool -> ?pointerId:float -> ?pointerType:string -> ?predictedEvents:PointerEvent.t list -> ?pressure:float -> ?tangentialPressure:float -> ?tiltX:float -> ?tiltY:float -> ?twist:float -> ?width:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  A processing instruction embeds application-specific instructions in XML which can be ignored by other applications that don't recognize them.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ProcessingInstruction)
*)
and[@js.scope "ProcessingInstruction"] ProcessingInstruction : sig
  type t = [`CharacterData | `ChildNode | `EventTarget | `LinkStyle | `Node | `NonDocumentTypeChildNode | `ProcessingInstruction] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CharacterData | `ChildNode | `EventTarget | `LinkStyle | `Node | `NonDocumentTypeChildNode | `ProcessingInstruction]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CharacterData | `ChildNode | `EventTarget | `LinkStyle | `Node | `NonDocumentTypeChildNode | `ProcessingInstruction]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ProcessingInstruction ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the node document. Returns null for documents.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/ownerDocument)
  *)
  val get_ownerDocument: 'tags this -> Document.t [@@js.get "ownerDocument"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ProcessingInstruction/target) *)
  val get_target: 'tags this -> string [@@js.get "target"]
  val create: ownerDocument:Document.t -> target:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDataChannel) *)
and[@js.scope "RTCDataChannel"] RTCDataChannel : sig
  type t = [`EventTarget | `RTCDataChannel] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `RTCDataChannel]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `RTCDataChannel]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCDataChannel ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/binaryType) *)
  val get_binaryType: 'tags this -> BinaryType.t [@@js.get "binaryType"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/binaryType) *)
  val set_binaryType: 'tags this -> BinaryType.t -> unit [@@js.set "binaryType"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/bufferedAmount) *)
  val get_bufferedAmount: 'tags this -> float [@@js.get "bufferedAmount"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/bufferedAmountLowThreshold) *)
  val get_bufferedAmountLowThreshold: 'tags this -> float [@@js.get "bufferedAmountLowThreshold"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/bufferedAmountLowThreshold) *)
  val set_bufferedAmountLowThreshold: 'tags this -> float -> unit [@@js.set "bufferedAmountLowThreshold"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/id) *)
  val get_id: 'tags this -> float option [@@js.get "id"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/label) *)
  val get_label: 'tags this -> string [@@js.get "label"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/maxPacketLifeTime) *)
  val get_maxPacketLifeTime: 'tags this -> float option [@@js.get "maxPacketLifeTime"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/maxRetransmits) *)
  val get_maxRetransmits: 'tags this -> float option [@@js.get "maxRetransmits"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/negotiated) *)
  val get_negotiated: 'tags this -> bool [@@js.get "negotiated"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/bufferedamountlow_event) *)
  val get_onbufferedamountlow: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onbufferedamountlow"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/bufferedamountlow_event) *)
  val set_onbufferedamountlow: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onbufferedamountlow"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/close_event) *)
  val get_onclose: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onclose"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/close_event) *)
  val set_onclose: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onclose"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/closing_event) *)
  val get_onclosing: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onclosing"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/closing_event) *)
  val set_onclosing: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onclosing"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/error_event) *)
  val get_onerror: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/error_event) *)
  val set_onerror: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/message_event) *)
  val get_onmessage: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option [@@js.get "onmessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/message_event) *)
  val set_onmessage: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit [@@js.set "onmessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/open_event) *)
  val get_onopen: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onopen"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/open_event) *)
  val set_onopen: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onopen"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/ordered) *)
  val get_ordered: 'tags this -> bool [@@js.get "ordered"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/protocol) *)
  val get_protocol: 'tags this -> string [@@js.get "protocol"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/readyState) *)
  val get_readyState: 'tags this -> RTCDataChannelState.t [@@js.get "readyState"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/close) *)
  val close: 'tags this -> unit [@@js.call "close"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send) *)
  val send: 'tags this -> data:string -> unit [@@js.call "send"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send) *)
  val send': 'tags this -> data:Blob.t -> unit [@@js.call "send"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send) *)
  val send'': 'tags this -> data:ArrayBuffer.t -> unit [@@js.call "send"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send) *)
  val send''': 'tags this -> data:ArrayBufferView.t -> unit [@@js.call "send"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'RTCDataChannelEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'RTCDataChannelEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDataChannelEvent) *)
and[@js.scope "RTCDataChannelEvent"] RTCDataChannelEvent : sig
  type t = [`Event | `RTCDataChannelEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `RTCDataChannelEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `RTCDataChannelEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCDataChannelEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCDataChannelEvent/channel) *)
  val get_channel: 'tags this -> RTCDataChannel.t [@@js.get "channel"]
  val create: channel:RTCDataChannel.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> eventInitDict:RTCDataChannelEventInit.t -> t [@@js.create]
end
and RTCDataChannelEventInit : sig
  type t = [`EventInit | `RTCDataChannelEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `RTCDataChannelEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `RTCDataChannelEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCDataChannelEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_channel: 'tags this -> RTCDataChannel.t [@@js.get "channel"]
  val set_channel: 'tags this -> RTCDataChannel.t -> unit [@@js.set "channel"]
  val create: channel:RTCDataChannel.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  This WebRTC API interface manages the reception and decoding of data for aÂ MediaStreamTrack on anÂ RTCPeerConnection.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver)
*)
and[@js.scope "RTCRtpReceiver"] RTCRtpReceiver : sig
  type t = [`RTCRtpReceiver] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCRtpReceiver]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCRtpReceiver]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCRtpReceiver ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/track) *)
  val get_track: 'tags this -> MediaStreamTrack.t [@@js.get "track"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/transform) *)
  val get_transform: 'tags this -> RTCRtpTransform.t option [@@js.get "transform"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/transform) *)
  val set_transform: 'tags this -> RTCRtpTransform.t option -> unit [@@js.set "transform"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/transport) *)
  val get_transport: 'tags this -> RTCDtlsTransport.t option [@@js.get "transport"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/getContributingSources) *)
  val getContributingSources: 'tags this -> RTCRtpContributingSource.t list [@@js.call "getContributingSources"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/getParameters) *)
  val getParameters: 'tags this -> RTCRtpReceiveParameters.t [@@js.call "getParameters"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/getStats) *)
  val getStats: 'tags this -> RTCStatsReport.t Promise.t [@@js.call "getStats"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/getSynchronizationSources) *)
  val getSynchronizationSources: 'tags this -> RTCRtpSynchronizationSource.t list [@@js.call "getSynchronizationSources"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/getCapabilities_static) *)
  val getCapabilities: string -> RTCRtpCapabilities.t option [@@js.global "getCapabilities"]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCRtpScriptTransform) *)
and[@js.scope "RTCRtpScriptTransform"] RTCRtpScriptTransform : sig
  type t = [`RTCRtpScriptTransform] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCRtpScriptTransform]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCRtpScriptTransform]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCRtpScriptTransform ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: worker:Worker.t -> ?options:any -> ?transfer:any list -> unit -> t [@@js.create]
end

(**
  Provides the ability to control and obtain details about how a particular MediaStreamTrack is encoded and sent to a remote peer.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCRtpSender)
*)
and[@js.scope "RTCRtpSender"] RTCRtpSender : sig
  type t = [`RTCRtpSender] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCRtpSender]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCRtpSender]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCRtpSender ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/dtmf) *)
  val get_dtmf: 'tags this -> RTCDTMFSender.t option [@@js.get "dtmf"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/track) *)
  val get_track: 'tags this -> MediaStreamTrack.t option [@@js.get "track"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/transform) *)
  val get_transform: 'tags this -> RTCRtpTransform.t option [@@js.get "transform"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/transform) *)
  val set_transform: 'tags this -> RTCRtpTransform.t option -> unit [@@js.set "transform"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/transport) *)
  val get_transport: 'tags this -> RTCDtlsTransport.t option [@@js.get "transport"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/getParameters) *)
  val getParameters: 'tags this -> RTCRtpSendParameters.t [@@js.call "getParameters"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/getStats) *)
  val getStats: 'tags this -> RTCStatsReport.t Promise.t [@@js.call "getStats"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/replaceTrack) *)
  val replaceTrack: 'tags this -> withTrack:MediaStreamTrack.t option -> unit Promise.t [@@js.call "replaceTrack"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/setParameters) *)
  val setParameters: 'tags this -> parameters:RTCRtpSendParameters.t -> ?setParameterOptions:RTCSetParameterOptions.t -> unit -> unit Promise.t [@@js.call "setParameters"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/setStreams) *)
  val setStreams: 'tags this -> streams:(MediaStream.t list [@js.variadic]) -> unit [@@js.call "setStreams"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/getCapabilities_static) *)
  val getCapabilities: string -> RTCRtpCapabilities.t option [@@js.global "getCapabilities"]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver) *)
and[@js.scope "RTCRtpTransceiver"] RTCRtpTransceiver : sig
  type t = [`RTCRtpTransceiver] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCRtpTransceiver]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCRtpTransceiver]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCRtpTransceiver ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/setCodecPreferences) *)
  val setCodecPreferences: 'tags this -> codecs:RTCRtpCodecCapability.t Iterable.t -> unit [@@js.call "setCodecPreferences"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/currentDirection) *)
  val get_currentDirection: 'tags this -> RTCRtpTransceiverDirection.t option [@@js.get "currentDirection"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/direction) *)
  val get_direction: 'tags this -> RTCRtpTransceiverDirection.t [@@js.get "direction"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/direction) *)
  val set_direction: 'tags this -> RTCRtpTransceiverDirection.t -> unit [@@js.set "direction"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/mid) *)
  val get_mid: 'tags this -> string option [@@js.get "mid"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/receiver) *)
  val get_receiver: 'tags this -> RTCRtpReceiver.t [@@js.get "receiver"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/sender) *)
  val get_sender: 'tags this -> RTCRtpSender.t [@@js.get "sender"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/setCodecPreferences) *)
  val setCodecPreferences': 'tags this -> codecs:RTCRtpCodecCapability.t list -> unit [@@js.call "setCodecPreferences"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/stop) *)
  val stop: 'tags this -> unit [@@js.call "stop"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
and RTCRtpTransform : sig
  type t = RTCRtpScriptTransform.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCTrackEvent) *)
and[@js.scope "RTCTrackEvent"] RTCTrackEvent : sig
  type t = [`Event | `RTCTrackEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `RTCTrackEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `RTCTrackEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCTrackEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCTrackEvent/receiver) *)
  val get_receiver: 'tags this -> RTCRtpReceiver.t [@@js.get "receiver"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCTrackEvent/streams) *)
  val get_streams: 'tags this -> MediaStream.t list [@@js.get "streams"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCTrackEvent/track) *)
  val get_track: 'tags this -> MediaStreamTrack.t [@@js.get "track"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCTrackEvent/transceiver) *)
  val get_transceiver: 'tags this -> RTCRtpTransceiver.t [@@js.get "transceiver"]
  val create: receiver:RTCRtpReceiver.t -> streams:MediaStream.t list -> track:MediaStreamTrack.t -> transceiver:RTCRtpTransceiver.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> eventInitDict:RTCTrackEventInit.t -> t [@@js.create]
end
and RTCTrackEventInit : sig
  type t = [`EventInit | `RTCTrackEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `RTCTrackEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `RTCTrackEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCTrackEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_receiver: 'tags this -> RTCRtpReceiver.t [@@js.get "receiver"]
  val set_receiver: 'tags this -> RTCRtpReceiver.t -> unit [@@js.set "receiver"]
  val get_streams: 'tags this -> MediaStream.t list option [@@js.get "streams"]
  val set_streams: 'tags this -> MediaStream.t list -> unit [@@js.set "streams"]
  val get_track: 'tags this -> MediaStreamTrack.t [@@js.get "track"]
  val set_track: 'tags this -> MediaStreamTrack.t -> unit [@@js.set "track"]
  val get_transceiver: 'tags this -> RTCRtpTransceiver.t [@@js.get "transceiver"]
  val set_transceiver: 'tags this -> RTCRtpTransceiver.t -> unit [@@js.set "transceiver"]
  val create: receiver:RTCRtpReceiver.t -> ?streams:MediaStream.t list -> track:MediaStreamTrack.t -> transceiver:RTCRtpTransceiver.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RadioNodeList) *)
and[@js.scope "RadioNodeList"] RadioNodeList : sig
  type t = [`NodeList | `RadioNodeList] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`NodeList | `RadioNodeList]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`NodeList | `RadioNodeList]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RadioNodeList ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RadioNodeList/value) *)
  val get_value: 'tags this -> string [@@js.get "value"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RadioNodeList/value) *)
  val set_value: 'tags this -> string -> unit [@@js.set "value"]
  val create: value:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(**
  A fragment of a document that can contain nodes and parts of text nodes.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Range)
*)
and[@js.scope "Range"] Range : sig
  type t = [`AbstractRange | `Range] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AbstractRange | `Range]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AbstractRange | `Range]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Range ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the node, furthest away from the document, that is an ancestor of both range's start node and end node.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Range/commonAncestorContainer)
  *)
  val get_commonAncestorContainer: 'tags this -> Node.t [@@js.get "commonAncestorContainer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Range/cloneContents) *)
  val cloneContents: 'tags this -> DocumentFragment.t [@@js.call "cloneContents"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Range/cloneRange) *)
  val cloneRange: 'tags this -> t [@@js.call "cloneRange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Range/collapse) *)
  val collapse: 'tags this -> ?toStart:bool -> unit -> unit [@@js.call "collapse"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Range/compareBoundaryPoints) *)
  val compareBoundaryPoints: 'tags this -> how:float -> sourceRange:t -> float [@@js.call "compareBoundaryPoints"]
  
  (**
    Returns â1 if the point is before the range, 0 if the point is in the range, and 1 if the point is after the range.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Range/comparePoint)
  *)
  val comparePoint: 'tags this -> node:Node.t -> offset:float -> float [@@js.call "comparePoint"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Range/createContextualFragment) *)
  val createContextualFragment: 'tags this -> fragment:string -> DocumentFragment.t [@@js.call "createContextualFragment"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Range/deleteContents) *)
  val deleteContents: 'tags this -> unit [@@js.call "deleteContents"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Range/detach) *)
  val detach: 'tags this -> unit [@@js.call "detach"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Range/extractContents) *)
  val extractContents: 'tags this -> DocumentFragment.t [@@js.call "extractContents"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Range/getBoundingClientRect) *)
  val getBoundingClientRect: 'tags this -> DOMRect.t [@@js.call "getBoundingClientRect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Range/getClientRects) *)
  val getClientRects: 'tags this -> DOMRectList.t [@@js.call "getClientRects"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Range/insertNode) *)
  val insertNode: 'tags this -> node:Node.t -> unit [@@js.call "insertNode"]
  
  (**
    Returns whether range intersects node.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Range/intersectsNode)
  *)
  val intersectsNode: 'tags this -> node:Node.t -> bool [@@js.call "intersectsNode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Range/isPointInRange) *)
  val isPointInRange: 'tags this -> node:Node.t -> offset:float -> bool [@@js.call "isPointInRange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Range/selectNode) *)
  val selectNode: 'tags this -> node:Node.t -> unit [@@js.call "selectNode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Range/selectNodeContents) *)
  val selectNodeContents: 'tags this -> node:Node.t -> unit [@@js.call "selectNodeContents"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Range/setEnd) *)
  val setEnd: 'tags this -> node:Node.t -> offset:float -> unit [@@js.call "setEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Range/setEndAfter) *)
  val setEndAfter: 'tags this -> node:Node.t -> unit [@@js.call "setEndAfter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Range/setEndBefore) *)
  val setEndBefore: 'tags this -> node:Node.t -> unit [@@js.call "setEndBefore"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Range/setStart) *)
  val setStart: 'tags this -> node:Node.t -> offset:float -> unit [@@js.call "setStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Range/setStartAfter) *)
  val setStartAfter: 'tags this -> node:Node.t -> unit [@@js.call "setStartAfter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Range/setStartBefore) *)
  val setStartBefore: 'tags this -> node:Node.t -> unit [@@js.call "setStartBefore"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Range/surroundContents) *)
  val surroundContents: 'tags this -> newParent:Node.t -> unit [@@js.call "surroundContents"]
  
  (** Returns a string representation of an object. *)
  val toString: 'tags this -> string [@@js.call "toString"]
  val get_START_TO_START: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "START_TO_START"]
  val get_START_TO_END: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "START_TO_END"]
  val get_END_TO_END: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "END_TO_END"]
  val get_END_TO_START: 'tags this -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "END_TO_START"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  val start_to_start: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "START_TO_START"]
  val start_to_end: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "START_TO_END"]
  val end_to_end: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "END_TO_END"]
  val end_to_start: unit -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "END_TO_START"]
end
and RenderingContext : sig
  type t = (CanvasRenderingContext2D.t, ImageBitmapRenderingContext.t, WebGL2RenderingContext.t, WebGLRenderingContext.t) union4
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  This Fetch API interface represents a resource request.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request)
*)
and[@js.scope "Request"] Request : sig
  type t = [`Body | `Request] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Body | `Request]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Body | `Request]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Request ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the cache mode associated with request, which is a string indicating how the request will interact with the browser's cache when fetching.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/cache)
  *)
  val get_cache: 'tags this -> RequestCache.t [@@js.get "cache"]
  
  (**
    Returns the credentials mode associated with request, which is a string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/credentials)
  *)
  val get_credentials: 'tags this -> RequestCredentials.t [@@js.get "credentials"]
  
  (**
    Returns the kind of resource requested by request, e.g., "document" or "script".
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/destination)
  *)
  val get_destination: 'tags this -> RequestDestination.t [@@js.get "destination"]
  
  (**
    Returns a Headers object consisting of the headers associated with request. Note that headers added in the network layer by the user agent will not be accounted for in this object, e.g., the "Host" header.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/headers)
  *)
  val get_headers: 'tags this -> Headers.t [@@js.get "headers"]
  
  (**
    Returns request's subresource integrity metadata, which is a cryptographic hash of the resource being fetched. Its value consists of multiple hashes separated by whitespace. \[SRI\]
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/integrity)
  *)
  val get_integrity: 'tags this -> string [@@js.get "integrity"]
  
  (**
    Returns a boolean indicating whether or not request can outlive the global in which it was created.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/keepalive)
  *)
  val get_keepalive: 'tags this -> bool [@@js.get "keepalive"]
  
  (**
    Returns request's HTTP method, which is "GET" by default.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/method)
  *)
  val get_method: 'tags this -> string [@@js.get "method"]
  
  (**
    Returns the mode associated with request, which is a string indicating whether the request will use CORS, or will be restricted to same-origin URLs.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/mode)
  *)
  val get_mode: 'tags this -> RequestMode.t [@@js.get "mode"]
  
  (**
    Returns the redirect mode associated with request, which is a string indicating how redirects for the request will be handled during fetching. A request will follow redirects by default.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/redirect)
  *)
  val get_redirect: 'tags this -> RequestRedirect.t [@@js.get "redirect"]
  
  (**
    Returns the referrer of request. Its value can be a same-origin URL if explicitly set in init, the empty string to indicate no referrer, and "about:client" when defaulting to the global's default. This is used during fetching to determine the value of the `Referer` header of the request being made.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/referrer)
  *)
  val get_referrer: 'tags this -> string [@@js.get "referrer"]
  
  (**
    Returns the referrer policy associated with request. This is used during fetching to compute the value of the request's referrer.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/referrerPolicy)
  *)
  val get_referrerPolicy: 'tags this -> ReferrerPolicy.t [@@js.get "referrerPolicy"]
  
  (**
    Returns the signal associated with request, which is an AbortSignal object indicating whether or not request has been aborted, and its abort event handler.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/signal)
  *)
  val get_signal: 'tags this -> AbortSignal.t [@@js.get "signal"]
  
  (**
    Returns the URL of request as a string.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/url)
  *)
  val get_url: 'tags this -> string [@@js.get "url"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Request/clone) *)
  val clone: 'tags this -> t [@@js.call "clone"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: input:([`U1 of RequestInfo.t | `U2 of URL.t] [@js.union]) -> ?init:RequestInit.t -> unit -> t [@@js.create]
end
and RequestInfo : sig
  type t = ([`String of string | `Other of Request.t] [@js.union on_field "dummy"]) Primitive.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
and RequestInit : sig
  type t = [`RequestInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RequestInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RequestInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RequestInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** A BodyInit object or null to set request's body. *)
  val get_body: 'tags this -> BodyInit.t option [@@js.get "body"]
  
  (** A BodyInit object or null to set request's body. *)
  val set_body: 'tags this -> BodyInit.t option -> unit [@@js.set "body"]
  
  (** A string indicating how the request will interact with the browser's cache to set request's cache. *)
  val get_cache: 'tags this -> RequestCache.t option [@@js.get "cache"]
  
  (** A string indicating how the request will interact with the browser's cache to set request's cache. *)
  val set_cache: 'tags this -> RequestCache.t -> unit [@@js.set "cache"]
  
  (** A string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL. Sets request's credentials. *)
  val get_credentials: 'tags this -> RequestCredentials.t option [@@js.get "credentials"]
  
  (** A string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL. Sets request's credentials. *)
  val set_credentials: 'tags this -> RequestCredentials.t -> unit [@@js.set "credentials"]
  
  (** A Headers object, an object literal, or an array of two-item arrays to set request's headers. *)
  val get_headers: 'tags this -> HeadersInit.t option [@@js.get "headers"]
  
  (** A Headers object, an object literal, or an array of two-item arrays to set request's headers. *)
  val set_headers: 'tags this -> HeadersInit.t -> unit [@@js.set "headers"]
  
  (** A cryptographic hash of the resource to be fetched by request. Sets request's integrity. *)
  val get_integrity: 'tags this -> string option [@@js.get "integrity"]
  
  (** A cryptographic hash of the resource to be fetched by request. Sets request's integrity. *)
  val set_integrity: 'tags this -> string -> unit [@@js.set "integrity"]
  
  (** A boolean to set request's keepalive. *)
  val get_keepalive: 'tags this -> bool option [@@js.get "keepalive"]
  
  (** A boolean to set request's keepalive. *)
  val set_keepalive: 'tags this -> bool -> unit [@@js.set "keepalive"]
  
  (** A string to set request's method. *)
  val get_method: 'tags this -> string option [@@js.get "method"]
  
  (** A string to set request's method. *)
  val set_method: 'tags this -> string -> unit [@@js.set "method"]
  
  (** A string to indicate whether the request will use CORS, or will be restricted to same-origin URLs. Sets request's mode. *)
  val get_mode: 'tags this -> RequestMode.t option [@@js.get "mode"]
  
  (** A string to indicate whether the request will use CORS, or will be restricted to same-origin URLs. Sets request's mode. *)
  val set_mode: 'tags this -> RequestMode.t -> unit [@@js.set "mode"]
  val get_priority: 'tags this -> RequestPriority.t option [@@js.get "priority"]
  val set_priority: 'tags this -> RequestPriority.t -> unit [@@js.set "priority"]
  
  (** A string indicating whether request follows redirects, results in an error upon encountering a redirect, or returns the redirect (in an opaque fashion). Sets request's redirect. *)
  val get_redirect: 'tags this -> RequestRedirect.t option [@@js.get "redirect"]
  
  (** A string indicating whether request follows redirects, results in an error upon encountering a redirect, or returns the redirect (in an opaque fashion). Sets request's redirect. *)
  val set_redirect: 'tags this -> RequestRedirect.t -> unit [@@js.set "redirect"]
  
  (** A string whose value is a same-origin URL, "about:client", or the empty string, to set request's referrer. *)
  val get_referrer: 'tags this -> string option [@@js.get "referrer"]
  
  (** A string whose value is a same-origin URL, "about:client", or the empty string, to set request's referrer. *)
  val set_referrer: 'tags this -> string -> unit [@@js.set "referrer"]
  
  (** A referrer policy to set request's referrerPolicy. *)
  val get_referrerPolicy: 'tags this -> ReferrerPolicy.t option [@@js.get "referrerPolicy"]
  
  (** A referrer policy to set request's referrerPolicy. *)
  val set_referrerPolicy: 'tags this -> ReferrerPolicy.t -> unit [@@js.set "referrerPolicy"]
  
  (** An AbortSignal to set request's signal. *)
  val get_signal: 'tags this -> AbortSignal.t option [@@js.get "signal"]
  
  (** An AbortSignal to set request's signal. *)
  val set_signal: 'tags this -> AbortSignal.t option -> unit [@@js.set "signal"]
  
  (** Can only be null. Used to disassociate request from any Window. *)
  val get_window: 'tags this -> undefined option [@@js.get "window"]
  
  (** Can only be null. Used to disassociate request from any Window. *)
  val set_window: 'tags this -> null -> unit [@@js.set "window"]
  val create: ?body:BodyInit.t -> ?cache:RequestCache.t -> ?credentials:RequestCredentials.t -> ?headers:HeadersInit.t -> ?integrity:string -> ?keepalive:bool -> ?method_:(string[@js "method"]) -> ?mode:RequestMode.t -> ?priority:RequestPriority.t -> ?redirect:RequestRedirect.t -> ?referrer:string -> ?referrerPolicy:ReferrerPolicy.t -> ?signal:AbortSignal.t -> ?window:never -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  This Fetch API interface represents the response to a request.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Response)
*)
and[@js.scope "Response"] Response : sig
  type t = [`Body | `Response] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Body | `Response]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Body | `Response]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Response ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Response/headers) *)
  val get_headers: 'tags this -> Headers.t [@@js.get "headers"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Response/ok) *)
  val get_ok: 'tags this -> bool [@@js.get "ok"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Response/redirected) *)
  val get_redirected: 'tags this -> bool [@@js.get "redirected"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Response/status) *)
  val get_status: 'tags this -> float [@@js.get "status"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Response/statusText) *)
  val get_statusText: 'tags this -> string [@@js.get "statusText"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Response/type) *)
  val get_type: 'tags this -> ResponseType.t [@@js.get "type"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Response/url) *)
  val get_url: 'tags this -> string [@@js.get "url"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Response/clone) *)
  val clone: 'tags this -> t [@@js.call "clone"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: ?body:BodyInit.t option -> ?init:ResponseInit.t -> unit -> t [@@js.create]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Response/error_static) *)
  val error: unit -> t [@@js.global "error"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Response/json_static) *)
  val json: data:any -> ?init:ResponseInit.t -> unit -> t [@@js.global "json"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Response/redirect_static) *)
  val redirect: url:([`U1 of string | `U2 of URL.t] [@js.union]) -> ?status:float -> unit -> t [@@js.global "redirect"]
end

(**
  An interface for the <circle> element. The circle element is defined by the cx and cy attributes that denote the coordinates of the centre of the circle.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGCircleElement)
*)
and[@js.scope "SVGCircleElement"] SVGCircleElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGCircleElement | `SVGElement | `SVGGeometryElement | `SVGGraphicsElement | `SVGTests | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGCircleElement | `SVGElement | `SVGGeometryElement | `SVGGraphicsElement | `SVGTests | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGCircleElement | `SVGElement | `SVGGeometryElement | `SVGGraphicsElement | `SVGTests | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGCircleElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGCircleElement/cx) *)
  val get_cx: 'tags this -> SVGAnimatedLength.t [@@js.get "cx"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGCircleElement/cy) *)
  val get_cy: 'tags this -> SVGAnimatedLength.t [@@js.get "cy"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGCircleElement/r) *)
  val get_r: 'tags this -> SVGAnimatedLength.t [@@js.get "r"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  All of the SVG DOM interfaces that correspond directly to elements in the SVG language derive from the SVGElement interface.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGElement)
*)
and[@js.scope "SVGElement"] SVGElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the value of element's class content attribute. Can be set to change it.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/className)
    @deprecated 
  *)
  val get_className: 'tags this -> any [@@js.get "className"]
  val get_ownerSVGElement: 'tags this -> SVGSVGElement.t option [@@js.get "ownerSVGElement"]
  val get_viewportElement: 'tags this -> t option [@@js.get "viewportElement"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides access to the properties of <ellipse> elements.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGEllipseElement)
*)
and[@js.scope "SVGEllipseElement"] SVGEllipseElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGEllipseElement | `SVGGeometryElement | `SVGGraphicsElement | `SVGTests | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGEllipseElement | `SVGGeometryElement | `SVGGraphicsElement | `SVGTests | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGEllipseElement | `SVGGeometryElement | `SVGGraphicsElement | `SVGTests | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGEllipseElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_cx: 'tags this -> SVGAnimatedLength.t [@@js.get "cx"]
  val get_cy: 'tags this -> SVGAnimatedLength.t [@@js.get "cy"]
  val get_rx: 'tags this -> SVGAnimatedLength.t [@@js.get "rx"]
  val get_ry: 'tags this -> SVGAnimatedLength.t [@@js.get "ry"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGGeometryElement) *)
and[@js.scope "SVGGeometryElement"] SVGGeometryElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGeometryElement | `SVGGraphicsElement | `SVGTests | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGeometryElement | `SVGGraphicsElement | `SVGTests | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGeometryElement | `SVGGraphicsElement | `SVGTests | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGGeometryElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGGeometryElement/pathLength) *)
  val get_pathLength: 'tags this -> SVGAnimatedNumber.t [@@js.get "pathLength"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGGeometryElement/getPointAtLength) *)
  val getPointAtLength: 'tags this -> distance:float -> DOMPoint.t [@@js.call "getPointAtLength"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGGeometryElement/getTotalLength) *)
  val getTotalLength: 'tags this -> float [@@js.call "getTotalLength"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGGeometryElement/isPointInFill) *)
  val isPointInFill: 'tags this -> ?point:DOMPointInit.t -> unit -> bool [@@js.call "isPointInFill"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGGeometryElement/isPointInStroke) *)
  val isPointInStroke: 'tags this -> ?point:DOMPointInit.t -> unit -> bool [@@js.call "isPointInStroke"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  SVG elements whose primary purpose is to directly render graphics into a group.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGGraphicsElement)
*)
and[@js.scope "SVGGraphicsElement"] SVGGraphicsElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGraphicsElement | `SVGTests | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGraphicsElement | `SVGTests | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGraphicsElement | `SVGTests | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGGraphicsElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_transform: 'tags this -> SVGAnimatedTransformList.t [@@js.get "transform"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGGraphicsElement/getBBox) *)
  val getBBox: 'tags this -> ?options:SVGBoundingBoxOptions.t -> unit -> DOMRect.t [@@js.call "getBBox"]
  val getCTM: 'tags this -> DOMMatrix.t option [@@js.call "getCTM"]
  val getScreenCTM: 'tags this -> DOMMatrix.t option [@@js.call "getScreenCTM"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Corresponds to the <image> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGImageElement)
*)
and[@js.scope "SVGImageElement"] SVGImageElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGraphicsElement | `SVGImageElement | `SVGTests | `SVGURIReference | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGraphicsElement | `SVGImageElement | `SVGTests | `SVGURIReference | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGraphicsElement | `SVGImageElement | `SVGTests | `SVGURIReference | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGImageElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGImageElement/crossorigin) *)
  val get_crossOrigin: 'tags this -> string option [@@js.get "crossOrigin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGImageElement/crossorigin) *)
  val set_crossOrigin: 'tags this -> string option -> unit [@@js.set "crossOrigin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGImageElement/height) *)
  val get_height: 'tags this -> SVGAnimatedLength.t [@@js.get "height"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGImageElement/preserveAspectRatio) *)
  val get_preserveAspectRatio: 'tags this -> SVGAnimatedPreserveAspectRatio.t [@@js.get "preserveAspectRatio"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGImageElement/width) *)
  val get_width: 'tags this -> SVGAnimatedLength.t [@@js.get "width"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGImageElement/x) *)
  val get_x: 'tags this -> SVGAnimatedLength.t [@@js.get "x"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGImageElement/y) *)
  val get_y: 'tags this -> SVGAnimatedLength.t [@@js.get "y"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides access to the properties of <line> elements, as well as methods to manipulate them.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGLineElement)
*)
and[@js.scope "SVGLineElement"] SVGLineElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGeometryElement | `SVGGraphicsElement | `SVGLineElement | `SVGTests | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGeometryElement | `SVGGraphicsElement | `SVGLineElement | `SVGTests | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGeometryElement | `SVGGraphicsElement | `SVGLineElement | `SVGTests | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGLineElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_x1: 'tags this -> SVGAnimatedLength.t [@@js.get "x1"]
  val get_x2: 'tags this -> SVGAnimatedLength.t [@@js.get "x2"]
  val get_y1: 'tags this -> SVGAnimatedLength.t [@@js.get "y1"]
  val get_y2: 'tags this -> SVGAnimatedLength.t [@@js.get "y2"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Corresponds to the <path> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGPathElement)
*)
and[@js.scope "SVGPathElement"] SVGPathElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGeometryElement | `SVGGraphicsElement | `SVGPathElement | `SVGTests | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGeometryElement | `SVGGraphicsElement | `SVGPathElement | `SVGTests | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGeometryElement | `SVGGraphicsElement | `SVGPathElement | `SVGTests | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGPathElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides access to the properties of <polygon> elements, as well as methods to manipulate them.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGPolygonElement)
*)
and[@js.scope "SVGPolygonElement"] SVGPolygonElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGAnimatedPoints | `SVGElement | `SVGGeometryElement | `SVGGraphicsElement | `SVGPolygonElement | `SVGTests | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGAnimatedPoints | `SVGElement | `SVGGeometryElement | `SVGGraphicsElement | `SVGPolygonElement | `SVGTests | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGAnimatedPoints | `SVGElement | `SVGGeometryElement | `SVGGraphicsElement | `SVGPolygonElement | `SVGTests | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGPolygonElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides access to the properties of <polyline> elements, as well as methods to manipulate them.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGPolylineElement)
*)
and[@js.scope "SVGPolylineElement"] SVGPolylineElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGAnimatedPoints | `SVGElement | `SVGGeometryElement | `SVGGraphicsElement | `SVGPolylineElement | `SVGTests | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGAnimatedPoints | `SVGElement | `SVGGeometryElement | `SVGGraphicsElement | `SVGPolylineElement | `SVGTests | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGAnimatedPoints | `SVGElement | `SVGGeometryElement | `SVGGraphicsElement | `SVGPolylineElement | `SVGTests | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGPolylineElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides access to the properties of <rect> elements, as well as methods to manipulate them.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGRectElement)
*)
and[@js.scope "SVGRectElement"] SVGRectElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGeometryElement | `SVGGraphicsElement | `SVGRectElement | `SVGTests | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGeometryElement | `SVGGraphicsElement | `SVGRectElement | `SVGTests | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGeometryElement | `SVGGraphicsElement | `SVGRectElement | `SVGTests | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGRectElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_height: 'tags this -> SVGAnimatedLength.t [@@js.get "height"]
  val get_rx: 'tags this -> SVGAnimatedLength.t [@@js.get "rx"]
  val get_ry: 'tags this -> SVGAnimatedLength.t [@@js.get "ry"]
  val get_width: 'tags this -> SVGAnimatedLength.t [@@js.get "width"]
  val get_x: 'tags this -> SVGAnimatedLength.t [@@js.get "x"]
  val get_y: 'tags this -> SVGAnimatedLength.t [@@js.get "y"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides access to the properties of <svg> elements, as well as methods to manipulate them. This interface contains also various miscellaneous commonly-used utility methods, such as matrix operations and the ability to control the time of redraw on visual rendering devices.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGSVGElement)
*)
and[@js.scope "SVGSVGElement"] SVGSVGElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFitToViewBox | `SVGGraphicsElement | `SVGSVGElement | `SVGTests | `Slottable | `WindowEventHandlers] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFitToViewBox | `SVGGraphicsElement | `SVGSVGElement | `SVGTests | `Slottable | `WindowEventHandlers]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFitToViewBox | `SVGGraphicsElement | `SVGSVGElement | `SVGTests | `Slottable | `WindowEventHandlers]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGSVGElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_currentScale: 'tags this -> float [@@js.get "currentScale"]
  val set_currentScale: 'tags this -> float -> unit [@@js.set "currentScale"]
  val get_currentTranslate: 'tags this -> DOMPointReadOnly.t [@@js.get "currentTranslate"]
  val get_height: 'tags this -> SVGAnimatedLength.t [@@js.get "height"]
  val get_width: 'tags this -> SVGAnimatedLength.t [@@js.get "width"]
  val get_x: 'tags this -> SVGAnimatedLength.t [@@js.get "x"]
  val get_y: 'tags this -> SVGAnimatedLength.t [@@js.get "y"]
  val animationsPaused: 'tags this -> bool [@@js.call "animationsPaused"]
  val checkEnclosure: 'tags this -> element:SVGElement.t -> rect:DOMRectReadOnly.t -> bool [@@js.call "checkEnclosure"]
  val checkIntersection: 'tags this -> element:SVGElement.t -> rect:DOMRectReadOnly.t -> bool [@@js.call "checkIntersection"]
  val createSVGAngle: 'tags this -> SVGAngle.t [@@js.call "createSVGAngle"]
  val createSVGLength: 'tags this -> SVGLength.t [@@js.call "createSVGLength"]
  val createSVGMatrix: 'tags this -> DOMMatrix.t [@@js.call "createSVGMatrix"]
  val createSVGNumber: 'tags this -> SVGNumber.t [@@js.call "createSVGNumber"]
  val createSVGPoint: 'tags this -> DOMPoint.t [@@js.call "createSVGPoint"]
  val createSVGRect: 'tags this -> DOMRect.t [@@js.call "createSVGRect"]
  val createSVGTransform: 'tags this -> SVGTransform.t [@@js.call "createSVGTransform"]
  val createSVGTransformFromMatrix: 'tags this -> ?matrix:DOMMatrix2DInit.t -> unit -> SVGTransform.t [@@js.call "createSVGTransformFromMatrix"]
  val deselectAll: 'tags this -> unit [@@js.call "deselectAll"]
  
  (** @deprecated  *)
  val forceRedraw: 'tags this -> unit [@@js.call "forceRedraw"]
  val getCurrentTime: 'tags this -> float [@@js.call "getCurrentTime"]
  val getElementById: 'tags this -> elementId:string -> Element.t [@@js.call "getElementById"]
  val getEnclosureList: 'tags this -> rect:DOMRectReadOnly.t -> referenceElement:SVGElement.t option -> (SVGCircleElement.t, SVGEllipseElement.t, SVGImageElement.t, SVGLineElement.t, SVGPathElement.t, SVGPolygonElement.t, SVGPolylineElement.t, (SVGRectElement.t, SVGTextElement.t, SVGUseElement.t) union3) union8 NodeListOf.t [@@js.call "getEnclosureList"]
  val getIntersectionList: 'tags this -> rect:DOMRectReadOnly.t -> referenceElement:SVGElement.t option -> (SVGCircleElement.t, SVGEllipseElement.t, SVGImageElement.t, SVGLineElement.t, SVGPathElement.t, SVGPolygonElement.t, SVGPolylineElement.t, (SVGRectElement.t, SVGTextElement.t, SVGUseElement.t) union3) union8 NodeListOf.t [@@js.call "getIntersectionList"]
  val pauseAnimations: 'tags this -> unit [@@js.call "pauseAnimations"]
  val setCurrentTime: 'tags this -> seconds:float -> unit [@@js.call "setCurrentTime"]
  
  (** @deprecated  *)
  val suspendRedraw: 'tags this -> maxWaitMilliseconds:float -> float [@@js.call "suspendRedraw"]
  val unpauseAnimations: 'tags this -> unit [@@js.call "unpauseAnimations"]
  
  (** @deprecated  *)
  val unsuspendRedraw: 'tags this -> suspendHandleID:float -> unit [@@js.call "unsuspendRedraw"]
  
  (** @deprecated  *)
  val unsuspendRedrawAll: 'tags this -> unit [@@js.call "unsuspendRedrawAll"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGSVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGSVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Corresponds to the SVG <script> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGScriptElement)
*)
and[@js.scope "SVGScriptElement"] SVGScriptElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGScriptElement | `SVGURIReference | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGScriptElement | `SVGURIReference | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGScriptElement | `SVGURIReference | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGScriptElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_type: 'tags this -> string [@@js.get "type"]
  val set_type: 'tags this -> string -> unit [@@js.set "type"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Implemented by elements that support rendering child text content. It is inherited by various text-related interfaces, such as SVGTextElement, SVGTSpanElement, SVGTRefElement, SVGAltGlyphElement and SVGTextPathElement.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGTextContentElement)
*)
and[@js.scope "SVGTextContentElement"] SVGTextContentElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGraphicsElement | `SVGTests | `SVGTextContentElement | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGraphicsElement | `SVGTests | `SVGTextContentElement | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGraphicsElement | `SVGTests | `SVGTextContentElement | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGTextContentElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_lengthAdjust: 'tags this -> SVGAnimatedEnumeration.t [@@js.get "lengthAdjust"]
  val get_textLength: 'tags this -> SVGAnimatedLength.t [@@js.get "textLength"]
  val getCharNumAtPosition: 'tags this -> ?point:DOMPointInit.t -> unit -> float [@@js.call "getCharNumAtPosition"]
  val getComputedTextLength: 'tags this -> float [@@js.call "getComputedTextLength"]
  val getEndPositionOfChar: 'tags this -> charnum:float -> DOMPoint.t [@@js.call "getEndPositionOfChar"]
  val getExtentOfChar: 'tags this -> charnum:float -> DOMRect.t [@@js.call "getExtentOfChar"]
  val getNumberOfChars: 'tags this -> float [@@js.call "getNumberOfChars"]
  val getRotationOfChar: 'tags this -> charnum:float -> float [@@js.call "getRotationOfChar"]
  val getStartPositionOfChar: 'tags this -> charnum:float -> DOMPoint.t [@@js.call "getStartPositionOfChar"]
  val getSubStringLength: 'tags this -> charnum:float -> nchars:float -> float [@@js.call "getSubStringLength"]
  
  (** @deprecated  *)
  val selectSubString: 'tags this -> charnum:float -> nchars:float -> unit [@@js.call "selectSubString"]
  val get_LENGTHADJUST_UNKNOWN: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "LENGTHADJUST_UNKNOWN"]
  val get_LENGTHADJUST_SPACING: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "LENGTHADJUST_SPACING"]
  val get_LENGTHADJUST_SPACINGANDGLYPHS: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "LENGTHADJUST_SPACINGANDGLYPHS"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  val lengthadjust_unknown: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "LENGTHADJUST_UNKNOWN"]
  val lengthadjust_spacing: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "LENGTHADJUST_SPACING"]
  val lengthadjust_spacingandglyphs: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "LENGTHADJUST_SPACINGANDGLYPHS"]
end

(**
  Corresponds to the <text> elements.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGTextElement)
*)
and[@js.scope "SVGTextElement"] SVGTextElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGraphicsElement | `SVGTests | `SVGTextContentElement | `SVGTextElement | `SVGTextPositioningElement | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGraphicsElement | `SVGTests | `SVGTextContentElement | `SVGTextElement | `SVGTextPositioningElement | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGraphicsElement | `SVGTests | `SVGTextContentElement | `SVGTextElement | `SVGTextPositioningElement | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGTextElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Implemented by elements that support attributes that position individual text glyphs. It is inherited by SVGTextElement, SVGTSpanElement, SVGTRefElement and SVGAltGlyphElement.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGTextPositioningElement)
*)
and[@js.scope "SVGTextPositioningElement"] SVGTextPositioningElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGraphicsElement | `SVGTests | `SVGTextContentElement | `SVGTextPositioningElement | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGraphicsElement | `SVGTests | `SVGTextContentElement | `SVGTextPositioningElement | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGraphicsElement | `SVGTests | `SVGTextContentElement | `SVGTextPositioningElement | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGTextPositioningElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_dx: 'tags this -> SVGAnimatedLengthList.t [@@js.get "dx"]
  val get_dy: 'tags this -> SVGAnimatedLengthList.t [@@js.get "dy"]
  val get_rotate: 'tags this -> SVGAnimatedNumberList.t [@@js.get "rotate"]
  val get_x: 'tags this -> SVGAnimatedLengthList.t [@@js.get "x"]
  val get_y: 'tags this -> SVGAnimatedLengthList.t [@@js.get "y"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Corresponds to the <use> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGUseElement)
*)
and[@js.scope "SVGUseElement"] SVGUseElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGraphicsElement | `SVGTests | `SVGURIReference | `SVGUseElement | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGraphicsElement | `SVGTests | `SVGURIReference | `SVGUseElement | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGraphicsElement | `SVGTests | `SVGURIReference | `SVGUseElement | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGUseElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_height: 'tags this -> SVGAnimatedLength.t [@@js.get "height"]
  val get_width: 'tags this -> SVGAnimatedLength.t [@@js.get "width"]
  val get_x: 'tags this -> SVGAnimatedLength.t [@@js.get "x"]
  val get_y: 'tags this -> SVGAnimatedLength.t [@@js.get "y"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  A Selection objectÂ represents the range of text selected by the user or the current position of the caret. To obtain a Selection object for examination orÂ modification, call Window.getSelection().
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Selection)
*)
and[@js.scope "Selection"] Selection : sig
  type t = [`Selection] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Selection]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Selection]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Selection ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Selection/anchorNode) *)
  val get_anchorNode: 'tags this -> Node.t option [@@js.get "anchorNode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Selection/anchorOffset) *)
  val get_anchorOffset: 'tags this -> float [@@js.get "anchorOffset"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Selection/focusNode) *)
  val get_focusNode: 'tags this -> Node.t option [@@js.get "focusNode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Selection/focusOffset) *)
  val get_focusOffset: 'tags this -> float [@@js.get "focusOffset"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Selection/isCollapsed) *)
  val get_isCollapsed: 'tags this -> bool [@@js.get "isCollapsed"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Selection/rangeCount) *)
  val get_rangeCount: 'tags this -> float [@@js.get "rangeCount"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Selection/type) *)
  val get_type: 'tags this -> string [@@js.get "type"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Selection/addRange) *)
  val addRange: 'tags this -> range:Range.t -> unit [@@js.call "addRange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Selection/collapse) *)
  val collapse: 'tags this -> node:Node.t option -> ?offset:float -> unit -> unit [@@js.call "collapse"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Selection/collapseToEnd) *)
  val collapseToEnd: 'tags this -> unit [@@js.call "collapseToEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Selection/collapseToStart) *)
  val collapseToStart: 'tags this -> unit [@@js.call "collapseToStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Selection/containsNode) *)
  val containsNode: 'tags this -> node:Node.t -> ?allowPartialContainment:bool -> unit -> bool [@@js.call "containsNode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Selection/deleteFromDocument) *)
  val deleteFromDocument: 'tags this -> unit [@@js.call "deleteFromDocument"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Selection/removeAllRanges) *)
  val empty: 'tags this -> unit [@@js.call "empty"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Selection/extend) *)
  val extend: 'tags this -> node:Node.t -> ?offset:float -> unit -> unit [@@js.call "extend"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Selection/getRangeAt) *)
  val getRangeAt: 'tags this -> index:float -> Range.t [@@js.call "getRangeAt"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Selection/modify) *)
  val modify: 'tags this -> ?alter:string -> ?direction:string -> ?granularity:string -> unit -> unit [@@js.call "modify"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Selection/removeAllRanges) *)
  val removeAllRanges: 'tags this -> unit [@@js.call "removeAllRanges"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Selection/removeRange) *)
  val removeRange: 'tags this -> range:Range.t -> unit [@@js.call "removeRange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Selection/selectAllChildren) *)
  val selectAllChildren: 'tags this -> node:Node.t -> unit [@@js.call "selectAllChildren"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Selection/setBaseAndExtent) *)
  val setBaseAndExtent: 'tags this -> anchorNode:Node.t -> anchorOffset:float -> focusNode:Node.t -> focusOffset:float -> unit [@@js.call "setBaseAndExtent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Selection/collapse) *)
  val setPosition: 'tags this -> node:Node.t option -> ?offset:float -> unit -> unit [@@js.call "setPosition"]
  val toString: 'tags this -> string [@@js.call "toString"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  This ServiceWorker API interface provides a reference to a service worker. Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique ServiceWorker object.
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorker)
*)
and[@js.scope "ServiceWorker"] ServiceWorker : sig
  type t = [`AbstractWorker | `EventTarget | `ServiceWorker] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AbstractWorker | `EventTarget | `ServiceWorker]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AbstractWorker | `EventTarget | `ServiceWorker]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ServiceWorker ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorker/statechange_event) *)
  val get_onstatechange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onstatechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorker/statechange_event) *)
  val set_onstatechange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onstatechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorker/scriptURL) *)
  val get_scriptURL: 'tags this -> string [@@js.get "scriptURL"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorker/state) *)
  val get_state: 'tags this -> ServiceWorkerState.t [@@js.get "state"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorker/postMessage) *)
  val postMessage: 'tags this -> message:any -> transfer:Transferable.t list -> unit [@@js.call "postMessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorker/postMessage) *)
  val postMessage': 'tags this -> message:any -> ?options:StructuredSerializeOptions.t -> unit -> unit [@@js.call "postMessage"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'ServiceWorkerEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'ServiceWorkerEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  TheÂ ServiceWorkerContainerÂ interface of theÂ ServiceWorker APIÂ provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer)
*)
and[@js.scope "ServiceWorkerContainer"] ServiceWorkerContainer : sig
  type t = [`EventTarget | `ServiceWorkerContainer] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `ServiceWorkerContainer]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `ServiceWorkerContainer]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ServiceWorkerContainer ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/controller) *)
  val get_controller: 'tags this -> ServiceWorker.t option [@@js.get "controller"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/controllerchange_event) *)
  val get_oncontrollerchange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "oncontrollerchange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/controllerchange_event) *)
  val set_oncontrollerchange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "oncontrollerchange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/message_event) *)
  val get_onmessage: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option [@@js.get "onmessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/message_event) *)
  val set_onmessage: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit [@@js.set "onmessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/messageerror_event) *)
  val get_onmessageerror: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option [@@js.get "onmessageerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/messageerror_event) *)
  val set_onmessageerror: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit [@@js.set "onmessageerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/ready) *)
  val get_ready: 'tags this -> ServiceWorkerRegistration.t Promise.t [@@js.get "ready"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/getRegistration) *)
  val getRegistration: 'tags this -> ?clientURL:([`U1 of string | `U2 of URL.t] [@js.union]) -> unit -> ServiceWorkerRegistration.t option Promise.t [@@js.call "getRegistration"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/getRegistrations) *)
  val getRegistrations: 'tags this -> ServiceWorkerRegistration.t list Promise.t [@@js.call "getRegistrations"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/register) *)
  val register: 'tags this -> scriptURL:([`U1 of string | `U2 of URL.t] [@js.union]) -> ?options:RegistrationOptions.t -> unit -> ServiceWorkerRegistration.t Promise.t [@@js.call "register"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/startMessages) *)
  val startMessages: 'tags this -> unit [@@js.call "startMessages"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'ServiceWorkerContainerEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'ServiceWorkerContainerEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  This ServiceWorker API interface represents the service worker registration. You register a service worker to control one or more pages that share the same origin.
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration)
*)
and[@js.scope "ServiceWorkerRegistration"] ServiceWorkerRegistration : sig
  type t = [`EventTarget | `ServiceWorkerRegistration] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `ServiceWorkerRegistration]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `ServiceWorkerRegistration]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ServiceWorkerRegistration ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/active) *)
  val get_active: 'tags this -> ServiceWorker.t option [@@js.get "active"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/installing) *)
  val get_installing: 'tags this -> ServiceWorker.t option [@@js.get "installing"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/navigationPreload) *)
  val get_navigationPreload: 'tags this -> NavigationPreloadManager.t [@@js.get "navigationPreload"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/updatefound_event) *)
  val get_onupdatefound: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onupdatefound"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/updatefound_event) *)
  val set_onupdatefound: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onupdatefound"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/pushManager) *)
  val get_pushManager: 'tags this -> PushManager.t [@@js.get "pushManager"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/scope) *)
  val get_scope: 'tags this -> string [@@js.get "scope"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/updateViaCache) *)
  val get_updateViaCache: 'tags this -> ServiceWorkerUpdateViaCache.t [@@js.get "updateViaCache"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/waiting) *)
  val get_waiting: 'tags this -> ServiceWorker.t option [@@js.get "waiting"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/getNotifications) *)
  val getNotifications: 'tags this -> ?filter:GetNotificationOptions.t -> unit -> Notification.t list Promise.t [@@js.call "getNotifications"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/showNotification) *)
  val showNotification: 'tags this -> title:string -> ?options:NotificationOptions.t -> unit -> unit Promise.t [@@js.call "showNotification"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/unregister) *)
  val unregister: 'tags this -> bool Promise.t [@@js.call "unregister"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/update) *)
  val update: 'tags this -> unit Promise.t [@@js.call "update"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'ServiceWorkerRegistrationEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'ServiceWorkerRegistrationEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ShadowRoot) *)
and[@js.scope "ShadowRoot"] ShadowRoot : sig
  type t = [`DocumentFragment | `DocumentOrShadowRoot | `EventTarget | `InnerHTML | `Node | `NonElementParentNode | `ParentNode | `ShadowRoot] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DocumentFragment | `DocumentOrShadowRoot | `EventTarget | `InnerHTML | `Node | `NonElementParentNode | `ParentNode | `ShadowRoot]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DocumentFragment | `DocumentOrShadowRoot | `EventTarget | `InnerHTML | `Node | `NonElementParentNode | `ParentNode | `ShadowRoot]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ShadowRoot ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ShadowRoot/delegatesFocus) *)
  val get_delegatesFocus: 'tags this -> bool [@@js.get "delegatesFocus"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ShadowRoot/host) *)
  val get_host: 'tags this -> Element.t [@@js.get "host"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ShadowRoot/mode) *)
  val get_mode: 'tags this -> ShadowRootMode.t [@@js.get "mode"]
  val get_onslotchange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onslotchange"]
  val set_onslotchange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onslotchange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ShadowRoot/slotAssignment) *)
  val get_slotAssignment: 'tags this -> SlotAssignmentMode.t [@@js.get "slotAssignment"]
  
  (** Throws a "NotSupportedError" DOMException if context object is a shadow root. *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'ShadowRootEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'ShadowRootEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
and Slottable : sig
  type t = [`Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Slottable ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/assignedSlot) *)
  val get_assignedSlot: 'tags this -> HTMLSlotElement.t option [@@js.get "assignedSlot"]
  val create: ?assignedSlot:HTMLSlotElement.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StaticRange) *)
and[@js.scope "StaticRange"] StaticRange : sig
  type t = [`AbstractRange | `StaticRange] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AbstractRange | `StaticRange]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AbstractRange | `StaticRange]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `StaticRange ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: StaticRangeInit.t -> t [@@js.create]
end
and StaticRangeInit : sig
  type t = [`StaticRangeInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`StaticRangeInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`StaticRangeInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `StaticRangeInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_endContainer: 'tags this -> Node.t [@@js.get "endContainer"]
  val set_endContainer: 'tags this -> Node.t -> unit [@@js.set "endContainer"]
  val get_endOffset: 'tags this -> float [@@js.get "endOffset"]
  val set_endOffset: 'tags this -> float -> unit [@@js.set "endOffset"]
  val get_startContainer: 'tags this -> Node.t [@@js.get "startContainer"]
  val set_startContainer: 'tags this -> Node.t -> unit [@@js.set "startContainer"]
  val get_startOffset: 'tags this -> float [@@js.get "startOffset"]
  val set_startOffset: 'tags this -> float -> unit [@@js.set "startOffset"]
  val create: endContainer:Node.t -> endOffset:float -> startContainer:Node.t -> startOffset:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
and StructuredSerializeOptions : sig
  type t = [`StructuredSerializeOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`StructuredSerializeOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`StructuredSerializeOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `StructuredSerializeOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_transfer: 'tags this -> Transferable.t list option [@@js.get "transfer"]
  val set_transfer: 'tags this -> Transferable.t list -> unit [@@js.set "transfer"]
  val create: ?transfer:Transferable.t list -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  A single style sheet. CSS style sheets will further implement the more specialized CSSStyleSheet interface.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StyleSheet)
*)
and[@js.scope "StyleSheet"] StyleSheet : sig
  type t = [`StyleSheet] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`StyleSheet]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`StyleSheet]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `StyleSheet ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StyleSheet/disabled) *)
  val get_disabled: 'tags this -> bool [@@js.get "disabled"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StyleSheet/disabled) *)
  val set_disabled: 'tags this -> bool -> unit [@@js.set "disabled"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StyleSheet/href) *)
  val get_href: 'tags this -> string option [@@js.get "href"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StyleSheet/media) *)
  val get_media: 'tags this -> MediaList.t [@@js.get "media"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StyleSheet/ownerNode) *)
  val get_ownerNode: 'tags this -> (Element.t, ProcessingInstruction.t) union2 option [@@js.get "ownerNode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StyleSheet/parentStyleSheet) *)
  val get_parentStyleSheet: 'tags this -> CSSStyleSheet.t option [@@js.get "parentStyleSheet"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StyleSheet/title) *)
  val get_title: 'tags this -> string option [@@js.get "title"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StyleSheet/type) *)
  val get_type: 'tags this -> string [@@js.get "type"]
  val create: disabled:bool -> ?href:string -> media:MediaList.t -> ?ownerNode:(Element.t, ProcessingInstruction.t) union2 -> ?parentStyleSheet:CSSStyleSheet.t -> ?title:string -> type_:(string[@js "type"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(**
  A list of StyleSheet.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StyleSheetList)
*)
and[@js.scope "StyleSheetList"] StyleSheetList : sig
  type t = [`StyleSheetList] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`StyleSheetList]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`StyleSheetList]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `StyleSheetList ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> CSSStyleSheet.t IterableIterator.t *)
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StyleSheetList/length) *)
  val get_length: 'tags this -> float [@@js.get "length"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StyleSheetList/item) *)
  val item: 'tags this -> index:float -> CSSStyleSheet.t option [@@js.call "item"]
  val get: 'tags this -> float -> CSSStyleSheet.t [@@js.index_get]
  val set: 'tags this -> float -> CSSStyleSheet.t -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubmitEvent) *)
and[@js.scope "SubmitEvent"] SubmitEvent : sig
  type t = [`Event | `SubmitEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `SubmitEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `SubmitEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SubmitEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the element representing the submit button that triggered the form submission, or null if the submission was not triggered by a button.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SubmitEvent/submitter)
  *)
  val get_submitter: 'tags this -> HTMLElement.t option [@@js.get "submitter"]
  val create: ?submitter:HTMLElement.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> ?eventInitDict:SubmitEventInit.t -> unit -> t [@@js.create]
end
and SubmitEventInit : sig
  type t = [`EventInit | `SubmitEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `SubmitEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `SubmitEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SubmitEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_submitter: 'tags this -> HTMLElement.t option [@@js.get "submitter"]
  val set_submitter: 'tags this -> HTMLElement.t option -> unit [@@js.set "submitter"]
  val create: ?submitter:HTMLElement.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
and TexImageSource : sig
  type t = (HTMLCanvasElement.t, HTMLImageElement.t, HTMLVideoElement.t, ImageBitmap.t, ImageData.t, OffscreenCanvas.t, VideoFrame.t) union7
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  The textual content of Element or Attr. If an element has no markup within its content, it has a single child implementing Text that contains the element's text. However, if the element contains markup, it is parsed into information items and Text nodes that form its children.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Text)
*)
and[@js.scope "Text"] Text : sig
  type t = [`CharacterData | `ChildNode | `EventTarget | `Node | `NonDocumentTypeChildNode | `Slottable | `Text] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CharacterData | `ChildNode | `EventTarget | `Node | `NonDocumentTypeChildNode | `Slottable | `Text]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CharacterData | `ChildNode | `EventTarget | `Node | `NonDocumentTypeChildNode | `Slottable | `Text]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Text ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the combined data of all direct Text node siblings.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Text/wholeText)
  *)
  val get_wholeText: 'tags this -> string [@@js.get "wholeText"]
  
  (**
    Splits data at the given offset and returns the remainder as Text node.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Text/splitText)
  *)
  val splitText: 'tags this -> offset:float -> t [@@js.call "splitText"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: ?data:string -> unit -> t [@@js.create]
end

(**
  An event sent when the state of contacts with a touch-sensitive surface changes. This surface can be a touch screen or trackpad, for example. The event can describe one or more points of contact with the screen and includes support for detecting movement, addition and removal of contact points, and so forth.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TouchEvent)
*)
and[@js.scope "TouchEvent"] TouchEvent : sig
  type t = [`Event | `TouchEvent | `UIEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `TouchEvent | `UIEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `TouchEvent | `UIEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `TouchEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TouchEvent/altKey) *)
  val get_altKey: 'tags this -> bool [@@js.get "altKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TouchEvent/changedTouches) *)
  val get_changedTouches: 'tags this -> TouchList.t [@@js.get "changedTouches"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TouchEvent/ctrlKey) *)
  val get_ctrlKey: 'tags this -> bool [@@js.get "ctrlKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TouchEvent/metaKey) *)
  val get_metaKey: 'tags this -> bool [@@js.get "metaKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TouchEvent/shiftKey) *)
  val get_shiftKey: 'tags this -> bool [@@js.get "shiftKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TouchEvent/targetTouches) *)
  val get_targetTouches: 'tags this -> TouchList.t [@@js.get "targetTouches"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TouchEvent/touches) *)
  val get_touches: 'tags this -> TouchList.t [@@js.get "touches"]
  val create: altKey:bool -> changedTouches:TouchList.t -> ctrlKey:bool -> metaKey:bool -> shiftKey:bool -> targetTouches:TouchList.t -> touches:TouchList.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> ?eventInitDict:TouchEventInit.t -> unit -> t [@@js.create]
end
and TouchEventInit : sig
  type t = [`EventInit | `EventModifierInit | `TouchEventInit | `UIEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `EventModifierInit | `TouchEventInit | `UIEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `EventModifierInit | `TouchEventInit | `UIEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `TouchEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_changedTouches: 'tags this -> Touch.t list option [@@js.get "changedTouches"]
  val set_changedTouches: 'tags this -> Touch.t list -> unit [@@js.set "changedTouches"]
  val get_targetTouches: 'tags this -> Touch.t list option [@@js.get "targetTouches"]
  val set_targetTouches: 'tags this -> Touch.t list -> unit [@@js.set "targetTouches"]
  val get_touches: 'tags this -> Touch.t list option [@@js.get "touches"]
  val set_touches: 'tags this -> Touch.t list -> unit [@@js.set "touches"]
  val create: ?changedTouches:Touch.t list -> ?targetTouches:Touch.t list -> ?touches:Touch.t list -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
and Transferable : sig
  type t = (ArrayBuffer.t, ImageBitmap.t, MessagePort.t, OffscreenCanvas.t, ReadableStream.t_0, TransformStream.t_0, VideoFrame.t, WritableStream.t_0) union8
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  The nodes of a document subtree and a position within them.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TreeWalker)
*)
and[@js.scope "TreeWalker"] TreeWalker : sig
  type t = [`TreeWalker] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`TreeWalker]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`TreeWalker]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `TreeWalker ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TreeWalker/currentNode) *)
  val get_currentNode: 'tags this -> Node.t [@@js.get "currentNode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TreeWalker/currentNode) *)
  val set_currentNode: 'tags this -> Node.t -> unit [@@js.set "currentNode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TreeWalker/filter) *)
  val get_filter: 'tags this -> NodeFilter.t option [@@js.get "filter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TreeWalker/root) *)
  val get_root: 'tags this -> Node.t [@@js.get "root"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TreeWalker/whatToShow) *)
  val get_whatToShow: 'tags this -> float [@@js.get "whatToShow"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TreeWalker/firstChild) *)
  val firstChild: 'tags this -> Node.t option [@@js.call "firstChild"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TreeWalker/lastChild) *)
  val lastChild: 'tags this -> Node.t option [@@js.call "lastChild"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TreeWalker/nextNode) *)
  val nextNode: 'tags this -> Node.t option [@@js.call "nextNode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TreeWalker/nextSibling) *)
  val nextSibling: 'tags this -> Node.t option [@@js.call "nextSibling"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TreeWalker/parentNode) *)
  val parentNode: 'tags this -> Node.t option [@@js.call "parentNode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TreeWalker/previousNode) *)
  val previousNode: 'tags this -> Node.t option [@@js.call "previousNode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TreeWalker/previousSibling) *)
  val previousSibling: 'tags this -> Node.t option [@@js.call "previousSibling"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Simple user interface events.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/UIEvent)
*)
and[@js.scope "UIEvent"] UIEvent : sig
  type t = [`Event | `UIEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `UIEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `UIEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `UIEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/UIEvent/detail) *)
  val get_detail: 'tags this -> float [@@js.get "detail"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/UIEvent/view) *)
  val get_view: 'tags this -> Window.t option [@@js.get "view"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/UIEvent/which) *)
  val get_which: 'tags this -> float [@@js.get "which"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/UIEvent/initUIEvent) *)
  val initUIEvent: 'tags this -> typeArg:string -> ?bubblesArg:bool -> ?cancelableArg:bool -> ?viewArg:Window.t option -> ?detailArg:float -> unit -> unit [@@js.call "initUIEvent"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: type_:string -> ?eventInitDict:UIEventInit.t -> unit -> t [@@js.create]
end
and UIEventInit : sig
  type t = [`EventInit | `UIEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `UIEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `UIEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `UIEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_detail: 'tags this -> float option [@@js.get "detail"]
  val set_detail: 'tags this -> float -> unit [@@js.set "detail"]
  val get_view: 'tags this -> Window.t option [@@js.get "view"]
  val set_view: 'tags this -> Window.t option -> unit [@@js.set "view"]
  
  (** @deprecated  *)
  val get_which: 'tags this -> float option [@@js.get "which"]
  
  (** @deprecated  *)
  val set_which: 'tags this -> float -> unit [@@js.set "which"]
  val create: ?detail:float -> ?view:Window.t -> ?which:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoFrame) *)
and[@js.scope "VideoFrame"] VideoFrame : sig
  type t = [`VideoFrame] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VideoFrame]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VideoFrame]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoFrame ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoFrame/codedHeight) *)
  val get_codedHeight: 'tags this -> float [@@js.get "codedHeight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoFrame/codedRect) *)
  val get_codedRect: 'tags this -> DOMRectReadOnly.t option [@@js.get "codedRect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoFrame/codedWidth) *)
  val get_codedWidth: 'tags this -> float [@@js.get "codedWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoFrame/colorSpace) *)
  val get_colorSpace: 'tags this -> VideoColorSpace.t [@@js.get "colorSpace"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoFrame/displayHeight) *)
  val get_displayHeight: 'tags this -> float [@@js.get "displayHeight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoFrame/displayWidth) *)
  val get_displayWidth: 'tags this -> float [@@js.get "displayWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoFrame/duration) *)
  val get_duration: 'tags this -> float option [@@js.get "duration"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoFrame/format) *)
  val get_format: 'tags this -> VideoPixelFormat.t option [@@js.get "format"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoFrame/timestamp) *)
  val get_timestamp: 'tags this -> float [@@js.get "timestamp"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoFrame/visibleRect) *)
  val get_visibleRect: 'tags this -> DOMRectReadOnly.t option [@@js.get "visibleRect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoFrame/allocationSize) *)
  val allocationSize: 'tags this -> ?options:VideoFrameCopyToOptions.t -> unit -> float [@@js.call "allocationSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoFrame/clone) *)
  val clone: 'tags this -> t [@@js.call "clone"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoFrame/close) *)
  val close: 'tags this -> unit [@@js.call "close"]
  val copyTo: 'tags this -> destination:AllowSharedBufferSource.t -> ?options:VideoFrameCopyToOptions.t -> unit -> PlaneLayout.t list Promise.t [@@js.call "copyTo"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: image:CanvasImageSource.t -> ?init:VideoFrameInit.t -> unit -> t [@@js.create]
  val create': data:AllowSharedBufferSource.t -> init:VideoFrameBufferInit.t -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext) *)
and[@js.scope "WebGL2RenderingContext"] WebGL2RenderingContext : sig
  type t = [`WebGL2RenderingContext | `WebGL2RenderingContextBase | `WebGL2RenderingContextOverloads | `WebGLRenderingContextBase] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGL2RenderingContext | `WebGL2RenderingContextBase | `WebGL2RenderingContextOverloads | `WebGLRenderingContextBase]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGL2RenderingContext | `WebGL2RenderingContextBase | `WebGL2RenderingContextOverloads | `WebGLRenderingContextBase]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGL2RenderingContext ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  val read_buffer: unit -> ([`L_n_3074[@js 3074]] [@js.enum]) [@@js.get "READ_BUFFER"]
  val unpack_row_length: unit -> ([`L_n_3314[@js 3314]] [@js.enum]) [@@js.get "UNPACK_ROW_LENGTH"]
  val unpack_skip_rows: unit -> ([`L_n_3315[@js 3315]] [@js.enum]) [@@js.get "UNPACK_SKIP_ROWS"]
  val unpack_skip_pixels: unit -> ([`L_n_3316[@js 3316]] [@js.enum]) [@@js.get "UNPACK_SKIP_PIXELS"]
  val pack_row_length: unit -> ([`L_n_3330[@js 3330]] [@js.enum]) [@@js.get "PACK_ROW_LENGTH"]
  val pack_skip_rows: unit -> ([`L_n_3331[@js 3331]] [@js.enum]) [@@js.get "PACK_SKIP_ROWS"]
  val pack_skip_pixels: unit -> ([`L_n_3332[@js 3332]] [@js.enum]) [@@js.get "PACK_SKIP_PIXELS"]
  val color: unit -> ([`L_n_6144[@js 6144]] [@js.enum]) [@@js.get "COLOR"]
  val depth: unit -> ([`L_n_6145[@js 6145]] [@js.enum]) [@@js.get "DEPTH"]
  val stencil: unit -> ([`L_n_6146[@js 6146]] [@js.enum]) [@@js.get "STENCIL"]
  val red: unit -> ([`L_n_6403[@js 6403]] [@js.enum]) [@@js.get "RED"]
  val rgb8: unit -> ([`L_n_32849[@js 32849]] [@js.enum]) [@@js.get "RGB8"]
  val rgb10_a2: unit -> ([`L_n_32857[@js 32857]] [@js.enum]) [@@js.get "RGB10_A2"]
  val texture_binding_3d: unit -> ([`L_n_32874[@js 32874]] [@js.enum]) [@@js.get "TEXTURE_BINDING_3D"]
  val unpack_skip_images: unit -> ([`L_n_32877[@js 32877]] [@js.enum]) [@@js.get "UNPACK_SKIP_IMAGES"]
  val unpack_image_height: unit -> ([`L_n_32878[@js 32878]] [@js.enum]) [@@js.get "UNPACK_IMAGE_HEIGHT"]
  val texture_3d: unit -> ([`L_n_32879[@js 32879]] [@js.enum]) [@@js.get "TEXTURE_3D"]
  val texture_wrap_r: unit -> ([`L_n_32882[@js 32882]] [@js.enum]) [@@js.get "TEXTURE_WRAP_R"]
  val max_3d_texture_size: unit -> ([`L_n_32883[@js 32883]] [@js.enum]) [@@js.get "MAX_3D_TEXTURE_SIZE"]
  val unsigned_int_2_10_10_10_rev: unit -> ([`L_n_33640[@js 33640]] [@js.enum]) [@@js.get "UNSIGNED_INT_2_10_10_10_REV"]
  val max_elements_vertices: unit -> ([`L_n_33000[@js 33000]] [@js.enum]) [@@js.get "MAX_ELEMENTS_VERTICES"]
  val max_elements_indices: unit -> ([`L_n_33001[@js 33001]] [@js.enum]) [@@js.get "MAX_ELEMENTS_INDICES"]
  val texture_min_lod: unit -> ([`L_n_33082[@js 33082]] [@js.enum]) [@@js.get "TEXTURE_MIN_LOD"]
  val texture_max_lod: unit -> ([`L_n_33083[@js 33083]] [@js.enum]) [@@js.get "TEXTURE_MAX_LOD"]
  val texture_base_level: unit -> ([`L_n_33084[@js 33084]] [@js.enum]) [@@js.get "TEXTURE_BASE_LEVEL"]
  val texture_max_level: unit -> ([`L_n_33085[@js 33085]] [@js.enum]) [@@js.get "TEXTURE_MAX_LEVEL"]
  val min: unit -> ([`L_n_32775[@js 32775]] [@js.enum]) [@@js.get "MIN"]
  val max: unit -> ([`L_n_32776[@js 32776]] [@js.enum]) [@@js.get "MAX"]
  val depth_component24: unit -> ([`L_n_33190[@js 33190]] [@js.enum]) [@@js.get "DEPTH_COMPONENT24"]
  val max_texture_lod_bias: unit -> ([`L_n_34045[@js 34045]] [@js.enum]) [@@js.get "MAX_TEXTURE_LOD_BIAS"]
  val texture_compare_mode: unit -> ([`L_n_34892[@js 34892]] [@js.enum]) [@@js.get "TEXTURE_COMPARE_MODE"]
  val texture_compare_func: unit -> ([`L_n_34893[@js 34893]] [@js.enum]) [@@js.get "TEXTURE_COMPARE_FUNC"]
  val current_query: unit -> ([`L_n_34917[@js 34917]] [@js.enum]) [@@js.get "CURRENT_QUERY"]
  val query_result: unit -> ([`L_n_34918[@js 34918]] [@js.enum]) [@@js.get "QUERY_RESULT"]
  val query_result_available: unit -> ([`L_n_34919[@js 34919]] [@js.enum]) [@@js.get "QUERY_RESULT_AVAILABLE"]
  val stream_read: unit -> ([`L_n_35041[@js 35041]] [@js.enum]) [@@js.get "STREAM_READ"]
  val stream_copy: unit -> ([`L_n_35042[@js 35042]] [@js.enum]) [@@js.get "STREAM_COPY"]
  val static_read: unit -> ([`L_n_35045[@js 35045]] [@js.enum]) [@@js.get "STATIC_READ"]
  val static_copy: unit -> ([`L_n_35046[@js 35046]] [@js.enum]) [@@js.get "STATIC_COPY"]
  val dynamic_read: unit -> ([`L_n_35049[@js 35049]] [@js.enum]) [@@js.get "DYNAMIC_READ"]
  val dynamic_copy: unit -> ([`L_n_35050[@js 35050]] [@js.enum]) [@@js.get "DYNAMIC_COPY"]
  val max_draw_buffers: unit -> ([`L_n_34852[@js 34852]] [@js.enum]) [@@js.get "MAX_DRAW_BUFFERS"]
  val draw_buffer0: unit -> ([`L_n_34853[@js 34853]] [@js.enum]) [@@js.get "DRAW_BUFFER0"]
  val draw_buffer1: unit -> ([`L_n_34854[@js 34854]] [@js.enum]) [@@js.get "DRAW_BUFFER1"]
  val draw_buffer2: unit -> ([`L_n_34855[@js 34855]] [@js.enum]) [@@js.get "DRAW_BUFFER2"]
  val draw_buffer3: unit -> ([`L_n_34856[@js 34856]] [@js.enum]) [@@js.get "DRAW_BUFFER3"]
  val draw_buffer4: unit -> ([`L_n_34857[@js 34857]] [@js.enum]) [@@js.get "DRAW_BUFFER4"]
  val draw_buffer5: unit -> ([`L_n_34858[@js 34858]] [@js.enum]) [@@js.get "DRAW_BUFFER5"]
  val draw_buffer6: unit -> ([`L_n_34859[@js 34859]] [@js.enum]) [@@js.get "DRAW_BUFFER6"]
  val draw_buffer7: unit -> ([`L_n_34860[@js 34860]] [@js.enum]) [@@js.get "DRAW_BUFFER7"]
  val draw_buffer8: unit -> ([`L_n_34861[@js 34861]] [@js.enum]) [@@js.get "DRAW_BUFFER8"]
  val draw_buffer9: unit -> ([`L_n_34862[@js 34862]] [@js.enum]) [@@js.get "DRAW_BUFFER9"]
  val draw_buffer10: unit -> ([`L_n_34863[@js 34863]] [@js.enum]) [@@js.get "DRAW_BUFFER10"]
  val draw_buffer11: unit -> ([`L_n_34864[@js 34864]] [@js.enum]) [@@js.get "DRAW_BUFFER11"]
  val draw_buffer12: unit -> ([`L_n_34865[@js 34865]] [@js.enum]) [@@js.get "DRAW_BUFFER12"]
  val draw_buffer13: unit -> ([`L_n_34866[@js 34866]] [@js.enum]) [@@js.get "DRAW_BUFFER13"]
  val draw_buffer14: unit -> ([`L_n_34867[@js 34867]] [@js.enum]) [@@js.get "DRAW_BUFFER14"]
  val draw_buffer15: unit -> ([`L_n_34868[@js 34868]] [@js.enum]) [@@js.get "DRAW_BUFFER15"]
  val max_fragment_uniform_components: unit -> ([`L_n_35657[@js 35657]] [@js.enum]) [@@js.get "MAX_FRAGMENT_UNIFORM_COMPONENTS"]
  val max_vertex_uniform_components: unit -> ([`L_n_35658[@js 35658]] [@js.enum]) [@@js.get "MAX_VERTEX_UNIFORM_COMPONENTS"]
  val sampler_3d: unit -> ([`L_n_35679[@js 35679]] [@js.enum]) [@@js.get "SAMPLER_3D"]
  val sampler_2d_shadow: unit -> ([`L_n_35682[@js 35682]] [@js.enum]) [@@js.get "SAMPLER_2D_SHADOW"]
  val fragment_shader_derivative_hint: unit -> ([`L_n_35723[@js 35723]] [@js.enum]) [@@js.get "FRAGMENT_SHADER_DERIVATIVE_HINT"]
  val pixel_pack_buffer: unit -> ([`L_n_35051[@js 35051]] [@js.enum]) [@@js.get "PIXEL_PACK_BUFFER"]
  val pixel_unpack_buffer: unit -> ([`L_n_35052[@js 35052]] [@js.enum]) [@@js.get "PIXEL_UNPACK_BUFFER"]
  val pixel_pack_buffer_binding: unit -> ([`L_n_35053[@js 35053]] [@js.enum]) [@@js.get "PIXEL_PACK_BUFFER_BINDING"]
  val pixel_unpack_buffer_binding: unit -> ([`L_n_35055[@js 35055]] [@js.enum]) [@@js.get "PIXEL_UNPACK_BUFFER_BINDING"]
  val fLOAT_MAT2x3: unit -> ([`L_n_35685[@js 35685]] [@js.enum]) [@@js.get "FLOAT_MAT2x3"]
  val fLOAT_MAT2x4: unit -> ([`L_n_35686[@js 35686]] [@js.enum]) [@@js.get "FLOAT_MAT2x4"]
  val fLOAT_MAT3x2: unit -> ([`L_n_35687[@js 35687]] [@js.enum]) [@@js.get "FLOAT_MAT3x2"]
  val fLOAT_MAT3x4: unit -> ([`L_n_35688[@js 35688]] [@js.enum]) [@@js.get "FLOAT_MAT3x4"]
  val fLOAT_MAT4x2: unit -> ([`L_n_35689[@js 35689]] [@js.enum]) [@@js.get "FLOAT_MAT4x2"]
  val fLOAT_MAT4x3: unit -> ([`L_n_35690[@js 35690]] [@js.enum]) [@@js.get "FLOAT_MAT4x3"]
  val srgb: unit -> ([`L_n_35904[@js 35904]] [@js.enum]) [@@js.get "SRGB"]
  val srgb8: unit -> ([`L_n_35905[@js 35905]] [@js.enum]) [@@js.get "SRGB8"]
  val srgb8_alpha8: unit -> ([`L_n_35907[@js 35907]] [@js.enum]) [@@js.get "SRGB8_ALPHA8"]
  val compare_ref_to_texture: unit -> ([`L_n_34894[@js 34894]] [@js.enum]) [@@js.get "COMPARE_REF_TO_TEXTURE"]
  val rgba32f: unit -> ([`L_n_34836[@js 34836]] [@js.enum]) [@@js.get "RGBA32F"]
  val rgb32f: unit -> ([`L_n_34837[@js 34837]] [@js.enum]) [@@js.get "RGB32F"]
  val rgba16f: unit -> ([`L_n_34842[@js 34842]] [@js.enum]) [@@js.get "RGBA16F"]
  val rgb16f: unit -> ([`L_n_34843[@js 34843]] [@js.enum]) [@@js.get "RGB16F"]
  val vertex_attrib_array_integer: unit -> ([`L_n_35069[@js 35069]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_INTEGER"]
  val max_array_texture_layers: unit -> ([`L_n_35071[@js 35071]] [@js.enum]) [@@js.get "MAX_ARRAY_TEXTURE_LAYERS"]
  val min_program_texel_offset: unit -> ([`L_n_35076[@js 35076]] [@js.enum]) [@@js.get "MIN_PROGRAM_TEXEL_OFFSET"]
  val max_program_texel_offset: unit -> ([`L_n_35077[@js 35077]] [@js.enum]) [@@js.get "MAX_PROGRAM_TEXEL_OFFSET"]
  val max_varying_components: unit -> ([`L_n_35659[@js 35659]] [@js.enum]) [@@js.get "MAX_VARYING_COMPONENTS"]
  val texture_2d_array: unit -> ([`L_n_35866[@js 35866]] [@js.enum]) [@@js.get "TEXTURE_2D_ARRAY"]
  val texture_binding_2d_array: unit -> ([`L_n_35869[@js 35869]] [@js.enum]) [@@js.get "TEXTURE_BINDING_2D_ARRAY"]
  val r11f_g11f_b10f: unit -> ([`L_n_35898[@js 35898]] [@js.enum]) [@@js.get "R11F_G11F_B10F"]
  val unsigned_int_10f_11f_11f_rev: unit -> ([`L_n_35899[@js 35899]] [@js.enum]) [@@js.get "UNSIGNED_INT_10F_11F_11F_REV"]
  val rgb9_e5: unit -> ([`L_n_35901[@js 35901]] [@js.enum]) [@@js.get "RGB9_E5"]
  val unsigned_int_5_9_9_9_rev: unit -> ([`L_n_35902[@js 35902]] [@js.enum]) [@@js.get "UNSIGNED_INT_5_9_9_9_REV"]
  val transform_feedback_buffer_mode: unit -> ([`L_n_35967[@js 35967]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_BUFFER_MODE"]
  val max_transform_feedback_separate_components: unit -> ([`L_n_35968[@js 35968]] [@js.enum]) [@@js.get "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS"]
  val transform_feedback_varyings: unit -> ([`L_n_35971[@js 35971]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_VARYINGS"]
  val transform_feedback_buffer_start: unit -> ([`L_n_35972[@js 35972]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_BUFFER_START"]
  val transform_feedback_buffer_size: unit -> ([`L_n_35973[@js 35973]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_BUFFER_SIZE"]
  val transform_feedback_primitives_written: unit -> ([`L_n_35976[@js 35976]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN"]
  val rasterizer_discard: unit -> ([`L_n_35977[@js 35977]] [@js.enum]) [@@js.get "RASTERIZER_DISCARD"]
  val max_transform_feedback_interleaved_components: unit -> ([`L_n_35978[@js 35978]] [@js.enum]) [@@js.get "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS"]
  val max_transform_feedback_separate_attribs: unit -> ([`L_n_35979[@js 35979]] [@js.enum]) [@@js.get "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS"]
  val interleaved_attribs: unit -> ([`L_n_35980[@js 35980]] [@js.enum]) [@@js.get "INTERLEAVED_ATTRIBS"]
  val separate_attribs: unit -> ([`L_n_35981[@js 35981]] [@js.enum]) [@@js.get "SEPARATE_ATTRIBS"]
  val transform_feedback_buffer: unit -> ([`L_n_35982[@js 35982]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_BUFFER"]
  val transform_feedback_buffer_binding: unit -> ([`L_n_35983[@js 35983]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_BUFFER_BINDING"]
  val rgba32ui: unit -> ([`L_n_36208[@js 36208]] [@js.enum]) [@@js.get "RGBA32UI"]
  val rgb32ui: unit -> ([`L_n_36209[@js 36209]] [@js.enum]) [@@js.get "RGB32UI"]
  val rgba16ui: unit -> ([`L_n_36214[@js 36214]] [@js.enum]) [@@js.get "RGBA16UI"]
  val rgb16ui: unit -> ([`L_n_36215[@js 36215]] [@js.enum]) [@@js.get "RGB16UI"]
  val rgba8ui: unit -> ([`L_n_36220[@js 36220]] [@js.enum]) [@@js.get "RGBA8UI"]
  val rgb8ui: unit -> ([`L_n_36221[@js 36221]] [@js.enum]) [@@js.get "RGB8UI"]
  val rgba32i: unit -> ([`L_n_36226[@js 36226]] [@js.enum]) [@@js.get "RGBA32I"]
  val rgb32i: unit -> ([`L_n_36227[@js 36227]] [@js.enum]) [@@js.get "RGB32I"]
  val rgba16i: unit -> ([`L_n_36232[@js 36232]] [@js.enum]) [@@js.get "RGBA16I"]
  val rgb16i: unit -> ([`L_n_36233[@js 36233]] [@js.enum]) [@@js.get "RGB16I"]
  val rgba8i: unit -> ([`L_n_36238[@js 36238]] [@js.enum]) [@@js.get "RGBA8I"]
  val rgb8i: unit -> ([`L_n_36239[@js 36239]] [@js.enum]) [@@js.get "RGB8I"]
  val red_integer: unit -> ([`L_n_36244[@js 36244]] [@js.enum]) [@@js.get "RED_INTEGER"]
  val rgb_integer: unit -> ([`L_n_36248[@js 36248]] [@js.enum]) [@@js.get "RGB_INTEGER"]
  val rgba_integer: unit -> ([`L_n_36249[@js 36249]] [@js.enum]) [@@js.get "RGBA_INTEGER"]
  val sampler_2d_array: unit -> ([`L_n_36289[@js 36289]] [@js.enum]) [@@js.get "SAMPLER_2D_ARRAY"]
  val sampler_2d_array_shadow: unit -> ([`L_n_36292[@js 36292]] [@js.enum]) [@@js.get "SAMPLER_2D_ARRAY_SHADOW"]
  val sampler_cube_shadow: unit -> ([`L_n_36293[@js 36293]] [@js.enum]) [@@js.get "SAMPLER_CUBE_SHADOW"]
  val unsigned_int_vec2: unit -> ([`L_n_36294[@js 36294]] [@js.enum]) [@@js.get "UNSIGNED_INT_VEC2"]
  val unsigned_int_vec3: unit -> ([`L_n_36295[@js 36295]] [@js.enum]) [@@js.get "UNSIGNED_INT_VEC3"]
  val unsigned_int_vec4: unit -> ([`L_n_36296[@js 36296]] [@js.enum]) [@@js.get "UNSIGNED_INT_VEC4"]
  val int_sampler_2d: unit -> ([`L_n_36298[@js 36298]] [@js.enum]) [@@js.get "INT_SAMPLER_2D"]
  val int_sampler_3d: unit -> ([`L_n_36299[@js 36299]] [@js.enum]) [@@js.get "INT_SAMPLER_3D"]
  val int_sampler_cube: unit -> ([`L_n_36300[@js 36300]] [@js.enum]) [@@js.get "INT_SAMPLER_CUBE"]
  val int_sampler_2d_array: unit -> ([`L_n_36303[@js 36303]] [@js.enum]) [@@js.get "INT_SAMPLER_2D_ARRAY"]
  val unsigned_int_sampler_2d: unit -> ([`L_n_36306[@js 36306]] [@js.enum]) [@@js.get "UNSIGNED_INT_SAMPLER_2D"]
  val unsigned_int_sampler_3d: unit -> ([`L_n_36307[@js 36307]] [@js.enum]) [@@js.get "UNSIGNED_INT_SAMPLER_3D"]
  val unsigned_int_sampler_cube: unit -> ([`L_n_36308[@js 36308]] [@js.enum]) [@@js.get "UNSIGNED_INT_SAMPLER_CUBE"]
  val unsigned_int_sampler_2d_array: unit -> ([`L_n_36311[@js 36311]] [@js.enum]) [@@js.get "UNSIGNED_INT_SAMPLER_2D_ARRAY"]
  val depth_component32f: unit -> ([`L_n_36012[@js 36012]] [@js.enum]) [@@js.get "DEPTH_COMPONENT32F"]
  val depth32f_stencil8: unit -> ([`L_n_36013[@js 36013]] [@js.enum]) [@@js.get "DEPTH32F_STENCIL8"]
  val float_32_unsigned_int_24_8_rev: unit -> ([`L_n_36269[@js 36269]] [@js.enum]) [@@js.get "FLOAT_32_UNSIGNED_INT_24_8_REV"]
  val framebuffer_attachment_color_encoding: unit -> ([`L_n_33296[@js 33296]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING"]
  val framebuffer_attachment_component_type: unit -> ([`L_n_33297[@js 33297]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE"]
  val framebuffer_attachment_red_size: unit -> ([`L_n_33298[@js 33298]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_RED_SIZE"]
  val framebuffer_attachment_green_size: unit -> ([`L_n_33299[@js 33299]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE"]
  val framebuffer_attachment_blue_size: unit -> ([`L_n_33300[@js 33300]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE"]
  val framebuffer_attachment_alpha_size: unit -> ([`L_n_33301[@js 33301]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE"]
  val framebuffer_attachment_depth_size: unit -> ([`L_n_33302[@js 33302]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE"]
  val framebuffer_attachment_stencil_size: unit -> ([`L_n_33303[@js 33303]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE"]
  val framebuffer_default: unit -> ([`L_n_33304[@js 33304]] [@js.enum]) [@@js.get "FRAMEBUFFER_DEFAULT"]
  val unsigned_int_24_8: unit -> ([`L_n_34042[@js 34042]] [@js.enum]) [@@js.get "UNSIGNED_INT_24_8"]
  val depth24_stencil8: unit -> ([`L_n_35056[@js 35056]] [@js.enum]) [@@js.get "DEPTH24_STENCIL8"]
  val unsigned_normalized: unit -> ([`L_n_35863[@js 35863]] [@js.enum]) [@@js.get "UNSIGNED_NORMALIZED"]
  val draw_framebuffer_binding: unit -> ([`L_n_36006[@js 36006]] [@js.enum]) [@@js.get "DRAW_FRAMEBUFFER_BINDING"]
  val read_framebuffer: unit -> ([`L_n_36008[@js 36008]] [@js.enum]) [@@js.get "READ_FRAMEBUFFER"]
  val draw_framebuffer: unit -> ([`L_n_36009[@js 36009]] [@js.enum]) [@@js.get "DRAW_FRAMEBUFFER"]
  val read_framebuffer_binding: unit -> ([`L_n_36010[@js 36010]] [@js.enum]) [@@js.get "READ_FRAMEBUFFER_BINDING"]
  val renderbuffer_samples: unit -> ([`L_n_36011[@js 36011]] [@js.enum]) [@@js.get "RENDERBUFFER_SAMPLES"]
  val framebuffer_attachment_texture_layer: unit -> ([`L_n_36052[@js 36052]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER"]
  val max_color_attachments: unit -> ([`L_n_36063[@js 36063]] [@js.enum]) [@@js.get "MAX_COLOR_ATTACHMENTS"]
  val color_attachment1: unit -> ([`L_n_36065[@js 36065]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT1"]
  val color_attachment2: unit -> ([`L_n_36066[@js 36066]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT2"]
  val color_attachment3: unit -> ([`L_n_36067[@js 36067]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT3"]
  val color_attachment4: unit -> ([`L_n_36068[@js 36068]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT4"]
  val color_attachment5: unit -> ([`L_n_36069[@js 36069]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT5"]
  val color_attachment6: unit -> ([`L_n_36070[@js 36070]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT6"]
  val color_attachment7: unit -> ([`L_n_36071[@js 36071]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT7"]
  val color_attachment8: unit -> ([`L_n_36072[@js 36072]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT8"]
  val color_attachment9: unit -> ([`L_n_36073[@js 36073]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT9"]
  val color_attachment10: unit -> ([`L_n_36074[@js 36074]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT10"]
  val color_attachment11: unit -> ([`L_n_36075[@js 36075]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT11"]
  val color_attachment12: unit -> ([`L_n_36076[@js 36076]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT12"]
  val color_attachment13: unit -> ([`L_n_36077[@js 36077]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT13"]
  val color_attachment14: unit -> ([`L_n_36078[@js 36078]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT14"]
  val color_attachment15: unit -> ([`L_n_36079[@js 36079]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT15"]
  val framebuffer_incomplete_multisample: unit -> ([`L_n_36182[@js 36182]] [@js.enum]) [@@js.get "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE"]
  val max_samples: unit -> ([`L_n_36183[@js 36183]] [@js.enum]) [@@js.get "MAX_SAMPLES"]
  val half_float: unit -> ([`L_n_5131[@js 5131]] [@js.enum]) [@@js.get "HALF_FLOAT"]
  val rg: unit -> ([`L_n_33319[@js 33319]] [@js.enum]) [@@js.get "RG"]
  val rg_integer: unit -> ([`L_n_33320[@js 33320]] [@js.enum]) [@@js.get "RG_INTEGER"]
  val r8: unit -> ([`L_n_33321[@js 33321]] [@js.enum]) [@@js.get "R8"]
  val rg8: unit -> ([`L_n_33323[@js 33323]] [@js.enum]) [@@js.get "RG8"]
  val r16f: unit -> ([`L_n_33325[@js 33325]] [@js.enum]) [@@js.get "R16F"]
  val r32f: unit -> ([`L_n_33326[@js 33326]] [@js.enum]) [@@js.get "R32F"]
  val rg16f: unit -> ([`L_n_33327[@js 33327]] [@js.enum]) [@@js.get "RG16F"]
  val rg32f: unit -> ([`L_n_33328[@js 33328]] [@js.enum]) [@@js.get "RG32F"]
  val r8i: unit -> ([`L_n_33329[@js 33329]] [@js.enum]) [@@js.get "R8I"]
  val r8ui: unit -> ([`L_n_33330[@js 33330]] [@js.enum]) [@@js.get "R8UI"]
  val r16i: unit -> ([`L_n_33331[@js 33331]] [@js.enum]) [@@js.get "R16I"]
  val r16ui: unit -> ([`L_n_33332[@js 33332]] [@js.enum]) [@@js.get "R16UI"]
  val r32i: unit -> ([`L_n_33333[@js 33333]] [@js.enum]) [@@js.get "R32I"]
  val r32ui: unit -> ([`L_n_33334[@js 33334]] [@js.enum]) [@@js.get "R32UI"]
  val rg8i: unit -> ([`L_n_33335[@js 33335]] [@js.enum]) [@@js.get "RG8I"]
  val rg8ui: unit -> ([`L_n_33336[@js 33336]] [@js.enum]) [@@js.get "RG8UI"]
  val rg16i: unit -> ([`L_n_33337[@js 33337]] [@js.enum]) [@@js.get "RG16I"]
  val rg16ui: unit -> ([`L_n_33338[@js 33338]] [@js.enum]) [@@js.get "RG16UI"]
  val rg32i: unit -> ([`L_n_33339[@js 33339]] [@js.enum]) [@@js.get "RG32I"]
  val rg32ui: unit -> ([`L_n_33340[@js 33340]] [@js.enum]) [@@js.get "RG32UI"]
  val vertex_array_binding: unit -> ([`L_n_34229[@js 34229]] [@js.enum]) [@@js.get "VERTEX_ARRAY_BINDING"]
  val r8_snorm: unit -> ([`L_n_36756[@js 36756]] [@js.enum]) [@@js.get "R8_SNORM"]
  val rg8_snorm: unit -> ([`L_n_36757[@js 36757]] [@js.enum]) [@@js.get "RG8_SNORM"]
  val rgb8_snorm: unit -> ([`L_n_36758[@js 36758]] [@js.enum]) [@@js.get "RGB8_SNORM"]
  val rgba8_snorm: unit -> ([`L_n_36759[@js 36759]] [@js.enum]) [@@js.get "RGBA8_SNORM"]
  val signed_normalized: unit -> ([`L_n_36764[@js 36764]] [@js.enum]) [@@js.get "SIGNED_NORMALIZED"]
  val copy_read_buffer: unit -> ([`L_n_36662[@js 36662]] [@js.enum]) [@@js.get "COPY_READ_BUFFER"]
  val copy_write_buffer: unit -> ([`L_n_36663[@js 36663]] [@js.enum]) [@@js.get "COPY_WRITE_BUFFER"]
  val copy_read_buffer_binding: unit -> ([`L_n_36662[@js 36662]] [@js.enum]) [@@js.get "COPY_READ_BUFFER_BINDING"]
  val copy_write_buffer_binding: unit -> ([`L_n_36663[@js 36663]] [@js.enum]) [@@js.get "COPY_WRITE_BUFFER_BINDING"]
  val uniform_buffer: unit -> ([`L_n_35345[@js 35345]] [@js.enum]) [@@js.get "UNIFORM_BUFFER"]
  val uniform_buffer_binding: unit -> ([`L_n_35368[@js 35368]] [@js.enum]) [@@js.get "UNIFORM_BUFFER_BINDING"]
  val uniform_buffer_start: unit -> ([`L_n_35369[@js 35369]] [@js.enum]) [@@js.get "UNIFORM_BUFFER_START"]
  val uniform_buffer_size: unit -> ([`L_n_35370[@js 35370]] [@js.enum]) [@@js.get "UNIFORM_BUFFER_SIZE"]
  val max_vertex_uniform_blocks: unit -> ([`L_n_35371[@js 35371]] [@js.enum]) [@@js.get "MAX_VERTEX_UNIFORM_BLOCKS"]
  val max_fragment_uniform_blocks: unit -> ([`L_n_35373[@js 35373]] [@js.enum]) [@@js.get "MAX_FRAGMENT_UNIFORM_BLOCKS"]
  val max_combined_uniform_blocks: unit -> ([`L_n_35374[@js 35374]] [@js.enum]) [@@js.get "MAX_COMBINED_UNIFORM_BLOCKS"]
  val max_uniform_buffer_bindings: unit -> ([`L_n_35375[@js 35375]] [@js.enum]) [@@js.get "MAX_UNIFORM_BUFFER_BINDINGS"]
  val max_uniform_block_size: unit -> ([`L_n_35376[@js 35376]] [@js.enum]) [@@js.get "MAX_UNIFORM_BLOCK_SIZE"]
  val max_combined_vertex_uniform_components: unit -> ([`L_n_35377[@js 35377]] [@js.enum]) [@@js.get "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS"]
  val max_combined_fragment_uniform_components: unit -> ([`L_n_35379[@js 35379]] [@js.enum]) [@@js.get "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS"]
  val uniform_buffer_offset_alignment: unit -> ([`L_n_35380[@js 35380]] [@js.enum]) [@@js.get "UNIFORM_BUFFER_OFFSET_ALIGNMENT"]
  val active_uniform_blocks: unit -> ([`L_n_35382[@js 35382]] [@js.enum]) [@@js.get "ACTIVE_UNIFORM_BLOCKS"]
  val uniform_type: unit -> ([`L_n_35383[@js 35383]] [@js.enum]) [@@js.get "UNIFORM_TYPE"]
  val uniform_size: unit -> ([`L_n_35384[@js 35384]] [@js.enum]) [@@js.get "UNIFORM_SIZE"]
  val uniform_block_index: unit -> ([`L_n_35386[@js 35386]] [@js.enum]) [@@js.get "UNIFORM_BLOCK_INDEX"]
  val uniform_offset: unit -> ([`L_n_35387[@js 35387]] [@js.enum]) [@@js.get "UNIFORM_OFFSET"]
  val uniform_array_stride: unit -> ([`L_n_35388[@js 35388]] [@js.enum]) [@@js.get "UNIFORM_ARRAY_STRIDE"]
  val uniform_matrix_stride: unit -> ([`L_n_35389[@js 35389]] [@js.enum]) [@@js.get "UNIFORM_MATRIX_STRIDE"]
  val uniform_is_row_major: unit -> ([`L_n_35390[@js 35390]] [@js.enum]) [@@js.get "UNIFORM_IS_ROW_MAJOR"]
  val uniform_block_binding: unit -> ([`L_n_35391[@js 35391]] [@js.enum]) [@@js.get "UNIFORM_BLOCK_BINDING"]
  val uniform_block_data_size: unit -> ([`L_n_35392[@js 35392]] [@js.enum]) [@@js.get "UNIFORM_BLOCK_DATA_SIZE"]
  val uniform_block_active_uniforms: unit -> ([`L_n_35394[@js 35394]] [@js.enum]) [@@js.get "UNIFORM_BLOCK_ACTIVE_UNIFORMS"]
  val uniform_block_active_uniform_indices: unit -> ([`L_n_35395[@js 35395]] [@js.enum]) [@@js.get "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES"]
  val uniform_block_referenced_by_vertex_shader: unit -> ([`L_n_35396[@js 35396]] [@js.enum]) [@@js.get "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER"]
  val uniform_block_referenced_by_fragment_shader: unit -> ([`L_n_35398[@js 35398]] [@js.enum]) [@@js.get "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER"]
  val invalid_index: unit -> ([`L_n_minus1[@js -1]] [@js.enum]) [@@js.get "INVALID_INDEX"]
  val max_vertex_output_components: unit -> ([`L_n_37154[@js 37154]] [@js.enum]) [@@js.get "MAX_VERTEX_OUTPUT_COMPONENTS"]
  val max_fragment_input_components: unit -> ([`L_n_37157[@js 37157]] [@js.enum]) [@@js.get "MAX_FRAGMENT_INPUT_COMPONENTS"]
  val max_server_wait_timeout: unit -> ([`L_n_37137[@js 37137]] [@js.enum]) [@@js.get "MAX_SERVER_WAIT_TIMEOUT"]
  val object_type: unit -> ([`L_n_37138[@js 37138]] [@js.enum]) [@@js.get "OBJECT_TYPE"]
  val sync_condition: unit -> ([`L_n_37139[@js 37139]] [@js.enum]) [@@js.get "SYNC_CONDITION"]
  val sync_status: unit -> ([`L_n_37140[@js 37140]] [@js.enum]) [@@js.get "SYNC_STATUS"]
  val sync_flags: unit -> ([`L_n_37141[@js 37141]] [@js.enum]) [@@js.get "SYNC_FLAGS"]
  val sync_fence: unit -> ([`L_n_37142[@js 37142]] [@js.enum]) [@@js.get "SYNC_FENCE"]
  val sync_gpu_commands_complete: unit -> ([`L_n_37143[@js 37143]] [@js.enum]) [@@js.get "SYNC_GPU_COMMANDS_COMPLETE"]
  val unsignaled: unit -> ([`L_n_37144[@js 37144]] [@js.enum]) [@@js.get "UNSIGNALED"]
  val signaled: unit -> ([`L_n_37145[@js 37145]] [@js.enum]) [@@js.get "SIGNALED"]
  val already_signaled: unit -> ([`L_n_37146[@js 37146]] [@js.enum]) [@@js.get "ALREADY_SIGNALED"]
  val timeout_expired: unit -> ([`L_n_37147[@js 37147]] [@js.enum]) [@@js.get "TIMEOUT_EXPIRED"]
  val condition_satisfied: unit -> ([`L_n_37148[@js 37148]] [@js.enum]) [@@js.get "CONDITION_SATISFIED"]
  val wait_failed: unit -> ([`L_n_37149[@js 37149]] [@js.enum]) [@@js.get "WAIT_FAILED"]
  val sync_flush_commands_bit: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SYNC_FLUSH_COMMANDS_BIT"]
  val vertex_attrib_array_divisor: unit -> ([`L_n_35070[@js 35070]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_DIVISOR"]
  val any_samples_passed: unit -> ([`L_n_35887[@js 35887]] [@js.enum]) [@@js.get "ANY_SAMPLES_PASSED"]
  val any_samples_passed_conservative: unit -> ([`L_n_36202[@js 36202]] [@js.enum]) [@@js.get "ANY_SAMPLES_PASSED_CONSERVATIVE"]
  val sampler_binding: unit -> ([`L_n_35097[@js 35097]] [@js.enum]) [@@js.get "SAMPLER_BINDING"]
  val rgb10_a2ui: unit -> ([`L_n_36975[@js 36975]] [@js.enum]) [@@js.get "RGB10_A2UI"]
  val int_2_10_10_10_rev: unit -> ([`L_n_36255[@js 36255]] [@js.enum]) [@@js.get "INT_2_10_10_10_REV"]
  val transform_feedback: unit -> ([`L_n_36386[@js 36386]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK"]
  val transform_feedback_paused: unit -> ([`L_n_36387[@js 36387]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_PAUSED"]
  val transform_feedback_active: unit -> ([`L_n_36388[@js 36388]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_ACTIVE"]
  val transform_feedback_binding: unit -> ([`L_n_36389[@js 36389]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_BINDING"]
  val texture_immutable_format: unit -> ([`L_n_37167[@js 37167]] [@js.enum]) [@@js.get "TEXTURE_IMMUTABLE_FORMAT"]
  val max_element_index: unit -> ([`L_n_36203[@js 36203]] [@js.enum]) [@@js.get "MAX_ELEMENT_INDEX"]
  val texture_immutable_levels: unit -> ([`L_n_33503[@js 33503]] [@js.enum]) [@@js.get "TEXTURE_IMMUTABLE_LEVELS"]
  val timeout_ignored: unit -> ([`L_n_minus1[@js -1]] [@js.enum]) [@@js.get "TIMEOUT_IGNORED"]
  val max_client_wait_timeout_webgl: unit -> ([`L_n_37447[@js 37447]] [@js.enum]) [@@js.get "MAX_CLIENT_WAIT_TIMEOUT_WEBGL"]
  val depth_buffer_bit: unit -> ([`L_n_256[@js 256]] [@js.enum]) [@@js.get "DEPTH_BUFFER_BIT"]
  val stencil_buffer_bit: unit -> ([`L_n_1024[@js 1024]] [@js.enum]) [@@js.get "STENCIL_BUFFER_BIT"]
  val color_buffer_bit: unit -> ([`L_n_16384[@js 16384]] [@js.enum]) [@@js.get "COLOR_BUFFER_BIT"]
  val points: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "POINTS"]
  val lines: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "LINES"]
  val line_loop: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "LINE_LOOP"]
  val line_strip: unit -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "LINE_STRIP"]
  val triangles: unit -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "TRIANGLES"]
  val triangle_strip: unit -> ([`L_n_5[@js 5]] [@js.enum]) [@@js.get "TRIANGLE_STRIP"]
  val triangle_fan: unit -> ([`L_n_6[@js 6]] [@js.enum]) [@@js.get "TRIANGLE_FAN"]
  val zero: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "ZERO"]
  val one: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "ONE"]
  val src_color: unit -> ([`L_n_768[@js 768]] [@js.enum]) [@@js.get "SRC_COLOR"]
  val one_minus_src_color: unit -> ([`L_n_769[@js 769]] [@js.enum]) [@@js.get "ONE_MINUS_SRC_COLOR"]
  val src_alpha: unit -> ([`L_n_770[@js 770]] [@js.enum]) [@@js.get "SRC_ALPHA"]
  val one_minus_src_alpha: unit -> ([`L_n_771[@js 771]] [@js.enum]) [@@js.get "ONE_MINUS_SRC_ALPHA"]
  val dst_alpha: unit -> ([`L_n_772[@js 772]] [@js.enum]) [@@js.get "DST_ALPHA"]
  val one_minus_dst_alpha: unit -> ([`L_n_773[@js 773]] [@js.enum]) [@@js.get "ONE_MINUS_DST_ALPHA"]
  val dst_color: unit -> ([`L_n_774[@js 774]] [@js.enum]) [@@js.get "DST_COLOR"]
  val one_minus_dst_color: unit -> ([`L_n_775[@js 775]] [@js.enum]) [@@js.get "ONE_MINUS_DST_COLOR"]
  val src_alpha_saturate: unit -> ([`L_n_776[@js 776]] [@js.enum]) [@@js.get "SRC_ALPHA_SATURATE"]
  val func_add: unit -> ([`L_n_32774[@js 32774]] [@js.enum]) [@@js.get "FUNC_ADD"]
  val blend_equation: unit -> ([`L_n_32777[@js 32777]] [@js.enum]) [@@js.get "BLEND_EQUATION"]
  val blend_equation_rgb: unit -> ([`L_n_32777[@js 32777]] [@js.enum]) [@@js.get "BLEND_EQUATION_RGB"]
  val blend_equation_alpha: unit -> ([`L_n_34877[@js 34877]] [@js.enum]) [@@js.get "BLEND_EQUATION_ALPHA"]
  val func_subtract: unit -> ([`L_n_32778[@js 32778]] [@js.enum]) [@@js.get "FUNC_SUBTRACT"]
  val func_reverse_subtract: unit -> ([`L_n_32779[@js 32779]] [@js.enum]) [@@js.get "FUNC_REVERSE_SUBTRACT"]
  val blend_dst_rgb: unit -> ([`L_n_32968[@js 32968]] [@js.enum]) [@@js.get "BLEND_DST_RGB"]
  val blend_src_rgb: unit -> ([`L_n_32969[@js 32969]] [@js.enum]) [@@js.get "BLEND_SRC_RGB"]
  val blend_dst_alpha: unit -> ([`L_n_32970[@js 32970]] [@js.enum]) [@@js.get "BLEND_DST_ALPHA"]
  val blend_src_alpha: unit -> ([`L_n_32971[@js 32971]] [@js.enum]) [@@js.get "BLEND_SRC_ALPHA"]
  val constant_color: unit -> ([`L_n_32769[@js 32769]] [@js.enum]) [@@js.get "CONSTANT_COLOR"]
  val one_minus_constant_color: unit -> ([`L_n_32770[@js 32770]] [@js.enum]) [@@js.get "ONE_MINUS_CONSTANT_COLOR"]
  val constant_alpha: unit -> ([`L_n_32771[@js 32771]] [@js.enum]) [@@js.get "CONSTANT_ALPHA"]
  val one_minus_constant_alpha: unit -> ([`L_n_32772[@js 32772]] [@js.enum]) [@@js.get "ONE_MINUS_CONSTANT_ALPHA"]
  val blend_color: unit -> ([`L_n_32773[@js 32773]] [@js.enum]) [@@js.get "BLEND_COLOR"]
  val array_buffer: unit -> ([`L_n_34962[@js 34962]] [@js.enum]) [@@js.get "ARRAY_BUFFER"]
  val element_array_buffer: unit -> ([`L_n_34963[@js 34963]] [@js.enum]) [@@js.get "ELEMENT_ARRAY_BUFFER"]
  val array_buffer_binding: unit -> ([`L_n_34964[@js 34964]] [@js.enum]) [@@js.get "ARRAY_BUFFER_BINDING"]
  val element_array_buffer_binding: unit -> ([`L_n_34965[@js 34965]] [@js.enum]) [@@js.get "ELEMENT_ARRAY_BUFFER_BINDING"]
  val stream_draw: unit -> ([`L_n_35040[@js 35040]] [@js.enum]) [@@js.get "STREAM_DRAW"]
  val static_draw: unit -> ([`L_n_35044[@js 35044]] [@js.enum]) [@@js.get "STATIC_DRAW"]
  val dynamic_draw: unit -> ([`L_n_35048[@js 35048]] [@js.enum]) [@@js.get "DYNAMIC_DRAW"]
  val buffer_size: unit -> ([`L_n_34660[@js 34660]] [@js.enum]) [@@js.get "BUFFER_SIZE"]
  val buffer_usage: unit -> ([`L_n_34661[@js 34661]] [@js.enum]) [@@js.get "BUFFER_USAGE"]
  val current_vertex_attrib: unit -> ([`L_n_34342[@js 34342]] [@js.enum]) [@@js.get "CURRENT_VERTEX_ATTRIB"]
  val front: unit -> ([`L_n_1028[@js 1028]] [@js.enum]) [@@js.get "FRONT"]
  val back: unit -> ([`L_n_1029[@js 1029]] [@js.enum]) [@@js.get "BACK"]
  val front_and_back: unit -> ([`L_n_1032[@js 1032]] [@js.enum]) [@@js.get "FRONT_AND_BACK"]
  val cull_face: unit -> ([`L_n_2884[@js 2884]] [@js.enum]) [@@js.get "CULL_FACE"]
  val blend: unit -> ([`L_n_3042[@js 3042]] [@js.enum]) [@@js.get "BLEND"]
  val dither: unit -> ([`L_n_3024[@js 3024]] [@js.enum]) [@@js.get "DITHER"]
  val stencil_test: unit -> ([`L_n_2960[@js 2960]] [@js.enum]) [@@js.get "STENCIL_TEST"]
  val depth_test: unit -> ([`L_n_2929[@js 2929]] [@js.enum]) [@@js.get "DEPTH_TEST"]
  val scissor_test: unit -> ([`L_n_3089[@js 3089]] [@js.enum]) [@@js.get "SCISSOR_TEST"]
  val polygon_offset_fill: unit -> ([`L_n_32823[@js 32823]] [@js.enum]) [@@js.get "POLYGON_OFFSET_FILL"]
  val sample_alpha_to_coverage: unit -> ([`L_n_32926[@js 32926]] [@js.enum]) [@@js.get "SAMPLE_ALPHA_TO_COVERAGE"]
  val sample_coverage: unit -> ([`L_n_32928[@js 32928]] [@js.enum]) [@@js.get "SAMPLE_COVERAGE"]
  val no_error: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "NO_ERROR"]
  val invalid_enum: unit -> ([`L_n_1280[@js 1280]] [@js.enum]) [@@js.get "INVALID_ENUM"]
  val invalid_value: unit -> ([`L_n_1281[@js 1281]] [@js.enum]) [@@js.get "INVALID_VALUE"]
  val invalid_operation: unit -> ([`L_n_1282[@js 1282]] [@js.enum]) [@@js.get "INVALID_OPERATION"]
  val out_of_memory: unit -> ([`L_n_1285[@js 1285]] [@js.enum]) [@@js.get "OUT_OF_MEMORY"]
  val cw: unit -> ([`L_n_2304[@js 2304]] [@js.enum]) [@@js.get "CW"]
  val ccw: unit -> ([`L_n_2305[@js 2305]] [@js.enum]) [@@js.get "CCW"]
  val line_width: unit -> ([`L_n_2849[@js 2849]] [@js.enum]) [@@js.get "LINE_WIDTH"]
  val aliased_point_size_range: unit -> ([`L_n_33901[@js 33901]] [@js.enum]) [@@js.get "ALIASED_POINT_SIZE_RANGE"]
  val aliased_line_width_range: unit -> ([`L_n_33902[@js 33902]] [@js.enum]) [@@js.get "ALIASED_LINE_WIDTH_RANGE"]
  val cull_face_mode: unit -> ([`L_n_2885[@js 2885]] [@js.enum]) [@@js.get "CULL_FACE_MODE"]
  val front_face: unit -> ([`L_n_2886[@js 2886]] [@js.enum]) [@@js.get "FRONT_FACE"]
  val depth_range: unit -> ([`L_n_2928[@js 2928]] [@js.enum]) [@@js.get "DEPTH_RANGE"]
  val depth_writemask: unit -> ([`L_n_2930[@js 2930]] [@js.enum]) [@@js.get "DEPTH_WRITEMASK"]
  val depth_clear_value: unit -> ([`L_n_2931[@js 2931]] [@js.enum]) [@@js.get "DEPTH_CLEAR_VALUE"]
  val depth_func: unit -> ([`L_n_2932[@js 2932]] [@js.enum]) [@@js.get "DEPTH_FUNC"]
  val stencil_clear_value: unit -> ([`L_n_2961[@js 2961]] [@js.enum]) [@@js.get "STENCIL_CLEAR_VALUE"]
  val stencil_func: unit -> ([`L_n_2962[@js 2962]] [@js.enum]) [@@js.get "STENCIL_FUNC"]
  val stencil_fail: unit -> ([`L_n_2964[@js 2964]] [@js.enum]) [@@js.get "STENCIL_FAIL"]
  val stencil_pass_depth_fail: unit -> ([`L_n_2965[@js 2965]] [@js.enum]) [@@js.get "STENCIL_PASS_DEPTH_FAIL"]
  val stencil_pass_depth_pass: unit -> ([`L_n_2966[@js 2966]] [@js.enum]) [@@js.get "STENCIL_PASS_DEPTH_PASS"]
  val stencil_ref: unit -> ([`L_n_2967[@js 2967]] [@js.enum]) [@@js.get "STENCIL_REF"]
  val stencil_value_mask: unit -> ([`L_n_2963[@js 2963]] [@js.enum]) [@@js.get "STENCIL_VALUE_MASK"]
  val stencil_writemask: unit -> ([`L_n_2968[@js 2968]] [@js.enum]) [@@js.get "STENCIL_WRITEMASK"]
  val stencil_back_func: unit -> ([`L_n_34816[@js 34816]] [@js.enum]) [@@js.get "STENCIL_BACK_FUNC"]
  val stencil_back_fail: unit -> ([`L_n_34817[@js 34817]] [@js.enum]) [@@js.get "STENCIL_BACK_FAIL"]
  val stencil_back_pass_depth_fail: unit -> ([`L_n_34818[@js 34818]] [@js.enum]) [@@js.get "STENCIL_BACK_PASS_DEPTH_FAIL"]
  val stencil_back_pass_depth_pass: unit -> ([`L_n_34819[@js 34819]] [@js.enum]) [@@js.get "STENCIL_BACK_PASS_DEPTH_PASS"]
  val stencil_back_ref: unit -> ([`L_n_36003[@js 36003]] [@js.enum]) [@@js.get "STENCIL_BACK_REF"]
  val stencil_back_value_mask: unit -> ([`L_n_36004[@js 36004]] [@js.enum]) [@@js.get "STENCIL_BACK_VALUE_MASK"]
  val stencil_back_writemask: unit -> ([`L_n_36005[@js 36005]] [@js.enum]) [@@js.get "STENCIL_BACK_WRITEMASK"]
  val viewport: unit -> ([`L_n_2978[@js 2978]] [@js.enum]) [@@js.get "VIEWPORT"]
  val scissor_box: unit -> ([`L_n_3088[@js 3088]] [@js.enum]) [@@js.get "SCISSOR_BOX"]
  val color_clear_value: unit -> ([`L_n_3106[@js 3106]] [@js.enum]) [@@js.get "COLOR_CLEAR_VALUE"]
  val color_writemask: unit -> ([`L_n_3107[@js 3107]] [@js.enum]) [@@js.get "COLOR_WRITEMASK"]
  val unpack_alignment: unit -> ([`L_n_3317[@js 3317]] [@js.enum]) [@@js.get "UNPACK_ALIGNMENT"]
  val pack_alignment: unit -> ([`L_n_3333[@js 3333]] [@js.enum]) [@@js.get "PACK_ALIGNMENT"]
  val max_texture_size: unit -> ([`L_n_3379[@js 3379]] [@js.enum]) [@@js.get "MAX_TEXTURE_SIZE"]
  val max_viewport_dims: unit -> ([`L_n_3386[@js 3386]] [@js.enum]) [@@js.get "MAX_VIEWPORT_DIMS"]
  val subpixel_bits: unit -> ([`L_n_3408[@js 3408]] [@js.enum]) [@@js.get "SUBPIXEL_BITS"]
  val red_bits: unit -> ([`L_n_3410[@js 3410]] [@js.enum]) [@@js.get "RED_BITS"]
  val green_bits: unit -> ([`L_n_3411[@js 3411]] [@js.enum]) [@@js.get "GREEN_BITS"]
  val blue_bits: unit -> ([`L_n_3412[@js 3412]] [@js.enum]) [@@js.get "BLUE_BITS"]
  val alpha_bits: unit -> ([`L_n_3413[@js 3413]] [@js.enum]) [@@js.get "ALPHA_BITS"]
  val depth_bits: unit -> ([`L_n_3414[@js 3414]] [@js.enum]) [@@js.get "DEPTH_BITS"]
  val stencil_bits: unit -> ([`L_n_3415[@js 3415]] [@js.enum]) [@@js.get "STENCIL_BITS"]
  val polygon_offset_units: unit -> ([`L_n_10752[@js 10752]] [@js.enum]) [@@js.get "POLYGON_OFFSET_UNITS"]
  val polygon_offset_factor: unit -> ([`L_n_32824[@js 32824]] [@js.enum]) [@@js.get "POLYGON_OFFSET_FACTOR"]
  val texture_binding_2d: unit -> ([`L_n_32873[@js 32873]] [@js.enum]) [@@js.get "TEXTURE_BINDING_2D"]
  val sample_buffers: unit -> ([`L_n_32936[@js 32936]] [@js.enum]) [@@js.get "SAMPLE_BUFFERS"]
  val samples: unit -> ([`L_n_32937[@js 32937]] [@js.enum]) [@@js.get "SAMPLES"]
  val sample_coverage_value: unit -> ([`L_n_32938[@js 32938]] [@js.enum]) [@@js.get "SAMPLE_COVERAGE_VALUE"]
  val sample_coverage_invert: unit -> ([`L_n_32939[@js 32939]] [@js.enum]) [@@js.get "SAMPLE_COVERAGE_INVERT"]
  val compressed_texture_formats: unit -> ([`L_n_34467[@js 34467]] [@js.enum]) [@@js.get "COMPRESSED_TEXTURE_FORMATS"]
  val dont_care: unit -> ([`L_n_4352[@js 4352]] [@js.enum]) [@@js.get "DONT_CARE"]
  val fastest: unit -> ([`L_n_4353[@js 4353]] [@js.enum]) [@@js.get "FASTEST"]
  val nicest: unit -> ([`L_n_4354[@js 4354]] [@js.enum]) [@@js.get "NICEST"]
  val generate_mipmap_hint: unit -> ([`L_n_33170[@js 33170]] [@js.enum]) [@@js.get "GENERATE_MIPMAP_HINT"]
  val byte: unit -> ([`L_n_5120[@js 5120]] [@js.enum]) [@@js.get "BYTE"]
  val unsigned_byte: unit -> ([`L_n_5121[@js 5121]] [@js.enum]) [@@js.get "UNSIGNED_BYTE"]
  val short: unit -> ([`L_n_5122[@js 5122]] [@js.enum]) [@@js.get "SHORT"]
  val unsigned_short: unit -> ([`L_n_5123[@js 5123]] [@js.enum]) [@@js.get "UNSIGNED_SHORT"]
  val int: unit -> ([`L_n_5124[@js 5124]] [@js.enum]) [@@js.get "INT"]
  val unsigned_int: unit -> ([`L_n_5125[@js 5125]] [@js.enum]) [@@js.get "UNSIGNED_INT"]
  val float: unit -> ([`L_n_5126[@js 5126]] [@js.enum]) [@@js.get "FLOAT"]
  val depth_component: unit -> ([`L_n_6402[@js 6402]] [@js.enum]) [@@js.get "DEPTH_COMPONENT"]
  val alpha: unit -> ([`L_n_6406[@js 6406]] [@js.enum]) [@@js.get "ALPHA"]
  val rgb: unit -> ([`L_n_6407[@js 6407]] [@js.enum]) [@@js.get "RGB"]
  val rgba: unit -> ([`L_n_6408[@js 6408]] [@js.enum]) [@@js.get "RGBA"]
  val luminance: unit -> ([`L_n_6409[@js 6409]] [@js.enum]) [@@js.get "LUMINANCE"]
  val luminance_alpha: unit -> ([`L_n_6410[@js 6410]] [@js.enum]) [@@js.get "LUMINANCE_ALPHA"]
  val unsigned_short_4_4_4_4: unit -> ([`L_n_32819[@js 32819]] [@js.enum]) [@@js.get "UNSIGNED_SHORT_4_4_4_4"]
  val unsigned_short_5_5_5_1: unit -> ([`L_n_32820[@js 32820]] [@js.enum]) [@@js.get "UNSIGNED_SHORT_5_5_5_1"]
  val unsigned_short_5_6_5: unit -> ([`L_n_33635[@js 33635]] [@js.enum]) [@@js.get "UNSIGNED_SHORT_5_6_5"]
  val fragment_shader: unit -> ([`L_n_35632[@js 35632]] [@js.enum]) [@@js.get "FRAGMENT_SHADER"]
  val vertex_shader: unit -> ([`L_n_35633[@js 35633]] [@js.enum]) [@@js.get "VERTEX_SHADER"]
  val max_vertex_attribs: unit -> ([`L_n_34921[@js 34921]] [@js.enum]) [@@js.get "MAX_VERTEX_ATTRIBS"]
  val max_vertex_uniform_vectors: unit -> ([`L_n_36347[@js 36347]] [@js.enum]) [@@js.get "MAX_VERTEX_UNIFORM_VECTORS"]
  val max_varying_vectors: unit -> ([`L_n_36348[@js 36348]] [@js.enum]) [@@js.get "MAX_VARYING_VECTORS"]
  val max_combined_texture_image_units: unit -> ([`L_n_35661[@js 35661]] [@js.enum]) [@@js.get "MAX_COMBINED_TEXTURE_IMAGE_UNITS"]
  val max_vertex_texture_image_units: unit -> ([`L_n_35660[@js 35660]] [@js.enum]) [@@js.get "MAX_VERTEX_TEXTURE_IMAGE_UNITS"]
  val max_texture_image_units: unit -> ([`L_n_34930[@js 34930]] [@js.enum]) [@@js.get "MAX_TEXTURE_IMAGE_UNITS"]
  val max_fragment_uniform_vectors: unit -> ([`L_n_36349[@js 36349]] [@js.enum]) [@@js.get "MAX_FRAGMENT_UNIFORM_VECTORS"]
  val shader_type: unit -> ([`L_n_35663[@js 35663]] [@js.enum]) [@@js.get "SHADER_TYPE"]
  val delete_status: unit -> ([`L_n_35712[@js 35712]] [@js.enum]) [@@js.get "DELETE_STATUS"]
  val link_status: unit -> ([`L_n_35714[@js 35714]] [@js.enum]) [@@js.get "LINK_STATUS"]
  val validate_status: unit -> ([`L_n_35715[@js 35715]] [@js.enum]) [@@js.get "VALIDATE_STATUS"]
  val attached_shaders: unit -> ([`L_n_35717[@js 35717]] [@js.enum]) [@@js.get "ATTACHED_SHADERS"]
  val active_uniforms: unit -> ([`L_n_35718[@js 35718]] [@js.enum]) [@@js.get "ACTIVE_UNIFORMS"]
  val active_attributes: unit -> ([`L_n_35721[@js 35721]] [@js.enum]) [@@js.get "ACTIVE_ATTRIBUTES"]
  val shading_language_version: unit -> ([`L_n_35724[@js 35724]] [@js.enum]) [@@js.get "SHADING_LANGUAGE_VERSION"]
  val current_program: unit -> ([`L_n_35725[@js 35725]] [@js.enum]) [@@js.get "CURRENT_PROGRAM"]
  val never: unit -> ([`L_n_512[@js 512]] [@js.enum]) [@@js.get "NEVER"]
  val less: unit -> ([`L_n_513[@js 513]] [@js.enum]) [@@js.get "LESS"]
  val equal: unit -> ([`L_n_514[@js 514]] [@js.enum]) [@@js.get "EQUAL"]
  val lequal: unit -> ([`L_n_515[@js 515]] [@js.enum]) [@@js.get "LEQUAL"]
  val greater: unit -> ([`L_n_516[@js 516]] [@js.enum]) [@@js.get "GREATER"]
  val notequal: unit -> ([`L_n_517[@js 517]] [@js.enum]) [@@js.get "NOTEQUAL"]
  val gequal: unit -> ([`L_n_518[@js 518]] [@js.enum]) [@@js.get "GEQUAL"]
  val always: unit -> ([`L_n_519[@js 519]] [@js.enum]) [@@js.get "ALWAYS"]
  val keep: unit -> ([`L_n_7680[@js 7680]] [@js.enum]) [@@js.get "KEEP"]
  val replace: unit -> ([`L_n_7681[@js 7681]] [@js.enum]) [@@js.get "REPLACE"]
  val incr: unit -> ([`L_n_7682[@js 7682]] [@js.enum]) [@@js.get "INCR"]
  val decr: unit -> ([`L_n_7683[@js 7683]] [@js.enum]) [@@js.get "DECR"]
  val invert: unit -> ([`L_n_5386[@js 5386]] [@js.enum]) [@@js.get "INVERT"]
  val incr_wrap: unit -> ([`L_n_34055[@js 34055]] [@js.enum]) [@@js.get "INCR_WRAP"]
  val decr_wrap: unit -> ([`L_n_34056[@js 34056]] [@js.enum]) [@@js.get "DECR_WRAP"]
  val vendor: unit -> ([`L_n_7936[@js 7936]] [@js.enum]) [@@js.get "VENDOR"]
  val renderer: unit -> ([`L_n_7937[@js 7937]] [@js.enum]) [@@js.get "RENDERER"]
  val version: unit -> ([`L_n_7938[@js 7938]] [@js.enum]) [@@js.get "VERSION"]
  val nearest: unit -> ([`L_n_9728[@js 9728]] [@js.enum]) [@@js.get "NEAREST"]
  val linear: unit -> ([`L_n_9729[@js 9729]] [@js.enum]) [@@js.get "LINEAR"]
  val nearest_mipmap_nearest: unit -> ([`L_n_9984[@js 9984]] [@js.enum]) [@@js.get "NEAREST_MIPMAP_NEAREST"]
  val linear_mipmap_nearest: unit -> ([`L_n_9985[@js 9985]] [@js.enum]) [@@js.get "LINEAR_MIPMAP_NEAREST"]
  val nearest_mipmap_linear: unit -> ([`L_n_9986[@js 9986]] [@js.enum]) [@@js.get "NEAREST_MIPMAP_LINEAR"]
  val linear_mipmap_linear: unit -> ([`L_n_9987[@js 9987]] [@js.enum]) [@@js.get "LINEAR_MIPMAP_LINEAR"]
  val texture_mag_filter: unit -> ([`L_n_10240[@js 10240]] [@js.enum]) [@@js.get "TEXTURE_MAG_FILTER"]
  val texture_min_filter: unit -> ([`L_n_10241[@js 10241]] [@js.enum]) [@@js.get "TEXTURE_MIN_FILTER"]
  val texture_wrap_s: unit -> ([`L_n_10242[@js 10242]] [@js.enum]) [@@js.get "TEXTURE_WRAP_S"]
  val texture_wrap_t: unit -> ([`L_n_10243[@js 10243]] [@js.enum]) [@@js.get "TEXTURE_WRAP_T"]
  val texture_2d: unit -> ([`L_n_3553[@js 3553]] [@js.enum]) [@@js.get "TEXTURE_2D"]
  val texture: unit -> ([`L_n_5890[@js 5890]] [@js.enum]) [@@js.get "TEXTURE"]
  val texture_cube_map: unit -> ([`L_n_34067[@js 34067]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP"]
  val texture_binding_cube_map: unit -> ([`L_n_34068[@js 34068]] [@js.enum]) [@@js.get "TEXTURE_BINDING_CUBE_MAP"]
  val texture_cube_map_positive_x: unit -> ([`L_n_34069[@js 34069]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP_POSITIVE_X"]
  val texture_cube_map_negative_x: unit -> ([`L_n_34070[@js 34070]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP_NEGATIVE_X"]
  val texture_cube_map_positive_y: unit -> ([`L_n_34071[@js 34071]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP_POSITIVE_Y"]
  val texture_cube_map_negative_y: unit -> ([`L_n_34072[@js 34072]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP_NEGATIVE_Y"]
  val texture_cube_map_positive_z: unit -> ([`L_n_34073[@js 34073]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP_POSITIVE_Z"]
  val texture_cube_map_negative_z: unit -> ([`L_n_34074[@js 34074]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP_NEGATIVE_Z"]
  val max_cube_map_texture_size: unit -> ([`L_n_34076[@js 34076]] [@js.enum]) [@@js.get "MAX_CUBE_MAP_TEXTURE_SIZE"]
  val texture0: unit -> ([`L_n_33984[@js 33984]] [@js.enum]) [@@js.get "TEXTURE0"]
  val texture1: unit -> ([`L_n_33985[@js 33985]] [@js.enum]) [@@js.get "TEXTURE1"]
  val texture2: unit -> ([`L_n_33986[@js 33986]] [@js.enum]) [@@js.get "TEXTURE2"]
  val texture3: unit -> ([`L_n_33987[@js 33987]] [@js.enum]) [@@js.get "TEXTURE3"]
  val texture4: unit -> ([`L_n_33988[@js 33988]] [@js.enum]) [@@js.get "TEXTURE4"]
  val texture5: unit -> ([`L_n_33989[@js 33989]] [@js.enum]) [@@js.get "TEXTURE5"]
  val texture6: unit -> ([`L_n_33990[@js 33990]] [@js.enum]) [@@js.get "TEXTURE6"]
  val texture7: unit -> ([`L_n_33991[@js 33991]] [@js.enum]) [@@js.get "TEXTURE7"]
  val texture8: unit -> ([`L_n_33992[@js 33992]] [@js.enum]) [@@js.get "TEXTURE8"]
  val texture9: unit -> ([`L_n_33993[@js 33993]] [@js.enum]) [@@js.get "TEXTURE9"]
  val texture10: unit -> ([`L_n_33994[@js 33994]] [@js.enum]) [@@js.get "TEXTURE10"]
  val texture11: unit -> ([`L_n_33995[@js 33995]] [@js.enum]) [@@js.get "TEXTURE11"]
  val texture12: unit -> ([`L_n_33996[@js 33996]] [@js.enum]) [@@js.get "TEXTURE12"]
  val texture13: unit -> ([`L_n_33997[@js 33997]] [@js.enum]) [@@js.get "TEXTURE13"]
  val texture14: unit -> ([`L_n_33998[@js 33998]] [@js.enum]) [@@js.get "TEXTURE14"]
  val texture15: unit -> ([`L_n_33999[@js 33999]] [@js.enum]) [@@js.get "TEXTURE15"]
  val texture16: unit -> ([`L_n_34000[@js 34000]] [@js.enum]) [@@js.get "TEXTURE16"]
  val texture17: unit -> ([`L_n_34001[@js 34001]] [@js.enum]) [@@js.get "TEXTURE17"]
  val texture18: unit -> ([`L_n_34002[@js 34002]] [@js.enum]) [@@js.get "TEXTURE18"]
  val texture19: unit -> ([`L_n_34003[@js 34003]] [@js.enum]) [@@js.get "TEXTURE19"]
  val texture20: unit -> ([`L_n_34004[@js 34004]] [@js.enum]) [@@js.get "TEXTURE20"]
  val texture21: unit -> ([`L_n_34005[@js 34005]] [@js.enum]) [@@js.get "TEXTURE21"]
  val texture22: unit -> ([`L_n_34006[@js 34006]] [@js.enum]) [@@js.get "TEXTURE22"]
  val texture23: unit -> ([`L_n_34007[@js 34007]] [@js.enum]) [@@js.get "TEXTURE23"]
  val texture24: unit -> ([`L_n_34008[@js 34008]] [@js.enum]) [@@js.get "TEXTURE24"]
  val texture25: unit -> ([`L_n_34009[@js 34009]] [@js.enum]) [@@js.get "TEXTURE25"]
  val texture26: unit -> ([`L_n_34010[@js 34010]] [@js.enum]) [@@js.get "TEXTURE26"]
  val texture27: unit -> ([`L_n_34011[@js 34011]] [@js.enum]) [@@js.get "TEXTURE27"]
  val texture28: unit -> ([`L_n_34012[@js 34012]] [@js.enum]) [@@js.get "TEXTURE28"]
  val texture29: unit -> ([`L_n_34013[@js 34013]] [@js.enum]) [@@js.get "TEXTURE29"]
  val texture30: unit -> ([`L_n_34014[@js 34014]] [@js.enum]) [@@js.get "TEXTURE30"]
  val texture31: unit -> ([`L_n_34015[@js 34015]] [@js.enum]) [@@js.get "TEXTURE31"]
  val active_texture: unit -> ([`L_n_34016[@js 34016]] [@js.enum]) [@@js.get "ACTIVE_TEXTURE"]
  val repeat: unit -> ([`L_n_10497[@js 10497]] [@js.enum]) [@@js.get "REPEAT"]
  val clamp_to_edge: unit -> ([`L_n_33071[@js 33071]] [@js.enum]) [@@js.get "CLAMP_TO_EDGE"]
  val mirrored_repeat: unit -> ([`L_n_33648[@js 33648]] [@js.enum]) [@@js.get "MIRRORED_REPEAT"]
  val float_vec2: unit -> ([`L_n_35664[@js 35664]] [@js.enum]) [@@js.get "FLOAT_VEC2"]
  val float_vec3: unit -> ([`L_n_35665[@js 35665]] [@js.enum]) [@@js.get "FLOAT_VEC3"]
  val float_vec4: unit -> ([`L_n_35666[@js 35666]] [@js.enum]) [@@js.get "FLOAT_VEC4"]
  val int_vec2: unit -> ([`L_n_35667[@js 35667]] [@js.enum]) [@@js.get "INT_VEC2"]
  val int_vec3: unit -> ([`L_n_35668[@js 35668]] [@js.enum]) [@@js.get "INT_VEC3"]
  val int_vec4: unit -> ([`L_n_35669[@js 35669]] [@js.enum]) [@@js.get "INT_VEC4"]
  val bool: unit -> ([`L_n_35670[@js 35670]] [@js.enum]) [@@js.get "BOOL"]
  val bool_vec2: unit -> ([`L_n_35671[@js 35671]] [@js.enum]) [@@js.get "BOOL_VEC2"]
  val bool_vec3: unit -> ([`L_n_35672[@js 35672]] [@js.enum]) [@@js.get "BOOL_VEC3"]
  val bool_vec4: unit -> ([`L_n_35673[@js 35673]] [@js.enum]) [@@js.get "BOOL_VEC4"]
  val float_mat2: unit -> ([`L_n_35674[@js 35674]] [@js.enum]) [@@js.get "FLOAT_MAT2"]
  val float_mat3: unit -> ([`L_n_35675[@js 35675]] [@js.enum]) [@@js.get "FLOAT_MAT3"]
  val float_mat4: unit -> ([`L_n_35676[@js 35676]] [@js.enum]) [@@js.get "FLOAT_MAT4"]
  val sampler_2d: unit -> ([`L_n_35678[@js 35678]] [@js.enum]) [@@js.get "SAMPLER_2D"]
  val sampler_cube: unit -> ([`L_n_35680[@js 35680]] [@js.enum]) [@@js.get "SAMPLER_CUBE"]
  val vertex_attrib_array_enabled: unit -> ([`L_n_34338[@js 34338]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_ENABLED"]
  val vertex_attrib_array_size: unit -> ([`L_n_34339[@js 34339]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_SIZE"]
  val vertex_attrib_array_stride: unit -> ([`L_n_34340[@js 34340]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_STRIDE"]
  val vertex_attrib_array_type: unit -> ([`L_n_34341[@js 34341]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_TYPE"]
  val vertex_attrib_array_normalized: unit -> ([`L_n_34922[@js 34922]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_NORMALIZED"]
  val vertex_attrib_array_pointer: unit -> ([`L_n_34373[@js 34373]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_POINTER"]
  val vertex_attrib_array_buffer_binding: unit -> ([`L_n_34975[@js 34975]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING"]
  val implementation_color_read_type: unit -> ([`L_n_35738[@js 35738]] [@js.enum]) [@@js.get "IMPLEMENTATION_COLOR_READ_TYPE"]
  val implementation_color_read_format: unit -> ([`L_n_35739[@js 35739]] [@js.enum]) [@@js.get "IMPLEMENTATION_COLOR_READ_FORMAT"]
  val compile_status: unit -> ([`L_n_35713[@js 35713]] [@js.enum]) [@@js.get "COMPILE_STATUS"]
  val low_float: unit -> ([`L_n_36336[@js 36336]] [@js.enum]) [@@js.get "LOW_FLOAT"]
  val medium_float: unit -> ([`L_n_36337[@js 36337]] [@js.enum]) [@@js.get "MEDIUM_FLOAT"]
  val high_float: unit -> ([`L_n_36338[@js 36338]] [@js.enum]) [@@js.get "HIGH_FLOAT"]
  val low_int: unit -> ([`L_n_36339[@js 36339]] [@js.enum]) [@@js.get "LOW_INT"]
  val medium_int: unit -> ([`L_n_36340[@js 36340]] [@js.enum]) [@@js.get "MEDIUM_INT"]
  val high_int: unit -> ([`L_n_36341[@js 36341]] [@js.enum]) [@@js.get "HIGH_INT"]
  val framebuffer: unit -> ([`L_n_36160[@js 36160]] [@js.enum]) [@@js.get "FRAMEBUFFER"]
  val renderbuffer: unit -> ([`L_n_36161[@js 36161]] [@js.enum]) [@@js.get "RENDERBUFFER"]
  val rgba4: unit -> ([`L_n_32854[@js 32854]] [@js.enum]) [@@js.get "RGBA4"]
  val rgb5_a1: unit -> ([`L_n_32855[@js 32855]] [@js.enum]) [@@js.get "RGB5_A1"]
  val rgba8: unit -> ([`L_n_32856[@js 32856]] [@js.enum]) [@@js.get "RGBA8"]
  val rgb565: unit -> ([`L_n_36194[@js 36194]] [@js.enum]) [@@js.get "RGB565"]
  val depth_component16: unit -> ([`L_n_33189[@js 33189]] [@js.enum]) [@@js.get "DEPTH_COMPONENT16"]
  val stencil_index8: unit -> ([`L_n_36168[@js 36168]] [@js.enum]) [@@js.get "STENCIL_INDEX8"]
  val depth_stencil: unit -> ([`L_n_34041[@js 34041]] [@js.enum]) [@@js.get "DEPTH_STENCIL"]
  val renderbuffer_width: unit -> ([`L_n_36162[@js 36162]] [@js.enum]) [@@js.get "RENDERBUFFER_WIDTH"]
  val renderbuffer_height: unit -> ([`L_n_36163[@js 36163]] [@js.enum]) [@@js.get "RENDERBUFFER_HEIGHT"]
  val renderbuffer_internal_format: unit -> ([`L_n_36164[@js 36164]] [@js.enum]) [@@js.get "RENDERBUFFER_INTERNAL_FORMAT"]
  val renderbuffer_red_size: unit -> ([`L_n_36176[@js 36176]] [@js.enum]) [@@js.get "RENDERBUFFER_RED_SIZE"]
  val renderbuffer_green_size: unit -> ([`L_n_36177[@js 36177]] [@js.enum]) [@@js.get "RENDERBUFFER_GREEN_SIZE"]
  val renderbuffer_blue_size: unit -> ([`L_n_36178[@js 36178]] [@js.enum]) [@@js.get "RENDERBUFFER_BLUE_SIZE"]
  val renderbuffer_alpha_size: unit -> ([`L_n_36179[@js 36179]] [@js.enum]) [@@js.get "RENDERBUFFER_ALPHA_SIZE"]
  val renderbuffer_depth_size: unit -> ([`L_n_36180[@js 36180]] [@js.enum]) [@@js.get "RENDERBUFFER_DEPTH_SIZE"]
  val renderbuffer_stencil_size: unit -> ([`L_n_36181[@js 36181]] [@js.enum]) [@@js.get "RENDERBUFFER_STENCIL_SIZE"]
  val framebuffer_attachment_object_type: unit -> ([`L_n_36048[@js 36048]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE"]
  val framebuffer_attachment_object_name: unit -> ([`L_n_36049[@js 36049]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME"]
  val framebuffer_attachment_texture_level: unit -> ([`L_n_36050[@js 36050]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL"]
  val framebuffer_attachment_texture_cube_map_face: unit -> ([`L_n_36051[@js 36051]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE"]
  val color_attachment0: unit -> ([`L_n_36064[@js 36064]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT0"]
  val depth_attachment: unit -> ([`L_n_36096[@js 36096]] [@js.enum]) [@@js.get "DEPTH_ATTACHMENT"]
  val stencil_attachment: unit -> ([`L_n_36128[@js 36128]] [@js.enum]) [@@js.get "STENCIL_ATTACHMENT"]
  val depth_stencil_attachment: unit -> ([`L_n_33306[@js 33306]] [@js.enum]) [@@js.get "DEPTH_STENCIL_ATTACHMENT"]
  val none: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "NONE"]
  val framebuffer_complete: unit -> ([`L_n_36053[@js 36053]] [@js.enum]) [@@js.get "FRAMEBUFFER_COMPLETE"]
  val framebuffer_incomplete_attachment: unit -> ([`L_n_36054[@js 36054]] [@js.enum]) [@@js.get "FRAMEBUFFER_INCOMPLETE_ATTACHMENT"]
  val framebuffer_incomplete_missing_attachment: unit -> ([`L_n_36055[@js 36055]] [@js.enum]) [@@js.get "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"]
  val framebuffer_incomplete_dimensions: unit -> ([`L_n_36057[@js 36057]] [@js.enum]) [@@js.get "FRAMEBUFFER_INCOMPLETE_DIMENSIONS"]
  val framebuffer_unsupported: unit -> ([`L_n_36061[@js 36061]] [@js.enum]) [@@js.get "FRAMEBUFFER_UNSUPPORTED"]
  val framebuffer_binding: unit -> ([`L_n_36006[@js 36006]] [@js.enum]) [@@js.get "FRAMEBUFFER_BINDING"]
  val renderbuffer_binding: unit -> ([`L_n_36007[@js 36007]] [@js.enum]) [@@js.get "RENDERBUFFER_BINDING"]
  val max_renderbuffer_size: unit -> ([`L_n_34024[@js 34024]] [@js.enum]) [@@js.get "MAX_RENDERBUFFER_SIZE"]
  val invalid_framebuffer_operation: unit -> ([`L_n_1286[@js 1286]] [@js.enum]) [@@js.get "INVALID_FRAMEBUFFER_OPERATION"]
  val unpack_flip_y_webgl: unit -> ([`L_n_37440[@js 37440]] [@js.enum]) [@@js.get "UNPACK_FLIP_Y_WEBGL"]
  val unpack_premultiply_alpha_webgl: unit -> ([`L_n_37441[@js 37441]] [@js.enum]) [@@js.get "UNPACK_PREMULTIPLY_ALPHA_WEBGL"]
  val context_lost_webgl: unit -> ([`L_n_37442[@js 37442]] [@js.enum]) [@@js.get "CONTEXT_LOST_WEBGL"]
  val unpack_colorspace_conversion_webgl: unit -> ([`L_n_37443[@js 37443]] [@js.enum]) [@@js.get "UNPACK_COLORSPACE_CONVERSION_WEBGL"]
  val browser_default_webgl: unit -> ([`L_n_37444[@js 37444]] [@js.enum]) [@@js.get "BROWSER_DEFAULT_WEBGL"]
end
and WebGL2RenderingContextBase : sig
  type t = [`WebGL2RenderingContextBase] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGL2RenderingContextBase]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGL2RenderingContextBase]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGL2RenderingContextBase ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer) *)
  val clearBufferfv: 'tags this -> buffer:GLenum.t -> drawbuffer:GLint.t -> values:GLfloat.t Iterable.t -> ?srcOffset:float -> unit -> unit [@@js.call "clearBufferfv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer) *)
  val clearBufferiv: 'tags this -> buffer:GLenum.t -> drawbuffer:GLint.t -> values:GLint.t Iterable.t -> ?srcOffset:float -> unit -> unit [@@js.call "clearBufferiv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer) *)
  val clearBufferuiv: 'tags this -> buffer:GLenum.t -> drawbuffer:GLint.t -> values:GLuint.t Iterable.t -> ?srcOffset:float -> unit -> unit [@@js.call "clearBufferuiv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/drawBuffers) *)
  val drawBuffers: 'tags this -> buffers:GLenum.t Iterable.t -> unit [@@js.call "drawBuffers"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getActiveUniforms) *)
  val getActiveUniforms: 'tags this -> program:WebGLProgram.t -> uniformIndices:GLuint.t Iterable.t -> pname:GLenum.t -> any [@@js.call "getActiveUniforms"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getUniformIndices) *)
  val getUniformIndices: 'tags this -> program:WebGLProgram.t -> uniformNames:string Iterable.t -> GLuint.t Iterable.t option [@@js.call "getUniformIndices"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/invalidateFramebuffer) *)
  val invalidateFramebuffer: 'tags this -> target:GLenum.t -> attachments:GLenum.t Iterable.t -> unit [@@js.call "invalidateFramebuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/invalidateSubFramebuffer) *)
  val invalidateSubFramebuffer: 'tags this -> target:GLenum.t -> attachments:GLenum.t Iterable.t -> x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit [@@js.call "invalidateSubFramebuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/transformFeedbackVaryings) *)
  val transformFeedbackVaryings: 'tags this -> program:WebGLProgram.t -> varyings:string Iterable.t -> bufferMode:GLenum.t -> unit [@@js.call "transformFeedbackVaryings"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform) *)
  val uniform1uiv: 'tags this -> location:WebGLUniformLocation.t option -> data:GLuint.t Iterable.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform1uiv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform) *)
  val uniform2uiv: 'tags this -> location:WebGLUniformLocation.t option -> data:GLuint.t Iterable.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform2uiv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform) *)
  val uniform3uiv: 'tags this -> location:WebGLUniformLocation.t option -> data:GLuint.t Iterable.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform3uiv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform) *)
  val uniform4uiv: 'tags this -> location:WebGLUniformLocation.t option -> data:GLuint.t Iterable.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform4uiv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix) *)
  val uniformMatrix2x3fv: 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> data:GLfloat.t Iterable.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniformMatrix2x3fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix) *)
  val uniformMatrix2x4fv: 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> data:GLfloat.t Iterable.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniformMatrix2x4fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix) *)
  val uniformMatrix3x2fv: 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> data:GLfloat.t Iterable.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniformMatrix3x2fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix) *)
  val uniformMatrix3x4fv: 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> data:GLfloat.t Iterable.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniformMatrix3x4fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix) *)
  val uniformMatrix4x2fv: 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> data:GLfloat.t Iterable.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniformMatrix4x2fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix) *)
  val uniformMatrix4x3fv: 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> data:GLfloat.t Iterable.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniformMatrix4x3fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribI) *)
  val vertexAttribI4iv: 'tags this -> index:GLuint.t -> values:GLint.t Iterable.t -> unit [@@js.call "vertexAttribI4iv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribI) *)
  val vertexAttribI4uiv: 'tags this -> index:GLuint.t -> values:GLuint.t Iterable.t -> unit [@@js.call "vertexAttribI4uiv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/beginQuery) *)
  val beginQuery: 'tags this -> target:GLenum.t -> query:WebGLQuery.t -> unit [@@js.call "beginQuery"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/beginTransformFeedback) *)
  val beginTransformFeedback: 'tags this -> primitiveMode:GLenum.t -> unit [@@js.call "beginTransformFeedback"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/bindBufferBase) *)
  val bindBufferBase: 'tags this -> target:GLenum.t -> index:GLuint.t -> buffer:WebGLBuffer.t option -> unit [@@js.call "bindBufferBase"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/bindBufferRange) *)
  val bindBufferRange: 'tags this -> target:GLenum.t -> index:GLuint.t -> buffer:WebGLBuffer.t option -> offset:GLintptr.t -> size:GLsizeiptr.t -> unit [@@js.call "bindBufferRange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/bindSampler) *)
  val bindSampler: 'tags this -> unit:GLuint.t -> sampler:WebGLSampler.t option -> unit [@@js.call "bindSampler"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/bindTransformFeedback) *)
  val bindTransformFeedback: 'tags this -> target:GLenum.t -> tf:WebGLTransformFeedback.t option -> unit [@@js.call "bindTransformFeedback"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/bindVertexArray) *)
  val bindVertexArray: 'tags this -> array:WebGLVertexArrayObject.t option -> unit [@@js.call "bindVertexArray"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/blitFramebuffer) *)
  val blitFramebuffer: 'tags this -> srcX0:GLint.t -> srcY0:GLint.t -> srcX1:GLint.t -> srcY1:GLint.t -> dstX0:GLint.t -> dstY0:GLint.t -> dstX1:GLint.t -> dstY1:GLint.t -> mask:GLbitfield.t -> filter:GLenum.t -> unit [@@js.call "blitFramebuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer) *)
  val clearBufferfi: 'tags this -> buffer:GLenum.t -> drawbuffer:GLint.t -> depth:GLfloat.t -> stencil:GLint.t -> unit [@@js.call "clearBufferfi"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer) *)
  val clearBufferfv': 'tags this -> buffer:GLenum.t -> drawbuffer:GLint.t -> values:Float32List.t -> ?srcOffset:float -> unit -> unit [@@js.call "clearBufferfv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer) *)
  val clearBufferiv': 'tags this -> buffer:GLenum.t -> drawbuffer:GLint.t -> values:Int32List.t -> ?srcOffset:float -> unit -> unit [@@js.call "clearBufferiv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer) *)
  val clearBufferuiv': 'tags this -> buffer:GLenum.t -> drawbuffer:GLint.t -> values:Uint32List.t -> ?srcOffset:float -> unit -> unit [@@js.call "clearBufferuiv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clientWaitSync) *)
  val clientWaitSync: 'tags this -> sync:WebGLSync.t -> flags:GLbitfield.t -> timeout:GLuint64.t -> GLenum.t [@@js.call "clientWaitSync"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/compressedTexImage3D) *)
  val compressedTexImage3D: 'tags this -> target:GLenum.t -> level:GLint.t -> internalformat:GLenum.t -> width:GLsizei.t -> height:GLsizei.t -> depth:GLsizei.t -> border:GLint.t -> imageSize:GLsizei.t -> offset:GLintptr.t -> unit [@@js.call "compressedTexImage3D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/compressedTexImage3D) *)
  val compressedTexImage3D': 'tags this -> target:GLenum.t -> level:GLint.t -> internalformat:GLenum.t -> width:GLsizei.t -> height:GLsizei.t -> depth:GLsizei.t -> border:GLint.t -> srcData:ArrayBufferView.t -> ?srcOffset:float -> ?srcLengthOverride:GLuint.t -> unit -> unit [@@js.call "compressedTexImage3D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/compressedTexSubImage3D) *)
  val compressedTexSubImage3D: 'tags this -> target:GLenum.t -> level:GLint.t -> xoffset:GLint.t -> yoffset:GLint.t -> zoffset:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> depth:GLsizei.t -> format:GLenum.t -> imageSize:GLsizei.t -> offset:GLintptr.t -> unit [@@js.call "compressedTexSubImage3D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/compressedTexSubImage3D) *)
  val compressedTexSubImage3D': 'tags this -> target:GLenum.t -> level:GLint.t -> xoffset:GLint.t -> yoffset:GLint.t -> zoffset:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> depth:GLsizei.t -> format:GLenum.t -> srcData:ArrayBufferView.t -> ?srcOffset:float -> ?srcLengthOverride:GLuint.t -> unit -> unit [@@js.call "compressedTexSubImage3D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/copyBufferSubData) *)
  val copyBufferSubData: 'tags this -> readTarget:GLenum.t -> writeTarget:GLenum.t -> readOffset:GLintptr.t -> writeOffset:GLintptr.t -> size:GLsizeiptr.t -> unit [@@js.call "copyBufferSubData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/copyTexSubImage3D) *)
  val copyTexSubImage3D: 'tags this -> target:GLenum.t -> level:GLint.t -> xoffset:GLint.t -> yoffset:GLint.t -> zoffset:GLint.t -> x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit [@@js.call "copyTexSubImage3D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/createQuery) *)
  val createQuery: 'tags this -> WebGLQuery.t option [@@js.call "createQuery"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/createSampler) *)
  val createSampler: 'tags this -> WebGLSampler.t option [@@js.call "createSampler"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/createTransformFeedback) *)
  val createTransformFeedback: 'tags this -> WebGLTransformFeedback.t option [@@js.call "createTransformFeedback"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/createVertexArray) *)
  val createVertexArray: 'tags this -> WebGLVertexArrayObject.t option [@@js.call "createVertexArray"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/deleteQuery) *)
  val deleteQuery: 'tags this -> query:WebGLQuery.t option -> unit [@@js.call "deleteQuery"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/deleteSampler) *)
  val deleteSampler: 'tags this -> sampler:WebGLSampler.t option -> unit [@@js.call "deleteSampler"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/deleteSync) *)
  val deleteSync: 'tags this -> sync:WebGLSync.t option -> unit [@@js.call "deleteSync"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/deleteTransformFeedback) *)
  val deleteTransformFeedback: 'tags this -> tf:WebGLTransformFeedback.t option -> unit [@@js.call "deleteTransformFeedback"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/deleteVertexArray) *)
  val deleteVertexArray: 'tags this -> vertexArray:WebGLVertexArrayObject.t option -> unit [@@js.call "deleteVertexArray"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/drawArraysInstanced) *)
  val drawArraysInstanced: 'tags this -> mode:GLenum.t -> first:GLint.t -> count:GLsizei.t -> instanceCount:GLsizei.t -> unit [@@js.call "drawArraysInstanced"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/drawBuffers) *)
  val drawBuffers': 'tags this -> buffers:GLenum.t list -> unit [@@js.call "drawBuffers"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/drawElementsInstanced) *)
  val drawElementsInstanced: 'tags this -> mode:GLenum.t -> count:GLsizei.t -> type_:GLenum.t -> offset:GLintptr.t -> instanceCount:GLsizei.t -> unit [@@js.call "drawElementsInstanced"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/drawRangeElements) *)
  val drawRangeElements: 'tags this -> mode:GLenum.t -> start:GLuint.t -> end_:GLuint.t -> count:GLsizei.t -> type_:GLenum.t -> offset:GLintptr.t -> unit [@@js.call "drawRangeElements"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/endQuery) *)
  val endQuery: 'tags this -> target:GLenum.t -> unit [@@js.call "endQuery"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/endTransformFeedback) *)
  val endTransformFeedback: 'tags this -> unit [@@js.call "endTransformFeedback"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/fenceSync) *)
  val fenceSync: 'tags this -> condition:GLenum.t -> flags:GLbitfield.t -> WebGLSync.t option [@@js.call "fenceSync"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/framebufferTextureLayer) *)
  val framebufferTextureLayer: 'tags this -> target:GLenum.t -> attachment:GLenum.t -> texture:WebGLTexture.t option -> level:GLint.t -> layer:GLint.t -> unit [@@js.call "framebufferTextureLayer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getActiveUniformBlockName) *)
  val getActiveUniformBlockName: 'tags this -> program:WebGLProgram.t -> uniformBlockIndex:GLuint.t -> string option [@@js.call "getActiveUniformBlockName"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getActiveUniformBlockParameter) *)
  val getActiveUniformBlockParameter: 'tags this -> program:WebGLProgram.t -> uniformBlockIndex:GLuint.t -> pname:GLenum.t -> any [@@js.call "getActiveUniformBlockParameter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getActiveUniforms) *)
  val getActiveUniforms': 'tags this -> program:WebGLProgram.t -> uniformIndices:GLuint.t list -> pname:GLenum.t -> any [@@js.call "getActiveUniforms"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getBufferSubData) *)
  val getBufferSubData: 'tags this -> target:GLenum.t -> srcByteOffset:GLintptr.t -> dstBuffer:ArrayBufferView.t -> ?dstOffset:float -> ?length:GLuint.t -> unit -> unit [@@js.call "getBufferSubData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getFragDataLocation) *)
  val getFragDataLocation: 'tags this -> program:WebGLProgram.t -> name:string -> GLint.t [@@js.call "getFragDataLocation"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getIndexedParameter) *)
  val getIndexedParameter: 'tags this -> target:GLenum.t -> index:GLuint.t -> any [@@js.call "getIndexedParameter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getInternalformatParameter) *)
  val getInternalformatParameter: 'tags this -> target:GLenum.t -> internalformat:GLenum.t -> pname:GLenum.t -> any [@@js.call "getInternalformatParameter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getQuery) *)
  val getQuery: 'tags this -> target:GLenum.t -> pname:GLenum.t -> WebGLQuery.t option [@@js.call "getQuery"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getQueryParameter) *)
  val getQueryParameter: 'tags this -> query:WebGLQuery.t -> pname:GLenum.t -> any [@@js.call "getQueryParameter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getSamplerParameter) *)
  val getSamplerParameter: 'tags this -> sampler:WebGLSampler.t -> pname:GLenum.t -> any [@@js.call "getSamplerParameter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getSyncParameter) *)
  val getSyncParameter: 'tags this -> sync:WebGLSync.t -> pname:GLenum.t -> any [@@js.call "getSyncParameter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getTransformFeedbackVarying) *)
  val getTransformFeedbackVarying: 'tags this -> program:WebGLProgram.t -> index:GLuint.t -> WebGLActiveInfo.t option [@@js.call "getTransformFeedbackVarying"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getUniformBlockIndex) *)
  val getUniformBlockIndex: 'tags this -> program:WebGLProgram.t -> uniformBlockName:string -> GLuint.t [@@js.call "getUniformBlockIndex"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getUniformIndices) *)
  val getUniformIndices': 'tags this -> program:WebGLProgram.t -> uniformNames:string list -> GLuint.t list option [@@js.call "getUniformIndices"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/invalidateFramebuffer) *)
  val invalidateFramebuffer': 'tags this -> target:GLenum.t -> attachments:GLenum.t list -> unit [@@js.call "invalidateFramebuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/invalidateSubFramebuffer) *)
  val invalidateSubFramebuffer': 'tags this -> target:GLenum.t -> attachments:GLenum.t list -> x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit [@@js.call "invalidateSubFramebuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/isQuery) *)
  val isQuery: 'tags this -> query:WebGLQuery.t option -> GLboolean.t [@@js.call "isQuery"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/isSampler) *)
  val isSampler: 'tags this -> sampler:WebGLSampler.t option -> GLboolean.t [@@js.call "isSampler"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/isSync) *)
  val isSync: 'tags this -> sync:WebGLSync.t option -> GLboolean.t [@@js.call "isSync"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/isTransformFeedback) *)
  val isTransformFeedback: 'tags this -> tf:WebGLTransformFeedback.t option -> GLboolean.t [@@js.call "isTransformFeedback"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/isVertexArray) *)
  val isVertexArray: 'tags this -> vertexArray:WebGLVertexArrayObject.t option -> GLboolean.t [@@js.call "isVertexArray"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/pauseTransformFeedback) *)
  val pauseTransformFeedback: 'tags this -> unit [@@js.call "pauseTransformFeedback"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/readBuffer) *)
  val readBuffer: 'tags this -> src:GLenum.t -> unit [@@js.call "readBuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/renderbufferStorageMultisample) *)
  val renderbufferStorageMultisample: 'tags this -> target:GLenum.t -> samples:GLsizei.t -> internalformat:GLenum.t -> width:GLsizei.t -> height:GLsizei.t -> unit [@@js.call "renderbufferStorageMultisample"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/resumeTransformFeedback) *)
  val resumeTransformFeedback: 'tags this -> unit [@@js.call "resumeTransformFeedback"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/samplerParameter) *)
  val samplerParameterf: 'tags this -> sampler:WebGLSampler.t -> pname:GLenum.t -> param:GLfloat.t -> unit [@@js.call "samplerParameterf"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/samplerParameter) *)
  val samplerParameteri: 'tags this -> sampler:WebGLSampler.t -> pname:GLenum.t -> param:GLint.t -> unit [@@js.call "samplerParameteri"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texImage3D) *)
  val texImage3D: 'tags this -> target:GLenum.t -> level:GLint.t -> internalformat:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> depth:GLsizei.t -> border:GLint.t -> format:GLenum.t -> type_:GLenum.t -> pboOffset:GLintptr.t -> unit [@@js.call "texImage3D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texImage3D) *)
  val texImage3D': 'tags this -> target:GLenum.t -> level:GLint.t -> internalformat:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> depth:GLsizei.t -> border:GLint.t -> format:GLenum.t -> type_:GLenum.t -> source:TexImageSource.t -> unit [@@js.call "texImage3D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texImage3D) *)
  val texImage3D'': 'tags this -> target:GLenum.t -> level:GLint.t -> internalformat:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> depth:GLsizei.t -> border:GLint.t -> format:GLenum.t -> type_:GLenum.t -> srcData:ArrayBufferView.t option -> unit [@@js.call "texImage3D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texImage3D) *)
  val texImage3D''': 'tags this -> target:GLenum.t -> level:GLint.t -> internalformat:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> depth:GLsizei.t -> border:GLint.t -> format:GLenum.t -> type_:GLenum.t -> srcData:ArrayBufferView.t -> srcOffset:float -> unit [@@js.call "texImage3D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texStorage2D) *)
  val texStorage2D: 'tags this -> target:GLenum.t -> levels:GLsizei.t -> internalformat:GLenum.t -> width:GLsizei.t -> height:GLsizei.t -> unit [@@js.call "texStorage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texStorage3D) *)
  val texStorage3D: 'tags this -> target:GLenum.t -> levels:GLsizei.t -> internalformat:GLenum.t -> width:GLsizei.t -> height:GLsizei.t -> depth:GLsizei.t -> unit [@@js.call "texStorage3D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texSubImage3D) *)
  val texSubImage3D: 'tags this -> target:GLenum.t -> level:GLint.t -> xoffset:GLint.t -> yoffset:GLint.t -> zoffset:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> depth:GLsizei.t -> format:GLenum.t -> type_:GLenum.t -> pboOffset:GLintptr.t -> unit [@@js.call "texSubImage3D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texSubImage3D) *)
  val texSubImage3D': 'tags this -> target:GLenum.t -> level:GLint.t -> xoffset:GLint.t -> yoffset:GLint.t -> zoffset:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> depth:GLsizei.t -> format:GLenum.t -> type_:GLenum.t -> source:TexImageSource.t -> unit [@@js.call "texSubImage3D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texSubImage3D) *)
  val texSubImage3D'': 'tags this -> target:GLenum.t -> level:GLint.t -> xoffset:GLint.t -> yoffset:GLint.t -> zoffset:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> depth:GLsizei.t -> format:GLenum.t -> type_:GLenum.t -> srcData:ArrayBufferView.t option -> ?srcOffset:float -> unit -> unit [@@js.call "texSubImage3D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/transformFeedbackVaryings) *)
  val transformFeedbackVaryings': 'tags this -> program:WebGLProgram.t -> varyings:string list -> bufferMode:GLenum.t -> unit [@@js.call "transformFeedbackVaryings"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform) *)
  val uniform1ui: 'tags this -> location:WebGLUniformLocation.t option -> v0:GLuint.t -> unit [@@js.call "uniform1ui"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform) *)
  val uniform1uiv': 'tags this -> location:WebGLUniformLocation.t option -> data:Uint32List.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform1uiv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform) *)
  val uniform2ui: 'tags this -> location:WebGLUniformLocation.t option -> v0:GLuint.t -> v1:GLuint.t -> unit [@@js.call "uniform2ui"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform) *)
  val uniform2uiv': 'tags this -> location:WebGLUniformLocation.t option -> data:Uint32List.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform2uiv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform) *)
  val uniform3ui: 'tags this -> location:WebGLUniformLocation.t option -> v0:GLuint.t -> v1:GLuint.t -> v2:GLuint.t -> unit [@@js.call "uniform3ui"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform) *)
  val uniform3uiv': 'tags this -> location:WebGLUniformLocation.t option -> data:Uint32List.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform3uiv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform) *)
  val uniform4ui: 'tags this -> location:WebGLUniformLocation.t option -> v0:GLuint.t -> v1:GLuint.t -> v2:GLuint.t -> v3:GLuint.t -> unit [@@js.call "uniform4ui"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform) *)
  val uniform4uiv': 'tags this -> location:WebGLUniformLocation.t option -> data:Uint32List.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform4uiv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformBlockBinding) *)
  val uniformBlockBinding: 'tags this -> program:WebGLProgram.t -> uniformBlockIndex:GLuint.t -> uniformBlockBinding:GLuint.t -> unit [@@js.call "uniformBlockBinding"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix) *)
  val uniformMatrix2x3fv': 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> data:Float32List.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniformMatrix2x3fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix) *)
  val uniformMatrix2x4fv': 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> data:Float32List.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniformMatrix2x4fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix) *)
  val uniformMatrix3x2fv': 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> data:Float32List.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniformMatrix3x2fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix) *)
  val uniformMatrix3x4fv': 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> data:Float32List.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniformMatrix3x4fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix) *)
  val uniformMatrix4x2fv': 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> data:Float32List.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniformMatrix4x2fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix) *)
  val uniformMatrix4x3fv': 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> data:Float32List.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniformMatrix4x3fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribDivisor) *)
  val vertexAttribDivisor: 'tags this -> index:GLuint.t -> divisor:GLuint.t -> unit [@@js.call "vertexAttribDivisor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribI) *)
  val vertexAttribI4i: 'tags this -> index:GLuint.t -> x:GLint.t -> y:GLint.t -> z:GLint.t -> w:GLint.t -> unit [@@js.call "vertexAttribI4i"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribI) *)
  val vertexAttribI4iv': 'tags this -> index:GLuint.t -> values:Int32List.t -> unit [@@js.call "vertexAttribI4iv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribI) *)
  val vertexAttribI4ui: 'tags this -> index:GLuint.t -> x:GLuint.t -> y:GLuint.t -> z:GLuint.t -> w:GLuint.t -> unit [@@js.call "vertexAttribI4ui"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribI) *)
  val vertexAttribI4uiv': 'tags this -> index:GLuint.t -> values:Uint32List.t -> unit [@@js.call "vertexAttribI4uiv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribIPointer) *)
  val vertexAttribIPointer: 'tags this -> index:GLuint.t -> size:GLint.t -> type_:GLenum.t -> stride:GLsizei.t -> offset:GLintptr.t -> unit [@@js.call "vertexAttribIPointer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/waitSync) *)
  val waitSync: 'tags this -> sync:WebGLSync.t -> flags:GLbitfield.t -> timeout:GLint64.t -> unit [@@js.call "waitSync"]
  val get_READ_BUFFER: 'tags this -> ([`L_n_3074[@js 3074]] [@js.enum]) [@@js.get "READ_BUFFER"]
  val get_UNPACK_ROW_LENGTH: 'tags this -> ([`L_n_3314[@js 3314]] [@js.enum]) [@@js.get "UNPACK_ROW_LENGTH"]
  val get_UNPACK_SKIP_ROWS: 'tags this -> ([`L_n_3315[@js 3315]] [@js.enum]) [@@js.get "UNPACK_SKIP_ROWS"]
  val get_UNPACK_SKIP_PIXELS: 'tags this -> ([`L_n_3316[@js 3316]] [@js.enum]) [@@js.get "UNPACK_SKIP_PIXELS"]
  val get_PACK_ROW_LENGTH: 'tags this -> ([`L_n_3330[@js 3330]] [@js.enum]) [@@js.get "PACK_ROW_LENGTH"]
  val get_PACK_SKIP_ROWS: 'tags this -> ([`L_n_3331[@js 3331]] [@js.enum]) [@@js.get "PACK_SKIP_ROWS"]
  val get_PACK_SKIP_PIXELS: 'tags this -> ([`L_n_3332[@js 3332]] [@js.enum]) [@@js.get "PACK_SKIP_PIXELS"]
  val get_COLOR: 'tags this -> ([`L_n_6144[@js 6144]] [@js.enum]) [@@js.get "COLOR"]
  val get_DEPTH: 'tags this -> ([`L_n_6145[@js 6145]] [@js.enum]) [@@js.get "DEPTH"]
  val get_STENCIL: 'tags this -> ([`L_n_6146[@js 6146]] [@js.enum]) [@@js.get "STENCIL"]
  val get_RED: 'tags this -> ([`L_n_6403[@js 6403]] [@js.enum]) [@@js.get "RED"]
  val get_RGB8: 'tags this -> ([`L_n_32849[@js 32849]] [@js.enum]) [@@js.get "RGB8"]
  val get_RGB10_A2: 'tags this -> ([`L_n_32857[@js 32857]] [@js.enum]) [@@js.get "RGB10_A2"]
  val get_TEXTURE_BINDING_3D: 'tags this -> ([`L_n_32874[@js 32874]] [@js.enum]) [@@js.get "TEXTURE_BINDING_3D"]
  val get_UNPACK_SKIP_IMAGES: 'tags this -> ([`L_n_32877[@js 32877]] [@js.enum]) [@@js.get "UNPACK_SKIP_IMAGES"]
  val get_UNPACK_IMAGE_HEIGHT: 'tags this -> ([`L_n_32878[@js 32878]] [@js.enum]) [@@js.get "UNPACK_IMAGE_HEIGHT"]
  val get_TEXTURE_3D: 'tags this -> ([`L_n_32879[@js 32879]] [@js.enum]) [@@js.get "TEXTURE_3D"]
  val get_TEXTURE_WRAP_R: 'tags this -> ([`L_n_32882[@js 32882]] [@js.enum]) [@@js.get "TEXTURE_WRAP_R"]
  val get_MAX_3D_TEXTURE_SIZE: 'tags this -> ([`L_n_32883[@js 32883]] [@js.enum]) [@@js.get "MAX_3D_TEXTURE_SIZE"]
  val get_UNSIGNED_INT_2_10_10_10_REV: 'tags this -> ([`L_n_33640[@js 33640]] [@js.enum]) [@@js.get "UNSIGNED_INT_2_10_10_10_REV"]
  val get_MAX_ELEMENTS_VERTICES: 'tags this -> ([`L_n_33000[@js 33000]] [@js.enum]) [@@js.get "MAX_ELEMENTS_VERTICES"]
  val get_MAX_ELEMENTS_INDICES: 'tags this -> ([`L_n_33001[@js 33001]] [@js.enum]) [@@js.get "MAX_ELEMENTS_INDICES"]
  val get_TEXTURE_MIN_LOD: 'tags this -> ([`L_n_33082[@js 33082]] [@js.enum]) [@@js.get "TEXTURE_MIN_LOD"]
  val get_TEXTURE_MAX_LOD: 'tags this -> ([`L_n_33083[@js 33083]] [@js.enum]) [@@js.get "TEXTURE_MAX_LOD"]
  val get_TEXTURE_BASE_LEVEL: 'tags this -> ([`L_n_33084[@js 33084]] [@js.enum]) [@@js.get "TEXTURE_BASE_LEVEL"]
  val get_TEXTURE_MAX_LEVEL: 'tags this -> ([`L_n_33085[@js 33085]] [@js.enum]) [@@js.get "TEXTURE_MAX_LEVEL"]
  val get_MIN: 'tags this -> ([`L_n_32775[@js 32775]] [@js.enum]) [@@js.get "MIN"]
  val get_MAX: 'tags this -> ([`L_n_32776[@js 32776]] [@js.enum]) [@@js.get "MAX"]
  val get_DEPTH_COMPONENT24: 'tags this -> ([`L_n_33190[@js 33190]] [@js.enum]) [@@js.get "DEPTH_COMPONENT24"]
  val get_MAX_TEXTURE_LOD_BIAS: 'tags this -> ([`L_n_34045[@js 34045]] [@js.enum]) [@@js.get "MAX_TEXTURE_LOD_BIAS"]
  val get_TEXTURE_COMPARE_MODE: 'tags this -> ([`L_n_34892[@js 34892]] [@js.enum]) [@@js.get "TEXTURE_COMPARE_MODE"]
  val get_TEXTURE_COMPARE_FUNC: 'tags this -> ([`L_n_34893[@js 34893]] [@js.enum]) [@@js.get "TEXTURE_COMPARE_FUNC"]
  val get_CURRENT_QUERY: 'tags this -> ([`L_n_34917[@js 34917]] [@js.enum]) [@@js.get "CURRENT_QUERY"]
  val get_QUERY_RESULT: 'tags this -> ([`L_n_34918[@js 34918]] [@js.enum]) [@@js.get "QUERY_RESULT"]
  val get_QUERY_RESULT_AVAILABLE: 'tags this -> ([`L_n_34919[@js 34919]] [@js.enum]) [@@js.get "QUERY_RESULT_AVAILABLE"]
  val get_STREAM_READ: 'tags this -> ([`L_n_35041[@js 35041]] [@js.enum]) [@@js.get "STREAM_READ"]
  val get_STREAM_COPY: 'tags this -> ([`L_n_35042[@js 35042]] [@js.enum]) [@@js.get "STREAM_COPY"]
  val get_STATIC_READ: 'tags this -> ([`L_n_35045[@js 35045]] [@js.enum]) [@@js.get "STATIC_READ"]
  val get_STATIC_COPY: 'tags this -> ([`L_n_35046[@js 35046]] [@js.enum]) [@@js.get "STATIC_COPY"]
  val get_DYNAMIC_READ: 'tags this -> ([`L_n_35049[@js 35049]] [@js.enum]) [@@js.get "DYNAMIC_READ"]
  val get_DYNAMIC_COPY: 'tags this -> ([`L_n_35050[@js 35050]] [@js.enum]) [@@js.get "DYNAMIC_COPY"]
  val get_MAX_DRAW_BUFFERS: 'tags this -> ([`L_n_34852[@js 34852]] [@js.enum]) [@@js.get "MAX_DRAW_BUFFERS"]
  val get_DRAW_BUFFER0: 'tags this -> ([`L_n_34853[@js 34853]] [@js.enum]) [@@js.get "DRAW_BUFFER0"]
  val get_DRAW_BUFFER1: 'tags this -> ([`L_n_34854[@js 34854]] [@js.enum]) [@@js.get "DRAW_BUFFER1"]
  val get_DRAW_BUFFER2: 'tags this -> ([`L_n_34855[@js 34855]] [@js.enum]) [@@js.get "DRAW_BUFFER2"]
  val get_DRAW_BUFFER3: 'tags this -> ([`L_n_34856[@js 34856]] [@js.enum]) [@@js.get "DRAW_BUFFER3"]
  val get_DRAW_BUFFER4: 'tags this -> ([`L_n_34857[@js 34857]] [@js.enum]) [@@js.get "DRAW_BUFFER4"]
  val get_DRAW_BUFFER5: 'tags this -> ([`L_n_34858[@js 34858]] [@js.enum]) [@@js.get "DRAW_BUFFER5"]
  val get_DRAW_BUFFER6: 'tags this -> ([`L_n_34859[@js 34859]] [@js.enum]) [@@js.get "DRAW_BUFFER6"]
  val get_DRAW_BUFFER7: 'tags this -> ([`L_n_34860[@js 34860]] [@js.enum]) [@@js.get "DRAW_BUFFER7"]
  val get_DRAW_BUFFER8: 'tags this -> ([`L_n_34861[@js 34861]] [@js.enum]) [@@js.get "DRAW_BUFFER8"]
  val get_DRAW_BUFFER9: 'tags this -> ([`L_n_34862[@js 34862]] [@js.enum]) [@@js.get "DRAW_BUFFER9"]
  val get_DRAW_BUFFER10: 'tags this -> ([`L_n_34863[@js 34863]] [@js.enum]) [@@js.get "DRAW_BUFFER10"]
  val get_DRAW_BUFFER11: 'tags this -> ([`L_n_34864[@js 34864]] [@js.enum]) [@@js.get "DRAW_BUFFER11"]
  val get_DRAW_BUFFER12: 'tags this -> ([`L_n_34865[@js 34865]] [@js.enum]) [@@js.get "DRAW_BUFFER12"]
  val get_DRAW_BUFFER13: 'tags this -> ([`L_n_34866[@js 34866]] [@js.enum]) [@@js.get "DRAW_BUFFER13"]
  val get_DRAW_BUFFER14: 'tags this -> ([`L_n_34867[@js 34867]] [@js.enum]) [@@js.get "DRAW_BUFFER14"]
  val get_DRAW_BUFFER15: 'tags this -> ([`L_n_34868[@js 34868]] [@js.enum]) [@@js.get "DRAW_BUFFER15"]
  val get_MAX_FRAGMENT_UNIFORM_COMPONENTS: 'tags this -> ([`L_n_35657[@js 35657]] [@js.enum]) [@@js.get "MAX_FRAGMENT_UNIFORM_COMPONENTS"]
  val get_MAX_VERTEX_UNIFORM_COMPONENTS: 'tags this -> ([`L_n_35658[@js 35658]] [@js.enum]) [@@js.get "MAX_VERTEX_UNIFORM_COMPONENTS"]
  val get_SAMPLER_3D: 'tags this -> ([`L_n_35679[@js 35679]] [@js.enum]) [@@js.get "SAMPLER_3D"]
  val get_SAMPLER_2D_SHADOW: 'tags this -> ([`L_n_35682[@js 35682]] [@js.enum]) [@@js.get "SAMPLER_2D_SHADOW"]
  val get_FRAGMENT_SHADER_DERIVATIVE_HINT: 'tags this -> ([`L_n_35723[@js 35723]] [@js.enum]) [@@js.get "FRAGMENT_SHADER_DERIVATIVE_HINT"]
  val get_PIXEL_PACK_BUFFER: 'tags this -> ([`L_n_35051[@js 35051]] [@js.enum]) [@@js.get "PIXEL_PACK_BUFFER"]
  val get_PIXEL_UNPACK_BUFFER: 'tags this -> ([`L_n_35052[@js 35052]] [@js.enum]) [@@js.get "PIXEL_UNPACK_BUFFER"]
  val get_PIXEL_PACK_BUFFER_BINDING: 'tags this -> ([`L_n_35053[@js 35053]] [@js.enum]) [@@js.get "PIXEL_PACK_BUFFER_BINDING"]
  val get_PIXEL_UNPACK_BUFFER_BINDING: 'tags this -> ([`L_n_35055[@js 35055]] [@js.enum]) [@@js.get "PIXEL_UNPACK_BUFFER_BINDING"]
  val get_FLOAT_MAT2x3: 'tags this -> ([`L_n_35685[@js 35685]] [@js.enum]) [@@js.get "FLOAT_MAT2x3"]
  val get_FLOAT_MAT2x4: 'tags this -> ([`L_n_35686[@js 35686]] [@js.enum]) [@@js.get "FLOAT_MAT2x4"]
  val get_FLOAT_MAT3x2: 'tags this -> ([`L_n_35687[@js 35687]] [@js.enum]) [@@js.get "FLOAT_MAT3x2"]
  val get_FLOAT_MAT3x4: 'tags this -> ([`L_n_35688[@js 35688]] [@js.enum]) [@@js.get "FLOAT_MAT3x4"]
  val get_FLOAT_MAT4x2: 'tags this -> ([`L_n_35689[@js 35689]] [@js.enum]) [@@js.get "FLOAT_MAT4x2"]
  val get_FLOAT_MAT4x3: 'tags this -> ([`L_n_35690[@js 35690]] [@js.enum]) [@@js.get "FLOAT_MAT4x3"]
  val get_SRGB: 'tags this -> ([`L_n_35904[@js 35904]] [@js.enum]) [@@js.get "SRGB"]
  val get_SRGB8: 'tags this -> ([`L_n_35905[@js 35905]] [@js.enum]) [@@js.get "SRGB8"]
  val get_SRGB8_ALPHA8: 'tags this -> ([`L_n_35907[@js 35907]] [@js.enum]) [@@js.get "SRGB8_ALPHA8"]
  val get_COMPARE_REF_TO_TEXTURE: 'tags this -> ([`L_n_34894[@js 34894]] [@js.enum]) [@@js.get "COMPARE_REF_TO_TEXTURE"]
  val get_RGBA32F: 'tags this -> ([`L_n_34836[@js 34836]] [@js.enum]) [@@js.get "RGBA32F"]
  val get_RGB32F: 'tags this -> ([`L_n_34837[@js 34837]] [@js.enum]) [@@js.get "RGB32F"]
  val get_RGBA16F: 'tags this -> ([`L_n_34842[@js 34842]] [@js.enum]) [@@js.get "RGBA16F"]
  val get_RGB16F: 'tags this -> ([`L_n_34843[@js 34843]] [@js.enum]) [@@js.get "RGB16F"]
  val get_VERTEX_ATTRIB_ARRAY_INTEGER: 'tags this -> ([`L_n_35069[@js 35069]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_INTEGER"]
  val get_MAX_ARRAY_TEXTURE_LAYERS: 'tags this -> ([`L_n_35071[@js 35071]] [@js.enum]) [@@js.get "MAX_ARRAY_TEXTURE_LAYERS"]
  val get_MIN_PROGRAM_TEXEL_OFFSET: 'tags this -> ([`L_n_35076[@js 35076]] [@js.enum]) [@@js.get "MIN_PROGRAM_TEXEL_OFFSET"]
  val get_MAX_PROGRAM_TEXEL_OFFSET: 'tags this -> ([`L_n_35077[@js 35077]] [@js.enum]) [@@js.get "MAX_PROGRAM_TEXEL_OFFSET"]
  val get_MAX_VARYING_COMPONENTS: 'tags this -> ([`L_n_35659[@js 35659]] [@js.enum]) [@@js.get "MAX_VARYING_COMPONENTS"]
  val get_TEXTURE_2D_ARRAY: 'tags this -> ([`L_n_35866[@js 35866]] [@js.enum]) [@@js.get "TEXTURE_2D_ARRAY"]
  val get_TEXTURE_BINDING_2D_ARRAY: 'tags this -> ([`L_n_35869[@js 35869]] [@js.enum]) [@@js.get "TEXTURE_BINDING_2D_ARRAY"]
  val get_R11F_G11F_B10F: 'tags this -> ([`L_n_35898[@js 35898]] [@js.enum]) [@@js.get "R11F_G11F_B10F"]
  val get_UNSIGNED_INT_10F_11F_11F_REV: 'tags this -> ([`L_n_35899[@js 35899]] [@js.enum]) [@@js.get "UNSIGNED_INT_10F_11F_11F_REV"]
  val get_RGB9_E5: 'tags this -> ([`L_n_35901[@js 35901]] [@js.enum]) [@@js.get "RGB9_E5"]
  val get_UNSIGNED_INT_5_9_9_9_REV: 'tags this -> ([`L_n_35902[@js 35902]] [@js.enum]) [@@js.get "UNSIGNED_INT_5_9_9_9_REV"]
  val get_TRANSFORM_FEEDBACK_BUFFER_MODE: 'tags this -> ([`L_n_35967[@js 35967]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_BUFFER_MODE"]
  val get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: 'tags this -> ([`L_n_35968[@js 35968]] [@js.enum]) [@@js.get "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS"]
  val get_TRANSFORM_FEEDBACK_VARYINGS: 'tags this -> ([`L_n_35971[@js 35971]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_VARYINGS"]
  val get_TRANSFORM_FEEDBACK_BUFFER_START: 'tags this -> ([`L_n_35972[@js 35972]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_BUFFER_START"]
  val get_TRANSFORM_FEEDBACK_BUFFER_SIZE: 'tags this -> ([`L_n_35973[@js 35973]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_BUFFER_SIZE"]
  val get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 'tags this -> ([`L_n_35976[@js 35976]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN"]
  val get_RASTERIZER_DISCARD: 'tags this -> ([`L_n_35977[@js 35977]] [@js.enum]) [@@js.get "RASTERIZER_DISCARD"]
  val get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 'tags this -> ([`L_n_35978[@js 35978]] [@js.enum]) [@@js.get "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS"]
  val get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 'tags this -> ([`L_n_35979[@js 35979]] [@js.enum]) [@@js.get "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS"]
  val get_INTERLEAVED_ATTRIBS: 'tags this -> ([`L_n_35980[@js 35980]] [@js.enum]) [@@js.get "INTERLEAVED_ATTRIBS"]
  val get_SEPARATE_ATTRIBS: 'tags this -> ([`L_n_35981[@js 35981]] [@js.enum]) [@@js.get "SEPARATE_ATTRIBS"]
  val get_TRANSFORM_FEEDBACK_BUFFER: 'tags this -> ([`L_n_35982[@js 35982]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_BUFFER"]
  val get_TRANSFORM_FEEDBACK_BUFFER_BINDING: 'tags this -> ([`L_n_35983[@js 35983]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_BUFFER_BINDING"]
  val get_RGBA32UI: 'tags this -> ([`L_n_36208[@js 36208]] [@js.enum]) [@@js.get "RGBA32UI"]
  val get_RGB32UI: 'tags this -> ([`L_n_36209[@js 36209]] [@js.enum]) [@@js.get "RGB32UI"]
  val get_RGBA16UI: 'tags this -> ([`L_n_36214[@js 36214]] [@js.enum]) [@@js.get "RGBA16UI"]
  val get_RGB16UI: 'tags this -> ([`L_n_36215[@js 36215]] [@js.enum]) [@@js.get "RGB16UI"]
  val get_RGBA8UI: 'tags this -> ([`L_n_36220[@js 36220]] [@js.enum]) [@@js.get "RGBA8UI"]
  val get_RGB8UI: 'tags this -> ([`L_n_36221[@js 36221]] [@js.enum]) [@@js.get "RGB8UI"]
  val get_RGBA32I: 'tags this -> ([`L_n_36226[@js 36226]] [@js.enum]) [@@js.get "RGBA32I"]
  val get_RGB32I: 'tags this -> ([`L_n_36227[@js 36227]] [@js.enum]) [@@js.get "RGB32I"]
  val get_RGBA16I: 'tags this -> ([`L_n_36232[@js 36232]] [@js.enum]) [@@js.get "RGBA16I"]
  val get_RGB16I: 'tags this -> ([`L_n_36233[@js 36233]] [@js.enum]) [@@js.get "RGB16I"]
  val get_RGBA8I: 'tags this -> ([`L_n_36238[@js 36238]] [@js.enum]) [@@js.get "RGBA8I"]
  val get_RGB8I: 'tags this -> ([`L_n_36239[@js 36239]] [@js.enum]) [@@js.get "RGB8I"]
  val get_RED_INTEGER: 'tags this -> ([`L_n_36244[@js 36244]] [@js.enum]) [@@js.get "RED_INTEGER"]
  val get_RGB_INTEGER: 'tags this -> ([`L_n_36248[@js 36248]] [@js.enum]) [@@js.get "RGB_INTEGER"]
  val get_RGBA_INTEGER: 'tags this -> ([`L_n_36249[@js 36249]] [@js.enum]) [@@js.get "RGBA_INTEGER"]
  val get_SAMPLER_2D_ARRAY: 'tags this -> ([`L_n_36289[@js 36289]] [@js.enum]) [@@js.get "SAMPLER_2D_ARRAY"]
  val get_SAMPLER_2D_ARRAY_SHADOW: 'tags this -> ([`L_n_36292[@js 36292]] [@js.enum]) [@@js.get "SAMPLER_2D_ARRAY_SHADOW"]
  val get_SAMPLER_CUBE_SHADOW: 'tags this -> ([`L_n_36293[@js 36293]] [@js.enum]) [@@js.get "SAMPLER_CUBE_SHADOW"]
  val get_UNSIGNED_INT_VEC2: 'tags this -> ([`L_n_36294[@js 36294]] [@js.enum]) [@@js.get "UNSIGNED_INT_VEC2"]
  val get_UNSIGNED_INT_VEC3: 'tags this -> ([`L_n_36295[@js 36295]] [@js.enum]) [@@js.get "UNSIGNED_INT_VEC3"]
  val get_UNSIGNED_INT_VEC4: 'tags this -> ([`L_n_36296[@js 36296]] [@js.enum]) [@@js.get "UNSIGNED_INT_VEC4"]
  val get_INT_SAMPLER_2D: 'tags this -> ([`L_n_36298[@js 36298]] [@js.enum]) [@@js.get "INT_SAMPLER_2D"]
  val get_INT_SAMPLER_3D: 'tags this -> ([`L_n_36299[@js 36299]] [@js.enum]) [@@js.get "INT_SAMPLER_3D"]
  val get_INT_SAMPLER_CUBE: 'tags this -> ([`L_n_36300[@js 36300]] [@js.enum]) [@@js.get "INT_SAMPLER_CUBE"]
  val get_INT_SAMPLER_2D_ARRAY: 'tags this -> ([`L_n_36303[@js 36303]] [@js.enum]) [@@js.get "INT_SAMPLER_2D_ARRAY"]
  val get_UNSIGNED_INT_SAMPLER_2D: 'tags this -> ([`L_n_36306[@js 36306]] [@js.enum]) [@@js.get "UNSIGNED_INT_SAMPLER_2D"]
  val get_UNSIGNED_INT_SAMPLER_3D: 'tags this -> ([`L_n_36307[@js 36307]] [@js.enum]) [@@js.get "UNSIGNED_INT_SAMPLER_3D"]
  val get_UNSIGNED_INT_SAMPLER_CUBE: 'tags this -> ([`L_n_36308[@js 36308]] [@js.enum]) [@@js.get "UNSIGNED_INT_SAMPLER_CUBE"]
  val get_UNSIGNED_INT_SAMPLER_2D_ARRAY: 'tags this -> ([`L_n_36311[@js 36311]] [@js.enum]) [@@js.get "UNSIGNED_INT_SAMPLER_2D_ARRAY"]
  val get_DEPTH_COMPONENT32F: 'tags this -> ([`L_n_36012[@js 36012]] [@js.enum]) [@@js.get "DEPTH_COMPONENT32F"]
  val get_DEPTH32F_STENCIL8: 'tags this -> ([`L_n_36013[@js 36013]] [@js.enum]) [@@js.get "DEPTH32F_STENCIL8"]
  val get_FLOAT_32_UNSIGNED_INT_24_8_REV: 'tags this -> ([`L_n_36269[@js 36269]] [@js.enum]) [@@js.get "FLOAT_32_UNSIGNED_INT_24_8_REV"]
  val get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: 'tags this -> ([`L_n_33296[@js 33296]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING"]
  val get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: 'tags this -> ([`L_n_33297[@js 33297]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE"]
  val get_FRAMEBUFFER_ATTACHMENT_RED_SIZE: 'tags this -> ([`L_n_33298[@js 33298]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_RED_SIZE"]
  val get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: 'tags this -> ([`L_n_33299[@js 33299]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE"]
  val get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: 'tags this -> ([`L_n_33300[@js 33300]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE"]
  val get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: 'tags this -> ([`L_n_33301[@js 33301]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE"]
  val get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: 'tags this -> ([`L_n_33302[@js 33302]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE"]
  val get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: 'tags this -> ([`L_n_33303[@js 33303]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE"]
  val get_FRAMEBUFFER_DEFAULT: 'tags this -> ([`L_n_33304[@js 33304]] [@js.enum]) [@@js.get "FRAMEBUFFER_DEFAULT"]
  val get_UNSIGNED_INT_24_8: 'tags this -> ([`L_n_34042[@js 34042]] [@js.enum]) [@@js.get "UNSIGNED_INT_24_8"]
  val get_DEPTH24_STENCIL8: 'tags this -> ([`L_n_35056[@js 35056]] [@js.enum]) [@@js.get "DEPTH24_STENCIL8"]
  val get_UNSIGNED_NORMALIZED: 'tags this -> ([`L_n_35863[@js 35863]] [@js.enum]) [@@js.get "UNSIGNED_NORMALIZED"]
  val get_DRAW_FRAMEBUFFER_BINDING: 'tags this -> ([`L_n_36006[@js 36006]] [@js.enum]) [@@js.get "DRAW_FRAMEBUFFER_BINDING"]
  val get_READ_FRAMEBUFFER: 'tags this -> ([`L_n_36008[@js 36008]] [@js.enum]) [@@js.get "READ_FRAMEBUFFER"]
  val get_DRAW_FRAMEBUFFER: 'tags this -> ([`L_n_36009[@js 36009]] [@js.enum]) [@@js.get "DRAW_FRAMEBUFFER"]
  val get_READ_FRAMEBUFFER_BINDING: 'tags this -> ([`L_n_36010[@js 36010]] [@js.enum]) [@@js.get "READ_FRAMEBUFFER_BINDING"]
  val get_RENDERBUFFER_SAMPLES: 'tags this -> ([`L_n_36011[@js 36011]] [@js.enum]) [@@js.get "RENDERBUFFER_SAMPLES"]
  val get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: 'tags this -> ([`L_n_36052[@js 36052]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER"]
  val get_MAX_COLOR_ATTACHMENTS: 'tags this -> ([`L_n_36063[@js 36063]] [@js.enum]) [@@js.get "MAX_COLOR_ATTACHMENTS"]
  val get_COLOR_ATTACHMENT1: 'tags this -> ([`L_n_36065[@js 36065]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT1"]
  val get_COLOR_ATTACHMENT2: 'tags this -> ([`L_n_36066[@js 36066]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT2"]
  val get_COLOR_ATTACHMENT3: 'tags this -> ([`L_n_36067[@js 36067]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT3"]
  val get_COLOR_ATTACHMENT4: 'tags this -> ([`L_n_36068[@js 36068]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT4"]
  val get_COLOR_ATTACHMENT5: 'tags this -> ([`L_n_36069[@js 36069]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT5"]
  val get_COLOR_ATTACHMENT6: 'tags this -> ([`L_n_36070[@js 36070]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT6"]
  val get_COLOR_ATTACHMENT7: 'tags this -> ([`L_n_36071[@js 36071]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT7"]
  val get_COLOR_ATTACHMENT8: 'tags this -> ([`L_n_36072[@js 36072]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT8"]
  val get_COLOR_ATTACHMENT9: 'tags this -> ([`L_n_36073[@js 36073]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT9"]
  val get_COLOR_ATTACHMENT10: 'tags this -> ([`L_n_36074[@js 36074]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT10"]
  val get_COLOR_ATTACHMENT11: 'tags this -> ([`L_n_36075[@js 36075]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT11"]
  val get_COLOR_ATTACHMENT12: 'tags this -> ([`L_n_36076[@js 36076]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT12"]
  val get_COLOR_ATTACHMENT13: 'tags this -> ([`L_n_36077[@js 36077]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT13"]
  val get_COLOR_ATTACHMENT14: 'tags this -> ([`L_n_36078[@js 36078]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT14"]
  val get_COLOR_ATTACHMENT15: 'tags this -> ([`L_n_36079[@js 36079]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT15"]
  val get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: 'tags this -> ([`L_n_36182[@js 36182]] [@js.enum]) [@@js.get "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE"]
  val get_MAX_SAMPLES: 'tags this -> ([`L_n_36183[@js 36183]] [@js.enum]) [@@js.get "MAX_SAMPLES"]
  val get_HALF_FLOAT: 'tags this -> ([`L_n_5131[@js 5131]] [@js.enum]) [@@js.get "HALF_FLOAT"]
  val get_RG: 'tags this -> ([`L_n_33319[@js 33319]] [@js.enum]) [@@js.get "RG"]
  val get_RG_INTEGER: 'tags this -> ([`L_n_33320[@js 33320]] [@js.enum]) [@@js.get "RG_INTEGER"]
  val get_R8: 'tags this -> ([`L_n_33321[@js 33321]] [@js.enum]) [@@js.get "R8"]
  val get_RG8: 'tags this -> ([`L_n_33323[@js 33323]] [@js.enum]) [@@js.get "RG8"]
  val get_R16F: 'tags this -> ([`L_n_33325[@js 33325]] [@js.enum]) [@@js.get "R16F"]
  val get_R32F: 'tags this -> ([`L_n_33326[@js 33326]] [@js.enum]) [@@js.get "R32F"]
  val get_RG16F: 'tags this -> ([`L_n_33327[@js 33327]] [@js.enum]) [@@js.get "RG16F"]
  val get_RG32F: 'tags this -> ([`L_n_33328[@js 33328]] [@js.enum]) [@@js.get "RG32F"]
  val get_R8I: 'tags this -> ([`L_n_33329[@js 33329]] [@js.enum]) [@@js.get "R8I"]
  val get_R8UI: 'tags this -> ([`L_n_33330[@js 33330]] [@js.enum]) [@@js.get "R8UI"]
  val get_R16I: 'tags this -> ([`L_n_33331[@js 33331]] [@js.enum]) [@@js.get "R16I"]
  val get_R16UI: 'tags this -> ([`L_n_33332[@js 33332]] [@js.enum]) [@@js.get "R16UI"]
  val get_R32I: 'tags this -> ([`L_n_33333[@js 33333]] [@js.enum]) [@@js.get "R32I"]
  val get_R32UI: 'tags this -> ([`L_n_33334[@js 33334]] [@js.enum]) [@@js.get "R32UI"]
  val get_RG8I: 'tags this -> ([`L_n_33335[@js 33335]] [@js.enum]) [@@js.get "RG8I"]
  val get_RG8UI: 'tags this -> ([`L_n_33336[@js 33336]] [@js.enum]) [@@js.get "RG8UI"]
  val get_RG16I: 'tags this -> ([`L_n_33337[@js 33337]] [@js.enum]) [@@js.get "RG16I"]
  val get_RG16UI: 'tags this -> ([`L_n_33338[@js 33338]] [@js.enum]) [@@js.get "RG16UI"]
  val get_RG32I: 'tags this -> ([`L_n_33339[@js 33339]] [@js.enum]) [@@js.get "RG32I"]
  val get_RG32UI: 'tags this -> ([`L_n_33340[@js 33340]] [@js.enum]) [@@js.get "RG32UI"]
  val get_VERTEX_ARRAY_BINDING: 'tags this -> ([`L_n_34229[@js 34229]] [@js.enum]) [@@js.get "VERTEX_ARRAY_BINDING"]
  val get_R8_SNORM: 'tags this -> ([`L_n_36756[@js 36756]] [@js.enum]) [@@js.get "R8_SNORM"]
  val get_RG8_SNORM: 'tags this -> ([`L_n_36757[@js 36757]] [@js.enum]) [@@js.get "RG8_SNORM"]
  val get_RGB8_SNORM: 'tags this -> ([`L_n_36758[@js 36758]] [@js.enum]) [@@js.get "RGB8_SNORM"]
  val get_RGBA8_SNORM: 'tags this -> ([`L_n_36759[@js 36759]] [@js.enum]) [@@js.get "RGBA8_SNORM"]
  val get_SIGNED_NORMALIZED: 'tags this -> ([`L_n_36764[@js 36764]] [@js.enum]) [@@js.get "SIGNED_NORMALIZED"]
  val get_COPY_READ_BUFFER: 'tags this -> ([`L_n_36662[@js 36662]] [@js.enum]) [@@js.get "COPY_READ_BUFFER"]
  val get_COPY_WRITE_BUFFER: 'tags this -> ([`L_n_36663[@js 36663]] [@js.enum]) [@@js.get "COPY_WRITE_BUFFER"]
  val get_COPY_READ_BUFFER_BINDING: 'tags this -> ([`L_n_36662[@js 36662]] [@js.enum]) [@@js.get "COPY_READ_BUFFER_BINDING"]
  val get_COPY_WRITE_BUFFER_BINDING: 'tags this -> ([`L_n_36663[@js 36663]] [@js.enum]) [@@js.get "COPY_WRITE_BUFFER_BINDING"]
  val get_UNIFORM_BUFFER: 'tags this -> ([`L_n_35345[@js 35345]] [@js.enum]) [@@js.get "UNIFORM_BUFFER"]
  val get_UNIFORM_BUFFER_BINDING: 'tags this -> ([`L_n_35368[@js 35368]] [@js.enum]) [@@js.get "UNIFORM_BUFFER_BINDING"]
  val get_UNIFORM_BUFFER_START: 'tags this -> ([`L_n_35369[@js 35369]] [@js.enum]) [@@js.get "UNIFORM_BUFFER_START"]
  val get_UNIFORM_BUFFER_SIZE: 'tags this -> ([`L_n_35370[@js 35370]] [@js.enum]) [@@js.get "UNIFORM_BUFFER_SIZE"]
  val get_MAX_VERTEX_UNIFORM_BLOCKS: 'tags this -> ([`L_n_35371[@js 35371]] [@js.enum]) [@@js.get "MAX_VERTEX_UNIFORM_BLOCKS"]
  val get_MAX_FRAGMENT_UNIFORM_BLOCKS: 'tags this -> ([`L_n_35373[@js 35373]] [@js.enum]) [@@js.get "MAX_FRAGMENT_UNIFORM_BLOCKS"]
  val get_MAX_COMBINED_UNIFORM_BLOCKS: 'tags this -> ([`L_n_35374[@js 35374]] [@js.enum]) [@@js.get "MAX_COMBINED_UNIFORM_BLOCKS"]
  val get_MAX_UNIFORM_BUFFER_BINDINGS: 'tags this -> ([`L_n_35375[@js 35375]] [@js.enum]) [@@js.get "MAX_UNIFORM_BUFFER_BINDINGS"]
  val get_MAX_UNIFORM_BLOCK_SIZE: 'tags this -> ([`L_n_35376[@js 35376]] [@js.enum]) [@@js.get "MAX_UNIFORM_BLOCK_SIZE"]
  val get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: 'tags this -> ([`L_n_35377[@js 35377]] [@js.enum]) [@@js.get "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS"]
  val get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: 'tags this -> ([`L_n_35379[@js 35379]] [@js.enum]) [@@js.get "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS"]
  val get_UNIFORM_BUFFER_OFFSET_ALIGNMENT: 'tags this -> ([`L_n_35380[@js 35380]] [@js.enum]) [@@js.get "UNIFORM_BUFFER_OFFSET_ALIGNMENT"]
  val get_ACTIVE_UNIFORM_BLOCKS: 'tags this -> ([`L_n_35382[@js 35382]] [@js.enum]) [@@js.get "ACTIVE_UNIFORM_BLOCKS"]
  val get_UNIFORM_TYPE: 'tags this -> ([`L_n_35383[@js 35383]] [@js.enum]) [@@js.get "UNIFORM_TYPE"]
  val get_UNIFORM_SIZE: 'tags this -> ([`L_n_35384[@js 35384]] [@js.enum]) [@@js.get "UNIFORM_SIZE"]
  val get_UNIFORM_BLOCK_INDEX: 'tags this -> ([`L_n_35386[@js 35386]] [@js.enum]) [@@js.get "UNIFORM_BLOCK_INDEX"]
  val get_UNIFORM_OFFSET: 'tags this -> ([`L_n_35387[@js 35387]] [@js.enum]) [@@js.get "UNIFORM_OFFSET"]
  val get_UNIFORM_ARRAY_STRIDE: 'tags this -> ([`L_n_35388[@js 35388]] [@js.enum]) [@@js.get "UNIFORM_ARRAY_STRIDE"]
  val get_UNIFORM_MATRIX_STRIDE: 'tags this -> ([`L_n_35389[@js 35389]] [@js.enum]) [@@js.get "UNIFORM_MATRIX_STRIDE"]
  val get_UNIFORM_IS_ROW_MAJOR: 'tags this -> ([`L_n_35390[@js 35390]] [@js.enum]) [@@js.get "UNIFORM_IS_ROW_MAJOR"]
  val get_UNIFORM_BLOCK_BINDING: 'tags this -> ([`L_n_35391[@js 35391]] [@js.enum]) [@@js.get "UNIFORM_BLOCK_BINDING"]
  val get_UNIFORM_BLOCK_DATA_SIZE: 'tags this -> ([`L_n_35392[@js 35392]] [@js.enum]) [@@js.get "UNIFORM_BLOCK_DATA_SIZE"]
  val get_UNIFORM_BLOCK_ACTIVE_UNIFORMS: 'tags this -> ([`L_n_35394[@js 35394]] [@js.enum]) [@@js.get "UNIFORM_BLOCK_ACTIVE_UNIFORMS"]
  val get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: 'tags this -> ([`L_n_35395[@js 35395]] [@js.enum]) [@@js.get "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES"]
  val get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: 'tags this -> ([`L_n_35396[@js 35396]] [@js.enum]) [@@js.get "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER"]
  val get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: 'tags this -> ([`L_n_35398[@js 35398]] [@js.enum]) [@@js.get "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER"]
  val get_INVALID_INDEX: 'tags this -> ([`L_n_minus1[@js -1]] [@js.enum]) [@@js.get "INVALID_INDEX"]
  val get_MAX_VERTEX_OUTPUT_COMPONENTS: 'tags this -> ([`L_n_37154[@js 37154]] [@js.enum]) [@@js.get "MAX_VERTEX_OUTPUT_COMPONENTS"]
  val get_MAX_FRAGMENT_INPUT_COMPONENTS: 'tags this -> ([`L_n_37157[@js 37157]] [@js.enum]) [@@js.get "MAX_FRAGMENT_INPUT_COMPONENTS"]
  val get_MAX_SERVER_WAIT_TIMEOUT: 'tags this -> ([`L_n_37137[@js 37137]] [@js.enum]) [@@js.get "MAX_SERVER_WAIT_TIMEOUT"]
  val get_OBJECT_TYPE: 'tags this -> ([`L_n_37138[@js 37138]] [@js.enum]) [@@js.get "OBJECT_TYPE"]
  val get_SYNC_CONDITION: 'tags this -> ([`L_n_37139[@js 37139]] [@js.enum]) [@@js.get "SYNC_CONDITION"]
  val get_SYNC_STATUS: 'tags this -> ([`L_n_37140[@js 37140]] [@js.enum]) [@@js.get "SYNC_STATUS"]
  val get_SYNC_FLAGS: 'tags this -> ([`L_n_37141[@js 37141]] [@js.enum]) [@@js.get "SYNC_FLAGS"]
  val get_SYNC_FENCE: 'tags this -> ([`L_n_37142[@js 37142]] [@js.enum]) [@@js.get "SYNC_FENCE"]
  val get_SYNC_GPU_COMMANDS_COMPLETE: 'tags this -> ([`L_n_37143[@js 37143]] [@js.enum]) [@@js.get "SYNC_GPU_COMMANDS_COMPLETE"]
  val get_UNSIGNALED: 'tags this -> ([`L_n_37144[@js 37144]] [@js.enum]) [@@js.get "UNSIGNALED"]
  val get_SIGNALED: 'tags this -> ([`L_n_37145[@js 37145]] [@js.enum]) [@@js.get "SIGNALED"]
  val get_ALREADY_SIGNALED: 'tags this -> ([`L_n_37146[@js 37146]] [@js.enum]) [@@js.get "ALREADY_SIGNALED"]
  val get_TIMEOUT_EXPIRED: 'tags this -> ([`L_n_37147[@js 37147]] [@js.enum]) [@@js.get "TIMEOUT_EXPIRED"]
  val get_CONDITION_SATISFIED: 'tags this -> ([`L_n_37148[@js 37148]] [@js.enum]) [@@js.get "CONDITION_SATISFIED"]
  val get_WAIT_FAILED: 'tags this -> ([`L_n_37149[@js 37149]] [@js.enum]) [@@js.get "WAIT_FAILED"]
  val get_SYNC_FLUSH_COMMANDS_BIT: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SYNC_FLUSH_COMMANDS_BIT"]
  val get_VERTEX_ATTRIB_ARRAY_DIVISOR: 'tags this -> ([`L_n_35070[@js 35070]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_DIVISOR"]
  val get_ANY_SAMPLES_PASSED: 'tags this -> ([`L_n_35887[@js 35887]] [@js.enum]) [@@js.get "ANY_SAMPLES_PASSED"]
  val get_ANY_SAMPLES_PASSED_CONSERVATIVE: 'tags this -> ([`L_n_36202[@js 36202]] [@js.enum]) [@@js.get "ANY_SAMPLES_PASSED_CONSERVATIVE"]
  val get_SAMPLER_BINDING: 'tags this -> ([`L_n_35097[@js 35097]] [@js.enum]) [@@js.get "SAMPLER_BINDING"]
  val get_RGB10_A2UI: 'tags this -> ([`L_n_36975[@js 36975]] [@js.enum]) [@@js.get "RGB10_A2UI"]
  val get_INT_2_10_10_10_REV: 'tags this -> ([`L_n_36255[@js 36255]] [@js.enum]) [@@js.get "INT_2_10_10_10_REV"]
  val get_TRANSFORM_FEEDBACK: 'tags this -> ([`L_n_36386[@js 36386]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK"]
  val get_TRANSFORM_FEEDBACK_PAUSED: 'tags this -> ([`L_n_36387[@js 36387]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_PAUSED"]
  val get_TRANSFORM_FEEDBACK_ACTIVE: 'tags this -> ([`L_n_36388[@js 36388]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_ACTIVE"]
  val get_TRANSFORM_FEEDBACK_BINDING: 'tags this -> ([`L_n_36389[@js 36389]] [@js.enum]) [@@js.get "TRANSFORM_FEEDBACK_BINDING"]
  val get_TEXTURE_IMMUTABLE_FORMAT: 'tags this -> ([`L_n_37167[@js 37167]] [@js.enum]) [@@js.get "TEXTURE_IMMUTABLE_FORMAT"]
  val get_MAX_ELEMENT_INDEX: 'tags this -> ([`L_n_36203[@js 36203]] [@js.enum]) [@@js.get "MAX_ELEMENT_INDEX"]
  val get_TEXTURE_IMMUTABLE_LEVELS: 'tags this -> ([`L_n_33503[@js 33503]] [@js.enum]) [@@js.get "TEXTURE_IMMUTABLE_LEVELS"]
  val get_TIMEOUT_IGNORED: 'tags this -> ([`L_n_minus1[@js -1]] [@js.enum]) [@@js.get "TIMEOUT_IGNORED"]
  val get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL: 'tags this -> ([`L_n_37447[@js 37447]] [@js.enum]) [@@js.get "MAX_CLIENT_WAIT_TIMEOUT_WEBGL"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
and WebGL2RenderingContextOverloads : sig
  type t = [`WebGL2RenderingContextOverloads] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGL2RenderingContextOverloads]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGL2RenderingContextOverloads]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGL2RenderingContextOverloads ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform1fv: 'tags this -> location:WebGLUniformLocation.t option -> data:GLfloat.t Iterable.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform1fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform1iv: 'tags this -> location:WebGLUniformLocation.t option -> data:GLint.t Iterable.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform1iv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform2fv: 'tags this -> location:WebGLUniformLocation.t option -> data:GLfloat.t Iterable.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform2fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform2iv: 'tags this -> location:WebGLUniformLocation.t option -> data:GLint.t Iterable.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform2iv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform3fv: 'tags this -> location:WebGLUniformLocation.t option -> data:GLfloat.t Iterable.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform3fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform3iv: 'tags this -> location:WebGLUniformLocation.t option -> data:GLint.t Iterable.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform3iv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform4fv: 'tags this -> location:WebGLUniformLocation.t option -> data:GLfloat.t Iterable.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform4fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform4iv: 'tags this -> location:WebGLUniformLocation.t option -> data:GLint.t Iterable.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform4iv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix) *)
  val uniformMatrix2fv: 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> data:GLfloat.t Iterable.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniformMatrix2fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix) *)
  val uniformMatrix3fv: 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> data:GLfloat.t Iterable.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniformMatrix3fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix) *)
  val uniformMatrix4fv: 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> data:GLfloat.t Iterable.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniformMatrix4fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferData) *)
  val bufferData: 'tags this -> target:GLenum.t -> size:GLsizeiptr.t -> usage:GLenum.t -> unit [@@js.call "bufferData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferData) *)
  val bufferData': 'tags this -> target:GLenum.t -> srcData:AllowSharedBufferSource.t option -> usage:GLenum.t -> unit [@@js.call "bufferData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferData) *)
  val bufferData'': 'tags this -> target:GLenum.t -> srcData:ArrayBufferView.t -> usage:GLenum.t -> srcOffset:float -> ?length:GLuint.t -> unit -> unit [@@js.call "bufferData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferSubData) *)
  val bufferSubData: 'tags this -> target:GLenum.t -> dstByteOffset:GLintptr.t -> srcData:AllowSharedBufferSource.t -> unit [@@js.call "bufferSubData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferSubData) *)
  val bufferSubData': 'tags this -> target:GLenum.t -> dstByteOffset:GLintptr.t -> srcData:ArrayBufferView.t -> srcOffset:float -> ?length:GLuint.t -> unit -> unit [@@js.call "bufferSubData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/compressedTexImage2D) *)
  val compressedTexImage2D: 'tags this -> target:GLenum.t -> level:GLint.t -> internalformat:GLenum.t -> width:GLsizei.t -> height:GLsizei.t -> border:GLint.t -> imageSize:GLsizei.t -> offset:GLintptr.t -> unit [@@js.call "compressedTexImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/compressedTexImage2D) *)
  val compressedTexImage2D': 'tags this -> target:GLenum.t -> level:GLint.t -> internalformat:GLenum.t -> width:GLsizei.t -> height:GLsizei.t -> border:GLint.t -> srcData:ArrayBufferView.t -> ?srcOffset:float -> ?srcLengthOverride:GLuint.t -> unit -> unit [@@js.call "compressedTexImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/compressedTexSubImage2D) *)
  val compressedTexSubImage2D: 'tags this -> target:GLenum.t -> level:GLint.t -> xoffset:GLint.t -> yoffset:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> format:GLenum.t -> imageSize:GLsizei.t -> offset:GLintptr.t -> unit [@@js.call "compressedTexSubImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/compressedTexSubImage2D) *)
  val compressedTexSubImage2D': 'tags this -> target:GLenum.t -> level:GLint.t -> xoffset:GLint.t -> yoffset:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> format:GLenum.t -> srcData:ArrayBufferView.t -> ?srcOffset:float -> ?srcLengthOverride:GLuint.t -> unit -> unit [@@js.call "compressedTexSubImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/readPixels) *)
  val readPixels: 'tags this -> x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> format:GLenum.t -> type_:GLenum.t -> dstData:ArrayBufferView.t option -> unit [@@js.call "readPixels"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/readPixels) *)
  val readPixels': 'tags this -> x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> format:GLenum.t -> type_:GLenum.t -> offset:GLintptr.t -> unit [@@js.call "readPixels"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/readPixels) *)
  val readPixels'': 'tags this -> x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> format:GLenum.t -> type_:GLenum.t -> dstData:ArrayBufferView.t -> dstOffset:float -> unit [@@js.call "readPixels"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texImage2D) *)
  val texImage2D: 'tags this -> target:GLenum.t -> level:GLint.t -> internalformat:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> border:GLint.t -> format:GLenum.t -> type_:GLenum.t -> pixels:ArrayBufferView.t option -> unit [@@js.call "texImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texImage2D) *)
  val texImage2D': 'tags this -> target:GLenum.t -> level:GLint.t -> internalformat:GLint.t -> format:GLenum.t -> type_:GLenum.t -> source:TexImageSource.t -> unit [@@js.call "texImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texImage2D) *)
  val texImage2D'': 'tags this -> target:GLenum.t -> level:GLint.t -> internalformat:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> border:GLint.t -> format:GLenum.t -> type_:GLenum.t -> pboOffset:GLintptr.t -> unit [@@js.call "texImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texImage2D) *)
  val texImage2D''': 'tags this -> target:GLenum.t -> level:GLint.t -> internalformat:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> border:GLint.t -> format:GLenum.t -> type_:GLenum.t -> source:TexImageSource.t -> unit [@@js.call "texImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texImage2D) *)
  val texImage2D'''': 'tags this -> target:GLenum.t -> level:GLint.t -> internalformat:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> border:GLint.t -> format:GLenum.t -> type_:GLenum.t -> srcData:ArrayBufferView.t -> srcOffset:float -> unit [@@js.call "texImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texSubImage2D) *)
  val texSubImage2D: 'tags this -> target:GLenum.t -> level:GLint.t -> xoffset:GLint.t -> yoffset:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> format:GLenum.t -> type_:GLenum.t -> pixels:ArrayBufferView.t option -> unit [@@js.call "texSubImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texSubImage2D) *)
  val texSubImage2D': 'tags this -> target:GLenum.t -> level:GLint.t -> xoffset:GLint.t -> yoffset:GLint.t -> format:GLenum.t -> type_:GLenum.t -> source:TexImageSource.t -> unit [@@js.call "texSubImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texSubImage2D) *)
  val texSubImage2D'': 'tags this -> target:GLenum.t -> level:GLint.t -> xoffset:GLint.t -> yoffset:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> format:GLenum.t -> type_:GLenum.t -> pboOffset:GLintptr.t -> unit [@@js.call "texSubImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texSubImage2D) *)
  val texSubImage2D''': 'tags this -> target:GLenum.t -> level:GLint.t -> xoffset:GLint.t -> yoffset:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> format:GLenum.t -> type_:GLenum.t -> source:TexImageSource.t -> unit [@@js.call "texSubImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texSubImage2D) *)
  val texSubImage2D'''': 'tags this -> target:GLenum.t -> level:GLint.t -> xoffset:GLint.t -> yoffset:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> format:GLenum.t -> type_:GLenum.t -> srcData:ArrayBufferView.t -> srcOffset:float -> unit [@@js.call "texSubImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform1fv': 'tags this -> location:WebGLUniformLocation.t option -> data:Float32List.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform1fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform1iv': 'tags this -> location:WebGLUniformLocation.t option -> data:Int32List.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform1iv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform2fv': 'tags this -> location:WebGLUniformLocation.t option -> data:Float32List.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform2fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform2iv': 'tags this -> location:WebGLUniformLocation.t option -> data:Int32List.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform2iv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform3fv': 'tags this -> location:WebGLUniformLocation.t option -> data:Float32List.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform3fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform3iv': 'tags this -> location:WebGLUniformLocation.t option -> data:Int32List.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform3iv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform4fv': 'tags this -> location:WebGLUniformLocation.t option -> data:Float32List.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform4fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform4iv': 'tags this -> location:WebGLUniformLocation.t option -> data:Int32List.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniform4iv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix) *)
  val uniformMatrix2fv': 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> data:Float32List.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniformMatrix2fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix) *)
  val uniformMatrix3fv': 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> data:Float32List.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniformMatrix3fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix) *)
  val uniformMatrix4fv': 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> data:Float32List.t -> ?srcOffset:float -> ?srcLength:GLuint.t -> unit -> unit [@@js.call "uniformMatrix4fv"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Provides an interface to the OpenGL ES 2.0 graphics rendering context for the drawing surface of an HTML <canvas> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext)
*)
and[@js.scope "WebGLRenderingContext"] WebGLRenderingContext : sig
  type t = [`WebGLRenderingContext | `WebGLRenderingContextBase | `WebGLRenderingContextOverloads] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLRenderingContext | `WebGLRenderingContextBase | `WebGLRenderingContextOverloads]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLRenderingContext | `WebGLRenderingContextBase | `WebGLRenderingContextOverloads]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLRenderingContext ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  val depth_buffer_bit: unit -> ([`L_n_256[@js 256]] [@js.enum]) [@@js.get "DEPTH_BUFFER_BIT"]
  val stencil_buffer_bit: unit -> ([`L_n_1024[@js 1024]] [@js.enum]) [@@js.get "STENCIL_BUFFER_BIT"]
  val color_buffer_bit: unit -> ([`L_n_16384[@js 16384]] [@js.enum]) [@@js.get "COLOR_BUFFER_BIT"]
  val points: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "POINTS"]
  val lines: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "LINES"]
  val line_loop: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "LINE_LOOP"]
  val line_strip: unit -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "LINE_STRIP"]
  val triangles: unit -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "TRIANGLES"]
  val triangle_strip: unit -> ([`L_n_5[@js 5]] [@js.enum]) [@@js.get "TRIANGLE_STRIP"]
  val triangle_fan: unit -> ([`L_n_6[@js 6]] [@js.enum]) [@@js.get "TRIANGLE_FAN"]
  val zero: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "ZERO"]
  val one: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "ONE"]
  val src_color: unit -> ([`L_n_768[@js 768]] [@js.enum]) [@@js.get "SRC_COLOR"]
  val one_minus_src_color: unit -> ([`L_n_769[@js 769]] [@js.enum]) [@@js.get "ONE_MINUS_SRC_COLOR"]
  val src_alpha: unit -> ([`L_n_770[@js 770]] [@js.enum]) [@@js.get "SRC_ALPHA"]
  val one_minus_src_alpha: unit -> ([`L_n_771[@js 771]] [@js.enum]) [@@js.get "ONE_MINUS_SRC_ALPHA"]
  val dst_alpha: unit -> ([`L_n_772[@js 772]] [@js.enum]) [@@js.get "DST_ALPHA"]
  val one_minus_dst_alpha: unit -> ([`L_n_773[@js 773]] [@js.enum]) [@@js.get "ONE_MINUS_DST_ALPHA"]
  val dst_color: unit -> ([`L_n_774[@js 774]] [@js.enum]) [@@js.get "DST_COLOR"]
  val one_minus_dst_color: unit -> ([`L_n_775[@js 775]] [@js.enum]) [@@js.get "ONE_MINUS_DST_COLOR"]
  val src_alpha_saturate: unit -> ([`L_n_776[@js 776]] [@js.enum]) [@@js.get "SRC_ALPHA_SATURATE"]
  val func_add: unit -> ([`L_n_32774[@js 32774]] [@js.enum]) [@@js.get "FUNC_ADD"]
  val blend_equation: unit -> ([`L_n_32777[@js 32777]] [@js.enum]) [@@js.get "BLEND_EQUATION"]
  val blend_equation_rgb: unit -> ([`L_n_32777[@js 32777]] [@js.enum]) [@@js.get "BLEND_EQUATION_RGB"]
  val blend_equation_alpha: unit -> ([`L_n_34877[@js 34877]] [@js.enum]) [@@js.get "BLEND_EQUATION_ALPHA"]
  val func_subtract: unit -> ([`L_n_32778[@js 32778]] [@js.enum]) [@@js.get "FUNC_SUBTRACT"]
  val func_reverse_subtract: unit -> ([`L_n_32779[@js 32779]] [@js.enum]) [@@js.get "FUNC_REVERSE_SUBTRACT"]
  val blend_dst_rgb: unit -> ([`L_n_32968[@js 32968]] [@js.enum]) [@@js.get "BLEND_DST_RGB"]
  val blend_src_rgb: unit -> ([`L_n_32969[@js 32969]] [@js.enum]) [@@js.get "BLEND_SRC_RGB"]
  val blend_dst_alpha: unit -> ([`L_n_32970[@js 32970]] [@js.enum]) [@@js.get "BLEND_DST_ALPHA"]
  val blend_src_alpha: unit -> ([`L_n_32971[@js 32971]] [@js.enum]) [@@js.get "BLEND_SRC_ALPHA"]
  val constant_color: unit -> ([`L_n_32769[@js 32769]] [@js.enum]) [@@js.get "CONSTANT_COLOR"]
  val one_minus_constant_color: unit -> ([`L_n_32770[@js 32770]] [@js.enum]) [@@js.get "ONE_MINUS_CONSTANT_COLOR"]
  val constant_alpha: unit -> ([`L_n_32771[@js 32771]] [@js.enum]) [@@js.get "CONSTANT_ALPHA"]
  val one_minus_constant_alpha: unit -> ([`L_n_32772[@js 32772]] [@js.enum]) [@@js.get "ONE_MINUS_CONSTANT_ALPHA"]
  val blend_color: unit -> ([`L_n_32773[@js 32773]] [@js.enum]) [@@js.get "BLEND_COLOR"]
  val array_buffer: unit -> ([`L_n_34962[@js 34962]] [@js.enum]) [@@js.get "ARRAY_BUFFER"]
  val element_array_buffer: unit -> ([`L_n_34963[@js 34963]] [@js.enum]) [@@js.get "ELEMENT_ARRAY_BUFFER"]
  val array_buffer_binding: unit -> ([`L_n_34964[@js 34964]] [@js.enum]) [@@js.get "ARRAY_BUFFER_BINDING"]
  val element_array_buffer_binding: unit -> ([`L_n_34965[@js 34965]] [@js.enum]) [@@js.get "ELEMENT_ARRAY_BUFFER_BINDING"]
  val stream_draw: unit -> ([`L_n_35040[@js 35040]] [@js.enum]) [@@js.get "STREAM_DRAW"]
  val static_draw: unit -> ([`L_n_35044[@js 35044]] [@js.enum]) [@@js.get "STATIC_DRAW"]
  val dynamic_draw: unit -> ([`L_n_35048[@js 35048]] [@js.enum]) [@@js.get "DYNAMIC_DRAW"]
  val buffer_size: unit -> ([`L_n_34660[@js 34660]] [@js.enum]) [@@js.get "BUFFER_SIZE"]
  val buffer_usage: unit -> ([`L_n_34661[@js 34661]] [@js.enum]) [@@js.get "BUFFER_USAGE"]
  val current_vertex_attrib: unit -> ([`L_n_34342[@js 34342]] [@js.enum]) [@@js.get "CURRENT_VERTEX_ATTRIB"]
  val front: unit -> ([`L_n_1028[@js 1028]] [@js.enum]) [@@js.get "FRONT"]
  val back: unit -> ([`L_n_1029[@js 1029]] [@js.enum]) [@@js.get "BACK"]
  val front_and_back: unit -> ([`L_n_1032[@js 1032]] [@js.enum]) [@@js.get "FRONT_AND_BACK"]
  val cull_face: unit -> ([`L_n_2884[@js 2884]] [@js.enum]) [@@js.get "CULL_FACE"]
  val blend: unit -> ([`L_n_3042[@js 3042]] [@js.enum]) [@@js.get "BLEND"]
  val dither: unit -> ([`L_n_3024[@js 3024]] [@js.enum]) [@@js.get "DITHER"]
  val stencil_test: unit -> ([`L_n_2960[@js 2960]] [@js.enum]) [@@js.get "STENCIL_TEST"]
  val depth_test: unit -> ([`L_n_2929[@js 2929]] [@js.enum]) [@@js.get "DEPTH_TEST"]
  val scissor_test: unit -> ([`L_n_3089[@js 3089]] [@js.enum]) [@@js.get "SCISSOR_TEST"]
  val polygon_offset_fill: unit -> ([`L_n_32823[@js 32823]] [@js.enum]) [@@js.get "POLYGON_OFFSET_FILL"]
  val sample_alpha_to_coverage: unit -> ([`L_n_32926[@js 32926]] [@js.enum]) [@@js.get "SAMPLE_ALPHA_TO_COVERAGE"]
  val sample_coverage: unit -> ([`L_n_32928[@js 32928]] [@js.enum]) [@@js.get "SAMPLE_COVERAGE"]
  val no_error: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "NO_ERROR"]
  val invalid_enum: unit -> ([`L_n_1280[@js 1280]] [@js.enum]) [@@js.get "INVALID_ENUM"]
  val invalid_value: unit -> ([`L_n_1281[@js 1281]] [@js.enum]) [@@js.get "INVALID_VALUE"]
  val invalid_operation: unit -> ([`L_n_1282[@js 1282]] [@js.enum]) [@@js.get "INVALID_OPERATION"]
  val out_of_memory: unit -> ([`L_n_1285[@js 1285]] [@js.enum]) [@@js.get "OUT_OF_MEMORY"]
  val cw: unit -> ([`L_n_2304[@js 2304]] [@js.enum]) [@@js.get "CW"]
  val ccw: unit -> ([`L_n_2305[@js 2305]] [@js.enum]) [@@js.get "CCW"]
  val line_width: unit -> ([`L_n_2849[@js 2849]] [@js.enum]) [@@js.get "LINE_WIDTH"]
  val aliased_point_size_range: unit -> ([`L_n_33901[@js 33901]] [@js.enum]) [@@js.get "ALIASED_POINT_SIZE_RANGE"]
  val aliased_line_width_range: unit -> ([`L_n_33902[@js 33902]] [@js.enum]) [@@js.get "ALIASED_LINE_WIDTH_RANGE"]
  val cull_face_mode: unit -> ([`L_n_2885[@js 2885]] [@js.enum]) [@@js.get "CULL_FACE_MODE"]
  val front_face: unit -> ([`L_n_2886[@js 2886]] [@js.enum]) [@@js.get "FRONT_FACE"]
  val depth_range: unit -> ([`L_n_2928[@js 2928]] [@js.enum]) [@@js.get "DEPTH_RANGE"]
  val depth_writemask: unit -> ([`L_n_2930[@js 2930]] [@js.enum]) [@@js.get "DEPTH_WRITEMASK"]
  val depth_clear_value: unit -> ([`L_n_2931[@js 2931]] [@js.enum]) [@@js.get "DEPTH_CLEAR_VALUE"]
  val depth_func: unit -> ([`L_n_2932[@js 2932]] [@js.enum]) [@@js.get "DEPTH_FUNC"]
  val stencil_clear_value: unit -> ([`L_n_2961[@js 2961]] [@js.enum]) [@@js.get "STENCIL_CLEAR_VALUE"]
  val stencil_func: unit -> ([`L_n_2962[@js 2962]] [@js.enum]) [@@js.get "STENCIL_FUNC"]
  val stencil_fail: unit -> ([`L_n_2964[@js 2964]] [@js.enum]) [@@js.get "STENCIL_FAIL"]
  val stencil_pass_depth_fail: unit -> ([`L_n_2965[@js 2965]] [@js.enum]) [@@js.get "STENCIL_PASS_DEPTH_FAIL"]
  val stencil_pass_depth_pass: unit -> ([`L_n_2966[@js 2966]] [@js.enum]) [@@js.get "STENCIL_PASS_DEPTH_PASS"]
  val stencil_ref: unit -> ([`L_n_2967[@js 2967]] [@js.enum]) [@@js.get "STENCIL_REF"]
  val stencil_value_mask: unit -> ([`L_n_2963[@js 2963]] [@js.enum]) [@@js.get "STENCIL_VALUE_MASK"]
  val stencil_writemask: unit -> ([`L_n_2968[@js 2968]] [@js.enum]) [@@js.get "STENCIL_WRITEMASK"]
  val stencil_back_func: unit -> ([`L_n_34816[@js 34816]] [@js.enum]) [@@js.get "STENCIL_BACK_FUNC"]
  val stencil_back_fail: unit -> ([`L_n_34817[@js 34817]] [@js.enum]) [@@js.get "STENCIL_BACK_FAIL"]
  val stencil_back_pass_depth_fail: unit -> ([`L_n_34818[@js 34818]] [@js.enum]) [@@js.get "STENCIL_BACK_PASS_DEPTH_FAIL"]
  val stencil_back_pass_depth_pass: unit -> ([`L_n_34819[@js 34819]] [@js.enum]) [@@js.get "STENCIL_BACK_PASS_DEPTH_PASS"]
  val stencil_back_ref: unit -> ([`L_n_36003[@js 36003]] [@js.enum]) [@@js.get "STENCIL_BACK_REF"]
  val stencil_back_value_mask: unit -> ([`L_n_36004[@js 36004]] [@js.enum]) [@@js.get "STENCIL_BACK_VALUE_MASK"]
  val stencil_back_writemask: unit -> ([`L_n_36005[@js 36005]] [@js.enum]) [@@js.get "STENCIL_BACK_WRITEMASK"]
  val viewport: unit -> ([`L_n_2978[@js 2978]] [@js.enum]) [@@js.get "VIEWPORT"]
  val scissor_box: unit -> ([`L_n_3088[@js 3088]] [@js.enum]) [@@js.get "SCISSOR_BOX"]
  val color_clear_value: unit -> ([`L_n_3106[@js 3106]] [@js.enum]) [@@js.get "COLOR_CLEAR_VALUE"]
  val color_writemask: unit -> ([`L_n_3107[@js 3107]] [@js.enum]) [@@js.get "COLOR_WRITEMASK"]
  val unpack_alignment: unit -> ([`L_n_3317[@js 3317]] [@js.enum]) [@@js.get "UNPACK_ALIGNMENT"]
  val pack_alignment: unit -> ([`L_n_3333[@js 3333]] [@js.enum]) [@@js.get "PACK_ALIGNMENT"]
  val max_texture_size: unit -> ([`L_n_3379[@js 3379]] [@js.enum]) [@@js.get "MAX_TEXTURE_SIZE"]
  val max_viewport_dims: unit -> ([`L_n_3386[@js 3386]] [@js.enum]) [@@js.get "MAX_VIEWPORT_DIMS"]
  val subpixel_bits: unit -> ([`L_n_3408[@js 3408]] [@js.enum]) [@@js.get "SUBPIXEL_BITS"]
  val red_bits: unit -> ([`L_n_3410[@js 3410]] [@js.enum]) [@@js.get "RED_BITS"]
  val green_bits: unit -> ([`L_n_3411[@js 3411]] [@js.enum]) [@@js.get "GREEN_BITS"]
  val blue_bits: unit -> ([`L_n_3412[@js 3412]] [@js.enum]) [@@js.get "BLUE_BITS"]
  val alpha_bits: unit -> ([`L_n_3413[@js 3413]] [@js.enum]) [@@js.get "ALPHA_BITS"]
  val depth_bits: unit -> ([`L_n_3414[@js 3414]] [@js.enum]) [@@js.get "DEPTH_BITS"]
  val stencil_bits: unit -> ([`L_n_3415[@js 3415]] [@js.enum]) [@@js.get "STENCIL_BITS"]
  val polygon_offset_units: unit -> ([`L_n_10752[@js 10752]] [@js.enum]) [@@js.get "POLYGON_OFFSET_UNITS"]
  val polygon_offset_factor: unit -> ([`L_n_32824[@js 32824]] [@js.enum]) [@@js.get "POLYGON_OFFSET_FACTOR"]
  val texture_binding_2d: unit -> ([`L_n_32873[@js 32873]] [@js.enum]) [@@js.get "TEXTURE_BINDING_2D"]
  val sample_buffers: unit -> ([`L_n_32936[@js 32936]] [@js.enum]) [@@js.get "SAMPLE_BUFFERS"]
  val samples: unit -> ([`L_n_32937[@js 32937]] [@js.enum]) [@@js.get "SAMPLES"]
  val sample_coverage_value: unit -> ([`L_n_32938[@js 32938]] [@js.enum]) [@@js.get "SAMPLE_COVERAGE_VALUE"]
  val sample_coverage_invert: unit -> ([`L_n_32939[@js 32939]] [@js.enum]) [@@js.get "SAMPLE_COVERAGE_INVERT"]
  val compressed_texture_formats: unit -> ([`L_n_34467[@js 34467]] [@js.enum]) [@@js.get "COMPRESSED_TEXTURE_FORMATS"]
  val dont_care: unit -> ([`L_n_4352[@js 4352]] [@js.enum]) [@@js.get "DONT_CARE"]
  val fastest: unit -> ([`L_n_4353[@js 4353]] [@js.enum]) [@@js.get "FASTEST"]
  val nicest: unit -> ([`L_n_4354[@js 4354]] [@js.enum]) [@@js.get "NICEST"]
  val generate_mipmap_hint: unit -> ([`L_n_33170[@js 33170]] [@js.enum]) [@@js.get "GENERATE_MIPMAP_HINT"]
  val byte: unit -> ([`L_n_5120[@js 5120]] [@js.enum]) [@@js.get "BYTE"]
  val unsigned_byte: unit -> ([`L_n_5121[@js 5121]] [@js.enum]) [@@js.get "UNSIGNED_BYTE"]
  val short: unit -> ([`L_n_5122[@js 5122]] [@js.enum]) [@@js.get "SHORT"]
  val unsigned_short: unit -> ([`L_n_5123[@js 5123]] [@js.enum]) [@@js.get "UNSIGNED_SHORT"]
  val int: unit -> ([`L_n_5124[@js 5124]] [@js.enum]) [@@js.get "INT"]
  val unsigned_int: unit -> ([`L_n_5125[@js 5125]] [@js.enum]) [@@js.get "UNSIGNED_INT"]
  val float: unit -> ([`L_n_5126[@js 5126]] [@js.enum]) [@@js.get "FLOAT"]
  val depth_component: unit -> ([`L_n_6402[@js 6402]] [@js.enum]) [@@js.get "DEPTH_COMPONENT"]
  val alpha: unit -> ([`L_n_6406[@js 6406]] [@js.enum]) [@@js.get "ALPHA"]
  val rgb: unit -> ([`L_n_6407[@js 6407]] [@js.enum]) [@@js.get "RGB"]
  val rgba: unit -> ([`L_n_6408[@js 6408]] [@js.enum]) [@@js.get "RGBA"]
  val luminance: unit -> ([`L_n_6409[@js 6409]] [@js.enum]) [@@js.get "LUMINANCE"]
  val luminance_alpha: unit -> ([`L_n_6410[@js 6410]] [@js.enum]) [@@js.get "LUMINANCE_ALPHA"]
  val unsigned_short_4_4_4_4: unit -> ([`L_n_32819[@js 32819]] [@js.enum]) [@@js.get "UNSIGNED_SHORT_4_4_4_4"]
  val unsigned_short_5_5_5_1: unit -> ([`L_n_32820[@js 32820]] [@js.enum]) [@@js.get "UNSIGNED_SHORT_5_5_5_1"]
  val unsigned_short_5_6_5: unit -> ([`L_n_33635[@js 33635]] [@js.enum]) [@@js.get "UNSIGNED_SHORT_5_6_5"]
  val fragment_shader: unit -> ([`L_n_35632[@js 35632]] [@js.enum]) [@@js.get "FRAGMENT_SHADER"]
  val vertex_shader: unit -> ([`L_n_35633[@js 35633]] [@js.enum]) [@@js.get "VERTEX_SHADER"]
  val max_vertex_attribs: unit -> ([`L_n_34921[@js 34921]] [@js.enum]) [@@js.get "MAX_VERTEX_ATTRIBS"]
  val max_vertex_uniform_vectors: unit -> ([`L_n_36347[@js 36347]] [@js.enum]) [@@js.get "MAX_VERTEX_UNIFORM_VECTORS"]
  val max_varying_vectors: unit -> ([`L_n_36348[@js 36348]] [@js.enum]) [@@js.get "MAX_VARYING_VECTORS"]
  val max_combined_texture_image_units: unit -> ([`L_n_35661[@js 35661]] [@js.enum]) [@@js.get "MAX_COMBINED_TEXTURE_IMAGE_UNITS"]
  val max_vertex_texture_image_units: unit -> ([`L_n_35660[@js 35660]] [@js.enum]) [@@js.get "MAX_VERTEX_TEXTURE_IMAGE_UNITS"]
  val max_texture_image_units: unit -> ([`L_n_34930[@js 34930]] [@js.enum]) [@@js.get "MAX_TEXTURE_IMAGE_UNITS"]
  val max_fragment_uniform_vectors: unit -> ([`L_n_36349[@js 36349]] [@js.enum]) [@@js.get "MAX_FRAGMENT_UNIFORM_VECTORS"]
  val shader_type: unit -> ([`L_n_35663[@js 35663]] [@js.enum]) [@@js.get "SHADER_TYPE"]
  val delete_status: unit -> ([`L_n_35712[@js 35712]] [@js.enum]) [@@js.get "DELETE_STATUS"]
  val link_status: unit -> ([`L_n_35714[@js 35714]] [@js.enum]) [@@js.get "LINK_STATUS"]
  val validate_status: unit -> ([`L_n_35715[@js 35715]] [@js.enum]) [@@js.get "VALIDATE_STATUS"]
  val attached_shaders: unit -> ([`L_n_35717[@js 35717]] [@js.enum]) [@@js.get "ATTACHED_SHADERS"]
  val active_uniforms: unit -> ([`L_n_35718[@js 35718]] [@js.enum]) [@@js.get "ACTIVE_UNIFORMS"]
  val active_attributes: unit -> ([`L_n_35721[@js 35721]] [@js.enum]) [@@js.get "ACTIVE_ATTRIBUTES"]
  val shading_language_version: unit -> ([`L_n_35724[@js 35724]] [@js.enum]) [@@js.get "SHADING_LANGUAGE_VERSION"]
  val current_program: unit -> ([`L_n_35725[@js 35725]] [@js.enum]) [@@js.get "CURRENT_PROGRAM"]
  val never: unit -> ([`L_n_512[@js 512]] [@js.enum]) [@@js.get "NEVER"]
  val less: unit -> ([`L_n_513[@js 513]] [@js.enum]) [@@js.get "LESS"]
  val equal: unit -> ([`L_n_514[@js 514]] [@js.enum]) [@@js.get "EQUAL"]
  val lequal: unit -> ([`L_n_515[@js 515]] [@js.enum]) [@@js.get "LEQUAL"]
  val greater: unit -> ([`L_n_516[@js 516]] [@js.enum]) [@@js.get "GREATER"]
  val notequal: unit -> ([`L_n_517[@js 517]] [@js.enum]) [@@js.get "NOTEQUAL"]
  val gequal: unit -> ([`L_n_518[@js 518]] [@js.enum]) [@@js.get "GEQUAL"]
  val always: unit -> ([`L_n_519[@js 519]] [@js.enum]) [@@js.get "ALWAYS"]
  val keep: unit -> ([`L_n_7680[@js 7680]] [@js.enum]) [@@js.get "KEEP"]
  val replace: unit -> ([`L_n_7681[@js 7681]] [@js.enum]) [@@js.get "REPLACE"]
  val incr: unit -> ([`L_n_7682[@js 7682]] [@js.enum]) [@@js.get "INCR"]
  val decr: unit -> ([`L_n_7683[@js 7683]] [@js.enum]) [@@js.get "DECR"]
  val invert: unit -> ([`L_n_5386[@js 5386]] [@js.enum]) [@@js.get "INVERT"]
  val incr_wrap: unit -> ([`L_n_34055[@js 34055]] [@js.enum]) [@@js.get "INCR_WRAP"]
  val decr_wrap: unit -> ([`L_n_34056[@js 34056]] [@js.enum]) [@@js.get "DECR_WRAP"]
  val vendor: unit -> ([`L_n_7936[@js 7936]] [@js.enum]) [@@js.get "VENDOR"]
  val renderer: unit -> ([`L_n_7937[@js 7937]] [@js.enum]) [@@js.get "RENDERER"]
  val version: unit -> ([`L_n_7938[@js 7938]] [@js.enum]) [@@js.get "VERSION"]
  val nearest: unit -> ([`L_n_9728[@js 9728]] [@js.enum]) [@@js.get "NEAREST"]
  val linear: unit -> ([`L_n_9729[@js 9729]] [@js.enum]) [@@js.get "LINEAR"]
  val nearest_mipmap_nearest: unit -> ([`L_n_9984[@js 9984]] [@js.enum]) [@@js.get "NEAREST_MIPMAP_NEAREST"]
  val linear_mipmap_nearest: unit -> ([`L_n_9985[@js 9985]] [@js.enum]) [@@js.get "LINEAR_MIPMAP_NEAREST"]
  val nearest_mipmap_linear: unit -> ([`L_n_9986[@js 9986]] [@js.enum]) [@@js.get "NEAREST_MIPMAP_LINEAR"]
  val linear_mipmap_linear: unit -> ([`L_n_9987[@js 9987]] [@js.enum]) [@@js.get "LINEAR_MIPMAP_LINEAR"]
  val texture_mag_filter: unit -> ([`L_n_10240[@js 10240]] [@js.enum]) [@@js.get "TEXTURE_MAG_FILTER"]
  val texture_min_filter: unit -> ([`L_n_10241[@js 10241]] [@js.enum]) [@@js.get "TEXTURE_MIN_FILTER"]
  val texture_wrap_s: unit -> ([`L_n_10242[@js 10242]] [@js.enum]) [@@js.get "TEXTURE_WRAP_S"]
  val texture_wrap_t: unit -> ([`L_n_10243[@js 10243]] [@js.enum]) [@@js.get "TEXTURE_WRAP_T"]
  val texture_2d: unit -> ([`L_n_3553[@js 3553]] [@js.enum]) [@@js.get "TEXTURE_2D"]
  val texture: unit -> ([`L_n_5890[@js 5890]] [@js.enum]) [@@js.get "TEXTURE"]
  val texture_cube_map: unit -> ([`L_n_34067[@js 34067]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP"]
  val texture_binding_cube_map: unit -> ([`L_n_34068[@js 34068]] [@js.enum]) [@@js.get "TEXTURE_BINDING_CUBE_MAP"]
  val texture_cube_map_positive_x: unit -> ([`L_n_34069[@js 34069]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP_POSITIVE_X"]
  val texture_cube_map_negative_x: unit -> ([`L_n_34070[@js 34070]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP_NEGATIVE_X"]
  val texture_cube_map_positive_y: unit -> ([`L_n_34071[@js 34071]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP_POSITIVE_Y"]
  val texture_cube_map_negative_y: unit -> ([`L_n_34072[@js 34072]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP_NEGATIVE_Y"]
  val texture_cube_map_positive_z: unit -> ([`L_n_34073[@js 34073]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP_POSITIVE_Z"]
  val texture_cube_map_negative_z: unit -> ([`L_n_34074[@js 34074]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP_NEGATIVE_Z"]
  val max_cube_map_texture_size: unit -> ([`L_n_34076[@js 34076]] [@js.enum]) [@@js.get "MAX_CUBE_MAP_TEXTURE_SIZE"]
  val texture0: unit -> ([`L_n_33984[@js 33984]] [@js.enum]) [@@js.get "TEXTURE0"]
  val texture1: unit -> ([`L_n_33985[@js 33985]] [@js.enum]) [@@js.get "TEXTURE1"]
  val texture2: unit -> ([`L_n_33986[@js 33986]] [@js.enum]) [@@js.get "TEXTURE2"]
  val texture3: unit -> ([`L_n_33987[@js 33987]] [@js.enum]) [@@js.get "TEXTURE3"]
  val texture4: unit -> ([`L_n_33988[@js 33988]] [@js.enum]) [@@js.get "TEXTURE4"]
  val texture5: unit -> ([`L_n_33989[@js 33989]] [@js.enum]) [@@js.get "TEXTURE5"]
  val texture6: unit -> ([`L_n_33990[@js 33990]] [@js.enum]) [@@js.get "TEXTURE6"]
  val texture7: unit -> ([`L_n_33991[@js 33991]] [@js.enum]) [@@js.get "TEXTURE7"]
  val texture8: unit -> ([`L_n_33992[@js 33992]] [@js.enum]) [@@js.get "TEXTURE8"]
  val texture9: unit -> ([`L_n_33993[@js 33993]] [@js.enum]) [@@js.get "TEXTURE9"]
  val texture10: unit -> ([`L_n_33994[@js 33994]] [@js.enum]) [@@js.get "TEXTURE10"]
  val texture11: unit -> ([`L_n_33995[@js 33995]] [@js.enum]) [@@js.get "TEXTURE11"]
  val texture12: unit -> ([`L_n_33996[@js 33996]] [@js.enum]) [@@js.get "TEXTURE12"]
  val texture13: unit -> ([`L_n_33997[@js 33997]] [@js.enum]) [@@js.get "TEXTURE13"]
  val texture14: unit -> ([`L_n_33998[@js 33998]] [@js.enum]) [@@js.get "TEXTURE14"]
  val texture15: unit -> ([`L_n_33999[@js 33999]] [@js.enum]) [@@js.get "TEXTURE15"]
  val texture16: unit -> ([`L_n_34000[@js 34000]] [@js.enum]) [@@js.get "TEXTURE16"]
  val texture17: unit -> ([`L_n_34001[@js 34001]] [@js.enum]) [@@js.get "TEXTURE17"]
  val texture18: unit -> ([`L_n_34002[@js 34002]] [@js.enum]) [@@js.get "TEXTURE18"]
  val texture19: unit -> ([`L_n_34003[@js 34003]] [@js.enum]) [@@js.get "TEXTURE19"]
  val texture20: unit -> ([`L_n_34004[@js 34004]] [@js.enum]) [@@js.get "TEXTURE20"]
  val texture21: unit -> ([`L_n_34005[@js 34005]] [@js.enum]) [@@js.get "TEXTURE21"]
  val texture22: unit -> ([`L_n_34006[@js 34006]] [@js.enum]) [@@js.get "TEXTURE22"]
  val texture23: unit -> ([`L_n_34007[@js 34007]] [@js.enum]) [@@js.get "TEXTURE23"]
  val texture24: unit -> ([`L_n_34008[@js 34008]] [@js.enum]) [@@js.get "TEXTURE24"]
  val texture25: unit -> ([`L_n_34009[@js 34009]] [@js.enum]) [@@js.get "TEXTURE25"]
  val texture26: unit -> ([`L_n_34010[@js 34010]] [@js.enum]) [@@js.get "TEXTURE26"]
  val texture27: unit -> ([`L_n_34011[@js 34011]] [@js.enum]) [@@js.get "TEXTURE27"]
  val texture28: unit -> ([`L_n_34012[@js 34012]] [@js.enum]) [@@js.get "TEXTURE28"]
  val texture29: unit -> ([`L_n_34013[@js 34013]] [@js.enum]) [@@js.get "TEXTURE29"]
  val texture30: unit -> ([`L_n_34014[@js 34014]] [@js.enum]) [@@js.get "TEXTURE30"]
  val texture31: unit -> ([`L_n_34015[@js 34015]] [@js.enum]) [@@js.get "TEXTURE31"]
  val active_texture: unit -> ([`L_n_34016[@js 34016]] [@js.enum]) [@@js.get "ACTIVE_TEXTURE"]
  val repeat: unit -> ([`L_n_10497[@js 10497]] [@js.enum]) [@@js.get "REPEAT"]
  val clamp_to_edge: unit -> ([`L_n_33071[@js 33071]] [@js.enum]) [@@js.get "CLAMP_TO_EDGE"]
  val mirrored_repeat: unit -> ([`L_n_33648[@js 33648]] [@js.enum]) [@@js.get "MIRRORED_REPEAT"]
  val float_vec2: unit -> ([`L_n_35664[@js 35664]] [@js.enum]) [@@js.get "FLOAT_VEC2"]
  val float_vec3: unit -> ([`L_n_35665[@js 35665]] [@js.enum]) [@@js.get "FLOAT_VEC3"]
  val float_vec4: unit -> ([`L_n_35666[@js 35666]] [@js.enum]) [@@js.get "FLOAT_VEC4"]
  val int_vec2: unit -> ([`L_n_35667[@js 35667]] [@js.enum]) [@@js.get "INT_VEC2"]
  val int_vec3: unit -> ([`L_n_35668[@js 35668]] [@js.enum]) [@@js.get "INT_VEC3"]
  val int_vec4: unit -> ([`L_n_35669[@js 35669]] [@js.enum]) [@@js.get "INT_VEC4"]
  val bool: unit -> ([`L_n_35670[@js 35670]] [@js.enum]) [@@js.get "BOOL"]
  val bool_vec2: unit -> ([`L_n_35671[@js 35671]] [@js.enum]) [@@js.get "BOOL_VEC2"]
  val bool_vec3: unit -> ([`L_n_35672[@js 35672]] [@js.enum]) [@@js.get "BOOL_VEC3"]
  val bool_vec4: unit -> ([`L_n_35673[@js 35673]] [@js.enum]) [@@js.get "BOOL_VEC4"]
  val float_mat2: unit -> ([`L_n_35674[@js 35674]] [@js.enum]) [@@js.get "FLOAT_MAT2"]
  val float_mat3: unit -> ([`L_n_35675[@js 35675]] [@js.enum]) [@@js.get "FLOAT_MAT3"]
  val float_mat4: unit -> ([`L_n_35676[@js 35676]] [@js.enum]) [@@js.get "FLOAT_MAT4"]
  val sampler_2d: unit -> ([`L_n_35678[@js 35678]] [@js.enum]) [@@js.get "SAMPLER_2D"]
  val sampler_cube: unit -> ([`L_n_35680[@js 35680]] [@js.enum]) [@@js.get "SAMPLER_CUBE"]
  val vertex_attrib_array_enabled: unit -> ([`L_n_34338[@js 34338]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_ENABLED"]
  val vertex_attrib_array_size: unit -> ([`L_n_34339[@js 34339]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_SIZE"]
  val vertex_attrib_array_stride: unit -> ([`L_n_34340[@js 34340]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_STRIDE"]
  val vertex_attrib_array_type: unit -> ([`L_n_34341[@js 34341]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_TYPE"]
  val vertex_attrib_array_normalized: unit -> ([`L_n_34922[@js 34922]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_NORMALIZED"]
  val vertex_attrib_array_pointer: unit -> ([`L_n_34373[@js 34373]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_POINTER"]
  val vertex_attrib_array_buffer_binding: unit -> ([`L_n_34975[@js 34975]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING"]
  val implementation_color_read_type: unit -> ([`L_n_35738[@js 35738]] [@js.enum]) [@@js.get "IMPLEMENTATION_COLOR_READ_TYPE"]
  val implementation_color_read_format: unit -> ([`L_n_35739[@js 35739]] [@js.enum]) [@@js.get "IMPLEMENTATION_COLOR_READ_FORMAT"]
  val compile_status: unit -> ([`L_n_35713[@js 35713]] [@js.enum]) [@@js.get "COMPILE_STATUS"]
  val low_float: unit -> ([`L_n_36336[@js 36336]] [@js.enum]) [@@js.get "LOW_FLOAT"]
  val medium_float: unit -> ([`L_n_36337[@js 36337]] [@js.enum]) [@@js.get "MEDIUM_FLOAT"]
  val high_float: unit -> ([`L_n_36338[@js 36338]] [@js.enum]) [@@js.get "HIGH_FLOAT"]
  val low_int: unit -> ([`L_n_36339[@js 36339]] [@js.enum]) [@@js.get "LOW_INT"]
  val medium_int: unit -> ([`L_n_36340[@js 36340]] [@js.enum]) [@@js.get "MEDIUM_INT"]
  val high_int: unit -> ([`L_n_36341[@js 36341]] [@js.enum]) [@@js.get "HIGH_INT"]
  val framebuffer: unit -> ([`L_n_36160[@js 36160]] [@js.enum]) [@@js.get "FRAMEBUFFER"]
  val renderbuffer: unit -> ([`L_n_36161[@js 36161]] [@js.enum]) [@@js.get "RENDERBUFFER"]
  val rgba4: unit -> ([`L_n_32854[@js 32854]] [@js.enum]) [@@js.get "RGBA4"]
  val rgb5_a1: unit -> ([`L_n_32855[@js 32855]] [@js.enum]) [@@js.get "RGB5_A1"]
  val rgba8: unit -> ([`L_n_32856[@js 32856]] [@js.enum]) [@@js.get "RGBA8"]
  val rgb565: unit -> ([`L_n_36194[@js 36194]] [@js.enum]) [@@js.get "RGB565"]
  val depth_component16: unit -> ([`L_n_33189[@js 33189]] [@js.enum]) [@@js.get "DEPTH_COMPONENT16"]
  val stencil_index8: unit -> ([`L_n_36168[@js 36168]] [@js.enum]) [@@js.get "STENCIL_INDEX8"]
  val depth_stencil: unit -> ([`L_n_34041[@js 34041]] [@js.enum]) [@@js.get "DEPTH_STENCIL"]
  val renderbuffer_width: unit -> ([`L_n_36162[@js 36162]] [@js.enum]) [@@js.get "RENDERBUFFER_WIDTH"]
  val renderbuffer_height: unit -> ([`L_n_36163[@js 36163]] [@js.enum]) [@@js.get "RENDERBUFFER_HEIGHT"]
  val renderbuffer_internal_format: unit -> ([`L_n_36164[@js 36164]] [@js.enum]) [@@js.get "RENDERBUFFER_INTERNAL_FORMAT"]
  val renderbuffer_red_size: unit -> ([`L_n_36176[@js 36176]] [@js.enum]) [@@js.get "RENDERBUFFER_RED_SIZE"]
  val renderbuffer_green_size: unit -> ([`L_n_36177[@js 36177]] [@js.enum]) [@@js.get "RENDERBUFFER_GREEN_SIZE"]
  val renderbuffer_blue_size: unit -> ([`L_n_36178[@js 36178]] [@js.enum]) [@@js.get "RENDERBUFFER_BLUE_SIZE"]
  val renderbuffer_alpha_size: unit -> ([`L_n_36179[@js 36179]] [@js.enum]) [@@js.get "RENDERBUFFER_ALPHA_SIZE"]
  val renderbuffer_depth_size: unit -> ([`L_n_36180[@js 36180]] [@js.enum]) [@@js.get "RENDERBUFFER_DEPTH_SIZE"]
  val renderbuffer_stencil_size: unit -> ([`L_n_36181[@js 36181]] [@js.enum]) [@@js.get "RENDERBUFFER_STENCIL_SIZE"]
  val framebuffer_attachment_object_type: unit -> ([`L_n_36048[@js 36048]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE"]
  val framebuffer_attachment_object_name: unit -> ([`L_n_36049[@js 36049]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME"]
  val framebuffer_attachment_texture_level: unit -> ([`L_n_36050[@js 36050]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL"]
  val framebuffer_attachment_texture_cube_map_face: unit -> ([`L_n_36051[@js 36051]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE"]
  val color_attachment0: unit -> ([`L_n_36064[@js 36064]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT0"]
  val depth_attachment: unit -> ([`L_n_36096[@js 36096]] [@js.enum]) [@@js.get "DEPTH_ATTACHMENT"]
  val stencil_attachment: unit -> ([`L_n_36128[@js 36128]] [@js.enum]) [@@js.get "STENCIL_ATTACHMENT"]
  val depth_stencil_attachment: unit -> ([`L_n_33306[@js 33306]] [@js.enum]) [@@js.get "DEPTH_STENCIL_ATTACHMENT"]
  val none: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "NONE"]
  val framebuffer_complete: unit -> ([`L_n_36053[@js 36053]] [@js.enum]) [@@js.get "FRAMEBUFFER_COMPLETE"]
  val framebuffer_incomplete_attachment: unit -> ([`L_n_36054[@js 36054]] [@js.enum]) [@@js.get "FRAMEBUFFER_INCOMPLETE_ATTACHMENT"]
  val framebuffer_incomplete_missing_attachment: unit -> ([`L_n_36055[@js 36055]] [@js.enum]) [@@js.get "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"]
  val framebuffer_incomplete_dimensions: unit -> ([`L_n_36057[@js 36057]] [@js.enum]) [@@js.get "FRAMEBUFFER_INCOMPLETE_DIMENSIONS"]
  val framebuffer_unsupported: unit -> ([`L_n_36061[@js 36061]] [@js.enum]) [@@js.get "FRAMEBUFFER_UNSUPPORTED"]
  val framebuffer_binding: unit -> ([`L_n_36006[@js 36006]] [@js.enum]) [@@js.get "FRAMEBUFFER_BINDING"]
  val renderbuffer_binding: unit -> ([`L_n_36007[@js 36007]] [@js.enum]) [@@js.get "RENDERBUFFER_BINDING"]
  val max_renderbuffer_size: unit -> ([`L_n_34024[@js 34024]] [@js.enum]) [@@js.get "MAX_RENDERBUFFER_SIZE"]
  val invalid_framebuffer_operation: unit -> ([`L_n_1286[@js 1286]] [@js.enum]) [@@js.get "INVALID_FRAMEBUFFER_OPERATION"]
  val unpack_flip_y_webgl: unit -> ([`L_n_37440[@js 37440]] [@js.enum]) [@@js.get "UNPACK_FLIP_Y_WEBGL"]
  val unpack_premultiply_alpha_webgl: unit -> ([`L_n_37441[@js 37441]] [@js.enum]) [@@js.get "UNPACK_PREMULTIPLY_ALPHA_WEBGL"]
  val context_lost_webgl: unit -> ([`L_n_37442[@js 37442]] [@js.enum]) [@@js.get "CONTEXT_LOST_WEBGL"]
  val unpack_colorspace_conversion_webgl: unit -> ([`L_n_37443[@js 37443]] [@js.enum]) [@@js.get "UNPACK_COLORSPACE_CONVERSION_WEBGL"]
  val browser_default_webgl: unit -> ([`L_n_37444[@js 37444]] [@js.enum]) [@@js.get "BROWSER_DEFAULT_WEBGL"]
end
and WebGLRenderingContextBase : sig
  type t = [`WebGLRenderingContextBase] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLRenderingContextBase]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLRenderingContextBase]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLRenderingContextBase ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib) *)
  val vertexAttrib1fv: 'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t -> unit [@@js.call "vertexAttrib1fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib) *)
  val vertexAttrib2fv: 'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t -> unit [@@js.call "vertexAttrib2fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib) *)
  val vertexAttrib3fv: 'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t -> unit [@@js.call "vertexAttrib3fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib) *)
  val vertexAttrib4fv: 'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t -> unit [@@js.call "vertexAttrib4fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/canvas) *)
  val get_canvas: 'tags this -> (HTMLCanvasElement.t, OffscreenCanvas.t) union2 [@@js.get "canvas"]
  val get_drawingBufferColorSpace: 'tags this -> PredefinedColorSpace.t [@@js.get "drawingBufferColorSpace"]
  val set_drawingBufferColorSpace: 'tags this -> PredefinedColorSpace.t -> unit [@@js.set "drawingBufferColorSpace"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/drawingBufferHeight) *)
  val get_drawingBufferHeight: 'tags this -> GLsizei.t [@@js.get "drawingBufferHeight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/drawingBufferWidth) *)
  val get_drawingBufferWidth: 'tags this -> GLsizei.t [@@js.get "drawingBufferWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/activeTexture) *)
  val activeTexture: 'tags this -> texture:GLenum.t -> unit [@@js.call "activeTexture"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/attachShader) *)
  val attachShader: 'tags this -> program:WebGLProgram.t -> shader:WebGLShader.t -> unit [@@js.call "attachShader"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bindAttribLocation) *)
  val bindAttribLocation: 'tags this -> program:WebGLProgram.t -> index:GLuint.t -> name:string -> unit [@@js.call "bindAttribLocation"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bindBuffer) *)
  val bindBuffer: 'tags this -> target:GLenum.t -> buffer:WebGLBuffer.t option -> unit [@@js.call "bindBuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bindFramebuffer) *)
  val bindFramebuffer: 'tags this -> target:GLenum.t -> framebuffer:WebGLFramebuffer.t option -> unit [@@js.call "bindFramebuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bindRenderbuffer) *)
  val bindRenderbuffer: 'tags this -> target:GLenum.t -> renderbuffer:WebGLRenderbuffer.t option -> unit [@@js.call "bindRenderbuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bindTexture) *)
  val bindTexture: 'tags this -> target:GLenum.t -> texture:WebGLTexture.t option -> unit [@@js.call "bindTexture"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/blendColor) *)
  val blendColor: 'tags this -> red:GLclampf.t -> green:GLclampf.t -> blue:GLclampf.t -> alpha:GLclampf.t -> unit [@@js.call "blendColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/blendEquation) *)
  val blendEquation: 'tags this -> mode:GLenum.t -> unit [@@js.call "blendEquation"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/blendEquationSeparate) *)
  val blendEquationSeparate: 'tags this -> modeRGB:GLenum.t -> modeAlpha:GLenum.t -> unit [@@js.call "blendEquationSeparate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/blendFunc) *)
  val blendFunc: 'tags this -> sfactor:GLenum.t -> dfactor:GLenum.t -> unit [@@js.call "blendFunc"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/blendFuncSeparate) *)
  val blendFuncSeparate: 'tags this -> srcRGB:GLenum.t -> dstRGB:GLenum.t -> srcAlpha:GLenum.t -> dstAlpha:GLenum.t -> unit [@@js.call "blendFuncSeparate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/checkFramebufferStatus) *)
  val checkFramebufferStatus: 'tags this -> target:GLenum.t -> GLenum.t [@@js.call "checkFramebufferStatus"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/clear) *)
  val clear: 'tags this -> mask:GLbitfield.t -> unit [@@js.call "clear"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/clearColor) *)
  val clearColor: 'tags this -> red:GLclampf.t -> green:GLclampf.t -> blue:GLclampf.t -> alpha:GLclampf.t -> unit [@@js.call "clearColor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/clearDepth) *)
  val clearDepth: 'tags this -> depth:GLclampf.t -> unit [@@js.call "clearDepth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/clearStencil) *)
  val clearStencil: 'tags this -> s:GLint.t -> unit [@@js.call "clearStencil"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/colorMask) *)
  val colorMask: 'tags this -> red:GLboolean.t -> green:GLboolean.t -> blue:GLboolean.t -> alpha:GLboolean.t -> unit [@@js.call "colorMask"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/compileShader) *)
  val compileShader: 'tags this -> shader:WebGLShader.t -> unit [@@js.call "compileShader"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/copyTexImage2D) *)
  val copyTexImage2D: 'tags this -> target:GLenum.t -> level:GLint.t -> internalformat:GLenum.t -> x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> border:GLint.t -> unit [@@js.call "copyTexImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/copyTexSubImage2D) *)
  val copyTexSubImage2D: 'tags this -> target:GLenum.t -> level:GLint.t -> xoffset:GLint.t -> yoffset:GLint.t -> x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit [@@js.call "copyTexSubImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/createBuffer) *)
  val createBuffer: 'tags this -> WebGLBuffer.t option [@@js.call "createBuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/createFramebuffer) *)
  val createFramebuffer: 'tags this -> WebGLFramebuffer.t option [@@js.call "createFramebuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/createProgram) *)
  val createProgram: 'tags this -> WebGLProgram.t option [@@js.call "createProgram"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/createRenderbuffer) *)
  val createRenderbuffer: 'tags this -> WebGLRenderbuffer.t option [@@js.call "createRenderbuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/createShader) *)
  val createShader: 'tags this -> type_:GLenum.t -> WebGLShader.t option [@@js.call "createShader"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/createTexture) *)
  val createTexture: 'tags this -> WebGLTexture.t option [@@js.call "createTexture"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/cullFace) *)
  val cullFace: 'tags this -> mode:GLenum.t -> unit [@@js.call "cullFace"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/deleteBuffer) *)
  val deleteBuffer: 'tags this -> buffer:WebGLBuffer.t option -> unit [@@js.call "deleteBuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/deleteFramebuffer) *)
  val deleteFramebuffer: 'tags this -> framebuffer:WebGLFramebuffer.t option -> unit [@@js.call "deleteFramebuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/deleteProgram) *)
  val deleteProgram: 'tags this -> program:WebGLProgram.t option -> unit [@@js.call "deleteProgram"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/deleteRenderbuffer) *)
  val deleteRenderbuffer: 'tags this -> renderbuffer:WebGLRenderbuffer.t option -> unit [@@js.call "deleteRenderbuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/deleteShader) *)
  val deleteShader: 'tags this -> shader:WebGLShader.t option -> unit [@@js.call "deleteShader"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/deleteTexture) *)
  val deleteTexture: 'tags this -> texture:WebGLTexture.t option -> unit [@@js.call "deleteTexture"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/depthFunc) *)
  val depthFunc: 'tags this -> func:GLenum.t -> unit [@@js.call "depthFunc"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/depthMask) *)
  val depthMask: 'tags this -> flag:GLboolean.t -> unit [@@js.call "depthMask"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/depthRange) *)
  val depthRange: 'tags this -> zNear:GLclampf.t -> zFar:GLclampf.t -> unit [@@js.call "depthRange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/detachShader) *)
  val detachShader: 'tags this -> program:WebGLProgram.t -> shader:WebGLShader.t -> unit [@@js.call "detachShader"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/disable) *)
  val disable: 'tags this -> cap:GLenum.t -> unit [@@js.call "disable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/disableVertexAttribArray) *)
  val disableVertexAttribArray: 'tags this -> index:GLuint.t -> unit [@@js.call "disableVertexAttribArray"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/drawArrays) *)
  val drawArrays: 'tags this -> mode:GLenum.t -> first:GLint.t -> count:GLsizei.t -> unit [@@js.call "drawArrays"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/drawElements) *)
  val drawElements: 'tags this -> mode:GLenum.t -> count:GLsizei.t -> type_:GLenum.t -> offset:GLintptr.t -> unit [@@js.call "drawElements"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/enable) *)
  val enable: 'tags this -> cap:GLenum.t -> unit [@@js.call "enable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/enableVertexAttribArray) *)
  val enableVertexAttribArray: 'tags this -> index:GLuint.t -> unit [@@js.call "enableVertexAttribArray"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/finish) *)
  val finish: 'tags this -> unit [@@js.call "finish"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/flush) *)
  val flush: 'tags this -> unit [@@js.call "flush"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/framebufferRenderbuffer) *)
  val framebufferRenderbuffer: 'tags this -> target:GLenum.t -> attachment:GLenum.t -> renderbuffertarget:GLenum.t -> renderbuffer:WebGLRenderbuffer.t option -> unit [@@js.call "framebufferRenderbuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/framebufferTexture2D) *)
  val framebufferTexture2D: 'tags this -> target:GLenum.t -> attachment:GLenum.t -> textarget:GLenum.t -> texture:WebGLTexture.t option -> level:GLint.t -> unit [@@js.call "framebufferTexture2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/frontFace) *)
  val frontFace: 'tags this -> mode:GLenum.t -> unit [@@js.call "frontFace"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/generateMipmap) *)
  val generateMipmap: 'tags this -> target:GLenum.t -> unit [@@js.call "generateMipmap"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getActiveAttrib) *)
  val getActiveAttrib: 'tags this -> program:WebGLProgram.t -> index:GLuint.t -> WebGLActiveInfo.t option [@@js.call "getActiveAttrib"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getActiveUniform) *)
  val getActiveUniform: 'tags this -> program:WebGLProgram.t -> index:GLuint.t -> WebGLActiveInfo.t option [@@js.call "getActiveUniform"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getAttachedShaders) *)
  val getAttachedShaders: 'tags this -> program:WebGLProgram.t -> WebGLShader.t list option [@@js.call "getAttachedShaders"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getAttribLocation) *)
  val getAttribLocation: 'tags this -> program:WebGLProgram.t -> name:string -> GLint.t [@@js.call "getAttribLocation"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getBufferParameter) *)
  val getBufferParameter: 'tags this -> target:GLenum.t -> pname:GLenum.t -> any [@@js.call "getBufferParameter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getContextAttributes) *)
  val getContextAttributes: 'tags this -> WebGLContextAttributes.t option [@@js.call "getContextAttributes"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getError) *)
  val getError: 'tags this -> GLenum.t [@@js.call "getError"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension: 'tags this -> extensionName:([`L_s4_ANGLE_instanced_arrays[@js "ANGLE_instanced_arrays"]] [@js.enum]) -> ANGLE_instanced_arrays.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension': 'tags this -> extensionName:([`L_s20_EXT_blend_minmax[@js "EXT_blend_minmax"]] [@js.enum]) -> EXT_blend_minmax.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension'': 'tags this -> extensionName:([`L_s21_EXT_color_buffer_float[@js "EXT_color_buffer_float"]] [@js.enum]) -> EXT_color_buffer_float.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension''': 'tags this -> extensionName:([`L_s22_EXT_color_buffer_half_float[@js "EXT_color_buffer_half_float"]] [@js.enum]) -> EXT_color_buffer_half_float.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension'''': 'tags this -> extensionName:([`L_s23_EXT_float_blend[@js "EXT_float_blend"]] [@js.enum]) -> EXT_float_blend.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension''''': 'tags this -> extensionName:([`L_s24_EXT_frag_depth[@js "EXT_frag_depth"]] [@js.enum]) -> EXT_frag_depth.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension'''''': 'tags this -> extensionName:([`L_s25_EXT_sRGB[@js "EXT_sRGB"]] [@js.enum]) -> EXT_sRGB.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension''''''': 'tags this -> extensionName:([`L_s26_EXT_shader_texture_lod[@js "EXT_shader_texture_lod"]] [@js.enum]) -> EXT_shader_texture_lod.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension'''''''': 'tags this -> extensionName:([`L_s27_EXT_texture_compression_bptc[@js "EXT_texture_compression_bptc"]] [@js.enum]) -> EXT_texture_compression_bptc.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension''''''''': 'tags this -> extensionName:([`L_s28_EXT_texture_compression_rgtc[@js "EXT_texture_compression_rgtc"]] [@js.enum]) -> EXT_texture_compression_rgtc.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension'''''''''': 'tags this -> extensionName:([`L_s29_EXT_texture_filter_anisotropic[@js "EXT_texture_filter_anisotropic"]] [@js.enum]) -> EXT_texture_filter_anisotropic.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension''''''''''': 'tags this -> extensionName:([`L_s46_KHR_parallel_shader_compile[@js "KHR_parallel_shader_compile"]] [@js.enum]) -> KHR_parallel_shader_compile.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension'''''''''''': 'tags this -> extensionName:([`L_s60_OES_element_index_uint[@js "OES_element_index_uint"]] [@js.enum]) -> OES_element_index_uint.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension''''''''''''': 'tags this -> extensionName:([`L_s61_OES_fbo_render_mipmap[@js "OES_fbo_render_mipmap"]] [@js.enum]) -> OES_fbo_render_mipmap.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension'''''''''''''': 'tags this -> extensionName:([`L_s62_OES_standard_derivatives[@js "OES_standard_derivatives"]] [@js.enum]) -> OES_standard_derivatives.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension''''''''''''''': 'tags this -> extensionName:([`L_s63_OES_texture_float[@js "OES_texture_float"]] [@js.enum]) -> OES_texture_float.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension'''''''''''''''': 'tags this -> extensionName:([`L_s64_OES_texture_float_linear[@js "OES_texture_float_linear"]] [@js.enum]) -> OES_texture_float_linear.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension''''''''''''''''': 'tags this -> extensionName:([`L_s65_OES_texture_half_float[@js "OES_texture_half_float"]] [@js.enum]) -> OES_texture_half_float.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension'''''''''''''''''': 'tags this -> extensionName:([`L_s66_OES_texture_half_float_linear[@js "OES_texture_half_float_linear"]] [@js.enum]) -> OES_texture_half_float_linear.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension''''''''''''''''''': 'tags this -> extensionName:([`L_s67_OES_vertex_array_object[@js "OES_vertex_array_object"]] [@js.enum]) -> OES_vertex_array_object.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension'''''''''''''''''''': 'tags this -> extensionName:([`L_s68_OVR_multiview2[@js "OVR_multiview2"]] [@js.enum]) -> OVR_multiview2.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension''''''''''''''''''''': 'tags this -> extensionName:([`L_s97_WEBGL_color_buffer_float[@js "WEBGL_color_buffer_float"]] [@js.enum]) -> WEBGL_color_buffer_float.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension'''''''''''''''''''''': 'tags this -> extensionName:([`L_s98_WEBGL_compressed_texture_astc[@js "WEBGL_compressed_texture_astc"]] [@js.enum]) -> WEBGL_compressed_texture_astc.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension''''''''''''''''''''''': 'tags this -> extensionName:([`L_s99_WEBGL_compressed_texture_etc[@js "WEBGL_compressed_texture_etc"]] [@js.enum]) -> WEBGL_compressed_texture_etc.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension'''''''''''''''''''''''': 'tags this -> extensionName:([`L_s100_WEBGL_compressed_texture_etc1[@js "WEBGL_compressed_texture_etc1"]] [@js.enum]) -> WEBGL_compressed_texture_etc1.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension''''''''''''''''''''''''': 'tags this -> extensionName:([`L_s101_WEBGL_compressed_texture_pvrtc[@js "WEBGL_compressed_texture_pvrtc"]] [@js.enum]) -> WEBGL_compressed_texture_pvrtc.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension'''''''''''''''''''''''''': 'tags this -> extensionName:([`L_s102_WEBGL_compressed_texture_s3tc[@js "WEBGL_compressed_texture_s3tc"]] [@js.enum]) -> WEBGL_compressed_texture_s3tc.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension''''''''''''''''''''''''''': 'tags this -> extensionName:([`L_s103_WEBGL_compressed_texture_s3tc_srgb[@js "WEBGL_compressed_texture_s3tc_srgb"]] [@js.enum]) -> WEBGL_compressed_texture_s3tc_srgb.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension'''''''''''''''''''''''''''': 'tags this -> extensionName:([`L_s104_WEBGL_debug_renderer_info[@js "WEBGL_debug_renderer_info"]] [@js.enum]) -> WEBGL_debug_renderer_info.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension''''''''''''''''''''''''''''': 'tags this -> extensionName:([`L_s105_WEBGL_debug_shaders[@js "WEBGL_debug_shaders"]] [@js.enum]) -> WEBGL_debug_shaders.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension'''''''''''''''''''''''''''''': 'tags this -> extensionName:([`L_s106_WEBGL_depth_texture[@js "WEBGL_depth_texture"]] [@js.enum]) -> WEBGL_depth_texture.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension''''''''''''''''''''''''''''''': 'tags this -> extensionName:([`L_s107_WEBGL_draw_buffers[@js "WEBGL_draw_buffers"]] [@js.enum]) -> WEBGL_draw_buffers.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension'''''''''''''''''''''''''''''''': 'tags this -> extensionName:([`L_s108_WEBGL_lose_context[@js "WEBGL_lose_context"]] [@js.enum]) -> WEBGL_lose_context.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension''''''''''''''''''''''''''''''''': 'tags this -> extensionName:([`L_s109_WEBGL_multi_draw[@js "WEBGL_multi_draw"]] [@js.enum]) -> WEBGL_multi_draw.t option [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension) *)
  val getExtension'''''''''''''''''''''''''''''''''': 'tags this -> name:string -> any [@@js.call "getExtension"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getFramebufferAttachmentParameter) *)
  val getFramebufferAttachmentParameter: 'tags this -> target:GLenum.t -> attachment:GLenum.t -> pname:GLenum.t -> any [@@js.call "getFramebufferAttachmentParameter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getParameter) *)
  val getParameter: 'tags this -> pname:GLenum.t -> any [@@js.call "getParameter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getProgramInfoLog) *)
  val getProgramInfoLog: 'tags this -> program:WebGLProgram.t -> string option [@@js.call "getProgramInfoLog"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getProgramParameter) *)
  val getProgramParameter: 'tags this -> program:WebGLProgram.t -> pname:GLenum.t -> any [@@js.call "getProgramParameter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getRenderbufferParameter) *)
  val getRenderbufferParameter: 'tags this -> target:GLenum.t -> pname:GLenum.t -> any [@@js.call "getRenderbufferParameter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getShaderInfoLog) *)
  val getShaderInfoLog: 'tags this -> shader:WebGLShader.t -> string option [@@js.call "getShaderInfoLog"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getShaderParameter) *)
  val getShaderParameter: 'tags this -> shader:WebGLShader.t -> pname:GLenum.t -> any [@@js.call "getShaderParameter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getShaderPrecisionFormat) *)
  val getShaderPrecisionFormat: 'tags this -> shadertype:GLenum.t -> precisiontype:GLenum.t -> WebGLShaderPrecisionFormat.t option [@@js.call "getShaderPrecisionFormat"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getShaderSource) *)
  val getShaderSource: 'tags this -> shader:WebGLShader.t -> string option [@@js.call "getShaderSource"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getSupportedExtensions) *)
  val getSupportedExtensions: 'tags this -> string list option [@@js.call "getSupportedExtensions"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getTexParameter) *)
  val getTexParameter: 'tags this -> target:GLenum.t -> pname:GLenum.t -> any [@@js.call "getTexParameter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getUniform) *)
  val getUniform: 'tags this -> program:WebGLProgram.t -> location:WebGLUniformLocation.t -> any [@@js.call "getUniform"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getUniformLocation) *)
  val getUniformLocation: 'tags this -> program:WebGLProgram.t -> name:string -> WebGLUniformLocation.t option [@@js.call "getUniformLocation"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getVertexAttrib) *)
  val getVertexAttrib: 'tags this -> index:GLuint.t -> pname:GLenum.t -> any [@@js.call "getVertexAttrib"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getVertexAttribOffset) *)
  val getVertexAttribOffset: 'tags this -> index:GLuint.t -> pname:GLenum.t -> GLintptr.t [@@js.call "getVertexAttribOffset"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/hint) *)
  val hint: 'tags this -> target:GLenum.t -> mode:GLenum.t -> unit [@@js.call "hint"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isBuffer) *)
  val isBuffer: 'tags this -> buffer:WebGLBuffer.t option -> GLboolean.t [@@js.call "isBuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isContextLost) *)
  val isContextLost: 'tags this -> bool [@@js.call "isContextLost"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isEnabled) *)
  val isEnabled: 'tags this -> cap:GLenum.t -> GLboolean.t [@@js.call "isEnabled"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isFramebuffer) *)
  val isFramebuffer: 'tags this -> framebuffer:WebGLFramebuffer.t option -> GLboolean.t [@@js.call "isFramebuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isProgram) *)
  val isProgram: 'tags this -> program:WebGLProgram.t option -> GLboolean.t [@@js.call "isProgram"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isRenderbuffer) *)
  val isRenderbuffer: 'tags this -> renderbuffer:WebGLRenderbuffer.t option -> GLboolean.t [@@js.call "isRenderbuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isShader) *)
  val isShader: 'tags this -> shader:WebGLShader.t option -> GLboolean.t [@@js.call "isShader"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isTexture) *)
  val isTexture: 'tags this -> texture:WebGLTexture.t option -> GLboolean.t [@@js.call "isTexture"]
  val lineWidth: 'tags this -> width:GLfloat.t -> unit [@@js.call "lineWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/linkProgram) *)
  val linkProgram: 'tags this -> program:WebGLProgram.t -> unit [@@js.call "linkProgram"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/pixelStorei) *)
  val pixelStorei: 'tags this -> pname:GLenum.t -> param:([`U1 of GLint.t | `U2 of GLboolean.t] [@js.union]) -> unit [@@js.call "pixelStorei"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/polygonOffset) *)
  val polygonOffset: 'tags this -> factor:GLfloat.t -> units:GLfloat.t -> unit [@@js.call "polygonOffset"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/renderbufferStorage) *)
  val renderbufferStorage: 'tags this -> target:GLenum.t -> internalformat:GLenum.t -> width:GLsizei.t -> height:GLsizei.t -> unit [@@js.call "renderbufferStorage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/sampleCoverage) *)
  val sampleCoverage: 'tags this -> value:GLclampf.t -> invert:GLboolean.t -> unit [@@js.call "sampleCoverage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/scissor) *)
  val scissor: 'tags this -> x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit [@@js.call "scissor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/shaderSource) *)
  val shaderSource: 'tags this -> shader:WebGLShader.t -> source:string -> unit [@@js.call "shaderSource"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/stencilFunc) *)
  val stencilFunc: 'tags this -> func:GLenum.t -> ref:GLint.t -> mask:GLuint.t -> unit [@@js.call "stencilFunc"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/stencilFuncSeparate) *)
  val stencilFuncSeparate: 'tags this -> face:GLenum.t -> func:GLenum.t -> ref:GLint.t -> mask:GLuint.t -> unit [@@js.call "stencilFuncSeparate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/stencilMask) *)
  val stencilMask: 'tags this -> mask:GLuint.t -> unit [@@js.call "stencilMask"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/stencilMaskSeparate) *)
  val stencilMaskSeparate: 'tags this -> face:GLenum.t -> mask:GLuint.t -> unit [@@js.call "stencilMaskSeparate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/stencilOp) *)
  val stencilOp: 'tags this -> fail:GLenum.t -> zfail:GLenum.t -> zpass:GLenum.t -> unit [@@js.call "stencilOp"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/stencilOpSeparate) *)
  val stencilOpSeparate: 'tags this -> face:GLenum.t -> fail:GLenum.t -> zfail:GLenum.t -> zpass:GLenum.t -> unit [@@js.call "stencilOpSeparate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texParameter) *)
  val texParameterf: 'tags this -> target:GLenum.t -> pname:GLenum.t -> param:GLfloat.t -> unit [@@js.call "texParameterf"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texParameter) *)
  val texParameteri: 'tags this -> target:GLenum.t -> pname:GLenum.t -> param:GLint.t -> unit [@@js.call "texParameteri"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform1f: 'tags this -> location:WebGLUniformLocation.t option -> x:GLfloat.t -> unit [@@js.call "uniform1f"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform1i: 'tags this -> location:WebGLUniformLocation.t option -> x:GLint.t -> unit [@@js.call "uniform1i"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform2f: 'tags this -> location:WebGLUniformLocation.t option -> x:GLfloat.t -> y:GLfloat.t -> unit [@@js.call "uniform2f"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform2i: 'tags this -> location:WebGLUniformLocation.t option -> x:GLint.t -> y:GLint.t -> unit [@@js.call "uniform2i"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform3f: 'tags this -> location:WebGLUniformLocation.t option -> x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> unit [@@js.call "uniform3f"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform3i: 'tags this -> location:WebGLUniformLocation.t option -> x:GLint.t -> y:GLint.t -> z:GLint.t -> unit [@@js.call "uniform3i"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform4f: 'tags this -> location:WebGLUniformLocation.t option -> x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> w:GLfloat.t -> unit [@@js.call "uniform4f"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform4i: 'tags this -> location:WebGLUniformLocation.t option -> x:GLint.t -> y:GLint.t -> z:GLint.t -> w:GLint.t -> unit [@@js.call "uniform4i"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/useProgram) *)
  val useProgram: 'tags this -> program:WebGLProgram.t option -> unit [@@js.call "useProgram"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/validateProgram) *)
  val validateProgram: 'tags this -> program:WebGLProgram.t -> unit [@@js.call "validateProgram"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib) *)
  val vertexAttrib1f: 'tags this -> index:GLuint.t -> x:GLfloat.t -> unit [@@js.call "vertexAttrib1f"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib) *)
  val vertexAttrib1fv': 'tags this -> index:GLuint.t -> values:Float32List.t -> unit [@@js.call "vertexAttrib1fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib) *)
  val vertexAttrib2f: 'tags this -> index:GLuint.t -> x:GLfloat.t -> y:GLfloat.t -> unit [@@js.call "vertexAttrib2f"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib) *)
  val vertexAttrib2fv': 'tags this -> index:GLuint.t -> values:Float32List.t -> unit [@@js.call "vertexAttrib2fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib) *)
  val vertexAttrib3f: 'tags this -> index:GLuint.t -> x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> unit [@@js.call "vertexAttrib3f"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib) *)
  val vertexAttrib3fv': 'tags this -> index:GLuint.t -> values:Float32List.t -> unit [@@js.call "vertexAttrib3fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib) *)
  val vertexAttrib4f: 'tags this -> index:GLuint.t -> x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> w:GLfloat.t -> unit [@@js.call "vertexAttrib4f"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib) *)
  val vertexAttrib4fv': 'tags this -> index:GLuint.t -> values:Float32List.t -> unit [@@js.call "vertexAttrib4fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttribPointer) *)
  val vertexAttribPointer: 'tags this -> index:GLuint.t -> size:GLint.t -> type_:GLenum.t -> normalized:GLboolean.t -> stride:GLsizei.t -> offset:GLintptr.t -> unit [@@js.call "vertexAttribPointer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/viewport) *)
  val viewport: 'tags this -> x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit [@@js.call "viewport"]
  val get_DEPTH_BUFFER_BIT: 'tags this -> ([`L_n_256[@js 256]] [@js.enum]) [@@js.get "DEPTH_BUFFER_BIT"]
  val get_STENCIL_BUFFER_BIT: 'tags this -> ([`L_n_1024[@js 1024]] [@js.enum]) [@@js.get "STENCIL_BUFFER_BIT"]
  val get_COLOR_BUFFER_BIT: 'tags this -> ([`L_n_16384[@js 16384]] [@js.enum]) [@@js.get "COLOR_BUFFER_BIT"]
  val get_POINTS: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "POINTS"]
  val get_LINES: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "LINES"]
  val get_LINE_LOOP: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "LINE_LOOP"]
  val get_LINE_STRIP: 'tags this -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "LINE_STRIP"]
  val get_TRIANGLES: 'tags this -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "TRIANGLES"]
  val get_TRIANGLE_STRIP: 'tags this -> ([`L_n_5[@js 5]] [@js.enum]) [@@js.get "TRIANGLE_STRIP"]
  val get_TRIANGLE_FAN: 'tags this -> ([`L_n_6[@js 6]] [@js.enum]) [@@js.get "TRIANGLE_FAN"]
  val get_ZERO: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "ZERO"]
  val get_ONE: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "ONE"]
  val get_SRC_COLOR: 'tags this -> ([`L_n_768[@js 768]] [@js.enum]) [@@js.get "SRC_COLOR"]
  val get_ONE_MINUS_SRC_COLOR: 'tags this -> ([`L_n_769[@js 769]] [@js.enum]) [@@js.get "ONE_MINUS_SRC_COLOR"]
  val get_SRC_ALPHA: 'tags this -> ([`L_n_770[@js 770]] [@js.enum]) [@@js.get "SRC_ALPHA"]
  val get_ONE_MINUS_SRC_ALPHA: 'tags this -> ([`L_n_771[@js 771]] [@js.enum]) [@@js.get "ONE_MINUS_SRC_ALPHA"]
  val get_DST_ALPHA: 'tags this -> ([`L_n_772[@js 772]] [@js.enum]) [@@js.get "DST_ALPHA"]
  val get_ONE_MINUS_DST_ALPHA: 'tags this -> ([`L_n_773[@js 773]] [@js.enum]) [@@js.get "ONE_MINUS_DST_ALPHA"]
  val get_DST_COLOR: 'tags this -> ([`L_n_774[@js 774]] [@js.enum]) [@@js.get "DST_COLOR"]
  val get_ONE_MINUS_DST_COLOR: 'tags this -> ([`L_n_775[@js 775]] [@js.enum]) [@@js.get "ONE_MINUS_DST_COLOR"]
  val get_SRC_ALPHA_SATURATE: 'tags this -> ([`L_n_776[@js 776]] [@js.enum]) [@@js.get "SRC_ALPHA_SATURATE"]
  val get_FUNC_ADD: 'tags this -> ([`L_n_32774[@js 32774]] [@js.enum]) [@@js.get "FUNC_ADD"]
  val get_BLEND_EQUATION: 'tags this -> ([`L_n_32777[@js 32777]] [@js.enum]) [@@js.get "BLEND_EQUATION"]
  val get_BLEND_EQUATION_RGB: 'tags this -> ([`L_n_32777[@js 32777]] [@js.enum]) [@@js.get "BLEND_EQUATION_RGB"]
  val get_BLEND_EQUATION_ALPHA: 'tags this -> ([`L_n_34877[@js 34877]] [@js.enum]) [@@js.get "BLEND_EQUATION_ALPHA"]
  val get_FUNC_SUBTRACT: 'tags this -> ([`L_n_32778[@js 32778]] [@js.enum]) [@@js.get "FUNC_SUBTRACT"]
  val get_FUNC_REVERSE_SUBTRACT: 'tags this -> ([`L_n_32779[@js 32779]] [@js.enum]) [@@js.get "FUNC_REVERSE_SUBTRACT"]
  val get_BLEND_DST_RGB: 'tags this -> ([`L_n_32968[@js 32968]] [@js.enum]) [@@js.get "BLEND_DST_RGB"]
  val get_BLEND_SRC_RGB: 'tags this -> ([`L_n_32969[@js 32969]] [@js.enum]) [@@js.get "BLEND_SRC_RGB"]
  val get_BLEND_DST_ALPHA: 'tags this -> ([`L_n_32970[@js 32970]] [@js.enum]) [@@js.get "BLEND_DST_ALPHA"]
  val get_BLEND_SRC_ALPHA: 'tags this -> ([`L_n_32971[@js 32971]] [@js.enum]) [@@js.get "BLEND_SRC_ALPHA"]
  val get_CONSTANT_COLOR: 'tags this -> ([`L_n_32769[@js 32769]] [@js.enum]) [@@js.get "CONSTANT_COLOR"]
  val get_ONE_MINUS_CONSTANT_COLOR: 'tags this -> ([`L_n_32770[@js 32770]] [@js.enum]) [@@js.get "ONE_MINUS_CONSTANT_COLOR"]
  val get_CONSTANT_ALPHA: 'tags this -> ([`L_n_32771[@js 32771]] [@js.enum]) [@@js.get "CONSTANT_ALPHA"]
  val get_ONE_MINUS_CONSTANT_ALPHA: 'tags this -> ([`L_n_32772[@js 32772]] [@js.enum]) [@@js.get "ONE_MINUS_CONSTANT_ALPHA"]
  val get_BLEND_COLOR: 'tags this -> ([`L_n_32773[@js 32773]] [@js.enum]) [@@js.get "BLEND_COLOR"]
  val get_ARRAY_BUFFER: 'tags this -> ([`L_n_34962[@js 34962]] [@js.enum]) [@@js.get "ARRAY_BUFFER"]
  val get_ELEMENT_ARRAY_BUFFER: 'tags this -> ([`L_n_34963[@js 34963]] [@js.enum]) [@@js.get "ELEMENT_ARRAY_BUFFER"]
  val get_ARRAY_BUFFER_BINDING: 'tags this -> ([`L_n_34964[@js 34964]] [@js.enum]) [@@js.get "ARRAY_BUFFER_BINDING"]
  val get_ELEMENT_ARRAY_BUFFER_BINDING: 'tags this -> ([`L_n_34965[@js 34965]] [@js.enum]) [@@js.get "ELEMENT_ARRAY_BUFFER_BINDING"]
  val get_STREAM_DRAW: 'tags this -> ([`L_n_35040[@js 35040]] [@js.enum]) [@@js.get "STREAM_DRAW"]
  val get_STATIC_DRAW: 'tags this -> ([`L_n_35044[@js 35044]] [@js.enum]) [@@js.get "STATIC_DRAW"]
  val get_DYNAMIC_DRAW: 'tags this -> ([`L_n_35048[@js 35048]] [@js.enum]) [@@js.get "DYNAMIC_DRAW"]
  val get_BUFFER_SIZE: 'tags this -> ([`L_n_34660[@js 34660]] [@js.enum]) [@@js.get "BUFFER_SIZE"]
  val get_BUFFER_USAGE: 'tags this -> ([`L_n_34661[@js 34661]] [@js.enum]) [@@js.get "BUFFER_USAGE"]
  val get_CURRENT_VERTEX_ATTRIB: 'tags this -> ([`L_n_34342[@js 34342]] [@js.enum]) [@@js.get "CURRENT_VERTEX_ATTRIB"]
  val get_FRONT: 'tags this -> ([`L_n_1028[@js 1028]] [@js.enum]) [@@js.get "FRONT"]
  val get_BACK: 'tags this -> ([`L_n_1029[@js 1029]] [@js.enum]) [@@js.get "BACK"]
  val get_FRONT_AND_BACK: 'tags this -> ([`L_n_1032[@js 1032]] [@js.enum]) [@@js.get "FRONT_AND_BACK"]
  val get_CULL_FACE: 'tags this -> ([`L_n_2884[@js 2884]] [@js.enum]) [@@js.get "CULL_FACE"]
  val get_BLEND: 'tags this -> ([`L_n_3042[@js 3042]] [@js.enum]) [@@js.get "BLEND"]
  val get_DITHER: 'tags this -> ([`L_n_3024[@js 3024]] [@js.enum]) [@@js.get "DITHER"]
  val get_STENCIL_TEST: 'tags this -> ([`L_n_2960[@js 2960]] [@js.enum]) [@@js.get "STENCIL_TEST"]
  val get_DEPTH_TEST: 'tags this -> ([`L_n_2929[@js 2929]] [@js.enum]) [@@js.get "DEPTH_TEST"]
  val get_SCISSOR_TEST: 'tags this -> ([`L_n_3089[@js 3089]] [@js.enum]) [@@js.get "SCISSOR_TEST"]
  val get_POLYGON_OFFSET_FILL: 'tags this -> ([`L_n_32823[@js 32823]] [@js.enum]) [@@js.get "POLYGON_OFFSET_FILL"]
  val get_SAMPLE_ALPHA_TO_COVERAGE: 'tags this -> ([`L_n_32926[@js 32926]] [@js.enum]) [@@js.get "SAMPLE_ALPHA_TO_COVERAGE"]
  val get_SAMPLE_COVERAGE: 'tags this -> ([`L_n_32928[@js 32928]] [@js.enum]) [@@js.get "SAMPLE_COVERAGE"]
  val get_NO_ERROR: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "NO_ERROR"]
  val get_INVALID_ENUM: 'tags this -> ([`L_n_1280[@js 1280]] [@js.enum]) [@@js.get "INVALID_ENUM"]
  val get_INVALID_VALUE: 'tags this -> ([`L_n_1281[@js 1281]] [@js.enum]) [@@js.get "INVALID_VALUE"]
  val get_INVALID_OPERATION: 'tags this -> ([`L_n_1282[@js 1282]] [@js.enum]) [@@js.get "INVALID_OPERATION"]
  val get_OUT_OF_MEMORY: 'tags this -> ([`L_n_1285[@js 1285]] [@js.enum]) [@@js.get "OUT_OF_MEMORY"]
  val get_CW: 'tags this -> ([`L_n_2304[@js 2304]] [@js.enum]) [@@js.get "CW"]
  val get_CCW: 'tags this -> ([`L_n_2305[@js 2305]] [@js.enum]) [@@js.get "CCW"]
  val get_LINE_WIDTH: 'tags this -> ([`L_n_2849[@js 2849]] [@js.enum]) [@@js.get "LINE_WIDTH"]
  val get_ALIASED_POINT_SIZE_RANGE: 'tags this -> ([`L_n_33901[@js 33901]] [@js.enum]) [@@js.get "ALIASED_POINT_SIZE_RANGE"]
  val get_ALIASED_LINE_WIDTH_RANGE: 'tags this -> ([`L_n_33902[@js 33902]] [@js.enum]) [@@js.get "ALIASED_LINE_WIDTH_RANGE"]
  val get_CULL_FACE_MODE: 'tags this -> ([`L_n_2885[@js 2885]] [@js.enum]) [@@js.get "CULL_FACE_MODE"]
  val get_FRONT_FACE: 'tags this -> ([`L_n_2886[@js 2886]] [@js.enum]) [@@js.get "FRONT_FACE"]
  val get_DEPTH_RANGE: 'tags this -> ([`L_n_2928[@js 2928]] [@js.enum]) [@@js.get "DEPTH_RANGE"]
  val get_DEPTH_WRITEMASK: 'tags this -> ([`L_n_2930[@js 2930]] [@js.enum]) [@@js.get "DEPTH_WRITEMASK"]
  val get_DEPTH_CLEAR_VALUE: 'tags this -> ([`L_n_2931[@js 2931]] [@js.enum]) [@@js.get "DEPTH_CLEAR_VALUE"]
  val get_DEPTH_FUNC: 'tags this -> ([`L_n_2932[@js 2932]] [@js.enum]) [@@js.get "DEPTH_FUNC"]
  val get_STENCIL_CLEAR_VALUE: 'tags this -> ([`L_n_2961[@js 2961]] [@js.enum]) [@@js.get "STENCIL_CLEAR_VALUE"]
  val get_STENCIL_FUNC: 'tags this -> ([`L_n_2962[@js 2962]] [@js.enum]) [@@js.get "STENCIL_FUNC"]
  val get_STENCIL_FAIL: 'tags this -> ([`L_n_2964[@js 2964]] [@js.enum]) [@@js.get "STENCIL_FAIL"]
  val get_STENCIL_PASS_DEPTH_FAIL: 'tags this -> ([`L_n_2965[@js 2965]] [@js.enum]) [@@js.get "STENCIL_PASS_DEPTH_FAIL"]
  val get_STENCIL_PASS_DEPTH_PASS: 'tags this -> ([`L_n_2966[@js 2966]] [@js.enum]) [@@js.get "STENCIL_PASS_DEPTH_PASS"]
  val get_STENCIL_REF: 'tags this -> ([`L_n_2967[@js 2967]] [@js.enum]) [@@js.get "STENCIL_REF"]
  val get_STENCIL_VALUE_MASK: 'tags this -> ([`L_n_2963[@js 2963]] [@js.enum]) [@@js.get "STENCIL_VALUE_MASK"]
  val get_STENCIL_WRITEMASK: 'tags this -> ([`L_n_2968[@js 2968]] [@js.enum]) [@@js.get "STENCIL_WRITEMASK"]
  val get_STENCIL_BACK_FUNC: 'tags this -> ([`L_n_34816[@js 34816]] [@js.enum]) [@@js.get "STENCIL_BACK_FUNC"]
  val get_STENCIL_BACK_FAIL: 'tags this -> ([`L_n_34817[@js 34817]] [@js.enum]) [@@js.get "STENCIL_BACK_FAIL"]
  val get_STENCIL_BACK_PASS_DEPTH_FAIL: 'tags this -> ([`L_n_34818[@js 34818]] [@js.enum]) [@@js.get "STENCIL_BACK_PASS_DEPTH_FAIL"]
  val get_STENCIL_BACK_PASS_DEPTH_PASS: 'tags this -> ([`L_n_34819[@js 34819]] [@js.enum]) [@@js.get "STENCIL_BACK_PASS_DEPTH_PASS"]
  val get_STENCIL_BACK_REF: 'tags this -> ([`L_n_36003[@js 36003]] [@js.enum]) [@@js.get "STENCIL_BACK_REF"]
  val get_STENCIL_BACK_VALUE_MASK: 'tags this -> ([`L_n_36004[@js 36004]] [@js.enum]) [@@js.get "STENCIL_BACK_VALUE_MASK"]
  val get_STENCIL_BACK_WRITEMASK: 'tags this -> ([`L_n_36005[@js 36005]] [@js.enum]) [@@js.get "STENCIL_BACK_WRITEMASK"]
  val get_VIEWPORT: 'tags this -> ([`L_n_2978[@js 2978]] [@js.enum]) [@@js.get "VIEWPORT"]
  val get_SCISSOR_BOX: 'tags this -> ([`L_n_3088[@js 3088]] [@js.enum]) [@@js.get "SCISSOR_BOX"]
  val get_COLOR_CLEAR_VALUE: 'tags this -> ([`L_n_3106[@js 3106]] [@js.enum]) [@@js.get "COLOR_CLEAR_VALUE"]
  val get_COLOR_WRITEMASK: 'tags this -> ([`L_n_3107[@js 3107]] [@js.enum]) [@@js.get "COLOR_WRITEMASK"]
  val get_UNPACK_ALIGNMENT: 'tags this -> ([`L_n_3317[@js 3317]] [@js.enum]) [@@js.get "UNPACK_ALIGNMENT"]
  val get_PACK_ALIGNMENT: 'tags this -> ([`L_n_3333[@js 3333]] [@js.enum]) [@@js.get "PACK_ALIGNMENT"]
  val get_MAX_TEXTURE_SIZE: 'tags this -> ([`L_n_3379[@js 3379]] [@js.enum]) [@@js.get "MAX_TEXTURE_SIZE"]
  val get_MAX_VIEWPORT_DIMS: 'tags this -> ([`L_n_3386[@js 3386]] [@js.enum]) [@@js.get "MAX_VIEWPORT_DIMS"]
  val get_SUBPIXEL_BITS: 'tags this -> ([`L_n_3408[@js 3408]] [@js.enum]) [@@js.get "SUBPIXEL_BITS"]
  val get_RED_BITS: 'tags this -> ([`L_n_3410[@js 3410]] [@js.enum]) [@@js.get "RED_BITS"]
  val get_GREEN_BITS: 'tags this -> ([`L_n_3411[@js 3411]] [@js.enum]) [@@js.get "GREEN_BITS"]
  val get_BLUE_BITS: 'tags this -> ([`L_n_3412[@js 3412]] [@js.enum]) [@@js.get "BLUE_BITS"]
  val get_ALPHA_BITS: 'tags this -> ([`L_n_3413[@js 3413]] [@js.enum]) [@@js.get "ALPHA_BITS"]
  val get_DEPTH_BITS: 'tags this -> ([`L_n_3414[@js 3414]] [@js.enum]) [@@js.get "DEPTH_BITS"]
  val get_STENCIL_BITS: 'tags this -> ([`L_n_3415[@js 3415]] [@js.enum]) [@@js.get "STENCIL_BITS"]
  val get_POLYGON_OFFSET_UNITS: 'tags this -> ([`L_n_10752[@js 10752]] [@js.enum]) [@@js.get "POLYGON_OFFSET_UNITS"]
  val get_POLYGON_OFFSET_FACTOR: 'tags this -> ([`L_n_32824[@js 32824]] [@js.enum]) [@@js.get "POLYGON_OFFSET_FACTOR"]
  val get_TEXTURE_BINDING_2D: 'tags this -> ([`L_n_32873[@js 32873]] [@js.enum]) [@@js.get "TEXTURE_BINDING_2D"]
  val get_SAMPLE_BUFFERS: 'tags this -> ([`L_n_32936[@js 32936]] [@js.enum]) [@@js.get "SAMPLE_BUFFERS"]
  val get_SAMPLES: 'tags this -> ([`L_n_32937[@js 32937]] [@js.enum]) [@@js.get "SAMPLES"]
  val get_SAMPLE_COVERAGE_VALUE: 'tags this -> ([`L_n_32938[@js 32938]] [@js.enum]) [@@js.get "SAMPLE_COVERAGE_VALUE"]
  val get_SAMPLE_COVERAGE_INVERT: 'tags this -> ([`L_n_32939[@js 32939]] [@js.enum]) [@@js.get "SAMPLE_COVERAGE_INVERT"]
  val get_COMPRESSED_TEXTURE_FORMATS: 'tags this -> ([`L_n_34467[@js 34467]] [@js.enum]) [@@js.get "COMPRESSED_TEXTURE_FORMATS"]
  val get_DONT_CARE: 'tags this -> ([`L_n_4352[@js 4352]] [@js.enum]) [@@js.get "DONT_CARE"]
  val get_FASTEST: 'tags this -> ([`L_n_4353[@js 4353]] [@js.enum]) [@@js.get "FASTEST"]
  val get_NICEST: 'tags this -> ([`L_n_4354[@js 4354]] [@js.enum]) [@@js.get "NICEST"]
  val get_GENERATE_MIPMAP_HINT: 'tags this -> ([`L_n_33170[@js 33170]] [@js.enum]) [@@js.get "GENERATE_MIPMAP_HINT"]
  val get_BYTE: 'tags this -> ([`L_n_5120[@js 5120]] [@js.enum]) [@@js.get "BYTE"]
  val get_UNSIGNED_BYTE: 'tags this -> ([`L_n_5121[@js 5121]] [@js.enum]) [@@js.get "UNSIGNED_BYTE"]
  val get_SHORT: 'tags this -> ([`L_n_5122[@js 5122]] [@js.enum]) [@@js.get "SHORT"]
  val get_UNSIGNED_SHORT: 'tags this -> ([`L_n_5123[@js 5123]] [@js.enum]) [@@js.get "UNSIGNED_SHORT"]
  val get_INT: 'tags this -> ([`L_n_5124[@js 5124]] [@js.enum]) [@@js.get "INT"]
  val get_UNSIGNED_INT: 'tags this -> ([`L_n_5125[@js 5125]] [@js.enum]) [@@js.get "UNSIGNED_INT"]
  val get_FLOAT: 'tags this -> ([`L_n_5126[@js 5126]] [@js.enum]) [@@js.get "FLOAT"]
  val get_DEPTH_COMPONENT: 'tags this -> ([`L_n_6402[@js 6402]] [@js.enum]) [@@js.get "DEPTH_COMPONENT"]
  val get_ALPHA: 'tags this -> ([`L_n_6406[@js 6406]] [@js.enum]) [@@js.get "ALPHA"]
  val get_RGB: 'tags this -> ([`L_n_6407[@js 6407]] [@js.enum]) [@@js.get "RGB"]
  val get_RGBA: 'tags this -> ([`L_n_6408[@js 6408]] [@js.enum]) [@@js.get "RGBA"]
  val get_LUMINANCE: 'tags this -> ([`L_n_6409[@js 6409]] [@js.enum]) [@@js.get "LUMINANCE"]
  val get_LUMINANCE_ALPHA: 'tags this -> ([`L_n_6410[@js 6410]] [@js.enum]) [@@js.get "LUMINANCE_ALPHA"]
  val get_UNSIGNED_SHORT_4_4_4_4: 'tags this -> ([`L_n_32819[@js 32819]] [@js.enum]) [@@js.get "UNSIGNED_SHORT_4_4_4_4"]
  val get_UNSIGNED_SHORT_5_5_5_1: 'tags this -> ([`L_n_32820[@js 32820]] [@js.enum]) [@@js.get "UNSIGNED_SHORT_5_5_5_1"]
  val get_UNSIGNED_SHORT_5_6_5: 'tags this -> ([`L_n_33635[@js 33635]] [@js.enum]) [@@js.get "UNSIGNED_SHORT_5_6_5"]
  val get_FRAGMENT_SHADER: 'tags this -> ([`L_n_35632[@js 35632]] [@js.enum]) [@@js.get "FRAGMENT_SHADER"]
  val get_VERTEX_SHADER: 'tags this -> ([`L_n_35633[@js 35633]] [@js.enum]) [@@js.get "VERTEX_SHADER"]
  val get_MAX_VERTEX_ATTRIBS: 'tags this -> ([`L_n_34921[@js 34921]] [@js.enum]) [@@js.get "MAX_VERTEX_ATTRIBS"]
  val get_MAX_VERTEX_UNIFORM_VECTORS: 'tags this -> ([`L_n_36347[@js 36347]] [@js.enum]) [@@js.get "MAX_VERTEX_UNIFORM_VECTORS"]
  val get_MAX_VARYING_VECTORS: 'tags this -> ([`L_n_36348[@js 36348]] [@js.enum]) [@@js.get "MAX_VARYING_VECTORS"]
  val get_MAX_COMBINED_TEXTURE_IMAGE_UNITS: 'tags this -> ([`L_n_35661[@js 35661]] [@js.enum]) [@@js.get "MAX_COMBINED_TEXTURE_IMAGE_UNITS"]
  val get_MAX_VERTEX_TEXTURE_IMAGE_UNITS: 'tags this -> ([`L_n_35660[@js 35660]] [@js.enum]) [@@js.get "MAX_VERTEX_TEXTURE_IMAGE_UNITS"]
  val get_MAX_TEXTURE_IMAGE_UNITS: 'tags this -> ([`L_n_34930[@js 34930]] [@js.enum]) [@@js.get "MAX_TEXTURE_IMAGE_UNITS"]
  val get_MAX_FRAGMENT_UNIFORM_VECTORS: 'tags this -> ([`L_n_36349[@js 36349]] [@js.enum]) [@@js.get "MAX_FRAGMENT_UNIFORM_VECTORS"]
  val get_SHADER_TYPE: 'tags this -> ([`L_n_35663[@js 35663]] [@js.enum]) [@@js.get "SHADER_TYPE"]
  val get_DELETE_STATUS: 'tags this -> ([`L_n_35712[@js 35712]] [@js.enum]) [@@js.get "DELETE_STATUS"]
  val get_LINK_STATUS: 'tags this -> ([`L_n_35714[@js 35714]] [@js.enum]) [@@js.get "LINK_STATUS"]
  val get_VALIDATE_STATUS: 'tags this -> ([`L_n_35715[@js 35715]] [@js.enum]) [@@js.get "VALIDATE_STATUS"]
  val get_ATTACHED_SHADERS: 'tags this -> ([`L_n_35717[@js 35717]] [@js.enum]) [@@js.get "ATTACHED_SHADERS"]
  val get_ACTIVE_UNIFORMS: 'tags this -> ([`L_n_35718[@js 35718]] [@js.enum]) [@@js.get "ACTIVE_UNIFORMS"]
  val get_ACTIVE_ATTRIBUTES: 'tags this -> ([`L_n_35721[@js 35721]] [@js.enum]) [@@js.get "ACTIVE_ATTRIBUTES"]
  val get_SHADING_LANGUAGE_VERSION: 'tags this -> ([`L_n_35724[@js 35724]] [@js.enum]) [@@js.get "SHADING_LANGUAGE_VERSION"]
  val get_CURRENT_PROGRAM: 'tags this -> ([`L_n_35725[@js 35725]] [@js.enum]) [@@js.get "CURRENT_PROGRAM"]
  val get_NEVER: 'tags this -> ([`L_n_512[@js 512]] [@js.enum]) [@@js.get "NEVER"]
  val get_LESS: 'tags this -> ([`L_n_513[@js 513]] [@js.enum]) [@@js.get "LESS"]
  val get_EQUAL: 'tags this -> ([`L_n_514[@js 514]] [@js.enum]) [@@js.get "EQUAL"]
  val get_LEQUAL: 'tags this -> ([`L_n_515[@js 515]] [@js.enum]) [@@js.get "LEQUAL"]
  val get_GREATER: 'tags this -> ([`L_n_516[@js 516]] [@js.enum]) [@@js.get "GREATER"]
  val get_NOTEQUAL: 'tags this -> ([`L_n_517[@js 517]] [@js.enum]) [@@js.get "NOTEQUAL"]
  val get_GEQUAL: 'tags this -> ([`L_n_518[@js 518]] [@js.enum]) [@@js.get "GEQUAL"]
  val get_ALWAYS: 'tags this -> ([`L_n_519[@js 519]] [@js.enum]) [@@js.get "ALWAYS"]
  val get_KEEP: 'tags this -> ([`L_n_7680[@js 7680]] [@js.enum]) [@@js.get "KEEP"]
  val get_REPLACE: 'tags this -> ([`L_n_7681[@js 7681]] [@js.enum]) [@@js.get "REPLACE"]
  val get_INCR: 'tags this -> ([`L_n_7682[@js 7682]] [@js.enum]) [@@js.get "INCR"]
  val get_DECR: 'tags this -> ([`L_n_7683[@js 7683]] [@js.enum]) [@@js.get "DECR"]
  val get_INVERT: 'tags this -> ([`L_n_5386[@js 5386]] [@js.enum]) [@@js.get "INVERT"]
  val get_INCR_WRAP: 'tags this -> ([`L_n_34055[@js 34055]] [@js.enum]) [@@js.get "INCR_WRAP"]
  val get_DECR_WRAP: 'tags this -> ([`L_n_34056[@js 34056]] [@js.enum]) [@@js.get "DECR_WRAP"]
  val get_VENDOR: 'tags this -> ([`L_n_7936[@js 7936]] [@js.enum]) [@@js.get "VENDOR"]
  val get_RENDERER: 'tags this -> ([`L_n_7937[@js 7937]] [@js.enum]) [@@js.get "RENDERER"]
  val get_VERSION: 'tags this -> ([`L_n_7938[@js 7938]] [@js.enum]) [@@js.get "VERSION"]
  val get_NEAREST: 'tags this -> ([`L_n_9728[@js 9728]] [@js.enum]) [@@js.get "NEAREST"]
  val get_LINEAR: 'tags this -> ([`L_n_9729[@js 9729]] [@js.enum]) [@@js.get "LINEAR"]
  val get_NEAREST_MIPMAP_NEAREST: 'tags this -> ([`L_n_9984[@js 9984]] [@js.enum]) [@@js.get "NEAREST_MIPMAP_NEAREST"]
  val get_LINEAR_MIPMAP_NEAREST: 'tags this -> ([`L_n_9985[@js 9985]] [@js.enum]) [@@js.get "LINEAR_MIPMAP_NEAREST"]
  val get_NEAREST_MIPMAP_LINEAR: 'tags this -> ([`L_n_9986[@js 9986]] [@js.enum]) [@@js.get "NEAREST_MIPMAP_LINEAR"]
  val get_LINEAR_MIPMAP_LINEAR: 'tags this -> ([`L_n_9987[@js 9987]] [@js.enum]) [@@js.get "LINEAR_MIPMAP_LINEAR"]
  val get_TEXTURE_MAG_FILTER: 'tags this -> ([`L_n_10240[@js 10240]] [@js.enum]) [@@js.get "TEXTURE_MAG_FILTER"]
  val get_TEXTURE_MIN_FILTER: 'tags this -> ([`L_n_10241[@js 10241]] [@js.enum]) [@@js.get "TEXTURE_MIN_FILTER"]
  val get_TEXTURE_WRAP_S: 'tags this -> ([`L_n_10242[@js 10242]] [@js.enum]) [@@js.get "TEXTURE_WRAP_S"]
  val get_TEXTURE_WRAP_T: 'tags this -> ([`L_n_10243[@js 10243]] [@js.enum]) [@@js.get "TEXTURE_WRAP_T"]
  val get_TEXTURE_2D: 'tags this -> ([`L_n_3553[@js 3553]] [@js.enum]) [@@js.get "TEXTURE_2D"]
  val get_TEXTURE: 'tags this -> ([`L_n_5890[@js 5890]] [@js.enum]) [@@js.get "TEXTURE"]
  val get_TEXTURE_CUBE_MAP: 'tags this -> ([`L_n_34067[@js 34067]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP"]
  val get_TEXTURE_BINDING_CUBE_MAP: 'tags this -> ([`L_n_34068[@js 34068]] [@js.enum]) [@@js.get "TEXTURE_BINDING_CUBE_MAP"]
  val get_TEXTURE_CUBE_MAP_POSITIVE_X: 'tags this -> ([`L_n_34069[@js 34069]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP_POSITIVE_X"]
  val get_TEXTURE_CUBE_MAP_NEGATIVE_X: 'tags this -> ([`L_n_34070[@js 34070]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP_NEGATIVE_X"]
  val get_TEXTURE_CUBE_MAP_POSITIVE_Y: 'tags this -> ([`L_n_34071[@js 34071]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP_POSITIVE_Y"]
  val get_TEXTURE_CUBE_MAP_NEGATIVE_Y: 'tags this -> ([`L_n_34072[@js 34072]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP_NEGATIVE_Y"]
  val get_TEXTURE_CUBE_MAP_POSITIVE_Z: 'tags this -> ([`L_n_34073[@js 34073]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP_POSITIVE_Z"]
  val get_TEXTURE_CUBE_MAP_NEGATIVE_Z: 'tags this -> ([`L_n_34074[@js 34074]] [@js.enum]) [@@js.get "TEXTURE_CUBE_MAP_NEGATIVE_Z"]
  val get_MAX_CUBE_MAP_TEXTURE_SIZE: 'tags this -> ([`L_n_34076[@js 34076]] [@js.enum]) [@@js.get "MAX_CUBE_MAP_TEXTURE_SIZE"]
  val get_TEXTURE0: 'tags this -> ([`L_n_33984[@js 33984]] [@js.enum]) [@@js.get "TEXTURE0"]
  val get_TEXTURE1: 'tags this -> ([`L_n_33985[@js 33985]] [@js.enum]) [@@js.get "TEXTURE1"]
  val get_TEXTURE2: 'tags this -> ([`L_n_33986[@js 33986]] [@js.enum]) [@@js.get "TEXTURE2"]
  val get_TEXTURE3: 'tags this -> ([`L_n_33987[@js 33987]] [@js.enum]) [@@js.get "TEXTURE3"]
  val get_TEXTURE4: 'tags this -> ([`L_n_33988[@js 33988]] [@js.enum]) [@@js.get "TEXTURE4"]
  val get_TEXTURE5: 'tags this -> ([`L_n_33989[@js 33989]] [@js.enum]) [@@js.get "TEXTURE5"]
  val get_TEXTURE6: 'tags this -> ([`L_n_33990[@js 33990]] [@js.enum]) [@@js.get "TEXTURE6"]
  val get_TEXTURE7: 'tags this -> ([`L_n_33991[@js 33991]] [@js.enum]) [@@js.get "TEXTURE7"]
  val get_TEXTURE8: 'tags this -> ([`L_n_33992[@js 33992]] [@js.enum]) [@@js.get "TEXTURE8"]
  val get_TEXTURE9: 'tags this -> ([`L_n_33993[@js 33993]] [@js.enum]) [@@js.get "TEXTURE9"]
  val get_TEXTURE10: 'tags this -> ([`L_n_33994[@js 33994]] [@js.enum]) [@@js.get "TEXTURE10"]
  val get_TEXTURE11: 'tags this -> ([`L_n_33995[@js 33995]] [@js.enum]) [@@js.get "TEXTURE11"]
  val get_TEXTURE12: 'tags this -> ([`L_n_33996[@js 33996]] [@js.enum]) [@@js.get "TEXTURE12"]
  val get_TEXTURE13: 'tags this -> ([`L_n_33997[@js 33997]] [@js.enum]) [@@js.get "TEXTURE13"]
  val get_TEXTURE14: 'tags this -> ([`L_n_33998[@js 33998]] [@js.enum]) [@@js.get "TEXTURE14"]
  val get_TEXTURE15: 'tags this -> ([`L_n_33999[@js 33999]] [@js.enum]) [@@js.get "TEXTURE15"]
  val get_TEXTURE16: 'tags this -> ([`L_n_34000[@js 34000]] [@js.enum]) [@@js.get "TEXTURE16"]
  val get_TEXTURE17: 'tags this -> ([`L_n_34001[@js 34001]] [@js.enum]) [@@js.get "TEXTURE17"]
  val get_TEXTURE18: 'tags this -> ([`L_n_34002[@js 34002]] [@js.enum]) [@@js.get "TEXTURE18"]
  val get_TEXTURE19: 'tags this -> ([`L_n_34003[@js 34003]] [@js.enum]) [@@js.get "TEXTURE19"]
  val get_TEXTURE20: 'tags this -> ([`L_n_34004[@js 34004]] [@js.enum]) [@@js.get "TEXTURE20"]
  val get_TEXTURE21: 'tags this -> ([`L_n_34005[@js 34005]] [@js.enum]) [@@js.get "TEXTURE21"]
  val get_TEXTURE22: 'tags this -> ([`L_n_34006[@js 34006]] [@js.enum]) [@@js.get "TEXTURE22"]
  val get_TEXTURE23: 'tags this -> ([`L_n_34007[@js 34007]] [@js.enum]) [@@js.get "TEXTURE23"]
  val get_TEXTURE24: 'tags this -> ([`L_n_34008[@js 34008]] [@js.enum]) [@@js.get "TEXTURE24"]
  val get_TEXTURE25: 'tags this -> ([`L_n_34009[@js 34009]] [@js.enum]) [@@js.get "TEXTURE25"]
  val get_TEXTURE26: 'tags this -> ([`L_n_34010[@js 34010]] [@js.enum]) [@@js.get "TEXTURE26"]
  val get_TEXTURE27: 'tags this -> ([`L_n_34011[@js 34011]] [@js.enum]) [@@js.get "TEXTURE27"]
  val get_TEXTURE28: 'tags this -> ([`L_n_34012[@js 34012]] [@js.enum]) [@@js.get "TEXTURE28"]
  val get_TEXTURE29: 'tags this -> ([`L_n_34013[@js 34013]] [@js.enum]) [@@js.get "TEXTURE29"]
  val get_TEXTURE30: 'tags this -> ([`L_n_34014[@js 34014]] [@js.enum]) [@@js.get "TEXTURE30"]
  val get_TEXTURE31: 'tags this -> ([`L_n_34015[@js 34015]] [@js.enum]) [@@js.get "TEXTURE31"]
  val get_ACTIVE_TEXTURE: 'tags this -> ([`L_n_34016[@js 34016]] [@js.enum]) [@@js.get "ACTIVE_TEXTURE"]
  val get_REPEAT: 'tags this -> ([`L_n_10497[@js 10497]] [@js.enum]) [@@js.get "REPEAT"]
  val get_CLAMP_TO_EDGE: 'tags this -> ([`L_n_33071[@js 33071]] [@js.enum]) [@@js.get "CLAMP_TO_EDGE"]
  val get_MIRRORED_REPEAT: 'tags this -> ([`L_n_33648[@js 33648]] [@js.enum]) [@@js.get "MIRRORED_REPEAT"]
  val get_FLOAT_VEC2: 'tags this -> ([`L_n_35664[@js 35664]] [@js.enum]) [@@js.get "FLOAT_VEC2"]
  val get_FLOAT_VEC3: 'tags this -> ([`L_n_35665[@js 35665]] [@js.enum]) [@@js.get "FLOAT_VEC3"]
  val get_FLOAT_VEC4: 'tags this -> ([`L_n_35666[@js 35666]] [@js.enum]) [@@js.get "FLOAT_VEC4"]
  val get_INT_VEC2: 'tags this -> ([`L_n_35667[@js 35667]] [@js.enum]) [@@js.get "INT_VEC2"]
  val get_INT_VEC3: 'tags this -> ([`L_n_35668[@js 35668]] [@js.enum]) [@@js.get "INT_VEC3"]
  val get_INT_VEC4: 'tags this -> ([`L_n_35669[@js 35669]] [@js.enum]) [@@js.get "INT_VEC4"]
  val get_BOOL: 'tags this -> ([`L_n_35670[@js 35670]] [@js.enum]) [@@js.get "BOOL"]
  val get_BOOL_VEC2: 'tags this -> ([`L_n_35671[@js 35671]] [@js.enum]) [@@js.get "BOOL_VEC2"]
  val get_BOOL_VEC3: 'tags this -> ([`L_n_35672[@js 35672]] [@js.enum]) [@@js.get "BOOL_VEC3"]
  val get_BOOL_VEC4: 'tags this -> ([`L_n_35673[@js 35673]] [@js.enum]) [@@js.get "BOOL_VEC4"]
  val get_FLOAT_MAT2: 'tags this -> ([`L_n_35674[@js 35674]] [@js.enum]) [@@js.get "FLOAT_MAT2"]
  val get_FLOAT_MAT3: 'tags this -> ([`L_n_35675[@js 35675]] [@js.enum]) [@@js.get "FLOAT_MAT3"]
  val get_FLOAT_MAT4: 'tags this -> ([`L_n_35676[@js 35676]] [@js.enum]) [@@js.get "FLOAT_MAT4"]
  val get_SAMPLER_2D: 'tags this -> ([`L_n_35678[@js 35678]] [@js.enum]) [@@js.get "SAMPLER_2D"]
  val get_SAMPLER_CUBE: 'tags this -> ([`L_n_35680[@js 35680]] [@js.enum]) [@@js.get "SAMPLER_CUBE"]
  val get_VERTEX_ATTRIB_ARRAY_ENABLED: 'tags this -> ([`L_n_34338[@js 34338]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_ENABLED"]
  val get_VERTEX_ATTRIB_ARRAY_SIZE: 'tags this -> ([`L_n_34339[@js 34339]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_SIZE"]
  val get_VERTEX_ATTRIB_ARRAY_STRIDE: 'tags this -> ([`L_n_34340[@js 34340]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_STRIDE"]
  val get_VERTEX_ATTRIB_ARRAY_TYPE: 'tags this -> ([`L_n_34341[@js 34341]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_TYPE"]
  val get_VERTEX_ATTRIB_ARRAY_NORMALIZED: 'tags this -> ([`L_n_34922[@js 34922]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_NORMALIZED"]
  val get_VERTEX_ATTRIB_ARRAY_POINTER: 'tags this -> ([`L_n_34373[@js 34373]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_POINTER"]
  val get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 'tags this -> ([`L_n_34975[@js 34975]] [@js.enum]) [@@js.get "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING"]
  val get_IMPLEMENTATION_COLOR_READ_TYPE: 'tags this -> ([`L_n_35738[@js 35738]] [@js.enum]) [@@js.get "IMPLEMENTATION_COLOR_READ_TYPE"]
  val get_IMPLEMENTATION_COLOR_READ_FORMAT: 'tags this -> ([`L_n_35739[@js 35739]] [@js.enum]) [@@js.get "IMPLEMENTATION_COLOR_READ_FORMAT"]
  val get_COMPILE_STATUS: 'tags this -> ([`L_n_35713[@js 35713]] [@js.enum]) [@@js.get "COMPILE_STATUS"]
  val get_LOW_FLOAT: 'tags this -> ([`L_n_36336[@js 36336]] [@js.enum]) [@@js.get "LOW_FLOAT"]
  val get_MEDIUM_FLOAT: 'tags this -> ([`L_n_36337[@js 36337]] [@js.enum]) [@@js.get "MEDIUM_FLOAT"]
  val get_HIGH_FLOAT: 'tags this -> ([`L_n_36338[@js 36338]] [@js.enum]) [@@js.get "HIGH_FLOAT"]
  val get_LOW_INT: 'tags this -> ([`L_n_36339[@js 36339]] [@js.enum]) [@@js.get "LOW_INT"]
  val get_MEDIUM_INT: 'tags this -> ([`L_n_36340[@js 36340]] [@js.enum]) [@@js.get "MEDIUM_INT"]
  val get_HIGH_INT: 'tags this -> ([`L_n_36341[@js 36341]] [@js.enum]) [@@js.get "HIGH_INT"]
  val get_FRAMEBUFFER: 'tags this -> ([`L_n_36160[@js 36160]] [@js.enum]) [@@js.get "FRAMEBUFFER"]
  val get_RENDERBUFFER: 'tags this -> ([`L_n_36161[@js 36161]] [@js.enum]) [@@js.get "RENDERBUFFER"]
  val get_RGBA4: 'tags this -> ([`L_n_32854[@js 32854]] [@js.enum]) [@@js.get "RGBA4"]
  val get_RGB5_A1: 'tags this -> ([`L_n_32855[@js 32855]] [@js.enum]) [@@js.get "RGB5_A1"]
  val get_RGBA8: 'tags this -> ([`L_n_32856[@js 32856]] [@js.enum]) [@@js.get "RGBA8"]
  val get_RGB565: 'tags this -> ([`L_n_36194[@js 36194]] [@js.enum]) [@@js.get "RGB565"]
  val get_DEPTH_COMPONENT16: 'tags this -> ([`L_n_33189[@js 33189]] [@js.enum]) [@@js.get "DEPTH_COMPONENT16"]
  val get_STENCIL_INDEX8: 'tags this -> ([`L_n_36168[@js 36168]] [@js.enum]) [@@js.get "STENCIL_INDEX8"]
  val get_DEPTH_STENCIL: 'tags this -> ([`L_n_34041[@js 34041]] [@js.enum]) [@@js.get "DEPTH_STENCIL"]
  val get_RENDERBUFFER_WIDTH: 'tags this -> ([`L_n_36162[@js 36162]] [@js.enum]) [@@js.get "RENDERBUFFER_WIDTH"]
  val get_RENDERBUFFER_HEIGHT: 'tags this -> ([`L_n_36163[@js 36163]] [@js.enum]) [@@js.get "RENDERBUFFER_HEIGHT"]
  val get_RENDERBUFFER_INTERNAL_FORMAT: 'tags this -> ([`L_n_36164[@js 36164]] [@js.enum]) [@@js.get "RENDERBUFFER_INTERNAL_FORMAT"]
  val get_RENDERBUFFER_RED_SIZE: 'tags this -> ([`L_n_36176[@js 36176]] [@js.enum]) [@@js.get "RENDERBUFFER_RED_SIZE"]
  val get_RENDERBUFFER_GREEN_SIZE: 'tags this -> ([`L_n_36177[@js 36177]] [@js.enum]) [@@js.get "RENDERBUFFER_GREEN_SIZE"]
  val get_RENDERBUFFER_BLUE_SIZE: 'tags this -> ([`L_n_36178[@js 36178]] [@js.enum]) [@@js.get "RENDERBUFFER_BLUE_SIZE"]
  val get_RENDERBUFFER_ALPHA_SIZE: 'tags this -> ([`L_n_36179[@js 36179]] [@js.enum]) [@@js.get "RENDERBUFFER_ALPHA_SIZE"]
  val get_RENDERBUFFER_DEPTH_SIZE: 'tags this -> ([`L_n_36180[@js 36180]] [@js.enum]) [@@js.get "RENDERBUFFER_DEPTH_SIZE"]
  val get_RENDERBUFFER_STENCIL_SIZE: 'tags this -> ([`L_n_36181[@js 36181]] [@js.enum]) [@@js.get "RENDERBUFFER_STENCIL_SIZE"]
  val get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 'tags this -> ([`L_n_36048[@js 36048]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE"]
  val get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 'tags this -> ([`L_n_36049[@js 36049]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME"]
  val get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 'tags this -> ([`L_n_36050[@js 36050]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL"]
  val get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 'tags this -> ([`L_n_36051[@js 36051]] [@js.enum]) [@@js.get "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE"]
  val get_COLOR_ATTACHMENT0: 'tags this -> ([`L_n_36064[@js 36064]] [@js.enum]) [@@js.get "COLOR_ATTACHMENT0"]
  val get_DEPTH_ATTACHMENT: 'tags this -> ([`L_n_36096[@js 36096]] [@js.enum]) [@@js.get "DEPTH_ATTACHMENT"]
  val get_STENCIL_ATTACHMENT: 'tags this -> ([`L_n_36128[@js 36128]] [@js.enum]) [@@js.get "STENCIL_ATTACHMENT"]
  val get_DEPTH_STENCIL_ATTACHMENT: 'tags this -> ([`L_n_33306[@js 33306]] [@js.enum]) [@@js.get "DEPTH_STENCIL_ATTACHMENT"]
  val get_NONE: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "NONE"]
  val get_FRAMEBUFFER_COMPLETE: 'tags this -> ([`L_n_36053[@js 36053]] [@js.enum]) [@@js.get "FRAMEBUFFER_COMPLETE"]
  val get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 'tags this -> ([`L_n_36054[@js 36054]] [@js.enum]) [@@js.get "FRAMEBUFFER_INCOMPLETE_ATTACHMENT"]
  val get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 'tags this -> ([`L_n_36055[@js 36055]] [@js.enum]) [@@js.get "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"]
  val get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 'tags this -> ([`L_n_36057[@js 36057]] [@js.enum]) [@@js.get "FRAMEBUFFER_INCOMPLETE_DIMENSIONS"]
  val get_FRAMEBUFFER_UNSUPPORTED: 'tags this -> ([`L_n_36061[@js 36061]] [@js.enum]) [@@js.get "FRAMEBUFFER_UNSUPPORTED"]
  val get_FRAMEBUFFER_BINDING: 'tags this -> ([`L_n_36006[@js 36006]] [@js.enum]) [@@js.get "FRAMEBUFFER_BINDING"]
  val get_RENDERBUFFER_BINDING: 'tags this -> ([`L_n_36007[@js 36007]] [@js.enum]) [@@js.get "RENDERBUFFER_BINDING"]
  val get_MAX_RENDERBUFFER_SIZE: 'tags this -> ([`L_n_34024[@js 34024]] [@js.enum]) [@@js.get "MAX_RENDERBUFFER_SIZE"]
  val get_INVALID_FRAMEBUFFER_OPERATION: 'tags this -> ([`L_n_1286[@js 1286]] [@js.enum]) [@@js.get "INVALID_FRAMEBUFFER_OPERATION"]
  val get_UNPACK_FLIP_Y_WEBGL: 'tags this -> ([`L_n_37440[@js 37440]] [@js.enum]) [@@js.get "UNPACK_FLIP_Y_WEBGL"]
  val get_UNPACK_PREMULTIPLY_ALPHA_WEBGL: 'tags this -> ([`L_n_37441[@js 37441]] [@js.enum]) [@@js.get "UNPACK_PREMULTIPLY_ALPHA_WEBGL"]
  val get_CONTEXT_LOST_WEBGL: 'tags this -> ([`L_n_37442[@js 37442]] [@js.enum]) [@@js.get "CONTEXT_LOST_WEBGL"]
  val get_UNPACK_COLORSPACE_CONVERSION_WEBGL: 'tags this -> ([`L_n_37443[@js 37443]] [@js.enum]) [@@js.get "UNPACK_COLORSPACE_CONVERSION_WEBGL"]
  val get_BROWSER_DEFAULT_WEBGL: 'tags this -> ([`L_n_37444[@js 37444]] [@js.enum]) [@@js.get "BROWSER_DEFAULT_WEBGL"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
and WebGLRenderingContextOverloads : sig
  type t = [`WebGLRenderingContextOverloads] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebGLRenderingContextOverloads]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebGLRenderingContextOverloads]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebGLRenderingContextOverloads ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform1fv: 'tags this -> location:WebGLUniformLocation.t option -> v:GLfloat.t Iterable.t -> unit [@@js.call "uniform1fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform1iv: 'tags this -> location:WebGLUniformLocation.t option -> v:GLint.t Iterable.t -> unit [@@js.call "uniform1iv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform2fv: 'tags this -> location:WebGLUniformLocation.t option -> v:GLfloat.t Iterable.t -> unit [@@js.call "uniform2fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform2iv: 'tags this -> location:WebGLUniformLocation.t option -> v:GLint.t Iterable.t -> unit [@@js.call "uniform2iv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform3fv: 'tags this -> location:WebGLUniformLocation.t option -> v:GLfloat.t Iterable.t -> unit [@@js.call "uniform3fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform3iv: 'tags this -> location:WebGLUniformLocation.t option -> v:GLint.t Iterable.t -> unit [@@js.call "uniform3iv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform4fv: 'tags this -> location:WebGLUniformLocation.t option -> v:GLfloat.t Iterable.t -> unit [@@js.call "uniform4fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform4iv: 'tags this -> location:WebGLUniformLocation.t option -> v:GLint.t Iterable.t -> unit [@@js.call "uniform4iv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix) *)
  val uniformMatrix2fv: 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> value:GLfloat.t Iterable.t -> unit [@@js.call "uniformMatrix2fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix) *)
  val uniformMatrix3fv: 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> value:GLfloat.t Iterable.t -> unit [@@js.call "uniformMatrix3fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix) *)
  val uniformMatrix4fv: 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> value:GLfloat.t Iterable.t -> unit [@@js.call "uniformMatrix4fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferData) *)
  val bufferData: 'tags this -> target:GLenum.t -> size:GLsizeiptr.t -> usage:GLenum.t -> unit [@@js.call "bufferData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferData) *)
  val bufferData': 'tags this -> target:GLenum.t -> data:AllowSharedBufferSource.t option -> usage:GLenum.t -> unit [@@js.call "bufferData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferSubData) *)
  val bufferSubData: 'tags this -> target:GLenum.t -> offset:GLintptr.t -> data:AllowSharedBufferSource.t -> unit [@@js.call "bufferSubData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/compressedTexImage2D) *)
  val compressedTexImage2D: 'tags this -> target:GLenum.t -> level:GLint.t -> internalformat:GLenum.t -> width:GLsizei.t -> height:GLsizei.t -> border:GLint.t -> data:ArrayBufferView.t -> unit [@@js.call "compressedTexImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/compressedTexSubImage2D) *)
  val compressedTexSubImage2D: 'tags this -> target:GLenum.t -> level:GLint.t -> xoffset:GLint.t -> yoffset:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> format:GLenum.t -> data:ArrayBufferView.t -> unit [@@js.call "compressedTexSubImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/readPixels) *)
  val readPixels: 'tags this -> x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> format:GLenum.t -> type_:GLenum.t -> pixels:ArrayBufferView.t option -> unit [@@js.call "readPixels"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texImage2D) *)
  val texImage2D: 'tags this -> target:GLenum.t -> level:GLint.t -> internalformat:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> border:GLint.t -> format:GLenum.t -> type_:GLenum.t -> pixels:ArrayBufferView.t option -> unit [@@js.call "texImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texImage2D) *)
  val texImage2D': 'tags this -> target:GLenum.t -> level:GLint.t -> internalformat:GLint.t -> format:GLenum.t -> type_:GLenum.t -> source:TexImageSource.t -> unit [@@js.call "texImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texSubImage2D) *)
  val texSubImage2D: 'tags this -> target:GLenum.t -> level:GLint.t -> xoffset:GLint.t -> yoffset:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> format:GLenum.t -> type_:GLenum.t -> pixels:ArrayBufferView.t option -> unit [@@js.call "texSubImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texSubImage2D) *)
  val texSubImage2D': 'tags this -> target:GLenum.t -> level:GLint.t -> xoffset:GLint.t -> yoffset:GLint.t -> format:GLenum.t -> type_:GLenum.t -> source:TexImageSource.t -> unit [@@js.call "texSubImage2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform1fv': 'tags this -> location:WebGLUniformLocation.t option -> v:Float32List.t -> unit [@@js.call "uniform1fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform1iv': 'tags this -> location:WebGLUniformLocation.t option -> v:Int32List.t -> unit [@@js.call "uniform1iv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform2fv': 'tags this -> location:WebGLUniformLocation.t option -> v:Float32List.t -> unit [@@js.call "uniform2fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform2iv': 'tags this -> location:WebGLUniformLocation.t option -> v:Int32List.t -> unit [@@js.call "uniform2iv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform3fv': 'tags this -> location:WebGLUniformLocation.t option -> v:Float32List.t -> unit [@@js.call "uniform3fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform3iv': 'tags this -> location:WebGLUniformLocation.t option -> v:Int32List.t -> unit [@@js.call "uniform3iv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform4fv': 'tags this -> location:WebGLUniformLocation.t option -> v:Float32List.t -> unit [@@js.call "uniform4fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform) *)
  val uniform4iv': 'tags this -> location:WebGLUniformLocation.t option -> v:Int32List.t -> unit [@@js.call "uniform4iv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix) *)
  val uniformMatrix2fv': 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> value:Float32List.t -> unit [@@js.call "uniformMatrix2fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix) *)
  val uniformMatrix3fv': 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> value:Float32List.t -> unit [@@js.call "uniformMatrix3fv"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix) *)
  val uniformMatrix4fv': 'tags this -> location:WebGLUniformLocation.t option -> transpose:GLboolean.t -> value:Float32List.t -> unit [@@js.call "uniformMatrix4fv"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Events that occur due to the user moving a mouse wheel or similar input device.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WheelEvent)
*)
and[@js.scope "WheelEvent"] WheelEvent : sig
  type t = [`Event | `MouseEvent | `UIEvent | `WheelEvent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Event | `MouseEvent | `UIEvent | `WheelEvent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Event | `MouseEvent | `UIEvent | `WheelEvent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WheelEvent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WheelEvent/deltaMode) *)
  val get_deltaMode: 'tags this -> float [@@js.get "deltaMode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WheelEvent/deltaX) *)
  val get_deltaX: 'tags this -> float [@@js.get "deltaX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WheelEvent/deltaY) *)
  val get_deltaY: 'tags this -> float [@@js.get "deltaY"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WheelEvent/deltaZ) *)
  val get_deltaZ: 'tags this -> float [@@js.get "deltaZ"]
  val get_DOM_DELTA_PIXEL: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "DOM_DELTA_PIXEL"]
  val get_DOM_DELTA_LINE: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "DOM_DELTA_LINE"]
  val get_DOM_DELTA_PAGE: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "DOM_DELTA_PAGE"]
  val create: deltaMode:float -> deltaX:float -> deltaY:float -> deltaZ:float -> dom_delta_pixel:(([`L_n_0[@js 0]] [@js.enum])[@js "DOM_DELTA_PIXEL"]) -> dom_delta_line:(([`L_n_1[@js 1]] [@js.enum])[@js "DOM_DELTA_LINE"]) -> dom_delta_page:(([`L_n_2[@js 2]] [@js.enum])[@js "DOM_DELTA_PAGE"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': type_:string -> ?eventInitDict:WheelEventInit.t -> unit -> t [@@js.create]
  val dom_delta_pixel: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "DOM_DELTA_PIXEL"]
  val dom_delta_line: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "DOM_DELTA_LINE"]
  val dom_delta_page: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "DOM_DELTA_PAGE"]
end
and WheelEventInit : sig
  type t = [`EventInit | `EventModifierInit | `MouseEventInit | `UIEventInit | `WheelEventInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventInit | `EventModifierInit | `MouseEventInit | `UIEventInit | `WheelEventInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventInit | `EventModifierInit | `MouseEventInit | `UIEventInit | `WheelEventInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WheelEventInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_deltaMode: 'tags this -> float option [@@js.get "deltaMode"]
  val set_deltaMode: 'tags this -> float -> unit [@@js.set "deltaMode"]
  val get_deltaX: 'tags this -> float option [@@js.get "deltaX"]
  val set_deltaX: 'tags this -> float -> unit [@@js.set "deltaX"]
  val get_deltaY: 'tags this -> float option [@@js.get "deltaY"]
  val set_deltaY: 'tags this -> float -> unit [@@js.set "deltaY"]
  val get_deltaZ: 'tags this -> float option [@@js.get "deltaZ"]
  val set_deltaZ: 'tags this -> float -> unit [@@js.set "deltaZ"]
  val create: ?deltaMode:float -> ?deltaX:float -> ?deltaY:float -> ?deltaZ:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  A window containing a DOM document; the document property points to the DOM document loaded in that window.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window)
*)
and[@js.scope "Window"] Window : sig
  type t = [`AnimationFrameProvider | `EventTarget | `GlobalEventHandlers | `Window | `WindowEventHandlers | `WindowLocalStorage | `WindowOrWorkerGlobalScope | `WindowSessionStorage] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AnimationFrameProvider | `EventTarget | `GlobalEventHandlers | `Window | `WindowEventHandlers | `WindowLocalStorage | `WindowOrWorkerGlobalScope | `WindowSessionStorage]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AnimationFrameProvider | `EventTarget | `GlobalEventHandlers | `Window | `WindowEventHandlers | `WindowLocalStorage | `WindowOrWorkerGlobalScope | `WindowSessionStorage]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Window ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    @deprecated This is a legacy alias of `navigator`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/navigator)
  *)
  val get_clientInformation: 'tags this -> Navigator.t [@@js.get "clientInformation"]
  
  (**
    Returns true if the window has been closed, false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/closed)
  *)
  val get_closed: 'tags this -> bool [@@js.get "closed"]
  
  (**
    Defines a new custom element, mapping the given name to the given constructor as an autonomous custom element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/customElements)
  *)
  val get_customElements: 'tags this -> CustomElementRegistry.t [@@js.get "customElements"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/devicePixelRatio) *)
  val get_devicePixelRatio: 'tags this -> float [@@js.get "devicePixelRatio"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/document) *)
  val get_document: 'tags this -> Document.t [@@js.get "document"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/event) *)
  val get_event: 'tags this -> Event.t option [@@js.get "event"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/external) *)
  val get_external: 'tags this -> External.t [@@js.get "external"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/frameElement) *)
  val get_frameElement: 'tags this -> Element.t option [@@js.get "frameElement"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/frames) *)
  val get_frames: 'tags this -> WindowProxy.t [@@js.get "frames"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/history) *)
  val get_history: 'tags this -> History.t [@@js.get "history"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/innerHeight) *)
  val get_innerHeight: 'tags this -> float [@@js.get "innerHeight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/innerWidth) *)
  val get_innerWidth: 'tags this -> float [@@js.get "innerWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/length) *)
  val get_length: 'tags this -> float [@@js.get "length"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/location) *)
  val get_location: 'tags this -> Location.t [@@js.get "location"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/location) *)
  val set_location: 'tags this -> ([`U1 of string | `U2 of Location.t] [@js.union]) -> unit [@@js.set "location"]
  
  (**
    Returns true if the location bar is visible; otherwise, returns false.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/locationbar)
  *)
  val get_locationbar: 'tags this -> BarProp.t [@@js.get "locationbar"]
  
  (**
    Returns true if the menu bar is visible; otherwise, returns false.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/menubar)
  *)
  val get_menubar: 'tags this -> BarProp.t [@@js.get "menubar"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/name) *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/name) *)
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/navigator) *)
  val get_navigator: 'tags this -> Navigator.t [@@js.get "navigator"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/devicemotion_event)
  *)
  val get_ondevicemotion: 'tags this -> (this:t -> ev:DeviceMotionEvent.t -> any) option [@@js.get "ondevicemotion"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/devicemotion_event)
  *)
  val set_ondevicemotion: 'tags this -> (this:t -> ev:DeviceMotionEvent.t -> any) option -> unit [@@js.set "ondevicemotion"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/deviceorientation_event)
  *)
  val get_ondeviceorientation: 'tags this -> (this:t -> ev:DeviceOrientationEvent.t -> any) option [@@js.get "ondeviceorientation"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/deviceorientation_event)
  *)
  val set_ondeviceorientation: 'tags this -> (this:t -> ev:DeviceOrientationEvent.t -> any) option -> unit [@@js.set "ondeviceorientation"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/deviceorientationabsolute_event)
  *)
  val get_ondeviceorientationabsolute: 'tags this -> (this:t -> ev:DeviceOrientationEvent.t -> any) option [@@js.get "ondeviceorientationabsolute"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/deviceorientationabsolute_event)
  *)
  val set_ondeviceorientationabsolute: 'tags this -> (this:t -> ev:DeviceOrientationEvent.t -> any) option -> unit [@@js.set "ondeviceorientationabsolute"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/orientationchange_event) *)
  val get_onorientationchange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onorientationchange"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/orientationchange_event) *)
  val set_onorientationchange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onorientationchange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/opener) *)
  val get_opener: 'tags this -> any [@@js.get "opener"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/opener) *)
  val set_opener: 'tags this -> any -> unit [@@js.set "opener"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/orientation) *)
  val get_orientation: 'tags this -> float [@@js.get "orientation"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/outerHeight) *)
  val get_outerHeight: 'tags this -> float [@@js.get "outerHeight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/outerWidth) *)
  val get_outerWidth: 'tags this -> float [@@js.get "outerWidth"]
  
  (**
    @deprecated This is a legacy alias of `scrollX`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/scrollX)
  *)
  val get_pageXOffset: 'tags this -> float [@@js.get "pageXOffset"]
  
  (**
    @deprecated This is a legacy alias of `scrollY`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/scrollY)
  *)
  val get_pageYOffset: 'tags this -> float [@@js.get "pageYOffset"]
  
  (**
    Refers to either the parent WindowProxy, or itself.
    
    It can rarely be null e.g. for contentWindow of an iframe that is already removed from the parent.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/parent)
  *)
  val get_parent: 'tags this -> WindowProxy.t [@@js.get "parent"]
  
  (**
    Returns true if the personal bar is visible; otherwise, returns false.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/personalbar)
  *)
  val get_personalbar: 'tags this -> BarProp.t [@@js.get "personalbar"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/screen) *)
  val get_screen: 'tags this -> Screen.t [@@js.get "screen"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/screenLeft) *)
  val get_screenLeft: 'tags this -> float [@@js.get "screenLeft"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/screenTop) *)
  val get_screenTop: 'tags this -> float [@@js.get "screenTop"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/screenX) *)
  val get_screenX: 'tags this -> float [@@js.get "screenX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/screenY) *)
  val get_screenY: 'tags this -> float [@@js.get "screenY"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/scrollX) *)
  val get_scrollX: 'tags this -> float [@@js.get "scrollX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/scrollY) *)
  val get_scrollY: 'tags this -> float [@@js.get "scrollY"]
  
  (**
    Returns true if the scrollbars are visible; otherwise, returns false.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/scrollbars)
  *)
  val get_scrollbars: 'tags this -> BarProp.t [@@js.get "scrollbars"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/self) *)
  val get_self: 'tags this -> (t, (* FIXME: unknown type 'typeof globalThis' *)any) intersection2 [@@js.get "self"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/speechSynthesis) *)
  val get_speechSynthesis: 'tags this -> SpeechSynthesis.t [@@js.get "speechSynthesis"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/status) *)
  val get_status: 'tags this -> string [@@js.get "status"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/status) *)
  val set_status: 'tags this -> string -> unit [@@js.set "status"]
  
  (**
    Returns true if the status bar is visible; otherwise, returns false.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/statusbar)
  *)
  val get_statusbar: 'tags this -> BarProp.t [@@js.get "statusbar"]
  
  (**
    Returns true if the toolbar is visible; otherwise, returns false.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/toolbar)
  *)
  val get_toolbar: 'tags this -> BarProp.t [@@js.get "toolbar"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/top) *)
  val get_top: 'tags this -> WindowProxy.t option [@@js.get "top"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/visualViewport) *)
  val get_visualViewport: 'tags this -> VisualViewport.t option [@@js.get "visualViewport"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/window) *)
  val get_window: 'tags this -> (t, (* FIXME: unknown type 'typeof globalThis' *)any) intersection2 [@@js.get "window"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/alert) *)
  val alert: 'tags this -> ?message:any -> unit -> unit [@@js.call "alert"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/blur) *)
  val blur: 'tags this -> unit [@@js.call "blur"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/cancelIdleCallback) *)
  val cancelIdleCallback: 'tags this -> handle:float -> unit [@@js.call "cancelIdleCallback"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/captureEvents) *)
  val captureEvents: 'tags this -> unit [@@js.call "captureEvents"]
  
  (**
    Closes the window.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/close)
  *)
  val close: 'tags this -> unit [@@js.call "close"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/confirm) *)
  val confirm: 'tags this -> ?message:string -> unit -> bool [@@js.call "confirm"]
  
  (**
    Moves the focus to the window's browsing context, if any.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/focus)
  *)
  val focus: 'tags this -> unit [@@js.call "focus"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/getComputedStyle) *)
  val getComputedStyle: 'tags this -> elt:Element.t -> ?pseudoElt:string option -> unit -> CSSStyleDeclaration.t [@@js.call "getComputedStyle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/getSelection) *)
  val getSelection: 'tags this -> Selection.t option [@@js.call "getSelection"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/matchMedia) *)
  val matchMedia: 'tags this -> query:string -> MediaQueryList.t [@@js.call "matchMedia"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/moveBy) *)
  val moveBy: 'tags this -> x:float -> y:float -> unit [@@js.call "moveBy"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/moveTo) *)
  val moveTo: 'tags this -> x:float -> y:float -> unit [@@js.call "moveTo"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/open) *)
  val open_: 'tags this -> ?url:([`U1 of string | `U2 of URL.t] [@js.union]) -> ?target:string -> ?features:string -> unit -> WindowProxy.t option [@@js.call "open"]
  
  (**
    Posts a message to the given window. Messages can be structured objects, e.g. nested objects and arrays, can contain JavaScript values (strings, numbers, Date objects, etc), and can contain certain data objects such as File Blob, FileList, and ArrayBuffer objects.
    
    Objects listed in the transfer member of options are transferred, not just cloned, meaning that they are no longer usable on the sending side.
    
    A target origin can be specified using the targetOrigin member of options. If not provided, it defaults to "/". This default restricts the message to same-origin targets only.
    
    If the origin of the target window doesn't match the given target origin, the message is discarded, to avoid information leakage. To send the message to the target regardless of origin, set the target origin to "*".
    
    Throws a "DataCloneError" DOMException if transfer array contains duplicate objects or if message could not be cloned.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/postMessage)
  *)
  val postMessage: 'tags this -> message:any -> targetOrigin:string -> ?transfer:Transferable.t list -> unit -> unit [@@js.call "postMessage"]
  
  (**
    Posts a message to the given window. Messages can be structured objects, e.g. nested objects and arrays, can contain JavaScript values (strings, numbers, Date objects, etc), and can contain certain data objects such as File Blob, FileList, and ArrayBuffer objects.
    
    Objects listed in the transfer member of options are transferred, not just cloned, meaning that they are no longer usable on the sending side.
    
    A target origin can be specified using the targetOrigin member of options. If not provided, it defaults to "/". This default restricts the message to same-origin targets only.
    
    If the origin of the target window doesn't match the given target origin, the message is discarded, to avoid information leakage. To send the message to the target regardless of origin, set the target origin to "*".
    
    Throws a "DataCloneError" DOMException if transfer array contains duplicate objects or if message could not be cloned.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/postMessage)
  *)
  val postMessage': 'tags this -> message:any -> ?options:WindowPostMessageOptions.t -> unit -> unit [@@js.call "postMessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/print) *)
  val print: 'tags this -> unit [@@js.call "print"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/prompt) *)
  val prompt: 'tags this -> ?message:string -> ?_default:string -> unit -> string option [@@js.call "prompt"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/releaseEvents) *)
  val releaseEvents: 'tags this -> unit [@@js.call "releaseEvents"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/requestIdleCallback) *)
  val requestIdleCallback: 'tags this -> callback:IdleRequestCallback.t -> ?options:IdleRequestOptions.t -> unit -> float [@@js.call "requestIdleCallback"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/resizeBy) *)
  val resizeBy: 'tags this -> x:float -> y:float -> unit [@@js.call "resizeBy"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/resizeTo) *)
  val resizeTo: 'tags this -> width:float -> height:float -> unit [@@js.call "resizeTo"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/scroll) *)
  val scroll: 'tags this -> ?options:ScrollToOptions.t -> unit -> unit [@@js.call "scroll"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/scroll) *)
  val scroll': 'tags this -> x:float -> y:float -> unit [@@js.call "scroll"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/scrollBy) *)
  val scrollBy: 'tags this -> ?options:ScrollToOptions.t -> unit -> unit [@@js.call "scrollBy"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/scrollBy) *)
  val scrollBy': 'tags this -> x:float -> y:float -> unit [@@js.call "scrollBy"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/scrollTo) *)
  val scrollTo: 'tags this -> ?options:ScrollToOptions.t -> unit -> unit [@@js.call "scrollTo"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/scrollTo) *)
  val scrollTo': 'tags this -> x:float -> y:float -> unit [@@js.call "scrollTo"]
  
  (**
    Cancels the document load.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/stop)
  *)
  val stop: 'tags this -> unit [@@js.call "stop"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'WindowEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'WindowEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val get: 'tags this -> float -> t [@@js.index_get]
  val set: 'tags this -> float -> t -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
and WindowEventHandlers : sig
  type t = [`WindowEventHandlers] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WindowEventHandlers]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WindowEventHandlers]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WindowEventHandlers ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/afterprint_event) *)
  val get_onafterprint: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onafterprint"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/afterprint_event) *)
  val set_onafterprint: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onafterprint"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/beforeprint_event) *)
  val get_onbeforeprint: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onbeforeprint"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/beforeprint_event) *)
  val set_onbeforeprint: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onbeforeprint"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/beforeunload_event) *)
  val get_onbeforeunload: 'tags this -> (this:t -> ev:BeforeUnloadEvent.t -> any) option [@@js.get "onbeforeunload"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/beforeunload_event) *)
  val set_onbeforeunload: 'tags this -> (this:t -> ev:BeforeUnloadEvent.t -> any) option -> unit [@@js.set "onbeforeunload"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/gamepadconnected_event) *)
  val get_ongamepadconnected: 'tags this -> (this:t -> ev:GamepadEvent.t -> any) option [@@js.get "ongamepadconnected"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/gamepadconnected_event) *)
  val set_ongamepadconnected: 'tags this -> (this:t -> ev:GamepadEvent.t -> any) option -> unit [@@js.set "ongamepadconnected"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/gamepaddisconnected_event) *)
  val get_ongamepaddisconnected: 'tags this -> (this:t -> ev:GamepadEvent.t -> any) option [@@js.get "ongamepaddisconnected"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/gamepaddisconnected_event) *)
  val set_ongamepaddisconnected: 'tags this -> (this:t -> ev:GamepadEvent.t -> any) option -> unit [@@js.set "ongamepaddisconnected"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/hashchange_event) *)
  val get_onhashchange: 'tags this -> (this:t -> ev:HashChangeEvent.t -> any) option [@@js.get "onhashchange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/hashchange_event) *)
  val set_onhashchange: 'tags this -> (this:t -> ev:HashChangeEvent.t -> any) option -> unit [@@js.set "onhashchange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/languagechange_event) *)
  val get_onlanguagechange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onlanguagechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/languagechange_event) *)
  val set_onlanguagechange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onlanguagechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/message_event) *)
  val get_onmessage: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option [@@js.get "onmessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/message_event) *)
  val set_onmessage: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit [@@js.set "onmessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/messageerror_event) *)
  val get_onmessageerror: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option [@@js.get "onmessageerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/messageerror_event) *)
  val set_onmessageerror: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit [@@js.set "onmessageerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/offline_event) *)
  val get_onoffline: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onoffline"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/offline_event) *)
  val set_onoffline: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onoffline"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/online_event) *)
  val get_ononline: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "ononline"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/online_event) *)
  val set_ononline: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "ononline"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/pagehide_event) *)
  val get_onpagehide: 'tags this -> (this:t -> ev:PageTransitionEvent.t -> any) option [@@js.get "onpagehide"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/pagehide_event) *)
  val set_onpagehide: 'tags this -> (this:t -> ev:PageTransitionEvent.t -> any) option -> unit [@@js.set "onpagehide"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/pageshow_event) *)
  val get_onpageshow: 'tags this -> (this:t -> ev:PageTransitionEvent.t -> any) option [@@js.get "onpageshow"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/pageshow_event) *)
  val set_onpageshow: 'tags this -> (this:t -> ev:PageTransitionEvent.t -> any) option -> unit [@@js.set "onpageshow"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/popstate_event) *)
  val get_onpopstate: 'tags this -> (this:t -> ev:PopStateEvent.t -> any) option [@@js.get "onpopstate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/popstate_event) *)
  val set_onpopstate: 'tags this -> (this:t -> ev:PopStateEvent.t -> any) option -> unit [@@js.set "onpopstate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/rejectionhandled_event) *)
  val get_onrejectionhandled: 'tags this -> (this:t -> ev:PromiseRejectionEvent.t -> any) option [@@js.get "onrejectionhandled"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/rejectionhandled_event) *)
  val set_onrejectionhandled: 'tags this -> (this:t -> ev:PromiseRejectionEvent.t -> any) option -> unit [@@js.set "onrejectionhandled"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/storage_event) *)
  val get_onstorage: 'tags this -> (this:t -> ev:StorageEvent.t -> any) option [@@js.get "onstorage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/storage_event) *)
  val set_onstorage: 'tags this -> (this:t -> ev:StorageEvent.t -> any) option -> unit [@@js.set "onstorage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/unhandledrejection_event) *)
  val get_onunhandledrejection: 'tags this -> (this:t -> ev:PromiseRejectionEvent.t -> any) option [@@js.get "onunhandledrejection"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/unhandledrejection_event) *)
  val set_onunhandledrejection: 'tags this -> (this:t -> ev:PromiseRejectionEvent.t -> any) option -> unit [@@js.set "onunhandledrejection"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/unload_event) *)
  val get_onunload: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onunload"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/unload_event) *)
  val set_onunload: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onunload"]
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'WindowEventHandlersEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'WindowEventHandlersEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
and WindowOrWorkerGlobalScope : sig
  type t = [`WindowOrWorkerGlobalScope] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WindowOrWorkerGlobalScope]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WindowOrWorkerGlobalScope]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WindowOrWorkerGlobalScope ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/caches)
  *)
  val get_caches: 'tags this -> CacheStorage.t [@@js.get "caches"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/crossOriginIsolated) *)
  val get_crossOriginIsolated: 'tags this -> bool [@@js.get "crossOriginIsolated"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/crypto_property) *)
  val get_crypto: 'tags this -> Crypto.t [@@js.get "crypto"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/indexedDB) *)
  val get_indexedDB: 'tags this -> IDBFactory.t [@@js.get "indexedDB"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/isSecureContext) *)
  val get_isSecureContext: 'tags this -> bool [@@js.get "isSecureContext"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/origin) *)
  val get_origin: 'tags this -> string [@@js.get "origin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/performance_property) *)
  val get_performance: 'tags this -> Performance.t [@@js.get "performance"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/atob) *)
  val atob: 'tags this -> data:string -> string [@@js.call "atob"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/btoa) *)
  val btoa: 'tags this -> data:string -> string [@@js.call "btoa"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/clearInterval) *)
  val clearInterval: 'tags this -> id:([`Undefined of undefined | `U1 of float] [@js.union]) -> unit [@@js.call "clearInterval"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/clearTimeout) *)
  val clearTimeout: 'tags this -> id:([`Undefined of undefined | `U1 of float] [@js.union]) -> unit [@@js.call "clearTimeout"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/createImageBitmap) *)
  val createImageBitmap: 'tags this -> image:ImageBitmapSource.t -> ?options:ImageBitmapOptions.t -> unit -> ImageBitmap.t Promise.t [@@js.call "createImageBitmap"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/createImageBitmap) *)
  val createImageBitmap': 'tags this -> image:ImageBitmapSource.t -> sx:float -> sy:float -> sw:float -> sh:float -> ?options:ImageBitmapOptions.t -> unit -> ImageBitmap.t Promise.t [@@js.call "createImageBitmap"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/fetch) *)
  val fetch: 'tags this -> input:([`U1 of RequestInfo.t | `U2 of URL.t] [@js.union]) -> ?init:RequestInit.t -> unit -> Response.t Promise.t [@@js.call "fetch"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/queueMicrotask) *)
  val queueMicrotask: 'tags this -> callback:VoidFunction.t -> unit [@@js.call "queueMicrotask"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/reportError) *)
  val reportError: 'tags this -> e:any -> unit [@@js.call "reportError"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/setInterval) *)
  val setInterval: 'tags this -> handler:TimerHandler.t -> ?timeout:float -> arguments:(any list [@js.variadic]) -> unit -> float [@@js.call "setInterval"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/setTimeout) *)
  val setTimeout: 'tags this -> handler:TimerHandler.t -> ?timeout:float -> arguments:(any list [@js.variadic]) -> unit -> float [@@js.call "setTimeout"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/structuredClone) *)
  val structuredClone: 'tags this -> value:'T -> ?options:StructuredSerializeOptions.t -> unit -> 'T [@@js.call "structuredClone"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
and WindowPostMessageOptions : sig
  type t = [`StructuredSerializeOptions | `WindowPostMessageOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`StructuredSerializeOptions | `WindowPostMessageOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`StructuredSerializeOptions | `WindowPostMessageOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WindowPostMessageOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_targetOrigin: 'tags this -> string option [@@js.get "targetOrigin"]
  val set_targetOrigin: 'tags this -> string -> unit [@@js.set "targetOrigin"]
  val create: ?targetOrigin:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
and WindowProxy : sig
  type t = Window.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  This Web Workers API interface represents a background task that can be easily created and can send messages back to its creator. Creating a worker is as simple as calling the Worker() constructor and specifying a script to be run in the worker thread.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Worker)
*)
and[@js.scope "Worker"] Worker : sig
  type t = [`AbstractWorker | `EventTarget | `Worker] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AbstractWorker | `EventTarget | `Worker]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AbstractWorker | `EventTarget | `Worker]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Worker ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Worker/message_event) *)
  val get_onmessage: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option [@@js.get "onmessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Worker/message_event) *)
  val set_onmessage: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit [@@js.set "onmessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Worker/messageerror_event) *)
  val get_onmessageerror: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option [@@js.get "onmessageerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Worker/messageerror_event) *)
  val set_onmessageerror: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit [@@js.set "onmessageerror"]
  
  (**
    Clones message and transmits it to worker's global environment. transfer can be passed as a list of objects that are to be transferred rather than cloned.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Worker/postMessage)
  *)
  val postMessage: 'tags this -> message:any -> transfer:Transferable.t list -> unit [@@js.call "postMessage"]
  
  (**
    Clones message and transmits it to worker's global environment. transfer can be passed as a list of objects that are to be transferred rather than cloned.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Worker/postMessage)
  *)
  val postMessage': 'tags this -> message:any -> ?options:StructuredSerializeOptions.t -> unit -> unit [@@js.call "postMessage"]
  
  (**
    Aborts worker's associated global environment.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Worker/terminate)
  *)
  val terminate: 'tags this -> unit [@@js.call "terminate"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'WorkerEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'WorkerEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: scriptURL:([`U1 of string | `U2 of URL.t] [@js.union]) -> ?options:WorkerOptions.t -> unit -> t [@@js.create]
end

(**
  An XML document. It inherits from the generic Document and does not add any specific methods or properties to it: nevertheless, several algorithms behave differently with the two types of documents.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLDocument)
*)
and[@js.scope "XMLDocument"] XMLDocument : sig
  type t = [`Document | `DocumentOrShadowRoot | `EventTarget | `FontFaceSource | `GlobalEventHandlers | `Node | `NonElementParentNode | `ParentNode | `XMLDocument | `XPathEvaluatorBase] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Document | `DocumentOrShadowRoot | `EventTarget | `FontFaceSource | `GlobalEventHandlers | `Node | `NonElementParentNode | `ParentNode | `XMLDocument | `XPathEvaluatorBase]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Document | `DocumentOrShadowRoot | `EventTarget | `FontFaceSource | `GlobalEventHandlers | `Node | `NonElementParentNode | `ParentNode | `XMLDocument | `XPathEvaluatorBase]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `XMLDocument ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'DocumentEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'DocumentEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
and XMLHttpRequestBodyInit : sig
  type t = ([`String of string | `Other of (Blob.t, BufferSource.t, FormData.t, URLSearchParams.t) union4] [@js.union on_field "dummy"]) Primitive.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
and XPathEvaluatorBase : sig
  type t = [`XPathEvaluatorBase] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`XPathEvaluatorBase]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`XPathEvaluatorBase]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `XPathEvaluatorBase ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createExpression) *)
  val createExpression: 'tags this -> expression:string -> ?resolver:XPathNSResolver.t option -> unit -> XPathExpression.t [@@js.call "createExpression"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createNSResolver) *)
  val createNSResolver: 'tags this -> nodeResolver:Node.t -> Node.t [@@js.call "createNSResolver"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/evaluate) *)
  val evaluate: 'tags this -> expression:string -> contextNode:Node.t -> ?resolver:XPathNSResolver.t option -> ?type_:float -> ?result:XPathResult.t option -> unit -> XPathResult.t [@@js.call "evaluate"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  This interface is a compiled XPath expression that can be evaluated on a document or specific node to return information its DOM tree.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XPathExpression)
*)
and[@js.scope "XPathExpression"] XPathExpression : sig
  type t = [`XPathExpression] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`XPathExpression]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`XPathExpression]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `XPathExpression ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XPathExpression/evaluate) *)
  val evaluate: 'tags this -> contextNode:Node.t -> ?type_:float -> ?result:XPathResult.t option -> unit -> XPathResult.t [@@js.call "evaluate"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  The results generated by evaluating an XPath expression within the context of a given node.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XPathResult)
*)
and[@js.scope "XPathResult"] XPathResult : sig
  type t = [`XPathResult] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`XPathResult]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`XPathResult]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `XPathResult ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XPathResult/booleanValue) *)
  val get_booleanValue: 'tags this -> bool [@@js.get "booleanValue"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XPathResult/invalidIteratorState) *)
  val get_invalidIteratorState: 'tags this -> bool [@@js.get "invalidIteratorState"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XPathResult/numberValue) *)
  val get_numberValue: 'tags this -> float [@@js.get "numberValue"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XPathResult/resultType) *)
  val get_resultType: 'tags this -> float [@@js.get "resultType"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XPathResult/singleNodeValue) *)
  val get_singleNodeValue: 'tags this -> Node.t option [@@js.get "singleNodeValue"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XPathResult/snapshotLength) *)
  val get_snapshotLength: 'tags this -> float [@@js.get "snapshotLength"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XPathResult/stringValue) *)
  val get_stringValue: 'tags this -> string [@@js.get "stringValue"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XPathResult/iterateNext) *)
  val iterateNext: 'tags this -> Node.t option [@@js.call "iterateNext"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XPathResult/snapshotItem) *)
  val snapshotItem: 'tags this -> index:float -> Node.t option [@@js.call "snapshotItem"]
  val get_ANY_TYPE: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "ANY_TYPE"]
  val get_NUMBER_TYPE: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "NUMBER_TYPE"]
  val get_STRING_TYPE: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "STRING_TYPE"]
  val get_BOOLEAN_TYPE: 'tags this -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "BOOLEAN_TYPE"]
  val get_UNORDERED_NODE_ITERATOR_TYPE: 'tags this -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "UNORDERED_NODE_ITERATOR_TYPE"]
  val get_ORDERED_NODE_ITERATOR_TYPE: 'tags this -> ([`L_n_5[@js 5]] [@js.enum]) [@@js.get "ORDERED_NODE_ITERATOR_TYPE"]
  val get_UNORDERED_NODE_SNAPSHOT_TYPE: 'tags this -> ([`L_n_6[@js 6]] [@js.enum]) [@@js.get "UNORDERED_NODE_SNAPSHOT_TYPE"]
  val get_ORDERED_NODE_SNAPSHOT_TYPE: 'tags this -> ([`L_n_7[@js 7]] [@js.enum]) [@@js.get "ORDERED_NODE_SNAPSHOT_TYPE"]
  val get_ANY_UNORDERED_NODE_TYPE: 'tags this -> ([`L_n_8[@js 8]] [@js.enum]) [@@js.get "ANY_UNORDERED_NODE_TYPE"]
  val get_FIRST_ORDERED_NODE_TYPE: 'tags this -> ([`L_n_9[@js 9]] [@js.enum]) [@@js.get "FIRST_ORDERED_NODE_TYPE"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  val any_type: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "ANY_TYPE"]
  val number_type: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "NUMBER_TYPE"]
  val string_type: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "STRING_TYPE"]
  val boolean_type: unit -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "BOOLEAN_TYPE"]
  val unordered_node_iterator_type: unit -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "UNORDERED_NODE_ITERATOR_TYPE"]
  val ordered_node_iterator_type: unit -> ([`L_n_5[@js 5]] [@js.enum]) [@@js.get "ORDERED_NODE_ITERATOR_TYPE"]
  val unordered_node_snapshot_type: unit -> ([`L_n_6[@js 6]] [@js.enum]) [@@js.get "UNORDERED_NODE_SNAPSHOT_TYPE"]
  val ordered_node_snapshot_type: unit -> ([`L_n_7[@js 7]] [@js.enum]) [@@js.get "ORDERED_NODE_SNAPSHOT_TYPE"]
  val any_unordered_node_type: unit -> ([`L_n_8[@js 8]] [@js.enum]) [@@js.get "ANY_UNORDERED_NODE_TYPE"]
  val first_ordered_node_type: unit -> ([`L_n_9[@js 9]] [@js.enum]) [@@js.get "FIRST_ORDERED_NODE_TYPE"]
end
module[@js.scope "navigator"] NavigatorStatic : sig
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/requestMediaKeySystemAccess)
  *)
  val requestMediaKeySystemAccess: keySystem:string -> supportedConfigurations:MediaKeySystemConfiguration.t Iterable.t -> MediaKeySystemAccess.t Promise.t [@@js.global "requestMediaKeySystemAccess"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/vibrate) *)
  val vibrate: float Iterable.t -> bool [@@js.global "vibrate"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/clipboard)
  *)
  val clipboard: unit -> Clipboard.t [@@js.get "clipboard"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/credentials)
  *)
  val credentials: unit -> CredentialsContainer.t [@@js.get "credentials"]
  val doNotTrack: unit -> string option [@@js.get "doNotTrack"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/geolocation) *)
  val geolocation: unit -> Geolocation.t [@@js.get "geolocation"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/maxTouchPoints) *)
  val maxTouchPoints: unit -> float [@@js.get "maxTouchPoints"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/mediaCapabilities) *)
  val mediaCapabilities: unit -> MediaCapabilities.t [@@js.get "mediaCapabilities"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/mediaDevices)
  *)
  val mediaDevices: unit -> MediaDevices.t [@@js.get "mediaDevices"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/mediaSession) *)
  val mediaSession: unit -> MediaSession.t [@@js.get "mediaSession"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/permissions) *)
  val permissions: unit -> Permissions.t [@@js.get "permissions"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/serviceWorker)
  *)
  val serviceWorker: unit -> ServiceWorkerContainer.t [@@js.get "serviceWorker"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/userActivation) *)
  val userActivation: unit -> UserActivation.t [@@js.get "userActivation"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/wakeLock) *)
  val wakeLock: unit -> WakeLock.t [@@js.get "wakeLock"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/canShare)
  *)
  val canShare: ?data:ShareData.t -> unit -> bool [@@js.global "canShare"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/getGamepads) *)
  val getGamepads: unit -> Gamepad.t option list [@@js.global "getGamepads"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/requestMIDIAccess)
  *)
  val requestMIDIAccess: ?options:MIDIOptions.t -> unit -> MIDIAccess.t Promise.t [@@js.global "requestMIDIAccess"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/requestMediaKeySystemAccess)
  *)
  val requestMediaKeySystemAccess': keySystem:string -> supportedConfigurations:MediaKeySystemConfiguration.t list -> MediaKeySystemAccess.t Promise.t [@@js.global "requestMediaKeySystemAccess"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/sendBeacon) *)
  val sendBeacon: url:([`U1 of string | `U2 of URL.t] [@js.union]) -> ?data:BodyInit.t option -> unit -> bool [@@js.global "sendBeacon"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/share)
  *)
  val share: ?data:ShareData.t -> unit -> unit Promise.t [@@js.global "share"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/vibrate) *)
  val vibrate': VibratePattern.t -> bool [@@js.global "vibrate"]
end
module[@js.scope "menubar"] MenubarStatic : sig
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BarProp/visible) *)
  val visible: unit -> bool [@@js.get "visible"]
end
module[@js.scope "locationbar"] LocationbarStatic : sig
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BarProp/visible) *)
  val visible: unit -> bool [@@js.get "visible"]
end
module[@js.scope "location"] LocationStatic : sig
  
  (**
    Returns a DOMStringList object listing the origins of the ancestor browsing contexts, from the parent browsing context to the top-level browsing context.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Location/ancestorOrigins)
  *)
  val ancestorOrigins: unit -> DOMStringList.t [@@js.get "ancestorOrigins"]
  
  (**
    Returns the Location object's URL's fragment (includes leading "#" if non-empty).
    
    Can be set, to navigate to the same URL with a changed fragment (ignores leading "#").
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Location/hash)
  *)
  val hash: unit -> string [@@js.get "hash"]
  
  (**
    Returns the Location object's URL's host and port (if different from the default port for the scheme).
    
    Can be set, to navigate to the same URL with a changed host and port.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Location/host)
  *)
  val host: unit -> string [@@js.get "host"]
  
  (**
    Returns the Location object's URL's host.
    
    Can be set, to navigate to the same URL with a changed host.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Location/hostname)
  *)
  val hostname: unit -> string [@@js.get "hostname"]
  
  (**
    Returns the Location object's URL.
    
    Can be set, to navigate to the given URL.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Location/href)
  *)
  val href: unit -> string [@@js.get "href"]
  val toString: unit -> string [@@js.global "toString"]
  
  (**
    Returns the Location object's URL's origin.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Location/origin)
  *)
  val origin: unit -> string [@@js.get "origin"]
  
  (**
    Returns the Location object's URL's path.
    
    Can be set, to navigate to the same URL with a changed path.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Location/pathname)
  *)
  val pathname: unit -> string [@@js.get "pathname"]
  
  (**
    Returns the Location object's URL's port.
    
    Can be set, to navigate to the same URL with a changed port.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Location/port)
  *)
  val port: unit -> string [@@js.get "port"]
  
  (**
    Returns the Location object's URL's scheme.
    
    Can be set, to navigate to the same URL with a changed scheme.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Location/protocol)
  *)
  val protocol: unit -> string [@@js.get "protocol"]
  
  (**
    Returns the Location object's URL's query (includes leading "?" if non-empty).
    
    Can be set, to navigate to the same URL with a changed query (ignores leading "?").
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Location/search)
  *)
  val search: unit -> string [@@js.get "search"]
  
  (**
    Navigates to the given URL.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Location/assign)
  *)
  val assign: ([`U1 of string | `U2 of URL.t] [@js.union]) -> unit [@@js.global "assign"]
  
  (**
    Reloads the current page.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Location/reload)
  *)
  val reload: unit -> unit [@@js.global "reload"]
  
  (**
    Removes the current page from the session history and navigates to the given URL.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Location/replace)
  *)
  val replace: ([`U1 of string | `U2 of URL.t] [@js.union]) -> unit [@@js.global "replace"]
end
module[@js.scope "localStorage"] LocalStorageStatic : sig
  
  (**
    Returns the number of key/value pairs.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Storage/length)
  *)
  val length: unit -> float [@@js.get "length"]
  
  (**
    Removes all key/value pairs, if there are any.
    
    Dispatches a storage event on Window objects holding an equivalent Storage object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Storage/clear)
  *)
  val clear: unit -> unit [@@js.global "clear"]
  
  (**
    Returns the current value associated with the given key, or null if the given key does not exist.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Storage/getItem)
  *)
  val getItem: string -> string option [@@js.global "getItem"]
  
  (**
    Returns the name of the nth key, or null if n is greater than or equal to the number of key/value pairs.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Storage/key)
  *)
  val key: float -> string option [@@js.global "key"]
  
  (**
    Removes the key/value pair with the given key, if a key/value pair with the given key exists.
    
    Dispatches a storage event on Window objects holding an equivalent Storage object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Storage/removeItem)
  *)
  val removeItem: string -> unit [@@js.global "removeItem"]
  
  (**
    Sets the value of the pair identified by key to value, creating a new key/value pair if none existed for key previously.
    
    Throws a "QuotaExceededError" DOMException exception if the new value couldn't be set. (Setting could fail if, e.g., the user has disabled storage for the site, or if the quota has been exceeded.)
    
    Dispatches a storage event on Window objects holding an equivalent Storage object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Storage/setItem)
  *)
  val setItem: key:string -> value:string -> unit [@@js.global "setItem"]
  (* unsupported indexer of type: (~name:String -> Any) *)
end
module[@js.scope "indexedDB"] IndexedDBStatic : sig
  
  (**
    Compares two values as keys. Returns -1 if key1 precedes key2, 1 if key2 precedes key1, and 0 if the keys are equal.
    
    Throws a "DataError" DOMException if either input is not a valid key.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBFactory/cmp)
  *)
  val cmp: first:any -> second:any -> float [@@js.global "cmp"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBFactory/databases) *)
  val databases: unit -> IDBDatabaseInfo.t list Promise.t [@@js.global "databases"]
  
  (**
    Attempts to delete the named database. If the database already exists and there are open connections that don't close in response to a versionchange event, the request will be blocked until all they close. If the request is successful request's result will be null.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBFactory/deleteDatabase)
  *)
  val deleteDatabase: string -> IDBOpenDBRequest.t [@@js.global "deleteDatabase"]
  
  (**
    Attempts to open a connection to the named database with the current version, or 1 if it does not already exist. If the request is successful request's result will be the connection.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBFactory/open)
  *)
  val open_: name:string -> ?version:float -> unit -> IDBOpenDBRequest.t [@@js.global "open"]
end
module[@js.scope "history"] HistoryStatic : sig
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/History/length) *)
  val length: unit -> float [@@js.get "length"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/History/scrollRestoration) *)
  val scrollRestoration: unit -> ScrollRestoration.t [@@js.get "scrollRestoration"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/History/state) *)
  val state: unit -> any [@@js.get "state"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/History/back) *)
  val back: unit -> unit [@@js.global "back"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/History/forward) *)
  val forward: unit -> unit [@@js.global "forward"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/History/go) *)
  val go: ?delta:float -> unit -> unit [@@js.global "go"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/History/pushState) *)
  val pushState: data:any -> unused:string -> ?url:([`Null | `U1 of string | `U2 of URL.t] [@js.union]) -> unit -> unit [@@js.global "pushState"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/History/replaceState) *)
  val replaceState: data:any -> unused:string -> ?url:([`Null | `U1 of string | `U2 of URL.t] [@js.union]) -> unit -> unit [@@js.global "replaceState"]
end
module[@js.scope "external"] ExternalStatic : sig
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/External/AddSearchProvider) *)
  val addSearchProvider: unit -> unit [@@js.global "AddSearchProvider"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/External/IsSearchProviderInstalled) *)
  val isSearchProviderInstalled: unit -> unit [@@js.global "IsSearchProviderInstalled"]
end
module[@js.scope "document"] DocumentStatic : sig
  
  (**
    Sets or gets the URL for the current document.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/URL)
  *)
  val url: unit -> string [@@js.get "URL"]
  
  (**
    Sets or gets the color of all active links in the document.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/alinkColor)
  *)
  val alinkColor: unit -> string [@@js.get "alinkColor"]
  
  (**
    Returns a reference to the collection of elements contained by the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/all)
  *)
  val all: unit -> HTMLAllCollection.t [@@js.get "all"]
  
  (**
    Retrieves a collection of all a objects that have a name and/or id property. Objects in this collection are in HTML source order.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/anchors)
  *)
  val anchors: unit -> HTMLAnchorElement.t HTMLCollectionOf.t [@@js.get "anchors"]
  
  (**
    Retrieves a collection of all applet objects in the document.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/applets)
  *)
  val applets: unit -> HTMLCollection.t [@@js.get "applets"]
  
  (**
    Deprecated. Sets or retrieves a value that indicates the background color behind the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/bgColor)
  *)
  val bgColor: unit -> string [@@js.get "bgColor"]
  
  (**
    Specifies the beginning and end of the document body.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/body)
  *)
  val body: unit -> HTMLElement.t [@@js.get "body"]
  
  (**
    Returns document's encoding.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/characterSet)
  *)
  val characterSet: unit -> string [@@js.get "characterSet"]
  
  (**
    Gets or sets the character set used to encode the object.
    @deprecated This is a legacy alias of `characterSet`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/characterSet)
  *)
  val charset: unit -> string [@@js.get "charset"]
  
  (**
    Gets a value that indicates whether standards-compliant mode is switched on for the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/compatMode)
  *)
  val compatMode: unit -> string [@@js.get "compatMode"]
  
  (**
    Returns document's content type.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/contentType)
  *)
  val contentType: unit -> string [@@js.get "contentType"]
  
  (**
    Returns the HTTP cookies that apply to the Document. If there are no cookies or cookies can't be applied to this resource, the empty string will be returned.
    
    Can be set, to add a new cookie to the element's set of HTTP cookies.
    
    If the contents are sandboxed into a unique origin (e.g. in an iframe with the sandbox attribute), a "SecurityError" DOMException will be thrown on getting and setting.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/cookie)
  *)
  val cookie: unit -> string [@@js.get "cookie"]
  
  (**
    Returns the script element, or the SVG script element, that is currently executing, as long as the element represents a classic script. In the case of reentrant script execution, returns the one that most recently started executing amongst those that have not yet finished executing.
    
    Returns null if the Document is not currently executing a script or SVG script element (e.g., because the running script is an event handler, or a timeout), or if the currently executing script or SVG script element represents a module script.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/currentScript)
  *)
  val currentScript: unit -> HTMLOrSVGScriptElement.t option [@@js.get "currentScript"]
  
  (**
    Returns the Window object of the active document.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/defaultView)
  *)
  val defaultView: unit -> (WindowProxy.t, (* FIXME: unknown type 'typeof globalThis' *)any) intersection2 option [@@js.get "defaultView"]
  
  (**
    Sets or gets a value that indicates whether the document can be edited.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/designMode)
  *)
  val designMode: unit -> string [@@js.get "designMode"]
  
  (**
    Sets or retrieves a value that indicates the reading order of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/dir)
  *)
  val dir: unit -> string [@@js.get "dir"]
  
  (**
    Gets an object representing the document type declaration associated with the current document.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/doctype)
  *)
  val doctype: unit -> DocumentType.t option [@@js.get "doctype"]
  
  (**
    Gets a reference to the root node of the document.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/documentElement)
  *)
  val documentElement: unit -> HTMLElement.t [@@js.get "documentElement"]
  
  (**
    Returns document's URL.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/documentURI)
  *)
  val documentURI: unit -> string [@@js.get "documentURI"]
  
  (**
    Sets or gets the security domain of the document.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/domain)
  *)
  val domain: unit -> string [@@js.get "domain"]
  
  (**
    Retrieves a collection of all embed objects in the document.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/embeds)
  *)
  val embeds: unit -> HTMLEmbedElement.t HTMLCollectionOf.t [@@js.get "embeds"]
  
  (**
    Sets or gets the foreground (text) color of the document.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/fgColor)
  *)
  val fgColor: unit -> string [@@js.get "fgColor"]
  
  (**
    Retrieves a collection, in source order, of all form objects in the document.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/forms)
  *)
  val forms: unit -> HTMLFormElement.t HTMLCollectionOf.t [@@js.get "forms"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/fullscreen) *)
  val fullscreen: unit -> bool [@@js.get "fullscreen"]
  
  (**
    Returns true if document has the ability to display elements fullscreen and fullscreen is supported, or false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/fullscreenEnabled)
  *)
  val fullscreenEnabled: unit -> bool [@@js.get "fullscreenEnabled"]
  
  (**
    Returns the head element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/head)
  *)
  val head: unit -> HTMLHeadElement.t [@@js.get "head"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/hidden) *)
  val hidden: unit -> bool [@@js.get "hidden"]
  
  (**
    Retrieves a collection, in source order, of img objects in the document.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/images)
  *)
  val images: unit -> HTMLImageElement.t HTMLCollectionOf.t [@@js.get "images"]
  
  (**
    Gets the implementation object of the current document.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/implementation)
  *)
  val implementation: unit -> DOMImplementation.t [@@js.get "implementation"]
  
  (**
    Returns the character encoding used to create the webpage that is loaded into the document object.
    @deprecated This is a legacy alias of `characterSet`.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/characterSet)
  *)
  val inputEncoding: unit -> string [@@js.get "inputEncoding"]
  
  (**
    Gets the date that the page was last modified, if the page supplies one.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/lastModified)
  *)
  val lastModified: unit -> string [@@js.get "lastModified"]
  
  (**
    Sets or gets the color of the document links.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/linkColor)
  *)
  val linkColor: unit -> string [@@js.get "linkColor"]
  
  (**
    Retrieves a collection of all a objects that specify the href property and all area objects in the document.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/links)
  *)
  val links: unit -> (HTMLAnchorElement.t, HTMLAreaElement.t) union2 HTMLCollectionOf.t [@@js.get "links"]
  
  (**
    Contains information about the current URL.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/location)
  *)
  val location: unit -> Location.t [@@js.get "location"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/fullscreenchange_event) *)
  val onfullscreenchange: unit -> (this:Document.t -> ev:Event.t -> any) option [@@js.get "onfullscreenchange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/fullscreenerror_event) *)
  val onfullscreenerror: unit -> (this:Document.t -> ev:Event.t -> any) option [@@js.get "onfullscreenerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/pointerlockchange_event) *)
  val onpointerlockchange: unit -> (this:Document.t -> ev:Event.t -> any) option [@@js.get "onpointerlockchange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/pointerlockerror_event) *)
  val onpointerlockerror: unit -> (this:Document.t -> ev:Event.t -> any) option [@@js.get "onpointerlockerror"]
  
  (**
    Fires when the state of the object has changed.
    @param ev The event
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/readystatechange_event)
  *)
  val onreadystatechange: unit -> (this:Document.t -> ev:Event.t -> any) option [@@js.get "onreadystatechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/visibilitychange_event) *)
  val onvisibilitychange: unit -> (this:Document.t -> ev:Event.t -> any) option [@@js.get "onvisibilitychange"]
  
  (**
    Returns the node document. Returns null for documents.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/ownerDocument)
  *)
  val ownerDocument: unit -> null [@@js.get "ownerDocument"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/pictureInPictureEnabled) *)
  val pictureInPictureEnabled: unit -> bool [@@js.get "pictureInPictureEnabled"]
  
  (**
    Return an HTMLCollection of the embed elements in the Document.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/plugins)
  *)
  val plugins: unit -> HTMLEmbedElement.t HTMLCollectionOf.t [@@js.get "plugins"]
  
  (**
    Retrieves a value that indicates the current state of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/readyState)
  *)
  val readyState: unit -> DocumentReadyState.t [@@js.get "readyState"]
  
  (**
    Gets the URL of the location that referred the user to the current page.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/referrer)
  *)
  val referrer: unit -> string [@@js.get "referrer"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/rootElement) *)
  val rootElement: unit -> SVGSVGElement.t option [@@js.get "rootElement"]
  
  (**
    Retrieves a collection of all script objects in the document.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/scripts)
  *)
  val scripts: unit -> HTMLScriptElement.t HTMLCollectionOf.t [@@js.get "scripts"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/scrollingElement) *)
  val scrollingElement: unit -> Element.t option [@@js.get "scrollingElement"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/timeline) *)
  val timeline: unit -> DocumentTimeline.t [@@js.get "timeline"]
  
  (**
    Contains the title of the document.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/title)
  *)
  val title: unit -> string [@@js.get "title"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/visibilityState) *)
  val visibilityState: unit -> DocumentVisibilityState.t [@@js.get "visibilityState"]
  
  (**
    Sets or gets the color of the links that the user has visited.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/vlinkColor)
  *)
  val vlinkColor: unit -> string [@@js.get "vlinkColor"]
  
  (**
    Moves node from another document and returns it.
    
    If node is a document, throws a "NotSupportedError" DOMException or, if node is a shadow root, throws a "HierarchyRequestError" DOMException.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/adoptNode)
  *)
  val adoptNode: 'T -> 'T [@@js.global "adoptNode"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/captureEvents) *)
  val captureEvents: unit -> unit [@@js.global "captureEvents"]
  
  (** @deprecated  *)
  val caretRangeFromPoint: x:float -> y:float -> Range.t option [@@js.global "caretRangeFromPoint"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/clear) *)
  val clear: unit -> unit [@@js.global "clear"]
  
  (**
    Closes an output stream and forces the sent data to display.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/close)
  *)
  val close: unit -> unit [@@js.global "close"]
  
  (**
    Creates an attribute object with a specified name.
    @param name String that sets the attribute object's name.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createAttribute)
  *)
  val createAttribute: string -> Attr.t [@@js.global "createAttribute"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createAttributeNS) *)
  val createAttributeNS: namespace:string option -> qualifiedName:string -> Attr.t [@@js.global "createAttributeNS"]
  
  (**
    Returns a CDATASection node whose data is data.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createCDATASection)
  *)
  val createCDATASection: string -> CDATASection.t [@@js.global "createCDATASection"]
  
  (**
    Creates a comment object with the specified data.
    @param data Sets the comment object's data.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createComment)
  *)
  val createComment: string -> Comment.t [@@js.global "createComment"]
  
  (**
    Creates a new document.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createDocumentFragment)
  *)
  val createDocumentFragment: unit -> DocumentFragment.t [@@js.global "createDocumentFragment"]
  
  (**
    Creates an instance of the element for the specified tag.
    @param tagName The name of an element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createElement)
  *)
  val createElement: tagName:'K -> ?options:ElementCreationOptions.t -> unit -> (* FIXME: unknown type 'HTMLElementTagNameMap[K]' *)any [@@js.global "createElement"]
  
  (** @deprecated  *)
  val createElement': tagName:'K -> ?options:ElementCreationOptions.t -> unit -> (* FIXME: unknown type 'HTMLElementDeprecatedTagNameMap[K]' *)any [@@js.global "createElement"]
  
  (** Creates an instance of the element for the specified tag. *)
  val createElement'': tagName:string -> ?options:ElementCreationOptions.t -> unit -> HTMLElement.t [@@js.global "createElement"]
  
  (**
    Returns an element with namespace namespace. Its namespace prefix will be everything before ":" (U+003E) in qualifiedName or null. Its local name will be everything after ":" (U+003E) in qualifiedName or qualifiedName.
    
    If localName does not match the Name production an "InvalidCharacterError" DOMException will be thrown.
    
    If one of the following conditions is true a "NamespaceError" DOMException will be thrown:
    
    localName does not match the QName production.
    Namespace prefix is not null and namespace is the empty string.
    Namespace prefix is "xml" and namespace is not the XML namespace.
    qualifiedName or namespace prefix is "xmlns" and namespace is not the XMLNS namespace.
    namespace is the XMLNS namespace and neither qualifiedName nor namespace prefix is "xmlns".
    
    When supplied, options's is can be used to create a customized built-in element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createElementNS)
  *)
  val createElementNS: namespaceURI:([`L_s492_http___www_w3_org_1999_xhtml[@js "http://www.w3.org/1999/xhtml"]] [@js.enum]) -> qualifiedName:string -> HTMLElement.t [@@js.global "createElementNS"]
  
  (**
    Returns an element with namespace namespace. Its namespace prefix will be everything before ":" (U+003E) in qualifiedName or null. Its local name will be everything after ":" (U+003E) in qualifiedName or qualifiedName.
    
    If localName does not match the Name production an "InvalidCharacterError" DOMException will be thrown.
    
    If one of the following conditions is true a "NamespaceError" DOMException will be thrown:
    
    localName does not match the QName production.
    Namespace prefix is not null and namespace is the empty string.
    Namespace prefix is "xml" and namespace is not the XML namespace.
    qualifiedName or namespace prefix is "xmlns" and namespace is not the XMLNS namespace.
    namespace is the XMLNS namespace and neither qualifiedName nor namespace prefix is "xmlns".
    
    When supplied, options's is can be used to create a customized built-in element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createElementNS)
  *)
  val createElementNS': namespaceURI:([`L_s493_http___www_w3_org_2000_svg[@js "http://www.w3.org/2000/svg"]] [@js.enum]) -> qualifiedName:'K -> (* FIXME: unknown type 'SVGElementTagNameMap[K]' *)any [@@js.global "createElementNS"]
  
  (**
    Returns an element with namespace namespace. Its namespace prefix will be everything before ":" (U+003E) in qualifiedName or null. Its local name will be everything after ":" (U+003E) in qualifiedName or qualifiedName.
    
    If localName does not match the Name production an "InvalidCharacterError" DOMException will be thrown.
    
    If one of the following conditions is true a "NamespaceError" DOMException will be thrown:
    
    localName does not match the QName production.
    Namespace prefix is not null and namespace is the empty string.
    Namespace prefix is "xml" and namespace is not the XML namespace.
    qualifiedName or namespace prefix is "xmlns" and namespace is not the XMLNS namespace.
    namespace is the XMLNS namespace and neither qualifiedName nor namespace prefix is "xmlns".
    
    When supplied, options's is can be used to create a customized built-in element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createElementNS)
  *)
  val createElementNS'': namespaceURI:([`L_s493_http___www_w3_org_2000_svg[@js "http://www.w3.org/2000/svg"]] [@js.enum]) -> qualifiedName:string -> SVGElement.t [@@js.global "createElementNS"]
  
  (**
    Returns an element with namespace namespace. Its namespace prefix will be everything before ":" (U+003E) in qualifiedName or null. Its local name will be everything after ":" (U+003E) in qualifiedName or qualifiedName.
    
    If localName does not match the Name production an "InvalidCharacterError" DOMException will be thrown.
    
    If one of the following conditions is true a "NamespaceError" DOMException will be thrown:
    
    localName does not match the QName production.
    Namespace prefix is not null and namespace is the empty string.
    Namespace prefix is "xml" and namespace is not the XML namespace.
    qualifiedName or namespace prefix is "xmlns" and namespace is not the XMLNS namespace.
    namespace is the XMLNS namespace and neither qualifiedName nor namespace prefix is "xmlns".
    
    When supplied, options's is can be used to create a customized built-in element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createElementNS)
  *)
  val createElementNS''': namespaceURI:([`L_s491_http___www_w3_org_1998_Math_MathML[@js "http://www.w3.org/1998/Math/MathML"]] [@js.enum]) -> qualifiedName:'K -> (* FIXME: unknown type 'MathMLElementTagNameMap[K]' *)any [@@js.global "createElementNS"]
  
  (**
    Returns an element with namespace namespace. Its namespace prefix will be everything before ":" (U+003E) in qualifiedName or null. Its local name will be everything after ":" (U+003E) in qualifiedName or qualifiedName.
    
    If localName does not match the Name production an "InvalidCharacterError" DOMException will be thrown.
    
    If one of the following conditions is true a "NamespaceError" DOMException will be thrown:
    
    localName does not match the QName production.
    Namespace prefix is not null and namespace is the empty string.
    Namespace prefix is "xml" and namespace is not the XML namespace.
    qualifiedName or namespace prefix is "xmlns" and namespace is not the XMLNS namespace.
    namespace is the XMLNS namespace and neither qualifiedName nor namespace prefix is "xmlns".
    
    When supplied, options's is can be used to create a customized built-in element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createElementNS)
  *)
  val createElementNS'''': namespaceURI:([`L_s491_http___www_w3_org_1998_Math_MathML[@js "http://www.w3.org/1998/Math/MathML"]] [@js.enum]) -> qualifiedName:string -> MathMLElement.t [@@js.global "createElementNS"]
  
  (**
    Returns an element with namespace namespace. Its namespace prefix will be everything before ":" (U+003E) in qualifiedName or null. Its local name will be everything after ":" (U+003E) in qualifiedName or qualifiedName.
    
    If localName does not match the Name production an "InvalidCharacterError" DOMException will be thrown.
    
    If one of the following conditions is true a "NamespaceError" DOMException will be thrown:
    
    localName does not match the QName production.
    Namespace prefix is not null and namespace is the empty string.
    Namespace prefix is "xml" and namespace is not the XML namespace.
    qualifiedName or namespace prefix is "xmlns" and namespace is not the XMLNS namespace.
    namespace is the XMLNS namespace and neither qualifiedName nor namespace prefix is "xmlns".
    
    When supplied, options's is can be used to create a customized built-in element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createElementNS)
  *)
  val createElementNS''''': namespaceURI:string option -> qualifiedName:string -> ?options:ElementCreationOptions.t -> unit -> Element.t [@@js.global "createElementNS"]
  
  (**
    Returns an element with namespace namespace. Its namespace prefix will be everything before ":" (U+003E) in qualifiedName or null. Its local name will be everything after ":" (U+003E) in qualifiedName or qualifiedName.
    
    If localName does not match the Name production an "InvalidCharacterError" DOMException will be thrown.
    
    If one of the following conditions is true a "NamespaceError" DOMException will be thrown:
    
    localName does not match the QName production.
    Namespace prefix is not null and namespace is the empty string.
    Namespace prefix is "xml" and namespace is not the XML namespace.
    qualifiedName or namespace prefix is "xmlns" and namespace is not the XMLNS namespace.
    namespace is the XMLNS namespace and neither qualifiedName nor namespace prefix is "xmlns".
    
    When supplied, options's is can be used to create a customized built-in element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createElementNS)
  *)
  val createElementNS'''''': namespace:string option -> qualifiedName:string -> ?options:([`U1 of string | `U2 of ElementCreationOptions.t] [@js.union]) -> unit -> Element.t [@@js.global "createElementNS"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent: ([`L_s5_AnimationEvent[@js "AnimationEvent"]] [@js.enum]) -> AnimationEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent': ([`L_s6_AnimationPlaybackEvent[@js "AnimationPlaybackEvent"]] [@js.enum]) -> AnimationPlaybackEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'': ([`L_s7_AudioProcessingEvent[@js "AudioProcessingEvent"]] [@js.enum]) -> AudioProcessingEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''': ([`L_s10_BeforeUnloadEvent[@js "BeforeUnloadEvent"]] [@js.enum]) -> BeforeUnloadEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''': ([`L_s11_BlobEvent[@js "BlobEvent"]] [@js.enum]) -> BlobEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''': ([`L_s12_ClipboardEvent[@js "ClipboardEvent"]] [@js.enum]) -> ClipboardEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''': ([`L_s13_CloseEvent[@js "CloseEvent"]] [@js.enum]) -> CloseEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''': ([`L_s14_CompositionEvent[@js "CompositionEvent"]] [@js.enum]) -> CompositionEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''': ([`L_s15_CustomEvent[@js "CustomEvent"]] [@js.enum]) -> CustomEvent.t_0 [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''': ([`L_s17_DeviceMotionEvent[@js "DeviceMotionEvent"]] [@js.enum]) -> DeviceMotionEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''': ([`L_s18_DeviceOrientationEvent[@js "DeviceOrientationEvent"]] [@js.enum]) -> DeviceOrientationEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''': ([`L_s19_DragEvent[@js "DragEvent"]] [@js.enum]) -> DragEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''': ([`L_s31_ErrorEvent[@js "ErrorEvent"]] [@js.enum]) -> ErrorEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''': ([`L_s32_Event[@js "Event"]] [@js.enum]) -> Event.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''': ([`L_s33_Events[@js "Events"]] [@js.enum]) -> Event.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''': ([`L_s34_FocusEvent[@js "FocusEvent"]] [@js.enum]) -> FocusEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''': ([`L_s35_FontFaceSetLoadEvent[@js "FontFaceSetLoadEvent"]] [@js.enum]) -> FontFaceSetLoadEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''': ([`L_s36_FormDataEvent[@js "FormDataEvent"]] [@js.enum]) -> FormDataEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''': ([`L_s37_GamepadEvent[@js "GamepadEvent"]] [@js.enum]) -> GamepadEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''': ([`L_s39_HashChangeEvent[@js "HashChangeEvent"]] [@js.enum]) -> HashChangeEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''': ([`L_s44_IDBVersionChangeEvent[@js "IDBVersionChangeEvent"]] [@js.enum]) -> IDBVersionChangeEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''': ([`L_s45_InputEvent[@js "InputEvent"]] [@js.enum]) -> InputEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''': ([`L_s47_KeyboardEvent[@js "KeyboardEvent"]] [@js.enum]) -> KeyboardEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''': ([`L_s48_MIDIConnectionEvent[@js "MIDIConnectionEvent"]] [@js.enum]) -> MIDIConnectionEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''': ([`L_s49_MIDIMessageEvent[@js "MIDIMessageEvent"]] [@js.enum]) -> MIDIMessageEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''': ([`L_s50_MediaEncryptedEvent[@js "MediaEncryptedEvent"]] [@js.enum]) -> MediaEncryptedEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''': ([`L_s51_MediaKeyMessageEvent[@js "MediaKeyMessageEvent"]] [@js.enum]) -> MediaKeyMessageEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''''': ([`L_s52_MediaQueryListEvent[@js "MediaQueryListEvent"]] [@js.enum]) -> MediaQueryListEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''''': ([`L_s53_MediaStreamTrackEvent[@js "MediaStreamTrackEvent"]] [@js.enum]) -> MediaStreamTrackEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''''''': ([`L_s54_MessageEvent[@js "MessageEvent"]] [@js.enum]) -> MessageEvent.t_0 [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''''''': ([`L_s55_MouseEvent[@js "MouseEvent"]] [@js.enum]) -> MouseEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''''''''': ([`L_s56_MouseEvents[@js "MouseEvents"]] [@js.enum]) -> MouseEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''''''''': ([`L_s57_MutationEvent[@js "MutationEvent"]] [@js.enum]) -> MutationEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''''''''''': ([`L_s58_MutationEvents[@js "MutationEvents"]] [@js.enum]) -> MutationEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''''''''''': ([`L_s69_OfflineAudioCompletionEvent[@js "OfflineAudioCompletionEvent"]] [@js.enum]) -> OfflineAudioCompletionEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''''''''''''': ([`L_s70_PageTransitionEvent[@js "PageTransitionEvent"]] [@js.enum]) -> PageTransitionEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''''''''''''': ([`L_s71_PaymentMethodChangeEvent[@js "PaymentMethodChangeEvent"]] [@js.enum]) -> PaymentMethodChangeEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''''''''''''''': ([`L_s72_PaymentRequestUpdateEvent[@js "PaymentRequestUpdateEvent"]] [@js.enum]) -> PaymentRequestUpdateEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''''''''''''''': ([`L_s73_PictureInPictureEvent[@js "PictureInPictureEvent"]] [@js.enum]) -> PictureInPictureEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''''''''''''''''': ([`L_s74_PointerEvent[@js "PointerEvent"]] [@js.enum]) -> PointerEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''''''''''''''''': ([`L_s75_PopStateEvent[@js "PopStateEvent"]] [@js.enum]) -> PopStateEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''''''''''''''''''': ([`L_s76_ProgressEvent[@js "ProgressEvent"]] [@js.enum]) -> ProgressEvent.t_0 [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''''''''''''''''''': ([`L_s77_PromiseRejectionEvent[@js "PromiseRejectionEvent"]] [@js.enum]) -> PromiseRejectionEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''''''''''''''''''''': ([`L_s80_RTCDTMFToneChangeEvent[@js "RTCDTMFToneChangeEvent"]] [@js.enum]) -> RTCDTMFToneChangeEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''''''''''''''''''''': ([`L_s81_RTCDataChannelEvent[@js "RTCDataChannelEvent"]] [@js.enum]) -> RTCDataChannelEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''''''''''''''''''''''': ([`L_s82_RTCErrorEvent[@js "RTCErrorEvent"]] [@js.enum]) -> RTCErrorEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''''''''''''''''''''''': ([`L_s83_RTCPeerConnectionIceErrorEvent[@js "RTCPeerConnectionIceErrorEvent"]] [@js.enum]) -> RTCPeerConnectionIceErrorEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''''''''''''''''''''''''': ([`L_s84_RTCPeerConnectionIceEvent[@js "RTCPeerConnectionIceEvent"]] [@js.enum]) -> RTCPeerConnectionIceEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''''''''''''''''''''''''': ([`L_s85_RTCTrackEvent[@js "RTCTrackEvent"]] [@js.enum]) -> RTCTrackEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''''''''''''''''''''''''''': ([`L_s86_SecurityPolicyViolationEvent[@js "SecurityPolicyViolationEvent"]] [@js.enum]) -> SecurityPolicyViolationEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''''''''''''''''''''''''''': ([`L_s87_SpeechSynthesisErrorEvent[@js "SpeechSynthesisErrorEvent"]] [@js.enum]) -> SpeechSynthesisErrorEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''''''''''''''''''''''''''''': ([`L_s88_SpeechSynthesisEvent[@js "SpeechSynthesisEvent"]] [@js.enum]) -> SpeechSynthesisEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''''''''''''''''''''''''''''': ([`L_s89_StorageEvent[@js "StorageEvent"]] [@js.enum]) -> StorageEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''''''''''''''''''''''''''''''': ([`L_s90_SubmitEvent[@js "SubmitEvent"]] [@js.enum]) -> SubmitEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''''''''''''''''''''''''''''''': ([`L_s91_ToggleEvent[@js "ToggleEvent"]] [@js.enum]) -> ToggleEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''''''''''''''''''''''''''''''''': ([`L_s92_TouchEvent[@js "TouchEvent"]] [@js.enum]) -> TouchEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''''''''''''''''''''''''''''''''': ([`L_s93_TrackEvent[@js "TrackEvent"]] [@js.enum]) -> TrackEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''''''''''''''''''''''''''''''''''': ([`L_s94_TransitionEvent[@js "TransitionEvent"]] [@js.enum]) -> TransitionEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''''''''''''''''''''''''''''''''''': ([`L_s95_UIEvent[@js "UIEvent"]] [@js.enum]) -> UIEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''''''''''''''''''''''''''''''''''''': ([`L_s96_UIEvents[@js "UIEvents"]] [@js.enum]) -> UIEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''': ([`L_s110_WebGLContextEvent[@js "WebGLContextEvent"]] [@js.enum]) -> WebGLContextEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''': ([`L_s111_WheelEvent[@js "WheelEvent"]] [@js.enum]) -> WheelEvent.t [@@js.global "createEvent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createEvent) *)
  val createEvent'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''': string -> Event.t [@@js.global "createEvent"]
  
  (**
    Creates a NodeIterator object that you can use to traverse filtered lists of nodes or elements in a document.
    @param root The root element or node to start traversing on.
    @param whatToShow The type of nodes or elements to appear in the node list
    @param filter A custom NodeFilter function to use. For more information, see filter. Use null for no filter.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createNodeIterator)
  *)
  val createNodeIterator: root:Node.t -> ?whatToShow:float -> ?filter:NodeFilter.t option -> unit -> NodeIterator.t [@@js.global "createNodeIterator"]
  
  (**
    Returns a ProcessingInstruction node whose target is target and data is data. If target does not match the Name production an "InvalidCharacterError" DOMException will be thrown. If data contains "?>" an "InvalidCharacterError" DOMException will be thrown.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createProcessingInstruction)
  *)
  val createProcessingInstruction: target:string -> data:string -> ProcessingInstruction.t [@@js.global "createProcessingInstruction"]
  
  (**
    Returns an empty range object that has both of its boundary points positioned at the beginning of the document.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createRange)
  *)
  val createRange: unit -> Range.t [@@js.global "createRange"]
  
  (**
    Creates a text string from the specified value.
    @param data String that specifies the nodeValue property of the text node.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createTextNode)
  *)
  val createTextNode: string -> Text.t [@@js.global "createTextNode"]
  
  (**
    Creates a TreeWalker object that you can use to traverse filtered lists of nodes or elements in a document.
    @param root The root element or node to start traversing on.
    @param whatToShow The type of nodes or elements to appear in the node list. For more information, see whatToShow.
    @param filter A custom NodeFilter function to use.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/createTreeWalker)
  *)
  val createTreeWalker: root:Node.t -> ?whatToShow:float -> ?filter:NodeFilter.t option -> unit -> TreeWalker.t [@@js.global "createTreeWalker"]
  
  (**
    Executes a command on the current document, current selection, or the given range.
    @param commandId String that specifies the command to execute. This command can be any of the command identifiers that can be executed in script.
    @param showUI Display the user interface, defaults to false.
    @param value Value to assign.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/execCommand)
  *)
  val execCommand: commandId:string -> ?showUI:bool -> ?value:string -> unit -> bool [@@js.global "execCommand"]
  
  (**
    Stops document's fullscreen element from being displayed fullscreen and resolves promise when done.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/exitFullscreen)
  *)
  val exitFullscreen: unit -> unit Promise.t [@@js.global "exitFullscreen"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/exitPictureInPicture) *)
  val exitPictureInPicture: unit -> unit Promise.t [@@js.global "exitPictureInPicture"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/exitPointerLock) *)
  val exitPointerLock: unit -> unit [@@js.global "exitPointerLock"]
  
  (**
    Returns a reference to the first object with the specified value of the ID attribute.
    @param elementId String that specifies the ID value.
  *)
  val getElementById: string -> HTMLElement.t option [@@js.global "getElementById"]
  
  (**
    Returns a HTMLCollection of the elements in the object on which the method was invoked (a document or an element) that have all the classes given by classNames. The classNames argument is interpreted as a space-separated list of classes.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/getElementsByClassName)
  *)
  val getElementsByClassName: string -> Element.t HTMLCollectionOf.t [@@js.global "getElementsByClassName"]
  
  (**
    Gets a collection of objects based on the value of the NAME or ID attribute.
    @param elementName Gets a collection of objects based on the value of the NAME or ID attribute.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/getElementsByName)
  *)
  val getElementsByName: string -> HTMLElement.t NodeListOf.t [@@js.global "getElementsByName"]
  
  (**
    Retrieves a collection of objects based on the specified element name.
    @param name Specifies the name of an element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/getElementsByTagName)
  *)
  val getElementsByTagName: 'K -> (* FIXME: unknown type 'HTMLElementTagNameMap[K]' *)any HTMLCollectionOf.t [@@js.global "getElementsByTagName"]
  
  (** Retrieves a collection of objects based on the specified element name. *)
  val getElementsByTagName': 'K -> (* FIXME: unknown type 'SVGElementTagNameMap[K]' *)any HTMLCollectionOf.t [@@js.global "getElementsByTagName"]
  
  (** Retrieves a collection of objects based on the specified element name. *)
  val getElementsByTagName'': 'K -> (* FIXME: unknown type 'MathMLElementTagNameMap[K]' *)any HTMLCollectionOf.t [@@js.global "getElementsByTagName"]
  
  (** @deprecated  *)
  val getElementsByTagName''': 'K -> (* FIXME: unknown type 'HTMLElementDeprecatedTagNameMap[K]' *)any HTMLCollectionOf.t [@@js.global "getElementsByTagName"]
  
  (** Retrieves a collection of objects based on the specified element name. *)
  val getElementsByTagName'''': string -> Element.t HTMLCollectionOf.t [@@js.global "getElementsByTagName"]
  
  (**
    If namespace and localName are "*" returns a HTMLCollection of all descendant elements.
    
    If only namespace is "*" returns a HTMLCollection of all descendant elements whose local name is localName.
    
    If only localName is "*" returns a HTMLCollection of all descendant elements whose namespace is namespace.
    
    Otherwise, returns a HTMLCollection of all descendant elements whose namespace is namespace and local name is localName.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/getElementsByTagNameNS)
  *)
  val getElementsByTagNameNS: namespaceURI:([`L_s492_http___www_w3_org_1999_xhtml[@js "http://www.w3.org/1999/xhtml"]] [@js.enum]) -> localName:string -> HTMLElement.t HTMLCollectionOf.t [@@js.global "getElementsByTagNameNS"]
  
  (**
    If namespace and localName are "*" returns a HTMLCollection of all descendant elements.
    
    If only namespace is "*" returns a HTMLCollection of all descendant elements whose local name is localName.
    
    If only localName is "*" returns a HTMLCollection of all descendant elements whose namespace is namespace.
    
    Otherwise, returns a HTMLCollection of all descendant elements whose namespace is namespace and local name is localName.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/getElementsByTagNameNS)
  *)
  val getElementsByTagNameNS': namespaceURI:([`L_s493_http___www_w3_org_2000_svg[@js "http://www.w3.org/2000/svg"]] [@js.enum]) -> localName:string -> SVGElement.t HTMLCollectionOf.t [@@js.global "getElementsByTagNameNS"]
  
  (**
    If namespace and localName are "*" returns a HTMLCollection of all descendant elements.
    
    If only namespace is "*" returns a HTMLCollection of all descendant elements whose local name is localName.
    
    If only localName is "*" returns a HTMLCollection of all descendant elements whose namespace is namespace.
    
    Otherwise, returns a HTMLCollection of all descendant elements whose namespace is namespace and local name is localName.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/getElementsByTagNameNS)
  *)
  val getElementsByTagNameNS'': namespaceURI:([`L_s491_http___www_w3_org_1998_Math_MathML[@js "http://www.w3.org/1998/Math/MathML"]] [@js.enum]) -> localName:string -> MathMLElement.t HTMLCollectionOf.t [@@js.global "getElementsByTagNameNS"]
  
  (**
    If namespace and localName are "*" returns a HTMLCollection of all descendant elements.
    
    If only namespace is "*" returns a HTMLCollection of all descendant elements whose local name is localName.
    
    If only localName is "*" returns a HTMLCollection of all descendant elements whose namespace is namespace.
    
    Otherwise, returns a HTMLCollection of all descendant elements whose namespace is namespace and local name is localName.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/getElementsByTagNameNS)
  *)
  val getElementsByTagNameNS''': namespace:string option -> localName:string -> Element.t HTMLCollectionOf.t [@@js.global "getElementsByTagNameNS"]
  
  (**
    Returns an object representing the current selection of the document that is loaded into the object displaying a webpage.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/getSelection)
  *)
  val getSelection: unit -> Selection.t option [@@js.global "getSelection"]
  
  (**
    Gets a value indicating whether the object currently has focus.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/hasFocus)
  *)
  val hasFocus: unit -> bool [@@js.global "hasFocus"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/hasStorageAccess) *)
  val hasStorageAccess: unit -> bool Promise.t [@@js.global "hasStorageAccess"]
  
  (**
    Returns a copy of node. If deep is true, the copy also includes the node's descendants.
    
    If node is a document or a shadow root, throws a "NotSupportedError" DOMException.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/importNode)
  *)
  val importNode: node:'T -> ?deep:bool -> unit -> 'T [@@js.global "importNode"]
  
  (**
    Opens a new window and loads a document specified by a given URL. Also, opens a new window that uses the url parameter and the name parameter to collect the output of the write method and the writeln method.
    @param url Specifies a MIME type for the document.
    @param name Specifies the name of the window. This name is used as the value for the TARGET attribute on a form or an anchor element.
    @param features Contains a list of items separated by commas. Each item consists of an option and a value, separated by an equals sign (for example, "fullscreen=yes, toolbar=yes"). The following values are supported.
    @param replace Specifies whether the existing entry for the document is replaced in the history list.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/open)
  *)
  val open_: ?unused1:string -> ?unused2:string -> unit -> Document.t [@@js.global "open"]
  
  (** Opens a new window and loads a document specified by a given URL. Also, opens a new window that uses the url parameter and the name parameter to collect the output of the write method and the writeln method. *)
  val open_': url:([`U1 of string | `U2 of URL.t] [@js.union]) -> name:string -> features:string -> WindowProxy.t option [@@js.global "open"]
  
  (**
    Returns a Boolean value that indicates whether a specified command can be successfully executed using execCommand, given the current state of the document.
    @param commandId Specifies a command identifier.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/queryCommandEnabled)
  *)
  val queryCommandEnabled: string -> bool [@@js.global "queryCommandEnabled"]
  
  (**
    Returns a Boolean value that indicates whether the specified command is in the indeterminate state.
    @param commandId String that specifies a command identifier.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/queryCommandIndeterm)
  *)
  val queryCommandIndeterm: string -> bool [@@js.global "queryCommandIndeterm"]
  
  (**
    Returns a Boolean value that indicates the current state of the command.
    @param commandId String that specifies a command identifier.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/queryCommandState)
  *)
  val queryCommandState: string -> bool [@@js.global "queryCommandState"]
  
  (**
    Returns a Boolean value that indicates whether the current command is supported on the current range.
    @param commandId Specifies a command identifier.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/queryCommandSupported)
  *)
  val queryCommandSupported: string -> bool [@@js.global "queryCommandSupported"]
  
  (**
    Returns the current value of the document, range, or current selection for the given command.
    @param commandId String that specifies a command identifier.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/queryCommandValue)
  *)
  val queryCommandValue: string -> string [@@js.global "queryCommandValue"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/releaseEvents) *)
  val releaseEvents: unit -> unit [@@js.global "releaseEvents"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/requestStorageAccess) *)
  val requestStorageAccess: unit -> unit Promise.t [@@js.global "requestStorageAccess"]
  
  (**
    Writes one or more HTML expressions to a document in the specified window.
    @param content Specifies the text and HTML tags to write.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/write)
  *)
  val write: (string list [@js.variadic]) -> unit [@@js.global "write"]
  
  (**
    Writes one or more HTML expressions, followed by a carriage return, to a document in the specified window.
    @param content The text and HTML tags to write.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/writeln)
  *)
  val writeln: (string list [@js.variadic]) -> unit [@@js.global "writeln"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: type_:'K -> listener:(this:Document.t -> ev:(* FIXME: unknown type 'DocumentEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.global "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.global "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: type_:'K -> listener:(this:Document.t -> ev:(* FIXME: unknown type 'DocumentEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.global "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.global "removeEventListener"]
end
module[@js.scope "customElements"] CustomElementsStatic : sig
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CustomElementRegistry/define) *)
  val define: name:string -> constructor:CustomElementConstructor.t -> ?options:ElementDefinitionOptions.t -> unit -> unit [@@js.global "define"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CustomElementRegistry/get) *)
  val get_: string -> CustomElementConstructor.t option [@@js.global "get"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CustomElementRegistry/getName) *)
  val getName: CustomElementConstructor.t -> string option [@@js.global "getName"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CustomElementRegistry/upgrade) *)
  val upgrade: Node.t -> unit [@@js.global "upgrade"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CustomElementRegistry/whenDefined) *)
  val whenDefined: string -> CustomElementConstructor.t Promise.t [@@js.global "whenDefined"]
end
module[@js.scope "crypto"] CryptoStatic : sig
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Crypto/subtle)
  *)
  val subtle: unit -> SubtleCrypto.t [@@js.get "subtle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Crypto/getRandomValues) *)
  val getRandomValues: 'T -> 'T [@@js.global "getRandomValues"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Crypto/randomUUID)
  *)
  val randomUUID: unit -> (* FIXME: unknown type '`${string}-${string}-${string}-${string}-${string}`' *)any [@@js.global "randomUUID"]
end
module[@js.scope "console"] ConsoleStatic : sig
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/assert_static) *)
  val assert_: ?condition:bool -> data:(any list [@js.variadic]) -> unit -> unit [@@js.global "assert"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/clear_static) *)
  val clear: unit -> unit [@@js.global "clear"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/count_static) *)
  val count: ?label:string -> unit -> unit [@@js.global "count"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/countReset_static) *)
  val countReset: ?label:string -> unit -> unit [@@js.global "countReset"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/debug_static) *)
  val debug: (any list [@js.variadic]) -> unit [@@js.global "debug"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/dir_static) *)
  val dir: ?item:any -> ?options:any -> unit -> unit [@@js.global "dir"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/dirxml_static) *)
  val dirxml: (any list [@js.variadic]) -> unit [@@js.global "dirxml"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/error_static) *)
  val error: (any list [@js.variadic]) -> unit [@@js.global "error"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/group_static) *)
  val group: (any list [@js.variadic]) -> unit [@@js.global "group"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/groupCollapsed_static) *)
  val groupCollapsed: (any list [@js.variadic]) -> unit [@@js.global "groupCollapsed"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/groupEnd_static) *)
  val groupEnd: unit -> unit [@@js.global "groupEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/info_static) *)
  val info: (any list [@js.variadic]) -> unit [@@js.global "info"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/log_static) *)
  val log: (any list [@js.variadic]) -> unit [@@js.global "log"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/table_static) *)
  val table: ?tabularData:any -> ?properties:string list -> unit -> unit [@@js.global "table"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/time_static) *)
  val time: ?label:string -> unit -> unit [@@js.global "time"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/timeEnd_static) *)
  val timeEnd: ?label:string -> unit -> unit [@@js.global "timeEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/timeLog_static) *)
  val timeLog: ?label:string -> data:(any list [@js.variadic]) -> unit -> unit [@@js.global "timeLog"]
  
  (**
    This method does not display anything unless used in the inspector.
     Adds an event with the label `label` to the Timeline panel of the inspector.
  *)
  val timeStamp: ?label:string -> unit -> unit [@@js.global "timeStamp"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/trace_static) *)
  val trace: (any list [@js.variadic]) -> unit [@@js.global "trace"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/warn_static) *)
  val warn: (any list [@js.variadic]) -> unit [@@js.global "warn"]
end
module[@js.scope "clientInformation"] ClientInformationStatic : sig
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/requestMediaKeySystemAccess)
  *)
  val requestMediaKeySystemAccess: keySystem:string -> supportedConfigurations:MediaKeySystemConfiguration.t Iterable.t -> MediaKeySystemAccess.t Promise.t [@@js.global "requestMediaKeySystemAccess"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/vibrate) *)
  val vibrate: float Iterable.t -> bool [@@js.global "vibrate"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/clipboard)
  *)
  val clipboard: unit -> Clipboard.t [@@js.get "clipboard"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/credentials)
  *)
  val credentials: unit -> CredentialsContainer.t [@@js.get "credentials"]
  val doNotTrack: unit -> string option [@@js.get "doNotTrack"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/geolocation) *)
  val geolocation: unit -> Geolocation.t [@@js.get "geolocation"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/maxTouchPoints) *)
  val maxTouchPoints: unit -> float [@@js.get "maxTouchPoints"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/mediaCapabilities) *)
  val mediaCapabilities: unit -> MediaCapabilities.t [@@js.get "mediaCapabilities"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/mediaDevices)
  *)
  val mediaDevices: unit -> MediaDevices.t [@@js.get "mediaDevices"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/mediaSession) *)
  val mediaSession: unit -> MediaSession.t [@@js.get "mediaSession"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/permissions) *)
  val permissions: unit -> Permissions.t [@@js.get "permissions"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/serviceWorker)
  *)
  val serviceWorker: unit -> ServiceWorkerContainer.t [@@js.get "serviceWorker"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/userActivation) *)
  val userActivation: unit -> UserActivation.t [@@js.get "userActivation"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/wakeLock) *)
  val wakeLock: unit -> WakeLock.t [@@js.get "wakeLock"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/canShare)
  *)
  val canShare: ?data:ShareData.t -> unit -> bool [@@js.global "canShare"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/getGamepads) *)
  val getGamepads: unit -> Gamepad.t option list [@@js.global "getGamepads"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/requestMIDIAccess)
  *)
  val requestMIDIAccess: ?options:MIDIOptions.t -> unit -> MIDIAccess.t Promise.t [@@js.global "requestMIDIAccess"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/requestMediaKeySystemAccess)
  *)
  val requestMediaKeySystemAccess': keySystem:string -> supportedConfigurations:MediaKeySystemConfiguration.t list -> MediaKeySystemAccess.t Promise.t [@@js.global "requestMediaKeySystemAccess"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/sendBeacon) *)
  val sendBeacon: url:([`U1 of string | `U2 of URL.t] [@js.union]) -> ?data:BodyInit.t option -> unit -> bool [@@js.global "sendBeacon"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/share)
  *)
  val share: ?data:ShareData.t -> unit -> unit Promise.t [@@js.global "share"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Navigator/vibrate) *)
  val vibrate': VibratePattern.t -> bool [@@js.global "vibrate"]
end
module[@js.scope "caches"] CachesStatic : sig
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CacheStorage/delete) *)
  val delete: string -> bool Promise.t [@@js.global "delete"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CacheStorage/has) *)
  val has: string -> bool Promise.t [@@js.global "has"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CacheStorage/keys) *)
  val keys: unit -> string list Promise.t [@@js.global "keys"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CacheStorage/match) *)
  val match_: request:([`U1 of RequestInfo.t | `U2 of URL.t] [@js.union]) -> ?options:MultiCacheQueryOptions.t -> unit -> Response.t option Promise.t [@@js.global "match"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CacheStorage/open) *)
  val open_: string -> Cache.t Promise.t [@@js.global "open"]
end

(**
  An XSLTProcessor applies an XSLT stylesheet transformation to an XML document to produce a new XML document as output. It has methods to load the XSLT stylesheet, to manipulate <xsl:param> parameter values, and to apply the transformation to documents.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XSLTProcessor)
*)
module[@js.scope "XSLTProcessor"] XSLTProcessor : sig
  type t = [`XSLTProcessor] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`XSLTProcessor]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`XSLTProcessor]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `XSLTProcessor ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XSLTProcessor/clearParameters) *)
  val clearParameters: 'tags this -> unit [@@js.call "clearParameters"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XSLTProcessor/getParameter) *)
  val getParameter: 'tags this -> namespaceURI:string option -> localName:string -> any [@@js.call "getParameter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XSLTProcessor/importStylesheet) *)
  val importStylesheet: 'tags this -> style:Node.t -> unit [@@js.call "importStylesheet"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XSLTProcessor/removeParameter) *)
  val removeParameter: 'tags this -> namespaceURI:string option -> localName:string -> unit [@@js.call "removeParameter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XSLTProcessor/reset) *)
  val reset: 'tags this -> unit [@@js.call "reset"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XSLTProcessor/setParameter) *)
  val setParameter: 'tags this -> namespaceURI:string option -> localName:string -> value:any -> unit [@@js.call "setParameter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XSLTProcessor/transformToDocument) *)
  val transformToDocument: 'tags this -> source:Node.t -> Document.t [@@js.call "transformToDocument"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XSLTProcessor/transformToFragment) *)
  val transformToFragment: 'tags this -> source:Node.t -> output:Document.t -> DocumentFragment.t [@@js.call "transformToFragment"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  TheÂ XPathEvaluator interface allows to compile and evaluate XPath expressions.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XPathEvaluator)
*)
module[@js.scope "XPathEvaluator"] XPathEvaluator : sig
  type t = [`XPathEvaluator | `XPathEvaluatorBase] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`XPathEvaluator | `XPathEvaluatorBase]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`XPathEvaluator | `XPathEvaluatorBase]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `XPathEvaluator ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides the serializeToString() method to construct an XML string representing a DOM tree.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLSerializer)
*)
module[@js.scope "XMLSerializer"] XMLSerializer : sig
  type t = [`XMLSerializer] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`XMLSerializer]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`XMLSerializer]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `XMLSerializer ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLSerializer/serializeToString) *)
  val serializeToString: 'tags this -> root:Node.t -> string [@@js.call "serializeToString"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module XMLHttpRequestResponseType : sig
  type t = ([`L_s0[@js ""] | `L_s160_arraybuffer[@js "arraybuffer"] | `L_s204_blob[@js "blob"] | `L_s342_document[@js "document"] | `L_s534_json[@js "json"] | `L_s965_text[@js "text"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  Use XMLHttpRequest (XHR) objects to interact with servers. You can retrieve data from a URL without having to do a full page refresh. This enables a Web page to update just part of a page without disrupting what the user is doing.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest)
*)
module[@js.scope "XMLHttpRequest"] rec XMLHttpRequest : sig
  type t = [`EventTarget | `XMLHttpRequest | `XMLHttpRequestEventTarget] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `XMLHttpRequest | `XMLHttpRequestEventTarget]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `XMLHttpRequest | `XMLHttpRequestEventTarget]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `XMLHttpRequest ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/readystatechange_event) *)
  val get_onreadystatechange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onreadystatechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/readystatechange_event) *)
  val set_onreadystatechange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onreadystatechange"]
  
  (**
    Returns client's state.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/readyState)
  *)
  val get_readyState: 'tags this -> float [@@js.get "readyState"]
  
  (**
    Returns the response body.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/response)
  *)
  val get_response: 'tags this -> any [@@js.get "response"]
  
  (**
    Returns response as text.
    
    Throws an "InvalidStateError" DOMException if responseType is not the empty string or "text".
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/responseText)
  *)
  val get_responseText: 'tags this -> string [@@js.get "responseText"]
  
  (**
    Returns the response type.
    
    Can be set to change the response type. Values are: the empty string (default), "arraybuffer", "blob", "document", "json", and "text".
    
    When set: setting to "document" is ignored if current global object is not a Window object.
    
    When set: throws an "InvalidStateError" DOMException if state is loading or done.
    
    When set: throws an "InvalidAccessError" DOMException if the synchronous flag is set and current global object is a Window object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/responseType)
  *)
  val get_responseType: 'tags this -> XMLHttpRequestResponseType.t [@@js.get "responseType"]
  
  (**
    Returns the response type.
    
    Can be set to change the response type. Values are: the empty string (default), "arraybuffer", "blob", "document", "json", and "text".
    
    When set: setting to "document" is ignored if current global object is not a Window object.
    
    When set: throws an "InvalidStateError" DOMException if state is loading or done.
    
    When set: throws an "InvalidAccessError" DOMException if the synchronous flag is set and current global object is a Window object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/responseType)
  *)
  val set_responseType: 'tags this -> XMLHttpRequestResponseType.t -> unit [@@js.set "responseType"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/responseURL) *)
  val get_responseURL: 'tags this -> string [@@js.get "responseURL"]
  
  (**
    Returns the response as document.
    
    Throws an "InvalidStateError" DOMException if responseType is not the empty string or "document".
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/responseXML)
  *)
  val get_responseXML: 'tags this -> Document.t option [@@js.get "responseXML"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/status) *)
  val get_status: 'tags this -> float [@@js.get "status"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/statusText) *)
  val get_statusText: 'tags this -> string [@@js.get "statusText"]
  
  (**
    Can be set to a time in milliseconds. When set to a non-zero value will cause fetching to terminate after the given time has passed. When the time has passed, the request has not yet completed, and this's synchronous flag is unset, a timeout event will then be dispatched, or a "TimeoutError" DOMException will be thrown otherwise (for the send() method).
    
    When set: throws an "InvalidAccessError" DOMException if the synchronous flag is set and current global object is a Window object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/timeout)
  *)
  val get_timeout: 'tags this -> float [@@js.get "timeout"]
  
  (**
    Can be set to a time in milliseconds. When set to a non-zero value will cause fetching to terminate after the given time has passed. When the time has passed, the request has not yet completed, and this's synchronous flag is unset, a timeout event will then be dispatched, or a "TimeoutError" DOMException will be thrown otherwise (for the send() method).
    
    When set: throws an "InvalidAccessError" DOMException if the synchronous flag is set and current global object is a Window object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/timeout)
  *)
  val set_timeout: 'tags this -> float -> unit [@@js.set "timeout"]
  
  (**
    Returns the associated XMLHttpRequestUpload object. It can be used to gather transmission information when data is transferred to a server.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/upload)
  *)
  val get_upload: 'tags this -> XMLHttpRequestUpload.t [@@js.get "upload"]
  
  (**
    True when credentials are to be included in a cross-origin request. False when they are to be excluded in a cross-origin request and when cookies are to be ignored in its response. Initially false.
    
    When set: throws an "InvalidStateError" DOMException if state is not unsent or opened, or if the send() flag is set.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/withCredentials)
  *)
  val get_withCredentials: 'tags this -> bool [@@js.get "withCredentials"]
  
  (**
    True when credentials are to be included in a cross-origin request. False when they are to be excluded in a cross-origin request and when cookies are to be ignored in its response. Initially false.
    
    When set: throws an "InvalidStateError" DOMException if state is not unsent or opened, or if the send() flag is set.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/withCredentials)
  *)
  val set_withCredentials: 'tags this -> bool -> unit [@@js.set "withCredentials"]
  
  (**
    Cancels any network activity.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/abort)
  *)
  val abort: 'tags this -> unit [@@js.call "abort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/getAllResponseHeaders) *)
  val getAllResponseHeaders: 'tags this -> string [@@js.call "getAllResponseHeaders"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/getResponseHeader) *)
  val getResponseHeader: 'tags this -> name:string -> string option [@@js.call "getResponseHeader"]
  
  (**
    Sets the request method, request URL, and synchronous flag.
    
    Throws a "SyntaxError" DOMException if either method is not a valid method or url cannot be parsed.
    
    Throws a "SecurityError" DOMException if method is a case-insensitive match for `CONNECT`, `TRACE`, or `TRACK`.
    
    Throws an "InvalidAccessError" DOMException if async is false, current global object is a Window object, and the timeout attribute is not zero or the responseType attribute is not the empty string.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/open)
  *)
  val open_: 'tags this -> method_:string -> url:([`U1 of string | `U2 of URL.t] [@js.union]) -> unit [@@js.call "open"]
  
  (**
    Sets the request method, request URL, and synchronous flag.
    
    Throws a "SyntaxError" DOMException if either method is not a valid method or url cannot be parsed.
    
    Throws a "SecurityError" DOMException if method is a case-insensitive match for `CONNECT`, `TRACE`, or `TRACK`.
    
    Throws an "InvalidAccessError" DOMException if async is false, current global object is a Window object, and the timeout attribute is not zero or the responseType attribute is not the empty string.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/open)
  *)
  val open_': 'tags this -> method_:string -> url:([`U1 of string | `U2 of URL.t] [@js.union]) -> async:bool -> ?username:string option -> ?password:string option -> unit -> unit [@@js.call "open"]
  
  (**
    Acts as if the `Content-Type` header value for a response is mime. (It does not change the header.)
    
    Throws an "InvalidStateError" DOMException if state is loading or done.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/overrideMimeType)
  *)
  val overrideMimeType: 'tags this -> mime:string -> unit [@@js.call "overrideMimeType"]
  
  (**
    Initiates the request. The body argument provides the request body, if any, and is ignored if the request method is GET or HEAD.
    
    Throws an "InvalidStateError" DOMException if either state is not opened or the send() flag is set.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/send)
  *)
  val send: 'tags this -> ?body:([`Null | `U1 of Document.t | `U2 of XMLHttpRequestBodyInit.t] [@js.union]) -> unit -> unit [@@js.call "send"]
  
  (**
    Combines a header in author request headers.
    
    Throws an "InvalidStateError" DOMException if either state is not opened or the send() flag is set.
    
    Throws a "SyntaxError" DOMException if name is not a header name or if value is not a header value.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/setRequestHeader)
  *)
  val setRequestHeader: 'tags this -> name:string -> value:string -> unit [@@js.call "setRequestHeader"]
  val get_UNSENT: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "UNSENT"]
  val get_OPENED: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "OPENED"]
  val get_HEADERS_RECEIVED: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "HEADERS_RECEIVED"]
  val get_LOADING: 'tags this -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "LOADING"]
  val get_DONE: 'tags this -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "DONE"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'XMLHttpRequestEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'XMLHttpRequestEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  val unsent: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "UNSENT"]
  val opened: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "OPENED"]
  val headers_received: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "HEADERS_RECEIVED"]
  val loading: unit -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "LOADING"]
  val done_: unit -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "DONE"]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequestEventTarget) *)
and[@js.scope "XMLHttpRequestEventTarget"] XMLHttpRequestEventTarget : sig
  type t = [`EventTarget | `XMLHttpRequestEventTarget] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `XMLHttpRequestEventTarget]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `XMLHttpRequestEventTarget]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `XMLHttpRequestEventTarget ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_onabort: 'tags this -> (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option [@@js.get "onabort"]
  val set_onabort: 'tags this -> (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit [@@js.set "onabort"]
  val get_onerror: 'tags this -> (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option [@@js.get "onerror"]
  val set_onerror: 'tags this -> (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit [@@js.set "onerror"]
  val get_onload: 'tags this -> (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option [@@js.get "onload"]
  val set_onload: 'tags this -> (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit [@@js.set "onload"]
  val get_onloadend: 'tags this -> (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option [@@js.get "onloadend"]
  val set_onloadend: 'tags this -> (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit [@@js.set "onloadend"]
  val get_onloadstart: 'tags this -> (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option [@@js.get "onloadstart"]
  val set_onloadstart: 'tags this -> (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit [@@js.set "onloadstart"]
  val get_onprogress: 'tags this -> (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option [@@js.get "onprogress"]
  val set_onprogress: 'tags this -> (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit [@@js.set "onprogress"]
  val get_ontimeout: 'tags this -> (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option [@@js.get "ontimeout"]
  val set_ontimeout: 'tags this -> (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit [@@js.set "ontimeout"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'XMLHttpRequestEventTargetEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'XMLHttpRequestEventTargetEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/XMLHttpRequestUpload) *)
and[@js.scope "XMLHttpRequestUpload"] XMLHttpRequestUpload : sig
  type t = [`EventTarget | `XMLHttpRequestEventTarget | `XMLHttpRequestUpload] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `XMLHttpRequestEventTarget | `XMLHttpRequestUpload]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `XMLHttpRequestEventTarget | `XMLHttpRequestUpload]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `XMLHttpRequestUpload ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'XMLHttpRequestEventTargetEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'XMLHttpRequestEventTargetEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module XMLHttpRequestEventTargetEventMap : sig
  type t = [`XMLHttpRequestEventTargetEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`XMLHttpRequestEventTargetEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`XMLHttpRequestEventTargetEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `XMLHttpRequestEventTargetEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_abort: 'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t [@@js.get "abort"]
  val set_abort: 'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit [@@js.set "abort"]
  val get_error: 'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t [@@js.get "error"]
  val set_error: 'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit [@@js.set "error"]
  val get_load: 'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t [@@js.get "load"]
  val set_load: 'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit [@@js.set "load"]
  val get_loadend: 'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t [@@js.get "loadend"]
  val set_loadend: 'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit [@@js.set "loadend"]
  val get_loadstart: 'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t [@@js.get "loadstart"]
  val set_loadstart: 'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit [@@js.set "loadstart"]
  val get_progress: 'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t [@@js.get "progress"]
  val set_progress: 'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit [@@js.set "progress"]
  val get_timeout: 'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t [@@js.get "timeout"]
  val set_timeout: 'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit [@@js.set "timeout"]
  val create: abort:XMLHttpRequestEventTarget.t ProgressEvent.t -> error:XMLHttpRequestEventTarget.t ProgressEvent.t -> load:XMLHttpRequestEventTarget.t ProgressEvent.t -> loadend:XMLHttpRequestEventTarget.t ProgressEvent.t -> loadstart:XMLHttpRequestEventTarget.t ProgressEvent.t -> progress:XMLHttpRequestEventTarget.t ProgressEvent.t -> timeout:XMLHttpRequestEventTarget.t ProgressEvent.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module XMLHttpRequestEventMap : sig
  type t = [`XMLHttpRequestEventMap | `XMLHttpRequestEventTargetEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`XMLHttpRequestEventMap | `XMLHttpRequestEventTargetEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`XMLHttpRequestEventMap | `XMLHttpRequestEventTargetEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `XMLHttpRequestEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_readystatechange: 'tags this -> Event.t [@@js.get "readystatechange"]
  val set_readystatechange: 'tags this -> Event.t -> unit [@@js.set "readystatechange"]
  val create: readystatechange:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module AbstractWorkerEventMap : sig
  type t = [`AbstractWorkerEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AbstractWorkerEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AbstractWorkerEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AbstractWorkerEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_error: 'tags this -> ErrorEvent.t [@@js.get "error"]
  val set_error: 'tags this -> ErrorEvent.t -> unit [@@js.set "error"]
  val create: error:ErrorEvent.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module WorkerEventMap : sig
  type t = [`AbstractWorkerEventMap | `WorkerEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AbstractWorkerEventMap | `WorkerEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AbstractWorkerEventMap | `WorkerEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WorkerEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_message: 'tags this -> MessageEvent.t_0 [@@js.get "message"]
  val set_message: 'tags this -> MessageEvent.t_0 -> unit [@@js.set "message"]
  val get_messageerror: 'tags this -> MessageEvent.t_0 [@@js.get "messageerror"]
  val set_messageerror: 'tags this -> MessageEvent.t_0 -> unit [@@js.set "messageerror"]
  val create: message:MessageEvent.t_0 -> messageerror:MessageEvent.t_0 -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module WindowEventHandlersEventMap : sig
  type t = [`WindowEventHandlersEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WindowEventHandlersEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WindowEventHandlersEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WindowEventHandlersEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_afterprint: 'tags this -> Event.t [@@js.get "afterprint"]
  val set_afterprint: 'tags this -> Event.t -> unit [@@js.set "afterprint"]
  val get_beforeprint: 'tags this -> Event.t [@@js.get "beforeprint"]
  val set_beforeprint: 'tags this -> Event.t -> unit [@@js.set "beforeprint"]
  val get_beforeunload: 'tags this -> BeforeUnloadEvent.t [@@js.get "beforeunload"]
  val set_beforeunload: 'tags this -> BeforeUnloadEvent.t -> unit [@@js.set "beforeunload"]
  val get_gamepadconnected: 'tags this -> GamepadEvent.t [@@js.get "gamepadconnected"]
  val set_gamepadconnected: 'tags this -> GamepadEvent.t -> unit [@@js.set "gamepadconnected"]
  val get_gamepaddisconnected: 'tags this -> GamepadEvent.t [@@js.get "gamepaddisconnected"]
  val set_gamepaddisconnected: 'tags this -> GamepadEvent.t -> unit [@@js.set "gamepaddisconnected"]
  val get_hashchange: 'tags this -> HashChangeEvent.t [@@js.get "hashchange"]
  val set_hashchange: 'tags this -> HashChangeEvent.t -> unit [@@js.set "hashchange"]
  val get_languagechange: 'tags this -> Event.t [@@js.get "languagechange"]
  val set_languagechange: 'tags this -> Event.t -> unit [@@js.set "languagechange"]
  val get_message: 'tags this -> MessageEvent.t_0 [@@js.get "message"]
  val set_message: 'tags this -> MessageEvent.t_0 -> unit [@@js.set "message"]
  val get_messageerror: 'tags this -> MessageEvent.t_0 [@@js.get "messageerror"]
  val set_messageerror: 'tags this -> MessageEvent.t_0 -> unit [@@js.set "messageerror"]
  val get_offline: 'tags this -> Event.t [@@js.get "offline"]
  val set_offline: 'tags this -> Event.t -> unit [@@js.set "offline"]
  val get_online: 'tags this -> Event.t [@@js.get "online"]
  val set_online: 'tags this -> Event.t -> unit [@@js.set "online"]
  val get_pagehide: 'tags this -> PageTransitionEvent.t [@@js.get "pagehide"]
  val set_pagehide: 'tags this -> PageTransitionEvent.t -> unit [@@js.set "pagehide"]
  val get_pageshow: 'tags this -> PageTransitionEvent.t [@@js.get "pageshow"]
  val set_pageshow: 'tags this -> PageTransitionEvent.t -> unit [@@js.set "pageshow"]
  val get_popstate: 'tags this -> PopStateEvent.t [@@js.get "popstate"]
  val set_popstate: 'tags this -> PopStateEvent.t -> unit [@@js.set "popstate"]
  val get_rejectionhandled: 'tags this -> PromiseRejectionEvent.t [@@js.get "rejectionhandled"]
  val set_rejectionhandled: 'tags this -> PromiseRejectionEvent.t -> unit [@@js.set "rejectionhandled"]
  val get_storage: 'tags this -> StorageEvent.t [@@js.get "storage"]
  val set_storage: 'tags this -> StorageEvent.t -> unit [@@js.set "storage"]
  val get_unhandledrejection: 'tags this -> PromiseRejectionEvent.t [@@js.get "unhandledrejection"]
  val set_unhandledrejection: 'tags this -> PromiseRejectionEvent.t -> unit [@@js.set "unhandledrejection"]
  val get_unload: 'tags this -> Event.t [@@js.get "unload"]
  val set_unload: 'tags this -> Event.t -> unit [@@js.set "unload"]
  val create: afterprint:Event.t -> beforeprint:Event.t -> beforeunload:BeforeUnloadEvent.t -> gamepadconnected:GamepadEvent.t -> gamepaddisconnected:GamepadEvent.t -> hashchange:HashChangeEvent.t -> languagechange:Event.t -> message:MessageEvent.t_0 -> messageerror:MessageEvent.t_0 -> offline:Event.t -> online:Event.t -> pagehide:PageTransitionEvent.t -> pageshow:PageTransitionEvent.t -> popstate:PopStateEvent.t -> rejectionhandled:PromiseRejectionEvent.t -> storage:StorageEvent.t -> unhandledrejection:PromiseRejectionEvent.t -> unload:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module GlobalEventHandlersEventMap : sig
  type t = [`GlobalEventHandlersEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`GlobalEventHandlersEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`GlobalEventHandlersEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `GlobalEventHandlersEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_abort: 'tags this -> UIEvent.t [@@js.get "abort"]
  val set_abort: 'tags this -> UIEvent.t -> unit [@@js.set "abort"]
  val get_animationcancel: 'tags this -> AnimationEvent.t [@@js.get "animationcancel"]
  val set_animationcancel: 'tags this -> AnimationEvent.t -> unit [@@js.set "animationcancel"]
  val get_animationend: 'tags this -> AnimationEvent.t [@@js.get "animationend"]
  val set_animationend: 'tags this -> AnimationEvent.t -> unit [@@js.set "animationend"]
  val get_animationiteration: 'tags this -> AnimationEvent.t [@@js.get "animationiteration"]
  val set_animationiteration: 'tags this -> AnimationEvent.t -> unit [@@js.set "animationiteration"]
  val get_animationstart: 'tags this -> AnimationEvent.t [@@js.get "animationstart"]
  val set_animationstart: 'tags this -> AnimationEvent.t -> unit [@@js.set "animationstart"]
  val get_auxclick: 'tags this -> MouseEvent.t [@@js.get "auxclick"]
  val set_auxclick: 'tags this -> MouseEvent.t -> unit [@@js.set "auxclick"]
  val get_beforeinput: 'tags this -> InputEvent.t [@@js.get "beforeinput"]
  val set_beforeinput: 'tags this -> InputEvent.t -> unit [@@js.set "beforeinput"]
  val get_beforetoggle: 'tags this -> Event.t [@@js.get "beforetoggle"]
  val set_beforetoggle: 'tags this -> Event.t -> unit [@@js.set "beforetoggle"]
  val get_blur: 'tags this -> FocusEvent.t [@@js.get "blur"]
  val set_blur: 'tags this -> FocusEvent.t -> unit [@@js.set "blur"]
  val get_cancel: 'tags this -> Event.t [@@js.get "cancel"]
  val set_cancel: 'tags this -> Event.t -> unit [@@js.set "cancel"]
  val get_canplay: 'tags this -> Event.t [@@js.get "canplay"]
  val set_canplay: 'tags this -> Event.t -> unit [@@js.set "canplay"]
  val get_canplaythrough: 'tags this -> Event.t [@@js.get "canplaythrough"]
  val set_canplaythrough: 'tags this -> Event.t -> unit [@@js.set "canplaythrough"]
  val get_change: 'tags this -> Event.t [@@js.get "change"]
  val set_change: 'tags this -> Event.t -> unit [@@js.set "change"]
  val get_click: 'tags this -> MouseEvent.t [@@js.get "click"]
  val set_click: 'tags this -> MouseEvent.t -> unit [@@js.set "click"]
  val get_close: 'tags this -> Event.t [@@js.get "close"]
  val set_close: 'tags this -> Event.t -> unit [@@js.set "close"]
  val get_compositionend: 'tags this -> CompositionEvent.t [@@js.get "compositionend"]
  val set_compositionend: 'tags this -> CompositionEvent.t -> unit [@@js.set "compositionend"]
  val get_compositionstart: 'tags this -> CompositionEvent.t [@@js.get "compositionstart"]
  val set_compositionstart: 'tags this -> CompositionEvent.t -> unit [@@js.set "compositionstart"]
  val get_compositionupdate: 'tags this -> CompositionEvent.t [@@js.get "compositionupdate"]
  val set_compositionupdate: 'tags this -> CompositionEvent.t -> unit [@@js.set "compositionupdate"]
  val get_contextmenu: 'tags this -> MouseEvent.t [@@js.get "contextmenu"]
  val set_contextmenu: 'tags this -> MouseEvent.t -> unit [@@js.set "contextmenu"]
  val get_copy: 'tags this -> ClipboardEvent.t [@@js.get "copy"]
  val set_copy: 'tags this -> ClipboardEvent.t -> unit [@@js.set "copy"]
  val get_cuechange: 'tags this -> Event.t [@@js.get "cuechange"]
  val set_cuechange: 'tags this -> Event.t -> unit [@@js.set "cuechange"]
  val get_cut: 'tags this -> ClipboardEvent.t [@@js.get "cut"]
  val set_cut: 'tags this -> ClipboardEvent.t -> unit [@@js.set "cut"]
  val get_dblclick: 'tags this -> MouseEvent.t [@@js.get "dblclick"]
  val set_dblclick: 'tags this -> MouseEvent.t -> unit [@@js.set "dblclick"]
  val get_drag: 'tags this -> DragEvent.t [@@js.get "drag"]
  val set_drag: 'tags this -> DragEvent.t -> unit [@@js.set "drag"]
  val get_dragend: 'tags this -> DragEvent.t [@@js.get "dragend"]
  val set_dragend: 'tags this -> DragEvent.t -> unit [@@js.set "dragend"]
  val get_dragenter: 'tags this -> DragEvent.t [@@js.get "dragenter"]
  val set_dragenter: 'tags this -> DragEvent.t -> unit [@@js.set "dragenter"]
  val get_dragleave: 'tags this -> DragEvent.t [@@js.get "dragleave"]
  val set_dragleave: 'tags this -> DragEvent.t -> unit [@@js.set "dragleave"]
  val get_dragover: 'tags this -> DragEvent.t [@@js.get "dragover"]
  val set_dragover: 'tags this -> DragEvent.t -> unit [@@js.set "dragover"]
  val get_dragstart: 'tags this -> DragEvent.t [@@js.get "dragstart"]
  val set_dragstart: 'tags this -> DragEvent.t -> unit [@@js.set "dragstart"]
  val get_drop: 'tags this -> DragEvent.t [@@js.get "drop"]
  val set_drop: 'tags this -> DragEvent.t -> unit [@@js.set "drop"]
  val get_durationchange: 'tags this -> Event.t [@@js.get "durationchange"]
  val set_durationchange: 'tags this -> Event.t -> unit [@@js.set "durationchange"]
  val get_emptied: 'tags this -> Event.t [@@js.get "emptied"]
  val set_emptied: 'tags this -> Event.t -> unit [@@js.set "emptied"]
  val get_ended: 'tags this -> Event.t [@@js.get "ended"]
  val set_ended: 'tags this -> Event.t -> unit [@@js.set "ended"]
  val get_error: 'tags this -> ErrorEvent.t [@@js.get "error"]
  val set_error: 'tags this -> ErrorEvent.t -> unit [@@js.set "error"]
  val get_focus: 'tags this -> FocusEvent.t [@@js.get "focus"]
  val set_focus: 'tags this -> FocusEvent.t -> unit [@@js.set "focus"]
  val get_focusin: 'tags this -> FocusEvent.t [@@js.get "focusin"]
  val set_focusin: 'tags this -> FocusEvent.t -> unit [@@js.set "focusin"]
  val get_focusout: 'tags this -> FocusEvent.t [@@js.get "focusout"]
  val set_focusout: 'tags this -> FocusEvent.t -> unit [@@js.set "focusout"]
  val get_formdata: 'tags this -> FormDataEvent.t [@@js.get "formdata"]
  val set_formdata: 'tags this -> FormDataEvent.t -> unit [@@js.set "formdata"]
  val get_gotpointercapture: 'tags this -> PointerEvent.t [@@js.get "gotpointercapture"]
  val set_gotpointercapture: 'tags this -> PointerEvent.t -> unit [@@js.set "gotpointercapture"]
  val get_input: 'tags this -> Event.t [@@js.get "input"]
  val set_input: 'tags this -> Event.t -> unit [@@js.set "input"]
  val get_invalid: 'tags this -> Event.t [@@js.get "invalid"]
  val set_invalid: 'tags this -> Event.t -> unit [@@js.set "invalid"]
  val get_keydown: 'tags this -> KeyboardEvent.t [@@js.get "keydown"]
  val set_keydown: 'tags this -> KeyboardEvent.t -> unit [@@js.set "keydown"]
  val get_keypress: 'tags this -> KeyboardEvent.t [@@js.get "keypress"]
  val set_keypress: 'tags this -> KeyboardEvent.t -> unit [@@js.set "keypress"]
  val get_keyup: 'tags this -> KeyboardEvent.t [@@js.get "keyup"]
  val set_keyup: 'tags this -> KeyboardEvent.t -> unit [@@js.set "keyup"]
  val get_load: 'tags this -> Event.t [@@js.get "load"]
  val set_load: 'tags this -> Event.t -> unit [@@js.set "load"]
  val get_loadeddata: 'tags this -> Event.t [@@js.get "loadeddata"]
  val set_loadeddata: 'tags this -> Event.t -> unit [@@js.set "loadeddata"]
  val get_loadedmetadata: 'tags this -> Event.t [@@js.get "loadedmetadata"]
  val set_loadedmetadata: 'tags this -> Event.t -> unit [@@js.set "loadedmetadata"]
  val get_loadstart: 'tags this -> Event.t [@@js.get "loadstart"]
  val set_loadstart: 'tags this -> Event.t -> unit [@@js.set "loadstart"]
  val get_lostpointercapture: 'tags this -> PointerEvent.t [@@js.get "lostpointercapture"]
  val set_lostpointercapture: 'tags this -> PointerEvent.t -> unit [@@js.set "lostpointercapture"]
  val get_mousedown: 'tags this -> MouseEvent.t [@@js.get "mousedown"]
  val set_mousedown: 'tags this -> MouseEvent.t -> unit [@@js.set "mousedown"]
  val get_mouseenter: 'tags this -> MouseEvent.t [@@js.get "mouseenter"]
  val set_mouseenter: 'tags this -> MouseEvent.t -> unit [@@js.set "mouseenter"]
  val get_mouseleave: 'tags this -> MouseEvent.t [@@js.get "mouseleave"]
  val set_mouseleave: 'tags this -> MouseEvent.t -> unit [@@js.set "mouseleave"]
  val get_mousemove: 'tags this -> MouseEvent.t [@@js.get "mousemove"]
  val set_mousemove: 'tags this -> MouseEvent.t -> unit [@@js.set "mousemove"]
  val get_mouseout: 'tags this -> MouseEvent.t [@@js.get "mouseout"]
  val set_mouseout: 'tags this -> MouseEvent.t -> unit [@@js.set "mouseout"]
  val get_mouseover: 'tags this -> MouseEvent.t [@@js.get "mouseover"]
  val set_mouseover: 'tags this -> MouseEvent.t -> unit [@@js.set "mouseover"]
  val get_mouseup: 'tags this -> MouseEvent.t [@@js.get "mouseup"]
  val set_mouseup: 'tags this -> MouseEvent.t -> unit [@@js.set "mouseup"]
  val get_paste: 'tags this -> ClipboardEvent.t [@@js.get "paste"]
  val set_paste: 'tags this -> ClipboardEvent.t -> unit [@@js.set "paste"]
  val get_pause: 'tags this -> Event.t [@@js.get "pause"]
  val set_pause: 'tags this -> Event.t -> unit [@@js.set "pause"]
  val get_play: 'tags this -> Event.t [@@js.get "play"]
  val set_play: 'tags this -> Event.t -> unit [@@js.set "play"]
  val get_playing: 'tags this -> Event.t [@@js.get "playing"]
  val set_playing: 'tags this -> Event.t -> unit [@@js.set "playing"]
  val get_pointercancel: 'tags this -> PointerEvent.t [@@js.get "pointercancel"]
  val set_pointercancel: 'tags this -> PointerEvent.t -> unit [@@js.set "pointercancel"]
  val get_pointerdown: 'tags this -> PointerEvent.t [@@js.get "pointerdown"]
  val set_pointerdown: 'tags this -> PointerEvent.t -> unit [@@js.set "pointerdown"]
  val get_pointerenter: 'tags this -> PointerEvent.t [@@js.get "pointerenter"]
  val set_pointerenter: 'tags this -> PointerEvent.t -> unit [@@js.set "pointerenter"]
  val get_pointerleave: 'tags this -> PointerEvent.t [@@js.get "pointerleave"]
  val set_pointerleave: 'tags this -> PointerEvent.t -> unit [@@js.set "pointerleave"]
  val get_pointermove: 'tags this -> PointerEvent.t [@@js.get "pointermove"]
  val set_pointermove: 'tags this -> PointerEvent.t -> unit [@@js.set "pointermove"]
  val get_pointerout: 'tags this -> PointerEvent.t [@@js.get "pointerout"]
  val set_pointerout: 'tags this -> PointerEvent.t -> unit [@@js.set "pointerout"]
  val get_pointerover: 'tags this -> PointerEvent.t [@@js.get "pointerover"]
  val set_pointerover: 'tags this -> PointerEvent.t -> unit [@@js.set "pointerover"]
  val get_pointerup: 'tags this -> PointerEvent.t [@@js.get "pointerup"]
  val set_pointerup: 'tags this -> PointerEvent.t -> unit [@@js.set "pointerup"]
  val get_progress: 'tags this -> ProgressEvent.t_0 [@@js.get "progress"]
  val set_progress: 'tags this -> ProgressEvent.t_0 -> unit [@@js.set "progress"]
  val get_ratechange: 'tags this -> Event.t [@@js.get "ratechange"]
  val set_ratechange: 'tags this -> Event.t -> unit [@@js.set "ratechange"]
  val get_reset: 'tags this -> Event.t [@@js.get "reset"]
  val set_reset: 'tags this -> Event.t -> unit [@@js.set "reset"]
  val get_resize: 'tags this -> UIEvent.t [@@js.get "resize"]
  val set_resize: 'tags this -> UIEvent.t -> unit [@@js.set "resize"]
  val get_scroll: 'tags this -> Event.t [@@js.get "scroll"]
  val set_scroll: 'tags this -> Event.t -> unit [@@js.set "scroll"]
  val get_scrollend: 'tags this -> Event.t [@@js.get "scrollend"]
  val set_scrollend: 'tags this -> Event.t -> unit [@@js.set "scrollend"]
  val get_securitypolicyviolation: 'tags this -> SecurityPolicyViolationEvent.t [@@js.get "securitypolicyviolation"]
  val set_securitypolicyviolation: 'tags this -> SecurityPolicyViolationEvent.t -> unit [@@js.set "securitypolicyviolation"]
  val get_seeked: 'tags this -> Event.t [@@js.get "seeked"]
  val set_seeked: 'tags this -> Event.t -> unit [@@js.set "seeked"]
  val get_seeking: 'tags this -> Event.t [@@js.get "seeking"]
  val set_seeking: 'tags this -> Event.t -> unit [@@js.set "seeking"]
  val get_select: 'tags this -> Event.t [@@js.get "select"]
  val set_select: 'tags this -> Event.t -> unit [@@js.set "select"]
  val get_selectionchange: 'tags this -> Event.t [@@js.get "selectionchange"]
  val set_selectionchange: 'tags this -> Event.t -> unit [@@js.set "selectionchange"]
  val get_selectstart: 'tags this -> Event.t [@@js.get "selectstart"]
  val set_selectstart: 'tags this -> Event.t -> unit [@@js.set "selectstart"]
  val get_slotchange: 'tags this -> Event.t [@@js.get "slotchange"]
  val set_slotchange: 'tags this -> Event.t -> unit [@@js.set "slotchange"]
  val get_stalled: 'tags this -> Event.t [@@js.get "stalled"]
  val set_stalled: 'tags this -> Event.t -> unit [@@js.set "stalled"]
  val get_submit: 'tags this -> SubmitEvent.t [@@js.get "submit"]
  val set_submit: 'tags this -> SubmitEvent.t -> unit [@@js.set "submit"]
  val get_suspend: 'tags this -> Event.t [@@js.get "suspend"]
  val set_suspend: 'tags this -> Event.t -> unit [@@js.set "suspend"]
  val get_timeupdate: 'tags this -> Event.t [@@js.get "timeupdate"]
  val set_timeupdate: 'tags this -> Event.t -> unit [@@js.set "timeupdate"]
  val get_toggle: 'tags this -> Event.t [@@js.get "toggle"]
  val set_toggle: 'tags this -> Event.t -> unit [@@js.set "toggle"]
  val get_touchcancel: 'tags this -> TouchEvent.t [@@js.get "touchcancel"]
  val set_touchcancel: 'tags this -> TouchEvent.t -> unit [@@js.set "touchcancel"]
  val get_touchend: 'tags this -> TouchEvent.t [@@js.get "touchend"]
  val set_touchend: 'tags this -> TouchEvent.t -> unit [@@js.set "touchend"]
  val get_touchmove: 'tags this -> TouchEvent.t [@@js.get "touchmove"]
  val set_touchmove: 'tags this -> TouchEvent.t -> unit [@@js.set "touchmove"]
  val get_touchstart: 'tags this -> TouchEvent.t [@@js.get "touchstart"]
  val set_touchstart: 'tags this -> TouchEvent.t -> unit [@@js.set "touchstart"]
  val get_transitioncancel: 'tags this -> TransitionEvent.t [@@js.get "transitioncancel"]
  val set_transitioncancel: 'tags this -> TransitionEvent.t -> unit [@@js.set "transitioncancel"]
  val get_transitionend: 'tags this -> TransitionEvent.t [@@js.get "transitionend"]
  val set_transitionend: 'tags this -> TransitionEvent.t -> unit [@@js.set "transitionend"]
  val get_transitionrun: 'tags this -> TransitionEvent.t [@@js.get "transitionrun"]
  val set_transitionrun: 'tags this -> TransitionEvent.t -> unit [@@js.set "transitionrun"]
  val get_transitionstart: 'tags this -> TransitionEvent.t [@@js.get "transitionstart"]
  val set_transitionstart: 'tags this -> TransitionEvent.t -> unit [@@js.set "transitionstart"]
  val get_volumechange: 'tags this -> Event.t [@@js.get "volumechange"]
  val set_volumechange: 'tags this -> Event.t -> unit [@@js.set "volumechange"]
  val get_waiting: 'tags this -> Event.t [@@js.get "waiting"]
  val set_waiting: 'tags this -> Event.t -> unit [@@js.set "waiting"]
  val get_webkitanimationend: 'tags this -> Event.t [@@js.get "webkitanimationend"]
  val set_webkitanimationend: 'tags this -> Event.t -> unit [@@js.set "webkitanimationend"]
  val get_webkitanimationiteration: 'tags this -> Event.t [@@js.get "webkitanimationiteration"]
  val set_webkitanimationiteration: 'tags this -> Event.t -> unit [@@js.set "webkitanimationiteration"]
  val get_webkitanimationstart: 'tags this -> Event.t [@@js.get "webkitanimationstart"]
  val set_webkitanimationstart: 'tags this -> Event.t -> unit [@@js.set "webkitanimationstart"]
  val get_webkittransitionend: 'tags this -> Event.t [@@js.get "webkittransitionend"]
  val set_webkittransitionend: 'tags this -> Event.t -> unit [@@js.set "webkittransitionend"]
  val get_wheel: 'tags this -> WheelEvent.t [@@js.get "wheel"]
  val set_wheel: 'tags this -> WheelEvent.t -> unit [@@js.set "wheel"]
  val create: abort:UIEvent.t -> animationcancel:AnimationEvent.t -> animationend:AnimationEvent.t -> animationiteration:AnimationEvent.t -> animationstart:AnimationEvent.t -> auxclick:MouseEvent.t -> beforeinput:InputEvent.t -> beforetoggle:Event.t -> blur:FocusEvent.t -> cancel:Event.t -> canplay:Event.t -> canplaythrough:Event.t -> change:Event.t -> click:MouseEvent.t -> close:Event.t -> compositionend:CompositionEvent.t -> compositionstart:CompositionEvent.t -> compositionupdate:CompositionEvent.t -> contextmenu:MouseEvent.t -> copy:ClipboardEvent.t -> cuechange:Event.t -> cut:ClipboardEvent.t -> dblclick:MouseEvent.t -> drag:DragEvent.t -> dragend:DragEvent.t -> dragenter:DragEvent.t -> dragleave:DragEvent.t -> dragover:DragEvent.t -> dragstart:DragEvent.t -> drop:DragEvent.t -> durationchange:Event.t -> emptied:Event.t -> ended:Event.t -> error:ErrorEvent.t -> focus:FocusEvent.t -> focusin:FocusEvent.t -> focusout:FocusEvent.t -> formdata:FormDataEvent.t -> gotpointercapture:PointerEvent.t -> input:Event.t -> invalid:Event.t -> keydown:KeyboardEvent.t -> keypress:KeyboardEvent.t -> keyup:KeyboardEvent.t -> load:Event.t -> loadeddata:Event.t -> loadedmetadata:Event.t -> loadstart:Event.t -> lostpointercapture:PointerEvent.t -> mousedown:MouseEvent.t -> mouseenter:MouseEvent.t -> mouseleave:MouseEvent.t -> mousemove:MouseEvent.t -> mouseout:MouseEvent.t -> mouseover:MouseEvent.t -> mouseup:MouseEvent.t -> paste:ClipboardEvent.t -> pause:Event.t -> play:Event.t -> playing:Event.t -> pointercancel:PointerEvent.t -> pointerdown:PointerEvent.t -> pointerenter:PointerEvent.t -> pointerleave:PointerEvent.t -> pointermove:PointerEvent.t -> pointerout:PointerEvent.t -> pointerover:PointerEvent.t -> pointerup:PointerEvent.t -> progress:ProgressEvent.t_0 -> ratechange:Event.t -> reset:Event.t -> resize:UIEvent.t -> scroll:Event.t -> scrollend:Event.t -> securitypolicyviolation:SecurityPolicyViolationEvent.t -> seeked:Event.t -> seeking:Event.t -> select:Event.t -> selectionchange:Event.t -> selectstart:Event.t -> slotchange:Event.t -> stalled:Event.t -> submit:SubmitEvent.t -> suspend:Event.t -> timeupdate:Event.t -> toggle:Event.t -> touchcancel:TouchEvent.t -> touchend:TouchEvent.t -> touchmove:TouchEvent.t -> touchstart:TouchEvent.t -> transitioncancel:TransitionEvent.t -> transitionend:TransitionEvent.t -> transitionrun:TransitionEvent.t -> transitionstart:TransitionEvent.t -> volumechange:Event.t -> waiting:Event.t -> webkitanimationend:Event.t -> webkitanimationiteration:Event.t -> webkitanimationstart:Event.t -> webkittransitionend:Event.t -> wheel:WheelEvent.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module WindowEventMap : sig
  type t = [`GlobalEventHandlersEventMap | `WindowEventHandlersEventMap | `WindowEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`GlobalEventHandlersEventMap | `WindowEventHandlersEventMap | `WindowEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`GlobalEventHandlersEventMap | `WindowEventHandlersEventMap | `WindowEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WindowEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_DOMContentLoaded: 'tags this -> Event.t [@@js.get "DOMContentLoaded"]
  val set_DOMContentLoaded: 'tags this -> Event.t -> unit [@@js.set "DOMContentLoaded"]
  val get_devicemotion: 'tags this -> DeviceMotionEvent.t [@@js.get "devicemotion"]
  val set_devicemotion: 'tags this -> DeviceMotionEvent.t -> unit [@@js.set "devicemotion"]
  val get_deviceorientation: 'tags this -> DeviceOrientationEvent.t [@@js.get "deviceorientation"]
  val set_deviceorientation: 'tags this -> DeviceOrientationEvent.t -> unit [@@js.set "deviceorientation"]
  val get_deviceorientationabsolute: 'tags this -> DeviceOrientationEvent.t [@@js.get "deviceorientationabsolute"]
  val set_deviceorientationabsolute: 'tags this -> DeviceOrientationEvent.t -> unit [@@js.set "deviceorientationabsolute"]
  val get_gamepadconnected: 'tags this -> GamepadEvent.t [@@js.get "gamepadconnected"]
  val set_gamepadconnected: 'tags this -> GamepadEvent.t -> unit [@@js.set "gamepadconnected"]
  val get_gamepaddisconnected: 'tags this -> GamepadEvent.t [@@js.get "gamepaddisconnected"]
  val set_gamepaddisconnected: 'tags this -> GamepadEvent.t -> unit [@@js.set "gamepaddisconnected"]
  val get_orientationchange: 'tags this -> Event.t [@@js.get "orientationchange"]
  val set_orientationchange: 'tags this -> Event.t -> unit [@@js.set "orientationchange"]
  val create: dOMContentLoaded:(Event.t[@js "DOMContentLoaded"]) -> devicemotion:DeviceMotionEvent.t -> deviceorientation:DeviceOrientationEvent.t -> deviceorientationabsolute:DeviceOrientationEvent.t -> gamepadconnected:GamepadEvent.t -> gamepaddisconnected:GamepadEvent.t -> orientationchange:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module WebTransportErrorSource : sig
  type t = ([`L_s877_session[@js "session"] | `L_s925_stream[@js "stream"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module WebTransportErrorOptions : sig
  type t = [`WebTransportErrorOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebTransportErrorOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebTransportErrorOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebTransportErrorOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_source: 'tags this -> WebTransportErrorSource.t option [@@js.get "source"]
  val set_source: 'tags this -> WebTransportErrorSource.t -> unit [@@js.set "source"]
  val get_streamErrorCode: 'tags this -> float option [@@js.get "streamErrorCode"]
  val set_streamErrorCode: 'tags this -> float option -> unit [@@js.set "streamErrorCode"]
  val create: ?source:WebTransportErrorSource.t -> ?streamErrorCode:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebTransportError)
*)
module[@js.scope "WebTransportError"] WebTransportError : sig
  type t = [`DOMException | `WebTransportError] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DOMException | `WebTransportError]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DOMException | `WebTransportError]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebTransportError ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebTransportError/source) *)
  val get_source: 'tags this -> WebTransportErrorSource.t [@@js.get "source"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebTransportError/streamErrorCode) *)
  val get_streamErrorCode: 'tags this -> float option [@@js.get "streamErrorCode"]
  val create: source:WebTransportErrorSource.t -> ?streamErrorCode:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': ?message:string -> ?options:WebTransportErrorOptions.t -> unit -> t [@@js.create]
end
module WebTransportSendStreamOptions : sig
  type t = [`WebTransportSendStreamOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebTransportSendStreamOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebTransportSendStreamOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebTransportSendStreamOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_sendOrder: 'tags this -> float option [@@js.get "sendOrder"]
  val set_sendOrder: 'tags this -> float -> unit [@@js.set "sendOrder"]
  val create: ?sendOrder:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module WebTransportHash : sig
  type t = [`WebTransportHash] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebTransportHash]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebTransportHash]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebTransportHash ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_algorithm: 'tags this -> string option [@@js.get "algorithm"]
  val set_algorithm: 'tags this -> string -> unit [@@js.set "algorithm"]
  val get_value: 'tags this -> BufferSource.t option [@@js.get "value"]
  val set_value: 'tags this -> BufferSource.t -> unit [@@js.set "value"]
  val create: ?algorithm:string -> ?value:BufferSource.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module WebTransportCongestionControl : sig
  type t = ([`L_s305_default[@js "default"] | `L_s582_low_latency[@js "low-latency"] | `L_s974_throughput[@js "throughput"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module WebTransportOptions : sig
  type t = [`WebTransportOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebTransportOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebTransportOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebTransportOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_allowPooling: 'tags this -> bool option [@@js.get "allowPooling"]
  val set_allowPooling: 'tags this -> bool -> unit [@@js.set "allowPooling"]
  val get_congestionControl: 'tags this -> WebTransportCongestionControl.t option [@@js.get "congestionControl"]
  val set_congestionControl: 'tags this -> WebTransportCongestionControl.t -> unit [@@js.set "congestionControl"]
  val get_requireUnreliable: 'tags this -> bool option [@@js.get "requireUnreliable"]
  val set_requireUnreliable: 'tags this -> bool -> unit [@@js.set "requireUnreliable"]
  val get_serverCertificateHashes: 'tags this -> WebTransportHash.t list option [@@js.get "serverCertificateHashes"]
  val set_serverCertificateHashes: 'tags this -> WebTransportHash.t list -> unit [@@js.set "serverCertificateHashes"]
  val create: ?allowPooling:bool -> ?congestionControl:WebTransportCongestionControl.t -> ?requireUnreliable:bool -> ?serverCertificateHashes:WebTransportHash.t list -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream)
*)
module[@js.scope "WebTransportDatagramDuplexStream"] WebTransportDatagramDuplexStream : sig
  type t = [`WebTransportDatagramDuplexStream] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebTransportDatagramDuplexStream]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebTransportDatagramDuplexStream]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebTransportDatagramDuplexStream ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/incomingHighWaterMark) *)
  val get_incomingHighWaterMark: 'tags this -> float [@@js.get "incomingHighWaterMark"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/incomingHighWaterMark) *)
  val set_incomingHighWaterMark: 'tags this -> float -> unit [@@js.set "incomingHighWaterMark"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/incomingMaxAge) *)
  val get_incomingMaxAge: 'tags this -> float option [@@js.get "incomingMaxAge"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/incomingMaxAge) *)
  val set_incomingMaxAge: 'tags this -> float option -> unit [@@js.set "incomingMaxAge"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/maxDatagramSize) *)
  val get_maxDatagramSize: 'tags this -> float [@@js.get "maxDatagramSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/outgoingHighWaterMark) *)
  val get_outgoingHighWaterMark: 'tags this -> float [@@js.get "outgoingHighWaterMark"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/outgoingHighWaterMark) *)
  val set_outgoingHighWaterMark: 'tags this -> float -> unit [@@js.set "outgoingHighWaterMark"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/outgoingMaxAge) *)
  val get_outgoingMaxAge: 'tags this -> float option [@@js.get "outgoingMaxAge"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/outgoingMaxAge) *)
  val set_outgoingMaxAge: 'tags this -> float option -> unit [@@js.set "outgoingMaxAge"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/readable) *)
  val get_readable: 'tags this -> ReadableStream.t_0 [@@js.get "readable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/writable) *)
  val get_writable: 'tags this -> WritableStream.t_0 [@@js.get "writable"]
  val create: incomingHighWaterMark:float -> ?incomingMaxAge:float -> maxDatagramSize:float -> outgoingHighWaterMark:float -> ?outgoingMaxAge:float -> readable:ReadableStream.t_0 -> writable:WritableStream.t_0 -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end
module WebTransportCloseInfo : sig
  type t = [`WebTransportCloseInfo] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebTransportCloseInfo]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebTransportCloseInfo]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebTransportCloseInfo ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_closeCode: 'tags this -> float option [@@js.get "closeCode"]
  val set_closeCode: 'tags this -> float -> unit [@@js.set "closeCode"]
  val get_reason: 'tags this -> string option [@@js.get "reason"]
  val set_reason: 'tags this -> string -> unit [@@js.set "reason"]
  val create: ?closeCode:float -> ?reason:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebTransportBidirectionalStream)
*)
module[@js.scope "WebTransportBidirectionalStream"] WebTransportBidirectionalStream : sig
  type t = [`WebTransportBidirectionalStream] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebTransportBidirectionalStream]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebTransportBidirectionalStream]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebTransportBidirectionalStream ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebTransportBidirectionalStream/readable) *)
  val get_readable: 'tags this -> ReadableStream.t_0 [@@js.get "readable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebTransportBidirectionalStream/writable) *)
  val get_writable: 'tags this -> WritableStream.t_0 [@@js.get "writable"]
  val create: readable:ReadableStream.t_0 -> writable:WritableStream.t_0 -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebTransport)
*)
module[@js.scope "WebTransport"] WebTransport : sig
  type t = [`WebTransport] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebTransport]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebTransport]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebTransport ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebTransport/closed) *)
  val get_closed: 'tags this -> WebTransportCloseInfo.t Promise.t [@@js.get "closed"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebTransport/datagrams) *)
  val get_datagrams: 'tags this -> WebTransportDatagramDuplexStream.t [@@js.get "datagrams"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebTransport/incomingBidirectionalStreams) *)
  val get_incomingBidirectionalStreams: 'tags this -> ReadableStream.t_0 [@@js.get "incomingBidirectionalStreams"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebTransport/incomingUnidirectionalStreams) *)
  val get_incomingUnidirectionalStreams: 'tags this -> ReadableStream.t_0 [@@js.get "incomingUnidirectionalStreams"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebTransport/ready) *)
  val get_ready: 'tags this -> undefined Promise.t [@@js.get "ready"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebTransport/close) *)
  val close: 'tags this -> ?closeInfo:WebTransportCloseInfo.t -> unit -> unit [@@js.call "close"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebTransport/createBidirectionalStream) *)
  val createBidirectionalStream: 'tags this -> ?options:WebTransportSendStreamOptions.t -> unit -> WebTransportBidirectionalStream.t Promise.t [@@js.call "createBidirectionalStream"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebTransport/createUnidirectionalStream) *)
  val createUnidirectionalStream: 'tags this -> ?options:WebTransportSendStreamOptions.t -> unit -> WritableStream.t_0 Promise.t [@@js.call "createUnidirectionalStream"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: url:([`U1 of string | `U2 of URL.t] [@js.union]) -> ?options:WebTransportOptions.t -> unit -> t [@@js.create]
end
module WebSocketEventMap : sig
  type t = [`WebSocketEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebSocketEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebSocketEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebSocketEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_close: 'tags this -> CloseEvent.t [@@js.get "close"]
  val set_close: 'tags this -> CloseEvent.t -> unit [@@js.set "close"]
  val get_error: 'tags this -> Event.t [@@js.get "error"]
  val set_error: 'tags this -> Event.t -> unit [@@js.set "error"]
  val get_message: 'tags this -> MessageEvent.t_0 [@@js.get "message"]
  val set_message: 'tags this -> MessageEvent.t_0 -> unit [@@js.set "message"]
  val get_open: 'tags this -> Event.t [@@js.get "open"]
  val set_open: 'tags this -> Event.t -> unit [@@js.set "open"]
  val create: close:CloseEvent.t -> error:Event.t -> message:MessageEvent.t_0 -> open_:(Event.t[@js "open"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebSocket)
*)
module[@js.scope "WebSocket"] WebSocket : sig
  type t = [`EventTarget | `WebSocket] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `WebSocket]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `WebSocket]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebSocket ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns a string that indicates how binary data from the WebSocket object is exposed to scripts:
    
    Can be set, to change how binary data is returned. The default is "blob".
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebSocket/binaryType)
  *)
  val get_binaryType: 'tags this -> BinaryType.t [@@js.get "binaryType"]
  
  (**
    Returns a string that indicates how binary data from the WebSocket object is exposed to scripts:
    
    Can be set, to change how binary data is returned. The default is "blob".
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebSocket/binaryType)
  *)
  val set_binaryType: 'tags this -> BinaryType.t -> unit [@@js.set "binaryType"]
  
  (**
    Returns the number of bytes of application data (UTF-8 text and binary data) that have been queued using send() but not yet been transmitted to the network.
    
    If the WebSocket connection is closed, this attribute's value will only increase with each call to the send() method. (The number does not reset to zero once the connection closes.)
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebSocket/bufferedAmount)
  *)
  val get_bufferedAmount: 'tags this -> float [@@js.get "bufferedAmount"]
  
  (**
    Returns the extensions selected by the server, if any.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebSocket/extensions)
  *)
  val get_extensions: 'tags this -> string [@@js.get "extensions"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebSocket/close_event) *)
  val get_onclose: 'tags this -> (this:t -> ev:CloseEvent.t -> any) option [@@js.get "onclose"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebSocket/close_event) *)
  val set_onclose: 'tags this -> (this:t -> ev:CloseEvent.t -> any) option -> unit [@@js.set "onclose"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebSocket/error_event) *)
  val get_onerror: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebSocket/error_event) *)
  val set_onerror: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebSocket/message_event) *)
  val get_onmessage: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option [@@js.get "onmessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebSocket/message_event) *)
  val set_onmessage: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit [@@js.set "onmessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebSocket/open_event) *)
  val get_onopen: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onopen"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebSocket/open_event) *)
  val set_onopen: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onopen"]
  
  (**
    Returns the subprotocol selected by the server, if any. It can be used in conjunction with the array form of the constructor's second argument to perform subprotocol negotiation.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebSocket/protocol)
  *)
  val get_protocol: 'tags this -> string [@@js.get "protocol"]
  
  (**
    Returns the state of the WebSocket object's connection. It can have the values described below.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebSocket/readyState)
  *)
  val get_readyState: 'tags this -> float [@@js.get "readyState"]
  
  (**
    Returns the URL that was used to establish the WebSocket connection.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebSocket/url)
  *)
  val get_url: 'tags this -> string [@@js.get "url"]
  
  (**
    Closes the WebSocket connection, optionally using code as the the WebSocket connection close code and reason as the the WebSocket connection close reason.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebSocket/close)
  *)
  val close: 'tags this -> ?code:float -> ?reason:string -> unit -> unit [@@js.call "close"]
  
  (**
    Transmits data using the WebSocket connection. data can be a string, a Blob, an ArrayBuffer, or an ArrayBufferView.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WebSocket/send)
  *)
  val send: 'tags this -> data:([`U1 of string | `U2 of ArrayBufferLike.t | `U3 of Blob.t | `U4 of ArrayBufferView.t] [@js.union]) -> unit [@@js.call "send"]
  val get_CONNECTING: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "CONNECTING"]
  val get_OPEN: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "OPEN"]
  val get_CLOSING: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "CLOSING"]
  val get_CLOSED: 'tags this -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "CLOSED"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'WebSocketEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'WebSocketEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: url:([`U1 of string | `U2 of URL.t] [@js.union]) -> ?protocols:([`U1 of string | `U2 of string list] [@js.union]) -> unit -> t [@@js.create]
  val connecting: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "CONNECTING"]
  val open_: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "OPEN"]
  val closing: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "CLOSING"]
  val closed: unit -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "CLOSED"]
end
module[@js.scope "WebKitCSSMatrix"] WebKitCSSMatrix : sig
  type t = DOMMatrix.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val prototype: unit -> DOMMatrix.t [@@js.get "prototype"]
  val create: ?init:([`U1 of string | `U2 of float list] [@js.union]) -> unit -> DOMMatrix.t [@@js.create]
  val fromFloat32Array: Float32Array.t -> DOMMatrix.t [@@js.global "fromFloat32Array"]
  val fromFloat64Array: Float64Array.t -> DOMMatrix.t [@@js.global "fromFloat64Array"]
  val fromMatrix: ?other:DOMMatrixInit.t -> unit -> DOMMatrix.t [@@js.global "fromMatrix"]
end
module[@js.scope "WebAssembly"] WebAssembly : sig
  module ImportExportKind : sig
    type t = ([`L_s444_function[@js "function"] | `L_s453_global[@js "global"] | `L_s608_memory[@js "memory"] | `L_s951_table[@js "table"]] [@js.enum])
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
  end
  module ModuleImportDescriptor : sig
    type t = [`WebAssembly_ModuleImportDescriptor] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    [@@@js.stop]
    type tags = [`WebAssembly_ModuleImportDescriptor]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`WebAssembly_ModuleImportDescriptor]
    ]
    type 'tags this = 'tags intf constraint 'tags = [> `WebAssembly_ModuleImportDescriptor ]
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    val get_kind: 'tags this -> ImportExportKind.t [@@js.get "kind"]
    val set_kind: 'tags this -> ImportExportKind.t -> unit [@@js.set "kind"]
    val get_module: 'tags this -> string [@@js.get "module"]
    val set_module: 'tags this -> string -> unit [@@js.set "module"]
    val get_name: 'tags this -> string [@@js.get "name"]
    val set_name: 'tags this -> string -> unit [@@js.set "name"]
    val create: kind:ImportExportKind.t -> module_:(string[@js "module"]) -> name:string -> unit -> t [@@js.builder]
    val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  end
  module ModuleExportDescriptor : sig
    type t = [`WebAssembly_ModuleExportDescriptor] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    [@@@js.stop]
    type tags = [`WebAssembly_ModuleExportDescriptor]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`WebAssembly_ModuleExportDescriptor]
    ]
    type 'tags this = 'tags intf constraint 'tags = [> `WebAssembly_ModuleExportDescriptor ]
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    val get_kind: 'tags this -> ImportExportKind.t [@@js.get "kind"]
    val set_kind: 'tags this -> ImportExportKind.t -> unit [@@js.set "kind"]
    val get_name: 'tags this -> string [@@js.get "name"]
    val set_name: 'tags this -> string -> unit [@@js.set "name"]
    val create: kind:ImportExportKind.t -> name:string -> unit -> t [@@js.builder]
    val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  end
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Module) *)
  module[@js.scope "Module"] Module : sig
    type t = [`WebAssembly_Module] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    [@@@js.stop]
    type tags = [`WebAssembly_Module]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`WebAssembly_Module]
    ]
    type 'tags this = 'tags intf constraint 'tags = [> `WebAssembly_Module ]
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
    val prototype: unit -> t [@@js.get "prototype"]
    val create: BufferSource.t -> t [@@js.create]
    
    (** \[MDN Reference\](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Module/customSections_static) *)
    val customSections: moduleObject:t -> sectionName:string -> ArrayBuffer.t list [@@js.global "customSections"]
    
    (** \[MDN Reference\](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Module/exports_static) *)
    val exports: t -> ModuleExportDescriptor.t list [@@js.global "exports"]
    
    (** \[MDN Reference\](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Module/imports_static) *)
    val imports: t -> ModuleImportDescriptor.t list [@@js.global "imports"]
  end
  module TableKind : sig
    type t = ([`L_s155_anyfunc[@js "anyfunc"] | `L_s381_externref[@js "externref"]] [@js.enum])
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
  end
  module TableDescriptor : sig
    type t = [`WebAssembly_TableDescriptor] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    [@@@js.stop]
    type tags = [`WebAssembly_TableDescriptor]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`WebAssembly_TableDescriptor]
    ]
    type 'tags this = 'tags intf constraint 'tags = [> `WebAssembly_TableDescriptor ]
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    val get_element: 'tags this -> TableKind.t [@@js.get "element"]
    val set_element: 'tags this -> TableKind.t -> unit [@@js.set "element"]
    val get_initial: 'tags this -> float [@@js.get "initial"]
    val set_initial: 'tags this -> float -> unit [@@js.set "initial"]
    val get_maximum: 'tags this -> float option [@@js.get "maximum"]
    val set_maximum: 'tags this -> float -> unit [@@js.set "maximum"]
    val create: element:TableKind.t -> initial:float -> ?maximum:float -> unit -> t [@@js.builder]
    val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  end
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Table) *)
  module[@js.scope "Table"] Table : sig
    type t = [`WebAssembly_Table] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    [@@@js.stop]
    type tags = [`WebAssembly_Table]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`WebAssembly_Table]
    ]
    type 'tags this = 'tags intf constraint 'tags = [> `WebAssembly_Table ]
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    
    (** \[MDN Reference\](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Table/length) *)
    val get_length: 'tags this -> float [@@js.get "length"]
    
    (** \[MDN Reference\](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Table/get) *)
    val get_: 'tags this -> index:float -> any [@@js.call "get"]
    
    (** \[MDN Reference\](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Table/grow) *)
    val grow: 'tags this -> delta:float -> ?value:any -> unit -> float [@@js.call "grow"]
    
    (** \[MDN Reference\](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Table/set) *)
    val set_: 'tags this -> index:float -> ?value:any -> unit -> unit [@@js.call "set"]
    val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
    val prototype: unit -> t [@@js.get "prototype"]
    val create: descriptor:TableDescriptor.t -> ?value:any -> unit -> t [@@js.create]
  end
  module MemoryDescriptor : sig
    type t = [`WebAssembly_MemoryDescriptor] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    [@@@js.stop]
    type tags = [`WebAssembly_MemoryDescriptor]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`WebAssembly_MemoryDescriptor]
    ]
    type 'tags this = 'tags intf constraint 'tags = [> `WebAssembly_MemoryDescriptor ]
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    val get_initial: 'tags this -> float [@@js.get "initial"]
    val set_initial: 'tags this -> float -> unit [@@js.set "initial"]
    val get_maximum: 'tags this -> float option [@@js.get "maximum"]
    val set_maximum: 'tags this -> float -> unit [@@js.set "maximum"]
    val get_shared: 'tags this -> bool option [@@js.get "shared"]
    val set_shared: 'tags this -> bool -> unit [@@js.set "shared"]
    val create: initial:float -> ?maximum:float -> ?shared:bool -> unit -> t [@@js.builder]
    val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  end
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Memory) *)
  module[@js.scope "Memory"] Memory : sig
    type t = [`WebAssembly_Memory] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    [@@@js.stop]
    type tags = [`WebAssembly_Memory]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`WebAssembly_Memory]
    ]
    type 'tags this = 'tags intf constraint 'tags = [> `WebAssembly_Memory ]
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    
    (** \[MDN Reference\](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Memory/buffer) *)
    val get_buffer: 'tags this -> ArrayBuffer.t [@@js.get "buffer"]
    
    (** \[MDN Reference\](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Memory/grow) *)
    val grow: 'tags this -> delta:float -> float [@@js.call "grow"]
    val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
    val prototype: unit -> t [@@js.get "prototype"]
    val create: MemoryDescriptor.t -> t [@@js.create]
  end
  module ValueType : sig
    type t = ([`L_s1029_v128[@js "v128"] | `L_s155_anyfunc[@js "anyfunc"] | `L_s381_externref[@js "externref"] | `L_s384_f32[@js "f32"] | `L_s385_f64[@js "f64"] | `L_s497_i32[@js "i32"] | `L_s498_i64[@js "i64"]] [@js.enum])
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
  end
  module GlobalDescriptor : sig
    type 'T t = [`WebAssembly_GlobalDescriptor of 'T] intf [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
    type t_0 = ValueType.t t
    [@@@js.stop]
    type 'T tags = [`WebAssembly_GlobalDescriptor of 'T]
    type tags_0 = ValueType.t tags
    [@@@js.start]
    [@@@js.implem 
      type 'T tags = [`WebAssembly_GlobalDescriptor of 'T]
      type tags_0 = ValueType.t tags
    ]
    type ('tags, 'T) this = 'tags intf constraint 'tags = [> `WebAssembly_GlobalDescriptor of 'T ]
    val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
    val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    val get_mutable: ('tags, 'T) this -> bool option [@@js.get "mutable"]
    val set_mutable: ('tags, 'T) this -> bool -> unit [@@js.set "mutable"]
    val get_value: ('tags, 'T) this -> 'T [@@js.get "value"]
    val set_value: ('tags, 'T) this -> 'T -> unit [@@js.set "value"]
    val create: ?mutable_:(bool[@js "mutable"]) -> value:'T -> unit -> 'T t [@@js.builder]
    val cast_from: ('tags, 'T) this -> 'T t [@@js.custom let cast_from = Obj.magic]
  end
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Global) *)
  module[@js.scope "Global"] Global : sig
    type 'T t = [`WebAssembly_Global of 'T] intf [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
    type t_0 = ValueType.t t
    [@@@js.stop]
    type 'T tags = [`WebAssembly_Global of 'T]
    type tags_0 = ValueType.t tags
    [@@@js.start]
    [@@@js.implem 
      type 'T tags = [`WebAssembly_Global of 'T]
      type tags_0 = ValueType.t tags
    ]
    type ('tags, 'T) this = 'tags intf constraint 'tags = [> `WebAssembly_Global of 'T ]
    val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
    val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    
    (** \[MDN Reference\](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Global/value) *)
    val get_value: ('tags, 'T) this -> (* FIXME: unknown type 'ValueTypeMap[T]' *)any [@@js.get "value"]
    
    (** \[MDN Reference\](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Global/value) *)
    val set_value: ('tags, 'T) this -> (* FIXME: unknown type 'ValueTypeMap[T]' *)any -> unit [@@js.set "value"]
    
    (** \[MDN Reference\](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Global/valueOf) *)
    val valueOf: ('tags, 'T) this -> (* FIXME: unknown type 'ValueTypeMap[T]' *)any [@@js.call "valueOf"]
    val cast_from: ('tags, 'T) this -> 'T t [@@js.custom let cast_from = Obj.magic]
    val prototype: unit -> t_0 [@@js.get "prototype"]
    val create: descriptor:'T GlobalDescriptor.t -> ?v:(* FIXME: unknown type 'ValueTypeMap[T]' *)any -> unit -> 'T t [@@js.create]
  end
  module ExportValue : sig
    type t = (untyped_function, Global.t_0, Memory.t, Table.t) union4
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
  end
  module ImportValue : sig
    type t = ([`Number of float | `Other of ExportValue.t] [@js.union on_field "dummy"]) Primitive.t
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
  end
  module ModuleImports : sig
    type t = (string, ImportValue.t) Record.t
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
  end
  module Imports : sig
    type t = (string, ModuleImports.t) Record.t
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
  end
  module Exports : sig
    type t = (string, ExportValue.t) Record.t
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
  end
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Instance) *)
  module[@js.scope "Instance"] Instance : sig
    type t = [`WebAssembly_Instance] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    [@@@js.stop]
    type tags = [`WebAssembly_Instance]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`WebAssembly_Instance]
    ]
    type 'tags this = 'tags intf constraint 'tags = [> `WebAssembly_Instance ]
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    
    (** \[MDN Reference\](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Instance/exports) *)
    val get_exports: 'tags this -> Exports.t [@@js.get "exports"]
    val create: exports:Exports.t -> unit -> t [@@js.builder]
    val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
    val prototype: unit -> t [@@js.get "prototype"]
    val create': module_:Module.t -> ?importObject:Imports.t -> unit -> t [@@js.create]
  end
  module WebAssemblyInstantiatedSource : sig
    type t = [`WebAssembly_WebAssemblyInstantiatedSource] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    [@@@js.stop]
    type tags = [`WebAssembly_WebAssemblyInstantiatedSource]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`WebAssembly_WebAssemblyInstantiatedSource]
    ]
    type 'tags this = 'tags intf constraint 'tags = [> `WebAssembly_WebAssemblyInstantiatedSource ]
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    val get_instance: 'tags this -> Instance.t [@@js.get "instance"]
    val set_instance: 'tags this -> Instance.t -> unit [@@js.set "instance"]
    val get_module: 'tags this -> Module.t [@@js.get "module"]
    val set_module: 'tags this -> Module.t -> unit [@@js.set "module"]
    val create: instance:Instance.t -> module_:(Module.t[@js "module"]) -> unit -> t [@@js.builder]
    val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  end
  module ValueTypeMap : sig
    type t = [`WebAssembly_ValueTypeMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    [@@@js.stop]
    type tags = [`WebAssembly_ValueTypeMap]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`WebAssembly_ValueTypeMap]
    ]
    type 'tags this = 'tags intf constraint 'tags = [> `WebAssembly_ValueTypeMap ]
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    val get_anyfunc: 'tags this -> untyped_function [@@js.get "anyfunc"]
    val set_anyfunc: 'tags this -> untyped_function -> unit [@@js.set "anyfunc"]
    val get_externref: 'tags this -> any [@@js.get "externref"]
    val set_externref: 'tags this -> any -> unit [@@js.set "externref"]
    val get_f32: 'tags this -> float [@@js.get "f32"]
    val set_f32: 'tags this -> float -> unit [@@js.set "f32"]
    val get_f64: 'tags this -> float [@@js.get "f64"]
    val set_f64: 'tags this -> float -> unit [@@js.set "f64"]
    val get_i32: 'tags this -> float [@@js.get "i32"]
    val set_i32: 'tags this -> float -> unit [@@js.set "i32"]
    val get_i64: 'tags this -> bigint [@@js.get "i64"]
    val set_i64: 'tags this -> bigint -> unit [@@js.set "i64"]
    val get_v128: 'tags this -> never [@@js.get "v128"]
    val set_v128: 'tags this -> never -> unit [@@js.set "v128"]
    val create: anyfunc:untyped_function -> externref:any -> f32:float -> f64:float -> i32:float -> i64:bigint -> v128:never -> unit -> t [@@js.builder]
    val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  end
  module[@js.scope "RuntimeError"] RuntimeError : sig
    type t = [`WebAssembly_RuntimeError] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    [@@@js.stop]
    type tags = [`WebAssembly_RuntimeError]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`WebAssembly_RuntimeError]
    ]
    type 'tags this = 'tags intf constraint 'tags = [> `WebAssembly_RuntimeError ]
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
    val prototype: unit -> t [@@js.get "prototype"]
    val create: ?message:string -> unit -> t [@@js.create]
    val invoke: ?message:string -> unit -> t [@@js.invoke]
  end
  module[@js.scope "LinkError"] LinkError : sig
    type t = [`WebAssembly_LinkError] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    [@@@js.stop]
    type tags = [`WebAssembly_LinkError]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`WebAssembly_LinkError]
    ]
    type 'tags this = 'tags intf constraint 'tags = [> `WebAssembly_LinkError ]
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
    val prototype: unit -> t [@@js.get "prototype"]
    val create: ?message:string -> unit -> t [@@js.create]
    val invoke: ?message:string -> unit -> t [@@js.invoke]
  end
  module[@js.scope "CompileError"] CompileError : sig
    type t = [`WebAssembly_CompileError] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    [@@@js.stop]
    type tags = [`WebAssembly_CompileError]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`WebAssembly_CompileError]
    ]
    type 'tags this = 'tags intf constraint 'tags = [> `WebAssembly_CompileError ]
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
    val prototype: unit -> t [@@js.get "prototype"]
    val create: ?message:string -> unit -> t [@@js.create]
    val invoke: ?message:string -> unit -> t [@@js.invoke]
  end
  module Global_Make (T : Ojs.T) : sig
    type 'T parent = 'T Global.t
    type t = T.t parent
    val t_of_js: Ojs.t -> t
    val t_to_js: t -> Ojs.t
    
    
    (** \[MDN Reference\](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Global/value) *)
    val get_value: t -> (* FIXME: unknown type 'ValueTypeMap[T]' *)any [@@js.get "value"]
    
    (** \[MDN Reference\](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Global/value) *)
    val set_value: t -> (* FIXME: unknown type 'ValueTypeMap[T]' *)any -> unit [@@js.set "value"]
    
    (** \[MDN Reference\](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/Global/valueOf) *)
    val valueOf: t -> (* FIXME: unknown type 'ValueTypeMap[T]' *)any [@@js.call "valueOf"]
  end
  module GlobalDescriptor_Make (T : Ojs.T) : sig
    type 'T parent = 'T GlobalDescriptor.t
    type t = T.t parent
    val t_of_js: Ojs.t -> t
    val t_to_js: t -> Ojs.t
    
    val get_mutable: t -> bool option [@@js.get "mutable"]
    val set_mutable: t -> bool -> unit [@@js.set "mutable"]
    val get_value: t -> T.t [@@js.get "value"]
    val set_value: t -> T.t -> unit [@@js.set "value"]
  end
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/compile_static) *)
  val compile: BufferSource.t -> Module.t Promise.t [@@js.global "compile"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/compileStreaming_static) *)
  val compileStreaming: (Response.t, Response.t PromiseLike.t) union2 -> Module.t Promise.t [@@js.global "compileStreaming"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/instantiate_static) *)
  val instantiate: bytes:BufferSource.t -> ?importObject:Imports.t -> unit -> WebAssemblyInstantiatedSource.t Promise.t [@@js.global "instantiate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/instantiate_static) *)
  val instantiate': moduleObject:Module.t -> ?importObject:Imports.t -> unit -> Instance.t Promise.t [@@js.global "instantiate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/instantiateStreaming_static) *)
  val instantiateStreaming: source:(Response.t, Response.t PromiseLike.t) union2 -> ?importObject:Imports.t -> unit -> WebAssemblyInstantiatedSource.t Promise.t [@@js.global "instantiateStreaming"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/WebAssembly/JavaScript_interface/validate_static) *)
  val validate: BufferSource.t -> bool [@@js.global "validate"]
end
module WakeLockSentinelEventMap : sig
  type t = [`WakeLockSentinelEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WakeLockSentinelEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WakeLockSentinelEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WakeLockSentinelEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_release: 'tags this -> Event.t [@@js.get "release"]
  val set_release: 'tags this -> Event.t -> unit [@@js.set "release"]
  val create: release:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module VisualViewportEventMap : sig
  type t = [`VisualViewportEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VisualViewportEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VisualViewportEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VisualViewportEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_resize: 'tags this -> Event.t [@@js.get "resize"]
  val set_resize: 'tags this -> Event.t -> unit [@@js.set "resize"]
  val get_scroll: 'tags this -> Event.t [@@js.get "scroll"]
  val set_scroll: 'tags this -> Event.t -> unit [@@js.set "scroll"]
  val create: resize:Event.t -> scroll:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module VideoFacingModeEnum : sig
  type t = ([`L_s1027_user[@js "user"] | `L_s370_environment[@js "environment"] | `L_s552_left[@js "left"] | `L_s832_right[@js "right"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module VideoEncoderEventMap : sig
  type t = [`VideoEncoderEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VideoEncoderEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VideoEncoderEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoEncoderEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_dequeue: 'tags this -> Event.t [@@js.get "dequeue"]
  val set_dequeue: 'tags this -> Event.t -> unit [@@js.set "dequeue"]
  val create: dequeue:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module VideoEncoderBitrateMode : sig
  type t = ([`L_s1031_variable[@js "variable"] | `L_s277_constant[@js "constant"] | `L_s791_quantizer[@js "quantizer"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module LatencyMode : sig
  type t = ([`L_s790_quality[@js "quality"] | `L_s799_realtime[@js "realtime"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module HardwareAcceleration : sig
  type t = ([`L_s678_no_preference[@js "no-preference"] | `L_s770_prefer_hardware[@js "prefer-hardware"] | `L_s771_prefer_software[@js "prefer-software"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module AvcBitstreamFormat : sig
  type t = ([`L_s151_annexb[@js "annexb"] | `L_s176_avc[@js "avc"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module AvcEncoderConfig : sig
  type t = [`AvcEncoderConfig] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AvcEncoderConfig]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AvcEncoderConfig]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AvcEncoderConfig ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_format: 'tags this -> AvcBitstreamFormat.t option [@@js.get "format"]
  val set_format: 'tags this -> AvcBitstreamFormat.t -> unit [@@js.set "format"]
  val create: ?format:AvcBitstreamFormat.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module VideoEncoderConfig : sig
  type t = [`VideoEncoderConfig] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VideoEncoderConfig]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VideoEncoderConfig]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoEncoderConfig ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_alpha: 'tags this -> AlphaOption.t option [@@js.get "alpha"]
  val set_alpha: 'tags this -> AlphaOption.t -> unit [@@js.set "alpha"]
  val get_avc: 'tags this -> AvcEncoderConfig.t option [@@js.get "avc"]
  val set_avc: 'tags this -> AvcEncoderConfig.t -> unit [@@js.set "avc"]
  val get_bitrate: 'tags this -> float option [@@js.get "bitrate"]
  val set_bitrate: 'tags this -> float -> unit [@@js.set "bitrate"]
  val get_bitrateMode: 'tags this -> VideoEncoderBitrateMode.t option [@@js.get "bitrateMode"]
  val set_bitrateMode: 'tags this -> VideoEncoderBitrateMode.t -> unit [@@js.set "bitrateMode"]
  val get_codec: 'tags this -> string [@@js.get "codec"]
  val set_codec: 'tags this -> string -> unit [@@js.set "codec"]
  val get_displayHeight: 'tags this -> float option [@@js.get "displayHeight"]
  val set_displayHeight: 'tags this -> float -> unit [@@js.set "displayHeight"]
  val get_displayWidth: 'tags this -> float option [@@js.get "displayWidth"]
  val set_displayWidth: 'tags this -> float -> unit [@@js.set "displayWidth"]
  val get_framerate: 'tags this -> float option [@@js.get "framerate"]
  val set_framerate: 'tags this -> float -> unit [@@js.set "framerate"]
  val get_hardwareAcceleration: 'tags this -> HardwareAcceleration.t option [@@js.get "hardwareAcceleration"]
  val set_hardwareAcceleration: 'tags this -> HardwareAcceleration.t -> unit [@@js.set "hardwareAcceleration"]
  val get_height: 'tags this -> float [@@js.get "height"]
  val set_height: 'tags this -> float -> unit [@@js.set "height"]
  val get_latencyMode: 'tags this -> LatencyMode.t option [@@js.get "latencyMode"]
  val set_latencyMode: 'tags this -> LatencyMode.t -> unit [@@js.set "latencyMode"]
  val get_scalabilityMode: 'tags this -> string option [@@js.get "scalabilityMode"]
  val set_scalabilityMode: 'tags this -> string -> unit [@@js.set "scalabilityMode"]
  val get_width: 'tags this -> float [@@js.get "width"]
  val set_width: 'tags this -> float -> unit [@@js.set "width"]
  val create: ?alpha:AlphaOption.t -> ?avc:AvcEncoderConfig.t -> ?bitrate:float -> ?bitrateMode:VideoEncoderBitrateMode.t -> codec:string -> ?displayHeight:float -> ?displayWidth:float -> ?framerate:float -> ?hardwareAcceleration:HardwareAcceleration.t -> height:float -> ?latencyMode:LatencyMode.t -> ?scalabilityMode:string -> width:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module VideoEncoderSupport : sig
  type t = [`VideoEncoderSupport] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VideoEncoderSupport]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VideoEncoderSupport]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoEncoderSupport ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_config: 'tags this -> VideoEncoderConfig.t option [@@js.get "config"]
  val set_config: 'tags this -> VideoEncoderConfig.t -> unit [@@js.set "config"]
  val get_supported: 'tags this -> bool option [@@js.get "supported"]
  val set_supported: 'tags this -> bool -> unit [@@js.set "supported"]
  val create: ?config:VideoEncoderConfig.t -> ?supported:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module WebCodecsErrorCallback : sig
  type t = [`WebCodecsErrorCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WebCodecsErrorCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WebCodecsErrorCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WebCodecsErrorCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> error:DOMException.t -> unit [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module VideoDecoderConfig : sig
  type t = [`VideoDecoderConfig] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VideoDecoderConfig]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VideoDecoderConfig]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoDecoderConfig ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_codec: 'tags this -> string [@@js.get "codec"]
  val set_codec: 'tags this -> string -> unit [@@js.set "codec"]
  val get_codedHeight: 'tags this -> float option [@@js.get "codedHeight"]
  val set_codedHeight: 'tags this -> float -> unit [@@js.set "codedHeight"]
  val get_codedWidth: 'tags this -> float option [@@js.get "codedWidth"]
  val set_codedWidth: 'tags this -> float -> unit [@@js.set "codedWidth"]
  val get_colorSpace: 'tags this -> VideoColorSpaceInit.t option [@@js.get "colorSpace"]
  val set_colorSpace: 'tags this -> VideoColorSpaceInit.t -> unit [@@js.set "colorSpace"]
  val get_description: 'tags this -> AllowSharedBufferSource.t option [@@js.get "description"]
  val set_description: 'tags this -> AllowSharedBufferSource.t -> unit [@@js.set "description"]
  val get_displayAspectHeight: 'tags this -> float option [@@js.get "displayAspectHeight"]
  val set_displayAspectHeight: 'tags this -> float -> unit [@@js.set "displayAspectHeight"]
  val get_displayAspectWidth: 'tags this -> float option [@@js.get "displayAspectWidth"]
  val set_displayAspectWidth: 'tags this -> float -> unit [@@js.set "displayAspectWidth"]
  val get_hardwareAcceleration: 'tags this -> HardwareAcceleration.t option [@@js.get "hardwareAcceleration"]
  val set_hardwareAcceleration: 'tags this -> HardwareAcceleration.t -> unit [@@js.set "hardwareAcceleration"]
  val get_optimizeForLatency: 'tags this -> bool option [@@js.get "optimizeForLatency"]
  val set_optimizeForLatency: 'tags this -> bool -> unit [@@js.set "optimizeForLatency"]
  val create: codec:string -> ?codedHeight:float -> ?codedWidth:float -> ?colorSpace:VideoColorSpaceInit.t -> ?description:AllowSharedBufferSource.t -> ?displayAspectHeight:float -> ?displayAspectWidth:float -> ?hardwareAcceleration:HardwareAcceleration.t -> ?optimizeForLatency:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module EncodedVideoChunkMetadata : sig
  type t = [`EncodedVideoChunkMetadata] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EncodedVideoChunkMetadata]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EncodedVideoChunkMetadata]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EncodedVideoChunkMetadata ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_decoderConfig: 'tags this -> VideoDecoderConfig.t option [@@js.get "decoderConfig"]
  val set_decoderConfig: 'tags this -> VideoDecoderConfig.t -> unit [@@js.set "decoderConfig"]
  val create: ?decoderConfig:VideoDecoderConfig.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module EncodedVideoChunkType : sig
  type t = ([`L_s310_delta[@js "delta"] | `L_s539_key[@js "key"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module EncodedVideoChunkInit : sig
  type t = [`EncodedVideoChunkInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EncodedVideoChunkInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EncodedVideoChunkInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EncodedVideoChunkInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_data: 'tags this -> AllowSharedBufferSource.t [@@js.get "data"]
  val set_data: 'tags this -> AllowSharedBufferSource.t -> unit [@@js.set "data"]
  val get_duration: 'tags this -> float option [@@js.get "duration"]
  val set_duration: 'tags this -> float -> unit [@@js.set "duration"]
  val get_timestamp: 'tags this -> float [@@js.get "timestamp"]
  val set_timestamp: 'tags this -> float -> unit [@@js.set "timestamp"]
  val get_type: 'tags this -> EncodedVideoChunkType.t [@@js.get "type"]
  val set_type: 'tags this -> EncodedVideoChunkType.t -> unit [@@js.set "type"]
  val create: data:AllowSharedBufferSource.t -> ?duration:float -> timestamp:float -> type_:(EncodedVideoChunkType.t[@js "type"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk) *)
module[@js.scope "EncodedVideoChunk"] EncodedVideoChunk : sig
  type t = [`EncodedVideoChunk] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EncodedVideoChunk]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EncodedVideoChunk]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EncodedVideoChunk ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk/byteLength) *)
  val get_byteLength: 'tags this -> float [@@js.get "byteLength"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk/duration) *)
  val get_duration: 'tags this -> float option [@@js.get "duration"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk/timestamp) *)
  val get_timestamp: 'tags this -> float [@@js.get "timestamp"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk/type) *)
  val get_type: 'tags this -> EncodedVideoChunkType.t [@@js.get "type"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk/copyTo) *)
  val copyTo: 'tags this -> destination:AllowSharedBufferSource.t -> unit [@@js.call "copyTo"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: EncodedVideoChunkInit.t -> t [@@js.create]
end
module EncodedVideoChunkOutputCallback : sig
  type t = [`EncodedVideoChunkOutputCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EncodedVideoChunkOutputCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EncodedVideoChunkOutputCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EncodedVideoChunkOutputCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> chunk:EncodedVideoChunk.t -> ?metadata:EncodedVideoChunkMetadata.t -> unit -> unit [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module VideoEncoderInit : sig
  type t = [`VideoEncoderInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VideoEncoderInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VideoEncoderInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoEncoderInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_error: 'tags this -> WebCodecsErrorCallback.t [@@js.get "error"]
  val set_error: 'tags this -> WebCodecsErrorCallback.t -> unit [@@js.set "error"]
  val get_output: 'tags this -> EncodedVideoChunkOutputCallback.t [@@js.get "output"]
  val set_output: 'tags this -> EncodedVideoChunkOutputCallback.t -> unit [@@js.set "output"]
  val create: error:WebCodecsErrorCallback.t -> output:EncodedVideoChunkOutputCallback.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module VideoEncoderEncodeOptions : sig
  type t = [`VideoEncoderEncodeOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VideoEncoderEncodeOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VideoEncoderEncodeOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoEncoderEncodeOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_keyFrame: 'tags this -> bool option [@@js.get "keyFrame"]
  val set_keyFrame: 'tags this -> bool -> unit [@@js.set "keyFrame"]
  val create: ?keyFrame:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module CodecState : sig
  type t = ([`L_s1006_unconfigured[@js "unconfigured"] | `L_s255_closed[@js "closed"] | `L_s272_configured[@js "configured"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoEncoder)
*)
module[@js.scope "VideoEncoder"] VideoEncoder : sig
  type t = [`EventTarget | `VideoEncoder] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `VideoEncoder]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `VideoEncoder]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoEncoder ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoEncoder/encodeQueueSize) *)
  val get_encodeQueueSize: 'tags this -> float [@@js.get "encodeQueueSize"]
  val get_ondequeue: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "ondequeue"]
  val set_ondequeue: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "ondequeue"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoEncoder/state) *)
  val get_state: 'tags this -> CodecState.t [@@js.get "state"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoEncoder/close) *)
  val close: 'tags this -> unit [@@js.call "close"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoEncoder/configure) *)
  val configure: 'tags this -> config:VideoEncoderConfig.t -> unit [@@js.call "configure"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoEncoder/encode) *)
  val encode: 'tags this -> frame:VideoFrame.t -> ?options:VideoEncoderEncodeOptions.t -> unit -> unit [@@js.call "encode"]
  val flush: 'tags this -> unit Promise.t [@@js.call "flush"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoEncoder/reset) *)
  val reset: 'tags this -> unit [@@js.call "reset"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'VideoEncoderEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'VideoEncoderEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: VideoEncoderInit.t -> t [@@js.create]
  val isConfigSupported: VideoEncoderConfig.t -> VideoEncoderSupport.t Promise.t [@@js.global "isConfigSupported"]
end
module VideoDecoderEventMap : sig
  type t = [`VideoDecoderEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VideoDecoderEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VideoDecoderEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoDecoderEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_dequeue: 'tags this -> Event.t [@@js.get "dequeue"]
  val set_dequeue: 'tags this -> Event.t -> unit [@@js.set "dequeue"]
  val create: dequeue:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module VideoDecoderSupport : sig
  type t = [`VideoDecoderSupport] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VideoDecoderSupport]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VideoDecoderSupport]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoDecoderSupport ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_config: 'tags this -> VideoDecoderConfig.t option [@@js.get "config"]
  val set_config: 'tags this -> VideoDecoderConfig.t -> unit [@@js.set "config"]
  val get_supported: 'tags this -> bool option [@@js.get "supported"]
  val set_supported: 'tags this -> bool -> unit [@@js.set "supported"]
  val create: ?config:VideoDecoderConfig.t -> ?supported:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module VideoFrameOutputCallback : sig
  type t = [`VideoFrameOutputCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VideoFrameOutputCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VideoFrameOutputCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoFrameOutputCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> output:VideoFrame.t -> unit [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module VideoDecoderInit : sig
  type t = [`VideoDecoderInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VideoDecoderInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VideoDecoderInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoDecoderInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_error: 'tags this -> WebCodecsErrorCallback.t [@@js.get "error"]
  val set_error: 'tags this -> WebCodecsErrorCallback.t -> unit [@@js.set "error"]
  val get_output: 'tags this -> VideoFrameOutputCallback.t [@@js.get "output"]
  val set_output: 'tags this -> VideoFrameOutputCallback.t -> unit [@@js.set "output"]
  val create: error:WebCodecsErrorCallback.t -> output:VideoFrameOutputCallback.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoDecoder)
*)
module[@js.scope "VideoDecoder"] VideoDecoder : sig
  type t = [`EventTarget | `VideoDecoder] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `VideoDecoder]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `VideoDecoder]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VideoDecoder ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoDecoder/decodeQueueSize) *)
  val get_decodeQueueSize: 'tags this -> float [@@js.get "decodeQueueSize"]
  val get_ondequeue: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "ondequeue"]
  val set_ondequeue: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "ondequeue"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoDecoder/state) *)
  val get_state: 'tags this -> CodecState.t [@@js.get "state"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoDecoder/close) *)
  val close: 'tags this -> unit [@@js.call "close"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoDecoder/configure) *)
  val configure: 'tags this -> config:VideoDecoderConfig.t -> unit [@@js.call "configure"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoDecoder/decode) *)
  val decode: 'tags this -> chunk:EncodedVideoChunk.t -> unit [@@js.call "decode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoDecoder/flush) *)
  val flush: 'tags this -> unit Promise.t [@@js.call "flush"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VideoDecoder/reset) *)
  val reset: 'tags this -> unit [@@js.call "reset"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'VideoDecoderEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'VideoDecoderEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: VideoDecoderInit.t -> t [@@js.create]
  val isConfigSupported: VideoDecoderConfig.t -> VideoDecoderSupport.t Promise.t [@@js.global "isConfigSupported"]
end
module ScrollSetting : sig
  type t = ([`L_s0[@js ""] | `L_s1017_up[@js "up"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTRegion) *)
module[@js.scope "VTTRegion"] VTTRegion : sig
  type t = [`VTTRegion] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`VTTRegion]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`VTTRegion]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VTTRegion ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTRegion/id) *)
  val get_id: 'tags this -> string [@@js.get "id"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTRegion/id) *)
  val set_id: 'tags this -> string -> unit [@@js.set "id"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTRegion/lines) *)
  val get_lines: 'tags this -> float [@@js.get "lines"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTRegion/lines) *)
  val set_lines: 'tags this -> float -> unit [@@js.set "lines"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTRegion/regionAnchorX) *)
  val get_regionAnchorX: 'tags this -> float [@@js.get "regionAnchorX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTRegion/regionAnchorX) *)
  val set_regionAnchorX: 'tags this -> float -> unit [@@js.set "regionAnchorX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTRegion/regionAnchorY) *)
  val get_regionAnchorY: 'tags this -> float [@@js.get "regionAnchorY"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTRegion/regionAnchorY) *)
  val set_regionAnchorY: 'tags this -> float -> unit [@@js.set "regionAnchorY"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTRegion/scroll) *)
  val get_scroll: 'tags this -> ScrollSetting.t [@@js.get "scroll"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTRegion/scroll) *)
  val set_scroll: 'tags this -> ScrollSetting.t -> unit [@@js.set "scroll"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTRegion/viewportAnchorX) *)
  val get_viewportAnchorX: 'tags this -> float [@@js.get "viewportAnchorX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTRegion/viewportAnchorX) *)
  val set_viewportAnchorX: 'tags this -> float -> unit [@@js.set "viewportAnchorX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTRegion/viewportAnchorY) *)
  val get_viewportAnchorY: 'tags this -> float [@@js.get "viewportAnchorY"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTRegion/viewportAnchorY) *)
  val set_viewportAnchorY: 'tags this -> float -> unit [@@js.set "viewportAnchorY"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTRegion/width) *)
  val get_width: 'tags this -> float [@@js.get "width"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTRegion/width) *)
  val set_width: 'tags this -> float -> unit [@@js.set "width"]
  val create: id:string -> lines:float -> regionAnchorX:float -> regionAnchorY:float -> scroll:ScrollSetting.t -> viewportAnchorX:float -> viewportAnchorY:float -> width:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end
module PositionAlignSetting : sig
  type t = ([`L_s174_auto[@js "auto"] | `L_s240_center[@js "center"] | `L_s562_line_left[@js "line-left"] | `L_s563_line_right[@js "line-right"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module AutoKeyword : sig
  type t = ([`L_s174_auto[@js "auto"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module LineAndPositionSetting : sig
  type t = ([`Number of float | `Other of AutoKeyword.t] [@js.union on_field "dummy"]) Primitive.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module LineAlignSetting : sig
  type t = ([`L_s240_center[@js "center"] | `L_s364_end[@js "end"] | `L_s919_start[@js "start"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module DirectionSetting : sig
  type t = ([`L_s0[@js ""] | `L_s586_lr[@js "lr"] | `L_s833_rl[@js "rl"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module AlignSetting : sig
  type t = ([`L_s240_center[@js "center"] | `L_s364_end[@js "end"] | `L_s552_left[@js "left"] | `L_s832_right[@js "right"] | `L_s919_start[@js "start"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTCue) *)
module[@js.scope "VTTCue"] VTTCue : sig
  type t = [`EventTarget | `TextTrackCue | `VTTCue] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `TextTrackCue | `VTTCue]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `TextTrackCue | `VTTCue]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `VTTCue ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTCue/align) *)
  val get_align: 'tags this -> AlignSetting.t [@@js.get "align"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTCue/align) *)
  val set_align: 'tags this -> AlignSetting.t -> unit [@@js.set "align"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTCue/line) *)
  val get_line: 'tags this -> LineAndPositionSetting.t [@@js.get "line"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTCue/line) *)
  val set_line: 'tags this -> LineAndPositionSetting.t -> unit [@@js.set "line"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTCue/lineAlign) *)
  val get_lineAlign: 'tags this -> LineAlignSetting.t [@@js.get "lineAlign"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTCue/lineAlign) *)
  val set_lineAlign: 'tags this -> LineAlignSetting.t -> unit [@@js.set "lineAlign"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTCue/position) *)
  val get_position: 'tags this -> LineAndPositionSetting.t [@@js.get "position"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTCue/position) *)
  val set_position: 'tags this -> LineAndPositionSetting.t -> unit [@@js.set "position"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTCue/positionAlign) *)
  val get_positionAlign: 'tags this -> PositionAlignSetting.t [@@js.get "positionAlign"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTCue/positionAlign) *)
  val set_positionAlign: 'tags this -> PositionAlignSetting.t -> unit [@@js.set "positionAlign"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTCue/region) *)
  val get_region: 'tags this -> VTTRegion.t option [@@js.get "region"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTCue/region) *)
  val set_region: 'tags this -> VTTRegion.t option -> unit [@@js.set "region"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTCue/size) *)
  val get_size: 'tags this -> float [@@js.get "size"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTCue/size) *)
  val set_size: 'tags this -> float -> unit [@@js.set "size"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTCue/snapToLines) *)
  val get_snapToLines: 'tags this -> bool [@@js.get "snapToLines"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTCue/snapToLines) *)
  val set_snapToLines: 'tags this -> bool -> unit [@@js.set "snapToLines"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTCue/text) *)
  val get_text: 'tags this -> string [@@js.get "text"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTCue/text) *)
  val set_text: 'tags this -> string -> unit [@@js.set "text"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTCue/vertical) *)
  val get_vertical: 'tags this -> DirectionSetting.t [@@js.get "vertical"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTCue/vertical) *)
  val set_vertical: 'tags this -> DirectionSetting.t -> unit [@@js.set "vertical"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/VTTCue/getCueAsHTML) *)
  val getCueAsHTML: 'tags this -> DocumentFragment.t [@@js.call "getCueAsHTML"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'TextTrackCueEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'TextTrackCueEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: startTime:float -> endTime:float -> text:string -> t [@@js.create]
end
module TextTrackListEventMap : sig
  type t = [`TextTrackListEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`TextTrackListEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`TextTrackListEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `TextTrackListEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_addtrack: 'tags this -> TrackEvent.t [@@js.get "addtrack"]
  val set_addtrack: 'tags this -> TrackEvent.t -> unit [@@js.set "addtrack"]
  val get_change: 'tags this -> Event.t [@@js.get "change"]
  val set_change: 'tags this -> Event.t -> unit [@@js.set "change"]
  val get_removetrack: 'tags this -> TrackEvent.t [@@js.get "removetrack"]
  val set_removetrack: 'tags this -> TrackEvent.t -> unit [@@js.set "removetrack"]
  val create: addtrack:TrackEvent.t -> change:Event.t -> removetrack:TrackEvent.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module TextTrackEventMap : sig
  type t = [`TextTrackEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`TextTrackEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`TextTrackEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `TextTrackEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_cuechange: 'tags this -> Event.t [@@js.get "cuechange"]
  val set_cuechange: 'tags this -> Event.t -> unit [@@js.set "cuechange"]
  val create: cuechange:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module TextTrackCueEventMap : sig
  type t = [`TextTrackCueEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`TextTrackCueEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`TextTrackCueEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `TextTrackCueEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_enter: 'tags this -> Event.t [@@js.get "enter"]
  val set_enter: 'tags this -> Event.t -> unit [@@js.set "enter"]
  val get_exit: 'tags this -> Event.t [@@js.get "exit"]
  val set_exit: 'tags this -> Event.t -> unit [@@js.set "exit"]
  val create: enter:Event.t -> exit:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module TextEncoderCommon : sig
  type t = [`TextEncoderCommon] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`TextEncoderCommon]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`TextEncoderCommon]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `TextEncoderCommon ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns "utf-8".
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextEncoder/encoding)
  *)
  val get_encoding: 'tags this -> string [@@js.get "encoding"]
  val create: encoding:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module GenericTransformStream : sig
  type t = [`GenericTransformStream] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`GenericTransformStream]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`GenericTransformStream]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `GenericTransformStream ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CompressionStream/readable) *)
  val get_readable: 'tags this -> ReadableStream.t_0 [@@js.get "readable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CompressionStream/writable) *)
  val get_writable: 'tags this -> WritableStream.t_0 [@@js.get "writable"]
  val create: readable:ReadableStream.t_0 -> writable:WritableStream.t_0 -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextEncoderStream) *)
module[@js.scope "TextEncoderStream"] TextEncoderStream : sig
  type t = [`GenericTransformStream | `TextEncoderCommon | `TextEncoderStream] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`GenericTransformStream | `TextEncoderCommon | `TextEncoderStream]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`GenericTransformStream | `TextEncoderCommon | `TextEncoderStream]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `TextEncoderStream ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CompressionStream/readable) *)
  val get_readable: 'tags this -> Uint8Array.t ReadableStream.t [@@js.get "readable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CompressionStream/writable) *)
  val get_writable: 'tags this -> string WritableStream.t [@@js.get "writable"]
  val create: readable:Uint8Array.t ReadableStream.t -> writable:string WritableStream.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end
module TextEncoderEncodeIntoResult : sig
  type t = [`TextEncoderEncodeIntoResult] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`TextEncoderEncodeIntoResult]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`TextEncoderEncodeIntoResult]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `TextEncoderEncodeIntoResult ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_read: 'tags this -> float [@@js.get "read"]
  val set_read: 'tags this -> float -> unit [@@js.set "read"]
  val get_written: 'tags this -> float [@@js.get "written"]
  val set_written: 'tags this -> float -> unit [@@js.set "written"]
  val create: read:float -> written:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  TextEncoder takes a stream of code points as input and emits a stream of bytes. For a more scalable, non-native library, see StringView â a C-like representation of strings based on typed arrays.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextEncoder)
*)
module[@js.scope "TextEncoder"] TextEncoder : sig
  type t = [`TextEncoder | `TextEncoderCommon] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`TextEncoder | `TextEncoderCommon]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`TextEncoder | `TextEncoderCommon]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `TextEncoder ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the result of running UTF-8's encoder.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextEncoder/encode)
  *)
  val encode: 'tags this -> ?input:string -> unit -> Uint8Array.t [@@js.call "encode"]
  
  (**
    Runs the UTF-8 encoder on source, stores the result of that operation into destination, and returns the progress made as an object wherein read is the number of converted code units of source and written is the number of bytes modified in destination.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextEncoder/encodeInto)
  *)
  val encodeInto: 'tags this -> source:string -> destination:Uint8Array.t -> TextEncoderEncodeIntoResult.t [@@js.call "encodeInto"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module TextDecoderOptions : sig
  type t = [`TextDecoderOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`TextDecoderOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`TextDecoderOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `TextDecoderOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_fatal: 'tags this -> bool option [@@js.get "fatal"]
  val set_fatal: 'tags this -> bool -> unit [@@js.set "fatal"]
  val get_ignoreBOM: 'tags this -> bool option [@@js.get "ignoreBOM"]
  val set_ignoreBOM: 'tags this -> bool -> unit [@@js.set "ignoreBOM"]
  val create: ?fatal:bool -> ?ignoreBOM:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module TextDecoderCommon : sig
  type t = [`TextDecoderCommon] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`TextDecoderCommon]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`TextDecoderCommon]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `TextDecoderCommon ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns encoding's name, lowercased.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextDecoder/encoding)
  *)
  val get_encoding: 'tags this -> string [@@js.get "encoding"]
  
  (**
    Returns true if error mode is "fatal", otherwise false.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextDecoder/fatal)
  *)
  val get_fatal: 'tags this -> bool [@@js.get "fatal"]
  
  (**
    Returns the value of ignore BOM.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextDecoder/ignoreBOM)
  *)
  val get_ignoreBOM: 'tags this -> bool [@@js.get "ignoreBOM"]
  val create: encoding:string -> fatal:bool -> ignoreBOM:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextDecoderStream) *)
module[@js.scope "TextDecoderStream"] TextDecoderStream : sig
  type t = [`GenericTransformStream | `TextDecoderCommon | `TextDecoderStream] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`GenericTransformStream | `TextDecoderCommon | `TextDecoderStream]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`GenericTransformStream | `TextDecoderCommon | `TextDecoderStream]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `TextDecoderStream ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CompressionStream/readable) *)
  val get_readable: 'tags this -> string ReadableStream.t [@@js.get "readable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CompressionStream/writable) *)
  val get_writable: 'tags this -> BufferSource.t WritableStream.t [@@js.get "writable"]
  val create: readable:string ReadableStream.t -> writable:BufferSource.t WritableStream.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': ?label:string -> ?options:TextDecoderOptions.t -> unit -> t [@@js.create]
end
module TextDecodeOptions : sig
  type t = [`TextDecodeOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`TextDecodeOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`TextDecodeOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `TextDecodeOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_stream: 'tags this -> bool option [@@js.get "stream"]
  val set_stream: 'tags this -> bool -> unit [@@js.set "stream"]
  val create: ?stream:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  A decoder for a specific method, that is a specific character encoding, like utf-8, iso-8859-2, koi8, cp1261, gbk, etc.Â A decoder takes a stream of bytes as input and emits a stream of code points. For a more scalable, non-native library, see StringView â a C-like representation of strings based on typed arrays.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextDecoder)
*)
module[@js.scope "TextDecoder"] TextDecoder : sig
  type t = [`TextDecoder | `TextDecoderCommon] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`TextDecoder | `TextDecoderCommon]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`TextDecoder | `TextDecoderCommon]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `TextDecoder ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the result of running encoding's decoder. The method can be invoked zero or more times with options's stream set to true, and then once without options's stream (or set to false), to process a fragmented input. If the invocation without options's stream (or set to false) has no input, it's clearest to omit both arguments.
    
    ```
    var string = "", decoder = new TextDecoder(encoding), buffer;
    while(buffer = next_chunk()) \{
      string += decoder.decode(buffer, \{stream:true\});
    \}
    string += decoder.decode(); // end-of-queue
    ```
    
    If the error mode is "fatal" and encoding's decoder returns error, throws a TypeError.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TextDecoder/decode)
  *)
  val decode: 'tags this -> ?input:AllowSharedBufferSource.t -> ?options:TextDecodeOptions.t -> unit -> string [@@js.call "decode"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: ?label:string -> ?options:TextDecoderOptions.t -> unit -> t [@@js.create]
end

(** @deprecated  *)
module StyleMedia : sig
  type t = [`StyleMedia] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`StyleMedia]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`StyleMedia]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `StyleMedia ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_type: 'tags this -> string [@@js.get "type"]
  val set_type: 'tags this -> string -> unit [@@js.set "type"]
  val matchMedium: 'tags this -> mediaquery:string -> bool [@@js.call "matchMedium"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module SpeechSynthesisUtteranceEventMap : sig
  type t = [`SpeechSynthesisUtteranceEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SpeechSynthesisUtteranceEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SpeechSynthesisUtteranceEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SpeechSynthesisUtteranceEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_boundary: 'tags this -> SpeechSynthesisEvent.t [@@js.get "boundary"]
  val set_boundary: 'tags this -> SpeechSynthesisEvent.t -> unit [@@js.set "boundary"]
  val get_end: 'tags this -> SpeechSynthesisEvent.t [@@js.get "end"]
  val set_end: 'tags this -> SpeechSynthesisEvent.t -> unit [@@js.set "end"]
  val get_error: 'tags this -> SpeechSynthesisErrorEvent.t [@@js.get "error"]
  val set_error: 'tags this -> SpeechSynthesisErrorEvent.t -> unit [@@js.set "error"]
  val get_mark: 'tags this -> SpeechSynthesisEvent.t [@@js.get "mark"]
  val set_mark: 'tags this -> SpeechSynthesisEvent.t -> unit [@@js.set "mark"]
  val get_pause: 'tags this -> SpeechSynthesisEvent.t [@@js.get "pause"]
  val set_pause: 'tags this -> SpeechSynthesisEvent.t -> unit [@@js.set "pause"]
  val get_resume: 'tags this -> SpeechSynthesisEvent.t [@@js.get "resume"]
  val set_resume: 'tags this -> SpeechSynthesisEvent.t -> unit [@@js.set "resume"]
  val get_start: 'tags this -> SpeechSynthesisEvent.t [@@js.get "start"]
  val set_start: 'tags this -> SpeechSynthesisEvent.t -> unit [@@js.set "start"]
  val create: boundary:SpeechSynthesisEvent.t -> end_:(SpeechSynthesisEvent.t[@js "end"]) -> error:SpeechSynthesisErrorEvent.t -> mark:SpeechSynthesisEvent.t -> pause:SpeechSynthesisEvent.t -> resume:SpeechSynthesisEvent.t -> start:SpeechSynthesisEvent.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module SpeechSynthesisEventMap : sig
  type t = [`SpeechSynthesisEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SpeechSynthesisEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SpeechSynthesisEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SpeechSynthesisEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_voiceschanged: 'tags this -> Event.t [@@js.get "voiceschanged"]
  val set_voiceschanged: 'tags this -> Event.t -> unit [@@js.set "voiceschanged"]
  val create: voiceschanged:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionAlternative) *)
module[@js.scope "SpeechRecognitionAlternative"] SpeechRecognitionAlternative : sig
  type t = [`SpeechRecognitionAlternative] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SpeechRecognitionAlternative]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SpeechRecognitionAlternative]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SpeechRecognitionAlternative ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionAlternative/confidence) *)
  val get_confidence: 'tags this -> float [@@js.get "confidence"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionAlternative/transcript) *)
  val get_transcript: 'tags this -> string [@@js.get "transcript"]
  val create: confidence:float -> transcript:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResult) *)
module[@js.scope "SpeechRecognitionResult"] SpeechRecognitionResult : sig
  type t = [`SpeechRecognitionResult] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SpeechRecognitionResult]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SpeechRecognitionResult]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SpeechRecognitionResult ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> SpeechRecognitionAlternative.t IterableIterator.t *)
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResult/isFinal) *)
  val get_isFinal: 'tags this -> bool [@@js.get "isFinal"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResult/length) *)
  val get_length: 'tags this -> float [@@js.get "length"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResult/item) *)
  val item: 'tags this -> index:float -> SpeechRecognitionAlternative.t [@@js.call "item"]
  val get: 'tags this -> float -> SpeechRecognitionAlternative.t [@@js.index_get]
  val set: 'tags this -> float -> SpeechRecognitionAlternative.t -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResultList) *)
module[@js.scope "SpeechRecognitionResultList"] SpeechRecognitionResultList : sig
  type t = [`SpeechRecognitionResultList] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SpeechRecognitionResultList]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SpeechRecognitionResultList]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SpeechRecognitionResultList ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> SpeechRecognitionResult.t IterableIterator.t *)
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResultList/length) *)
  val get_length: 'tags this -> float [@@js.get "length"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResultList/item) *)
  val item: 'tags this -> index:float -> SpeechRecognitionResult.t [@@js.call "item"]
  val get: 'tags this -> float -> SpeechRecognitionResult.t [@@js.index_get]
  val set: 'tags this -> float -> SpeechRecognitionResult.t -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module SourceBufferListEventMap : sig
  type t = [`SourceBufferListEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SourceBufferListEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SourceBufferListEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SourceBufferListEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_addsourcebuffer: 'tags this -> Event.t [@@js.get "addsourcebuffer"]
  val set_addsourcebuffer: 'tags this -> Event.t -> unit [@@js.set "addsourcebuffer"]
  val get_removesourcebuffer: 'tags this -> Event.t [@@js.get "removesourcebuffer"]
  val set_removesourcebuffer: 'tags this -> Event.t -> unit [@@js.set "removesourcebuffer"]
  val create: addsourcebuffer:Event.t -> removesourcebuffer:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module SourceBufferEventMap : sig
  type t = [`SourceBufferEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SourceBufferEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SourceBufferEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SourceBufferEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_abort: 'tags this -> Event.t [@@js.get "abort"]
  val set_abort: 'tags this -> Event.t -> unit [@@js.set "abort"]
  val get_error: 'tags this -> Event.t [@@js.get "error"]
  val set_error: 'tags this -> Event.t -> unit [@@js.set "error"]
  val get_update: 'tags this -> Event.t [@@js.get "update"]
  val set_update: 'tags this -> Event.t -> unit [@@js.set "update"]
  val get_updateend: 'tags this -> Event.t [@@js.get "updateend"]
  val set_updateend: 'tags this -> Event.t -> unit [@@js.set "updateend"]
  val get_updatestart: 'tags this -> Event.t [@@js.get "updatestart"]
  val set_updatestart: 'tags this -> Event.t -> unit [@@js.set "updatestart"]
  val create: abort:Event.t -> error:Event.t -> update:Event.t -> updateend:Event.t -> updatestart:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SharedWorker) *)
module[@js.scope "SharedWorker"] SharedWorker : sig
  type t = [`AbstractWorker | `EventTarget | `SharedWorker] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AbstractWorker | `EventTarget | `SharedWorker]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AbstractWorker | `EventTarget | `SharedWorker]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SharedWorker ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns sharedWorker's MessagePort object which can be used to communicate with the global environment.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SharedWorker/port)
  *)
  val get_port: 'tags this -> MessagePort.t [@@js.get "port"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'AbstractWorkerEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'AbstractWorkerEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: scriptURL:([`U1 of string | `U2 of URL.t] [@js.union]) -> ?options:([`U1 of string | `U2 of WorkerOptions.t] [@js.union]) -> unit -> t [@@js.create]
end
module ShadowRootEventMap : sig
  type t = [`ShadowRootEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ShadowRootEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ShadowRootEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ShadowRootEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_slotchange: 'tags this -> Event.t [@@js.get "slotchange"]
  val set_slotchange: 'tags this -> Event.t -> unit [@@js.set "slotchange"]
  val create: slotchange:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ServiceWorkerRegistrationEventMap : sig
  type t = [`ServiceWorkerRegistrationEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ServiceWorkerRegistrationEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ServiceWorkerRegistrationEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ServiceWorkerRegistrationEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_updatefound: 'tags this -> Event.t [@@js.get "updatefound"]
  val set_updatefound: 'tags this -> Event.t -> unit [@@js.set "updatefound"]
  val create: updatefound:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ServiceWorkerEventMap : sig
  type t = [`AbstractWorkerEventMap | `ServiceWorkerEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AbstractWorkerEventMap | `ServiceWorkerEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AbstractWorkerEventMap | `ServiceWorkerEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ServiceWorkerEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_statechange: 'tags this -> Event.t [@@js.get "statechange"]
  val set_statechange: 'tags this -> Event.t -> unit [@@js.set "statechange"]
  val create: statechange:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ServiceWorkerContainerEventMap : sig
  type t = [`ServiceWorkerContainerEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ServiceWorkerContainerEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ServiceWorkerContainerEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ServiceWorkerContainerEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_controllerchange: 'tags this -> Event.t [@@js.get "controllerchange"]
  val set_controllerchange: 'tags this -> Event.t -> unit [@@js.set "controllerchange"]
  val get_message: 'tags this -> MessageEvent.t_0 [@@js.get "message"]
  val set_message: 'tags this -> MessageEvent.t_0 -> unit [@@js.set "message"]
  val get_messageerror: 'tags this -> MessageEvent.t_0 [@@js.get "messageerror"]
  val set_messageerror: 'tags this -> MessageEvent.t_0 -> unit [@@js.set "messageerror"]
  val create: controllerchange:Event.t -> message:MessageEvent.t_0 -> messageerror:MessageEvent.t_0 -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ScriptProcessorNodeEventMap : sig
  type t = [`ScriptProcessorNodeEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ScriptProcessorNodeEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ScriptProcessorNodeEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ScriptProcessorNodeEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_audioprocess: 'tags this -> AudioProcessingEvent.t [@@js.get "audioprocess"]
  val set_audioprocess: 'tags this -> AudioProcessingEvent.t -> unit [@@js.set "audioprocess"]
  val create: audioprocess:AudioProcessingEvent.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ScreenOrientationEventMap : sig
  type t = [`ScreenOrientationEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ScreenOrientationEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ScreenOrientationEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ScreenOrientationEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_change: 'tags this -> Event.t [@@js.get "change"]
  val set_change: 'tags this -> Event.t -> unit [@@js.set "change"]
  val create: change:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  A commonly used set of constants used for reflecting gradientUnits, patternContentUnits and other similar attributes.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGUnitTypes)
*)
module[@js.scope "SVGUnitTypes"] SVGUnitTypes : sig
  type t = [`SVGUnitTypes] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SVGUnitTypes]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SVGUnitTypes]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGUnitTypes ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_SVG_UNIT_TYPE_UNKNOWN: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "SVG_UNIT_TYPE_UNKNOWN"]
  val get_SVG_UNIT_TYPE_USERSPACEONUSE: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SVG_UNIT_TYPE_USERSPACEONUSE"]
  val get_SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "SVG_UNIT_TYPE_OBJECTBOUNDINGBOX"]
  val create: svg_unit_type_unknown:(([`L_n_0[@js 0]] [@js.enum])[@js "SVG_UNIT_TYPE_UNKNOWN"]) -> svg_unit_type_userspaceonuse:(([`L_n_1[@js 1]] [@js.enum])[@js "SVG_UNIT_TYPE_USERSPACEONUSE"]) -> svg_unit_type_objectboundingbox:(([`L_n_2[@js 2]] [@js.enum])[@js "SVG_UNIT_TYPE_OBJECTBOUNDINGBOX"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
  val svg_unit_type_unknown: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "SVG_UNIT_TYPE_UNKNOWN"]
  val svg_unit_type_userspaceonuse: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SVG_UNIT_TYPE_USERSPACEONUSE"]
  val svg_unit_type_objectboundingbox: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "SVG_UNIT_TYPE_OBJECTBOUNDINGBOX"]
end
module ElementEventMap : sig
  type t = [`ElementEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ElementEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ElementEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ElementEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_fullscreenchange: 'tags this -> Event.t [@@js.get "fullscreenchange"]
  val set_fullscreenchange: 'tags this -> Event.t -> unit [@@js.set "fullscreenchange"]
  val get_fullscreenerror: 'tags this -> Event.t [@@js.get "fullscreenerror"]
  val set_fullscreenerror: 'tags this -> Event.t -> unit [@@js.set "fullscreenerror"]
  val create: fullscreenchange:Event.t -> fullscreenerror:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module SVGElementEventMap : sig
  type t = [`ElementEventMap | `GlobalEventHandlersEventMap | `SVGElementEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ElementEventMap | `GlobalEventHandlersEventMap | `SVGElementEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ElementEventMap | `GlobalEventHandlersEventMap | `SVGElementEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGElementEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module SVGSVGElementEventMap : sig
  type t = [`ElementEventMap | `GlobalEventHandlersEventMap | `SVGElementEventMap | `SVGSVGElementEventMap | `WindowEventHandlersEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ElementEventMap | `GlobalEventHandlersEventMap | `SVGElementEventMap | `SVGSVGElementEventMap | `WindowEventHandlersEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ElementEventMap | `GlobalEventHandlersEventMap | `SVGElementEventMap | `SVGSVGElementEventMap | `WindowEventHandlersEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGSVGElementEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module[@js.scope "SVGRect"] SVGRect : sig
  type t = DOMRect.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val prototype: unit -> DOMRect.t [@@js.get "prototype"]
  val create: ?x:float -> ?y:float -> ?width:float -> ?height:float -> unit -> DOMRect.t [@@js.create]
  val fromRect: ?other:DOMRectInit.t -> unit -> DOMRect.t [@@js.global "fromRect"]
end
module[@js.scope "SVGPoint"] SVGPoint : sig
  type t = DOMPoint.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val prototype: unit -> DOMPoint.t [@@js.get "prototype"]
  val create: ?x:float -> ?y:float -> ?z:float -> ?w:float -> unit -> DOMPoint.t [@@js.create]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMPoint/fromPoint_static) *)
  val fromPoint: ?other:DOMPointInit.t -> unit -> DOMPoint.t [@@js.global "fromPoint"]
end
module[@js.scope "SVGMatrix"] SVGMatrix : sig
  type t = DOMMatrix.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val prototype: unit -> DOMMatrix.t [@@js.get "prototype"]
  val create: ?init:([`U1 of string | `U2 of float list] [@js.union]) -> unit -> DOMMatrix.t [@@js.create]
  val fromFloat32Array: Float32Array.t -> DOMMatrix.t [@@js.global "fromFloat32Array"]
  val fromFloat64Array: Float64Array.t -> DOMMatrix.t [@@js.global "fromFloat64Array"]
  val fromMatrix: ?other:DOMMatrixInit.t -> unit -> DOMMatrix.t [@@js.global "fromMatrix"]
end
module RsaKeyAlgorithm : sig
  type t = [`KeyAlgorithm | `RsaKeyAlgorithm] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`KeyAlgorithm | `RsaKeyAlgorithm]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`KeyAlgorithm | `RsaKeyAlgorithm]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RsaKeyAlgorithm ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_modulusLength: 'tags this -> float [@@js.get "modulusLength"]
  val set_modulusLength: 'tags this -> float -> unit [@@js.set "modulusLength"]
  val get_publicExponent: 'tags this -> BigInteger.t [@@js.get "publicExponent"]
  val set_publicExponent: 'tags this -> BigInteger.t -> unit [@@js.set "publicExponent"]
  val create: modulusLength:float -> publicExponent:BigInteger.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RsaHashedKeyAlgorithm : sig
  type t = [`KeyAlgorithm | `RsaHashedKeyAlgorithm | `RsaKeyAlgorithm] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`KeyAlgorithm | `RsaHashedKeyAlgorithm | `RsaKeyAlgorithm]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`KeyAlgorithm | `RsaHashedKeyAlgorithm | `RsaKeyAlgorithm]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RsaHashedKeyAlgorithm ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_hash: 'tags this -> KeyAlgorithm.t [@@js.get "hash"]
  val set_hash: 'tags this -> KeyAlgorithm.t -> unit [@@js.set "hash"]
  val create: hash:KeyAlgorithm.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ResizeObserverBoxOptions : sig
  type t = ([`L_s210_border_box[@js "border-box"] | `L_s278_content_box[@js "content-box"] | `L_s322_device_pixel_content_box[@js "device-pixel-content-box"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module ResizeObserverOptions : sig
  type t = [`ResizeObserverOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ResizeObserverOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ResizeObserverOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ResizeObserverOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_box: 'tags this -> ResizeObserverBoxOptions.t option [@@js.get "box"]
  val set_box: 'tags this -> ResizeObserverBoxOptions.t -> unit [@@js.set "box"]
  val create: ?box:ResizeObserverBoxOptions.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ResizeObserverSize) *)
module[@js.scope "ResizeObserverSize"] ResizeObserverSize : sig
  type t = [`ResizeObserverSize] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ResizeObserverSize]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ResizeObserverSize]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ResizeObserverSize ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ResizeObserverSize/blockSize) *)
  val get_blockSize: 'tags this -> float [@@js.get "blockSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ResizeObserverSize/inlineSize) *)
  val get_inlineSize: 'tags this -> float [@@js.get "inlineSize"]
  val create: blockSize:float -> inlineSize:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ResizeObserverEntry) *)
module[@js.scope "ResizeObserverEntry"] ResizeObserverEntry : sig
  type t = [`ResizeObserverEntry] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ResizeObserverEntry]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ResizeObserverEntry]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ResizeObserverEntry ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ResizeObserverEntry/borderBoxSize) *)
  val get_borderBoxSize: 'tags this -> ResizeObserverSize.t list [@@js.get "borderBoxSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ResizeObserverEntry/contentBoxSize) *)
  val get_contentBoxSize: 'tags this -> ResizeObserverSize.t list [@@js.get "contentBoxSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ResizeObserverEntry/contentRect) *)
  val get_contentRect: 'tags this -> DOMRectReadOnly.t [@@js.get "contentRect"]
  val get_devicePixelContentBoxSize: 'tags this -> ResizeObserverSize.t list [@@js.get "devicePixelContentBoxSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ResizeObserverEntry/target) *)
  val get_target: 'tags this -> Element.t [@@js.get "target"]
  val create: borderBoxSize:ResizeObserverSize.t list -> contentBoxSize:ResizeObserverSize.t list -> contentRect:DOMRectReadOnly.t -> devicePixelContentBoxSize:ResizeObserverSize.t list -> target:Element.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ResizeObserver) *)
module[@js.scope "ResizeObserver"] rec ResizeObserver : sig
  type t = [`ResizeObserver] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ResizeObserver]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ResizeObserver]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ResizeObserver ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ResizeObserver/disconnect) *)
  val disconnect: 'tags this -> unit [@@js.call "disconnect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ResizeObserver/observe) *)
  val observe: 'tags this -> target:Element.t -> ?options:ResizeObserverOptions.t -> unit -> unit [@@js.call "observe"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ResizeObserver/unobserve) *)
  val unobserve: 'tags this -> target:Element.t -> unit [@@js.call "unobserve"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: ResizeObserverCallback.t -> t [@@js.create]
end
and ResizeObserverCallback : sig
  type t = [`ResizeObserverCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ResizeObserverCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ResizeObserverCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ResizeObserverCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> entries:ResizeObserverEntry.t list -> observer:ResizeObserver.t -> unit [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ReportingObserverOptions : sig
  type t = [`ReportingObserverOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ReportingObserverOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ReportingObserverOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ReportingObserverOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_buffered: 'tags this -> bool option [@@js.get "buffered"]
  val set_buffered: 'tags this -> bool -> unit [@@js.set "buffered"]
  val get_types: 'tags this -> string list option [@@js.get "types"]
  val set_types: 'tags this -> string list -> unit [@@js.set "types"]
  val create: ?buffered:bool -> ?types:string list -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReportBody) *)
module[@js.scope "ReportBody"] ReportBody : sig
  type t = [`ReportBody] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ReportBody]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ReportBody]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ReportBody ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val toJSON: 'tags this -> any [@@js.call "toJSON"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Report) *)
module[@js.scope "Report"] Report : sig
  type t = [`Report] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Report]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Report]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Report ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Report/body) *)
  val get_body: 'tags this -> ReportBody.t option [@@js.get "body"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Report/type) *)
  val get_type: 'tags this -> string [@@js.get "type"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Report/url) *)
  val get_url: 'tags this -> string [@@js.get "url"]
  val toJSON: 'tags this -> any [@@js.call "toJSON"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module ReportList : sig
  type t = Report.t list
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReportingObserver) *)
module[@js.scope "ReportingObserver"] rec ReportingObserver : sig
  type t = [`ReportingObserver] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ReportingObserver]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ReportingObserver]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ReportingObserver ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReportingObserver/disconnect) *)
  val disconnect: 'tags this -> unit [@@js.call "disconnect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReportingObserver/observe) *)
  val observe: 'tags this -> unit [@@js.call "observe"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReportingObserver/takeRecords) *)
  val takeRecords: 'tags this -> ReportList.t [@@js.call "takeRecords"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: callback:ReportingObserverCallback.t -> ?options:ReportingObserverOptions.t -> unit -> t [@@js.create]
end
and ReportingObserverCallback : sig
  type t = [`ReportingObserverCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ReportingObserverCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ReportingObserverCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ReportingObserverCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> reports:Report.t list -> observer:ReportingObserver.t -> unit [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RemotePlaybackEventMap : sig
  type t = [`RemotePlaybackEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RemotePlaybackEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RemotePlaybackEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RemotePlaybackEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_connect: 'tags this -> Event.t [@@js.get "connect"]
  val set_connect: 'tags this -> Event.t -> unit [@@js.set "connect"]
  val get_connecting: 'tags this -> Event.t [@@js.get "connecting"]
  val set_connecting: 'tags this -> Event.t -> unit [@@js.set "connecting"]
  val get_disconnect: 'tags this -> Event.t [@@js.get "disconnect"]
  val set_disconnect: 'tags this -> Event.t -> unit [@@js.set "disconnect"]
  val create: connect:Event.t -> connecting:Event.t -> disconnect:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCStatsType : sig
  type t = ([`L_s225_candidate_pair[@js "candidate-pair"] | `L_s241_certificate[@js "certificate"] | `L_s259_codec[@js "codec"] | `L_s296_data_channel[@js "data-channel"] | `L_s513_inbound_rtp[@js "inbound-rtp"] | `L_s579_local_candidate[@js "local-candidate"] | `L_s605_media_playout[@js "media-playout"] | `L_s606_media_source[@js "media-source"] | `L_s714_outbound_rtp[@js "outbound-rtp"] | `L_s735_peer_connection[@js "peer-connection"] | `L_s813_remote_candidate[@js "remote-candidate"] | `L_s814_remote_inbound_rtp[@js "remote-inbound-rtp"] | `L_s815_remote_outbound_rtp[@js "remote-outbound-rtp"] | `L_s996_transport[@js "transport"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RTCStats : sig
  type t = [`RTCStats] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCStats]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCStats]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCStats ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_id: 'tags this -> string [@@js.get "id"]
  val set_id: 'tags this -> string -> unit [@@js.set "id"]
  val get_timestamp: 'tags this -> DOMHighResTimeStamp.t [@@js.get "timestamp"]
  val set_timestamp: 'tags this -> DOMHighResTimeStamp.t -> unit [@@js.set "timestamp"]
  val get_type: 'tags this -> RTCStatsType.t [@@js.get "type"]
  val set_type: 'tags this -> RTCStatsType.t -> unit [@@js.set "type"]
  val create: id:string -> timestamp:DOMHighResTimeStamp.t -> type_:(RTCStatsType.t[@js "type"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCTransportStats : sig
  type t = [`RTCStats | `RTCTransportStats] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCStats | `RTCTransportStats]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCStats | `RTCTransportStats]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCTransportStats ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_bytesReceived: 'tags this -> float option [@@js.get "bytesReceived"]
  val set_bytesReceived: 'tags this -> float -> unit [@@js.set "bytesReceived"]
  val get_bytesSent: 'tags this -> float option [@@js.get "bytesSent"]
  val set_bytesSent: 'tags this -> float -> unit [@@js.set "bytesSent"]
  val get_dtlsCipher: 'tags this -> string option [@@js.get "dtlsCipher"]
  val set_dtlsCipher: 'tags this -> string -> unit [@@js.set "dtlsCipher"]
  val get_dtlsState: 'tags this -> RTCDtlsTransportState.t [@@js.get "dtlsState"]
  val set_dtlsState: 'tags this -> RTCDtlsTransportState.t -> unit [@@js.set "dtlsState"]
  val get_localCertificateId: 'tags this -> string option [@@js.get "localCertificateId"]
  val set_localCertificateId: 'tags this -> string -> unit [@@js.set "localCertificateId"]
  val get_remoteCertificateId: 'tags this -> string option [@@js.get "remoteCertificateId"]
  val set_remoteCertificateId: 'tags this -> string -> unit [@@js.set "remoteCertificateId"]
  val get_selectedCandidatePairId: 'tags this -> string option [@@js.get "selectedCandidatePairId"]
  val set_selectedCandidatePairId: 'tags this -> string -> unit [@@js.set "selectedCandidatePairId"]
  val get_srtpCipher: 'tags this -> string option [@@js.get "srtpCipher"]
  val set_srtpCipher: 'tags this -> string -> unit [@@js.set "srtpCipher"]
  val get_tlsVersion: 'tags this -> string option [@@js.get "tlsVersion"]
  val set_tlsVersion: 'tags this -> string -> unit [@@js.set "tlsVersion"]
  val create: ?bytesReceived:float -> ?bytesSent:float -> ?dtlsCipher:string -> dtlsState:RTCDtlsTransportState.t -> ?localCertificateId:string -> ?remoteCertificateId:string -> ?selectedCandidatePairId:string -> ?srtpCipher:string -> ?tlsVersion:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCSctpTransportEventMap : sig
  type t = [`RTCSctpTransportEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCSctpTransportEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCSctpTransportEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCSctpTransportEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_statechange: 'tags this -> Event.t [@@js.get "statechange"]
  val set_statechange: 'tags this -> Event.t -> unit [@@js.set "statechange"]
  val create: statechange:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCPeerConnectionEventMap : sig
  type t = [`RTCPeerConnectionEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCPeerConnectionEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCPeerConnectionEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCPeerConnectionEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_connectionstatechange: 'tags this -> Event.t [@@js.get "connectionstatechange"]
  val set_connectionstatechange: 'tags this -> Event.t -> unit [@@js.set "connectionstatechange"]
  val get_datachannel: 'tags this -> RTCDataChannelEvent.t [@@js.get "datachannel"]
  val set_datachannel: 'tags this -> RTCDataChannelEvent.t -> unit [@@js.set "datachannel"]
  val get_icecandidate: 'tags this -> RTCPeerConnectionIceEvent.t [@@js.get "icecandidate"]
  val set_icecandidate: 'tags this -> RTCPeerConnectionIceEvent.t -> unit [@@js.set "icecandidate"]
  val get_icecandidateerror: 'tags this -> RTCPeerConnectionIceErrorEvent.t [@@js.get "icecandidateerror"]
  val set_icecandidateerror: 'tags this -> RTCPeerConnectionIceErrorEvent.t -> unit [@@js.set "icecandidateerror"]
  val get_iceconnectionstatechange: 'tags this -> Event.t [@@js.get "iceconnectionstatechange"]
  val set_iceconnectionstatechange: 'tags this -> Event.t -> unit [@@js.set "iceconnectionstatechange"]
  val get_icegatheringstatechange: 'tags this -> Event.t [@@js.get "icegatheringstatechange"]
  val set_icegatheringstatechange: 'tags this -> Event.t -> unit [@@js.set "icegatheringstatechange"]
  val get_negotiationneeded: 'tags this -> Event.t [@@js.get "negotiationneeded"]
  val set_negotiationneeded: 'tags this -> Event.t -> unit [@@js.set "negotiationneeded"]
  val get_signalingstatechange: 'tags this -> Event.t [@@js.get "signalingstatechange"]
  val set_signalingstatechange: 'tags this -> Event.t -> unit [@@js.set "signalingstatechange"]
  val get_track: 'tags this -> RTCTrackEvent.t [@@js.get "track"]
  val set_track: 'tags this -> RTCTrackEvent.t -> unit [@@js.set "track"]
  val create: connectionstatechange:Event.t -> datachannel:RTCDataChannelEvent.t -> icecandidate:RTCPeerConnectionIceEvent.t -> icecandidateerror:RTCPeerConnectionIceErrorEvent.t -> iceconnectionstatechange:Event.t -> icegatheringstatechange:Event.t -> negotiationneeded:Event.t -> signalingstatechange:Event.t -> track:RTCTrackEvent.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCSignalingState : sig
  type t = ([`L_s255_closed[@js "closed"] | `L_s470_have_local_offer[@js "have-local-offer"] | `L_s471_have_local_pranswer[@js "have-local-pranswer"] | `L_s472_have_remote_offer[@js "have-remote-offer"] | `L_s473_have_remote_pranswer[@js "have-remote-pranswer"] | `L_s916_stable[@js "stable"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RTCSdpType : sig
  type t = ([`L_s154_answer[@js "answer"] | `L_s694_offer[@js "offer"] | `L_s767_pranswer[@js "pranswer"] | `L_s834_rollback[@js "rollback"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RTCSessionDescriptionInit : sig
  type t = [`RTCSessionDescriptionInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCSessionDescriptionInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCSessionDescriptionInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCSessionDescriptionInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_sdp: 'tags this -> string option [@@js.get "sdp"]
  val set_sdp: 'tags this -> string -> unit [@@js.set "sdp"]
  val get_type: 'tags this -> RTCSdpType.t [@@js.get "type"]
  val set_type: 'tags this -> RTCSdpType.t -> unit [@@js.set "type"]
  val create: ?sdp:string -> type_:(RTCSdpType.t[@js "type"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCSessionDescriptionCallback : sig
  type t = [`RTCSessionDescriptionCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCSessionDescriptionCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCSessionDescriptionCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCSessionDescriptionCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> description:RTCSessionDescriptionInit.t -> unit [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  One end of a connectionâor potential connectionâand how it's configured. Each RTCSessionDescription consists of a description type indicating which part of the offer/answer negotiation process it describes and of the SDP descriptor of the session.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCSessionDescription)
*)
module[@js.scope "RTCSessionDescription"] RTCSessionDescription : sig
  type t = [`RTCSessionDescription] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCSessionDescription]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCSessionDescription]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCSessionDescription ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCSessionDescription/sdp) *)
  val get_sdp: 'tags this -> string [@@js.get "sdp"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCSessionDescription/type) *)
  val get_type: 'tags this -> RTCSdpType.t [@@js.get "type"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCSessionDescription/toJSON) *)
  val toJSON: 'tags this -> any [@@js.call "toJSON"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: RTCSessionDescriptionInit.t -> t [@@js.create]
end
module RTCSctpTransportState : sig
  type t = ([`L_s255_closed[@js "closed"] | `L_s274_connected[@js "connected"] | `L_s275_connecting[@js "connecting"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCSctpTransport) *)
module[@js.scope "RTCSctpTransport"] RTCSctpTransport : sig
  type t = [`EventTarget | `RTCSctpTransport] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `RTCSctpTransport]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `RTCSctpTransport]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCSctpTransport ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCSctpTransport/maxChannels) *)
  val get_maxChannels: 'tags this -> float option [@@js.get "maxChannels"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCSctpTransport/maxMessageSize) *)
  val get_maxMessageSize: 'tags this -> float [@@js.get "maxMessageSize"]
  val get_onstatechange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onstatechange"]
  val set_onstatechange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onstatechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCSctpTransport/state) *)
  val get_state: 'tags this -> RTCSctpTransportState.t [@@js.get "state"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCSctpTransport/transport) *)
  val get_transport: 'tags this -> RTCDtlsTransport.t [@@js.get "transport"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'RTCSctpTransportEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'RTCSctpTransportEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module RTCRtpTransceiverInit : sig
  type t = [`RTCRtpTransceiverInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCRtpTransceiverInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCRtpTransceiverInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCRtpTransceiverInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_direction: 'tags this -> RTCRtpTransceiverDirection.t option [@@js.get "direction"]
  val set_direction: 'tags this -> RTCRtpTransceiverDirection.t -> unit [@@js.set "direction"]
  val get_sendEncodings: 'tags this -> RTCRtpEncodingParameters.t list option [@@js.get "sendEncodings"]
  val set_sendEncodings: 'tags this -> RTCRtpEncodingParameters.t list -> unit [@@js.set "sendEncodings"]
  val get_streams: 'tags this -> MediaStream.t list option [@@js.get "streams"]
  val set_streams: 'tags this -> MediaStream.t list -> unit [@@js.set "streams"]
  val create: ?direction:RTCRtpTransceiverDirection.t -> ?sendEncodings:RTCRtpEncodingParameters.t list -> ?streams:MediaStream.t list -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCPeerConnectionState : sig
  type t = ([`L_s255_closed[@js "closed"] | `L_s274_connected[@js "connected"] | `L_s275_connecting[@js "connecting"] | `L_s336_disconnected[@js "disconnected"] | `L_s387_failed[@js "failed"] | `L_s669_new[@js "new"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RTCPeerConnectionErrorCallback : sig
  type t = [`RTCPeerConnectionErrorCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCPeerConnectionErrorCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCPeerConnectionErrorCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCPeerConnectionErrorCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> error:DOMException.t -> unit [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCOfferAnswerOptions : sig
  type t = [`RTCOfferAnswerOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCOfferAnswerOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCOfferAnswerOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCOfferAnswerOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCOfferOptions : sig
  type t = [`RTCOfferAnswerOptions | `RTCOfferOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCOfferAnswerOptions | `RTCOfferOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCOfferAnswerOptions | `RTCOfferOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCOfferOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_iceRestart: 'tags this -> bool option [@@js.get "iceRestart"]
  val set_iceRestart: 'tags this -> bool -> unit [@@js.set "iceRestart"]
  val get_offerToReceiveAudio: 'tags this -> bool option [@@js.get "offerToReceiveAudio"]
  val set_offerToReceiveAudio: 'tags this -> bool -> unit [@@js.set "offerToReceiveAudio"]
  val get_offerToReceiveVideo: 'tags this -> bool option [@@js.get "offerToReceiveVideo"]
  val set_offerToReceiveVideo: 'tags this -> bool -> unit [@@js.set "offerToReceiveVideo"]
  val create: ?iceRestart:bool -> ?offerToReceiveAudio:bool -> ?offerToReceiveVideo:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCLocalSessionDescriptionInit : sig
  type t = [`RTCLocalSessionDescriptionInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCLocalSessionDescriptionInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCLocalSessionDescriptionInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCLocalSessionDescriptionInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_sdp: 'tags this -> string option [@@js.get "sdp"]
  val set_sdp: 'tags this -> string -> unit [@@js.set "sdp"]
  val get_type: 'tags this -> RTCSdpType.t option [@@js.get "type"]
  val set_type: 'tags this -> RTCSdpType.t -> unit [@@js.set "type"]
  val create: ?sdp:string -> ?type_:(RTCSdpType.t[@js "type"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCIceGatheringState : sig
  type t = ([`L_s265_complete[@js "complete"] | `L_s448_gathering[@js "gathering"] | `L_s669_new[@js "new"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RTCIceConnectionState : sig
  type t = ([`L_s245_checking[@js "checking"] | `L_s255_closed[@js "closed"] | `L_s266_completed[@js "completed"] | `L_s274_connected[@js "connected"] | `L_s336_disconnected[@js "disconnected"] | `L_s387_failed[@js "failed"] | `L_s669_new[@js "new"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RTCDataChannelInit : sig
  type t = [`RTCDataChannelInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCDataChannelInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCDataChannelInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCDataChannelInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_id: 'tags this -> float option [@@js.get "id"]
  val set_id: 'tags this -> float -> unit [@@js.set "id"]
  val get_maxPacketLifeTime: 'tags this -> float option [@@js.get "maxPacketLifeTime"]
  val set_maxPacketLifeTime: 'tags this -> float -> unit [@@js.set "maxPacketLifeTime"]
  val get_maxRetransmits: 'tags this -> float option [@@js.get "maxRetransmits"]
  val set_maxRetransmits: 'tags this -> float -> unit [@@js.set "maxRetransmits"]
  val get_negotiated: 'tags this -> bool option [@@js.get "negotiated"]
  val set_negotiated: 'tags this -> bool -> unit [@@js.set "negotiated"]
  val get_ordered: 'tags this -> bool option [@@js.get "ordered"]
  val set_ordered: 'tags this -> bool -> unit [@@js.set "ordered"]
  val get_protocol: 'tags this -> string option [@@js.get "protocol"]
  val set_protocol: 'tags this -> string -> unit [@@js.set "protocol"]
  val create: ?id:float -> ?maxPacketLifeTime:float -> ?maxRetransmits:float -> ?negotiated:bool -> ?ordered:bool -> ?protocol:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCRtcpMuxPolicy : sig
  type t = ([`L_s822_require[@js "require"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RTCIceTransportPolicy : sig
  type t = ([`L_s136_all[@js "all"] | `L_s808_relay[@js "relay"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RTCIceServer : sig
  type t = [`RTCIceServer] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCIceServer]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCIceServer]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCIceServer ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_credential: 'tags this -> string option [@@js.get "credential"]
  val set_credential: 'tags this -> string -> unit [@@js.set "credential"]
  val get_urls: 'tags this -> ([`String of string | `Other of string list] [@js.union on_field "dummy"]) Primitive.t [@@js.get "urls"]
  val set_urls: 'tags this -> ([`U1 of string | `U2 of string list] [@js.union]) -> unit [@@js.set "urls"]
  val get_username: 'tags this -> string option [@@js.get "username"]
  val set_username: 'tags this -> string -> unit [@@js.set "username"]
  val create: ?credential:string -> urls:([`String of string | `Other of string list] [@js.union on_field "dummy"]) Primitive.t -> ?username:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCDtlsFingerprint : sig
  type t = [`RTCDtlsFingerprint] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCDtlsFingerprint]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCDtlsFingerprint]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCDtlsFingerprint ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_algorithm: 'tags this -> string option [@@js.get "algorithm"]
  val set_algorithm: 'tags this -> string -> unit [@@js.set "algorithm"]
  val get_value: 'tags this -> string option [@@js.get "value"]
  val set_value: 'tags this -> string -> unit [@@js.set "value"]
  val create: ?algorithm:string -> ?value:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCCertificate) *)
module[@js.scope "RTCCertificate"] RTCCertificate : sig
  type t = [`RTCCertificate] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCCertificate]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCCertificate]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCCertificate ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCCertificate/expires) *)
  val get_expires: 'tags this -> EpochTimeStamp.t [@@js.get "expires"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCCertificate/getFingerprints) *)
  val getFingerprints: 'tags this -> RTCDtlsFingerprint.t list [@@js.call "getFingerprints"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module RTCBundlePolicy : sig
  type t = ([`L_s181_balanced[@js "balanced"] | `L_s602_max_bundle[@js "max-bundle"] | `L_s603_max_compat[@js "max-compat"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RTCConfiguration : sig
  type t = [`RTCConfiguration] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCConfiguration]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCConfiguration]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCConfiguration ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_bundlePolicy: 'tags this -> RTCBundlePolicy.t option [@@js.get "bundlePolicy"]
  val set_bundlePolicy: 'tags this -> RTCBundlePolicy.t -> unit [@@js.set "bundlePolicy"]
  val get_certificates: 'tags this -> RTCCertificate.t list option [@@js.get "certificates"]
  val set_certificates: 'tags this -> RTCCertificate.t list -> unit [@@js.set "certificates"]
  val get_iceCandidatePoolSize: 'tags this -> float option [@@js.get "iceCandidatePoolSize"]
  val set_iceCandidatePoolSize: 'tags this -> float -> unit [@@js.set "iceCandidatePoolSize"]
  val get_iceServers: 'tags this -> RTCIceServer.t list option [@@js.get "iceServers"]
  val set_iceServers: 'tags this -> RTCIceServer.t list -> unit [@@js.set "iceServers"]
  val get_iceTransportPolicy: 'tags this -> RTCIceTransportPolicy.t option [@@js.get "iceTransportPolicy"]
  val set_iceTransportPolicy: 'tags this -> RTCIceTransportPolicy.t -> unit [@@js.set "iceTransportPolicy"]
  val get_rtcpMuxPolicy: 'tags this -> RTCRtcpMuxPolicy.t option [@@js.get "rtcpMuxPolicy"]
  val set_rtcpMuxPolicy: 'tags this -> RTCRtcpMuxPolicy.t -> unit [@@js.set "rtcpMuxPolicy"]
  val create: ?bundlePolicy:RTCBundlePolicy.t -> ?certificates:RTCCertificate.t list -> ?iceCandidatePoolSize:float -> ?iceServers:RTCIceServer.t list -> ?iceTransportPolicy:RTCIceTransportPolicy.t -> ?rtcpMuxPolicy:RTCRtcpMuxPolicy.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCAnswerOptions : sig
  type t = [`RTCAnswerOptions | `RTCOfferAnswerOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCAnswerOptions | `RTCOfferAnswerOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCAnswerOptions | `RTCOfferAnswerOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCAnswerOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  A WebRTC connection between the local computer and a remote peer. It provides methods to connect to a remote peer, maintain and monitor the connection, and close the connection once it's no longer needed.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection)
*)
module[@js.scope "RTCPeerConnection"] RTCPeerConnection : sig
  type t = [`EventTarget | `RTCPeerConnection] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `RTCPeerConnection]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `RTCPeerConnection]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCPeerConnection ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/canTrickleIceCandidates) *)
  val get_canTrickleIceCandidates: 'tags this -> bool option [@@js.get "canTrickleIceCandidates"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/connectionState) *)
  val get_connectionState: 'tags this -> RTCPeerConnectionState.t [@@js.get "connectionState"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/currentLocalDescription) *)
  val get_currentLocalDescription: 'tags this -> RTCSessionDescription.t option [@@js.get "currentLocalDescription"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/currentRemoteDescription) *)
  val get_currentRemoteDescription: 'tags this -> RTCSessionDescription.t option [@@js.get "currentRemoteDescription"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/iceConnectionState) *)
  val get_iceConnectionState: 'tags this -> RTCIceConnectionState.t [@@js.get "iceConnectionState"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/iceGatheringState) *)
  val get_iceGatheringState: 'tags this -> RTCIceGatheringState.t [@@js.get "iceGatheringState"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/localDescription) *)
  val get_localDescription: 'tags this -> RTCSessionDescription.t option [@@js.get "localDescription"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/connectionstatechange_event) *)
  val get_onconnectionstatechange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onconnectionstatechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/connectionstatechange_event) *)
  val set_onconnectionstatechange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onconnectionstatechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/datachannel_event) *)
  val get_ondatachannel: 'tags this -> (this:t -> ev:RTCDataChannelEvent.t -> any) option [@@js.get "ondatachannel"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/datachannel_event) *)
  val set_ondatachannel: 'tags this -> (this:t -> ev:RTCDataChannelEvent.t -> any) option -> unit [@@js.set "ondatachannel"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/icecandidate_event) *)
  val get_onicecandidate: 'tags this -> (this:t -> ev:RTCPeerConnectionIceEvent.t -> any) option [@@js.get "onicecandidate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/icecandidate_event) *)
  val set_onicecandidate: 'tags this -> (this:t -> ev:RTCPeerConnectionIceEvent.t -> any) option -> unit [@@js.set "onicecandidate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/icecandidateerror_event) *)
  val get_onicecandidateerror: 'tags this -> (this:t -> ev:RTCPeerConnectionIceErrorEvent.t -> any) option [@@js.get "onicecandidateerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/icecandidateerror_event) *)
  val set_onicecandidateerror: 'tags this -> (this:t -> ev:RTCPeerConnectionIceErrorEvent.t -> any) option -> unit [@@js.set "onicecandidateerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/iceconnectionstatechange_event) *)
  val get_oniceconnectionstatechange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "oniceconnectionstatechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/iceconnectionstatechange_event) *)
  val set_oniceconnectionstatechange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "oniceconnectionstatechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/icegatheringstatechange_event) *)
  val get_onicegatheringstatechange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onicegatheringstatechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/icegatheringstatechange_event) *)
  val set_onicegatheringstatechange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onicegatheringstatechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/negotiationneeded_event) *)
  val get_onnegotiationneeded: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onnegotiationneeded"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/negotiationneeded_event) *)
  val set_onnegotiationneeded: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onnegotiationneeded"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/signalingstatechange_event) *)
  val get_onsignalingstatechange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onsignalingstatechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/signalingstatechange_event) *)
  val set_onsignalingstatechange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onsignalingstatechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/track_event) *)
  val get_ontrack: 'tags this -> (this:t -> ev:RTCTrackEvent.t -> any) option [@@js.get "ontrack"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/track_event) *)
  val set_ontrack: 'tags this -> (this:t -> ev:RTCTrackEvent.t -> any) option -> unit [@@js.set "ontrack"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/pendingLocalDescription) *)
  val get_pendingLocalDescription: 'tags this -> RTCSessionDescription.t option [@@js.get "pendingLocalDescription"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/pendingRemoteDescription) *)
  val get_pendingRemoteDescription: 'tags this -> RTCSessionDescription.t option [@@js.get "pendingRemoteDescription"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/remoteDescription) *)
  val get_remoteDescription: 'tags this -> RTCSessionDescription.t option [@@js.get "remoteDescription"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/sctp) *)
  val get_sctp: 'tags this -> RTCSctpTransport.t option [@@js.get "sctp"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/signalingState) *)
  val get_signalingState: 'tags this -> RTCSignalingState.t [@@js.get "signalingState"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/addIceCandidate) *)
  val addIceCandidate: 'tags this -> ?candidate:RTCIceCandidateInit.t -> unit -> unit Promise.t [@@js.call "addIceCandidate"]
  
  (** @deprecated  *)
  val addIceCandidate': 'tags this -> candidate:RTCIceCandidateInit.t -> successCallback:VoidFunction.t -> failureCallback:RTCPeerConnectionErrorCallback.t -> unit Promise.t [@@js.call "addIceCandidate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/addTrack) *)
  val addTrack: 'tags this -> track:MediaStreamTrack.t -> streams:(MediaStream.t list [@js.variadic]) -> RTCRtpSender.t [@@js.call "addTrack"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/addTransceiver) *)
  val addTransceiver: 'tags this -> trackOrKind:([`U1 of MediaStreamTrack.t | `U2 of string] [@js.union]) -> ?init:RTCRtpTransceiverInit.t -> unit -> RTCRtpTransceiver.t [@@js.call "addTransceiver"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/close) *)
  val close: 'tags this -> unit [@@js.call "close"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/createAnswer) *)
  val createAnswer: 'tags this -> ?options:RTCAnswerOptions.t -> unit -> RTCSessionDescriptionInit.t Promise.t [@@js.call "createAnswer"]
  
  (** @deprecated  *)
  val createAnswer': 'tags this -> successCallback:RTCSessionDescriptionCallback.t -> failureCallback:RTCPeerConnectionErrorCallback.t -> unit Promise.t [@@js.call "createAnswer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/createDataChannel) *)
  val createDataChannel: 'tags this -> label:string -> ?dataChannelDict:RTCDataChannelInit.t -> unit -> RTCDataChannel.t [@@js.call "createDataChannel"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/createOffer) *)
  val createOffer: 'tags this -> ?options:RTCOfferOptions.t -> unit -> RTCSessionDescriptionInit.t Promise.t [@@js.call "createOffer"]
  
  (** @deprecated  *)
  val createOffer': 'tags this -> successCallback:RTCSessionDescriptionCallback.t -> failureCallback:RTCPeerConnectionErrorCallback.t -> ?options:RTCOfferOptions.t -> unit -> unit Promise.t [@@js.call "createOffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/getConfiguration) *)
  val getConfiguration: 'tags this -> RTCConfiguration.t [@@js.call "getConfiguration"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/getReceivers) *)
  val getReceivers: 'tags this -> RTCRtpReceiver.t list [@@js.call "getReceivers"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/getSenders) *)
  val getSenders: 'tags this -> RTCRtpSender.t list [@@js.call "getSenders"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/getStats) *)
  val getStats: 'tags this -> ?selector:MediaStreamTrack.t option -> unit -> RTCStatsReport.t Promise.t [@@js.call "getStats"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/getTransceivers) *)
  val getTransceivers: 'tags this -> RTCRtpTransceiver.t list [@@js.call "getTransceivers"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/removeTrack) *)
  val removeTrack: 'tags this -> sender:RTCRtpSender.t -> unit [@@js.call "removeTrack"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/restartIce) *)
  val restartIce: 'tags this -> unit [@@js.call "restartIce"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/setConfiguration) *)
  val setConfiguration: 'tags this -> ?configuration:RTCConfiguration.t -> unit -> unit [@@js.call "setConfiguration"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/setLocalDescription) *)
  val setLocalDescription: 'tags this -> ?description:RTCLocalSessionDescriptionInit.t -> unit -> unit Promise.t [@@js.call "setLocalDescription"]
  
  (** @deprecated  *)
  val setLocalDescription': 'tags this -> description:RTCLocalSessionDescriptionInit.t -> successCallback:VoidFunction.t -> failureCallback:RTCPeerConnectionErrorCallback.t -> unit Promise.t [@@js.call "setLocalDescription"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/setRemoteDescription) *)
  val setRemoteDescription: 'tags this -> description:RTCSessionDescriptionInit.t -> unit Promise.t [@@js.call "setRemoteDescription"]
  
  (** @deprecated  *)
  val setRemoteDescription': 'tags this -> description:RTCSessionDescriptionInit.t -> successCallback:VoidFunction.t -> failureCallback:RTCPeerConnectionErrorCallback.t -> unit Promise.t [@@js.call "setRemoteDescription"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'RTCPeerConnectionEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'RTCPeerConnectionEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: ?configuration:RTCConfiguration.t -> unit -> t [@@js.create]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/generateCertificate_static) *)
  val generateCertificate: AlgorithmIdentifier.t -> RTCCertificate.t Promise.t [@@js.global "generateCertificate"]
end
module RTCRtpStreamStats : sig
  type t = [`RTCRtpStreamStats | `RTCStats] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCRtpStreamStats | `RTCStats]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCRtpStreamStats | `RTCStats]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCRtpStreamStats ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_codecId: 'tags this -> string option [@@js.get "codecId"]
  val set_codecId: 'tags this -> string -> unit [@@js.set "codecId"]
  val get_kind: 'tags this -> string [@@js.get "kind"]
  val set_kind: 'tags this -> string -> unit [@@js.set "kind"]
  val get_ssrc: 'tags this -> float [@@js.get "ssrc"]
  val set_ssrc: 'tags this -> float -> unit [@@js.set "ssrc"]
  val get_transportId: 'tags this -> string option [@@js.get "transportId"]
  val set_transportId: 'tags this -> string -> unit [@@js.set "transportId"]
  val create: ?codecId:string -> kind:string -> ssrc:float -> ?transportId:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCSentRtpStreamStats : sig
  type t = [`RTCRtpStreamStats | `RTCSentRtpStreamStats | `RTCStats] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCRtpStreamStats | `RTCSentRtpStreamStats | `RTCStats]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCRtpStreamStats | `RTCSentRtpStreamStats | `RTCStats]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCSentRtpStreamStats ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_bytesSent: 'tags this -> float option [@@js.get "bytesSent"]
  val set_bytesSent: 'tags this -> float -> unit [@@js.set "bytesSent"]
  val get_packetsSent: 'tags this -> float option [@@js.get "packetsSent"]
  val set_packetsSent: 'tags this -> float -> unit [@@js.set "packetsSent"]
  val create: ?bytesSent:float -> ?packetsSent:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCOutboundRtpStreamStats : sig
  type t = [`RTCOutboundRtpStreamStats | `RTCRtpStreamStats | `RTCSentRtpStreamStats | `RTCStats] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCOutboundRtpStreamStats | `RTCRtpStreamStats | `RTCSentRtpStreamStats | `RTCStats]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCOutboundRtpStreamStats | `RTCRtpStreamStats | `RTCSentRtpStreamStats | `RTCStats]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCOutboundRtpStreamStats ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_firCount: 'tags this -> float option [@@js.get "firCount"]
  val set_firCount: 'tags this -> float -> unit [@@js.set "firCount"]
  val get_frameHeight: 'tags this -> float option [@@js.get "frameHeight"]
  val set_frameHeight: 'tags this -> float -> unit [@@js.set "frameHeight"]
  val get_frameWidth: 'tags this -> float option [@@js.get "frameWidth"]
  val set_frameWidth: 'tags this -> float -> unit [@@js.set "frameWidth"]
  val get_framesEncoded: 'tags this -> float option [@@js.get "framesEncoded"]
  val set_framesEncoded: 'tags this -> float -> unit [@@js.set "framesEncoded"]
  val get_framesPerSecond: 'tags this -> float option [@@js.get "framesPerSecond"]
  val set_framesPerSecond: 'tags this -> float -> unit [@@js.set "framesPerSecond"]
  val get_framesSent: 'tags this -> float option [@@js.get "framesSent"]
  val set_framesSent: 'tags this -> float -> unit [@@js.set "framesSent"]
  val get_headerBytesSent: 'tags this -> float option [@@js.get "headerBytesSent"]
  val set_headerBytesSent: 'tags this -> float -> unit [@@js.set "headerBytesSent"]
  val get_hugeFramesSent: 'tags this -> float option [@@js.get "hugeFramesSent"]
  val set_hugeFramesSent: 'tags this -> float -> unit [@@js.set "hugeFramesSent"]
  val get_keyFramesEncoded: 'tags this -> float option [@@js.get "keyFramesEncoded"]
  val set_keyFramesEncoded: 'tags this -> float -> unit [@@js.set "keyFramesEncoded"]
  val get_mediaSourceId: 'tags this -> string option [@@js.get "mediaSourceId"]
  val set_mediaSourceId: 'tags this -> string -> unit [@@js.set "mediaSourceId"]
  val get_nackCount: 'tags this -> float option [@@js.get "nackCount"]
  val set_nackCount: 'tags this -> float -> unit [@@js.set "nackCount"]
  val get_pliCount: 'tags this -> float option [@@js.get "pliCount"]
  val set_pliCount: 'tags this -> float -> unit [@@js.set "pliCount"]
  val get_qpSum: 'tags this -> float option [@@js.get "qpSum"]
  val set_qpSum: 'tags this -> float -> unit [@@js.set "qpSum"]
  val get_qualityLimitationResolutionChanges: 'tags this -> float option [@@js.get "qualityLimitationResolutionChanges"]
  val set_qualityLimitationResolutionChanges: 'tags this -> float -> unit [@@js.set "qualityLimitationResolutionChanges"]
  val get_remoteId: 'tags this -> string option [@@js.get "remoteId"]
  val set_remoteId: 'tags this -> string -> unit [@@js.set "remoteId"]
  val get_retransmittedBytesSent: 'tags this -> float option [@@js.get "retransmittedBytesSent"]
  val set_retransmittedBytesSent: 'tags this -> float -> unit [@@js.set "retransmittedBytesSent"]
  val get_retransmittedPacketsSent: 'tags this -> float option [@@js.get "retransmittedPacketsSent"]
  val set_retransmittedPacketsSent: 'tags this -> float -> unit [@@js.set "retransmittedPacketsSent"]
  val get_rid: 'tags this -> string option [@@js.get "rid"]
  val set_rid: 'tags this -> string -> unit [@@js.set "rid"]
  val get_rtxSsrc: 'tags this -> float option [@@js.get "rtxSsrc"]
  val set_rtxSsrc: 'tags this -> float -> unit [@@js.set "rtxSsrc"]
  val get_targetBitrate: 'tags this -> float option [@@js.get "targetBitrate"]
  val set_targetBitrate: 'tags this -> float -> unit [@@js.set "targetBitrate"]
  val get_totalEncodeTime: 'tags this -> float option [@@js.get "totalEncodeTime"]
  val set_totalEncodeTime: 'tags this -> float -> unit [@@js.set "totalEncodeTime"]
  val get_totalEncodedBytesTarget: 'tags this -> float option [@@js.get "totalEncodedBytesTarget"]
  val set_totalEncodedBytesTarget: 'tags this -> float -> unit [@@js.set "totalEncodedBytesTarget"]
  val get_totalPacketSendDelay: 'tags this -> float option [@@js.get "totalPacketSendDelay"]
  val set_totalPacketSendDelay: 'tags this -> float -> unit [@@js.set "totalPacketSendDelay"]
  val create: ?firCount:float -> ?frameHeight:float -> ?frameWidth:float -> ?framesEncoded:float -> ?framesPerSecond:float -> ?framesSent:float -> ?headerBytesSent:float -> ?hugeFramesSent:float -> ?keyFramesEncoded:float -> ?mediaSourceId:string -> ?nackCount:float -> ?pliCount:float -> ?qpSum:float -> ?qualityLimitationResolutionChanges:float -> ?remoteId:string -> ?retransmittedBytesSent:float -> ?retransmittedPacketsSent:float -> ?rid:string -> ?rtxSsrc:float -> ?targetBitrate:float -> ?totalEncodeTime:float -> ?totalEncodedBytesTarget:float -> ?totalPacketSendDelay:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCReceivedRtpStreamStats : sig
  type t = [`RTCReceivedRtpStreamStats | `RTCRtpStreamStats | `RTCStats] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCReceivedRtpStreamStats | `RTCRtpStreamStats | `RTCStats]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCReceivedRtpStreamStats | `RTCRtpStreamStats | `RTCStats]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCReceivedRtpStreamStats ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_jitter: 'tags this -> float option [@@js.get "jitter"]
  val set_jitter: 'tags this -> float -> unit [@@js.set "jitter"]
  val get_packetsLost: 'tags this -> float option [@@js.get "packetsLost"]
  val set_packetsLost: 'tags this -> float -> unit [@@js.set "packetsLost"]
  val get_packetsReceived: 'tags this -> float option [@@js.get "packetsReceived"]
  val set_packetsReceived: 'tags this -> float -> unit [@@js.set "packetsReceived"]
  val create: ?jitter:float -> ?packetsLost:float -> ?packetsReceived:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCInboundRtpStreamStats : sig
  type t = [`RTCInboundRtpStreamStats | `RTCReceivedRtpStreamStats | `RTCRtpStreamStats | `RTCStats] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCInboundRtpStreamStats | `RTCReceivedRtpStreamStats | `RTCRtpStreamStats | `RTCStats]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCInboundRtpStreamStats | `RTCReceivedRtpStreamStats | `RTCRtpStreamStats | `RTCStats]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCInboundRtpStreamStats ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_audioLevel: 'tags this -> float option [@@js.get "audioLevel"]
  val set_audioLevel: 'tags this -> float -> unit [@@js.set "audioLevel"]
  val get_bytesReceived: 'tags this -> float option [@@js.get "bytesReceived"]
  val set_bytesReceived: 'tags this -> float -> unit [@@js.set "bytesReceived"]
  val get_concealedSamples: 'tags this -> float option [@@js.get "concealedSamples"]
  val set_concealedSamples: 'tags this -> float -> unit [@@js.set "concealedSamples"]
  val get_concealmentEvents: 'tags this -> float option [@@js.get "concealmentEvents"]
  val set_concealmentEvents: 'tags this -> float -> unit [@@js.set "concealmentEvents"]
  val get_decoderImplementation: 'tags this -> string option [@@js.get "decoderImplementation"]
  val set_decoderImplementation: 'tags this -> string -> unit [@@js.set "decoderImplementation"]
  val get_estimatedPlayoutTimestamp: 'tags this -> DOMHighResTimeStamp.t option [@@js.get "estimatedPlayoutTimestamp"]
  val set_estimatedPlayoutTimestamp: 'tags this -> DOMHighResTimeStamp.t -> unit [@@js.set "estimatedPlayoutTimestamp"]
  val get_fecPacketsDiscarded: 'tags this -> float option [@@js.get "fecPacketsDiscarded"]
  val set_fecPacketsDiscarded: 'tags this -> float -> unit [@@js.set "fecPacketsDiscarded"]
  val get_fecPacketsReceived: 'tags this -> float option [@@js.get "fecPacketsReceived"]
  val set_fecPacketsReceived: 'tags this -> float -> unit [@@js.set "fecPacketsReceived"]
  val get_firCount: 'tags this -> float option [@@js.get "firCount"]
  val set_firCount: 'tags this -> float -> unit [@@js.set "firCount"]
  val get_frameHeight: 'tags this -> float option [@@js.get "frameHeight"]
  val set_frameHeight: 'tags this -> float -> unit [@@js.set "frameHeight"]
  val get_frameWidth: 'tags this -> float option [@@js.get "frameWidth"]
  val set_frameWidth: 'tags this -> float -> unit [@@js.set "frameWidth"]
  val get_framesDecoded: 'tags this -> float option [@@js.get "framesDecoded"]
  val set_framesDecoded: 'tags this -> float -> unit [@@js.set "framesDecoded"]
  val get_framesDropped: 'tags this -> float option [@@js.get "framesDropped"]
  val set_framesDropped: 'tags this -> float -> unit [@@js.set "framesDropped"]
  val get_framesPerSecond: 'tags this -> float option [@@js.get "framesPerSecond"]
  val set_framesPerSecond: 'tags this -> float -> unit [@@js.set "framesPerSecond"]
  val get_framesReceived: 'tags this -> float option [@@js.get "framesReceived"]
  val set_framesReceived: 'tags this -> float -> unit [@@js.set "framesReceived"]
  val get_headerBytesReceived: 'tags this -> float option [@@js.get "headerBytesReceived"]
  val set_headerBytesReceived: 'tags this -> float -> unit [@@js.set "headerBytesReceived"]
  val get_insertedSamplesForDeceleration: 'tags this -> float option [@@js.get "insertedSamplesForDeceleration"]
  val set_insertedSamplesForDeceleration: 'tags this -> float -> unit [@@js.set "insertedSamplesForDeceleration"]
  val get_jitterBufferDelay: 'tags this -> float option [@@js.get "jitterBufferDelay"]
  val set_jitterBufferDelay: 'tags this -> float -> unit [@@js.set "jitterBufferDelay"]
  val get_jitterBufferEmittedCount: 'tags this -> float option [@@js.get "jitterBufferEmittedCount"]
  val set_jitterBufferEmittedCount: 'tags this -> float -> unit [@@js.set "jitterBufferEmittedCount"]
  val get_keyFramesDecoded: 'tags this -> float option [@@js.get "keyFramesDecoded"]
  val set_keyFramesDecoded: 'tags this -> float -> unit [@@js.set "keyFramesDecoded"]
  val get_lastPacketReceivedTimestamp: 'tags this -> DOMHighResTimeStamp.t option [@@js.get "lastPacketReceivedTimestamp"]
  val set_lastPacketReceivedTimestamp: 'tags this -> DOMHighResTimeStamp.t -> unit [@@js.set "lastPacketReceivedTimestamp"]
  val get_mid: 'tags this -> string option [@@js.get "mid"]
  val set_mid: 'tags this -> string -> unit [@@js.set "mid"]
  val get_nackCount: 'tags this -> float option [@@js.get "nackCount"]
  val set_nackCount: 'tags this -> float -> unit [@@js.set "nackCount"]
  val get_packetsDiscarded: 'tags this -> float option [@@js.get "packetsDiscarded"]
  val set_packetsDiscarded: 'tags this -> float -> unit [@@js.set "packetsDiscarded"]
  val get_pliCount: 'tags this -> float option [@@js.get "pliCount"]
  val set_pliCount: 'tags this -> float -> unit [@@js.set "pliCount"]
  val get_qpSum: 'tags this -> float option [@@js.get "qpSum"]
  val set_qpSum: 'tags this -> float -> unit [@@js.set "qpSum"]
  val get_remoteId: 'tags this -> string option [@@js.get "remoteId"]
  val set_remoteId: 'tags this -> string -> unit [@@js.set "remoteId"]
  val get_removedSamplesForAcceleration: 'tags this -> float option [@@js.get "removedSamplesForAcceleration"]
  val set_removedSamplesForAcceleration: 'tags this -> float -> unit [@@js.set "removedSamplesForAcceleration"]
  val get_silentConcealedSamples: 'tags this -> float option [@@js.get "silentConcealedSamples"]
  val set_silentConcealedSamples: 'tags this -> float -> unit [@@js.set "silentConcealedSamples"]
  val get_totalAudioEnergy: 'tags this -> float option [@@js.get "totalAudioEnergy"]
  val set_totalAudioEnergy: 'tags this -> float -> unit [@@js.set "totalAudioEnergy"]
  val get_totalDecodeTime: 'tags this -> float option [@@js.get "totalDecodeTime"]
  val set_totalDecodeTime: 'tags this -> float -> unit [@@js.set "totalDecodeTime"]
  val get_totalInterFrameDelay: 'tags this -> float option [@@js.get "totalInterFrameDelay"]
  val set_totalInterFrameDelay: 'tags this -> float -> unit [@@js.set "totalInterFrameDelay"]
  val get_totalProcessingDelay: 'tags this -> float option [@@js.get "totalProcessingDelay"]
  val set_totalProcessingDelay: 'tags this -> float -> unit [@@js.set "totalProcessingDelay"]
  val get_totalSamplesDuration: 'tags this -> float option [@@js.get "totalSamplesDuration"]
  val set_totalSamplesDuration: 'tags this -> float -> unit [@@js.set "totalSamplesDuration"]
  val get_totalSamplesReceived: 'tags this -> float option [@@js.get "totalSamplesReceived"]
  val set_totalSamplesReceived: 'tags this -> float -> unit [@@js.set "totalSamplesReceived"]
  val get_totalSquaredInterFrameDelay: 'tags this -> float option [@@js.get "totalSquaredInterFrameDelay"]
  val set_totalSquaredInterFrameDelay: 'tags this -> float -> unit [@@js.set "totalSquaredInterFrameDelay"]
  val get_trackIdentifier: 'tags this -> string [@@js.get "trackIdentifier"]
  val set_trackIdentifier: 'tags this -> string -> unit [@@js.set "trackIdentifier"]
  val create: ?audioLevel:float -> ?bytesReceived:float -> ?concealedSamples:float -> ?concealmentEvents:float -> ?decoderImplementation:string -> ?estimatedPlayoutTimestamp:DOMHighResTimeStamp.t -> ?fecPacketsDiscarded:float -> ?fecPacketsReceived:float -> ?firCount:float -> ?frameHeight:float -> ?frameWidth:float -> ?framesDecoded:float -> ?framesDropped:float -> ?framesPerSecond:float -> ?framesReceived:float -> ?headerBytesReceived:float -> ?insertedSamplesForDeceleration:float -> ?jitterBufferDelay:float -> ?jitterBufferEmittedCount:float -> ?keyFramesDecoded:float -> ?lastPacketReceivedTimestamp:DOMHighResTimeStamp.t -> ?mid:string -> ?nackCount:float -> ?packetsDiscarded:float -> ?pliCount:float -> ?qpSum:float -> ?remoteId:string -> ?removedSamplesForAcceleration:float -> ?silentConcealedSamples:float -> ?totalAudioEnergy:float -> ?totalDecodeTime:float -> ?totalInterFrameDelay:float -> ?totalProcessingDelay:float -> ?totalSamplesDuration:float -> ?totalSamplesReceived:float -> ?totalSquaredInterFrameDelay:float -> trackIdentifier:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCIceTransportEventMap : sig
  type t = [`RTCIceTransportEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCIceTransportEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCIceTransportEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCIceTransportEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_gatheringstatechange: 'tags this -> Event.t [@@js.get "gatheringstatechange"]
  val set_gatheringstatechange: 'tags this -> Event.t -> unit [@@js.set "gatheringstatechange"]
  val get_selectedcandidatepairchange: 'tags this -> Event.t [@@js.get "selectedcandidatepairchange"]
  val set_selectedcandidatepairchange: 'tags this -> Event.t -> unit [@@js.set "selectedcandidatepairchange"]
  val get_statechange: 'tags this -> Event.t [@@js.get "statechange"]
  val set_statechange: 'tags this -> Event.t -> unit [@@js.set "statechange"]
  val create: gatheringstatechange:Event.t -> selectedcandidatepairchange:Event.t -> statechange:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCStatsIceCandidatePairState : sig
  type t = ([`L_s1044_waiting[@js "waiting"] | `L_s387_failed[@js "failed"] | `L_s441_frozen[@js "frozen"] | `L_s511_in_progress[@js "in-progress"] | `L_s519_inprogress[@js "inprogress"] | `L_s937_succeeded[@js "succeeded"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RTCIceCandidatePairStats : sig
  type t = [`RTCIceCandidatePairStats | `RTCStats] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCIceCandidatePairStats | `RTCStats]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCIceCandidatePairStats | `RTCStats]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCIceCandidatePairStats ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_availableIncomingBitrate: 'tags this -> float option [@@js.get "availableIncomingBitrate"]
  val set_availableIncomingBitrate: 'tags this -> float -> unit [@@js.set "availableIncomingBitrate"]
  val get_availableOutgoingBitrate: 'tags this -> float option [@@js.get "availableOutgoingBitrate"]
  val set_availableOutgoingBitrate: 'tags this -> float -> unit [@@js.set "availableOutgoingBitrate"]
  val get_bytesReceived: 'tags this -> float option [@@js.get "bytesReceived"]
  val set_bytesReceived: 'tags this -> float -> unit [@@js.set "bytesReceived"]
  val get_bytesSent: 'tags this -> float option [@@js.get "bytesSent"]
  val set_bytesSent: 'tags this -> float -> unit [@@js.set "bytesSent"]
  val get_currentRoundTripTime: 'tags this -> float option [@@js.get "currentRoundTripTime"]
  val set_currentRoundTripTime: 'tags this -> float -> unit [@@js.set "currentRoundTripTime"]
  val get_lastPacketReceivedTimestamp: 'tags this -> DOMHighResTimeStamp.t option [@@js.get "lastPacketReceivedTimestamp"]
  val set_lastPacketReceivedTimestamp: 'tags this -> DOMHighResTimeStamp.t -> unit [@@js.set "lastPacketReceivedTimestamp"]
  val get_lastPacketSentTimestamp: 'tags this -> DOMHighResTimeStamp.t option [@@js.get "lastPacketSentTimestamp"]
  val set_lastPacketSentTimestamp: 'tags this -> DOMHighResTimeStamp.t -> unit [@@js.set "lastPacketSentTimestamp"]
  val get_localCandidateId: 'tags this -> string [@@js.get "localCandidateId"]
  val set_localCandidateId: 'tags this -> string -> unit [@@js.set "localCandidateId"]
  val get_nominated: 'tags this -> bool option [@@js.get "nominated"]
  val set_nominated: 'tags this -> bool -> unit [@@js.set "nominated"]
  val get_remoteCandidateId: 'tags this -> string [@@js.get "remoteCandidateId"]
  val set_remoteCandidateId: 'tags this -> string -> unit [@@js.set "remoteCandidateId"]
  val get_requestsReceived: 'tags this -> float option [@@js.get "requestsReceived"]
  val set_requestsReceived: 'tags this -> float -> unit [@@js.set "requestsReceived"]
  val get_requestsSent: 'tags this -> float option [@@js.get "requestsSent"]
  val set_requestsSent: 'tags this -> float -> unit [@@js.set "requestsSent"]
  val get_responsesReceived: 'tags this -> float option [@@js.get "responsesReceived"]
  val set_responsesReceived: 'tags this -> float -> unit [@@js.set "responsesReceived"]
  val get_responsesSent: 'tags this -> float option [@@js.get "responsesSent"]
  val set_responsesSent: 'tags this -> float -> unit [@@js.set "responsesSent"]
  val get_state: 'tags this -> RTCStatsIceCandidatePairState.t [@@js.get "state"]
  val set_state: 'tags this -> RTCStatsIceCandidatePairState.t -> unit [@@js.set "state"]
  val get_totalRoundTripTime: 'tags this -> float option [@@js.get "totalRoundTripTime"]
  val set_totalRoundTripTime: 'tags this -> float -> unit [@@js.set "totalRoundTripTime"]
  val get_transportId: 'tags this -> string [@@js.get "transportId"]
  val set_transportId: 'tags this -> string -> unit [@@js.set "transportId"]
  val create: ?availableIncomingBitrate:float -> ?availableOutgoingBitrate:float -> ?bytesReceived:float -> ?bytesSent:float -> ?currentRoundTripTime:float -> ?lastPacketReceivedTimestamp:DOMHighResTimeStamp.t -> ?lastPacketSentTimestamp:DOMHighResTimeStamp.t -> localCandidateId:string -> ?nominated:bool -> remoteCandidateId:string -> ?requestsReceived:float -> ?requestsSent:float -> ?responsesReceived:float -> ?responsesSent:float -> state:RTCStatsIceCandidatePairState.t -> ?totalRoundTripTime:float -> transportId:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCEncodedVideoFrameType : sig
  type t = ([`L_s310_delta[@js "delta"] | `L_s361_empty[@js "empty"] | `L_s539_key[@js "key"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module RTCEncodedVideoFrameMetadata : sig
  type t = [`RTCEncodedVideoFrameMetadata] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCEncodedVideoFrameMetadata]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCEncodedVideoFrameMetadata]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCEncodedVideoFrameMetadata ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_contributingSources: 'tags this -> float list option [@@js.get "contributingSources"]
  val set_contributingSources: 'tags this -> float list -> unit [@@js.set "contributingSources"]
  val get_dependencies: 'tags this -> float list option [@@js.get "dependencies"]
  val set_dependencies: 'tags this -> float list -> unit [@@js.set "dependencies"]
  val get_frameId: 'tags this -> float option [@@js.get "frameId"]
  val set_frameId: 'tags this -> float -> unit [@@js.set "frameId"]
  val get_height: 'tags this -> float option [@@js.get "height"]
  val set_height: 'tags this -> float -> unit [@@js.set "height"]
  val get_payloadType: 'tags this -> float option [@@js.get "payloadType"]
  val set_payloadType: 'tags this -> float -> unit [@@js.set "payloadType"]
  val get_spatialIndex: 'tags this -> float option [@@js.get "spatialIndex"]
  val set_spatialIndex: 'tags this -> float -> unit [@@js.set "spatialIndex"]
  val get_synchronizationSource: 'tags this -> float option [@@js.get "synchronizationSource"]
  val set_synchronizationSource: 'tags this -> float -> unit [@@js.set "synchronizationSource"]
  val get_temporalIndex: 'tags this -> float option [@@js.get "temporalIndex"]
  val set_temporalIndex: 'tags this -> float -> unit [@@js.set "temporalIndex"]
  val get_timestamp: 'tags this -> float option [@@js.get "timestamp"]
  val set_timestamp: 'tags this -> float -> unit [@@js.set "timestamp"]
  val get_width: 'tags this -> float option [@@js.get "width"]
  val set_width: 'tags this -> float -> unit [@@js.set "width"]
  val create: ?contributingSources:float list -> ?dependencies:float list -> ?frameId:float -> ?height:float -> ?payloadType:float -> ?spatialIndex:float -> ?synchronizationSource:float -> ?temporalIndex:float -> ?timestamp:float -> ?width:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCEncodedVideoFrame) *)
module[@js.scope "RTCEncodedVideoFrame"] RTCEncodedVideoFrame : sig
  type t = [`RTCEncodedVideoFrame] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCEncodedVideoFrame]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCEncodedVideoFrame]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCEncodedVideoFrame ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCEncodedVideoFrame/data) *)
  val get_data: 'tags this -> ArrayBuffer.t [@@js.get "data"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCEncodedVideoFrame/data) *)
  val set_data: 'tags this -> ArrayBuffer.t -> unit [@@js.set "data"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCEncodedVideoFrame/timestamp) *)
  val get_timestamp: 'tags this -> float [@@js.get "timestamp"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCEncodedVideoFrame/type) *)
  val get_type: 'tags this -> RTCEncodedVideoFrameType.t [@@js.get "type"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCEncodedVideoFrame/getMetadata) *)
  val getMetadata: 'tags this -> RTCEncodedVideoFrameMetadata.t [@@js.call "getMetadata"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module RTCEncodedAudioFrameMetadata : sig
  type t = [`RTCEncodedAudioFrameMetadata] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCEncodedAudioFrameMetadata]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCEncodedAudioFrameMetadata]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCEncodedAudioFrameMetadata ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_contributingSources: 'tags this -> float list option [@@js.get "contributingSources"]
  val set_contributingSources: 'tags this -> float list -> unit [@@js.set "contributingSources"]
  val get_payloadType: 'tags this -> float option [@@js.get "payloadType"]
  val set_payloadType: 'tags this -> float -> unit [@@js.set "payloadType"]
  val get_sequenceNumber: 'tags this -> float option [@@js.get "sequenceNumber"]
  val set_sequenceNumber: 'tags this -> float -> unit [@@js.set "sequenceNumber"]
  val get_synchronizationSource: 'tags this -> float option [@@js.get "synchronizationSource"]
  val set_synchronizationSource: 'tags this -> float -> unit [@@js.set "synchronizationSource"]
  val create: ?contributingSources:float list -> ?payloadType:float -> ?sequenceNumber:float -> ?synchronizationSource:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCEncodedAudioFrame) *)
module[@js.scope "RTCEncodedAudioFrame"] RTCEncodedAudioFrame : sig
  type t = [`RTCEncodedAudioFrame] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCEncodedAudioFrame]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCEncodedAudioFrame]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCEncodedAudioFrame ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCEncodedAudioFrame/data) *)
  val get_data: 'tags this -> ArrayBuffer.t [@@js.get "data"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCEncodedAudioFrame/data) *)
  val set_data: 'tags this -> ArrayBuffer.t -> unit [@@js.set "data"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCEncodedAudioFrame/timestamp) *)
  val get_timestamp: 'tags this -> float [@@js.get "timestamp"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/RTCEncodedAudioFrame/getMetadata) *)
  val getMetadata: 'tags this -> RTCEncodedAudioFrameMetadata.t [@@js.call "getMetadata"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module RTCDtlsTransportEventMap : sig
  type t = [`RTCDtlsTransportEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCDtlsTransportEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCDtlsTransportEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCDtlsTransportEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_error: 'tags this -> Event.t [@@js.get "error"]
  val set_error: 'tags this -> Event.t -> unit [@@js.set "error"]
  val get_statechange: 'tags this -> Event.t [@@js.get "statechange"]
  val set_statechange: 'tags this -> Event.t -> unit [@@js.set "statechange"]
  val create: error:Event.t -> statechange:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCDataChannelEventMap : sig
  type t = [`RTCDataChannelEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCDataChannelEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCDataChannelEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCDataChannelEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_bufferedamountlow: 'tags this -> Event.t [@@js.get "bufferedamountlow"]
  val set_bufferedamountlow: 'tags this -> Event.t -> unit [@@js.set "bufferedamountlow"]
  val get_close: 'tags this -> Event.t [@@js.get "close"]
  val set_close: 'tags this -> Event.t -> unit [@@js.set "close"]
  val get_closing: 'tags this -> Event.t [@@js.get "closing"]
  val set_closing: 'tags this -> Event.t -> unit [@@js.set "closing"]
  val get_error: 'tags this -> Event.t [@@js.get "error"]
  val set_error: 'tags this -> Event.t -> unit [@@js.set "error"]
  val get_message: 'tags this -> MessageEvent.t_0 [@@js.get "message"]
  val set_message: 'tags this -> MessageEvent.t_0 -> unit [@@js.set "message"]
  val get_open: 'tags this -> Event.t [@@js.get "open"]
  val set_open: 'tags this -> Event.t -> unit [@@js.set "open"]
  val create: bufferedamountlow:Event.t -> close:Event.t -> closing:Event.t -> error:Event.t -> message:MessageEvent.t_0 -> open_:(Event.t[@js "open"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCDTMFSenderEventMap : sig
  type t = [`RTCDTMFSenderEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCDTMFSenderEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCDTMFSenderEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCDTMFSenderEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_tonechange: 'tags this -> RTCDTMFToneChangeEvent.t [@@js.get "tonechange"]
  val set_tonechange: 'tags this -> RTCDTMFToneChangeEvent.t -> unit [@@js.set "tonechange"]
  val create: tonechange:RTCDTMFToneChangeEvent.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RTCCertificateExpiration : sig
  type t = [`RTCCertificateExpiration] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`RTCCertificateExpiration]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`RTCCertificateExpiration]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `RTCCertificateExpiration ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_expires: 'tags this -> float option [@@js.get "expires"]
  val set_expires: 'tags this -> float -> unit [@@js.set "expires"]
  val create: ?expires:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AuthenticatorResponse)
*)
module[@js.scope "AuthenticatorResponse"] AuthenticatorResponse : sig
  type t = [`AuthenticatorResponse] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AuthenticatorResponse]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AuthenticatorResponse]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AuthenticatorResponse ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AuthenticatorResponse/clientDataJSON) *)
  val get_clientDataJSON: 'tags this -> ArrayBuffer.t [@@js.get "clientDataJSON"]
  val create: clientDataJSON:ArrayBuffer.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end
module CredentialPropertiesOutput : sig
  type t = [`CredentialPropertiesOutput] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CredentialPropertiesOutput]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CredentialPropertiesOutput]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CredentialPropertiesOutput ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_rk: 'tags this -> bool option [@@js.get "rk"]
  val set_rk: 'tags this -> bool -> unit [@@js.set "rk"]
  val create: ?rk:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module AuthenticationExtensionsClientOutputs : sig
  type t = [`AuthenticationExtensionsClientOutputs] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AuthenticationExtensionsClientOutputs]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AuthenticationExtensionsClientOutputs]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AuthenticationExtensionsClientOutputs ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_appid: 'tags this -> bool option [@@js.get "appid"]
  val set_appid: 'tags this -> bool -> unit [@@js.set "appid"]
  val get_credProps: 'tags this -> CredentialPropertiesOutput.t option [@@js.get "credProps"]
  val set_credProps: 'tags this -> CredentialPropertiesOutput.t -> unit [@@js.set "credProps"]
  val get_hmacCreateSecret: 'tags this -> bool option [@@js.get "hmacCreateSecret"]
  val set_hmacCreateSecret: 'tags this -> bool -> unit [@@js.set "hmacCreateSecret"]
  val create: ?appid:bool -> ?credProps:CredentialPropertiesOutput.t -> ?hmacCreateSecret:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PublicKeyCredential)
*)
module[@js.scope "PublicKeyCredential"] PublicKeyCredential : sig
  type t = [`Credential | `PublicKeyCredential] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Credential | `PublicKeyCredential]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Credential | `PublicKeyCredential]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PublicKeyCredential ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_authenticatorAttachment: 'tags this -> string option [@@js.get "authenticatorAttachment"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PublicKeyCredential/rawId) *)
  val get_rawId: 'tags this -> ArrayBuffer.t [@@js.get "rawId"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PublicKeyCredential/response) *)
  val get_response: 'tags this -> AuthenticatorResponse.t [@@js.get "response"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PublicKeyCredential/getClientExtensionResults) *)
  val getClientExtensionResults: 'tags this -> AuthenticationExtensionsClientOutputs.t [@@js.call "getClientExtensionResults"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PublicKeyCredential/isConditionalMediationAvailable) *)
  val isConditionalMediationAvailable: unit -> bool Promise.t [@@js.global "isConditionalMediationAvailable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PublicKeyCredential/isUserVerifyingPlatformAuthenticatorAvailable_static) *)
  val isUserVerifyingPlatformAuthenticatorAvailable: unit -> bool Promise.t [@@js.global "isUserVerifyingPlatformAuthenticatorAvailable"]
end
module PictureInPictureWindowEventMap : sig
  type t = [`PictureInPictureWindowEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PictureInPictureWindowEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PictureInPictureWindowEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PictureInPictureWindowEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_resize: 'tags this -> Event.t [@@js.get "resize"]
  val set_resize: 'tags this -> Event.t -> unit [@@js.set "resize"]
  val create: resize:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module PermissionStatusEventMap : sig
  type t = [`PermissionStatusEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PermissionStatusEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PermissionStatusEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PermissionStatusEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_change: 'tags this -> Event.t [@@js.get "change"]
  val set_change: 'tags this -> Event.t -> unit [@@js.set "change"]
  val create: change:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformancePaintTiming) *)
module[@js.scope "PerformancePaintTiming"] PerformancePaintTiming : sig
  type t = [`PerformanceEntry | `PerformancePaintTiming] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PerformanceEntry | `PerformancePaintTiming]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PerformanceEntry | `PerformancePaintTiming]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PerformancePaintTiming ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module PerformanceObserverInit : sig
  type t = [`PerformanceObserverInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PerformanceObserverInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PerformanceObserverInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PerformanceObserverInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_buffered: 'tags this -> bool option [@@js.get "buffered"]
  val set_buffered: 'tags this -> bool -> unit [@@js.set "buffered"]
  val get_entryTypes: 'tags this -> string list option [@@js.get "entryTypes"]
  val set_entryTypes: 'tags this -> string list -> unit [@@js.set "entryTypes"]
  val get_type: 'tags this -> string option [@@js.get "type"]
  val set_type: 'tags this -> string -> unit [@@js.set "type"]
  val create: ?buffered:bool -> ?entryTypes:string list -> ?type_:(string[@js "type"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceObserverEntryList) *)
module[@js.scope "PerformanceObserverEntryList"] PerformanceObserverEntryList : sig
  type t = [`PerformanceObserverEntryList] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PerformanceObserverEntryList]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PerformanceObserverEntryList]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PerformanceObserverEntryList ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceObserverEntryList/getEntries) *)
  val getEntries: 'tags this -> PerformanceEntryList.t [@@js.call "getEntries"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceObserverEntryList/getEntriesByName) *)
  val getEntriesByName: 'tags this -> name:string -> ?type_:string -> unit -> PerformanceEntryList.t [@@js.call "getEntriesByName"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceObserverEntryList/getEntriesByType) *)
  val getEntriesByType: 'tags this -> type_:string -> PerformanceEntryList.t [@@js.call "getEntriesByType"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceObserver) *)
module[@js.scope "PerformanceObserver"] rec PerformanceObserver : sig
  type t = [`PerformanceObserver] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PerformanceObserver]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PerformanceObserver]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PerformanceObserver ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceObserver/disconnect) *)
  val disconnect: 'tags this -> unit [@@js.call "disconnect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceObserver/observe) *)
  val observe: 'tags this -> ?options:PerformanceObserverInit.t -> unit -> unit [@@js.call "observe"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceObserver/takeRecords) *)
  val takeRecords: 'tags this -> PerformanceEntryList.t [@@js.call "takeRecords"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: PerformanceObserverCallback.t -> t [@@js.create]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceObserver/supportedEntryTypes_static) *)
  val supportedEntryTypes: unit -> string list [@@js.get "supportedEntryTypes"]
end
and PerformanceObserverCallback : sig
  type t = [`PerformanceObserverCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PerformanceObserverCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PerformanceObserverCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PerformanceObserverCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> entries:PerformanceObserverEntryList.t -> observer:PerformanceObserver.t -> unit [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming) *)
module[@js.scope "PerformanceServerTiming"] PerformanceServerTiming : sig
  type t = [`PerformanceServerTiming] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PerformanceServerTiming]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PerformanceServerTiming]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PerformanceServerTiming ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming/description) *)
  val get_description: 'tags this -> string [@@js.get "description"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming/duration) *)
  val get_duration: 'tags this -> DOMHighResTimeStamp.t [@@js.get "duration"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming/name) *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming/toJSON) *)
  val toJSON: 'tags this -> any [@@js.call "toJSON"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Enables retrieval and analysis of detailed network timing data regarding the loading of an application's resources. An application can use the timing metrics to determine, for example, the length of time it takes to fetch a specific resource, such as an XMLHttpRequest, <SVG>, image, or script.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming)
*)
module[@js.scope "PerformanceResourceTiming"] PerformanceResourceTiming : sig
  type t = [`PerformanceEntry | `PerformanceResourceTiming] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PerformanceEntry | `PerformanceResourceTiming]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PerformanceEntry | `PerformanceResourceTiming]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PerformanceResourceTiming ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/connectEnd) *)
  val get_connectEnd: 'tags this -> DOMHighResTimeStamp.t [@@js.get "connectEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/connectStart) *)
  val get_connectStart: 'tags this -> DOMHighResTimeStamp.t [@@js.get "connectStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/decodedBodySize) *)
  val get_decodedBodySize: 'tags this -> float [@@js.get "decodedBodySize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/domainLookupEnd) *)
  val get_domainLookupEnd: 'tags this -> DOMHighResTimeStamp.t [@@js.get "domainLookupEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/domainLookupStart) *)
  val get_domainLookupStart: 'tags this -> DOMHighResTimeStamp.t [@@js.get "domainLookupStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/encodedBodySize) *)
  val get_encodedBodySize: 'tags this -> float [@@js.get "encodedBodySize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/fetchStart) *)
  val get_fetchStart: 'tags this -> DOMHighResTimeStamp.t [@@js.get "fetchStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/initiatorType) *)
  val get_initiatorType: 'tags this -> string [@@js.get "initiatorType"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/nextHopProtocol) *)
  val get_nextHopProtocol: 'tags this -> string [@@js.get "nextHopProtocol"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/redirectEnd) *)
  val get_redirectEnd: 'tags this -> DOMHighResTimeStamp.t [@@js.get "redirectEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/redirectStart) *)
  val get_redirectStart: 'tags this -> DOMHighResTimeStamp.t [@@js.get "redirectStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/requestStart) *)
  val get_requestStart: 'tags this -> DOMHighResTimeStamp.t [@@js.get "requestStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/responseEnd) *)
  val get_responseEnd: 'tags this -> DOMHighResTimeStamp.t [@@js.get "responseEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/responseStart) *)
  val get_responseStart: 'tags this -> DOMHighResTimeStamp.t [@@js.get "responseStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/secureConnectionStart) *)
  val get_secureConnectionStart: 'tags this -> DOMHighResTimeStamp.t [@@js.get "secureConnectionStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/serverTiming) *)
  val get_serverTiming: 'tags this -> PerformanceServerTiming.t list [@@js.get "serverTiming"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/transferSize) *)
  val get_transferSize: 'tags this -> float [@@js.get "transferSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/workerStart) *)
  val get_workerStart: 'tags this -> DOMHighResTimeStamp.t [@@js.get "workerStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/toJSON) *)
  val toJSON: 'tags this -> any [@@js.call "toJSON"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module NavigationTimingType : sig
  type t = ([`L_s178_back_forward[@js "back_forward"] | `L_s664_navigate[@js "navigate"] | `L_s774_prerender[@js "prerender"] | `L_s812_reload[@js "reload"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  Provides methods and properties to store and retrieve metrics regarding the browser's document navigation events. For example, this interface can be used to determine how much time it takes to load or unload a document.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming)
*)
module[@js.scope "PerformanceNavigationTiming"] PerformanceNavigationTiming : sig
  type t = [`PerformanceEntry | `PerformanceNavigationTiming | `PerformanceResourceTiming] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PerformanceEntry | `PerformanceNavigationTiming | `PerformanceResourceTiming]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PerformanceEntry | `PerformanceNavigationTiming | `PerformanceResourceTiming]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PerformanceNavigationTiming ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/domComplete) *)
  val get_domComplete: 'tags this -> DOMHighResTimeStamp.t [@@js.get "domComplete"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/domContentLoadedEventEnd) *)
  val get_domContentLoadedEventEnd: 'tags this -> DOMHighResTimeStamp.t [@@js.get "domContentLoadedEventEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/domContentLoadedEventStart) *)
  val get_domContentLoadedEventStart: 'tags this -> DOMHighResTimeStamp.t [@@js.get "domContentLoadedEventStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/domInteractive) *)
  val get_domInteractive: 'tags this -> DOMHighResTimeStamp.t [@@js.get "domInteractive"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/loadEventEnd) *)
  val get_loadEventEnd: 'tags this -> DOMHighResTimeStamp.t [@@js.get "loadEventEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/loadEventStart) *)
  val get_loadEventStart: 'tags this -> DOMHighResTimeStamp.t [@@js.get "loadEventStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/redirectCount) *)
  val get_redirectCount: 'tags this -> float [@@js.get "redirectCount"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/type) *)
  val get_type: 'tags this -> NavigationTimingType.t [@@js.get "type"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/unloadEventEnd) *)
  val get_unloadEventEnd: 'tags this -> DOMHighResTimeStamp.t [@@js.get "unloadEventEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/unloadEventStart) *)
  val get_unloadEventStart: 'tags this -> DOMHighResTimeStamp.t [@@js.get "unloadEventStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/toJSON) *)
  val toJSON: 'tags this -> any [@@js.call "toJSON"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceEventTiming) *)
module[@js.scope "PerformanceEventTiming"] PerformanceEventTiming : sig
  type t = [`PerformanceEntry | `PerformanceEventTiming] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PerformanceEntry | `PerformanceEventTiming]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PerformanceEntry | `PerformanceEventTiming]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PerformanceEventTiming ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceEventTiming/cancelable) *)
  val get_cancelable: 'tags this -> bool [@@js.get "cancelable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceEventTiming/processingEnd) *)
  val get_processingEnd: 'tags this -> DOMHighResTimeStamp.t [@@js.get "processingEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceEventTiming/processingStart) *)
  val get_processingStart: 'tags this -> DOMHighResTimeStamp.t [@@js.get "processingStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceEventTiming/target) *)
  val get_target: 'tags this -> Node.t option [@@js.get "target"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PerformanceEventTiming/toJSON) *)
  val toJSON: 'tags this -> any [@@js.call "toJSON"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module PerformanceEventMap : sig
  type t = [`PerformanceEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PerformanceEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PerformanceEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PerformanceEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_resourcetimingbufferfull: 'tags this -> Event.t [@@js.get "resourcetimingbufferfull"]
  val set_resourcetimingbufferfull: 'tags this -> Event.t -> unit [@@js.set "resourcetimingbufferfull"]
  val create: resourcetimingbufferfull:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module PaymentRequestEventMap : sig
  type t = [`PaymentRequestEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PaymentRequestEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PaymentRequestEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PaymentRequestEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_paymentmethodchange: 'tags this -> Event.t [@@js.get "paymentmethodchange"]
  val set_paymentmethodchange: 'tags this -> Event.t -> unit [@@js.set "paymentmethodchange"]
  val create: paymentmethodchange:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module PaymentValidationErrors : sig
  type t = [`PaymentValidationErrors] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PaymentValidationErrors]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PaymentValidationErrors]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PaymentValidationErrors ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_error: 'tags this -> string option [@@js.get "error"]
  val set_error: 'tags this -> string -> unit [@@js.set "error"]
  val get_paymentMethod: 'tags this -> any option [@@js.get "paymentMethod"]
  val set_paymentMethod: 'tags this -> any -> unit [@@js.set "paymentMethod"]
  val create: ?error:string -> ?paymentMethod:any -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module PaymentComplete : sig
  type t = ([`L_s1010_unknown[@js "unknown"] | `L_s386_fail[@js "fail"] | `L_s938_success[@js "success"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  This Payment Request API interface is returned after a user selects a payment method and approves a payment request.
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PaymentResponse)
*)
module[@js.scope "PaymentResponse"] PaymentResponse : sig
  type t = [`EventTarget | `PaymentResponse] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `PaymentResponse]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `PaymentResponse]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PaymentResponse ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PaymentResponse/details) *)
  val get_details: 'tags this -> any [@@js.get "details"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PaymentResponse/methodName) *)
  val get_methodName: 'tags this -> string [@@js.get "methodName"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PaymentResponse/requestId) *)
  val get_requestId: 'tags this -> string [@@js.get "requestId"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PaymentResponse/complete) *)
  val complete: 'tags this -> ?result:PaymentComplete.t -> unit -> unit Promise.t [@@js.call "complete"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PaymentResponse/retry) *)
  val retry: 'tags this -> ?errorFields:PaymentValidationErrors.t -> unit -> unit Promise.t [@@js.call "retry"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PaymentResponse/toJSON) *)
  val toJSON: 'tags this -> any [@@js.call "toJSON"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module PaymentMethodData : sig
  type t = [`PaymentMethodData] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PaymentMethodData]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PaymentMethodData]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PaymentMethodData ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_data: 'tags this -> any option [@@js.get "data"]
  val set_data: 'tags this -> any -> unit [@@js.set "data"]
  val get_supportedMethods: 'tags this -> string [@@js.get "supportedMethods"]
  val set_supportedMethods: 'tags this -> string -> unit [@@js.set "supportedMethods"]
  val create: ?data:any -> supportedMethods:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module PaymentDetailsInit : sig
  type t = [`PaymentDetailsBase | `PaymentDetailsInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PaymentDetailsBase | `PaymentDetailsInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PaymentDetailsBase | `PaymentDetailsInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PaymentDetailsInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_id: 'tags this -> string option [@@js.get "id"]
  val set_id: 'tags this -> string -> unit [@@js.set "id"]
  val get_total: 'tags this -> PaymentItem.t [@@js.get "total"]
  val set_total: 'tags this -> PaymentItem.t -> unit [@@js.set "total"]
  val create: ?id:string -> total:PaymentItem.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  This Payment Request API interface is the primary access point into the API, and lets web content and apps accept payments from the end user.
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PaymentRequest)
*)
module[@js.scope "PaymentRequest"] PaymentRequest : sig
  type t = [`EventTarget | `PaymentRequest] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `PaymentRequest]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `PaymentRequest]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PaymentRequest ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PaymentRequest/id) *)
  val get_id: 'tags this -> string [@@js.get "id"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PaymentRequest/paymentmethodchange_event) *)
  val get_onpaymentmethodchange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onpaymentmethodchange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PaymentRequest/paymentmethodchange_event) *)
  val set_onpaymentmethodchange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onpaymentmethodchange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PaymentRequest/abort) *)
  val abort: 'tags this -> unit Promise.t [@@js.call "abort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PaymentRequest/canMakePayment) *)
  val canMakePayment: 'tags this -> bool Promise.t [@@js.call "canMakePayment"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PaymentRequest/show) *)
  val show: 'tags this -> ?detailsPromise:([`U1 of PaymentDetailsUpdate.t | `U2 of PaymentDetailsUpdate.t PromiseLike.t] [@js.union]) -> unit -> PaymentResponse.t Promise.t [@@js.call "show"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'PaymentRequestEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'PaymentRequestEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: methodData:PaymentMethodData.t list -> details:PaymentDetailsInit.t -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OverconstrainedError) *)
module[@js.scope "OverconstrainedError"] OverconstrainedError : sig
  type t = [`DOMException | `OverconstrainedError] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DOMException | `OverconstrainedError]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DOMException | `OverconstrainedError]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OverconstrainedError ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OverconstrainedError/constraint) *)
  val get_constraint: 'tags this -> string [@@js.get "constraint"]
  val create: constraint_:(string[@js "constraint"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': constraint_:string -> ?message:string -> unit -> t [@@js.create]
end
module OptionalPrefixToken : sig
  type 'T t = (([`L_s0[@js ""]] [@js.enum]), (* FIXME: unknown type '`${T} `' *)any) union2
  val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
  val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
end
module OptionalPostfixToken : sig
  type 'T t = (([`L_s0[@js ""]] [@js.enum]), (* FIXME: unknown type '` ${T}`' *)any) union2
  val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
  val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
end

(**
  <option> elements and inherits all classes and methods of the HTMLElement interface.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement)
*)
module[@js.scope "HTMLOptionElement"] HTMLOptionElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOptionElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOptionElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOptionElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLOptionElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Sets or retrieves the status of an option.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/defaultSelected)
  *)
  val get_defaultSelected: 'tags this -> bool [@@js.get "defaultSelected"]
  
  (**
    Sets or retrieves the status of an option.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/defaultSelected)
  *)
  val set_defaultSelected: 'tags this -> bool -> unit [@@js.set "defaultSelected"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/disabled) *)
  val get_disabled: 'tags this -> bool [@@js.get "disabled"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/disabled) *)
  val set_disabled: 'tags this -> bool -> unit [@@js.set "disabled"]
  
  (**
    Retrieves a reference to the form that the object is embedded in.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/form)
  *)
  val get_form: 'tags this -> HTMLFormElement.t option [@@js.get "form"]
  
  (**
    Sets or retrieves the ordinal position of an option in a list box.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/index)
  *)
  val get_index: 'tags this -> float [@@js.get "index"]
  
  (**
    Sets or retrieves a value that you can use to implement your own label functionality for the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/label)
  *)
  val get_label: 'tags this -> string [@@js.get "label"]
  
  (**
    Sets or retrieves a value that you can use to implement your own label functionality for the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/label)
  *)
  val set_label: 'tags this -> string -> unit [@@js.set "label"]
  
  (**
    Sets or retrieves whether the option in the list box is the default item.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/selected)
  *)
  val get_selected: 'tags this -> bool [@@js.get "selected"]
  
  (**
    Sets or retrieves whether the option in the list box is the default item.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/selected)
  *)
  val set_selected: 'tags this -> bool -> unit [@@js.set "selected"]
  
  (**
    Sets or retrieves the text string specified by the option tag.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/text)
  *)
  val get_text: 'tags this -> string [@@js.get "text"]
  
  (**
    Sets or retrieves the text string specified by the option tag.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/text)
  *)
  val set_text: 'tags this -> string -> unit [@@js.set "text"]
  
  (**
    Sets or retrieves the value which is returned to the server when the form control is submitted.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/value)
  *)
  val get_value: 'tags this -> string [@@js.get "value"]
  
  (**
    Sets or retrieves the value which is returned to the server when the form control is submitted.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/value)
  *)
  val set_value: 'tags this -> string -> unit [@@js.set "value"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module[@js.scope "Option"] Option : sig
  val create: ?text:string -> ?value:string -> ?defaultSelected:bool -> ?selected:bool -> unit -> HTMLOptionElement.t [@@js.create]
end
module OnBeforeUnloadEventHandlerNonNull : sig
  type t = [`OnBeforeUnloadEventHandlerNonNull] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`OnBeforeUnloadEventHandlerNonNull]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`OnBeforeUnloadEventHandlerNonNull]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OnBeforeUnloadEventHandlerNonNull ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> event:Event.t -> string option [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module OnBeforeUnloadEventHandler : sig
  type t = OnBeforeUnloadEventHandlerNonNull.t option
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module OffscreenCanvasEventMap : sig
  type t = [`OffscreenCanvasEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`OffscreenCanvasEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`OffscreenCanvasEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OffscreenCanvasEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_contextlost: 'tags this -> Event.t [@@js.get "contextlost"]
  val set_contextlost: 'tags this -> Event.t -> unit [@@js.set "contextlost"]
  val get_contextrestored: 'tags this -> Event.t [@@js.get "contextrestored"]
  val set_contextrestored: 'tags this -> Event.t -> unit [@@js.set "contextrestored"]
  val create: contextlost:Event.t -> contextrestored:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module BaseAudioContextEventMap : sig
  type t = [`BaseAudioContextEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`BaseAudioContextEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`BaseAudioContextEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `BaseAudioContextEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_statechange: 'tags this -> Event.t [@@js.get "statechange"]
  val set_statechange: 'tags this -> Event.t -> unit [@@js.set "statechange"]
  val create: statechange:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module OfflineAudioContextEventMap : sig
  type t = [`BaseAudioContextEventMap | `OfflineAudioContextEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`BaseAudioContextEventMap | `OfflineAudioContextEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`BaseAudioContextEventMap | `OfflineAudioContextEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OfflineAudioContextEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_complete: 'tags this -> OfflineAudioCompletionEvent.t [@@js.get "complete"]
  val set_complete: 'tags this -> OfflineAudioCompletionEvent.t -> unit [@@js.set "complete"]
  val create: complete:OfflineAudioCompletionEvent.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module OfflineAudioContextOptions : sig
  type t = [`OfflineAudioContextOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`OfflineAudioContextOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`OfflineAudioContextOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OfflineAudioContextOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_length: 'tags this -> float [@@js.get "length"]
  val set_length: 'tags this -> float -> unit [@@js.set "length"]
  val get_numberOfChannels: 'tags this -> float option [@@js.get "numberOfChannels"]
  val set_numberOfChannels: 'tags this -> float -> unit [@@js.set "numberOfChannels"]
  val get_sampleRate: 'tags this -> float [@@js.get "sampleRate"]
  val set_sampleRate: 'tags this -> float -> unit [@@js.set "sampleRate"]
  val create: length:float -> ?numberOfChannels:float -> sampleRate:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module OverSampleType : sig
  type t = ([`L_s2_2x[@js "2x"] | `L_s3_4x[@js "4x"] | `L_s685_none[@js "none"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module ChannelInterpretation : sig
  type t = ([`L_s338_discrete[@js "discrete"] | `L_s910_speakers[@js "speakers"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module ChannelCountMode : sig
  type t = ([`L_s250_clamped_max[@js "clamped-max"] | `L_s379_explicit[@js "explicit"] | `L_s601_max[@js "max"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module AudioNodeOptions : sig
  type t = [`AudioNodeOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioNodeOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioNodeOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AudioNodeOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_channelCount: 'tags this -> float option [@@js.get "channelCount"]
  val set_channelCount: 'tags this -> float -> unit [@@js.set "channelCount"]
  val get_channelCountMode: 'tags this -> ChannelCountMode.t option [@@js.get "channelCountMode"]
  val set_channelCountMode: 'tags this -> ChannelCountMode.t -> unit [@@js.set "channelCountMode"]
  val get_channelInterpretation: 'tags this -> ChannelInterpretation.t option [@@js.get "channelInterpretation"]
  val set_channelInterpretation: 'tags this -> ChannelInterpretation.t -> unit [@@js.set "channelInterpretation"]
  val create: ?channelCount:float -> ?channelCountMode:ChannelCountMode.t -> ?channelInterpretation:ChannelInterpretation.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module WaveShaperOptions : sig
  type t = [`AudioNodeOptions | `WaveShaperOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioNodeOptions | `WaveShaperOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioNodeOptions | `WaveShaperOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WaveShaperOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_curve: 'tags this -> (float list, Float32Array.t) union2 option [@@js.get "curve"]
  val set_curve: 'tags this -> ([`U1 of float list | `U2 of Float32Array.t] [@js.union]) -> unit [@@js.set "curve"]
  val get_oversample: 'tags this -> OverSampleType.t option [@@js.get "oversample"]
  val set_oversample: 'tags this -> OverSampleType.t -> unit [@@js.set "oversample"]
  val create: ?curve:(float list, Float32Array.t) union2 -> ?oversample:OverSampleType.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module StereoPannerOptions : sig
  type t = [`AudioNodeOptions | `StereoPannerOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioNodeOptions | `StereoPannerOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioNodeOptions | `StereoPannerOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `StereoPannerOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_pan: 'tags this -> float option [@@js.get "pan"]
  val set_pan: 'tags this -> float -> unit [@@js.set "pan"]
  val create: ?pan:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module PanningModelType : sig
  type t = ([`L_s371_equalpower[@js "equalpower"] | `L_s38_HRTF[@js "HRTF"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module DistanceModelType : sig
  type t = ([`L_s380_exponential[@js "exponential"] | `L_s531_inverse[@js "inverse"] | `L_s564_linear[@js "linear"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module PannerOptions : sig
  type t = [`AudioNodeOptions | `PannerOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioNodeOptions | `PannerOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioNodeOptions | `PannerOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PannerOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_coneInnerAngle: 'tags this -> float option [@@js.get "coneInnerAngle"]
  val set_coneInnerAngle: 'tags this -> float -> unit [@@js.set "coneInnerAngle"]
  val get_coneOuterAngle: 'tags this -> float option [@@js.get "coneOuterAngle"]
  val set_coneOuterAngle: 'tags this -> float -> unit [@@js.set "coneOuterAngle"]
  val get_coneOuterGain: 'tags this -> float option [@@js.get "coneOuterGain"]
  val set_coneOuterGain: 'tags this -> float -> unit [@@js.set "coneOuterGain"]
  val get_distanceModel: 'tags this -> DistanceModelType.t option [@@js.get "distanceModel"]
  val set_distanceModel: 'tags this -> DistanceModelType.t -> unit [@@js.set "distanceModel"]
  val get_maxDistance: 'tags this -> float option [@@js.get "maxDistance"]
  val set_maxDistance: 'tags this -> float -> unit [@@js.set "maxDistance"]
  val get_orientationX: 'tags this -> float option [@@js.get "orientationX"]
  val set_orientationX: 'tags this -> float -> unit [@@js.set "orientationX"]
  val get_orientationY: 'tags this -> float option [@@js.get "orientationY"]
  val set_orientationY: 'tags this -> float -> unit [@@js.set "orientationY"]
  val get_orientationZ: 'tags this -> float option [@@js.get "orientationZ"]
  val set_orientationZ: 'tags this -> float -> unit [@@js.set "orientationZ"]
  val get_panningModel: 'tags this -> PanningModelType.t option [@@js.get "panningModel"]
  val set_panningModel: 'tags this -> PanningModelType.t -> unit [@@js.set "panningModel"]
  val get_positionX: 'tags this -> float option [@@js.get "positionX"]
  val set_positionX: 'tags this -> float -> unit [@@js.set "positionX"]
  val get_positionY: 'tags this -> float option [@@js.get "positionY"]
  val set_positionY: 'tags this -> float -> unit [@@js.set "positionY"]
  val get_positionZ: 'tags this -> float option [@@js.get "positionZ"]
  val set_positionZ: 'tags this -> float -> unit [@@js.set "positionZ"]
  val get_refDistance: 'tags this -> float option [@@js.get "refDistance"]
  val set_refDistance: 'tags this -> float -> unit [@@js.set "refDistance"]
  val get_rolloffFactor: 'tags this -> float option [@@js.get "rolloffFactor"]
  val set_rolloffFactor: 'tags this -> float -> unit [@@js.set "rolloffFactor"]
  val create: ?coneInnerAngle:float -> ?coneOuterAngle:float -> ?coneOuterGain:float -> ?distanceModel:DistanceModelType.t -> ?maxDistance:float -> ?orientationX:float -> ?orientationY:float -> ?orientationZ:float -> ?panningModel:PanningModelType.t -> ?positionX:float -> ?positionY:float -> ?positionZ:float -> ?refDistance:float -> ?rolloffFactor:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module PeriodicWaveConstraints : sig
  type t = [`PeriodicWaveConstraints] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PeriodicWaveConstraints]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PeriodicWaveConstraints]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PeriodicWaveConstraints ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_disableNormalization: 'tags this -> bool option [@@js.get "disableNormalization"]
  val set_disableNormalization: 'tags this -> bool -> unit [@@js.set "disableNormalization"]
  val create: ?disableNormalization:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module PeriodicWaveOptions : sig
  type t = [`PeriodicWaveConstraints | `PeriodicWaveOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PeriodicWaveConstraints | `PeriodicWaveOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PeriodicWaveConstraints | `PeriodicWaveOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PeriodicWaveOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_imag: 'tags this -> (float list, Float32Array.t) union2 option [@@js.get "imag"]
  val set_imag: 'tags this -> ([`U1 of float list | `U2 of Float32Array.t] [@js.union]) -> unit [@@js.set "imag"]
  val get_real: 'tags this -> (float list, Float32Array.t) union2 option [@@js.get "real"]
  val set_real: 'tags this -> ([`U1 of float list | `U2 of Float32Array.t] [@js.union]) -> unit [@@js.set "real"]
  val create: ?imag:(float list, Float32Array.t) union2 -> ?real:(float list, Float32Array.t) union2 -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module OscillatorType : sig
  type t = ([`L_s292_custom[@js "custom"] | `L_s848_sawtooth[@js "sawtooth"] | `L_s887_sine[@js "sine"] | `L_s913_square[@js "square"] | `L_s997_triangle[@js "triangle"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module IIRFilterOptions : sig
  type t = [`AudioNodeOptions | `IIRFilterOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioNodeOptions | `IIRFilterOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioNodeOptions | `IIRFilterOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IIRFilterOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_feedback: 'tags this -> float list [@@js.get "feedback"]
  val set_feedback: 'tags this -> float list -> unit [@@js.set "feedback"]
  val get_feedforward: 'tags this -> float list [@@js.get "feedforward"]
  val set_feedforward: 'tags this -> float list -> unit [@@js.set "feedforward"]
  val create: feedback:float list -> feedforward:float list -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module GainOptions : sig
  type t = [`AudioNodeOptions | `GainOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioNodeOptions | `GainOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioNodeOptions | `GainOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `GainOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_gain: 'tags this -> float option [@@js.get "gain"]
  val set_gain: 'tags this -> float -> unit [@@js.set "gain"]
  val create: ?gain:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module DynamicsCompressorOptions : sig
  type t = [`AudioNodeOptions | `DynamicsCompressorOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioNodeOptions | `DynamicsCompressorOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioNodeOptions | `DynamicsCompressorOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DynamicsCompressorOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_attack: 'tags this -> float option [@@js.get "attack"]
  val set_attack: 'tags this -> float -> unit [@@js.set "attack"]
  val get_knee: 'tags this -> float option [@@js.get "knee"]
  val set_knee: 'tags this -> float -> unit [@@js.set "knee"]
  val get_ratio: 'tags this -> float option [@@js.get "ratio"]
  val set_ratio: 'tags this -> float -> unit [@@js.set "ratio"]
  val get_release: 'tags this -> float option [@@js.get "release"]
  val set_release: 'tags this -> float -> unit [@@js.set "release"]
  val get_threshold: 'tags this -> float option [@@js.get "threshold"]
  val set_threshold: 'tags this -> float -> unit [@@js.set "threshold"]
  val create: ?attack:float -> ?knee:float -> ?ratio:float -> ?release:float -> ?threshold:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module DelayOptions : sig
  type t = [`AudioNodeOptions | `DelayOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioNodeOptions | `DelayOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioNodeOptions | `DelayOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DelayOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_delayTime: 'tags this -> float option [@@js.get "delayTime"]
  val set_delayTime: 'tags this -> float -> unit [@@js.set "delayTime"]
  val get_maxDelayTime: 'tags this -> float option [@@js.get "maxDelayTime"]
  val set_maxDelayTime: 'tags this -> float -> unit [@@js.set "maxDelayTime"]
  val create: ?delayTime:float -> ?maxDelayTime:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module DecodeSuccessCallback : sig
  type t = [`DecodeSuccessCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DecodeSuccessCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DecodeSuccessCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DecodeSuccessCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> decodedData:AudioBuffer.t -> unit [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module DecodeErrorCallback : sig
  type t = [`DecodeErrorCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DecodeErrorCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DecodeErrorCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DecodeErrorCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> error:DOMException.t -> unit [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ConvolverOptions : sig
  type t = [`AudioNodeOptions | `ConvolverOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioNodeOptions | `ConvolverOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioNodeOptions | `ConvolverOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ConvolverOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_buffer: 'tags this -> AudioBuffer.t option [@@js.get "buffer"]
  val set_buffer: 'tags this -> AudioBuffer.t option -> unit [@@js.set "buffer"]
  val get_disableNormalization: 'tags this -> bool option [@@js.get "disableNormalization"]
  val set_disableNormalization: 'tags this -> bool -> unit [@@js.set "disableNormalization"]
  val create: ?buffer:AudioBuffer.t -> ?disableNormalization:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ConstantSourceOptions : sig
  type t = [`ConstantSourceOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ConstantSourceOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ConstantSourceOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ConstantSourceOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_offset: 'tags this -> float option [@@js.get "offset"]
  val set_offset: 'tags this -> float -> unit [@@js.set "offset"]
  val create: ?offset:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ChannelSplitterOptions : sig
  type t = [`AudioNodeOptions | `ChannelSplitterOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioNodeOptions | `ChannelSplitterOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioNodeOptions | `ChannelSplitterOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ChannelSplitterOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_numberOfOutputs: 'tags this -> float option [@@js.get "numberOfOutputs"]
  val set_numberOfOutputs: 'tags this -> float -> unit [@@js.set "numberOfOutputs"]
  val create: ?numberOfOutputs:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ChannelMergerOptions : sig
  type t = [`AudioNodeOptions | `ChannelMergerOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioNodeOptions | `ChannelMergerOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioNodeOptions | `ChannelMergerOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ChannelMergerOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_numberOfInputs: 'tags this -> float option [@@js.get "numberOfInputs"]
  val set_numberOfInputs: 'tags this -> float -> unit [@@js.set "numberOfInputs"]
  val create: ?numberOfInputs:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module BiquadFilterType : sig
  type t = ([`L_s139_allpass[@js "allpass"] | `L_s182_bandpass[@js "bandpass"] | `L_s482_highpass[@js "highpass"] | `L_s483_highshelf[@js "highshelf"] | `L_s584_lowpass[@js "lowpass"] | `L_s585_lowshelf[@js "lowshelf"] | `L_s690_notch[@js "notch"] | `L_s734_peaking[@js "peaking"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module BiquadFilterOptions : sig
  type t = [`AudioNodeOptions | `BiquadFilterOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioNodeOptions | `BiquadFilterOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioNodeOptions | `BiquadFilterOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `BiquadFilterOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_Q: 'tags this -> float option [@@js.get "Q"]
  val set_Q: 'tags this -> float -> unit [@@js.set "Q"]
  val get_detune: 'tags this -> float option [@@js.get "detune"]
  val set_detune: 'tags this -> float -> unit [@@js.set "detune"]
  val get_frequency: 'tags this -> float option [@@js.get "frequency"]
  val set_frequency: 'tags this -> float -> unit [@@js.set "frequency"]
  val get_gain: 'tags this -> float option [@@js.get "gain"]
  val set_gain: 'tags this -> float -> unit [@@js.set "gain"]
  val get_type: 'tags this -> BiquadFilterType.t option [@@js.get "type"]
  val set_type: 'tags this -> BiquadFilterType.t -> unit [@@js.set "type"]
  val create: ?q:(float[@js "Q"]) -> ?detune:float -> ?frequency:float -> ?gain:float -> ?type_:(BiquadFilterType.t[@js "type"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module WorkletOptions : sig
  type t = [`WorkletOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`WorkletOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`WorkletOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WorkletOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_credentials: 'tags this -> RequestCredentials.t option [@@js.get "credentials"]
  val set_credentials: 'tags this -> RequestCredentials.t -> unit [@@js.set "credentials"]
  val create: ?credentials:RequestCredentials.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Worklet)
*)
module[@js.scope "Worklet"] Worklet : sig
  type t = [`Worklet] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Worklet]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Worklet]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Worklet ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Loads and executes the module script given by moduleURL into all of worklet's global scopes. It can also create additional global scopes as part of this process, depending on the worklet type. The returned promise will fulfill once the script has been successfully loaded and run in all global scopes.
    
    The credentials option can be set to a credentials mode to modify the script-fetching process. It defaults to "same-origin".
    
    Any failures in fetching the script or its dependencies will cause the returned promise to be rejected with an "AbortError" DOMException. Any errors in parsing the script or its dependencies will cause the returned promise to be rejected with the exception generated during parsing.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Worklet/addModule)
  *)
  val addModule: 'tags this -> moduleURL:([`U1 of string | `U2 of URL.t] [@js.union]) -> ?options:WorkletOptions.t -> unit -> unit Promise.t [@@js.call "addModule"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioWorklet)
*)
module[@js.scope "AudioWorklet"] AudioWorklet : sig
  type t = [`AudioWorklet | `Worklet] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioWorklet | `Worklet]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioWorklet | `Worklet]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AudioWorklet ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module AutomationRate : sig
  type t = ([`L_s113_a_rate[@js "a-rate"] | `L_s536_k_rate[@js "k-rate"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  The Web Audio API's AudioParam interface represents an audio-related parameter, usually a parameter of an AudioNode (such as GainNode.gain).
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioParam)
*)
module[@js.scope "AudioParam"] AudioParam : sig
  type t = [`AudioParam] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioParam]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioParam]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AudioParam ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioParam/setValueCurveAtTime) *)
  val setValueCurveAtTime: 'tags this -> values:float Iterable.t -> startTime:float -> duration:float -> t [@@js.call "setValueCurveAtTime"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioParam/automationRate) *)
  val get_automationRate: 'tags this -> AutomationRate.t [@@js.get "automationRate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioParam/automationRate) *)
  val set_automationRate: 'tags this -> AutomationRate.t -> unit [@@js.set "automationRate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioParam/defaultValue) *)
  val get_defaultValue: 'tags this -> float [@@js.get "defaultValue"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioParam/maxValue) *)
  val get_maxValue: 'tags this -> float [@@js.get "maxValue"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioParam/minValue) *)
  val get_minValue: 'tags this -> float [@@js.get "minValue"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioParam/value) *)
  val get_value: 'tags this -> float [@@js.get "value"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioParam/value) *)
  val set_value: 'tags this -> float -> unit [@@js.set "value"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioParam/cancelAndHoldAtTime) *)
  val cancelAndHoldAtTime: 'tags this -> cancelTime:float -> t [@@js.call "cancelAndHoldAtTime"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioParam/cancelScheduledValues) *)
  val cancelScheduledValues: 'tags this -> cancelTime:float -> t [@@js.call "cancelScheduledValues"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioParam/exponentialRampToValueAtTime) *)
  val exponentialRampToValueAtTime: 'tags this -> value:float -> endTime:float -> t [@@js.call "exponentialRampToValueAtTime"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioParam/linearRampToValueAtTime) *)
  val linearRampToValueAtTime: 'tags this -> value:float -> endTime:float -> t [@@js.call "linearRampToValueAtTime"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioParam/setTargetAtTime) *)
  val setTargetAtTime: 'tags this -> target:float -> startTime:float -> timeConstant:float -> t [@@js.call "setTargetAtTime"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioParam/setValueAtTime) *)
  val setValueAtTime: 'tags this -> value:float -> startTime:float -> t [@@js.call "setValueAtTime"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioParam/setValueCurveAtTime) *)
  val setValueCurveAtTime': 'tags this -> values:([`U1 of float list | `U2 of Float32Array.t] [@js.union]) -> startTime:float -> duration:float -> t [@@js.call "setValueCurveAtTime"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  The position and orientation of the unique person listening to the audio scene, and is used in audio spatialization. All PannerNodes spatialize in relation to the AudioListener stored in the BaseAudioContext.listener attribute.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioListener)
*)
module[@js.scope "AudioListener"] AudioListener : sig
  type t = [`AudioListener] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioListener]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioListener]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AudioListener ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioListener/forwardX) *)
  val get_forwardX: 'tags this -> AudioParam.t [@@js.get "forwardX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioListener/forwardY) *)
  val get_forwardY: 'tags this -> AudioParam.t [@@js.get "forwardY"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioListener/forwardZ) *)
  val get_forwardZ: 'tags this -> AudioParam.t [@@js.get "forwardZ"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioListener/positionX) *)
  val get_positionX: 'tags this -> AudioParam.t [@@js.get "positionX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioListener/positionY) *)
  val get_positionY: 'tags this -> AudioParam.t [@@js.get "positionY"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioListener/positionZ) *)
  val get_positionZ: 'tags this -> AudioParam.t [@@js.get "positionZ"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioListener/upX) *)
  val get_upX: 'tags this -> AudioParam.t [@@js.get "upX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioListener/upY) *)
  val get_upY: 'tags this -> AudioParam.t [@@js.get "upY"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioListener/upZ) *)
  val get_upZ: 'tags this -> AudioParam.t [@@js.get "upZ"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioListener/setOrientation) *)
  val setOrientation: 'tags this -> x:float -> y:float -> z:float -> xUp:float -> yUp:float -> zUp:float -> unit [@@js.call "setOrientation"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioListener/setPosition) *)
  val setPosition: 'tags this -> x:float -> y:float -> z:float -> unit [@@js.call "setPosition"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module AudioContextState : sig
  type t = ([`L_s255_closed[@js "closed"] | `L_s843_running[@js "running"] | `L_s943_suspended[@js "suspended"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module AudioBufferSourceOptions : sig
  type t = [`AudioBufferSourceOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioBufferSourceOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioBufferSourceOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AudioBufferSourceOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_buffer: 'tags this -> AudioBuffer.t option [@@js.get "buffer"]
  val set_buffer: 'tags this -> AudioBuffer.t option -> unit [@@js.set "buffer"]
  val get_detune: 'tags this -> float option [@@js.get "detune"]
  val set_detune: 'tags this -> float -> unit [@@js.set "detune"]
  val get_loop: 'tags this -> bool option [@@js.get "loop"]
  val set_loop: 'tags this -> bool -> unit [@@js.set "loop"]
  val get_loopEnd: 'tags this -> float option [@@js.get "loopEnd"]
  val set_loopEnd: 'tags this -> float -> unit [@@js.set "loopEnd"]
  val get_loopStart: 'tags this -> float option [@@js.get "loopStart"]
  val set_loopStart: 'tags this -> float -> unit [@@js.set "loopStart"]
  val get_playbackRate: 'tags this -> float option [@@js.get "playbackRate"]
  val set_playbackRate: 'tags this -> float -> unit [@@js.set "playbackRate"]
  val create: ?buffer:AudioBuffer.t -> ?detune:float -> ?loop:bool -> ?loopEnd:float -> ?loopStart:float -> ?playbackRate:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module AnalyserOptions : sig
  type t = [`AnalyserOptions | `AudioNodeOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AnalyserOptions | `AudioNodeOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AnalyserOptions | `AudioNodeOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AnalyserOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_fftSize: 'tags this -> float option [@@js.get "fftSize"]
  val set_fftSize: 'tags this -> float -> unit [@@js.set "fftSize"]
  val get_maxDecibels: 'tags this -> float option [@@js.get "maxDecibels"]
  val set_maxDecibels: 'tags this -> float -> unit [@@js.set "maxDecibels"]
  val get_minDecibels: 'tags this -> float option [@@js.get "minDecibels"]
  val set_minDecibels: 'tags this -> float -> unit [@@js.set "minDecibels"]
  val get_smoothingTimeConstant: 'tags this -> float option [@@js.get "smoothingTimeConstant"]
  val set_smoothingTimeConstant: 'tags this -> float -> unit [@@js.set "smoothingTimeConstant"]
  val create: ?fftSize:float -> ?maxDecibels:float -> ?minDecibels:float -> ?smoothingTimeConstant:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  A node able to provide real-time frequency and time-domain analysis information. It is an AudioNode that passes the audio stream unchanged from the input to the output, but allows you to take the generated data, process it, and create audio visualizations.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AnalyserNode)
*)
module[@js.scope "AnalyserNode"] rec AnalyserNode : sig
  type t = [`AnalyserNode | `AudioNode | `EventTarget] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AnalyserNode | `AudioNode | `EventTarget]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AnalyserNode | `AudioNode | `EventTarget]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AnalyserNode ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AnalyserNode/fftSize) *)
  val get_fftSize: 'tags this -> float [@@js.get "fftSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AnalyserNode/fftSize) *)
  val set_fftSize: 'tags this -> float -> unit [@@js.set "fftSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AnalyserNode/frequencyBinCount) *)
  val get_frequencyBinCount: 'tags this -> float [@@js.get "frequencyBinCount"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AnalyserNode/maxDecibels) *)
  val get_maxDecibels: 'tags this -> float [@@js.get "maxDecibels"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AnalyserNode/maxDecibels) *)
  val set_maxDecibels: 'tags this -> float -> unit [@@js.set "maxDecibels"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AnalyserNode/minDecibels) *)
  val get_minDecibels: 'tags this -> float [@@js.get "minDecibels"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AnalyserNode/minDecibels) *)
  val set_minDecibels: 'tags this -> float -> unit [@@js.set "minDecibels"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AnalyserNode/smoothingTimeConstant) *)
  val get_smoothingTimeConstant: 'tags this -> float [@@js.get "smoothingTimeConstant"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AnalyserNode/smoothingTimeConstant) *)
  val set_smoothingTimeConstant: 'tags this -> float -> unit [@@js.set "smoothingTimeConstant"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AnalyserNode/getByteFrequencyData) *)
  val getByteFrequencyData: 'tags this -> array:Uint8Array.t -> unit [@@js.call "getByteFrequencyData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AnalyserNode/getByteTimeDomainData) *)
  val getByteTimeDomainData: 'tags this -> array:Uint8Array.t -> unit [@@js.call "getByteTimeDomainData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AnalyserNode/getFloatFrequencyData) *)
  val getFloatFrequencyData: 'tags this -> array:Float32Array.t -> unit [@@js.call "getFloatFrequencyData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AnalyserNode/getFloatTimeDomainData) *)
  val getFloatTimeDomainData: 'tags this -> array:Float32Array.t -> unit [@@js.call "getFloatTimeDomainData"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: context:BaseAudioContext.t -> ?options:AnalyserOptions.t -> unit -> t [@@js.create]
end

(**
  An AudioScheduledSourceNode which represents an audio source consisting of in-memory audio data, stored in an AudioBuffer. It's especially useful for playing back audio which has particularly stringent timing accuracy requirements, such as for sounds that must match a specific rhythm and can be kept in memory rather than being played from disk or the network.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode)
*)
and[@js.scope "AudioBufferSourceNode"] AudioBufferSourceNode : sig
  type t = [`AudioBufferSourceNode | `AudioNode | `AudioScheduledSourceNode | `EventTarget] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioBufferSourceNode | `AudioNode | `AudioScheduledSourceNode | `EventTarget]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioBufferSourceNode | `AudioNode | `AudioScheduledSourceNode | `EventTarget]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AudioBufferSourceNode ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/buffer) *)
  val get_buffer: 'tags this -> AudioBuffer.t option [@@js.get "buffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/buffer) *)
  val set_buffer: 'tags this -> AudioBuffer.t option -> unit [@@js.set "buffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/detune) *)
  val get_detune: 'tags this -> AudioParam.t [@@js.get "detune"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/loop) *)
  val get_loop: 'tags this -> bool [@@js.get "loop"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/loop) *)
  val set_loop: 'tags this -> bool -> unit [@@js.set "loop"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/loopEnd) *)
  val get_loopEnd: 'tags this -> float [@@js.get "loopEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/loopEnd) *)
  val set_loopEnd: 'tags this -> float -> unit [@@js.set "loopEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/loopStart) *)
  val get_loopStart: 'tags this -> float [@@js.get "loopStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/loopStart) *)
  val set_loopStart: 'tags this -> float -> unit [@@js.set "loopStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/playbackRate) *)
  val get_playbackRate: 'tags this -> AudioParam.t [@@js.get "playbackRate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/start) *)
  val start: 'tags this -> ?when_:float -> ?offset:float -> ?duration:float -> unit -> unit [@@js.call "start"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'AudioScheduledSourceNodeEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'AudioScheduledSourceNodeEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: context:BaseAudioContext.t -> ?options:AudioBufferSourceOptions.t -> unit -> t [@@js.create]
end

(**
  AudioDestinationNode has no output (as it is the output, no more AudioNode can be linked after it in the audio graph) and one input. The number of channels in the input must be between 0 and the maxChannelCount value or an exception is raised.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioDestinationNode)
*)
and[@js.scope "AudioDestinationNode"] AudioDestinationNode : sig
  type t = [`AudioDestinationNode | `AudioNode | `EventTarget] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioDestinationNode | `AudioNode | `EventTarget]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioDestinationNode | `AudioNode | `EventTarget]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AudioDestinationNode ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioDestinationNode/maxChannelCount) *)
  val get_maxChannelCount: 'tags this -> float [@@js.get "maxChannelCount"]
  val create: maxChannelCount:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(**
  A generic interface for representing an audio processing module. Examples include:
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioNode)
*)
and[@js.scope "AudioNode"] AudioNode : sig
  type t = [`AudioNode | `EventTarget] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioNode | `EventTarget]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioNode | `EventTarget]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AudioNode ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioNode/channelCount) *)
  val get_channelCount: 'tags this -> float [@@js.get "channelCount"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioNode/channelCount) *)
  val set_channelCount: 'tags this -> float -> unit [@@js.set "channelCount"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioNode/channelCountMode) *)
  val get_channelCountMode: 'tags this -> ChannelCountMode.t [@@js.get "channelCountMode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioNode/channelCountMode) *)
  val set_channelCountMode: 'tags this -> ChannelCountMode.t -> unit [@@js.set "channelCountMode"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioNode/channelInterpretation) *)
  val get_channelInterpretation: 'tags this -> ChannelInterpretation.t [@@js.get "channelInterpretation"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioNode/channelInterpretation) *)
  val set_channelInterpretation: 'tags this -> ChannelInterpretation.t -> unit [@@js.set "channelInterpretation"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioNode/context) *)
  val get_context: 'tags this -> BaseAudioContext.t [@@js.get "context"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioNode/numberOfInputs) *)
  val get_numberOfInputs: 'tags this -> float [@@js.get "numberOfInputs"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioNode/numberOfOutputs) *)
  val get_numberOfOutputs: 'tags this -> float [@@js.get "numberOfOutputs"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioNode/connect) *)
  val connect: 'tags this -> destinationNode:t -> ?output:float -> ?input:float -> unit -> t [@@js.call "connect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioNode/connect) *)
  val connect': 'tags this -> destinationParam:AudioParam.t -> ?output:float -> unit -> unit [@@js.call "connect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect) *)
  val disconnect: 'tags this -> unit [@@js.call "disconnect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect) *)
  val disconnect': 'tags this -> output:float -> unit [@@js.call "disconnect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect) *)
  val disconnect'': 'tags this -> destinationNode:t -> unit [@@js.call "disconnect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect) *)
  val disconnect''': 'tags this -> destinationNode:t -> output:float -> unit [@@js.call "disconnect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect) *)
  val disconnect'''': 'tags this -> destinationNode:t -> output:float -> input:float -> unit [@@js.call "disconnect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect) *)
  val disconnect''''': 'tags this -> destinationParam:AudioParam.t -> unit [@@js.call "disconnect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect) *)
  val disconnect'''''': 'tags this -> destinationParam:AudioParam.t -> output:float -> unit [@@js.call "disconnect"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioScheduledSourceNode) *)
and[@js.scope "AudioScheduledSourceNode"] AudioScheduledSourceNode : sig
  type t = [`AudioNode | `AudioScheduledSourceNode | `EventTarget] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioNode | `AudioScheduledSourceNode | `EventTarget]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioNode | `AudioScheduledSourceNode | `EventTarget]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AudioScheduledSourceNode ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioScheduledSourceNode/ended_event) *)
  val get_onended: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onended"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioScheduledSourceNode/ended_event) *)
  val set_onended: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onended"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioScheduledSourceNode/start) *)
  val start: 'tags this -> ?when_:float -> unit -> unit [@@js.call "start"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioScheduledSourceNode/stop) *)
  val stop: 'tags this -> ?when_:float -> unit -> unit [@@js.call "stop"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'AudioScheduledSourceNodeEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'AudioScheduledSourceNodeEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BaseAudioContext) *)
and[@js.scope "BaseAudioContext"] BaseAudioContext : sig
  type t = [`BaseAudioContext | `EventTarget] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`BaseAudioContext | `EventTarget]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`BaseAudioContext | `EventTarget]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `BaseAudioContext ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createIIRFilter) *)
  val createIIRFilter: 'tags this -> feedforward:float Iterable.t -> feedback:float Iterable.t -> IIRFilterNode.t [@@js.call "createIIRFilter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createPeriodicWave) *)
  val createPeriodicWave: 'tags this -> real:float Iterable.t -> imag:float Iterable.t -> ?constraints:PeriodicWaveConstraints.t -> unit -> PeriodicWave.t [@@js.call "createPeriodicWave"]
  
  (**
    Available only in secure contexts.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/audioWorklet)
  *)
  val get_audioWorklet: 'tags this -> AudioWorklet.t [@@js.get "audioWorklet"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/currentTime) *)
  val get_currentTime: 'tags this -> float [@@js.get "currentTime"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/destination) *)
  val get_destination: 'tags this -> AudioDestinationNode.t [@@js.get "destination"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/listener) *)
  val get_listener: 'tags this -> AudioListener.t [@@js.get "listener"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/statechange_event) *)
  val get_onstatechange: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onstatechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/statechange_event) *)
  val set_onstatechange: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onstatechange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/sampleRate) *)
  val get_sampleRate: 'tags this -> float [@@js.get "sampleRate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/state) *)
  val get_state: 'tags this -> AudioContextState.t [@@js.get "state"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createAnalyser) *)
  val createAnalyser: 'tags this -> AnalyserNode.t [@@js.call "createAnalyser"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createBiquadFilter) *)
  val createBiquadFilter: 'tags this -> BiquadFilterNode.t [@@js.call "createBiquadFilter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createBuffer) *)
  val createBuffer: 'tags this -> numberOfChannels:float -> length:float -> sampleRate:float -> AudioBuffer.t [@@js.call "createBuffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createBufferSource) *)
  val createBufferSource: 'tags this -> AudioBufferSourceNode.t [@@js.call "createBufferSource"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createChannelMerger) *)
  val createChannelMerger: 'tags this -> ?numberOfInputs:float -> unit -> ChannelMergerNode.t [@@js.call "createChannelMerger"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createChannelSplitter) *)
  val createChannelSplitter: 'tags this -> ?numberOfOutputs:float -> unit -> ChannelSplitterNode.t [@@js.call "createChannelSplitter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createConstantSource) *)
  val createConstantSource: 'tags this -> ConstantSourceNode.t [@@js.call "createConstantSource"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createConvolver) *)
  val createConvolver: 'tags this -> ConvolverNode.t [@@js.call "createConvolver"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createDelay) *)
  val createDelay: 'tags this -> ?maxDelayTime:float -> unit -> DelayNode.t [@@js.call "createDelay"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createDynamicsCompressor) *)
  val createDynamicsCompressor: 'tags this -> DynamicsCompressorNode.t [@@js.call "createDynamicsCompressor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createGain) *)
  val createGain: 'tags this -> GainNode.t [@@js.call "createGain"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createIIRFilter) *)
  val createIIRFilter': 'tags this -> feedforward:float list -> feedback:float list -> IIRFilterNode.t [@@js.call "createIIRFilter"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createOscillator) *)
  val createOscillator: 'tags this -> OscillatorNode.t [@@js.call "createOscillator"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createPanner) *)
  val createPanner: 'tags this -> PannerNode.t [@@js.call "createPanner"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createPeriodicWave) *)
  val createPeriodicWave': 'tags this -> real:([`U1 of float list | `U2 of Float32Array.t] [@js.union]) -> imag:([`U1 of float list | `U2 of Float32Array.t] [@js.union]) -> ?constraints:PeriodicWaveConstraints.t -> unit -> PeriodicWave.t [@@js.call "createPeriodicWave"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createScriptProcessor) *)
  val createScriptProcessor: 'tags this -> ?bufferSize:float -> ?numberOfInputChannels:float -> ?numberOfOutputChannels:float -> unit -> ScriptProcessorNode.t [@@js.call "createScriptProcessor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createStereoPanner) *)
  val createStereoPanner: 'tags this -> StereoPannerNode.t [@@js.call "createStereoPanner"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createWaveShaper) *)
  val createWaveShaper: 'tags this -> WaveShaperNode.t [@@js.call "createWaveShaper"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/decodeAudioData) *)
  val decodeAudioData: 'tags this -> audioData:ArrayBuffer.t -> ?successCallback:DecodeSuccessCallback.t option -> ?errorCallback:DecodeErrorCallback.t option -> unit -> AudioBuffer.t Promise.t [@@js.call "decodeAudioData"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'BaseAudioContextEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'BaseAudioContextEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  A simple low-order filter, and is created using the AudioContext.createBiquadFilter() method. It is an AudioNode that can represent different kinds of filters, tone control devices, and graphic equalizers.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode)
*)
and[@js.scope "BiquadFilterNode"] BiquadFilterNode : sig
  type t = [`AudioNode | `BiquadFilterNode | `EventTarget] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioNode | `BiquadFilterNode | `EventTarget]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioNode | `BiquadFilterNode | `EventTarget]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `BiquadFilterNode ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode/Q) *)
  val get_Q: 'tags this -> AudioParam.t [@@js.get "Q"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode/detune) *)
  val get_detune: 'tags this -> AudioParam.t [@@js.get "detune"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode/frequency) *)
  val get_frequency: 'tags this -> AudioParam.t [@@js.get "frequency"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode/gain) *)
  val get_gain: 'tags this -> AudioParam.t [@@js.get "gain"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode/type) *)
  val get_type: 'tags this -> BiquadFilterType.t [@@js.get "type"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode/type) *)
  val set_type: 'tags this -> BiquadFilterType.t -> unit [@@js.set "type"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode/getFrequencyResponse) *)
  val getFrequencyResponse: 'tags this -> frequencyHz:Float32Array.t -> magResponse:Float32Array.t -> phaseResponse:Float32Array.t -> unit [@@js.call "getFrequencyResponse"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: context:BaseAudioContext.t -> ?options:BiquadFilterOptions.t -> unit -> t [@@js.create]
end

(**
  The ChannelMergerNode interface, often used in conjunction with its opposite, ChannelSplitterNode, reunites different mono inputs into a single output. Each input is used to fill a channel of the output. This is useful for accessing each channels separately, e.g. for performing channel mixing where gain must be separately controlled on each channel.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ChannelMergerNode)
*)
and[@js.scope "ChannelMergerNode"] ChannelMergerNode : sig
  type t = [`AudioNode | `ChannelMergerNode | `EventTarget] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioNode | `ChannelMergerNode | `EventTarget]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioNode | `ChannelMergerNode | `EventTarget]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ChannelMergerNode ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: context:BaseAudioContext.t -> ?options:ChannelMergerOptions.t -> unit -> t [@@js.create]
end

(**
  The ChannelSplitterNode interface, often used in conjunction with its opposite, ChannelMergerNode, separates the different channels of an audio source into a set of mono outputs. This is useful for accessing each channel separately, e.g. for performing channel mixing where gain must be separately controlled on each channel.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ChannelSplitterNode)
*)
and[@js.scope "ChannelSplitterNode"] ChannelSplitterNode : sig
  type t = [`AudioNode | `ChannelSplitterNode | `EventTarget] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioNode | `ChannelSplitterNode | `EventTarget]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioNode | `ChannelSplitterNode | `EventTarget]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ChannelSplitterNode ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: context:BaseAudioContext.t -> ?options:ChannelSplitterOptions.t -> unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ConstantSourceNode) *)
and[@js.scope "ConstantSourceNode"] ConstantSourceNode : sig
  type t = [`AudioNode | `AudioScheduledSourceNode | `ConstantSourceNode | `EventTarget] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioNode | `AudioScheduledSourceNode | `ConstantSourceNode | `EventTarget]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioNode | `AudioScheduledSourceNode | `ConstantSourceNode | `EventTarget]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ConstantSourceNode ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ConstantSourceNode/offset) *)
  val get_offset: 'tags this -> AudioParam.t [@@js.get "offset"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'AudioScheduledSourceNodeEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'AudioScheduledSourceNodeEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: context:BaseAudioContext.t -> ?options:ConstantSourceOptions.t -> unit -> t [@@js.create]
end

(**
  An AudioNode that performs a Linear Convolution on a given AudioBuffer, often used to achieve a reverb effect. A ConvolverNode always has exactly one input and one output.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ConvolverNode)
*)
and[@js.scope "ConvolverNode"] ConvolverNode : sig
  type t = [`AudioNode | `ConvolverNode | `EventTarget] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioNode | `ConvolverNode | `EventTarget]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioNode | `ConvolverNode | `EventTarget]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ConvolverNode ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ConvolverNode/buffer) *)
  val get_buffer: 'tags this -> AudioBuffer.t option [@@js.get "buffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ConvolverNode/buffer) *)
  val set_buffer: 'tags this -> AudioBuffer.t option -> unit [@@js.set "buffer"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ConvolverNode/normalize) *)
  val get_normalize: 'tags this -> bool [@@js.get "normalize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ConvolverNode/normalize) *)
  val set_normalize: 'tags this -> bool -> unit [@@js.set "normalize"]
  val create: ?buffer:AudioBuffer.t -> normalize:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': context:BaseAudioContext.t -> ?options:ConvolverOptions.t -> unit -> t [@@js.create]
end

(**
  A delay-line; an AudioNode audio-processing module that causes a delay between the arrival of an input data and its propagation to the output.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DelayNode)
*)
and[@js.scope "DelayNode"] DelayNode : sig
  type t = [`AudioNode | `DelayNode | `EventTarget] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioNode | `DelayNode | `EventTarget]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioNode | `DelayNode | `EventTarget]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DelayNode ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DelayNode/delayTime) *)
  val get_delayTime: 'tags this -> AudioParam.t [@@js.get "delayTime"]
  val create: delayTime:AudioParam.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': context:BaseAudioContext.t -> ?options:DelayOptions.t -> unit -> t [@@js.create]
end

(**
  Inherits properties from its parent, AudioNode.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode)
*)
and[@js.scope "DynamicsCompressorNode"] DynamicsCompressorNode : sig
  type t = [`AudioNode | `DynamicsCompressorNode | `EventTarget] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioNode | `DynamicsCompressorNode | `EventTarget]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioNode | `DynamicsCompressorNode | `EventTarget]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DynamicsCompressorNode ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode/attack) *)
  val get_attack: 'tags this -> AudioParam.t [@@js.get "attack"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode/knee) *)
  val get_knee: 'tags this -> AudioParam.t [@@js.get "knee"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode/ratio) *)
  val get_ratio: 'tags this -> AudioParam.t [@@js.get "ratio"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode/reduction) *)
  val get_reduction: 'tags this -> float [@@js.get "reduction"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode/release) *)
  val get_release: 'tags this -> AudioParam.t [@@js.get "release"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode/threshold) *)
  val get_threshold: 'tags this -> AudioParam.t [@@js.get "threshold"]
  val create: attack:AudioParam.t -> knee:AudioParam.t -> ratio:AudioParam.t -> reduction:float -> release:AudioParam.t -> threshold:AudioParam.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': context:BaseAudioContext.t -> ?options:DynamicsCompressorOptions.t -> unit -> t [@@js.create]
end

(**
  A change in volume. It is an AudioNode audio-processing module that causes a given gain to be applied to the input data before its propagation to the output. A GainNode always has exactly one input and one output, both with the same number of channels.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/GainNode)
*)
and[@js.scope "GainNode"] GainNode : sig
  type t = [`AudioNode | `EventTarget | `GainNode] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioNode | `EventTarget | `GainNode]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioNode | `EventTarget | `GainNode]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `GainNode ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/GainNode/gain) *)
  val get_gain: 'tags this -> AudioParam.t [@@js.get "gain"]
  val create: gain:AudioParam.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': context:BaseAudioContext.t -> ?options:GainOptions.t -> unit -> t [@@js.create]
end

(**
  TheÂ IIRFilterNodeÂ interface of theÂ Web Audio APIÂ is a AudioNode processor which implements a general infinite impulse response (IIR)Â  filter; this type of filter can be used to implement tone control devices and graphic equalizers as well. It lets the parameters of the filter response be specified, so that it can be tuned as needed.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IIRFilterNode)
*)
and[@js.scope "IIRFilterNode"] IIRFilterNode : sig
  type t = [`AudioNode | `EventTarget | `IIRFilterNode] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioNode | `EventTarget | `IIRFilterNode]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioNode | `EventTarget | `IIRFilterNode]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IIRFilterNode ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IIRFilterNode/getFrequencyResponse) *)
  val getFrequencyResponse: 'tags this -> frequencyHz:Float32Array.t -> magResponse:Float32Array.t -> phaseResponse:Float32Array.t -> unit [@@js.call "getFrequencyResponse"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: context:BaseAudioContext.t -> options:IIRFilterOptions.t -> t [@@js.create]
end

(**
  The OscillatorNodeÂ interface represents a periodic waveform, such as a sine wave. It is an AudioScheduledSourceNode audio-processing module that causes a specified frequencyÂ of a given wave to be createdâin effect, a constant tone.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OscillatorNode)
*)
and[@js.scope "OscillatorNode"] OscillatorNode : sig
  type t = [`AudioNode | `AudioScheduledSourceNode | `EventTarget | `OscillatorNode] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioNode | `AudioScheduledSourceNode | `EventTarget | `OscillatorNode]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioNode | `AudioScheduledSourceNode | `EventTarget | `OscillatorNode]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OscillatorNode ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OscillatorNode/detune) *)
  val get_detune: 'tags this -> AudioParam.t [@@js.get "detune"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OscillatorNode/frequency) *)
  val get_frequency: 'tags this -> AudioParam.t [@@js.get "frequency"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OscillatorNode/type) *)
  val get_type: 'tags this -> OscillatorType.t [@@js.get "type"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OscillatorNode/type) *)
  val set_type: 'tags this -> OscillatorType.t -> unit [@@js.set "type"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OscillatorNode/setPeriodicWave) *)
  val setPeriodicWave: 'tags this -> periodicWave:PeriodicWave.t -> unit [@@js.call "setPeriodicWave"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'AudioScheduledSourceNodeEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'AudioScheduledSourceNodeEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: context:BaseAudioContext.t -> ?options:OscillatorOptions.t -> unit -> t [@@js.create]
end
and OscillatorOptions : sig
  type t = [`AudioNodeOptions | `OscillatorOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioNodeOptions | `OscillatorOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioNodeOptions | `OscillatorOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OscillatorOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_detune: 'tags this -> float option [@@js.get "detune"]
  val set_detune: 'tags this -> float -> unit [@@js.set "detune"]
  val get_frequency: 'tags this -> float option [@@js.get "frequency"]
  val set_frequency: 'tags this -> float -> unit [@@js.set "frequency"]
  val get_periodicWave: 'tags this -> PeriodicWave.t option [@@js.get "periodicWave"]
  val set_periodicWave: 'tags this -> PeriodicWave.t -> unit [@@js.set "periodicWave"]
  val get_type: 'tags this -> OscillatorType.t option [@@js.get "type"]
  val set_type: 'tags this -> OscillatorType.t -> unit [@@js.set "type"]
  val create: ?detune:float -> ?frequency:float -> ?periodicWave:PeriodicWave.t -> ?type_:(OscillatorType.t[@js "type"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  A PannerNode always has exactly one input and one output: the input can be mono or stereo but the output is always stereo (2 channels); you can't have panning effects without at least two audio channels!
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PannerNode)
*)
and[@js.scope "PannerNode"] PannerNode : sig
  type t = [`AudioNode | `EventTarget | `PannerNode] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioNode | `EventTarget | `PannerNode]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioNode | `EventTarget | `PannerNode]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PannerNode ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PannerNode/coneInnerAngle) *)
  val get_coneInnerAngle: 'tags this -> float [@@js.get "coneInnerAngle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PannerNode/coneInnerAngle) *)
  val set_coneInnerAngle: 'tags this -> float -> unit [@@js.set "coneInnerAngle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PannerNode/coneOuterAngle) *)
  val get_coneOuterAngle: 'tags this -> float [@@js.get "coneOuterAngle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PannerNode/coneOuterAngle) *)
  val set_coneOuterAngle: 'tags this -> float -> unit [@@js.set "coneOuterAngle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PannerNode/coneOuterGain) *)
  val get_coneOuterGain: 'tags this -> float [@@js.get "coneOuterGain"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PannerNode/coneOuterGain) *)
  val set_coneOuterGain: 'tags this -> float -> unit [@@js.set "coneOuterGain"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PannerNode/distanceModel) *)
  val get_distanceModel: 'tags this -> DistanceModelType.t [@@js.get "distanceModel"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PannerNode/distanceModel) *)
  val set_distanceModel: 'tags this -> DistanceModelType.t -> unit [@@js.set "distanceModel"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PannerNode/maxDistance) *)
  val get_maxDistance: 'tags this -> float [@@js.get "maxDistance"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PannerNode/maxDistance) *)
  val set_maxDistance: 'tags this -> float -> unit [@@js.set "maxDistance"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PannerNode/orientationX) *)
  val get_orientationX: 'tags this -> AudioParam.t [@@js.get "orientationX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PannerNode/orientationY) *)
  val get_orientationY: 'tags this -> AudioParam.t [@@js.get "orientationY"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PannerNode/orientationZ) *)
  val get_orientationZ: 'tags this -> AudioParam.t [@@js.get "orientationZ"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PannerNode/panningModel) *)
  val get_panningModel: 'tags this -> PanningModelType.t [@@js.get "panningModel"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PannerNode/panningModel) *)
  val set_panningModel: 'tags this -> PanningModelType.t -> unit [@@js.set "panningModel"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PannerNode/positionX) *)
  val get_positionX: 'tags this -> AudioParam.t [@@js.get "positionX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PannerNode/positionY) *)
  val get_positionY: 'tags this -> AudioParam.t [@@js.get "positionY"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PannerNode/positionZ) *)
  val get_positionZ: 'tags this -> AudioParam.t [@@js.get "positionZ"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PannerNode/refDistance) *)
  val get_refDistance: 'tags this -> float [@@js.get "refDistance"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PannerNode/refDistance) *)
  val set_refDistance: 'tags this -> float -> unit [@@js.set "refDistance"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PannerNode/rolloffFactor) *)
  val get_rolloffFactor: 'tags this -> float [@@js.get "rolloffFactor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PannerNode/rolloffFactor) *)
  val set_rolloffFactor: 'tags this -> float -> unit [@@js.set "rolloffFactor"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PannerNode/setOrientation) *)
  val setOrientation: 'tags this -> x:float -> y:float -> z:float -> unit [@@js.call "setOrientation"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PannerNode/setPosition) *)
  val setPosition: 'tags this -> x:float -> y:float -> z:float -> unit [@@js.call "setPosition"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: context:BaseAudioContext.t -> ?options:PannerOptions.t -> unit -> t [@@js.create]
end

(**
  PeriodicWave has no inputs or outputs; it is used to define custom oscillators when calling OscillatorNode.setPeriodicWave(). The PeriodicWave itself is created/returned by AudioContext.createPeriodicWave().
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/PeriodicWave)
*)
and[@js.scope "PeriodicWave"] PeriodicWave : sig
  type t = [`PeriodicWave] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PeriodicWave]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PeriodicWave]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PeriodicWave ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: context:BaseAudioContext.t -> ?options:PeriodicWaveOptions.t -> unit -> t [@@js.create]
end

(** Allows the generation, processing, or analyzing of audio using JavaScript. *)
and[@js.scope "ScriptProcessorNode"] ScriptProcessorNode : sig
  type t = [`AudioNode | `EventTarget | `ScriptProcessorNode] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioNode | `EventTarget | `ScriptProcessorNode]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioNode | `EventTarget | `ScriptProcessorNode]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ScriptProcessorNode ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ScriptProcessorNode/bufferSize) *)
  val get_bufferSize: 'tags this -> float [@@js.get "bufferSize"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ScriptProcessorNode/audioprocess_event) *)
  val get_onaudioprocess: 'tags this -> (this:t -> ev:AudioProcessingEvent.t -> any) option [@@js.get "onaudioprocess"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ScriptProcessorNode/audioprocess_event) *)
  val set_onaudioprocess: 'tags this -> (this:t -> ev:AudioProcessingEvent.t -> any) option -> unit [@@js.set "onaudioprocess"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'ScriptProcessorNodeEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'ScriptProcessorNodeEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  The pan property takes a unitless value between -1 (full left pan) and 1 (full right pan). This interface was introduced as a much simpler way to apply a simple panning effect than having to use a full PannerNode.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StereoPannerNode)
*)
and[@js.scope "StereoPannerNode"] StereoPannerNode : sig
  type t = [`AudioNode | `EventTarget | `StereoPannerNode] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioNode | `EventTarget | `StereoPannerNode]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioNode | `EventTarget | `StereoPannerNode]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `StereoPannerNode ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/StereoPannerNode/pan) *)
  val get_pan: 'tags this -> AudioParam.t [@@js.get "pan"]
  val create: pan:AudioParam.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': context:BaseAudioContext.t -> ?options:StereoPannerOptions.t -> unit -> t [@@js.create]
end

(**
  A WaveShaperNode always has exactly one input and one output.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WaveShaperNode)
*)
and[@js.scope "WaveShaperNode"] WaveShaperNode : sig
  type t = [`AudioNode | `EventTarget | `WaveShaperNode] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioNode | `EventTarget | `WaveShaperNode]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioNode | `EventTarget | `WaveShaperNode]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `WaveShaperNode ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WaveShaperNode/curve) *)
  val get_curve: 'tags this -> Float32Array.t option [@@js.get "curve"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WaveShaperNode/curve) *)
  val set_curve: 'tags this -> Float32Array.t option -> unit [@@js.set "curve"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WaveShaperNode/oversample) *)
  val get_oversample: 'tags this -> OverSampleType.t [@@js.get "oversample"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WaveShaperNode/oversample) *)
  val set_oversample: 'tags this -> OverSampleType.t -> unit [@@js.set "oversample"]
  val create: ?curve:Float32Array.t -> oversample:OverSampleType.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': context:BaseAudioContext.t -> ?options:WaveShaperOptions.t -> unit -> t [@@js.create]
end

(**
  An AudioContext interface representing an audio-processing graph built from linked together AudioNodes. In contrast with a standard AudioContext, an OfflineAudioContext doesn't render the audio to the device hardware; instead, it generates it, as fast as it can, and outputs the result to an AudioBuffer.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OfflineAudioContext)
*)
module[@js.scope "OfflineAudioContext"] OfflineAudioContext : sig
  type t = [`BaseAudioContext | `EventTarget | `OfflineAudioContext] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`BaseAudioContext | `EventTarget | `OfflineAudioContext]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`BaseAudioContext | `EventTarget | `OfflineAudioContext]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OfflineAudioContext ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OfflineAudioContext/length) *)
  val get_length: 'tags this -> float [@@js.get "length"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OfflineAudioContext/complete_event) *)
  val get_oncomplete: 'tags this -> (this:t -> ev:OfflineAudioCompletionEvent.t -> any) option [@@js.get "oncomplete"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OfflineAudioContext/complete_event) *)
  val set_oncomplete: 'tags this -> (this:t -> ev:OfflineAudioCompletionEvent.t -> any) option -> unit [@@js.set "oncomplete"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OfflineAudioContext/resume) *)
  val resume: 'tags this -> unit Promise.t [@@js.call "resume"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OfflineAudioContext/startRendering) *)
  val startRendering: 'tags this -> AudioBuffer.t Promise.t [@@js.call "startRendering"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OfflineAudioContext/suspend) *)
  val suspend: 'tags this -> suspendTime:float -> unit Promise.t [@@js.call "suspend"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'OfflineAudioContextEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'OfflineAudioContextEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: OfflineAudioContextOptions.t -> t [@@js.create]
  val create': numberOfChannels:float -> length:float -> sampleRate:float -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed) *)
module OES_draw_buffers_indexed : sig
  type t = [`OES_draw_buffers_indexed] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`OES_draw_buffers_indexed]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`OES_draw_buffers_indexed]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `OES_draw_buffers_indexed ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed/blendEquationSeparateiOES) *)
  val blendEquationSeparateiOES: 'tags this -> buf:GLuint.t -> modeRGB:GLenum.t -> modeAlpha:GLenum.t -> unit [@@js.call "blendEquationSeparateiOES"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed/blendEquationiOES) *)
  val blendEquationiOES: 'tags this -> buf:GLuint.t -> mode:GLenum.t -> unit [@@js.call "blendEquationiOES"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed/blendFuncSeparateiOES) *)
  val blendFuncSeparateiOES: 'tags this -> buf:GLuint.t -> srcRGB:GLenum.t -> dstRGB:GLenum.t -> srcAlpha:GLenum.t -> dstAlpha:GLenum.t -> unit [@@js.call "blendFuncSeparateiOES"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed/blendFunciOES) *)
  val blendFunciOES: 'tags this -> buf:GLuint.t -> src:GLenum.t -> dst:GLenum.t -> unit [@@js.call "blendFunciOES"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed/colorMaskiOES) *)
  val colorMaskiOES: 'tags this -> buf:GLuint.t -> r:GLboolean.t -> g:GLboolean.t -> b:GLboolean.t -> a:GLboolean.t -> unit [@@js.call "colorMaskiOES"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed/disableiOES) *)
  val disableiOES: 'tags this -> target:GLenum.t -> index:GLuint.t -> unit [@@js.call "disableiOES"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed/enableiOES) *)
  val enableiOES: 'tags this -> target:GLenum.t -> index:GLuint.t -> unit [@@js.call "enableiOES"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module NotificationEventMap : sig
  type t = [`NotificationEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`NotificationEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`NotificationEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `NotificationEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_click: 'tags this -> Event.t [@@js.get "click"]
  val set_click: 'tags this -> Event.t -> unit [@@js.set "click"]
  val get_close: 'tags this -> Event.t [@@js.get "close"]
  val set_close: 'tags this -> Event.t -> unit [@@js.set "close"]
  val get_error: 'tags this -> Event.t [@@js.get "error"]
  val set_error: 'tags this -> Event.t -> unit [@@js.set "error"]
  val get_show: 'tags this -> Event.t [@@js.get "show"]
  val set_show: 'tags this -> Event.t -> unit [@@js.set "show"]
  val create: click:Event.t -> close:Event.t -> error:Event.t -> show:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MutationRecordType : sig
  type t = ([`L_s165_attributes[@js "attributes"] | `L_s244_characterData[@js "characterData"] | `L_s246_childList[@js "childList"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  A MutationRecord represents an individual DOM mutation. It is the object that is passed to MutationObserver's callback.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MutationRecord)
*)
module[@js.scope "MutationRecord"] MutationRecord : sig
  type t = [`MutationRecord] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MutationRecord]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MutationRecord]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MutationRecord ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Return the nodes added and removed respectively.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MutationRecord/addedNodes)
  *)
  val get_addedNodes: 'tags this -> NodeList.t [@@js.get "addedNodes"]
  
  (**
    Returns the local name of the changed attribute, and null otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MutationRecord/attributeName)
  *)
  val get_attributeName: 'tags this -> string option [@@js.get "attributeName"]
  
  (**
    Returns the namespace of the changed attribute, and null otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MutationRecord/attributeNamespace)
  *)
  val get_attributeNamespace: 'tags this -> string option [@@js.get "attributeNamespace"]
  
  (**
    Return the previous and next sibling respectively of the added or removed nodes, and null otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MutationRecord/nextSibling)
  *)
  val get_nextSibling: 'tags this -> Node.t option [@@js.get "nextSibling"]
  
  (**
    The return value depends on type. For "attributes", it is the value of the changed attribute before the change. For "characterData", it is the data of the changed node before the change. For "childList", it is null.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MutationRecord/oldValue)
  *)
  val get_oldValue: 'tags this -> string option [@@js.get "oldValue"]
  
  (**
    Return the previous and next sibling respectively of the added or removed nodes, and null otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MutationRecord/previousSibling)
  *)
  val get_previousSibling: 'tags this -> Node.t option [@@js.get "previousSibling"]
  
  (**
    Return the nodes added and removed respectively.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MutationRecord/removedNodes)
  *)
  val get_removedNodes: 'tags this -> NodeList.t [@@js.get "removedNodes"]
  
  (**
    Returns the node the mutation affected, depending on the type. For "attributes", it is the element whose attribute changed. For "characterData", it is the CharacterData node. For "childList", it is the node whose children changed.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MutationRecord/target)
  *)
  val get_target: 'tags this -> Node.t [@@js.get "target"]
  
  (**
    Returns "attributes" if it was an attribute mutation. "characterData" if it was a mutation to a CharacterData node. And "childList" if it was a mutation to the tree of nodes.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MutationRecord/type)
  *)
  val get_type: 'tags this -> MutationRecordType.t [@@js.get "type"]
  val create: addedNodes:NodeList.t -> ?attributeName:string -> ?attributeNamespace:string -> ?nextSibling:Node.t -> ?oldValue:string -> ?previousSibling:Node.t -> removedNodes:NodeList.t -> target:Node.t -> type_:(MutationRecordType.t[@js "type"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end
module MutationObserverInit : sig
  type t = [`MutationObserverInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MutationObserverInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MutationObserverInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MutationObserverInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** Set to a list of attribute local names (without namespace) if not all attribute mutations need to be observed and attributes is true or omitted. *)
  val get_attributeFilter: 'tags this -> string list option [@@js.get "attributeFilter"]
  
  (** Set to a list of attribute local names (without namespace) if not all attribute mutations need to be observed and attributes is true or omitted. *)
  val set_attributeFilter: 'tags this -> string list -> unit [@@js.set "attributeFilter"]
  
  (** Set to true if attributes is true or omitted and target's attribute value before the mutation needs to be recorded. *)
  val get_attributeOldValue: 'tags this -> bool option [@@js.get "attributeOldValue"]
  
  (** Set to true if attributes is true or omitted and target's attribute value before the mutation needs to be recorded. *)
  val set_attributeOldValue: 'tags this -> bool -> unit [@@js.set "attributeOldValue"]
  
  (** Set to true if mutations to target's attributes are to be observed. Can be omitted if attributeOldValue or attributeFilter is specified. *)
  val get_attributes: 'tags this -> bool option [@@js.get "attributes"]
  
  (** Set to true if mutations to target's attributes are to be observed. Can be omitted if attributeOldValue or attributeFilter is specified. *)
  val set_attributes: 'tags this -> bool -> unit [@@js.set "attributes"]
  
  (** Set to true if mutations to target's data are to be observed. Can be omitted if characterDataOldValue is specified. *)
  val get_characterData: 'tags this -> bool option [@@js.get "characterData"]
  
  (** Set to true if mutations to target's data are to be observed. Can be omitted if characterDataOldValue is specified. *)
  val set_characterData: 'tags this -> bool -> unit [@@js.set "characterData"]
  
  (** Set to true if characterData is set to true or omitted and target's data before the mutation needs to be recorded. *)
  val get_characterDataOldValue: 'tags this -> bool option [@@js.get "characterDataOldValue"]
  
  (** Set to true if characterData is set to true or omitted and target's data before the mutation needs to be recorded. *)
  val set_characterDataOldValue: 'tags this -> bool -> unit [@@js.set "characterDataOldValue"]
  
  (** Set to true if mutations to target's children are to be observed. *)
  val get_childList: 'tags this -> bool option [@@js.get "childList"]
  
  (** Set to true if mutations to target's children are to be observed. *)
  val set_childList: 'tags this -> bool -> unit [@@js.set "childList"]
  
  (** Set to true if mutations to not just target, but also target's descendants are to be observed. *)
  val get_subtree: 'tags this -> bool option [@@js.get "subtree"]
  
  (** Set to true if mutations to not just target, but also target's descendants are to be observed. *)
  val set_subtree: 'tags this -> bool -> unit [@@js.set "subtree"]
  val create: ?attributeFilter:string list -> ?attributeOldValue:bool -> ?attributes:bool -> ?characterData:bool -> ?characterDataOldValue:bool -> ?childList:bool -> ?subtree:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module rec MutationCallback : sig
  type t = [`MutationCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MutationCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MutationCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MutationCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> mutations:MutationRecord.t list -> observer:MutationObserver.t -> unit [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Provides the ability to watch for changes being made to the DOM tree. It is designed as a replacement for the older Mutation Events feature which was part of the DOM3 Events specification.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MutationObserver)
*)
and[@js.scope "MutationObserver"] MutationObserver : sig
  type t = [`MutationObserver] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MutationObserver]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MutationObserver]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MutationObserver ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Stops observer from observing any mutations. Until the observe() method is used again, observer's callback will not be invoked.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MutationObserver/disconnect)
  *)
  val disconnect: 'tags this -> unit [@@js.call "disconnect"]
  
  (**
    Instructs the user agent to observe a given target (a node) and report any mutations based on the criteria given by options (an object).
    
    The options argument allows for setting mutation observation options via object members.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MutationObserver/observe)
  *)
  val observe: 'tags this -> target:Node.t -> ?options:MutationObserverInit.t -> unit -> unit [@@js.call "observe"]
  
  (**
    Empties the record queue and returns what was in there.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MutationObserver/takeRecords)
  *)
  val takeRecords: 'tags this -> MutationRecord.t list [@@js.call "takeRecords"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: MutationCallback.t -> t [@@js.create]
end
module MessagePortEventMap : sig
  type t = [`MessagePortEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MessagePortEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MessagePortEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MessagePortEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_message: 'tags this -> MessageEvent.t_0 [@@js.get "message"]
  val set_message: 'tags this -> MessageEvent.t_0 -> unit [@@js.set "message"]
  val get_messageerror: 'tags this -> MessageEvent.t_0 [@@js.get "messageerror"]
  val set_messageerror: 'tags this -> MessageEvent.t_0 -> unit [@@js.set "messageerror"]
  val create: message:MessageEvent.t_0 -> messageerror:MessageEvent.t_0 -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  This Channel Messaging API interface allows us to create a new message channel and send data through it via its two MessagePort properties.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessageChannel)
*)
module[@js.scope "MessageChannel"] MessageChannel : sig
  type t = [`MessageChannel] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MessageChannel]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MessageChannel]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MessageChannel ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the first MessagePort object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessageChannel/port1)
  *)
  val get_port1: 'tags this -> MessagePort.t [@@js.get "port1"]
  
  (**
    Returns the second MessagePort object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessageChannel/port2)
  *)
  val get_port2: 'tags this -> MessagePort.t [@@js.get "port2"]
  val create: port1:MessagePort.t -> port2:MessagePort.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end
module MediaStreamTrackEventMap : sig
  type t = [`MediaStreamTrackEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaStreamTrackEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaStreamTrackEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaStreamTrackEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_ended: 'tags this -> Event.t [@@js.get "ended"]
  val set_ended: 'tags this -> Event.t -> unit [@@js.set "ended"]
  val get_mute: 'tags this -> Event.t [@@js.get "mute"]
  val set_mute: 'tags this -> Event.t -> unit [@@js.set "mute"]
  val get_unmute: 'tags this -> Event.t [@@js.get "unmute"]
  val set_unmute: 'tags this -> Event.t -> unit [@@js.set "unmute"]
  val create: ended:Event.t -> mute:Event.t -> unmute:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MediaStreamEventMap : sig
  type t = [`MediaStreamEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaStreamEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaStreamEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaStreamEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_addtrack: 'tags this -> MediaStreamTrackEvent.t [@@js.get "addtrack"]
  val set_addtrack: 'tags this -> MediaStreamTrackEvent.t -> unit [@@js.set "addtrack"]
  val get_removetrack: 'tags this -> MediaStreamTrackEvent.t [@@js.get "removetrack"]
  val set_removetrack: 'tags this -> MediaStreamTrackEvent.t -> unit [@@js.set "removetrack"]
  val create: addtrack:MediaStreamTrackEvent.t -> removetrack:MediaStreamTrackEvent.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MediaSourceEventMap : sig
  type t = [`MediaSourceEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaSourceEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaSourceEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaSourceEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_sourceclose: 'tags this -> Event.t [@@js.get "sourceclose"]
  val set_sourceclose: 'tags this -> Event.t -> unit [@@js.set "sourceclose"]
  val get_sourceended: 'tags this -> Event.t [@@js.get "sourceended"]
  val set_sourceended: 'tags this -> Event.t -> unit [@@js.set "sourceended"]
  val get_sourceopen: 'tags this -> Event.t [@@js.get "sourceopen"]
  val set_sourceopen: 'tags this -> Event.t -> unit [@@js.set "sourceopen"]
  val create: sourceclose:Event.t -> sourceended:Event.t -> sourceopen:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MediaRecorderEventMap : sig
  type t = [`MediaRecorderEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaRecorderEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaRecorderEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaRecorderEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_dataavailable: 'tags this -> BlobEvent.t [@@js.get "dataavailable"]
  val set_dataavailable: 'tags this -> BlobEvent.t -> unit [@@js.set "dataavailable"]
  val get_error: 'tags this -> Event.t [@@js.get "error"]
  val set_error: 'tags this -> Event.t -> unit [@@js.set "error"]
  val get_pause: 'tags this -> Event.t [@@js.get "pause"]
  val set_pause: 'tags this -> Event.t -> unit [@@js.set "pause"]
  val get_resume: 'tags this -> Event.t [@@js.get "resume"]
  val set_resume: 'tags this -> Event.t -> unit [@@js.set "resume"]
  val get_start: 'tags this -> Event.t [@@js.get "start"]
  val set_start: 'tags this -> Event.t -> unit [@@js.set "start"]
  val get_stop: 'tags this -> Event.t [@@js.get "stop"]
  val set_stop: 'tags this -> Event.t -> unit [@@js.set "stop"]
  val create: dataavailable:BlobEvent.t -> error:Event.t -> pause:Event.t -> resume:Event.t -> start:Event.t -> stop:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module RecordingState : sig
  type t = ([`L_s512_inactive[@js "inactive"] | `L_s732_paused[@js "paused"] | `L_s802_recording[@js "recording"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module MediaRecorderOptions : sig
  type t = [`MediaRecorderOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaRecorderOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaRecorderOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaRecorderOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_audioBitsPerSecond: 'tags this -> float option [@@js.get "audioBitsPerSecond"]
  val set_audioBitsPerSecond: 'tags this -> float -> unit [@@js.set "audioBitsPerSecond"]
  val get_bitsPerSecond: 'tags this -> float option [@@js.get "bitsPerSecond"]
  val set_bitsPerSecond: 'tags this -> float -> unit [@@js.set "bitsPerSecond"]
  val get_mimeType: 'tags this -> string option [@@js.get "mimeType"]
  val set_mimeType: 'tags this -> string -> unit [@@js.set "mimeType"]
  val get_videoBitsPerSecond: 'tags this -> float option [@@js.get "videoBitsPerSecond"]
  val set_videoBitsPerSecond: 'tags this -> float -> unit [@@js.set "videoBitsPerSecond"]
  val create: ?audioBitsPerSecond:float -> ?bitsPerSecond:float -> ?mimeType:string -> ?videoBitsPerSecond:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaRecorder) *)
module[@js.scope "MediaRecorder"] MediaRecorder : sig
  type t = [`EventTarget | `MediaRecorder] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `MediaRecorder]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `MediaRecorder]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaRecorder ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaRecorder/audioBitsPerSecond) *)
  val get_audioBitsPerSecond: 'tags this -> float [@@js.get "audioBitsPerSecond"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaRecorder/mimeType) *)
  val get_mimeType: 'tags this -> string [@@js.get "mimeType"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaRecorder/dataavailable_event) *)
  val get_ondataavailable: 'tags this -> (this:t -> ev:BlobEvent.t -> any) option [@@js.get "ondataavailable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaRecorder/dataavailable_event) *)
  val set_ondataavailable: 'tags this -> (this:t -> ev:BlobEvent.t -> any) option -> unit [@@js.set "ondataavailable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaRecorder/error_event) *)
  val get_onerror: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaRecorder/error_event) *)
  val set_onerror: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaRecorder/pause_event) *)
  val get_onpause: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onpause"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaRecorder/pause_event) *)
  val set_onpause: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onpause"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaRecorder/resume_event) *)
  val get_onresume: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onresume"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaRecorder/resume_event) *)
  val set_onresume: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onresume"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaRecorder/start_event) *)
  val get_onstart: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onstart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaRecorder/start_event) *)
  val set_onstart: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onstart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaRecorder/stop_event) *)
  val get_onstop: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onstop"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaRecorder/stop_event) *)
  val set_onstop: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onstop"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaRecorder/state) *)
  val get_state: 'tags this -> RecordingState.t [@@js.get "state"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaRecorder/stream) *)
  val get_stream: 'tags this -> MediaStream.t [@@js.get "stream"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaRecorder/videoBitsPerSecond) *)
  val get_videoBitsPerSecond: 'tags this -> float [@@js.get "videoBitsPerSecond"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaRecorder/pause) *)
  val pause: 'tags this -> unit [@@js.call "pause"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaRecorder/requestData) *)
  val requestData: 'tags this -> unit [@@js.call "requestData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaRecorder/resume) *)
  val resume: 'tags this -> unit [@@js.call "resume"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaRecorder/start) *)
  val start: 'tags this -> ?timeslice:float -> unit -> unit [@@js.call "start"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaRecorder/stop) *)
  val stop: 'tags this -> unit [@@js.call "stop"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'MediaRecorderEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'MediaRecorderEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: stream:MediaStream.t -> ?options:MediaRecorderOptions.t -> unit -> t [@@js.create]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaRecorder/isTypeSupported_static) *)
  val isTypeSupported: string -> bool [@@js.global "isTypeSupported"]
end
module MediaQueryListEventMap : sig
  type t = [`MediaQueryListEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaQueryListEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaQueryListEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaQueryListEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_change: 'tags this -> MediaQueryListEvent.t [@@js.get "change"]
  val set_change: 'tags this -> MediaQueryListEvent.t -> unit [@@js.set "change"]
  val create: change:MediaQueryListEvent.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MediaKeySessionEventMap : sig
  type t = [`MediaKeySessionEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaKeySessionEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaKeySessionEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaKeySessionEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_keystatuseschange: 'tags this -> Event.t [@@js.get "keystatuseschange"]
  val set_keystatuseschange: 'tags this -> Event.t -> unit [@@js.set "keystatuseschange"]
  val get_message: 'tags this -> MediaKeyMessageEvent.t [@@js.get "message"]
  val set_message: 'tags this -> MediaKeyMessageEvent.t -> unit [@@js.set "message"]
  val create: keystatuseschange:Event.t -> message:MediaKeyMessageEvent.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MediaDevicesEventMap : sig
  type t = [`MediaDevicesEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaDevicesEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaDevicesEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaDevicesEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_devicechange: 'tags this -> Event.t [@@js.get "devicechange"]
  val set_devicechange: 'tags this -> Event.t -> unit [@@js.set "devicechange"]
  val create: devicechange:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MathMLElementTagNameMap : sig
  type t = [`MathMLElementTagNameMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MathMLElementTagNameMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MathMLElementTagNameMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MathMLElementTagNameMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_annotation: 'tags this -> MathMLElement.t [@@js.get "annotation"]
  val set_annotation: 'tags this -> MathMLElement.t -> unit [@@js.set "annotation"]
  val get_annotation_xml: 'tags this -> MathMLElement.t [@@js.get "annotation-xml"]
  val set_annotation_xml: 'tags this -> MathMLElement.t -> unit [@@js.set "annotation-xml"]
  val get_maction: 'tags this -> MathMLElement.t [@@js.get "maction"]
  val set_maction: 'tags this -> MathMLElement.t -> unit [@@js.set "maction"]
  val get_math: 'tags this -> MathMLElement.t [@@js.get "math"]
  val set_math: 'tags this -> MathMLElement.t -> unit [@@js.set "math"]
  val get_merror: 'tags this -> MathMLElement.t [@@js.get "merror"]
  val set_merror: 'tags this -> MathMLElement.t -> unit [@@js.set "merror"]
  val get_mfrac: 'tags this -> MathMLElement.t [@@js.get "mfrac"]
  val set_mfrac: 'tags this -> MathMLElement.t -> unit [@@js.set "mfrac"]
  val get_mi: 'tags this -> MathMLElement.t [@@js.get "mi"]
  val set_mi: 'tags this -> MathMLElement.t -> unit [@@js.set "mi"]
  val get_mmultiscripts: 'tags this -> MathMLElement.t [@@js.get "mmultiscripts"]
  val set_mmultiscripts: 'tags this -> MathMLElement.t -> unit [@@js.set "mmultiscripts"]
  val get_mn: 'tags this -> MathMLElement.t [@@js.get "mn"]
  val set_mn: 'tags this -> MathMLElement.t -> unit [@@js.set "mn"]
  val get_mo: 'tags this -> MathMLElement.t [@@js.get "mo"]
  val set_mo: 'tags this -> MathMLElement.t -> unit [@@js.set "mo"]
  val get_mover: 'tags this -> MathMLElement.t [@@js.get "mover"]
  val set_mover: 'tags this -> MathMLElement.t -> unit [@@js.set "mover"]
  val get_mpadded: 'tags this -> MathMLElement.t [@@js.get "mpadded"]
  val set_mpadded: 'tags this -> MathMLElement.t -> unit [@@js.set "mpadded"]
  val get_mphantom: 'tags this -> MathMLElement.t [@@js.get "mphantom"]
  val set_mphantom: 'tags this -> MathMLElement.t -> unit [@@js.set "mphantom"]
  val get_mprescripts: 'tags this -> MathMLElement.t [@@js.get "mprescripts"]
  val set_mprescripts: 'tags this -> MathMLElement.t -> unit [@@js.set "mprescripts"]
  val get_mroot: 'tags this -> MathMLElement.t [@@js.get "mroot"]
  val set_mroot: 'tags this -> MathMLElement.t -> unit [@@js.set "mroot"]
  val get_mrow: 'tags this -> MathMLElement.t [@@js.get "mrow"]
  val set_mrow: 'tags this -> MathMLElement.t -> unit [@@js.set "mrow"]
  val get_ms: 'tags this -> MathMLElement.t [@@js.get "ms"]
  val set_ms: 'tags this -> MathMLElement.t -> unit [@@js.set "ms"]
  val get_mspace: 'tags this -> MathMLElement.t [@@js.get "mspace"]
  val set_mspace: 'tags this -> MathMLElement.t -> unit [@@js.set "mspace"]
  val get_msqrt: 'tags this -> MathMLElement.t [@@js.get "msqrt"]
  val set_msqrt: 'tags this -> MathMLElement.t -> unit [@@js.set "msqrt"]
  val get_mstyle: 'tags this -> MathMLElement.t [@@js.get "mstyle"]
  val set_mstyle: 'tags this -> MathMLElement.t -> unit [@@js.set "mstyle"]
  val get_msub: 'tags this -> MathMLElement.t [@@js.get "msub"]
  val set_msub: 'tags this -> MathMLElement.t -> unit [@@js.set "msub"]
  val get_msubsup: 'tags this -> MathMLElement.t [@@js.get "msubsup"]
  val set_msubsup: 'tags this -> MathMLElement.t -> unit [@@js.set "msubsup"]
  val get_msup: 'tags this -> MathMLElement.t [@@js.get "msup"]
  val set_msup: 'tags this -> MathMLElement.t -> unit [@@js.set "msup"]
  val get_mtable: 'tags this -> MathMLElement.t [@@js.get "mtable"]
  val set_mtable: 'tags this -> MathMLElement.t -> unit [@@js.set "mtable"]
  val get_mtd: 'tags this -> MathMLElement.t [@@js.get "mtd"]
  val set_mtd: 'tags this -> MathMLElement.t -> unit [@@js.set "mtd"]
  val get_mtext: 'tags this -> MathMLElement.t [@@js.get "mtext"]
  val set_mtext: 'tags this -> MathMLElement.t -> unit [@@js.set "mtext"]
  val get_mtr: 'tags this -> MathMLElement.t [@@js.get "mtr"]
  val set_mtr: 'tags this -> MathMLElement.t -> unit [@@js.set "mtr"]
  val get_munder: 'tags this -> MathMLElement.t [@@js.get "munder"]
  val set_munder: 'tags this -> MathMLElement.t -> unit [@@js.set "munder"]
  val get_munderover: 'tags this -> MathMLElement.t [@@js.get "munderover"]
  val set_munderover: 'tags this -> MathMLElement.t -> unit [@@js.set "munderover"]
  val get_semantics: 'tags this -> MathMLElement.t [@@js.get "semantics"]
  val set_semantics: 'tags this -> MathMLElement.t -> unit [@@js.set "semantics"]
  val create: annotation:MathMLElement.t -> annotation_xml:(MathMLElement.t[@js "annotation-xml"]) -> maction:MathMLElement.t -> math:MathMLElement.t -> merror:MathMLElement.t -> mfrac:MathMLElement.t -> mi:MathMLElement.t -> mmultiscripts:MathMLElement.t -> mn:MathMLElement.t -> mo:MathMLElement.t -> mover:MathMLElement.t -> mpadded:MathMLElement.t -> mphantom:MathMLElement.t -> mprescripts:MathMLElement.t -> mroot:MathMLElement.t -> mrow:MathMLElement.t -> ms:MathMLElement.t -> mspace:MathMLElement.t -> msqrt:MathMLElement.t -> mstyle:MathMLElement.t -> msub:MathMLElement.t -> msubsup:MathMLElement.t -> msup:MathMLElement.t -> mtable:MathMLElement.t -> mtd:MathMLElement.t -> mtext:MathMLElement.t -> mtr:MathMLElement.t -> munder:MathMLElement.t -> munderover:MathMLElement.t -> semantics:MathMLElement.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MathMLElementEventMap : sig
  type t = [`ElementEventMap | `GlobalEventHandlersEventMap | `MathMLElementEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ElementEventMap | `GlobalEventHandlersEventMap | `MathMLElementEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ElementEventMap | `GlobalEventHandlersEventMap | `MathMLElementEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MathMLElementEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MIDIPortEventMap : sig
  type t = [`MIDIPortEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MIDIPortEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MIDIPortEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MIDIPortEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_statechange: 'tags this -> MIDIConnectionEvent.t [@@js.get "statechange"]
  val set_statechange: 'tags this -> MIDIConnectionEvent.t -> unit [@@js.set "statechange"]
  val create: statechange:MIDIConnectionEvent.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MIDIInputEventMap : sig
  type t = [`MIDIInputEventMap | `MIDIPortEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MIDIInputEventMap | `MIDIPortEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MIDIInputEventMap | `MIDIPortEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MIDIInputEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_midimessage: 'tags this -> MIDIMessageEvent.t [@@js.get "midimessage"]
  val set_midimessage: 'tags this -> MIDIMessageEvent.t -> unit [@@js.set "midimessage"]
  val create: midimessage:MIDIMessageEvent.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MIDIAccessEventMap : sig
  type t = [`MIDIAccessEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MIDIAccessEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MIDIAccessEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MIDIAccessEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_statechange: 'tags this -> Event.t [@@js.get "statechange"]
  val set_statechange: 'tags this -> Event.t -> unit [@@js.set "statechange"]
  val create: statechange:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ComputedKeyframe : sig
  type t = [`ComputedKeyframe] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ComputedKeyframe]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ComputedKeyframe]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ComputedKeyframe ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_composite: 'tags this -> CompositeOperationOrAuto.t [@@js.get "composite"]
  val set_composite: 'tags this -> CompositeOperationOrAuto.t -> unit [@@js.set "composite"]
  val get_computedOffset: 'tags this -> float [@@js.get "computedOffset"]
  val set_computedOffset: 'tags this -> float -> unit [@@js.set "computedOffset"]
  val get_easing: 'tags this -> string [@@js.get "easing"]
  val set_easing: 'tags this -> string -> unit [@@js.set "easing"]
  val get_offset: 'tags this -> float option [@@js.get "offset"]
  val set_offset: 'tags this -> float option -> unit [@@js.set "offset"]
  val get: 'tags this -> string -> ([`Number of float | `String of string | `Null | `Undefined] [@js.union on_field "dummy"]) Primitive.t [@@js.index_get]
  val set: 'tags this -> string -> ([`Null | `Undefined of undefined | `U1 of string | `U2 of float] [@js.union]) -> unit [@@js.index_set]
  val create: composite:CompositeOperationOrAuto.t -> computedOffset:float -> easing:string -> ?offset:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/KeyframeEffect) *)
module[@js.scope "KeyframeEffect"] KeyframeEffect : sig
  type t = [`AnimationEffect | `KeyframeEffect] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AnimationEffect | `KeyframeEffect]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AnimationEffect | `KeyframeEffect]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `KeyframeEffect ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/KeyframeEffect/composite) *)
  val get_composite: 'tags this -> CompositeOperation.t [@@js.get "composite"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/KeyframeEffect/composite) *)
  val set_composite: 'tags this -> CompositeOperation.t -> unit [@@js.set "composite"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/KeyframeEffect/iterationComposite) *)
  val get_iterationComposite: 'tags this -> IterationCompositeOperation.t [@@js.get "iterationComposite"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/KeyframeEffect/iterationComposite) *)
  val set_iterationComposite: 'tags this -> IterationCompositeOperation.t -> unit [@@js.set "iterationComposite"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/KeyframeEffect/pseudoElement) *)
  val get_pseudoElement: 'tags this -> string option [@@js.get "pseudoElement"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/KeyframeEffect/pseudoElement) *)
  val set_pseudoElement: 'tags this -> string option -> unit [@@js.set "pseudoElement"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/KeyframeEffect/target) *)
  val get_target: 'tags this -> Element.t option [@@js.get "target"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/KeyframeEffect/target) *)
  val set_target: 'tags this -> Element.t option -> unit [@@js.set "target"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/KeyframeEffect/getKeyframes) *)
  val getKeyframes: 'tags this -> ComputedKeyframe.t list [@@js.call "getKeyframes"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/KeyframeEffect/setKeyframes) *)
  val setKeyframes: 'tags this -> keyframes:([`Null | `U1 of Keyframe.t list | `U2 of PropertyIndexedKeyframes.t] [@js.union]) -> unit [@@js.call "setKeyframes"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: target:Element.t option -> keyframes:([`Null | `U1 of Keyframe.t list | `U2 of PropertyIndexedKeyframes.t] [@js.union]) -> ?options:([`U1 of float | `U2 of KeyframeEffectOptions.t] [@js.union]) -> unit -> t [@@js.create]
  val create': t -> t [@@js.create]
end
module IntersectionObserverInit : sig
  type t = [`IntersectionObserverInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`IntersectionObserverInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`IntersectionObserverInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IntersectionObserverInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_root: 'tags this -> (Document.t, Element.t) union2 option [@@js.get "root"]
  val set_root: 'tags this -> ([`Null | `U1 of Element.t | `U2 of Document.t] [@js.union]) -> unit [@@js.set "root"]
  val get_rootMargin: 'tags this -> string option [@@js.get "rootMargin"]
  val set_rootMargin: 'tags this -> string -> unit [@@js.set "rootMargin"]
  val get_threshold: 'tags this -> ([`Number of float | `Undefined | `Other of float list] [@js.union on_field "dummy"]) Primitive.t [@@js.get "threshold"]
  val set_threshold: 'tags this -> ([`U1 of float | `U2 of float list] [@js.union]) -> unit [@@js.set "threshold"]
  val create: ?root:(Document.t, Element.t) union2 -> ?rootMargin:string -> ?threshold:([`Number of float | `Other of float list] [@js.union on_field "dummy"]) Primitive.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module IntersectionObserverEntryInit : sig
  type t = [`IntersectionObserverEntryInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`IntersectionObserverEntryInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`IntersectionObserverEntryInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IntersectionObserverEntryInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_boundingClientRect: 'tags this -> DOMRectInit.t [@@js.get "boundingClientRect"]
  val set_boundingClientRect: 'tags this -> DOMRectInit.t -> unit [@@js.set "boundingClientRect"]
  val get_intersectionRatio: 'tags this -> float [@@js.get "intersectionRatio"]
  val set_intersectionRatio: 'tags this -> float -> unit [@@js.set "intersectionRatio"]
  val get_intersectionRect: 'tags this -> DOMRectInit.t [@@js.get "intersectionRect"]
  val set_intersectionRect: 'tags this -> DOMRectInit.t -> unit [@@js.set "intersectionRect"]
  val get_isIntersecting: 'tags this -> bool [@@js.get "isIntersecting"]
  val set_isIntersecting: 'tags this -> bool -> unit [@@js.set "isIntersecting"]
  val get_rootBounds: 'tags this -> DOMRectInit.t option [@@js.get "rootBounds"]
  val set_rootBounds: 'tags this -> DOMRectInit.t option -> unit [@@js.set "rootBounds"]
  val get_target: 'tags this -> Element.t [@@js.get "target"]
  val set_target: 'tags this -> Element.t -> unit [@@js.set "target"]
  val get_time: 'tags this -> DOMHighResTimeStamp.t [@@js.get "time"]
  val set_time: 'tags this -> DOMHighResTimeStamp.t -> unit [@@js.set "time"]
  val create: boundingClientRect:DOMRectInit.t -> intersectionRatio:float -> intersectionRect:DOMRectInit.t -> isIntersecting:bool -> ?rootBounds:DOMRectInit.t -> target:Element.t -> time:DOMHighResTimeStamp.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  This Intersection Observer API interface describes the intersection between the target element and its root container at a specific moment of transition.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry)
*)
module[@js.scope "IntersectionObserverEntry"] IntersectionObserverEntry : sig
  type t = [`IntersectionObserverEntry] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`IntersectionObserverEntry]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`IntersectionObserverEntry]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IntersectionObserverEntry ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/boundingClientRect) *)
  val get_boundingClientRect: 'tags this -> DOMRectReadOnly.t [@@js.get "boundingClientRect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/intersectionRatio) *)
  val get_intersectionRatio: 'tags this -> float [@@js.get "intersectionRatio"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/intersectionRect) *)
  val get_intersectionRect: 'tags this -> DOMRectReadOnly.t [@@js.get "intersectionRect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/isIntersecting) *)
  val get_isIntersecting: 'tags this -> bool [@@js.get "isIntersecting"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/rootBounds) *)
  val get_rootBounds: 'tags this -> DOMRectReadOnly.t option [@@js.get "rootBounds"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/target) *)
  val get_target: 'tags this -> Element.t [@@js.get "target"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/time) *)
  val get_time: 'tags this -> DOMHighResTimeStamp.t [@@js.get "time"]
  val create: boundingClientRect:DOMRectReadOnly.t -> intersectionRatio:float -> intersectionRect:DOMRectReadOnly.t -> isIntersecting:bool -> ?rootBounds:DOMRectReadOnly.t -> target:Element.t -> time:DOMHighResTimeStamp.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': IntersectionObserverEntryInit.t -> t [@@js.create]
end

(**
  provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document's viewport.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IntersectionObserver)
*)
module[@js.scope "IntersectionObserver"] rec IntersectionObserver : sig
  type t = [`IntersectionObserver] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`IntersectionObserver]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`IntersectionObserver]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IntersectionObserver ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IntersectionObserver/root) *)
  val get_root: 'tags this -> (Document.t, Element.t) union2 option [@@js.get "root"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IntersectionObserver/rootMargin) *)
  val get_rootMargin: 'tags this -> string [@@js.get "rootMargin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IntersectionObserver/thresholds) *)
  val get_thresholds: 'tags this -> float list [@@js.get "thresholds"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IntersectionObserver/disconnect) *)
  val disconnect: 'tags this -> unit [@@js.call "disconnect"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IntersectionObserver/observe) *)
  val observe: 'tags this -> target:Element.t -> unit [@@js.call "observe"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IntersectionObserver/takeRecords) *)
  val takeRecords: 'tags this -> IntersectionObserverEntry.t list [@@js.call "takeRecords"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IntersectionObserver/unobserve) *)
  val unobserve: 'tags this -> target:Element.t -> unit [@@js.call "unobserve"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: callback:IntersectionObserverCallback.t -> ?options:IntersectionObserverInit.t -> unit -> t [@@js.create]
end
and IntersectionObserverCallback : sig
  type t = [`IntersectionObserverCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`IntersectionObserverCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`IntersectionObserverCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IntersectionObserverCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> entries:IntersectionObserverEntry.t list -> observer:IntersectionObserver.t -> unit [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/InputDeviceInfo)
*)
module[@js.scope "InputDeviceInfo"] InputDeviceInfo : sig
  type t = [`InputDeviceInfo | `MediaDeviceInfo] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`InputDeviceInfo | `MediaDeviceInfo]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`InputDeviceInfo | `MediaDeviceInfo]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `InputDeviceInfo ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/InputDeviceInfo/getCapabilities) *)
  val getCapabilities: 'tags this -> MediaTrackCapabilities.t [@@js.call "getCapabilities"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  The type of `import.meta`.
  
  If you need to declare that a given property exists on `import.meta`,
  this type may be augmented via interface merging.
*)
module ImportMeta : sig
  type t = [`ImportMeta] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ImportMeta]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ImportMeta]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ImportMeta ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_url: 'tags this -> string [@@js.get "url"]
  val set_url: 'tags this -> string -> unit [@@js.set "url"]
  val create: url:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module[@js.scope "Image"] Image : sig
  val create: ?width:float -> ?height:float -> unit -> HTMLImageElement.t [@@js.create]
end
module IDBTransactionEventMap : sig
  type t = [`IDBTransactionEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`IDBTransactionEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`IDBTransactionEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBTransactionEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_abort: 'tags this -> Event.t [@@js.get "abort"]
  val set_abort: 'tags this -> Event.t -> unit [@@js.set "abort"]
  val get_complete: 'tags this -> Event.t [@@js.get "complete"]
  val set_complete: 'tags this -> Event.t -> unit [@@js.set "complete"]
  val get_error: 'tags this -> Event.t [@@js.get "error"]
  val set_error: 'tags this -> Event.t -> unit [@@js.set "error"]
  val create: abort:Event.t -> complete:Event.t -> error:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module IDBRequestEventMap : sig
  type t = [`IDBRequestEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`IDBRequestEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`IDBRequestEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBRequestEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_error: 'tags this -> Event.t [@@js.get "error"]
  val set_error: 'tags this -> Event.t -> unit [@@js.set "error"]
  val get_success: 'tags this -> Event.t [@@js.get "success"]
  val set_success: 'tags this -> Event.t -> unit [@@js.set "success"]
  val create: error:Event.t -> success:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module IDBOpenDBRequestEventMap : sig
  type t = [`IDBOpenDBRequestEventMap | `IDBRequestEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`IDBOpenDBRequestEventMap | `IDBRequestEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`IDBOpenDBRequestEventMap | `IDBRequestEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBOpenDBRequestEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_blocked: 'tags this -> IDBVersionChangeEvent.t [@@js.get "blocked"]
  val set_blocked: 'tags this -> IDBVersionChangeEvent.t -> unit [@@js.set "blocked"]
  val get_upgradeneeded: 'tags this -> IDBVersionChangeEvent.t [@@js.get "upgradeneeded"]
  val set_upgradeneeded: 'tags this -> IDBVersionChangeEvent.t -> unit [@@js.set "upgradeneeded"]
  val create: blocked:IDBVersionChangeEvent.t -> upgradeneeded:IDBVersionChangeEvent.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module IDBDatabaseEventMap : sig
  type t = [`IDBDatabaseEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`IDBDatabaseEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`IDBDatabaseEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `IDBDatabaseEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_abort: 'tags this -> Event.t [@@js.get "abort"]
  val set_abort: 'tags this -> Event.t -> unit [@@js.set "abort"]
  val get_close: 'tags this -> Event.t [@@js.get "close"]
  val set_close: 'tags this -> Event.t -> unit [@@js.set "close"]
  val get_error: 'tags this -> Event.t [@@js.get "error"]
  val set_error: 'tags this -> Event.t -> unit [@@js.set "error"]
  val get_versionchange: 'tags this -> IDBVersionChangeEvent.t [@@js.get "versionchange"]
  val set_versionchange: 'tags this -> IDBVersionChangeEvent.t -> unit [@@js.set "versionchange"]
  val create: abort:Event.t -> close:Event.t -> error:Event.t -> versionchange:IDBVersionChangeEvent.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module HmacKeyAlgorithm : sig
  type t = [`HmacKeyAlgorithm | `KeyAlgorithm] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`HmacKeyAlgorithm | `KeyAlgorithm]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`HmacKeyAlgorithm | `KeyAlgorithm]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HmacKeyAlgorithm ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_hash: 'tags this -> KeyAlgorithm.t [@@js.get "hash"]
  val set_hash: 'tags this -> KeyAlgorithm.t -> unit [@@js.set "hash"]
  val get_length: 'tags this -> float [@@js.get "length"]
  val set_length: 'tags this -> float -> unit [@@js.set "length"]
  val create: hash:KeyAlgorithm.t -> length:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module HTMLElementEventMap : sig
  type t = [`ElementEventMap | `GlobalEventHandlersEventMap | `HTMLElementEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ElementEventMap | `GlobalEventHandlersEventMap | `HTMLElementEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ElementEventMap | `GlobalEventHandlersEventMap | `HTMLElementEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLElementEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module HTMLMediaElementEventMap : sig
  type t = [`ElementEventMap | `GlobalEventHandlersEventMap | `HTMLElementEventMap | `HTMLMediaElementEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ElementEventMap | `GlobalEventHandlersEventMap | `HTMLElementEventMap | `HTMLMediaElementEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ElementEventMap | `GlobalEventHandlersEventMap | `HTMLElementEventMap | `HTMLMediaElementEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLMediaElementEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_encrypted: 'tags this -> MediaEncryptedEvent.t [@@js.get "encrypted"]
  val set_encrypted: 'tags this -> MediaEncryptedEvent.t -> unit [@@js.set "encrypted"]
  val get_waitingforkey: 'tags this -> Event.t [@@js.get "waitingforkey"]
  val set_waitingforkey: 'tags this -> Event.t -> unit [@@js.set "waitingforkey"]
  val create: encrypted:MediaEncryptedEvent.t -> waitingforkey:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module HTMLVideoElementEventMap : sig
  type t = [`ElementEventMap | `GlobalEventHandlersEventMap | `HTMLElementEventMap | `HTMLMediaElementEventMap | `HTMLVideoElementEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ElementEventMap | `GlobalEventHandlersEventMap | `HTMLElementEventMap | `HTMLMediaElementEventMap | `HTMLVideoElementEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ElementEventMap | `GlobalEventHandlersEventMap | `HTMLElementEventMap | `HTMLMediaElementEventMap | `HTMLVideoElementEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLVideoElementEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_enterpictureinpicture: 'tags this -> Event.t [@@js.get "enterpictureinpicture"]
  val set_enterpictureinpicture: 'tags this -> Event.t -> unit [@@js.set "enterpictureinpicture"]
  val get_leavepictureinpicture: 'tags this -> Event.t [@@js.get "leavepictureinpicture"]
  val set_leavepictureinpicture: 'tags this -> Event.t -> unit [@@js.set "leavepictureinpicture"]
  val create: enterpictureinpicture:Event.t -> leavepictureinpicture:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of table cells, either header or data cells, in an HTML document.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement)
*)
module[@js.scope "HTMLTableCellElement"] HTMLTableCellElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTableCellElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTableCellElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTableCellElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLTableCellElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Sets or retrieves abbreviated text for the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/abbr)
  *)
  val get_abbr: 'tags this -> string [@@js.get "abbr"]
  
  (**
    Sets or retrieves abbreviated text for the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/abbr)
  *)
  val set_abbr: 'tags this -> string -> unit [@@js.set "abbr"]
  
  (**
    Sets or retrieves how the object is aligned with adjacent text.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/align)
  *)
  val get_align: 'tags this -> string [@@js.get "align"]
  
  (**
    Sets or retrieves how the object is aligned with adjacent text.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/align)
  *)
  val set_align: 'tags this -> string -> unit [@@js.set "align"]
  
  (**
    Sets or retrieves a comma-delimited list of conceptual categories associated with the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/axis)
  *)
  val get_axis: 'tags this -> string [@@js.get "axis"]
  
  (**
    Sets or retrieves a comma-delimited list of conceptual categories associated with the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/axis)
  *)
  val set_axis: 'tags this -> string -> unit [@@js.set "axis"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/bgColor) *)
  val get_bgColor: 'tags this -> string [@@js.get "bgColor"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/bgColor) *)
  val set_bgColor: 'tags this -> string -> unit [@@js.set "bgColor"]
  
  (**
    Retrieves the position of the object in the cells collection of a row.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/cellIndex)
  *)
  val get_cellIndex: 'tags this -> float [@@js.get "cellIndex"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/ch) *)
  val get_ch: 'tags this -> string [@@js.get "ch"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/ch) *)
  val set_ch: 'tags this -> string -> unit [@@js.set "ch"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/chOff) *)
  val get_chOff: 'tags this -> string [@@js.get "chOff"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/chOff) *)
  val set_chOff: 'tags this -> string -> unit [@@js.set "chOff"]
  
  (**
    Sets or retrieves the number columns in the table that the object should span.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/colSpan)
  *)
  val get_colSpan: 'tags this -> float [@@js.get "colSpan"]
  
  (**
    Sets or retrieves the number columns in the table that the object should span.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/colSpan)
  *)
  val set_colSpan: 'tags this -> float -> unit [@@js.set "colSpan"]
  
  (**
    Sets or retrieves a list of header cells that provide information for the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/headers)
  *)
  val get_headers: 'tags this -> string [@@js.get "headers"]
  
  (**
    Sets or retrieves a list of header cells that provide information for the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/headers)
  *)
  val set_headers: 'tags this -> string -> unit [@@js.set "headers"]
  
  (**
    Sets or retrieves the height of the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/height)
  *)
  val get_height: 'tags this -> string [@@js.get "height"]
  
  (**
    Sets or retrieves the height of the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/height)
  *)
  val set_height: 'tags this -> string -> unit [@@js.set "height"]
  
  (**
    Sets or retrieves whether the browser automatically performs wordwrap.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/noWrap)
  *)
  val get_noWrap: 'tags this -> bool [@@js.get "noWrap"]
  
  (**
    Sets or retrieves whether the browser automatically performs wordwrap.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/noWrap)
  *)
  val set_noWrap: 'tags this -> bool -> unit [@@js.set "noWrap"]
  
  (**
    Sets or retrieves how many rows in a table the cell should span.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/rowSpan)
  *)
  val get_rowSpan: 'tags this -> float [@@js.get "rowSpan"]
  
  (**
    Sets or retrieves how many rows in a table the cell should span.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/rowSpan)
  *)
  val set_rowSpan: 'tags this -> float -> unit [@@js.set "rowSpan"]
  
  (**
    Sets or retrieves the group of cells in a table to which the object's information applies.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/scope)
  *)
  val get_scope: 'tags this -> string [@@js.get "scope"]
  
  (**
    Sets or retrieves the group of cells in a table to which the object's information applies.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/scope)
  *)
  val set_scope: 'tags this -> string -> unit [@@js.set "scope"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/vAlign) *)
  val get_vAlign: 'tags this -> string [@@js.get "vAlign"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/vAlign) *)
  val set_vAlign: 'tags this -> string -> unit [@@js.set "vAlign"]
  
  (**
    Sets or retrieves the width of the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/width)
  *)
  val get_width: 'tags this -> string [@@js.get "width"]
  
  (**
    Sets or retrieves the width of the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/width)
  *)
  val set_width: 'tags this -> string -> unit [@@js.set "width"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** @deprecated prefer HTMLTableCellElement *)
module HTMLTableHeaderCellElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTableCellElement | `HTMLTableHeaderCellElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTableCellElement | `HTMLTableHeaderCellElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTableCellElement | `HTMLTableHeaderCellElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLTableHeaderCellElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** @deprecated prefer HTMLTableCellElement *)
module HTMLTableDataCellElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTableCellElement | `HTMLTableDataCellElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTableCellElement | `HTMLTableDataCellElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTableCellElement | `HTMLTableDataCellElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLTableDataCellElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module HTMLFrameSetElementEventMap : sig
  type t = [`ElementEventMap | `GlobalEventHandlersEventMap | `HTMLElementEventMap | `HTMLFrameSetElementEventMap | `WindowEventHandlersEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ElementEventMap | `GlobalEventHandlersEventMap | `HTMLElementEventMap | `HTMLFrameSetElementEventMap | `WindowEventHandlersEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ElementEventMap | `GlobalEventHandlersEventMap | `HTMLElementEventMap | `HTMLFrameSetElementEventMap | `WindowEventHandlersEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLFrameSetElementEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  An invalid HTML element and derives from the HTMLElement interface, but without implementing any additional properties or methods.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLUnknownElement)
*)
module[@js.scope "HTMLUnknownElement"] HTMLUnknownElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLUnknownElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLUnknownElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLUnknownElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLUnknownElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** Provides special properties (beyond those of the regular HTMLElement object interface it inherits) for manipulating <param> elements, representing a pair of a key and a value that acts as a parameter for an <object> element. *)
module[@js.scope "HTMLParamElement"] HTMLParamElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLParamElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLParamElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLParamElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLParamElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Sets or retrieves the name of an input parameter for an element.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLParamElement/name)
  *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (**
    Sets or retrieves the name of an input parameter for an element.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLParamElement/name)
  *)
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  
  (**
    Sets or retrieves the content type of the resource designated by the value attribute.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLParamElement/type)
  *)
  val get_type: 'tags this -> string [@@js.get "type"]
  
  (**
    Sets or retrieves the content type of the resource designated by the value attribute.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLParamElement/type)
  *)
  val set_type: 'tags this -> string -> unit [@@js.set "type"]
  
  (**
    Sets or retrieves the value of an input parameter for an element.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLParamElement/value)
  *)
  val get_value: 'tags this -> string [@@js.get "value"]
  
  (**
    Sets or retrieves the value of an input parameter for an element.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLParamElement/value)
  *)
  val set_value: 'tags this -> string -> unit [@@js.set "value"]
  
  (**
    Sets or retrieves the data type of the value attribute.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLParamElement/valueType)
  *)
  val get_valueType: 'tags this -> string [@@js.get "valueType"]
  
  (**
    Sets or retrieves the data type of the value attribute.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLParamElement/valueType)
  *)
  val set_valueType: 'tags this -> string -> unit [@@js.set "valueType"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** Provides methods to manipulate <marquee> elements. *)
module[@js.scope "HTMLMarqueeElement"] HTMLMarqueeElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLMarqueeElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLMarqueeElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLMarqueeElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLMarqueeElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** @deprecated  *)
  val get_behavior: 'tags this -> string [@@js.get "behavior"]
  
  (** @deprecated  *)
  val set_behavior: 'tags this -> string -> unit [@@js.set "behavior"]
  
  (** @deprecated  *)
  val get_bgColor: 'tags this -> string [@@js.get "bgColor"]
  
  (** @deprecated  *)
  val set_bgColor: 'tags this -> string -> unit [@@js.set "bgColor"]
  
  (** @deprecated  *)
  val get_direction: 'tags this -> string [@@js.get "direction"]
  
  (** @deprecated  *)
  val set_direction: 'tags this -> string -> unit [@@js.set "direction"]
  
  (** @deprecated  *)
  val get_height: 'tags this -> string [@@js.get "height"]
  
  (** @deprecated  *)
  val set_height: 'tags this -> string -> unit [@@js.set "height"]
  
  (** @deprecated  *)
  val get_hspace: 'tags this -> float [@@js.get "hspace"]
  
  (** @deprecated  *)
  val set_hspace: 'tags this -> float -> unit [@@js.set "hspace"]
  
  (** @deprecated  *)
  val get_loop: 'tags this -> float [@@js.get "loop"]
  
  (** @deprecated  *)
  val set_loop: 'tags this -> float -> unit [@@js.set "loop"]
  
  (** @deprecated  *)
  val get_scrollAmount: 'tags this -> float [@@js.get "scrollAmount"]
  
  (** @deprecated  *)
  val set_scrollAmount: 'tags this -> float -> unit [@@js.set "scrollAmount"]
  
  (** @deprecated  *)
  val get_scrollDelay: 'tags this -> float [@@js.get "scrollDelay"]
  
  (** @deprecated  *)
  val set_scrollDelay: 'tags this -> float -> unit [@@js.set "scrollDelay"]
  
  (** @deprecated  *)
  val get_trueSpeed: 'tags this -> bool [@@js.get "trueSpeed"]
  
  (** @deprecated  *)
  val set_trueSpeed: 'tags this -> bool -> unit [@@js.set "trueSpeed"]
  
  (** @deprecated  *)
  val get_vspace: 'tags this -> float [@@js.get "vspace"]
  
  (** @deprecated  *)
  val set_vspace: 'tags this -> float -> unit [@@js.set "vspace"]
  
  (** @deprecated  *)
  val get_width: 'tags this -> string [@@js.get "width"]
  
  (** @deprecated  *)
  val set_width: 'tags this -> string -> unit [@@js.set "width"]
  
  (** @deprecated  *)
  val start: 'tags this -> unit [@@js.call "start"]
  
  (** @deprecated  *)
  val stop: 'tags this -> unit [@@js.call "stop"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** Provides special properties (beyond those of the regular HTMLElement interface they also inherit) for manipulating <frameset> elements. *)
module[@js.scope "HTMLFrameSetElement"] HTMLFrameSetElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLFrameSetElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable | `WindowEventHandlers] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLFrameSetElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable | `WindowEventHandlers]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLFrameSetElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable | `WindowEventHandlers]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLFrameSetElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Sets or retrieves the frame widths of the object.
    @deprecated 
  *)
  val get_cols: 'tags this -> string [@@js.get "cols"]
  
  (**
    Sets or retrieves the frame widths of the object.
    @deprecated 
  *)
  val set_cols: 'tags this -> string -> unit [@@js.set "cols"]
  
  (**
    Sets or retrieves the frame heights of the object.
    @deprecated 
  *)
  val get_rows: 'tags this -> string [@@js.get "rows"]
  
  (**
    Sets or retrieves the frame heights of the object.
    @deprecated 
  *)
  val set_rows: 'tags this -> string -> unit [@@js.set "rows"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLFrameSetElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLFrameSetElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFrameElement) *)
module[@js.scope "HTMLFrameElement"] HTMLFrameElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLFrameElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLFrameElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLFrameElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLFrameElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Retrieves the document object of the page or frame.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFrameElement/contentDocument)
  *)
  val get_contentDocument: 'tags this -> Document.t option [@@js.get "contentDocument"]
  
  (**
    Retrieves the object of the specified.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFrameElement/contentWindow)
  *)
  val get_contentWindow: 'tags this -> WindowProxy.t option [@@js.get "contentWindow"]
  
  (**
    Sets or retrieves whether to display a border for the frame.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFrameElement/frameBorder)
  *)
  val get_frameBorder: 'tags this -> string [@@js.get "frameBorder"]
  
  (**
    Sets or retrieves whether to display a border for the frame.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFrameElement/frameBorder)
  *)
  val set_frameBorder: 'tags this -> string -> unit [@@js.set "frameBorder"]
  
  (**
    Sets or retrieves a URI to a long description of the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFrameElement/longDesc)
  *)
  val get_longDesc: 'tags this -> string [@@js.get "longDesc"]
  
  (**
    Sets or retrieves a URI to a long description of the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFrameElement/longDesc)
  *)
  val set_longDesc: 'tags this -> string -> unit [@@js.set "longDesc"]
  
  (**
    Sets or retrieves the top and bottom margin heights before displaying the text in a frame.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFrameElement/marginHeight)
  *)
  val get_marginHeight: 'tags this -> string [@@js.get "marginHeight"]
  
  (**
    Sets or retrieves the top and bottom margin heights before displaying the text in a frame.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFrameElement/marginHeight)
  *)
  val set_marginHeight: 'tags this -> string -> unit [@@js.set "marginHeight"]
  
  (**
    Sets or retrieves the left and right margin widths before displaying the text in a frame.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFrameElement/marginWidth)
  *)
  val get_marginWidth: 'tags this -> string [@@js.get "marginWidth"]
  
  (**
    Sets or retrieves the left and right margin widths before displaying the text in a frame.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFrameElement/marginWidth)
  *)
  val set_marginWidth: 'tags this -> string -> unit [@@js.set "marginWidth"]
  
  (**
    Sets or retrieves the frame name.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFrameElement/name)
  *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (**
    Sets or retrieves the frame name.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFrameElement/name)
  *)
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  
  (**
    Sets or retrieves whether the user can resize the frame.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFrameElement/noResize)
  *)
  val get_noResize: 'tags this -> bool [@@js.get "noResize"]
  
  (**
    Sets or retrieves whether the user can resize the frame.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFrameElement/noResize)
  *)
  val set_noResize: 'tags this -> bool -> unit [@@js.set "noResize"]
  
  (**
    Sets or retrieves whether the frame can be scrolled.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFrameElement/scrolling)
  *)
  val get_scrolling: 'tags this -> string [@@js.get "scrolling"]
  
  (**
    Sets or retrieves whether the frame can be scrolled.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFrameElement/scrolling)
  *)
  val set_scrolling: 'tags this -> string -> unit [@@js.set "scrolling"]
  
  (**
    Sets or retrieves a URL to be loaded by the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFrameElement/src)
  *)
  val get_src: 'tags this -> string [@@js.get "src"]
  
  (**
    Sets or retrieves a URL to be loaded by the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFrameElement/src)
  *)
  val set_src: 'tags this -> string -> unit [@@js.set "src"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** Implements the document object model (DOM) representation of the font element. The HTML Font Element <font> defines the font size, font face and color of text. *)
module[@js.scope "HTMLFontElement"] HTMLFontElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLFontElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLFontElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLFontElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLFontElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFontElement/color) *)
  val get_color: 'tags this -> string [@@js.get "color"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFontElement/color) *)
  val set_color: 'tags this -> string -> unit [@@js.set "color"]
  
  (**
    Sets or retrieves the current typeface family.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFontElement/face)
  *)
  val get_face: 'tags this -> string [@@js.get "face"]
  
  (**
    Sets or retrieves the current typeface family.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFontElement/face)
  *)
  val set_face: 'tags this -> string -> unit [@@js.set "face"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFontElement/size) *)
  val get_size: 'tags this -> string [@@js.get "size"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFontElement/size) *)
  val set_size: 'tags this -> string -> unit [@@js.set "size"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** @deprecated  *)
module[@js.scope "HTMLDirectoryElement"] HTMLDirectoryElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLDirectoryElement | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLDirectoryElement | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLDirectoryElement | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLDirectoryElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** @deprecated  *)
  val get_compact: 'tags this -> bool [@@js.get "compact"]
  
  (** @deprecated  *)
  val set_compact: 'tags this -> bool -> unit [@@js.set "compact"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Exposes specific properties and methods (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating a block of preformatted text (<pre>).
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLPreElement)
*)
module[@js.scope "HTMLPreElement"] HTMLPreElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLPreElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLPreElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLPreElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLPreElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Sets or gets a value that you can use to implement your own width functionality for the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLPreElement/width)
  *)
  val get_width: 'tags this -> float [@@js.get "width"]
  
  (**
    Sets or gets a value that you can use to implement your own width functionality for the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLPreElement/width)
  *)
  val set_width: 'tags this -> float -> unit [@@js.set "width"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module HTMLElementDeprecatedTagNameMap : sig
  type t = [`HTMLElementDeprecatedTagNameMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`HTMLElementDeprecatedTagNameMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`HTMLElementDeprecatedTagNameMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLElementDeprecatedTagNameMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_acronym: 'tags this -> HTMLElement.t [@@js.get "acronym"]
  val set_acronym: 'tags this -> HTMLElement.t -> unit [@@js.set "acronym"]
  val get_applet: 'tags this -> HTMLUnknownElement.t [@@js.get "applet"]
  val set_applet: 'tags this -> HTMLUnknownElement.t -> unit [@@js.set "applet"]
  val get_basefont: 'tags this -> HTMLElement.t [@@js.get "basefont"]
  val set_basefont: 'tags this -> HTMLElement.t -> unit [@@js.set "basefont"]
  val get_bgsound: 'tags this -> HTMLUnknownElement.t [@@js.get "bgsound"]
  val set_bgsound: 'tags this -> HTMLUnknownElement.t -> unit [@@js.set "bgsound"]
  val get_big: 'tags this -> HTMLElement.t [@@js.get "big"]
  val set_big: 'tags this -> HTMLElement.t -> unit [@@js.set "big"]
  val get_blink: 'tags this -> HTMLUnknownElement.t [@@js.get "blink"]
  val set_blink: 'tags this -> HTMLUnknownElement.t -> unit [@@js.set "blink"]
  val get_center: 'tags this -> HTMLElement.t [@@js.get "center"]
  val set_center: 'tags this -> HTMLElement.t -> unit [@@js.set "center"]
  val get_dir: 'tags this -> HTMLDirectoryElement.t [@@js.get "dir"]
  val set_dir: 'tags this -> HTMLDirectoryElement.t -> unit [@@js.set "dir"]
  val get_font: 'tags this -> HTMLFontElement.t [@@js.get "font"]
  val set_font: 'tags this -> HTMLFontElement.t -> unit [@@js.set "font"]
  val get_frame: 'tags this -> HTMLFrameElement.t [@@js.get "frame"]
  val set_frame: 'tags this -> HTMLFrameElement.t -> unit [@@js.set "frame"]
  val get_frameset: 'tags this -> HTMLFrameSetElement.t [@@js.get "frameset"]
  val set_frameset: 'tags this -> HTMLFrameSetElement.t -> unit [@@js.set "frameset"]
  val get_isindex: 'tags this -> HTMLUnknownElement.t [@@js.get "isindex"]
  val set_isindex: 'tags this -> HTMLUnknownElement.t -> unit [@@js.set "isindex"]
  val get_keygen: 'tags this -> HTMLUnknownElement.t [@@js.get "keygen"]
  val set_keygen: 'tags this -> HTMLUnknownElement.t -> unit [@@js.set "keygen"]
  val get_listing: 'tags this -> HTMLPreElement.t [@@js.get "listing"]
  val set_listing: 'tags this -> HTMLPreElement.t -> unit [@@js.set "listing"]
  val get_marquee: 'tags this -> HTMLMarqueeElement.t [@@js.get "marquee"]
  val set_marquee: 'tags this -> HTMLMarqueeElement.t -> unit [@@js.set "marquee"]
  val get_menuitem: 'tags this -> HTMLElement.t [@@js.get "menuitem"]
  val set_menuitem: 'tags this -> HTMLElement.t -> unit [@@js.set "menuitem"]
  val get_multicol: 'tags this -> HTMLUnknownElement.t [@@js.get "multicol"]
  val set_multicol: 'tags this -> HTMLUnknownElement.t -> unit [@@js.set "multicol"]
  val get_nextid: 'tags this -> HTMLUnknownElement.t [@@js.get "nextid"]
  val set_nextid: 'tags this -> HTMLUnknownElement.t -> unit [@@js.set "nextid"]
  val get_nobr: 'tags this -> HTMLElement.t [@@js.get "nobr"]
  val set_nobr: 'tags this -> HTMLElement.t -> unit [@@js.set "nobr"]
  val get_noembed: 'tags this -> HTMLElement.t [@@js.get "noembed"]
  val set_noembed: 'tags this -> HTMLElement.t -> unit [@@js.set "noembed"]
  val get_noframes: 'tags this -> HTMLElement.t [@@js.get "noframes"]
  val set_noframes: 'tags this -> HTMLElement.t -> unit [@@js.set "noframes"]
  val get_param: 'tags this -> HTMLParamElement.t [@@js.get "param"]
  val set_param: 'tags this -> HTMLParamElement.t -> unit [@@js.set "param"]
  val get_plaintext: 'tags this -> HTMLElement.t [@@js.get "plaintext"]
  val set_plaintext: 'tags this -> HTMLElement.t -> unit [@@js.set "plaintext"]
  val get_rb: 'tags this -> HTMLElement.t [@@js.get "rb"]
  val set_rb: 'tags this -> HTMLElement.t -> unit [@@js.set "rb"]
  val get_rtc: 'tags this -> HTMLElement.t [@@js.get "rtc"]
  val set_rtc: 'tags this -> HTMLElement.t -> unit [@@js.set "rtc"]
  val get_spacer: 'tags this -> HTMLUnknownElement.t [@@js.get "spacer"]
  val set_spacer: 'tags this -> HTMLUnknownElement.t -> unit [@@js.set "spacer"]
  val get_strike: 'tags this -> HTMLElement.t [@@js.get "strike"]
  val set_strike: 'tags this -> HTMLElement.t -> unit [@@js.set "strike"]
  val get_tt: 'tags this -> HTMLElement.t [@@js.get "tt"]
  val set_tt: 'tags this -> HTMLElement.t -> unit [@@js.set "tt"]
  val get_xmp: 'tags this -> HTMLPreElement.t [@@js.get "xmp"]
  val set_xmp: 'tags this -> HTMLPreElement.t -> unit [@@js.set "xmp"]
  val create: acronym:HTMLElement.t -> applet:HTMLUnknownElement.t -> basefont:HTMLElement.t -> bgsound:HTMLUnknownElement.t -> big:HTMLElement.t -> blink:HTMLUnknownElement.t -> center:HTMLElement.t -> dir:HTMLDirectoryElement.t -> font:HTMLFontElement.t -> frame:HTMLFrameElement.t -> frameset:HTMLFrameSetElement.t -> isindex:HTMLUnknownElement.t -> keygen:HTMLUnknownElement.t -> listing:HTMLPreElement.t -> marquee:HTMLMarqueeElement.t -> menuitem:HTMLElement.t -> multicol:HTMLUnknownElement.t -> nextid:HTMLUnknownElement.t -> nobr:HTMLElement.t -> noembed:HTMLElement.t -> noframes:HTMLElement.t -> param:HTMLParamElement.t -> plaintext:HTMLElement.t -> rb:HTMLElement.t -> rtc:HTMLElement.t -> spacer:HTMLUnknownElement.t -> strike:HTMLElement.t -> tt:HTMLElement.t -> xmp:HTMLPreElement.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** @deprecated use Document *)
module[@js.scope "HTMLDocument"] HTMLDocument : sig
  type t = [`Document | `DocumentOrShadowRoot | `EventTarget | `FontFaceSource | `GlobalEventHandlers | `HTMLDocument | `Node | `NonElementParentNode | `ParentNode | `XPathEvaluatorBase] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Document | `DocumentOrShadowRoot | `EventTarget | `FontFaceSource | `GlobalEventHandlers | `HTMLDocument | `Node | `NonElementParentNode | `ParentNode | `XPathEvaluatorBase]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Document | `DocumentOrShadowRoot | `EventTarget | `FontFaceSource | `GlobalEventHandlers | `HTMLDocument | `Node | `NonElementParentNode | `ParentNode | `XPathEvaluatorBase]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLDocument ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'DocumentEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'DocumentEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module HTMLBodyElementEventMap : sig
  type t = [`ElementEventMap | `GlobalEventHandlersEventMap | `HTMLBodyElementEventMap | `HTMLElementEventMap | `WindowEventHandlersEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ElementEventMap | `GlobalEventHandlersEventMap | `HTMLBodyElementEventMap | `HTMLElementEventMap | `WindowEventHandlersEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ElementEventMap | `GlobalEventHandlersEventMap | `HTMLBodyElementEventMap | `HTMLElementEventMap | `WindowEventHandlersEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLBodyElementEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module FontFaceSetEventMap : sig
  type t = [`FontFaceSetEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FontFaceSetEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FontFaceSetEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FontFaceSetEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_loading: 'tags this -> Event.t [@@js.get "loading"]
  val set_loading: 'tags this -> Event.t -> unit [@@js.set "loading"]
  val get_loadingdone: 'tags this -> Event.t [@@js.get "loadingdone"]
  val set_loadingdone: 'tags this -> Event.t -> unit [@@js.set "loadingdone"]
  val get_loadingerror: 'tags this -> Event.t [@@js.get "loadingerror"]
  val set_loadingerror: 'tags this -> Event.t -> unit [@@js.set "loadingerror"]
  val create: loading:Event.t -> loadingdone:Event.t -> loadingerror:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module FileCallback : sig
  type t = [`FileCallback] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FileCallback]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FileCallback]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FileCallback ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val apply: 'tags this -> file:File.t -> unit [@@js.apply]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemFileEntry) *)
module[@js.scope "FileSystemFileEntry"] FileSystemFileEntry : sig
  type t = [`FileSystemEntry | `FileSystemFileEntry] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FileSystemEntry | `FileSystemFileEntry]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FileSystemEntry | `FileSystemFileEntry]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FileSystemFileEntry ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileSystemFileEntry/file) *)
  val file: 'tags this -> successCallback:FileCallback.t -> ?errorCallback:ErrorCallback.t -> unit -> unit [@@js.call "file"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Lets web applications asynchronously read the contents of files (or raw data buffers) stored on the user's computer, using File or Blob objects to specify the file or data to read.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader)
*)
module[@js.scope "FileReader"] FileReader : sig
  type t = [`EventTarget | `FileReader] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventTarget | `FileReader]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventTarget | `FileReader]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FileReader ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/error) *)
  val get_error: 'tags this -> DOMException.t option [@@js.get "error"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/abort_event) *)
  val get_onabort: 'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option [@@js.get "onabort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/abort_event) *)
  val set_onabort: 'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option -> unit [@@js.set "onabort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/error_event) *)
  val get_onerror: 'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option [@@js.get "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/error_event) *)
  val set_onerror: 'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option -> unit [@@js.set "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/load_event) *)
  val get_onload: 'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option [@@js.get "onload"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/load_event) *)
  val set_onload: 'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option -> unit [@@js.set "onload"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/loadend_event) *)
  val get_onloadend: 'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option [@@js.get "onloadend"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/loadend_event) *)
  val set_onloadend: 'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option -> unit [@@js.set "onloadend"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/loadstart_event) *)
  val get_onloadstart: 'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option [@@js.get "onloadstart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/loadstart_event) *)
  val set_onloadstart: 'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option -> unit [@@js.set "onloadstart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/progress_event) *)
  val get_onprogress: 'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option [@@js.get "onprogress"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/progress_event) *)
  val set_onprogress: 'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option -> unit [@@js.set "onprogress"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/readyState) *)
  val get_readyState: 'tags this -> ([`L_n_0[@js 0] | `L_n_1[@js 1] | `L_n_2[@js 2]] [@js.enum]) [@@js.get "readyState"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/result) *)
  val get_result: 'tags this -> ([`String of string | `Null | `Other of ArrayBuffer.t] [@js.union on_field "dummy"]) Primitive.t [@@js.get "result"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/abort) *)
  val abort: 'tags this -> unit [@@js.call "abort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/readAsArrayBuffer) *)
  val readAsArrayBuffer: 'tags this -> blob:Blob.t -> unit [@@js.call "readAsArrayBuffer"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/readAsBinaryString) *)
  val readAsBinaryString: 'tags this -> blob:Blob.t -> unit [@@js.call "readAsBinaryString"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/readAsDataURL) *)
  val readAsDataURL: 'tags this -> blob:Blob.t -> unit [@@js.call "readAsDataURL"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/FileReader/readAsText) *)
  val readAsText: 'tags this -> blob:Blob.t -> ?encoding:string -> unit -> unit [@@js.call "readAsText"]
  val get_EMPTY: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "EMPTY"]
  val get_LOADING: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "LOADING"]
  val get_DONE: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "DONE"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'FileReaderEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'FileReaderEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  val empty: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "EMPTY"]
  val loading: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "LOADING"]
  val done_: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "DONE"]
end
module FileReaderEventMap : sig
  type t = [`FileReaderEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`FileReaderEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`FileReaderEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `FileReaderEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_abort: 'tags this -> FileReader.t ProgressEvent.t [@@js.get "abort"]
  val set_abort: 'tags this -> FileReader.t ProgressEvent.t -> unit [@@js.set "abort"]
  val get_error: 'tags this -> FileReader.t ProgressEvent.t [@@js.get "error"]
  val set_error: 'tags this -> FileReader.t ProgressEvent.t -> unit [@@js.set "error"]
  val get_load: 'tags this -> FileReader.t ProgressEvent.t [@@js.get "load"]
  val set_load: 'tags this -> FileReader.t ProgressEvent.t -> unit [@@js.set "load"]
  val get_loadend: 'tags this -> FileReader.t ProgressEvent.t [@@js.get "loadend"]
  val set_loadend: 'tags this -> FileReader.t ProgressEvent.t -> unit [@@js.set "loadend"]
  val get_loadstart: 'tags this -> FileReader.t ProgressEvent.t [@@js.get "loadstart"]
  val set_loadstart: 'tags this -> FileReader.t ProgressEvent.t -> unit [@@js.set "loadstart"]
  val get_progress: 'tags this -> FileReader.t ProgressEvent.t [@@js.get "progress"]
  val set_progress: 'tags this -> FileReader.t ProgressEvent.t -> unit [@@js.set "progress"]
  val create: abort:FileReader.t ProgressEvent.t -> error:FileReader.t ProgressEvent.t -> load:FileReader.t ProgressEvent.t -> loadend:FileReader.t ProgressEvent.t -> loadstart:FileReader.t ProgressEvent.t -> progress:FileReader.t ProgressEvent.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module EventSourceEventMap : sig
  type t = [`EventSourceEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventSourceEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventSourceEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EventSourceEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_error: 'tags this -> Event.t [@@js.get "error"]
  val set_error: 'tags this -> Event.t -> unit [@@js.set "error"]
  val get_message: 'tags this -> MessageEvent.t_0 [@@js.get "message"]
  val set_message: 'tags this -> MessageEvent.t_0 -> unit [@@js.set "message"]
  val get_open: 'tags this -> Event.t [@@js.get "open"]
  val set_open: 'tags this -> Event.t -> unit [@@js.set "open"]
  val create: error:Event.t -> message:MessageEvent.t_0 -> open_:(Event.t[@js "open"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module EventSourceInit : sig
  type t = [`EventSourceInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventSourceInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventSourceInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EventSourceInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_withCredentials: 'tags this -> bool option [@@js.get "withCredentials"]
  val set_withCredentials: 'tags this -> bool -> unit [@@js.set "withCredentials"]
  val create: ?withCredentials:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventSource) *)
module[@js.scope "EventSource"] EventSource : sig
  type t = [`EventSource | `EventTarget] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EventSource | `EventTarget]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EventSource | `EventTarget]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EventSource ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventSource/error_event) *)
  val get_onerror: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventSource/error_event) *)
  val set_onerror: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventSource/message_event) *)
  val get_onmessage: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option [@@js.get "onmessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventSource/message_event) *)
  val set_onmessage: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit [@@js.set "onmessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventSource/open_event) *)
  val get_onopen: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onopen"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventSource/open_event) *)
  val set_onopen: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onopen"]
  
  (**
    Returns the state of this EventSource object's connection. It can have the values described below.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventSource/readyState)
  *)
  val get_readyState: 'tags this -> float [@@js.get "readyState"]
  
  (**
    Returns the URL providing the event stream.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventSource/url)
  *)
  val get_url: 'tags this -> string [@@js.get "url"]
  
  (**
    Returns true if the credentials mode for connection requests to the URL providing the event stream is set to "include", and false otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventSource/withCredentials)
  *)
  val get_withCredentials: 'tags this -> bool [@@js.get "withCredentials"]
  
  (**
    Aborts any instances of the fetch algorithm started for this EventSource object, and sets the readyState attribute to CLOSED.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventSource/close)
  *)
  val close: 'tags this -> unit [@@js.call "close"]
  val get_CONNECTING: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "CONNECTING"]
  val get_OPEN: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "OPEN"]
  val get_CLOSED: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "CLOSED"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'EventSourceEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:(this:t -> event:MessageEvent.t_0 -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener'': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'EventSourceEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:(this:t -> event:MessageEvent.t_0 -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener'': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: url:([`U1 of string | `U2 of URL.t] [@js.union]) -> ?eventSourceInitDict:EventSourceInit.t -> unit -> t [@@js.create]
  val connecting: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "CONNECTING"]
  val open_: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "OPEN"]
  val closed: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "CLOSED"]
end

(**
  Provides access to the properties of <view> elements, as well as methods to manipulate them.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGViewElement)
*)
module[@js.scope "SVGViewElement"] SVGViewElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFitToViewBox | `SVGViewElement | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFitToViewBox | `SVGViewElement | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFitToViewBox | `SVGViewElement | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGViewElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Corresponds to the <title> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGTitleElement)
*)
module[@js.scope "SVGTitleElement"] SVGTitleElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGTitleElement | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGTitleElement | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGTitleElement | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGTitleElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Corresponds to the <textPath> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGTextPathElement)
*)
module[@js.scope "SVGTextPathElement"] SVGTextPathElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGraphicsElement | `SVGTests | `SVGTextContentElement | `SVGTextPathElement | `SVGURIReference | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGraphicsElement | `SVGTests | `SVGTextContentElement | `SVGTextPathElement | `SVGURIReference | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGraphicsElement | `SVGTests | `SVGTextContentElement | `SVGTextPathElement | `SVGURIReference | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGTextPathElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_method: 'tags this -> SVGAnimatedEnumeration.t [@@js.get "method"]
  val get_spacing: 'tags this -> SVGAnimatedEnumeration.t [@@js.get "spacing"]
  val get_startOffset: 'tags this -> SVGAnimatedLength.t [@@js.get "startOffset"]
  val get_TEXTPATH_METHODTYPE_UNKNOWN: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "TEXTPATH_METHODTYPE_UNKNOWN"]
  val get_TEXTPATH_METHODTYPE_ALIGN: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "TEXTPATH_METHODTYPE_ALIGN"]
  val get_TEXTPATH_METHODTYPE_STRETCH: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "TEXTPATH_METHODTYPE_STRETCH"]
  val get_TEXTPATH_SPACINGTYPE_UNKNOWN: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "TEXTPATH_SPACINGTYPE_UNKNOWN"]
  val get_TEXTPATH_SPACINGTYPE_AUTO: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "TEXTPATH_SPACINGTYPE_AUTO"]
  val get_TEXTPATH_SPACINGTYPE_EXACT: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "TEXTPATH_SPACINGTYPE_EXACT"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  val textpath_methodtype_unknown: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "TEXTPATH_METHODTYPE_UNKNOWN"]
  val textpath_methodtype_align: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "TEXTPATH_METHODTYPE_ALIGN"]
  val textpath_methodtype_stretch: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "TEXTPATH_METHODTYPE_STRETCH"]
  val textpath_spacingtype_unknown: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "TEXTPATH_SPACINGTYPE_UNKNOWN"]
  val textpath_spacingtype_auto: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "TEXTPATH_SPACINGTYPE_AUTO"]
  val textpath_spacingtype_exact: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "TEXTPATH_SPACINGTYPE_EXACT"]
end

(**
  A <tspan> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGTSpanElement)
*)
module[@js.scope "SVGTSpanElement"] SVGTSpanElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGraphicsElement | `SVGTSpanElement | `SVGTests | `SVGTextContentElement | `SVGTextPositioningElement | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGraphicsElement | `SVGTSpanElement | `SVGTests | `SVGTextContentElement | `SVGTextPositioningElement | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGraphicsElement | `SVGTSpanElement | `SVGTests | `SVGTextContentElement | `SVGTextPositioningElement | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGTSpanElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Corresponds to the <symbol> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGSymbolElement)
*)
module[@js.scope "SVGSymbolElement"] SVGSymbolElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFitToViewBox | `SVGSymbolElement | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFitToViewBox | `SVGSymbolElement | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFitToViewBox | `SVGSymbolElement | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGSymbolElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Corresponds to the <switch> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGSwitchElement)
*)
module[@js.scope "SVGSwitchElement"] SVGSwitchElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGraphicsElement | `SVGSwitchElement | `SVGTests | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGraphicsElement | `SVGSwitchElement | `SVGTests | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGraphicsElement | `SVGSwitchElement | `SVGTests | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGSwitchElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Corresponds to the SVG <style> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGStyleElement)
*)
module[@js.scope "SVGStyleElement"] SVGStyleElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `LinkStyle | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGStyleElement | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `LinkStyle | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGStyleElement | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `LinkStyle | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGStyleElement | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGStyleElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_disabled: 'tags this -> bool [@@js.get "disabled"]
  val set_disabled: 'tags this -> bool -> unit [@@js.set "disabled"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGStyleElement/media) *)
  val get_media: 'tags this -> string [@@js.get "media"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGStyleElement/media) *)
  val set_media: 'tags this -> string -> unit [@@js.set "media"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGStyleElement/title) *)
  val get_title: 'tags this -> string [@@js.get "title"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGStyleElement/title) *)
  val set_title: 'tags this -> string -> unit [@@js.set "title"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGStyleElement/type) *)
  val get_type: 'tags this -> string [@@js.get "type"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGStyleElement/type) *)
  val set_type: 'tags this -> string -> unit [@@js.set "type"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Corresponds to the <stop> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGStopElement)
*)
module[@js.scope "SVGStopElement"] SVGStopElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGStopElement | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGStopElement | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGStopElement | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGStopElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_offset: 'tags this -> SVGAnimatedNumber.t [@@js.get "offset"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGAnimationElement) *)
module[@js.scope "SVGAnimationElement"] SVGAnimationElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGAnimationElement | `SVGElement | `SVGTests | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGAnimationElement | `SVGElement | `SVGTests | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGAnimationElement | `SVGElement | `SVGTests | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGAnimationElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGAnimationElement/targetElement) *)
  val get_targetElement: 'tags this -> SVGElement.t option [@@js.get "targetElement"]
  val beginElement: 'tags this -> unit [@@js.call "beginElement"]
  val beginElementAt: 'tags this -> offset:float -> unit [@@js.call "beginElementAt"]
  val endElement: 'tags this -> unit [@@js.call "endElement"]
  val endElementAt: 'tags this -> offset:float -> unit [@@js.call "endElementAt"]
  val getCurrentTime: 'tags this -> float [@@js.call "getCurrentTime"]
  val getSimpleDuration: 'tags this -> float [@@js.call "getSimpleDuration"]
  val getStartTime: 'tags this -> float [@@js.call "getStartTime"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGSetElement) *)
module[@js.scope "SVGSetElement"] SVGSetElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGAnimationElement | `SVGElement | `SVGSetElement | `SVGTests | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGAnimationElement | `SVGElement | `SVGSetElement | `SVGTests | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGAnimationElement | `SVGElement | `SVGSetElement | `SVGTests | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGSetElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  The SVGGradient interface is a base interface used by SVGLinearGradientElement and SVGRadialGradientElement.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGGradientElement)
*)
module[@js.scope "SVGGradientElement"] SVGGradientElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGradientElement | `SVGURIReference | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGradientElement | `SVGURIReference | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGradientElement | `SVGURIReference | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGGradientElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_gradientTransform: 'tags this -> SVGAnimatedTransformList.t [@@js.get "gradientTransform"]
  val get_gradientUnits: 'tags this -> SVGAnimatedEnumeration.t [@@js.get "gradientUnits"]
  val get_spreadMethod: 'tags this -> SVGAnimatedEnumeration.t [@@js.get "spreadMethod"]
  val get_SVG_SPREADMETHOD_UNKNOWN: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "SVG_SPREADMETHOD_UNKNOWN"]
  val get_SVG_SPREADMETHOD_PAD: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SVG_SPREADMETHOD_PAD"]
  val get_SVG_SPREADMETHOD_REFLECT: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "SVG_SPREADMETHOD_REFLECT"]
  val get_SVG_SPREADMETHOD_REPEAT: 'tags this -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "SVG_SPREADMETHOD_REPEAT"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  val svg_spreadmethod_unknown: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "SVG_SPREADMETHOD_UNKNOWN"]
  val svg_spreadmethod_pad: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SVG_SPREADMETHOD_PAD"]
  val svg_spreadmethod_reflect: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "SVG_SPREADMETHOD_REFLECT"]
  val svg_spreadmethod_repeat: unit -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "SVG_SPREADMETHOD_REPEAT"]
end

(**
  Corresponds to the <RadialGradient> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGRadialGradientElement)
*)
module[@js.scope "SVGRadialGradientElement"] SVGRadialGradientElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGradientElement | `SVGRadialGradientElement | `SVGURIReference | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGradientElement | `SVGRadialGradientElement | `SVGURIReference | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGradientElement | `SVGRadialGradientElement | `SVGURIReference | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGRadialGradientElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_cx: 'tags this -> SVGAnimatedLength.t [@@js.get "cx"]
  val get_cy: 'tags this -> SVGAnimatedLength.t [@@js.get "cy"]
  val get_fr: 'tags this -> SVGAnimatedLength.t [@@js.get "fr"]
  val get_fx: 'tags this -> SVGAnimatedLength.t [@@js.get "fx"]
  val get_fy: 'tags this -> SVGAnimatedLength.t [@@js.get "fy"]
  val get_r: 'tags this -> SVGAnimatedLength.t [@@js.get "r"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Corresponds to the <pattern> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGPatternElement)
*)
module[@js.scope "SVGPatternElement"] SVGPatternElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFitToViewBox | `SVGPatternElement | `SVGURIReference | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFitToViewBox | `SVGPatternElement | `SVGURIReference | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFitToViewBox | `SVGPatternElement | `SVGURIReference | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGPatternElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_height: 'tags this -> SVGAnimatedLength.t [@@js.get "height"]
  val get_patternContentUnits: 'tags this -> SVGAnimatedEnumeration.t [@@js.get "patternContentUnits"]
  val get_patternTransform: 'tags this -> SVGAnimatedTransformList.t [@@js.get "patternTransform"]
  val get_patternUnits: 'tags this -> SVGAnimatedEnumeration.t [@@js.get "patternUnits"]
  val get_width: 'tags this -> SVGAnimatedLength.t [@@js.get "width"]
  val get_x: 'tags this -> SVGAnimatedLength.t [@@js.get "x"]
  val get_y: 'tags this -> SVGAnimatedLength.t [@@js.get "y"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Corresponds to the <metadata> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGMetadataElement)
*)
module[@js.scope "SVGMetadataElement"] SVGMetadataElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGMetadataElement | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGMetadataElement | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGMetadataElement | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGMetadataElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides access to the properties of <mask> elements, as well as methods to manipulate them.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGMaskElement)
*)
module[@js.scope "SVGMaskElement"] SVGMaskElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGMaskElement | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGMaskElement | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGMaskElement | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGMaskElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGMaskElement/height) *)
  val get_height: 'tags this -> SVGAnimatedLength.t [@@js.get "height"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGMaskElement/maskContentUnits) *)
  val get_maskContentUnits: 'tags this -> SVGAnimatedEnumeration.t [@@js.get "maskContentUnits"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGMaskElement/maskUnits) *)
  val get_maskUnits: 'tags this -> SVGAnimatedEnumeration.t [@@js.get "maskUnits"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGMaskElement/width) *)
  val get_width: 'tags this -> SVGAnimatedLength.t [@@js.get "width"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGMaskElement/x) *)
  val get_x: 'tags this -> SVGAnimatedLength.t [@@js.get "x"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGMaskElement/y) *)
  val get_y: 'tags this -> SVGAnimatedLength.t [@@js.get "y"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Used for attributes of basic type <angle> which can be animated.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGAnimatedAngle)
*)
module[@js.scope "SVGAnimatedAngle"] SVGAnimatedAngle : sig
  type t = [`SVGAnimatedAngle] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SVGAnimatedAngle]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SVGAnimatedAngle]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGAnimatedAngle ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_animVal: 'tags this -> SVGAngle.t [@@js.get "animVal"]
  val get_baseVal: 'tags this -> SVGAngle.t [@@js.get "baseVal"]
  val create: animVal:SVGAngle.t -> baseVal:SVGAngle.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement) *)
module[@js.scope "SVGMarkerElement"] SVGMarkerElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFitToViewBox | `SVGMarkerElement | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFitToViewBox | `SVGMarkerElement | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFitToViewBox | `SVGMarkerElement | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGMarkerElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/markerHeight) *)
  val get_markerHeight: 'tags this -> SVGAnimatedLength.t [@@js.get "markerHeight"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/markerUnits) *)
  val get_markerUnits: 'tags this -> SVGAnimatedEnumeration.t [@@js.get "markerUnits"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/markerWidth) *)
  val get_markerWidth: 'tags this -> SVGAnimatedLength.t [@@js.get "markerWidth"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/orientAngle) *)
  val get_orientAngle: 'tags this -> SVGAnimatedAngle.t [@@js.get "orientAngle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/orientType) *)
  val get_orientType: 'tags this -> SVGAnimatedEnumeration.t [@@js.get "orientType"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/refX) *)
  val get_refX: 'tags this -> SVGAnimatedLength.t [@@js.get "refX"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/refY) *)
  val get_refY: 'tags this -> SVGAnimatedLength.t [@@js.get "refY"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/setOrientToAngle) *)
  val setOrientToAngle: 'tags this -> angle:SVGAngle.t -> unit [@@js.call "setOrientToAngle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/setOrientToAuto) *)
  val setOrientToAuto: 'tags this -> unit [@@js.call "setOrientToAuto"]
  val get_SVG_MARKERUNITS_UNKNOWN: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "SVG_MARKERUNITS_UNKNOWN"]
  val get_SVG_MARKERUNITS_USERSPACEONUSE: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SVG_MARKERUNITS_USERSPACEONUSE"]
  val get_SVG_MARKERUNITS_STROKEWIDTH: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "SVG_MARKERUNITS_STROKEWIDTH"]
  val get_SVG_MARKER_ORIENT_UNKNOWN: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "SVG_MARKER_ORIENT_UNKNOWN"]
  val get_SVG_MARKER_ORIENT_AUTO: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SVG_MARKER_ORIENT_AUTO"]
  val get_SVG_MARKER_ORIENT_ANGLE: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "SVG_MARKER_ORIENT_ANGLE"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  val svg_markerunits_unknown: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "SVG_MARKERUNITS_UNKNOWN"]
  val svg_markerunits_userspaceonuse: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SVG_MARKERUNITS_USERSPACEONUSE"]
  val svg_markerunits_strokewidth: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "SVG_MARKERUNITS_STROKEWIDTH"]
  val svg_marker_orient_unknown: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "SVG_MARKER_ORIENT_UNKNOWN"]
  val svg_marker_orient_auto: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SVG_MARKER_ORIENT_AUTO"]
  val svg_marker_orient_angle: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "SVG_MARKER_ORIENT_ANGLE"]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGMPathElement) *)
module[@js.scope "SVGMPathElement"] SVGMPathElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGMPathElement | `SVGURIReference | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGMPathElement | `SVGURIReference | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGMPathElement | `SVGURIReference | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGMPathElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Corresponds to the <linearGradient> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGLinearGradientElement)
*)
module[@js.scope "SVGLinearGradientElement"] SVGLinearGradientElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGradientElement | `SVGLinearGradientElement | `SVGURIReference | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGradientElement | `SVGLinearGradientElement | `SVGURIReference | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGradientElement | `SVGLinearGradientElement | `SVGURIReference | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGLinearGradientElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_x1: 'tags this -> SVGAnimatedLength.t [@@js.get "x1"]
  val get_x2: 'tags this -> SVGAnimatedLength.t [@@js.get "x2"]
  val get_y1: 'tags this -> SVGAnimatedLength.t [@@js.get "y1"]
  val get_y2: 'tags this -> SVGAnimatedLength.t [@@js.get "y2"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Corresponds to the <g> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGGElement)
*)
module[@js.scope "SVGGElement"] SVGGElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGElement | `SVGGraphicsElement | `SVGTests | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGElement | `SVGGraphicsElement | `SVGTests | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGGElement | `SVGGraphicsElement | `SVGTests | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGGElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides access to the properties of <foreignObject> elements, as well as methods to manipulate them.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGForeignObjectElement)
*)
module[@js.scope "SVGForeignObjectElement"] SVGForeignObjectElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGForeignObjectElement | `SVGGraphicsElement | `SVGTests | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGForeignObjectElement | `SVGGraphicsElement | `SVGTests | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGForeignObjectElement | `SVGGraphicsElement | `SVGTests | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGForeignObjectElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_height: 'tags this -> SVGAnimatedLength.t [@@js.get "height"]
  val get_width: 'tags this -> SVGAnimatedLength.t [@@js.get "width"]
  val get_x: 'tags this -> SVGAnimatedLength.t [@@js.get "x"]
  val get_y: 'tags this -> SVGAnimatedLength.t [@@js.get "y"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides access to the properties of <filter> elements, as well as methods to manipulate them.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGFilterElement)
*)
module[@js.scope "SVGFilterElement"] SVGFilterElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFilterElement | `SVGURIReference | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFilterElement | `SVGURIReference | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFilterElement | `SVGURIReference | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGFilterElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_filterUnits: 'tags this -> SVGAnimatedEnumeration.t [@@js.get "filterUnits"]
  val get_height: 'tags this -> SVGAnimatedLength.t [@@js.get "height"]
  val get_primitiveUnits: 'tags this -> SVGAnimatedEnumeration.t [@@js.get "primitiveUnits"]
  val get_width: 'tags this -> SVGAnimatedLength.t [@@js.get "width"]
  val get_x: 'tags this -> SVGAnimatedLength.t [@@js.get "x"]
  val get_y: 'tags this -> SVGAnimatedLength.t [@@js.get "y"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Used for attributes of basic type <integer> which can be animated.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGAnimatedInteger)
*)
module[@js.scope "SVGAnimatedInteger"] SVGAnimatedInteger : sig
  type t = [`SVGAnimatedInteger] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SVGAnimatedInteger]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SVGAnimatedInteger]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGAnimatedInteger ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_animVal: 'tags this -> float [@@js.get "animVal"]
  val get_baseVal: 'tags this -> float [@@js.get "baseVal"]
  val set_baseVal: 'tags this -> float -> unit [@@js.set "baseVal"]
  val create: animVal:float -> baseVal:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end
module SVGFilterPrimitiveStandardAttributes : sig
  type t = [`SVGFilterPrimitiveStandardAttributes] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SVGFilterPrimitiveStandardAttributes]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SVGFilterPrimitiveStandardAttributes]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGFilterPrimitiveStandardAttributes ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_height: 'tags this -> SVGAnimatedLength.t [@@js.get "height"]
  val get_result: 'tags this -> SVGAnimatedString.t [@@js.get "result"]
  val get_width: 'tags this -> SVGAnimatedLength.t [@@js.get "width"]
  val get_x: 'tags this -> SVGAnimatedLength.t [@@js.get "x"]
  val get_y: 'tags this -> SVGAnimatedLength.t [@@js.get "y"]
  val create: height:SVGAnimatedLength.t -> result:SVGAnimatedString.t -> width:SVGAnimatedLength.t -> x:SVGAnimatedLength.t -> y:SVGAnimatedLength.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Corresponds to the <feTurbulence> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGFETurbulenceElement)
*)
module[@js.scope "SVGFETurbulenceElement"] SVGFETurbulenceElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFETurbulenceElement | `SVGFilterPrimitiveStandardAttributes | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFETurbulenceElement | `SVGFilterPrimitiveStandardAttributes | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFETurbulenceElement | `SVGFilterPrimitiveStandardAttributes | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGFETurbulenceElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_baseFrequencyX: 'tags this -> SVGAnimatedNumber.t [@@js.get "baseFrequencyX"]
  val get_baseFrequencyY: 'tags this -> SVGAnimatedNumber.t [@@js.get "baseFrequencyY"]
  val get_numOctaves: 'tags this -> SVGAnimatedInteger.t [@@js.get "numOctaves"]
  val get_seed: 'tags this -> SVGAnimatedNumber.t [@@js.get "seed"]
  val get_stitchTiles: 'tags this -> SVGAnimatedEnumeration.t [@@js.get "stitchTiles"]
  val get_type: 'tags this -> SVGAnimatedEnumeration.t [@@js.get "type"]
  val get_SVG_TURBULENCE_TYPE_UNKNOWN: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "SVG_TURBULENCE_TYPE_UNKNOWN"]
  val get_SVG_TURBULENCE_TYPE_FRACTALNOISE: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SVG_TURBULENCE_TYPE_FRACTALNOISE"]
  val get_SVG_TURBULENCE_TYPE_TURBULENCE: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "SVG_TURBULENCE_TYPE_TURBULENCE"]
  val get_SVG_STITCHTYPE_UNKNOWN: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "SVG_STITCHTYPE_UNKNOWN"]
  val get_SVG_STITCHTYPE_STITCH: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SVG_STITCHTYPE_STITCH"]
  val get_SVG_STITCHTYPE_NOSTITCH: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "SVG_STITCHTYPE_NOSTITCH"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  val svg_turbulence_type_unknown: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "SVG_TURBULENCE_TYPE_UNKNOWN"]
  val svg_turbulence_type_fractalnoise: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SVG_TURBULENCE_TYPE_FRACTALNOISE"]
  val svg_turbulence_type_turbulence: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "SVG_TURBULENCE_TYPE_TURBULENCE"]
  val svg_stitchtype_unknown: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "SVG_STITCHTYPE_UNKNOWN"]
  val svg_stitchtype_stitch: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SVG_STITCHTYPE_STITCH"]
  val svg_stitchtype_nostitch: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "SVG_STITCHTYPE_NOSTITCH"]
end

(**
  Corresponds to the <feTile> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGFETileElement)
*)
module[@js.scope "SVGFETileElement"] SVGFETileElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFETileElement | `SVGFilterPrimitiveStandardAttributes | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFETileElement | `SVGFilterPrimitiveStandardAttributes | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFETileElement | `SVGFilterPrimitiveStandardAttributes | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGFETileElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_in1: 'tags this -> SVGAnimatedString.t [@@js.get "in1"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Corresponds to the <feSpotLight> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGFESpotLightElement)
*)
module[@js.scope "SVGFESpotLightElement"] SVGFESpotLightElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFESpotLightElement | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFESpotLightElement | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFESpotLightElement | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGFESpotLightElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_limitingConeAngle: 'tags this -> SVGAnimatedNumber.t [@@js.get "limitingConeAngle"]
  val get_pointsAtX: 'tags this -> SVGAnimatedNumber.t [@@js.get "pointsAtX"]
  val get_pointsAtY: 'tags this -> SVGAnimatedNumber.t [@@js.get "pointsAtY"]
  val get_pointsAtZ: 'tags this -> SVGAnimatedNumber.t [@@js.get "pointsAtZ"]
  val get_specularExponent: 'tags this -> SVGAnimatedNumber.t [@@js.get "specularExponent"]
  val get_x: 'tags this -> SVGAnimatedNumber.t [@@js.get "x"]
  val get_y: 'tags this -> SVGAnimatedNumber.t [@@js.get "y"]
  val get_z: 'tags this -> SVGAnimatedNumber.t [@@js.get "z"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Corresponds to the <feSpecularLighting> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGFESpecularLightingElement)
*)
module[@js.scope "SVGFESpecularLightingElement"] SVGFESpecularLightingElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFESpecularLightingElement | `SVGFilterPrimitiveStandardAttributes | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFESpecularLightingElement | `SVGFilterPrimitiveStandardAttributes | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFESpecularLightingElement | `SVGFilterPrimitiveStandardAttributes | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGFESpecularLightingElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_in1: 'tags this -> SVGAnimatedString.t [@@js.get "in1"]
  val get_kernelUnitLengthX: 'tags this -> SVGAnimatedNumber.t [@@js.get "kernelUnitLengthX"]
  val get_kernelUnitLengthY: 'tags this -> SVGAnimatedNumber.t [@@js.get "kernelUnitLengthY"]
  val get_specularConstant: 'tags this -> SVGAnimatedNumber.t [@@js.get "specularConstant"]
  val get_specularExponent: 'tags this -> SVGAnimatedNumber.t [@@js.get "specularExponent"]
  val get_surfaceScale: 'tags this -> SVGAnimatedNumber.t [@@js.get "surfaceScale"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Corresponds to the <fePointLight> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGFEPointLightElement)
*)
module[@js.scope "SVGFEPointLightElement"] SVGFEPointLightElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEPointLightElement | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEPointLightElement | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEPointLightElement | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGFEPointLightElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_x: 'tags this -> SVGAnimatedNumber.t [@@js.get "x"]
  val get_y: 'tags this -> SVGAnimatedNumber.t [@@js.get "y"]
  val get_z: 'tags this -> SVGAnimatedNumber.t [@@js.get "z"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Corresponds to the <feOffset> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGFEOffsetElement)
*)
module[@js.scope "SVGFEOffsetElement"] SVGFEOffsetElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEOffsetElement | `SVGFilterPrimitiveStandardAttributes | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEOffsetElement | `SVGFilterPrimitiveStandardAttributes | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEOffsetElement | `SVGFilterPrimitiveStandardAttributes | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGFEOffsetElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_dx: 'tags this -> SVGAnimatedNumber.t [@@js.get "dx"]
  val get_dy: 'tags this -> SVGAnimatedNumber.t [@@js.get "dy"]
  val get_in1: 'tags this -> SVGAnimatedString.t [@@js.get "in1"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Corresponds to the <feMorphology> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGFEMorphologyElement)
*)
module[@js.scope "SVGFEMorphologyElement"] SVGFEMorphologyElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEMorphologyElement | `SVGFilterPrimitiveStandardAttributes | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEMorphologyElement | `SVGFilterPrimitiveStandardAttributes | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEMorphologyElement | `SVGFilterPrimitiveStandardAttributes | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGFEMorphologyElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_in1: 'tags this -> SVGAnimatedString.t [@@js.get "in1"]
  val get_operator: 'tags this -> SVGAnimatedEnumeration.t [@@js.get "operator"]
  val get_radiusX: 'tags this -> SVGAnimatedNumber.t [@@js.get "radiusX"]
  val get_radiusY: 'tags this -> SVGAnimatedNumber.t [@@js.get "radiusY"]
  val get_SVG_MORPHOLOGY_OPERATOR_UNKNOWN: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "SVG_MORPHOLOGY_OPERATOR_UNKNOWN"]
  val get_SVG_MORPHOLOGY_OPERATOR_ERODE: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SVG_MORPHOLOGY_OPERATOR_ERODE"]
  val get_SVG_MORPHOLOGY_OPERATOR_DILATE: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "SVG_MORPHOLOGY_OPERATOR_DILATE"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  val svg_morphology_operator_unknown: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "SVG_MORPHOLOGY_OPERATOR_UNKNOWN"]
  val svg_morphology_operator_erode: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SVG_MORPHOLOGY_OPERATOR_ERODE"]
  val svg_morphology_operator_dilate: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "SVG_MORPHOLOGY_OPERATOR_DILATE"]
end

(**
  Corresponds to the <feMergeNode> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGFEMergeNodeElement)
*)
module[@js.scope "SVGFEMergeNodeElement"] SVGFEMergeNodeElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEMergeNodeElement | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEMergeNodeElement | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEMergeNodeElement | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGFEMergeNodeElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_in1: 'tags this -> SVGAnimatedString.t [@@js.get "in1"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Corresponds to the <feMerge> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGFEMergeElement)
*)
module[@js.scope "SVGFEMergeElement"] SVGFEMergeElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEMergeElement | `SVGFilterPrimitiveStandardAttributes | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEMergeElement | `SVGFilterPrimitiveStandardAttributes | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEMergeElement | `SVGFilterPrimitiveStandardAttributes | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGFEMergeElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Corresponds to the <feImage> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGFEImageElement)
*)
module[@js.scope "SVGFEImageElement"] SVGFEImageElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEImageElement | `SVGFilterPrimitiveStandardAttributes | `SVGURIReference | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEImageElement | `SVGFilterPrimitiveStandardAttributes | `SVGURIReference | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEImageElement | `SVGFilterPrimitiveStandardAttributes | `SVGURIReference | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGFEImageElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_preserveAspectRatio: 'tags this -> SVGAnimatedPreserveAspectRatio.t [@@js.get "preserveAspectRatio"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Corresponds to the <feGaussianBlur> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGFEGaussianBlurElement)
*)
module[@js.scope "SVGFEGaussianBlurElement"] SVGFEGaussianBlurElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEGaussianBlurElement | `SVGFilterPrimitiveStandardAttributes | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEGaussianBlurElement | `SVGFilterPrimitiveStandardAttributes | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEGaussianBlurElement | `SVGFilterPrimitiveStandardAttributes | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGFEGaussianBlurElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_in1: 'tags this -> SVGAnimatedString.t [@@js.get "in1"]
  val get_stdDeviationX: 'tags this -> SVGAnimatedNumber.t [@@js.get "stdDeviationX"]
  val get_stdDeviationY: 'tags this -> SVGAnimatedNumber.t [@@js.get "stdDeviationY"]
  val setStdDeviation: 'tags this -> stdDeviationX:float -> stdDeviationY:float -> unit [@@js.call "setStdDeviation"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  A base interface used by the component transfer function interfaces.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGComponentTransferFunctionElement)
*)
module[@js.scope "SVGComponentTransferFunctionElement"] SVGComponentTransferFunctionElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGComponentTransferFunctionElement | `SVGElement | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGComponentTransferFunctionElement | `SVGElement | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGComponentTransferFunctionElement | `SVGElement | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGComponentTransferFunctionElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_amplitude: 'tags this -> SVGAnimatedNumber.t [@@js.get "amplitude"]
  val get_exponent: 'tags this -> SVGAnimatedNumber.t [@@js.get "exponent"]
  val get_intercept: 'tags this -> SVGAnimatedNumber.t [@@js.get "intercept"]
  val get_offset: 'tags this -> SVGAnimatedNumber.t [@@js.get "offset"]
  val get_slope: 'tags this -> SVGAnimatedNumber.t [@@js.get "slope"]
  val get_tableValues: 'tags this -> SVGAnimatedNumberList.t [@@js.get "tableValues"]
  val get_type: 'tags this -> SVGAnimatedEnumeration.t [@@js.get "type"]
  val get_SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN"]
  val get_SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY"]
  val get_SVG_FECOMPONENTTRANSFER_TYPE_TABLE: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "SVG_FECOMPONENTTRANSFER_TYPE_TABLE"]
  val get_SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: 'tags this -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE"]
  val get_SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: 'tags this -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "SVG_FECOMPONENTTRANSFER_TYPE_LINEAR"]
  val get_SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: 'tags this -> ([`L_n_5[@js 5]] [@js.enum]) [@@js.get "SVG_FECOMPONENTTRANSFER_TYPE_GAMMA"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  val svg_fecomponenttransfer_type_unknown: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN"]
  val svg_fecomponenttransfer_type_identity: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY"]
  val svg_fecomponenttransfer_type_table: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "SVG_FECOMPONENTTRANSFER_TYPE_TABLE"]
  val svg_fecomponenttransfer_type_discrete: unit -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE"]
  val svg_fecomponenttransfer_type_linear: unit -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "SVG_FECOMPONENTTRANSFER_TYPE_LINEAR"]
  val svg_fecomponenttransfer_type_gamma: unit -> ([`L_n_5[@js 5]] [@js.enum]) [@@js.get "SVG_FECOMPONENTTRANSFER_TYPE_GAMMA"]
end

(**
  Corresponds to the <feFuncR> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGFEFuncRElement)
*)
module[@js.scope "SVGFEFuncRElement"] SVGFEFuncRElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGComponentTransferFunctionElement | `SVGElement | `SVGFEFuncRElement | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGComponentTransferFunctionElement | `SVGElement | `SVGFEFuncRElement | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGComponentTransferFunctionElement | `SVGElement | `SVGFEFuncRElement | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGFEFuncRElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Corresponds to the <feFuncG> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGFEFuncGElement)
*)
module[@js.scope "SVGFEFuncGElement"] SVGFEFuncGElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGComponentTransferFunctionElement | `SVGElement | `SVGFEFuncGElement | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGComponentTransferFunctionElement | `SVGElement | `SVGFEFuncGElement | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGComponentTransferFunctionElement | `SVGElement | `SVGFEFuncGElement | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGFEFuncGElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Corresponds to the <feFuncB> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGFEFuncBElement)
*)
module[@js.scope "SVGFEFuncBElement"] SVGFEFuncBElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGComponentTransferFunctionElement | `SVGElement | `SVGFEFuncBElement | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGComponentTransferFunctionElement | `SVGElement | `SVGFEFuncBElement | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGComponentTransferFunctionElement | `SVGElement | `SVGFEFuncBElement | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGFEFuncBElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Corresponds to the <feFuncA> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGFEFuncAElement)
*)
module[@js.scope "SVGFEFuncAElement"] SVGFEFuncAElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGComponentTransferFunctionElement | `SVGElement | `SVGFEFuncAElement | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGComponentTransferFunctionElement | `SVGElement | `SVGFEFuncAElement | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGComponentTransferFunctionElement | `SVGElement | `SVGFEFuncAElement | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGFEFuncAElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Corresponds to the <feFlood> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGFEFloodElement)
*)
module[@js.scope "SVGFEFloodElement"] SVGFEFloodElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEFloodElement | `SVGFilterPrimitiveStandardAttributes | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEFloodElement | `SVGFilterPrimitiveStandardAttributes | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEFloodElement | `SVGFilterPrimitiveStandardAttributes | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGFEFloodElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGFEDropShadowElement) *)
module[@js.scope "SVGFEDropShadowElement"] SVGFEDropShadowElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEDropShadowElement | `SVGFilterPrimitiveStandardAttributes | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEDropShadowElement | `SVGFilterPrimitiveStandardAttributes | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEDropShadowElement | `SVGFilterPrimitiveStandardAttributes | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGFEDropShadowElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_dx: 'tags this -> SVGAnimatedNumber.t [@@js.get "dx"]
  val get_dy: 'tags this -> SVGAnimatedNumber.t [@@js.get "dy"]
  val get_in1: 'tags this -> SVGAnimatedString.t [@@js.get "in1"]
  val get_stdDeviationX: 'tags this -> SVGAnimatedNumber.t [@@js.get "stdDeviationX"]
  val get_stdDeviationY: 'tags this -> SVGAnimatedNumber.t [@@js.get "stdDeviationY"]
  val setStdDeviation: 'tags this -> stdDeviationX:float -> stdDeviationY:float -> unit [@@js.call "setStdDeviation"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Corresponds to the <feDistantLight> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGFEDistantLightElement)
*)
module[@js.scope "SVGFEDistantLightElement"] SVGFEDistantLightElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEDistantLightElement | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEDistantLightElement | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEDistantLightElement | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGFEDistantLightElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_azimuth: 'tags this -> SVGAnimatedNumber.t [@@js.get "azimuth"]
  val get_elevation: 'tags this -> SVGAnimatedNumber.t [@@js.get "elevation"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Corresponds to the <feDisplacementMap> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGFEDisplacementMapElement)
*)
module[@js.scope "SVGFEDisplacementMapElement"] SVGFEDisplacementMapElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEDisplacementMapElement | `SVGFilterPrimitiveStandardAttributes | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEDisplacementMapElement | `SVGFilterPrimitiveStandardAttributes | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEDisplacementMapElement | `SVGFilterPrimitiveStandardAttributes | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGFEDisplacementMapElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_in1: 'tags this -> SVGAnimatedString.t [@@js.get "in1"]
  val get_in2: 'tags this -> SVGAnimatedString.t [@@js.get "in2"]
  val get_scale: 'tags this -> SVGAnimatedNumber.t [@@js.get "scale"]
  val get_xChannelSelector: 'tags this -> SVGAnimatedEnumeration.t [@@js.get "xChannelSelector"]
  val get_yChannelSelector: 'tags this -> SVGAnimatedEnumeration.t [@@js.get "yChannelSelector"]
  val get_SVG_CHANNEL_UNKNOWN: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "SVG_CHANNEL_UNKNOWN"]
  val get_SVG_CHANNEL_R: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SVG_CHANNEL_R"]
  val get_SVG_CHANNEL_G: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "SVG_CHANNEL_G"]
  val get_SVG_CHANNEL_B: 'tags this -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "SVG_CHANNEL_B"]
  val get_SVG_CHANNEL_A: 'tags this -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "SVG_CHANNEL_A"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  val svg_channel_unknown: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "SVG_CHANNEL_UNKNOWN"]
  val svg_channel_r: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SVG_CHANNEL_R"]
  val svg_channel_g: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "SVG_CHANNEL_G"]
  val svg_channel_b: unit -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "SVG_CHANNEL_B"]
  val svg_channel_a: unit -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "SVG_CHANNEL_A"]
end

(**
  Corresponds to the <feDiffuseLighting> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGFEDiffuseLightingElement)
*)
module[@js.scope "SVGFEDiffuseLightingElement"] SVGFEDiffuseLightingElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEDiffuseLightingElement | `SVGFilterPrimitiveStandardAttributes | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEDiffuseLightingElement | `SVGFilterPrimitiveStandardAttributes | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEDiffuseLightingElement | `SVGFilterPrimitiveStandardAttributes | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGFEDiffuseLightingElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_diffuseConstant: 'tags this -> SVGAnimatedNumber.t [@@js.get "diffuseConstant"]
  val get_in1: 'tags this -> SVGAnimatedString.t [@@js.get "in1"]
  val get_kernelUnitLengthX: 'tags this -> SVGAnimatedNumber.t [@@js.get "kernelUnitLengthX"]
  val get_kernelUnitLengthY: 'tags this -> SVGAnimatedNumber.t [@@js.get "kernelUnitLengthY"]
  val get_surfaceScale: 'tags this -> SVGAnimatedNumber.t [@@js.get "surfaceScale"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Used for attributes of type boolean which can be animated.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGAnimatedBoolean)
*)
module[@js.scope "SVGAnimatedBoolean"] SVGAnimatedBoolean : sig
  type t = [`SVGAnimatedBoolean] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SVGAnimatedBoolean]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SVGAnimatedBoolean]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGAnimatedBoolean ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_animVal: 'tags this -> bool [@@js.get "animVal"]
  val get_baseVal: 'tags this -> bool [@@js.get "baseVal"]
  val set_baseVal: 'tags this -> bool -> unit [@@js.set "baseVal"]
  val create: animVal:bool -> baseVal:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(**
  Corresponds to the <feConvolveMatrix> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement)
*)
module[@js.scope "SVGFEConvolveMatrixElement"] SVGFEConvolveMatrixElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEConvolveMatrixElement | `SVGFilterPrimitiveStandardAttributes | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEConvolveMatrixElement | `SVGFilterPrimitiveStandardAttributes | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEConvolveMatrixElement | `SVGFilterPrimitiveStandardAttributes | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGFEConvolveMatrixElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_bias: 'tags this -> SVGAnimatedNumber.t [@@js.get "bias"]
  val get_divisor: 'tags this -> SVGAnimatedNumber.t [@@js.get "divisor"]
  val get_edgeMode: 'tags this -> SVGAnimatedEnumeration.t [@@js.get "edgeMode"]
  val get_in1: 'tags this -> SVGAnimatedString.t [@@js.get "in1"]
  val get_kernelMatrix: 'tags this -> SVGAnimatedNumberList.t [@@js.get "kernelMatrix"]
  val get_kernelUnitLengthX: 'tags this -> SVGAnimatedNumber.t [@@js.get "kernelUnitLengthX"]
  val get_kernelUnitLengthY: 'tags this -> SVGAnimatedNumber.t [@@js.get "kernelUnitLengthY"]
  val get_orderX: 'tags this -> SVGAnimatedInteger.t [@@js.get "orderX"]
  val get_orderY: 'tags this -> SVGAnimatedInteger.t [@@js.get "orderY"]
  val get_preserveAlpha: 'tags this -> SVGAnimatedBoolean.t [@@js.get "preserveAlpha"]
  val get_targetX: 'tags this -> SVGAnimatedInteger.t [@@js.get "targetX"]
  val get_targetY: 'tags this -> SVGAnimatedInteger.t [@@js.get "targetY"]
  val get_SVG_EDGEMODE_UNKNOWN: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "SVG_EDGEMODE_UNKNOWN"]
  val get_SVG_EDGEMODE_DUPLICATE: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SVG_EDGEMODE_DUPLICATE"]
  val get_SVG_EDGEMODE_WRAP: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "SVG_EDGEMODE_WRAP"]
  val get_SVG_EDGEMODE_NONE: 'tags this -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "SVG_EDGEMODE_NONE"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  val svg_edgemode_unknown: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "SVG_EDGEMODE_UNKNOWN"]
  val svg_edgemode_duplicate: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SVG_EDGEMODE_DUPLICATE"]
  val svg_edgemode_wrap: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "SVG_EDGEMODE_WRAP"]
  val svg_edgemode_none: unit -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "SVG_EDGEMODE_NONE"]
end

(**
  Corresponds to the <feComposite> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGFECompositeElement)
*)
module[@js.scope "SVGFECompositeElement"] SVGFECompositeElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFECompositeElement | `SVGFilterPrimitiveStandardAttributes | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFECompositeElement | `SVGFilterPrimitiveStandardAttributes | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFECompositeElement | `SVGFilterPrimitiveStandardAttributes | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGFECompositeElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_in1: 'tags this -> SVGAnimatedString.t [@@js.get "in1"]
  val get_in2: 'tags this -> SVGAnimatedString.t [@@js.get "in2"]
  val get_k1: 'tags this -> SVGAnimatedNumber.t [@@js.get "k1"]
  val get_k2: 'tags this -> SVGAnimatedNumber.t [@@js.get "k2"]
  val get_k3: 'tags this -> SVGAnimatedNumber.t [@@js.get "k3"]
  val get_k4: 'tags this -> SVGAnimatedNumber.t [@@js.get "k4"]
  val get_operator: 'tags this -> SVGAnimatedEnumeration.t [@@js.get "operator"]
  val get_SVG_FECOMPOSITE_OPERATOR_UNKNOWN: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "SVG_FECOMPOSITE_OPERATOR_UNKNOWN"]
  val get_SVG_FECOMPOSITE_OPERATOR_OVER: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SVG_FECOMPOSITE_OPERATOR_OVER"]
  val get_SVG_FECOMPOSITE_OPERATOR_IN: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "SVG_FECOMPOSITE_OPERATOR_IN"]
  val get_SVG_FECOMPOSITE_OPERATOR_OUT: 'tags this -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "SVG_FECOMPOSITE_OPERATOR_OUT"]
  val get_SVG_FECOMPOSITE_OPERATOR_ATOP: 'tags this -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "SVG_FECOMPOSITE_OPERATOR_ATOP"]
  val get_SVG_FECOMPOSITE_OPERATOR_XOR: 'tags this -> ([`L_n_5[@js 5]] [@js.enum]) [@@js.get "SVG_FECOMPOSITE_OPERATOR_XOR"]
  val get_SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: 'tags this -> ([`L_n_6[@js 6]] [@js.enum]) [@@js.get "SVG_FECOMPOSITE_OPERATOR_ARITHMETIC"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  val svg_fecomposite_operator_unknown: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "SVG_FECOMPOSITE_OPERATOR_UNKNOWN"]
  val svg_fecomposite_operator_over: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SVG_FECOMPOSITE_OPERATOR_OVER"]
  val svg_fecomposite_operator_in: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "SVG_FECOMPOSITE_OPERATOR_IN"]
  val svg_fecomposite_operator_out: unit -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "SVG_FECOMPOSITE_OPERATOR_OUT"]
  val svg_fecomposite_operator_atop: unit -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "SVG_FECOMPOSITE_OPERATOR_ATOP"]
  val svg_fecomposite_operator_xor: unit -> ([`L_n_5[@js 5]] [@js.enum]) [@@js.get "SVG_FECOMPOSITE_OPERATOR_XOR"]
  val svg_fecomposite_operator_arithmetic: unit -> ([`L_n_6[@js 6]] [@js.enum]) [@@js.get "SVG_FECOMPOSITE_OPERATOR_ARITHMETIC"]
end

(**
  Corresponds to the <feComponentTransfer> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGFEComponentTransferElement)
*)
module[@js.scope "SVGFEComponentTransferElement"] SVGFEComponentTransferElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEComponentTransferElement | `SVGFilterPrimitiveStandardAttributes | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEComponentTransferElement | `SVGFilterPrimitiveStandardAttributes | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEComponentTransferElement | `SVGFilterPrimitiveStandardAttributes | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGFEComponentTransferElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_in1: 'tags this -> SVGAnimatedString.t [@@js.get "in1"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Corresponds to the <feColorMatrix> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGFEColorMatrixElement)
*)
module[@js.scope "SVGFEColorMatrixElement"] SVGFEColorMatrixElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEColorMatrixElement | `SVGFilterPrimitiveStandardAttributes | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEColorMatrixElement | `SVGFilterPrimitiveStandardAttributes | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEColorMatrixElement | `SVGFilterPrimitiveStandardAttributes | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGFEColorMatrixElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGFEColorMatrixElement/in1) *)
  val get_in1: 'tags this -> SVGAnimatedString.t [@@js.get "in1"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGFEColorMatrixElement/type) *)
  val get_type: 'tags this -> SVGAnimatedEnumeration.t [@@js.get "type"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGFEColorMatrixElement/values) *)
  val get_values: 'tags this -> SVGAnimatedNumberList.t [@@js.get "values"]
  val get_SVG_FECOLORMATRIX_TYPE_UNKNOWN: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "SVG_FECOLORMATRIX_TYPE_UNKNOWN"]
  val get_SVG_FECOLORMATRIX_TYPE_MATRIX: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SVG_FECOLORMATRIX_TYPE_MATRIX"]
  val get_SVG_FECOLORMATRIX_TYPE_SATURATE: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "SVG_FECOLORMATRIX_TYPE_SATURATE"]
  val get_SVG_FECOLORMATRIX_TYPE_HUEROTATE: 'tags this -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "SVG_FECOLORMATRIX_TYPE_HUEROTATE"]
  val get_SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: 'tags this -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  val svg_fecolormatrix_type_unknown: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "SVG_FECOLORMATRIX_TYPE_UNKNOWN"]
  val svg_fecolormatrix_type_matrix: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SVG_FECOLORMATRIX_TYPE_MATRIX"]
  val svg_fecolormatrix_type_saturate: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "SVG_FECOLORMATRIX_TYPE_SATURATE"]
  val svg_fecolormatrix_type_huerotate: unit -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "SVG_FECOLORMATRIX_TYPE_HUEROTATE"]
  val svg_fecolormatrix_type_luminancetoalpha: unit -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA"]
end

(**
  Corresponds to the <feBlend> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGFEBlendElement)
*)
module[@js.scope "SVGFEBlendElement"] SVGFEBlendElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEBlendElement | `SVGFilterPrimitiveStandardAttributes | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEBlendElement | `SVGFilterPrimitiveStandardAttributes | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGElement | `SVGFEBlendElement | `SVGFilterPrimitiveStandardAttributes | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGFEBlendElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_in1: 'tags this -> SVGAnimatedString.t [@@js.get "in1"]
  val get_in2: 'tags this -> SVGAnimatedString.t [@@js.get "in2"]
  val get_mode: 'tags this -> SVGAnimatedEnumeration.t [@@js.get "mode"]
  val get_SVG_FEBLEND_MODE_UNKNOWN: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "SVG_FEBLEND_MODE_UNKNOWN"]
  val get_SVG_FEBLEND_MODE_NORMAL: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SVG_FEBLEND_MODE_NORMAL"]
  val get_SVG_FEBLEND_MODE_MULTIPLY: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "SVG_FEBLEND_MODE_MULTIPLY"]
  val get_SVG_FEBLEND_MODE_SCREEN: 'tags this -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "SVG_FEBLEND_MODE_SCREEN"]
  val get_SVG_FEBLEND_MODE_DARKEN: 'tags this -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "SVG_FEBLEND_MODE_DARKEN"]
  val get_SVG_FEBLEND_MODE_LIGHTEN: 'tags this -> ([`L_n_5[@js 5]] [@js.enum]) [@@js.get "SVG_FEBLEND_MODE_LIGHTEN"]
  val get_SVG_FEBLEND_MODE_OVERLAY: 'tags this -> ([`L_n_6[@js 6]] [@js.enum]) [@@js.get "SVG_FEBLEND_MODE_OVERLAY"]
  val get_SVG_FEBLEND_MODE_COLOR_DODGE: 'tags this -> ([`L_n_7[@js 7]] [@js.enum]) [@@js.get "SVG_FEBLEND_MODE_COLOR_DODGE"]
  val get_SVG_FEBLEND_MODE_COLOR_BURN: 'tags this -> ([`L_n_8[@js 8]] [@js.enum]) [@@js.get "SVG_FEBLEND_MODE_COLOR_BURN"]
  val get_SVG_FEBLEND_MODE_HARD_LIGHT: 'tags this -> ([`L_n_9[@js 9]] [@js.enum]) [@@js.get "SVG_FEBLEND_MODE_HARD_LIGHT"]
  val get_SVG_FEBLEND_MODE_SOFT_LIGHT: 'tags this -> ([`L_n_10[@js 10]] [@js.enum]) [@@js.get "SVG_FEBLEND_MODE_SOFT_LIGHT"]
  val get_SVG_FEBLEND_MODE_DIFFERENCE: 'tags this -> ([`L_n_11[@js 11]] [@js.enum]) [@@js.get "SVG_FEBLEND_MODE_DIFFERENCE"]
  val get_SVG_FEBLEND_MODE_EXCLUSION: 'tags this -> ([`L_n_12[@js 12]] [@js.enum]) [@@js.get "SVG_FEBLEND_MODE_EXCLUSION"]
  val get_SVG_FEBLEND_MODE_HUE: 'tags this -> ([`L_n_13[@js 13]] [@js.enum]) [@@js.get "SVG_FEBLEND_MODE_HUE"]
  val get_SVG_FEBLEND_MODE_SATURATION: 'tags this -> ([`L_n_14[@js 14]] [@js.enum]) [@@js.get "SVG_FEBLEND_MODE_SATURATION"]
  val get_SVG_FEBLEND_MODE_COLOR: 'tags this -> ([`L_n_15[@js 15]] [@js.enum]) [@@js.get "SVG_FEBLEND_MODE_COLOR"]
  val get_SVG_FEBLEND_MODE_LUMINOSITY: 'tags this -> ([`L_n_16[@js 16]] [@js.enum]) [@@js.get "SVG_FEBLEND_MODE_LUMINOSITY"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  val svg_feblend_mode_unknown: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "SVG_FEBLEND_MODE_UNKNOWN"]
  val svg_feblend_mode_normal: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "SVG_FEBLEND_MODE_NORMAL"]
  val svg_feblend_mode_multiply: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "SVG_FEBLEND_MODE_MULTIPLY"]
  val svg_feblend_mode_screen: unit -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "SVG_FEBLEND_MODE_SCREEN"]
  val svg_feblend_mode_darken: unit -> ([`L_n_4[@js 4]] [@js.enum]) [@@js.get "SVG_FEBLEND_MODE_DARKEN"]
  val svg_feblend_mode_lighten: unit -> ([`L_n_5[@js 5]] [@js.enum]) [@@js.get "SVG_FEBLEND_MODE_LIGHTEN"]
  val svg_feblend_mode_overlay: unit -> ([`L_n_6[@js 6]] [@js.enum]) [@@js.get "SVG_FEBLEND_MODE_OVERLAY"]
  val svg_feblend_mode_color_dodge: unit -> ([`L_n_7[@js 7]] [@js.enum]) [@@js.get "SVG_FEBLEND_MODE_COLOR_DODGE"]
  val svg_feblend_mode_color_burn: unit -> ([`L_n_8[@js 8]] [@js.enum]) [@@js.get "SVG_FEBLEND_MODE_COLOR_BURN"]
  val svg_feblend_mode_hard_light: unit -> ([`L_n_9[@js 9]] [@js.enum]) [@@js.get "SVG_FEBLEND_MODE_HARD_LIGHT"]
  val svg_feblend_mode_soft_light: unit -> ([`L_n_10[@js 10]] [@js.enum]) [@@js.get "SVG_FEBLEND_MODE_SOFT_LIGHT"]
  val svg_feblend_mode_difference: unit -> ([`L_n_11[@js 11]] [@js.enum]) [@@js.get "SVG_FEBLEND_MODE_DIFFERENCE"]
  val svg_feblend_mode_exclusion: unit -> ([`L_n_12[@js 12]] [@js.enum]) [@@js.get "SVG_FEBLEND_MODE_EXCLUSION"]
  val svg_feblend_mode_hue: unit -> ([`L_n_13[@js 13]] [@js.enum]) [@@js.get "SVG_FEBLEND_MODE_HUE"]
  val svg_feblend_mode_saturation: unit -> ([`L_n_14[@js 14]] [@js.enum]) [@@js.get "SVG_FEBLEND_MODE_SATURATION"]
  val svg_feblend_mode_color: unit -> ([`L_n_15[@js 15]] [@js.enum]) [@@js.get "SVG_FEBLEND_MODE_COLOR"]
  val svg_feblend_mode_luminosity: unit -> ([`L_n_16[@js 16]] [@js.enum]) [@@js.get "SVG_FEBLEND_MODE_LUMINOSITY"]
end

(**
  Corresponds to the <desc> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGDescElement)
*)
module[@js.scope "SVGDescElement"] SVGDescElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGDescElement | `SVGElement | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGDescElement | `SVGElement | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGDescElement | `SVGElement | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGDescElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Corresponds to the <defs> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGDefsElement)
*)
module[@js.scope "SVGDefsElement"] SVGDefsElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGDefsElement | `SVGElement | `SVGGraphicsElement | `SVGTests | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGDefsElement | `SVGElement | `SVGGraphicsElement | `SVGTests | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGDefsElement | `SVGElement | `SVGGraphicsElement | `SVGTests | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGDefsElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides access to the properties of <clipPath> elements, as well as methods to manipulate them.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGClipPathElement)
*)
module[@js.scope "SVGClipPathElement"] SVGClipPathElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGClipPathElement | `SVGElement | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGClipPathElement | `SVGElement | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGClipPathElement | `SVGElement | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGClipPathElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGClipPathElement/clipPathUnits) *)
  val get_clipPathUnits: 'tags this -> SVGAnimatedEnumeration.t [@@js.get "clipPathUnits"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGClipPathElement/transform) *)
  val get_transform: 'tags this -> SVGAnimatedTransformList.t [@@js.get "transform"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGAnimateTransformElement) *)
module[@js.scope "SVGAnimateTransformElement"] SVGAnimateTransformElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGAnimateTransformElement | `SVGAnimationElement | `SVGElement | `SVGTests | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGAnimateTransformElement | `SVGAnimationElement | `SVGElement | `SVGTests | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGAnimateTransformElement | `SVGAnimationElement | `SVGElement | `SVGTests | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGAnimateTransformElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGAnimateMotionElement) *)
module[@js.scope "SVGAnimateMotionElement"] SVGAnimateMotionElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGAnimateMotionElement | `SVGAnimationElement | `SVGElement | `SVGTests | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGAnimateMotionElement | `SVGAnimationElement | `SVGElement | `SVGTests | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGAnimateMotionElement | `SVGAnimationElement | `SVGElement | `SVGTests | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGAnimateMotionElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGAnimateElement) *)
module[@js.scope "SVGAnimateElement"] SVGAnimateElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGAnimateElement | `SVGAnimationElement | `SVGElement | `SVGTests | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGAnimateElement | `SVGAnimationElement | `SVGElement | `SVGTests | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGAnimateElement | `SVGAnimationElement | `SVGElement | `SVGTests | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGAnimateElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides access to the properties of <a> element, as well as methods to manipulate them.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGAElement)
*)
module[@js.scope "SVGAElement"] SVGAElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGAElement | `SVGElement | `SVGGraphicsElement | `SVGTests | `SVGURIReference | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGAElement | `SVGElement | `SVGGraphicsElement | `SVGTests | `SVGURIReference | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `EventTarget | `GlobalEventHandlers | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `SVGAElement | `SVGElement | `SVGGraphicsElement | `SVGTests | `SVGURIReference | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGAElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_rel: 'tags this -> string [@@js.get "rel"]
  val set_rel: 'tags this -> string -> unit [@@js.set "rel"]
  val get_relList: 'tags this -> DOMTokenList.t [@@js.get "relList"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGAElement/target) *)
  val get_target: 'tags this -> SVGAnimatedString.t [@@js.get "target"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'SVGElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module SVGElementTagNameMap : sig
  type t = [`SVGElementTagNameMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`SVGElementTagNameMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`SVGElementTagNameMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `SVGElementTagNameMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_a: 'tags this -> SVGAElement.t [@@js.get "a"]
  val set_a: 'tags this -> SVGAElement.t -> unit [@@js.set "a"]
  val get_animate: 'tags this -> SVGAnimateElement.t [@@js.get "animate"]
  val set_animate: 'tags this -> SVGAnimateElement.t -> unit [@@js.set "animate"]
  val get_animateMotion: 'tags this -> SVGAnimateMotionElement.t [@@js.get "animateMotion"]
  val set_animateMotion: 'tags this -> SVGAnimateMotionElement.t -> unit [@@js.set "animateMotion"]
  val get_animateTransform: 'tags this -> SVGAnimateTransformElement.t [@@js.get "animateTransform"]
  val set_animateTransform: 'tags this -> SVGAnimateTransformElement.t -> unit [@@js.set "animateTransform"]
  val get_circle: 'tags this -> SVGCircleElement.t [@@js.get "circle"]
  val set_circle: 'tags this -> SVGCircleElement.t -> unit [@@js.set "circle"]
  val get_clipPath: 'tags this -> SVGClipPathElement.t [@@js.get "clipPath"]
  val set_clipPath: 'tags this -> SVGClipPathElement.t -> unit [@@js.set "clipPath"]
  val get_defs: 'tags this -> SVGDefsElement.t [@@js.get "defs"]
  val set_defs: 'tags this -> SVGDefsElement.t -> unit [@@js.set "defs"]
  val get_desc: 'tags this -> SVGDescElement.t [@@js.get "desc"]
  val set_desc: 'tags this -> SVGDescElement.t -> unit [@@js.set "desc"]
  val get_ellipse: 'tags this -> SVGEllipseElement.t [@@js.get "ellipse"]
  val set_ellipse: 'tags this -> SVGEllipseElement.t -> unit [@@js.set "ellipse"]
  val get_feBlend: 'tags this -> SVGFEBlendElement.t [@@js.get "feBlend"]
  val set_feBlend: 'tags this -> SVGFEBlendElement.t -> unit [@@js.set "feBlend"]
  val get_feColorMatrix: 'tags this -> SVGFEColorMatrixElement.t [@@js.get "feColorMatrix"]
  val set_feColorMatrix: 'tags this -> SVGFEColorMatrixElement.t -> unit [@@js.set "feColorMatrix"]
  val get_feComponentTransfer: 'tags this -> SVGFEComponentTransferElement.t [@@js.get "feComponentTransfer"]
  val set_feComponentTransfer: 'tags this -> SVGFEComponentTransferElement.t -> unit [@@js.set "feComponentTransfer"]
  val get_feComposite: 'tags this -> SVGFECompositeElement.t [@@js.get "feComposite"]
  val set_feComposite: 'tags this -> SVGFECompositeElement.t -> unit [@@js.set "feComposite"]
  val get_feConvolveMatrix: 'tags this -> SVGFEConvolveMatrixElement.t [@@js.get "feConvolveMatrix"]
  val set_feConvolveMatrix: 'tags this -> SVGFEConvolveMatrixElement.t -> unit [@@js.set "feConvolveMatrix"]
  val get_feDiffuseLighting: 'tags this -> SVGFEDiffuseLightingElement.t [@@js.get "feDiffuseLighting"]
  val set_feDiffuseLighting: 'tags this -> SVGFEDiffuseLightingElement.t -> unit [@@js.set "feDiffuseLighting"]
  val get_feDisplacementMap: 'tags this -> SVGFEDisplacementMapElement.t [@@js.get "feDisplacementMap"]
  val set_feDisplacementMap: 'tags this -> SVGFEDisplacementMapElement.t -> unit [@@js.set "feDisplacementMap"]
  val get_feDistantLight: 'tags this -> SVGFEDistantLightElement.t [@@js.get "feDistantLight"]
  val set_feDistantLight: 'tags this -> SVGFEDistantLightElement.t -> unit [@@js.set "feDistantLight"]
  val get_feDropShadow: 'tags this -> SVGFEDropShadowElement.t [@@js.get "feDropShadow"]
  val set_feDropShadow: 'tags this -> SVGFEDropShadowElement.t -> unit [@@js.set "feDropShadow"]
  val get_feFlood: 'tags this -> SVGFEFloodElement.t [@@js.get "feFlood"]
  val set_feFlood: 'tags this -> SVGFEFloodElement.t -> unit [@@js.set "feFlood"]
  val get_feFuncA: 'tags this -> SVGFEFuncAElement.t [@@js.get "feFuncA"]
  val set_feFuncA: 'tags this -> SVGFEFuncAElement.t -> unit [@@js.set "feFuncA"]
  val get_feFuncB: 'tags this -> SVGFEFuncBElement.t [@@js.get "feFuncB"]
  val set_feFuncB: 'tags this -> SVGFEFuncBElement.t -> unit [@@js.set "feFuncB"]
  val get_feFuncG: 'tags this -> SVGFEFuncGElement.t [@@js.get "feFuncG"]
  val set_feFuncG: 'tags this -> SVGFEFuncGElement.t -> unit [@@js.set "feFuncG"]
  val get_feFuncR: 'tags this -> SVGFEFuncRElement.t [@@js.get "feFuncR"]
  val set_feFuncR: 'tags this -> SVGFEFuncRElement.t -> unit [@@js.set "feFuncR"]
  val get_feGaussianBlur: 'tags this -> SVGFEGaussianBlurElement.t [@@js.get "feGaussianBlur"]
  val set_feGaussianBlur: 'tags this -> SVGFEGaussianBlurElement.t -> unit [@@js.set "feGaussianBlur"]
  val get_feImage: 'tags this -> SVGFEImageElement.t [@@js.get "feImage"]
  val set_feImage: 'tags this -> SVGFEImageElement.t -> unit [@@js.set "feImage"]
  val get_feMerge: 'tags this -> SVGFEMergeElement.t [@@js.get "feMerge"]
  val set_feMerge: 'tags this -> SVGFEMergeElement.t -> unit [@@js.set "feMerge"]
  val get_feMergeNode: 'tags this -> SVGFEMergeNodeElement.t [@@js.get "feMergeNode"]
  val set_feMergeNode: 'tags this -> SVGFEMergeNodeElement.t -> unit [@@js.set "feMergeNode"]
  val get_feMorphology: 'tags this -> SVGFEMorphologyElement.t [@@js.get "feMorphology"]
  val set_feMorphology: 'tags this -> SVGFEMorphologyElement.t -> unit [@@js.set "feMorphology"]
  val get_feOffset: 'tags this -> SVGFEOffsetElement.t [@@js.get "feOffset"]
  val set_feOffset: 'tags this -> SVGFEOffsetElement.t -> unit [@@js.set "feOffset"]
  val get_fePointLight: 'tags this -> SVGFEPointLightElement.t [@@js.get "fePointLight"]
  val set_fePointLight: 'tags this -> SVGFEPointLightElement.t -> unit [@@js.set "fePointLight"]
  val get_feSpecularLighting: 'tags this -> SVGFESpecularLightingElement.t [@@js.get "feSpecularLighting"]
  val set_feSpecularLighting: 'tags this -> SVGFESpecularLightingElement.t -> unit [@@js.set "feSpecularLighting"]
  val get_feSpotLight: 'tags this -> SVGFESpotLightElement.t [@@js.get "feSpotLight"]
  val set_feSpotLight: 'tags this -> SVGFESpotLightElement.t -> unit [@@js.set "feSpotLight"]
  val get_feTile: 'tags this -> SVGFETileElement.t [@@js.get "feTile"]
  val set_feTile: 'tags this -> SVGFETileElement.t -> unit [@@js.set "feTile"]
  val get_feTurbulence: 'tags this -> SVGFETurbulenceElement.t [@@js.get "feTurbulence"]
  val set_feTurbulence: 'tags this -> SVGFETurbulenceElement.t -> unit [@@js.set "feTurbulence"]
  val get_filter: 'tags this -> SVGFilterElement.t [@@js.get "filter"]
  val set_filter: 'tags this -> SVGFilterElement.t -> unit [@@js.set "filter"]
  val get_foreignObject: 'tags this -> SVGForeignObjectElement.t [@@js.get "foreignObject"]
  val set_foreignObject: 'tags this -> SVGForeignObjectElement.t -> unit [@@js.set "foreignObject"]
  val get_g: 'tags this -> SVGGElement.t [@@js.get "g"]
  val set_g: 'tags this -> SVGGElement.t -> unit [@@js.set "g"]
  val get_image: 'tags this -> SVGImageElement.t [@@js.get "image"]
  val set_image: 'tags this -> SVGImageElement.t -> unit [@@js.set "image"]
  val get_line: 'tags this -> SVGLineElement.t [@@js.get "line"]
  val set_line: 'tags this -> SVGLineElement.t -> unit [@@js.set "line"]
  val get_linearGradient: 'tags this -> SVGLinearGradientElement.t [@@js.get "linearGradient"]
  val set_linearGradient: 'tags this -> SVGLinearGradientElement.t -> unit [@@js.set "linearGradient"]
  val get_marker: 'tags this -> SVGMarkerElement.t [@@js.get "marker"]
  val set_marker: 'tags this -> SVGMarkerElement.t -> unit [@@js.set "marker"]
  val get_mask: 'tags this -> SVGMaskElement.t [@@js.get "mask"]
  val set_mask: 'tags this -> SVGMaskElement.t -> unit [@@js.set "mask"]
  val get_metadata: 'tags this -> SVGMetadataElement.t [@@js.get "metadata"]
  val set_metadata: 'tags this -> SVGMetadataElement.t -> unit [@@js.set "metadata"]
  val get_mpath: 'tags this -> SVGMPathElement.t [@@js.get "mpath"]
  val set_mpath: 'tags this -> SVGMPathElement.t -> unit [@@js.set "mpath"]
  val get_path: 'tags this -> SVGPathElement.t [@@js.get "path"]
  val set_path: 'tags this -> SVGPathElement.t -> unit [@@js.set "path"]
  val get_pattern: 'tags this -> SVGPatternElement.t [@@js.get "pattern"]
  val set_pattern: 'tags this -> SVGPatternElement.t -> unit [@@js.set "pattern"]
  val get_polygon: 'tags this -> SVGPolygonElement.t [@@js.get "polygon"]
  val set_polygon: 'tags this -> SVGPolygonElement.t -> unit [@@js.set "polygon"]
  val get_polyline: 'tags this -> SVGPolylineElement.t [@@js.get "polyline"]
  val set_polyline: 'tags this -> SVGPolylineElement.t -> unit [@@js.set "polyline"]
  val get_radialGradient: 'tags this -> SVGRadialGradientElement.t [@@js.get "radialGradient"]
  val set_radialGradient: 'tags this -> SVGRadialGradientElement.t -> unit [@@js.set "radialGradient"]
  val get_rect: 'tags this -> SVGRectElement.t [@@js.get "rect"]
  val set_rect: 'tags this -> SVGRectElement.t -> unit [@@js.set "rect"]
  val get_script: 'tags this -> SVGScriptElement.t [@@js.get "script"]
  val set_script: 'tags this -> SVGScriptElement.t -> unit [@@js.set "script"]
  val get_set: 'tags this -> SVGSetElement.t [@@js.get "set"]
  val set_set: 'tags this -> SVGSetElement.t -> unit [@@js.set "set"]
  val get_stop: 'tags this -> SVGStopElement.t [@@js.get "stop"]
  val set_stop: 'tags this -> SVGStopElement.t -> unit [@@js.set "stop"]
  val get_style: 'tags this -> SVGStyleElement.t [@@js.get "style"]
  val set_style: 'tags this -> SVGStyleElement.t -> unit [@@js.set "style"]
  val get_svg: 'tags this -> SVGSVGElement.t [@@js.get "svg"]
  val set_svg: 'tags this -> SVGSVGElement.t -> unit [@@js.set "svg"]
  val get_switch: 'tags this -> SVGSwitchElement.t [@@js.get "switch"]
  val set_switch: 'tags this -> SVGSwitchElement.t -> unit [@@js.set "switch"]
  val get_symbol: 'tags this -> SVGSymbolElement.t [@@js.get "symbol"]
  val set_symbol: 'tags this -> SVGSymbolElement.t -> unit [@@js.set "symbol"]
  val get_text: 'tags this -> SVGTextElement.t [@@js.get "text"]
  val set_text: 'tags this -> SVGTextElement.t -> unit [@@js.set "text"]
  val get_textPath: 'tags this -> SVGTextPathElement.t [@@js.get "textPath"]
  val set_textPath: 'tags this -> SVGTextPathElement.t -> unit [@@js.set "textPath"]
  val get_title: 'tags this -> SVGTitleElement.t [@@js.get "title"]
  val set_title: 'tags this -> SVGTitleElement.t -> unit [@@js.set "title"]
  val get_tspan: 'tags this -> SVGTSpanElement.t [@@js.get "tspan"]
  val set_tspan: 'tags this -> SVGTSpanElement.t -> unit [@@js.set "tspan"]
  val get_use: 'tags this -> SVGUseElement.t [@@js.get "use"]
  val set_use: 'tags this -> SVGUseElement.t -> unit [@@js.set "use"]
  val get_view: 'tags this -> SVGViewElement.t [@@js.get "view"]
  val set_view: 'tags this -> SVGViewElement.t -> unit [@@js.set "view"]
  val create: a:SVGAElement.t -> animate:SVGAnimateElement.t -> animateMotion:SVGAnimateMotionElement.t -> animateTransform:SVGAnimateTransformElement.t -> circle:SVGCircleElement.t -> clipPath:SVGClipPathElement.t -> defs:SVGDefsElement.t -> desc:SVGDescElement.t -> ellipse:SVGEllipseElement.t -> feBlend:SVGFEBlendElement.t -> feColorMatrix:SVGFEColorMatrixElement.t -> feComponentTransfer:SVGFEComponentTransferElement.t -> feComposite:SVGFECompositeElement.t -> feConvolveMatrix:SVGFEConvolveMatrixElement.t -> feDiffuseLighting:SVGFEDiffuseLightingElement.t -> feDisplacementMap:SVGFEDisplacementMapElement.t -> feDistantLight:SVGFEDistantLightElement.t -> feDropShadow:SVGFEDropShadowElement.t -> feFlood:SVGFEFloodElement.t -> feFuncA:SVGFEFuncAElement.t -> feFuncB:SVGFEFuncBElement.t -> feFuncG:SVGFEFuncGElement.t -> feFuncR:SVGFEFuncRElement.t -> feGaussianBlur:SVGFEGaussianBlurElement.t -> feImage:SVGFEImageElement.t -> feMerge:SVGFEMergeElement.t -> feMergeNode:SVGFEMergeNodeElement.t -> feMorphology:SVGFEMorphologyElement.t -> feOffset:SVGFEOffsetElement.t -> fePointLight:SVGFEPointLightElement.t -> feSpecularLighting:SVGFESpecularLightingElement.t -> feSpotLight:SVGFESpotLightElement.t -> feTile:SVGFETileElement.t -> feTurbulence:SVGFETurbulenceElement.t -> filter:SVGFilterElement.t -> foreignObject:SVGForeignObjectElement.t -> g:SVGGElement.t -> image:SVGImageElement.t -> line:SVGLineElement.t -> linearGradient:SVGLinearGradientElement.t -> marker:SVGMarkerElement.t -> mask:SVGMaskElement.t -> metadata:SVGMetadataElement.t -> mpath:SVGMPathElement.t -> path:SVGPathElement.t -> pattern:SVGPatternElement.t -> polygon:SVGPolygonElement.t -> polyline:SVGPolylineElement.t -> radialGradient:SVGRadialGradientElement.t -> rect:SVGRectElement.t -> script:SVGScriptElement.t -> set_:(SVGSetElement.t[@js "set"]) -> stop:SVGStopElement.t -> style:SVGStyleElement.t -> svg:SVGSVGElement.t -> switch:SVGSwitchElement.t -> symbol:SVGSymbolElement.t -> text:SVGTextElement.t -> textPath:SVGTextPathElement.t -> title:SVGTitleElement.t -> tspan:SVGTSpanElement.t -> use:SVGUseElement.t -> view:SVGViewElement.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating unordered list elements.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLUListElement)
*)
module[@js.scope "HTMLUListElement"] HTMLUListElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLUListElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLUListElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLUListElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLUListElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLUListElement/compact) *)
  val get_compact: 'tags this -> bool [@@js.get "compact"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLUListElement/compact) *)
  val set_compact: 'tags this -> bool -> unit [@@js.set "compact"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLUListElement/type) *)
  val get_type: 'tags this -> string [@@js.get "type"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLUListElement/type) *)
  val set_type: 'tags this -> string -> unit [@@js.set "type"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  The HTMLTrackElement
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement)
*)
module[@js.scope "HTMLTrackElement"] HTMLTrackElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTrackElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTrackElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTrackElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLTrackElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/default) *)
  val get_default: 'tags this -> bool [@@js.get "default"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/default) *)
  val set_default: 'tags this -> bool -> unit [@@js.set "default"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/kind) *)
  val get_kind: 'tags this -> string [@@js.get "kind"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/kind) *)
  val set_kind: 'tags this -> string -> unit [@@js.set "kind"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/label) *)
  val get_label: 'tags this -> string [@@js.get "label"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/label) *)
  val set_label: 'tags this -> string -> unit [@@js.set "label"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/readyState) *)
  val get_readyState: 'tags this -> float [@@js.get "readyState"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/src) *)
  val get_src: 'tags this -> string [@@js.get "src"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/src) *)
  val set_src: 'tags this -> string -> unit [@@js.set "src"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/srclang) *)
  val get_srclang: 'tags this -> string [@@js.get "srclang"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/srclang) *)
  val set_srclang: 'tags this -> string -> unit [@@js.set "srclang"]
  
  (**
    Returns the TextTrack object corresponding to the text track of the track element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/track)
  *)
  val get_track: 'tags this -> TextTrack.t [@@js.get "track"]
  val get_NONE: 'tags this -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "NONE"]
  val get_LOADING: 'tags this -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "LOADING"]
  val get_LOADED: 'tags this -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "LOADED"]
  val get_ERROR: 'tags this -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "ERROR"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
  val none: unit -> ([`L_n_0[@js 0]] [@js.enum]) [@@js.get "NONE"]
  val loading: unit -> ([`L_n_1[@js 1]] [@js.enum]) [@@js.get "LOADING"]
  val loaded: unit -> ([`L_n_2[@js 2]] [@js.enum]) [@@js.get "LOADED"]
  val error: unit -> ([`L_n_3[@js 3]] [@js.enum]) [@@js.get "ERROR"]
end

(**
  Contains the title for a document. This element inherits all of the properties and methods of the HTMLElement interface.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTitleElement)
*)
module[@js.scope "HTMLTitleElement"] HTMLTitleElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTitleElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTitleElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTitleElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLTitleElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Retrieves or sets the text of the object as a string.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTitleElement/text)
  *)
  val get_text: 'tags this -> string [@@js.get "text"]
  
  (**
    Retrieves or sets the text of the object as a string.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTitleElement/text)
  *)
  val set_text: 'tags this -> string -> unit [@@js.set "text"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <time> elements.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTimeElement)
*)
module[@js.scope "HTMLTimeElement"] HTMLTimeElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTimeElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTimeElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTimeElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLTimeElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTimeElement/dateTime) *)
  val get_dateTime: 'tags this -> string [@@js.get "dateTime"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTimeElement/dateTime) *)
  val set_dateTime: 'tags this -> string -> unit [@@js.set "dateTime"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module SelectionMode : sig
  type t = ([`L_s364_end[@js "end"] | `L_s775_preserve[@js "preserve"] | `L_s867_select[@js "select"] | `L_s919_start[@js "start"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  Gives access to properties specific to <label> elements. It inherits methods and properties from the base HTMLElement interface.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLLabelElement)
*)
module[@js.scope "HTMLLabelElement"] HTMLLabelElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLLabelElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLLabelElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLLabelElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLLabelElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the form control that is associated with this element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLLabelElement/control)
  *)
  val get_control: 'tags this -> HTMLElement.t option [@@js.get "control"]
  
  (**
    Retrieves a reference to the form that the object is embedded in.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLLabelElement/form)
  *)
  val get_form: 'tags this -> HTMLFormElement.t option [@@js.get "form"]
  
  (**
    Sets or retrieves the object to which the given label object is assigned.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLLabelElement/htmlFor)
  *)
  val get_htmlFor: 'tags this -> string [@@js.get "htmlFor"]
  
  (**
    Sets or retrieves the object to which the given label object is assigned.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLLabelElement/htmlFor)
  *)
  val set_htmlFor: 'tags this -> string -> unit [@@js.set "htmlFor"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module AutoFill : sig
  type t = (([`L_s0[@js ""] | `L_s693_off[@js "off"] | `L_s698_on[@js "on"]] [@js.enum]), (* FIXME: unknown type '`${OptionalPrefixToken<AutoFillSection>}${OptionalPrefixToken<AutoFillAddressKind>}${AutoFillField}${OptionalPostfixToken<AutoFillCredentialField>}`' *)any) union2
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  Provides special properties and methods for manipulating the layout and presentation of <textarea> elements.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement)
*)
module[@js.scope "HTMLTextAreaElement"] HTMLTextAreaElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTextAreaElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTextAreaElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTextAreaElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLTextAreaElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/autocomplete) *)
  val get_autocomplete: 'tags this -> AutoFill.t [@@js.get "autocomplete"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/autocomplete) *)
  val set_autocomplete: 'tags this -> AutoFill.t -> unit [@@js.set "autocomplete"]
  
  (** Sets or retrieves the width of the object. *)
  val get_cols: 'tags this -> float [@@js.get "cols"]
  
  (** Sets or retrieves the width of the object. *)
  val set_cols: 'tags this -> float -> unit [@@js.set "cols"]
  
  (** Sets or retrieves the initial contents of the object. *)
  val get_defaultValue: 'tags this -> string [@@js.get "defaultValue"]
  
  (** Sets or retrieves the initial contents of the object. *)
  val set_defaultValue: 'tags this -> string -> unit [@@js.set "defaultValue"]
  val get_dirName: 'tags this -> string [@@js.get "dirName"]
  val set_dirName: 'tags this -> string -> unit [@@js.set "dirName"]
  val get_disabled: 'tags this -> bool [@@js.get "disabled"]
  val set_disabled: 'tags this -> bool -> unit [@@js.set "disabled"]
  
  (** Retrieves a reference to the form that the object is embedded in. *)
  val get_form: 'tags this -> HTMLFormElement.t option [@@js.get "form"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/labels) *)
  val get_labels: 'tags this -> HTMLLabelElement.t NodeListOf.t [@@js.get "labels"]
  
  (** Sets or retrieves the maximum number of characters that the user can enter in a text control. *)
  val get_maxLength: 'tags this -> float [@@js.get "maxLength"]
  
  (** Sets or retrieves the maximum number of characters that the user can enter in a text control. *)
  val set_maxLength: 'tags this -> float -> unit [@@js.set "maxLength"]
  val get_minLength: 'tags this -> float [@@js.get "minLength"]
  val set_minLength: 'tags this -> float -> unit [@@js.set "minLength"]
  
  (** Sets or retrieves the name of the object. *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (** Sets or retrieves the name of the object. *)
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  
  (** Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or type of information they need to enter.The text appears in an input field until the user puts focus on the field. *)
  val get_placeholder: 'tags this -> string [@@js.get "placeholder"]
  
  (** Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or type of information they need to enter.The text appears in an input field until the user puts focus on the field. *)
  val set_placeholder: 'tags this -> string -> unit [@@js.set "placeholder"]
  
  (** Sets or retrieves the value indicated whether the content of the object is read-only. *)
  val get_readOnly: 'tags this -> bool [@@js.get "readOnly"]
  
  (** Sets or retrieves the value indicated whether the content of the object is read-only. *)
  val set_readOnly: 'tags this -> bool -> unit [@@js.set "readOnly"]
  
  (** When present, marks an element that can't be submitted without a value. *)
  val get_required: 'tags this -> bool [@@js.get "required"]
  
  (** When present, marks an element that can't be submitted without a value. *)
  val set_required: 'tags this -> bool -> unit [@@js.set "required"]
  
  (** Sets or retrieves the number of horizontal rows contained in the object. *)
  val get_rows: 'tags this -> float [@@js.get "rows"]
  
  (** Sets or retrieves the number of horizontal rows contained in the object. *)
  val set_rows: 'tags this -> float -> unit [@@js.set "rows"]
  val get_selectionDirection: 'tags this -> ([`L_s179_backward[@js "backward"] | `L_s435_forward[@js "forward"] | `L_s685_none[@js "none"]] [@js.enum]) [@@js.get "selectionDirection"]
  val set_selectionDirection: 'tags this -> ([`U1 of ([`L_s435_forward[@js "forward"]] [@js.enum]) | `U2 of ([`L_s179_backward[@js "backward"]] [@js.enum]) | `U3 of ([`L_s685_none[@js "none"]] [@js.enum])] [@js.union]) -> unit [@@js.set "selectionDirection"]
  
  (** Gets or sets the end position or offset of a text selection. *)
  val get_selectionEnd: 'tags this -> float [@@js.get "selectionEnd"]
  
  (** Gets or sets the end position or offset of a text selection. *)
  val set_selectionEnd: 'tags this -> float -> unit [@@js.set "selectionEnd"]
  
  (** Gets or sets the starting position or offset of a text selection. *)
  val get_selectionStart: 'tags this -> float [@@js.get "selectionStart"]
  
  (** Gets or sets the starting position or offset of a text selection. *)
  val set_selectionStart: 'tags this -> float -> unit [@@js.set "selectionStart"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/textLength) *)
  val get_textLength: 'tags this -> float [@@js.get "textLength"]
  
  (** Retrieves the type of control. *)
  val get_type: 'tags this -> string [@@js.get "type"]
  
  (** Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting. *)
  val get_validationMessage: 'tags this -> string [@@js.get "validationMessage"]
  
  (** Returns a  ValidityState object that represents the validity states of an element. *)
  val get_validity: 'tags this -> ValidityState.t [@@js.get "validity"]
  
  (** Retrieves or sets the text in the entry field of the textArea element. *)
  val get_value: 'tags this -> string [@@js.get "value"]
  
  (** Retrieves or sets the text in the entry field of the textArea element. *)
  val set_value: 'tags this -> string -> unit [@@js.set "value"]
  
  (** Returns whether an element will successfully validate based on forms validation rules and constraints. *)
  val get_willValidate: 'tags this -> bool [@@js.get "willValidate"]
  
  (** Sets or retrieves how to handle wordwrapping in the object. *)
  val get_wrap: 'tags this -> string [@@js.get "wrap"]
  
  (** Sets or retrieves how to handle wordwrapping in the object. *)
  val set_wrap: 'tags this -> string -> unit [@@js.set "wrap"]
  
  (** Returns whether a form will validate when it is submitted, without having to submit it. *)
  val checkValidity: 'tags this -> bool [@@js.call "checkValidity"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/reportValidity) *)
  val reportValidity: 'tags this -> bool [@@js.call "reportValidity"]
  
  (** Highlights the input area of a form element. *)
  val select: 'tags this -> unit [@@js.call "select"]
  
  (**
    Sets a custom error message that is displayed when a form is submitted.
    @param error Sets a custom error message that is displayed when a form is submitted.
  *)
  val setCustomValidity: 'tags this -> error:string -> unit [@@js.call "setCustomValidity"]
  val setRangeText: 'tags this -> replacement:string -> unit [@@js.call "setRangeText"]
  val setRangeText': 'tags this -> replacement:string -> start:float -> end_:float -> ?selectionMode:SelectionMode.t -> unit -> unit [@@js.call "setRangeText"]
  
  (**
    Sets the start and end positions of a selection in a text field.
    @param start The offset into the text field for the start of the selection.
    @param end The offset into the text field for the end of the selection.
    @param direction The direction in which the selection is performed.
  *)
  val setSelectionRange: 'tags this -> start:float option -> end_:float option -> ?direction:([`U1 of ([`L_s435_forward[@js "forward"]] [@js.enum]) | `U2 of ([`L_s179_backward[@js "backward"]] [@js.enum]) | `U3 of ([`L_s685_none[@js "none"]] [@js.enum])] [@js.union]) -> unit -> unit [@@js.call "setSelectionRange"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Enables access to the contents of an HTML <template> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTemplateElement)
*)
module[@js.scope "HTMLTemplateElement"] HTMLTemplateElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTemplateElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTemplateElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTemplateElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLTemplateElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the template contents (a DocumentFragment).
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTemplateElement/content)
  *)
  val get_content: 'tags this -> DocumentFragment.t [@@js.get "content"]
  val get_shadowRootMode: 'tags this -> string [@@js.get "shadowRootMode"]
  val set_shadowRootMode: 'tags this -> string -> unit [@@js.set "shadowRootMode"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of rows in an HTML table.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement)
*)
module[@js.scope "HTMLTableRowElement"] HTMLTableRowElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTableRowElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTableRowElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTableRowElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLTableRowElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Sets or retrieves how the object is aligned with adjacent text.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/align)
  *)
  val get_align: 'tags this -> string [@@js.get "align"]
  
  (**
    Sets or retrieves how the object is aligned with adjacent text.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/align)
  *)
  val set_align: 'tags this -> string -> unit [@@js.set "align"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/bgColor) *)
  val get_bgColor: 'tags this -> string [@@js.get "bgColor"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/bgColor) *)
  val set_bgColor: 'tags this -> string -> unit [@@js.set "bgColor"]
  
  (**
    Retrieves a collection of all cells in the table row.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/cells)
  *)
  val get_cells: 'tags this -> HTMLTableCellElement.t HTMLCollectionOf.t [@@js.get "cells"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/ch) *)
  val get_ch: 'tags this -> string [@@js.get "ch"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/ch) *)
  val set_ch: 'tags this -> string -> unit [@@js.set "ch"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/chOff) *)
  val get_chOff: 'tags this -> string [@@js.get "chOff"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/chOff) *)
  val set_chOff: 'tags this -> string -> unit [@@js.set "chOff"]
  
  (**
    Retrieves the position of the object in the rows collection for the table.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/rowIndex)
  *)
  val get_rowIndex: 'tags this -> float [@@js.get "rowIndex"]
  
  (**
    Retrieves the position of the object in the collection.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/sectionRowIndex)
  *)
  val get_sectionRowIndex: 'tags this -> float [@@js.get "sectionRowIndex"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/vAlign) *)
  val get_vAlign: 'tags this -> string [@@js.get "vAlign"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/vAlign) *)
  val set_vAlign: 'tags this -> string -> unit [@@js.set "vAlign"]
  
  (**
    Removes the specified cell from the table row, as well as from the cells collection.
    @param index Number that specifies the zero-based position of the cell to remove from the table row. If no value is provided, the last cell in the cells collection is deleted.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/deleteCell)
  *)
  val deleteCell: 'tags this -> index:float -> unit [@@js.call "deleteCell"]
  
  (**
    Creates a new cell in the table row, and adds the cell to the cells collection.
    @param index Number that specifies where to insert the cell in the tr. The default value is -1, which appends the new cell to the end of the cells collection.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/insertCell)
  *)
  val insertCell: 'tags this -> ?index:float -> unit -> HTMLTableCellElement.t [@@js.call "insertCell"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of sections, that is headers, footers and bodies, in an HTML table.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement)
*)
module[@js.scope "HTMLTableSectionElement"] HTMLTableSectionElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTableSectionElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTableSectionElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTableSectionElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLTableSectionElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Sets or retrieves a value that indicates the table alignment.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/align)
  *)
  val get_align: 'tags this -> string [@@js.get "align"]
  
  (**
    Sets or retrieves a value that indicates the table alignment.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/align)
  *)
  val set_align: 'tags this -> string -> unit [@@js.set "align"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/ch) *)
  val get_ch: 'tags this -> string [@@js.get "ch"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/ch) *)
  val set_ch: 'tags this -> string -> unit [@@js.set "ch"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/chOff) *)
  val get_chOff: 'tags this -> string [@@js.get "chOff"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/chOff) *)
  val set_chOff: 'tags this -> string -> unit [@@js.set "chOff"]
  
  (**
    Sets or retrieves the number of horizontal rows contained in the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/rows)
  *)
  val get_rows: 'tags this -> HTMLTableRowElement.t HTMLCollectionOf.t [@@js.get "rows"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/vAlign) *)
  val get_vAlign: 'tags this -> string [@@js.get "vAlign"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/vAlign) *)
  val set_vAlign: 'tags this -> string -> unit [@@js.set "vAlign"]
  
  (**
    Removes the specified row (tr) from the element and from the rows collection.
    @param index Number that specifies the zero-based position in the rows collection of the row to remove.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/deleteRow)
  *)
  val deleteRow: 'tags this -> index:float -> unit [@@js.call "deleteRow"]
  
  (**
    Creates a new row (tr) in the table, and adds the row to the rows collection.
    @param index Number that specifies where to insert the row in the rows collection. The default value is -1, which appends the new row to the end of the rows collection.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/insertRow)
  *)
  val insertRow: 'tags this -> ?index:float -> unit -> HTMLTableRowElement.t [@@js.call "insertRow"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating table caption elements.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableCaptionElement)
*)
module[@js.scope "HTMLTableCaptionElement"] HTMLTableCaptionElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTableCaptionElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTableCaptionElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTableCaptionElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLTableCaptionElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Sets or retrieves the alignment of the caption or legend.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableCaptionElement/align)
  *)
  val get_align: 'tags this -> string [@@js.get "align"]
  
  (**
    Sets or retrieves the alignment of the caption or legend.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableCaptionElement/align)
  *)
  val set_align: 'tags this -> string -> unit [@@js.set "align"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides special properties and methods (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating the layout and presentation of tables in an HTML document.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableElement)
*)
module[@js.scope "HTMLTableElement"] HTMLTableElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTableElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTableElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTableElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLTableElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Sets or retrieves a value that indicates the table alignment.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/align)
  *)
  val get_align: 'tags this -> string [@@js.get "align"]
  
  (**
    Sets or retrieves a value that indicates the table alignment.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/align)
  *)
  val set_align: 'tags this -> string -> unit [@@js.set "align"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/bgColor) *)
  val get_bgColor: 'tags this -> string [@@js.get "bgColor"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/bgColor) *)
  val set_bgColor: 'tags this -> string -> unit [@@js.set "bgColor"]
  
  (**
    Sets or retrieves the width of the border to draw around the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/border)
  *)
  val get_border: 'tags this -> string [@@js.get "border"]
  
  (**
    Sets or retrieves the width of the border to draw around the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/border)
  *)
  val set_border: 'tags this -> string -> unit [@@js.set "border"]
  
  (**
    Retrieves the caption object of a table.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/caption)
  *)
  val get_caption: 'tags this -> HTMLTableCaptionElement.t option [@@js.get "caption"]
  
  (**
    Retrieves the caption object of a table.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/caption)
  *)
  val set_caption: 'tags this -> HTMLTableCaptionElement.t option -> unit [@@js.set "caption"]
  
  (**
    Sets or retrieves the amount of space between the border of the cell and the content of the cell.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/cellPadding)
  *)
  val get_cellPadding: 'tags this -> string [@@js.get "cellPadding"]
  
  (**
    Sets or retrieves the amount of space between the border of the cell and the content of the cell.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/cellPadding)
  *)
  val set_cellPadding: 'tags this -> string -> unit [@@js.set "cellPadding"]
  
  (**
    Sets or retrieves the amount of space between cells in a table.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/cellSpacing)
  *)
  val get_cellSpacing: 'tags this -> string [@@js.get "cellSpacing"]
  
  (**
    Sets or retrieves the amount of space between cells in a table.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/cellSpacing)
  *)
  val set_cellSpacing: 'tags this -> string -> unit [@@js.set "cellSpacing"]
  
  (**
    Sets or retrieves the way the border frame around the table is displayed.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/frame)
  *)
  val get_frame: 'tags this -> string [@@js.get "frame"]
  
  (**
    Sets or retrieves the way the border frame around the table is displayed.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/frame)
  *)
  val set_frame: 'tags this -> string -> unit [@@js.set "frame"]
  
  (**
    Sets or retrieves the number of horizontal rows contained in the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/rows)
  *)
  val get_rows: 'tags this -> HTMLTableRowElement.t HTMLCollectionOf.t [@@js.get "rows"]
  
  (**
    Sets or retrieves which dividing lines (inner borders) are displayed.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/rules)
  *)
  val get_rules: 'tags this -> string [@@js.get "rules"]
  
  (**
    Sets or retrieves which dividing lines (inner borders) are displayed.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/rules)
  *)
  val set_rules: 'tags this -> string -> unit [@@js.set "rules"]
  
  (**
    Sets or retrieves a description and/or structure of the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/summary)
  *)
  val get_summary: 'tags this -> string [@@js.get "summary"]
  
  (**
    Sets or retrieves a description and/or structure of the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/summary)
  *)
  val set_summary: 'tags this -> string -> unit [@@js.set "summary"]
  
  (**
    Retrieves a collection of all tBody objects in the table. Objects in this collection are in source order.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/tBodies)
  *)
  val get_tBodies: 'tags this -> HTMLTableSectionElement.t HTMLCollectionOf.t [@@js.get "tBodies"]
  
  (**
    Retrieves the tFoot object of the table.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/tFoot)
  *)
  val get_tFoot: 'tags this -> HTMLTableSectionElement.t option [@@js.get "tFoot"]
  
  (**
    Retrieves the tFoot object of the table.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/tFoot)
  *)
  val set_tFoot: 'tags this -> HTMLTableSectionElement.t option -> unit [@@js.set "tFoot"]
  
  (**
    Retrieves the tHead object of the table.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/tHead)
  *)
  val get_tHead: 'tags this -> HTMLTableSectionElement.t option [@@js.get "tHead"]
  
  (**
    Retrieves the tHead object of the table.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/tHead)
  *)
  val set_tHead: 'tags this -> HTMLTableSectionElement.t option -> unit [@@js.set "tHead"]
  
  (**
    Sets or retrieves the width of the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/width)
  *)
  val get_width: 'tags this -> string [@@js.get "width"]
  
  (**
    Sets or retrieves the width of the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/width)
  *)
  val set_width: 'tags this -> string -> unit [@@js.set "width"]
  
  (**
    Creates an empty caption element in the table.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/createCaption)
  *)
  val createCaption: 'tags this -> HTMLTableCaptionElement.t [@@js.call "createCaption"]
  
  (**
    Creates an empty tBody element in the table.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/createTBody)
  *)
  val createTBody: 'tags this -> HTMLTableSectionElement.t [@@js.call "createTBody"]
  
  (**
    Creates an empty tFoot element in the table.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/createTFoot)
  *)
  val createTFoot: 'tags this -> HTMLTableSectionElement.t [@@js.call "createTFoot"]
  
  (**
    Returns the tHead element object if successful, or null otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/createTHead)
  *)
  val createTHead: 'tags this -> HTMLTableSectionElement.t [@@js.call "createTHead"]
  
  (**
    Deletes the caption element and its contents from the table.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/deleteCaption)
  *)
  val deleteCaption: 'tags this -> unit [@@js.call "deleteCaption"]
  
  (**
    Removes the specified row (tr) from the element and from the rows collection.
    @param index Number that specifies the zero-based position in the rows collection of the row to remove.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/deleteRow)
  *)
  val deleteRow: 'tags this -> index:float -> unit [@@js.call "deleteRow"]
  
  (**
    Deletes the tFoot element and its contents from the table.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/deleteTFoot)
  *)
  val deleteTFoot: 'tags this -> unit [@@js.call "deleteTFoot"]
  
  (**
    Deletes the tHead element and its contents from the table.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/deleteTHead)
  *)
  val deleteTHead: 'tags this -> unit [@@js.call "deleteTHead"]
  
  (**
    Creates a new row (tr) in the table, and adds the row to the rows collection.
    @param index Number that specifies where to insert the row in the rows collection. The default value is -1, which appends the new row to the end of the rows collection.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/insertRow)
  *)
  val insertRow: 'tags this -> ?index:float -> unit -> HTMLTableRowElement.t [@@js.call "insertRow"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides special properties (beyond the HTMLElement interface it also has available to it inheritance) for manipulating single or grouped table column elements.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement)
*)
module[@js.scope "HTMLTableColElement"] HTMLTableColElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTableColElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTableColElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLTableColElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLTableColElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Sets or retrieves the alignment of the object relative to the display or table.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement/align)
  *)
  val get_align: 'tags this -> string [@@js.get "align"]
  
  (**
    Sets or retrieves the alignment of the object relative to the display or table.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement/align)
  *)
  val set_align: 'tags this -> string -> unit [@@js.set "align"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement/ch) *)
  val get_ch: 'tags this -> string [@@js.get "ch"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement/ch) *)
  val set_ch: 'tags this -> string -> unit [@@js.set "ch"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement/chOff) *)
  val get_chOff: 'tags this -> string [@@js.get "chOff"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement/chOff) *)
  val set_chOff: 'tags this -> string -> unit [@@js.set "chOff"]
  
  (**
    Sets or retrieves the number of columns in the group.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement/span)
  *)
  val get_span: 'tags this -> float [@@js.get "span"]
  
  (**
    Sets or retrieves the number of columns in the group.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement/span)
  *)
  val set_span: 'tags this -> float -> unit [@@js.set "span"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement/vAlign) *)
  val get_vAlign: 'tags this -> string [@@js.get "vAlign"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement/vAlign) *)
  val set_vAlign: 'tags this -> string -> unit [@@js.set "vAlign"]
  
  (**
    Sets or retrieves the width of the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement/width)
  *)
  val get_width: 'tags this -> string [@@js.get "width"]
  
  (**
    Sets or retrieves the width of the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement/width)
  *)
  val set_width: 'tags this -> string -> unit [@@js.set "width"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  A <style> element. It inherits properties and methods from its parent, HTMLElement, and from LinkStyle.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLStyleElement)
*)
module[@js.scope "HTMLStyleElement"] HTMLStyleElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLStyleElement | `InnerHTML | `LinkStyle | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLStyleElement | `InnerHTML | `LinkStyle | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLStyleElement | `InnerHTML | `LinkStyle | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLStyleElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Enables or disables the style sheet.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLStyleElement/disabled)
  *)
  val get_disabled: 'tags this -> bool [@@js.get "disabled"]
  
  (**
    Enables or disables the style sheet.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLStyleElement/disabled)
  *)
  val set_disabled: 'tags this -> bool -> unit [@@js.set "disabled"]
  
  (**
    Sets or retrieves the media type.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLStyleElement/media)
  *)
  val get_media: 'tags this -> string [@@js.get "media"]
  
  (**
    Sets or retrieves the media type.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLStyleElement/media)
  *)
  val set_media: 'tags this -> string -> unit [@@js.set "media"]
  
  (**
    Retrieves the CSS language in which the style sheet is written.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLStyleElement/type)
  *)
  val get_type: 'tags this -> string [@@js.get "type"]
  
  (**
    Retrieves the CSS language in which the style sheet is written.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLStyleElement/type)
  *)
  val set_type: 'tags this -> string -> unit [@@js.set "type"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  A <span> element and derives from the HTMLElement interface, but without implementing any additional properties or methods.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSpanElement)
*)
module[@js.scope "HTMLSpanElement"] HTMLSpanElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLSpanElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLSpanElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLSpanElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLSpanElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides special properties (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating <source> elements.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement)
*)
module[@js.scope "HTMLSourceElement"] HTMLSourceElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLSourceElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLSourceElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLSourceElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLSourceElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_height: 'tags this -> float [@@js.get "height"]
  val set_height: 'tags this -> float -> unit [@@js.set "height"]
  
  (**
    Gets or sets the intended media type of the media source.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/media)
  *)
  val get_media: 'tags this -> string [@@js.get "media"]
  
  (**
    Gets or sets the intended media type of the media source.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/media)
  *)
  val set_media: 'tags this -> string -> unit [@@js.set "media"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/sizes) *)
  val get_sizes: 'tags this -> string [@@js.get "sizes"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/sizes) *)
  val set_sizes: 'tags this -> string -> unit [@@js.set "sizes"]
  
  (**
    The address or URL of the a media resource that is to be considered.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/src)
  *)
  val get_src: 'tags this -> string [@@js.get "src"]
  
  (**
    The address or URL of the a media resource that is to be considered.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/src)
  *)
  val set_src: 'tags this -> string -> unit [@@js.set "src"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/srcset) *)
  val get_srcset: 'tags this -> string [@@js.get "srcset"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/srcset) *)
  val set_srcset: 'tags this -> string -> unit [@@js.set "srcset"]
  
  (**
    Gets or sets the MIME type of a media resource.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/type)
  *)
  val get_type: 'tags this -> string [@@js.get "type"]
  
  (**
    Gets or sets the MIME type of a media resource.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/type)
  *)
  val set_type: 'tags this -> string -> unit [@@js.set "type"]
  val get_width: 'tags this -> float [@@js.get "width"]
  val set_width: 'tags this -> float -> unit [@@js.set "width"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides special properties and methods (beyond the regular HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of <optgroup> elements.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOptGroupElement)
*)
module[@js.scope "HTMLOptGroupElement"] HTMLOptGroupElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOptGroupElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOptGroupElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOptGroupElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLOptGroupElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOptGroupElement/disabled) *)
  val get_disabled: 'tags this -> bool [@@js.get "disabled"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOptGroupElement/disabled) *)
  val set_disabled: 'tags this -> bool -> unit [@@js.set "disabled"]
  
  (**
    Sets or retrieves a value that you can use to implement your own label functionality for the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOptGroupElement/label)
  *)
  val get_label: 'tags this -> string [@@js.get "label"]
  
  (**
    Sets or retrieves a value that you can use to implement your own label functionality for the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOptGroupElement/label)
  *)
  val set_label: 'tags this -> string -> unit [@@js.set "label"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  HTMLOptionsCollection is an interface representing a collection of HTML option elements (in document order) and offers methods and properties for traversing the list as well as optionally altering its items. This type is returned solely by the "options" property of select.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOptionsCollection)
*)
module[@js.scope "HTMLOptionsCollection"] HTMLOptionsCollection : sig
  type t = [`HTMLCollectionBase | `HTMLCollectionOf of HTMLOptionElement.t | `HTMLOptionsCollection] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`HTMLCollectionBase | `HTMLCollectionOf of HTMLOptionElement.t | `HTMLOptionsCollection]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`HTMLCollectionBase | `HTMLCollectionOf of HTMLOptionElement.t | `HTMLOptionsCollection]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLOptionsCollection ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the number of elements in the collection.
    
    When set to a smaller number, truncates the number of option elements in the corresponding container.
    
    When set to a greater number, adds new blank option elements to that container.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOptionsCollection/length)
  *)
  val get_length: 'tags this -> float [@@js.get "length"]
  
  (**
    Returns the number of elements in the collection.
    
    When set to a smaller number, truncates the number of option elements in the corresponding container.
    
    When set to a greater number, adds new blank option elements to that container.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOptionsCollection/length)
  *)
  val set_length: 'tags this -> float -> unit [@@js.set "length"]
  
  (**
    Returns the index of the first selected item, if any, or â1 if there is no selected item.
    
    Can be set, to change the selection.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOptionsCollection/selectedIndex)
  *)
  val get_selectedIndex: 'tags this -> float [@@js.get "selectedIndex"]
  
  (**
    Returns the index of the first selected item, if any, or â1 if there is no selected item.
    
    Can be set, to change the selection.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOptionsCollection/selectedIndex)
  *)
  val set_selectedIndex: 'tags this -> float -> unit [@@js.set "selectedIndex"]
  
  (**
    Inserts element before the node given by before.
    
    The before argument can be a number, in which case element is inserted before the item with that number, or an element from the collection, in which case element is inserted before that element.
    
    If before is omitted, null, or a number out of range, then element will be added at the end of the list.
    
    This method will throw a "HierarchyRequestError" DOMException if element is an ancestor of the element into which it is to be inserted.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOptionsCollection/add)
  *)
  val add: 'tags this -> element:([`U1 of HTMLOptionElement.t | `U2 of HTMLOptGroupElement.t] [@js.union]) -> ?before:([`Null | `U1 of HTMLElement.t | `U2 of float] [@js.union]) -> unit -> unit [@@js.call "add"]
  
  (**
    Removes the item with index index from the collection.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOptionsCollection/remove)
  *)
  val remove: 'tags this -> index:float -> unit [@@js.call "remove"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  A <select> HTML Element. These elements also share all of the properties and methods of other HTML elements via the HTMLElement interface.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement)
*)
module[@js.scope "HTMLSelectElement"] HTMLSelectElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLSelectElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLSelectElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLSelectElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLSelectElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> HTMLOptionElement.t IterableIterator.t *)
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/autocomplete) *)
  val get_autocomplete: 'tags this -> AutoFill.t [@@js.get "autocomplete"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/autocomplete) *)
  val set_autocomplete: 'tags this -> AutoFill.t -> unit [@@js.set "autocomplete"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/disabled) *)
  val get_disabled: 'tags this -> bool [@@js.get "disabled"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/disabled) *)
  val set_disabled: 'tags this -> bool -> unit [@@js.set "disabled"]
  
  (**
    Retrieves a reference to the form that the object is embedded in.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/form)
  *)
  val get_form: 'tags this -> HTMLFormElement.t option [@@js.get "form"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/labels) *)
  val get_labels: 'tags this -> HTMLLabelElement.t NodeListOf.t [@@js.get "labels"]
  
  (**
    Sets or retrieves the number of objects in a collection.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/length)
  *)
  val get_length: 'tags this -> float [@@js.get "length"]
  
  (**
    Sets or retrieves the number of objects in a collection.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/length)
  *)
  val set_length: 'tags this -> float -> unit [@@js.set "length"]
  
  (**
    Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/multiple)
  *)
  val get_multiple: 'tags this -> bool [@@js.get "multiple"]
  
  (**
    Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/multiple)
  *)
  val set_multiple: 'tags this -> bool -> unit [@@js.set "multiple"]
  
  (**
    Sets or retrieves the name of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/name)
  *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (**
    Sets or retrieves the name of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/name)
  *)
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  
  (**
    Returns an HTMLOptionsCollection of the list of options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/options)
  *)
  val get_options: 'tags this -> HTMLOptionsCollection.t [@@js.get "options"]
  
  (**
    When present, marks an element that can't be submitted without a value.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/required)
  *)
  val get_required: 'tags this -> bool [@@js.get "required"]
  
  (**
    When present, marks an element that can't be submitted without a value.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/required)
  *)
  val set_required: 'tags this -> bool -> unit [@@js.set "required"]
  
  (**
    Sets or retrieves the index of the selected option in a select object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/selectedIndex)
  *)
  val get_selectedIndex: 'tags this -> float [@@js.get "selectedIndex"]
  
  (**
    Sets or retrieves the index of the selected option in a select object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/selectedIndex)
  *)
  val set_selectedIndex: 'tags this -> float -> unit [@@js.set "selectedIndex"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/selectedOptions) *)
  val get_selectedOptions: 'tags this -> HTMLOptionElement.t HTMLCollectionOf.t [@@js.get "selectedOptions"]
  
  (**
    Sets or retrieves the number of rows in the list box.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/size)
  *)
  val get_size: 'tags this -> float [@@js.get "size"]
  
  (**
    Sets or retrieves the number of rows in the list box.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/size)
  *)
  val set_size: 'tags this -> float -> unit [@@js.set "size"]
  
  (**
    Retrieves the type of select control based on the value of the MULTIPLE attribute.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/type)
  *)
  val get_type: 'tags this -> string [@@js.get "type"]
  
  (**
    Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/validationMessage)
  *)
  val get_validationMessage: 'tags this -> string [@@js.get "validationMessage"]
  
  (**
    Returns a  ValidityState object that represents the validity states of an element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/validity)
  *)
  val get_validity: 'tags this -> ValidityState.t [@@js.get "validity"]
  
  (**
    Sets or retrieves the value which is returned to the server when the form control is submitted.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/value)
  *)
  val get_value: 'tags this -> string [@@js.get "value"]
  
  (**
    Sets or retrieves the value which is returned to the server when the form control is submitted.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/value)
  *)
  val set_value: 'tags this -> string -> unit [@@js.set "value"]
  
  (**
    Returns whether an element will successfully validate based on forms validation rules and constraints.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/willValidate)
  *)
  val get_willValidate: 'tags this -> bool [@@js.get "willValidate"]
  
  (**
    Adds an element to the areas, controlRange, or options collection.
    @param element Variant of type Number that specifies the index position in the collection where the element is placed. If no value is given, the method places the element at the end of the collection.
    @param before Variant of type Object that specifies an element to insert before, or null to append the object to the collection.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/add)
  *)
  val add: 'tags this -> element:([`U1 of HTMLOptionElement.t | `U2 of HTMLOptGroupElement.t] [@js.union]) -> ?before:([`Null | `U1 of HTMLElement.t | `U2 of float] [@js.union]) -> unit -> unit [@@js.call "add"]
  
  (**
    Returns whether a form will validate when it is submitted, without having to submit it.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/checkValidity)
  *)
  val checkValidity: 'tags this -> bool [@@js.call "checkValidity"]
  
  (**
    Retrieves a select object or an object from an options collection.
    @param name Variant of type Number or String that specifies the object or collection to retrieve. If this parameter is an integer, it is the zero-based index of the object. If this parameter is a string, all objects with matching name or id properties are retrieved, and a collection is returned if more than one match is made.
    @param index Variant of type Number that specifies the zero-based index of the object to retrieve when a collection is returned.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/item)
  *)
  val item: 'tags this -> index:float -> HTMLOptionElement.t option [@@js.call "item"]
  
  (**
    Retrieves a select object or an object from an options collection.
    @param namedItem A String that specifies the name or id property of the object to retrieve. A collection is returned if more than one match is made.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/namedItem)
  *)
  val namedItem: 'tags this -> name:string -> HTMLOptionElement.t option [@@js.call "namedItem"]
  
  (**
    Removes an element from the collection.
    @param index Number that specifies the zero-based index of the element to remove from the collection.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/remove)
  *)
  val remove: 'tags this -> unit [@@js.call "remove"]
  
  (**
    Removes node.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CharacterData/remove)
  *)
  val remove': 'tags this -> index:float -> unit [@@js.call "remove"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/reportValidity) *)
  val reportValidity: 'tags this -> bool [@@js.call "reportValidity"]
  
  (**
    Sets a custom error message that is displayed when a form is submitted.
    @param error Sets a custom error message that is displayed when a form is submitted.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/setCustomValidity)
  *)
  val setCustomValidity: 'tags this -> error:string -> unit [@@js.call "setCustomValidity"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/showPicker) *)
  val showPicker: 'tags this -> unit [@@js.call "showPicker"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val get: 'tags this -> float -> (HTMLOptGroupElement.t, HTMLOptionElement.t) union2 [@@js.index_get]
  val set: 'tags this -> float -> ([`U1 of HTMLOptionElement.t | `U2 of HTMLOptGroupElement.t] [@js.union]) -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating quoting elements, like <blockquote> and <q>, but not the <cite> element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLQuoteElement)
*)
module[@js.scope "HTMLQuoteElement"] HTMLQuoteElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLQuoteElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLQuoteElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLQuoteElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLQuoteElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Sets or retrieves reference information about the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLQuoteElement/cite)
  *)
  val get_cite: 'tags this -> string [@@js.get "cite"]
  
  (**
    Sets or retrieves reference information about the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLQuoteElement/cite)
  *)
  val set_cite: 'tags this -> string -> unit [@@js.set "cite"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <progress> elements.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLProgressElement)
*)
module[@js.scope "HTMLProgressElement"] HTMLProgressElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLProgressElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLProgressElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLProgressElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLProgressElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLProgressElement/labels) *)
  val get_labels: 'tags this -> HTMLLabelElement.t NodeListOf.t [@@js.get "labels"]
  
  (**
    Defines the maximum, or "done" value for a progress element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLProgressElement/max)
  *)
  val get_max: 'tags this -> float [@@js.get "max"]
  
  (**
    Defines the maximum, or "done" value for a progress element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLProgressElement/max)
  *)
  val set_max: 'tags this -> float -> unit [@@js.set "max"]
  
  (**
    Returns the quotient of value/max when the value attribute is set (determinate progress bar), or -1 when the value attribute is missing (indeterminate progress bar).
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLProgressElement/position)
  *)
  val get_position: 'tags this -> float [@@js.get "position"]
  
  (**
    Sets or gets the current value of a progress element. The value must be a non-negative number between 0 and the max value.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLProgressElement/value)
  *)
  val get_value: 'tags this -> float [@@js.get "value"]
  
  (**
    Sets or gets the current value of a progress element. The value must be a non-negative number between 0 and the max value.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLProgressElement/value)
  *)
  val set_value: 'tags this -> float -> unit [@@js.set "value"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  A <picture> HTML element. It doesn't implement specific properties or methods.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLPictureElement)
*)
module[@js.scope "HTMLPictureElement"] HTMLPictureElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLPictureElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLPictureElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLPictureElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLPictureElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides special properties (beyond those of the regular HTMLElement object interface it inherits) for manipulating <p> elements.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLParagraphElement)
*)
module[@js.scope "HTMLParagraphElement"] HTMLParagraphElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLParagraphElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLParagraphElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLParagraphElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLParagraphElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Sets or retrieves how the object is aligned with adjacent text.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLParagraphElement/align)
  *)
  val get_align: 'tags this -> string [@@js.get "align"]
  
  (**
    Sets or retrieves how the object is aligned with adjacent text.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLParagraphElement/align)
  *)
  val set_align: 'tags this -> string -> unit [@@js.set "align"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides properties and methods (beyond those inherited from HTMLElement) for manipulating the layout and presentation of <output> elements.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement)
*)
module[@js.scope "HTMLOutputElement"] HTMLOutputElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLOutputElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLOutputElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOrSVGElement | `HTMLOutputElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLOutputElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/defaultValue) *)
  val get_defaultValue: 'tags this -> string [@@js.get "defaultValue"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/defaultValue) *)
  val set_defaultValue: 'tags this -> string -> unit [@@js.set "defaultValue"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/form) *)
  val get_form: 'tags this -> HTMLFormElement.t option [@@js.get "form"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/htmlFor) *)
  val get_htmlFor: 'tags this -> DOMTokenList.t [@@js.get "htmlFor"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/labels) *)
  val get_labels: 'tags this -> HTMLLabelElement.t NodeListOf.t [@@js.get "labels"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/name) *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/name) *)
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  
  (**
    Returns the string "output".
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/type)
  *)
  val get_type: 'tags this -> string [@@js.get "type"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/validationMessage) *)
  val get_validationMessage: 'tags this -> string [@@js.get "validationMessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/validity) *)
  val get_validity: 'tags this -> ValidityState.t [@@js.get "validity"]
  
  (**
    Returns the element's current value.
    
    Can be set, to change the value.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/value)
  *)
  val get_value: 'tags this -> string [@@js.get "value"]
  
  (**
    Returns the element's current value.
    
    Can be set, to change the value.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/value)
  *)
  val set_value: 'tags this -> string -> unit [@@js.set "value"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/willValidate) *)
  val get_willValidate: 'tags this -> bool [@@js.get "willValidate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/checkValidity) *)
  val checkValidity: 'tags this -> bool [@@js.call "checkValidity"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/reportValidity) *)
  val reportValidity: 'tags this -> bool [@@js.call "reportValidity"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/setCustomValidity) *)
  val setCustomValidity: 'tags this -> error:string -> unit [@@js.call "setCustomValidity"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides special properties and methods (beyond those on the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <object> element, representing external resources.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement)
*)
module[@js.scope "HTMLObjectElement"] HTMLObjectElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLObjectElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLObjectElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLObjectElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLObjectElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/align) *)
  val get_align: 'tags this -> string [@@js.get "align"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/align) *)
  val set_align: 'tags this -> string -> unit [@@js.set "align"]
  
  (**
    Sets or retrieves a character string that can be used to implement your own archive functionality for the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/archive)
  *)
  val get_archive: 'tags this -> string [@@js.get "archive"]
  
  (**
    Sets or retrieves a character string that can be used to implement your own archive functionality for the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/archive)
  *)
  val set_archive: 'tags this -> string -> unit [@@js.set "archive"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/border) *)
  val get_border: 'tags this -> string [@@js.get "border"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/border) *)
  val set_border: 'tags this -> string -> unit [@@js.set "border"]
  
  (**
    Sets or retrieves the URL of the file containing the compiled Java class.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/code)
  *)
  val get_code: 'tags this -> string [@@js.get "code"]
  
  (**
    Sets or retrieves the URL of the file containing the compiled Java class.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/code)
  *)
  val set_code: 'tags this -> string -> unit [@@js.set "code"]
  
  (**
    Sets or retrieves the URL of the component.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/codeBase)
  *)
  val get_codeBase: 'tags this -> string [@@js.get "codeBase"]
  
  (**
    Sets or retrieves the URL of the component.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/codeBase)
  *)
  val set_codeBase: 'tags this -> string -> unit [@@js.set "codeBase"]
  
  (**
    Sets or retrieves the Internet media type for the code associated with the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/codeType)
  *)
  val get_codeType: 'tags this -> string [@@js.get "codeType"]
  
  (**
    Sets or retrieves the Internet media type for the code associated with the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/codeType)
  *)
  val set_codeType: 'tags this -> string -> unit [@@js.set "codeType"]
  
  (**
    Retrieves the document object of the page or frame.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/contentDocument)
  *)
  val get_contentDocument: 'tags this -> Document.t option [@@js.get "contentDocument"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/contentWindow) *)
  val get_contentWindow: 'tags this -> WindowProxy.t option [@@js.get "contentWindow"]
  
  (**
    Sets or retrieves the URL that references the data of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/data)
  *)
  val get_data: 'tags this -> string [@@js.get "data"]
  
  (**
    Sets or retrieves the URL that references the data of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/data)
  *)
  val set_data: 'tags this -> string -> unit [@@js.set "data"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/declare) *)
  val get_declare: 'tags this -> bool [@@js.get "declare"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/declare) *)
  val set_declare: 'tags this -> bool -> unit [@@js.set "declare"]
  
  (**
    Retrieves a reference to the form that the object is embedded in.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/form)
  *)
  val get_form: 'tags this -> HTMLFormElement.t option [@@js.get "form"]
  
  (**
    Sets or retrieves the height of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/height)
  *)
  val get_height: 'tags this -> string [@@js.get "height"]
  
  (**
    Sets or retrieves the height of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/height)
  *)
  val set_height: 'tags this -> string -> unit [@@js.set "height"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/hspace) *)
  val get_hspace: 'tags this -> float [@@js.get "hspace"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/hspace) *)
  val set_hspace: 'tags this -> float -> unit [@@js.set "hspace"]
  
  (**
    Sets or retrieves the name of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/name)
  *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (**
    Sets or retrieves the name of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/name)
  *)
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  
  (**
    Sets or retrieves a message to be displayed while an object is loading.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/standby)
  *)
  val get_standby: 'tags this -> string [@@js.get "standby"]
  
  (**
    Sets or retrieves a message to be displayed while an object is loading.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/standby)
  *)
  val set_standby: 'tags this -> string -> unit [@@js.set "standby"]
  
  (**
    Sets or retrieves the MIME type of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/type)
  *)
  val get_type: 'tags this -> string [@@js.get "type"]
  
  (**
    Sets or retrieves the MIME type of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/type)
  *)
  val set_type: 'tags this -> string -> unit [@@js.set "type"]
  
  (**
    Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/useMap)
  *)
  val get_useMap: 'tags this -> string [@@js.get "useMap"]
  
  (**
    Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/useMap)
  *)
  val set_useMap: 'tags this -> string -> unit [@@js.set "useMap"]
  
  (**
    Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/validationMessage)
  *)
  val get_validationMessage: 'tags this -> string [@@js.get "validationMessage"]
  
  (**
    Returns a  ValidityState object that represents the validity states of an element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/validity)
  *)
  val get_validity: 'tags this -> ValidityState.t [@@js.get "validity"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/vspace) *)
  val get_vspace: 'tags this -> float [@@js.get "vspace"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/vspace) *)
  val set_vspace: 'tags this -> float -> unit [@@js.set "vspace"]
  
  (**
    Sets or retrieves the width of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/width)
  *)
  val get_width: 'tags this -> string [@@js.get "width"]
  
  (**
    Sets or retrieves the width of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/width)
  *)
  val set_width: 'tags this -> string -> unit [@@js.set "width"]
  
  (**
    Returns whether an element will successfully validate based on forms validation rules and constraints.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/willValidate)
  *)
  val get_willValidate: 'tags this -> bool [@@js.get "willValidate"]
  
  (**
    Returns whether a form will validate when it is submitted, without having to submit it.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/checkValidity)
  *)
  val checkValidity: 'tags this -> bool [@@js.call "checkValidity"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/getSVGDocument) *)
  val getSVGDocument: 'tags this -> Document.t option [@@js.call "getSVGDocument"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/reportValidity) *)
  val reportValidity: 'tags this -> bool [@@js.call "reportValidity"]
  
  (**
    Sets a custom error message that is displayed when a form is submitted.
    @param error Sets a custom error message that is displayed when a form is submitted.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/setCustomValidity)
  *)
  val setCustomValidity: 'tags this -> error:string -> unit [@@js.call "setCustomValidity"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating ordered list elements.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOListElement)
*)
module[@js.scope "HTMLOListElement"] HTMLOListElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOListElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOListElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLOListElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLOListElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOListElement/compact) *)
  val get_compact: 'tags this -> bool [@@js.get "compact"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOListElement/compact) *)
  val set_compact: 'tags this -> bool -> unit [@@js.set "compact"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOListElement/reversed) *)
  val get_reversed: 'tags this -> bool [@@js.get "reversed"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOListElement/reversed) *)
  val set_reversed: 'tags this -> bool -> unit [@@js.set "reversed"]
  
  (**
    The starting number.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOListElement/start)
  *)
  val get_start: 'tags this -> float [@@js.get "start"]
  
  (**
    The starting number.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOListElement/start)
  *)
  val set_start: 'tags this -> float -> unit [@@js.set "start"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOListElement/type) *)
  val get_type: 'tags this -> string [@@js.get "type"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLOListElement/type) *)
  val set_type: 'tags this -> string -> unit [@@js.set "type"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides special properties (beyond the regular methods and properties available through the HTMLElement interface they also have available to them by inheritance) for manipulating modification elements, that is <del> and <ins>.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLModElement)
*)
module[@js.scope "HTMLModElement"] HTMLModElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLModElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLModElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLModElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLModElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Sets or retrieves reference information about the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLModElement/cite)
  *)
  val get_cite: 'tags this -> string [@@js.get "cite"]
  
  (**
    Sets or retrieves reference information about the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLModElement/cite)
  *)
  val set_cite: 'tags this -> string -> unit [@@js.set "cite"]
  
  (**
    Sets or retrieves the date and time of a modification to the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLModElement/dateTime)
  *)
  val get_dateTime: 'tags this -> string [@@js.get "dateTime"]
  
  (**
    Sets or retrieves the date and time of a modification to the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLModElement/dateTime)
  *)
  val set_dateTime: 'tags this -> string -> unit [@@js.set "dateTime"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  The HTML <meter> elements expose the HTMLMeterElement interface, which provides special properties and methods (beyond the HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of <meter> elements.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement)
*)
module[@js.scope "HTMLMeterElement"] HTMLMeterElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLMeterElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLMeterElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLMeterElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLMeterElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/high) *)
  val get_high: 'tags this -> float [@@js.get "high"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/high) *)
  val set_high: 'tags this -> float -> unit [@@js.set "high"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/labels) *)
  val get_labels: 'tags this -> HTMLLabelElement.t NodeListOf.t [@@js.get "labels"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/low) *)
  val get_low: 'tags this -> float [@@js.get "low"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/low) *)
  val set_low: 'tags this -> float -> unit [@@js.set "low"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/max) *)
  val get_max: 'tags this -> float [@@js.get "max"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/max) *)
  val set_max: 'tags this -> float -> unit [@@js.set "max"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/min) *)
  val get_min: 'tags this -> float [@@js.get "min"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/min) *)
  val set_min: 'tags this -> float -> unit [@@js.set "min"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/optimum) *)
  val get_optimum: 'tags this -> float [@@js.get "optimum"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/optimum) *)
  val set_optimum: 'tags this -> float -> unit [@@js.set "optimum"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/value) *)
  val get_value: 'tags this -> float [@@js.get "value"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/value) *)
  val set_value: 'tags this -> float -> unit [@@js.set "value"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Contains descriptive metadata about a document. ItÂ inherits all of the properties and methods described in the HTMLElement interface.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMetaElement)
*)
module[@js.scope "HTMLMetaElement"] HTMLMetaElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLMetaElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLMetaElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLMetaElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLMetaElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** Gets or sets meta-information to associate with httpEquiv or name. *)
  val get_content: 'tags this -> string [@@js.get "content"]
  
  (** Gets or sets meta-information to associate with httpEquiv or name. *)
  val set_content: 'tags this -> string -> unit [@@js.set "content"]
  
  (** Gets or sets information used to bind the value of a content attribute of a meta element to an HTTP response header. *)
  val get_httpEquiv: 'tags this -> string [@@js.get "httpEquiv"]
  
  (** Gets or sets information used to bind the value of a content attribute of a meta element to an HTTP response header. *)
  val set_httpEquiv: 'tags this -> string -> unit [@@js.set "httpEquiv"]
  val get_media: 'tags this -> string [@@js.get "media"]
  val set_media: 'tags this -> string -> unit [@@js.set "media"]
  
  (** Sets or retrieves the value specified in the content attribute of the meta object. *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (** Sets or retrieves the value specified in the content attribute of the meta object. *)
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  
  (**
    Sets or retrieves a scheme to be used in interpreting the value of a property specified for the object.
    @deprecated 
  *)
  val get_scheme: 'tags this -> string [@@js.get "scheme"]
  
  (**
    Sets or retrieves a scheme to be used in interpreting the value of a property specified for the object.
    @deprecated 
  *)
  val set_scheme: 'tags this -> string -> unit [@@js.set "scheme"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMenuElement) *)
module[@js.scope "HTMLMenuElement"] HTMLMenuElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLMenuElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLMenuElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLMenuElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLMenuElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMenuElement/compact) *)
  val get_compact: 'tags this -> bool [@@js.get "compact"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMenuElement/compact) *)
  val set_compact: 'tags this -> bool -> unit [@@js.set "compact"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of map elements.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMapElement)
*)
module[@js.scope "HTMLMapElement"] HTMLMapElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLMapElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLMapElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLMapElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLMapElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Retrieves a collection of the area objects defined for the given map object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMapElement/areas)
  *)
  val get_areas: 'tags this -> HTMLCollection.t [@@js.get "areas"]
  
  (**
    Sets or retrieves the name of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMapElement/name)
  *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (**
    Sets or retrieves the name of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMapElement/name)
  *)
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Reference information for external resources and the relationship of those resources to a document and vice-versa. This object inherits all of the properties and methods of the HTMLElement interface.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement)
*)
module[@js.scope "HTMLLinkElement"] HTMLLinkElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLLinkElement | `HTMLOrSVGElement | `InnerHTML | `LinkStyle | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLLinkElement | `HTMLOrSVGElement | `InnerHTML | `LinkStyle | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLLinkElement | `HTMLOrSVGElement | `InnerHTML | `LinkStyle | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLLinkElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/as) *)
  val get_as: 'tags this -> string [@@js.get "as"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/as) *)
  val set_as: 'tags this -> string -> unit [@@js.set "as"]
  
  (**
    Sets or retrieves the character set used to encode the object.
    @deprecated 
  *)
  val get_charset: 'tags this -> string [@@js.get "charset"]
  
  (**
    Sets or retrieves the character set used to encode the object.
    @deprecated 
  *)
  val set_charset: 'tags this -> string -> unit [@@js.set "charset"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/crossOrigin) *)
  val get_crossOrigin: 'tags this -> string option [@@js.get "crossOrigin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/crossOrigin) *)
  val set_crossOrigin: 'tags this -> string option -> unit [@@js.set "crossOrigin"]
  val get_disabled: 'tags this -> bool [@@js.get "disabled"]
  val set_disabled: 'tags this -> bool -> unit [@@js.set "disabled"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/fetchPriority) *)
  val get_fetchPriority: 'tags this -> string [@@js.get "fetchPriority"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/fetchPriority) *)
  val set_fetchPriority: 'tags this -> string -> unit [@@js.set "fetchPriority"]
  
  (**
    Sets or retrieves a destination URL or an anchor point.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/href)
  *)
  val get_href: 'tags this -> string [@@js.get "href"]
  
  (**
    Sets or retrieves a destination URL or an anchor point.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/href)
  *)
  val set_href: 'tags this -> string -> unit [@@js.set "href"]
  
  (**
    Sets or retrieves the language code of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/hreflang)
  *)
  val get_hreflang: 'tags this -> string [@@js.get "hreflang"]
  
  (**
    Sets or retrieves the language code of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/hreflang)
  *)
  val set_hreflang: 'tags this -> string -> unit [@@js.set "hreflang"]
  val get_imageSizes: 'tags this -> string [@@js.get "imageSizes"]
  val set_imageSizes: 'tags this -> string -> unit [@@js.set "imageSizes"]
  val get_imageSrcset: 'tags this -> string [@@js.get "imageSrcset"]
  val set_imageSrcset: 'tags this -> string -> unit [@@js.set "imageSrcset"]
  val get_integrity: 'tags this -> string [@@js.get "integrity"]
  val set_integrity: 'tags this -> string -> unit [@@js.set "integrity"]
  
  (** Sets or retrieves the media type. *)
  val get_media: 'tags this -> string [@@js.get "media"]
  
  (** Sets or retrieves the media type. *)
  val set_media: 'tags this -> string -> unit [@@js.set "media"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/referrerPolicy) *)
  val get_referrerPolicy: 'tags this -> string [@@js.get "referrerPolicy"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/referrerPolicy) *)
  val set_referrerPolicy: 'tags this -> string -> unit [@@js.set "referrerPolicy"]
  
  (**
    Sets or retrieves the relationship between the object and the destination of the link.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/rel)
  *)
  val get_rel: 'tags this -> string [@@js.get "rel"]
  
  (**
    Sets or retrieves the relationship between the object and the destination of the link.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/rel)
  *)
  val set_rel: 'tags this -> string -> unit [@@js.set "rel"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/relList) *)
  val get_relList: 'tags this -> DOMTokenList.t [@@js.get "relList"]
  
  (**
    Sets or retrieves the relationship between the object and the destination of the link.
    @deprecated 
  *)
  val get_rev: 'tags this -> string [@@js.get "rev"]
  
  (**
    Sets or retrieves the relationship between the object and the destination of the link.
    @deprecated 
  *)
  val set_rev: 'tags this -> string -> unit [@@js.set "rev"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/sizes) *)
  val get_sizes: 'tags this -> DOMTokenList.t [@@js.get "sizes"]
  
  (**
    Sets or retrieves the window or frame at which to target content.
    @deprecated 
  *)
  val get_target: 'tags this -> string [@@js.get "target"]
  
  (**
    Sets or retrieves the window or frame at which to target content.
    @deprecated 
  *)
  val set_target: 'tags this -> string -> unit [@@js.set "target"]
  
  (** Sets or retrieves the MIME type of the object. *)
  val get_type: 'tags this -> string [@@js.get "type"]
  
  (** Sets or retrieves the MIME type of the object. *)
  val set_type: 'tags this -> string -> unit [@@js.set "type"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  The HTMLLegendElement is an interface allowing to access properties of the <legend> elements. It inherits properties and methods from the HTMLElement interface.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLLegendElement)
*)
module[@js.scope "HTMLLegendElement"] HTMLLegendElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLLegendElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLLegendElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLLegendElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLLegendElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** @deprecated  *)
  val get_align: 'tags this -> string [@@js.get "align"]
  
  (** @deprecated  *)
  val set_align: 'tags this -> string -> unit [@@js.set "align"]
  
  (** Retrieves a reference to the form that the object is embedded in. *)
  val get_form: 'tags this -> HTMLFormElement.t option [@@js.get "form"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Exposes specific properties and methods (beyond those defined by regular HTMLElement interface it also has available to it by inheritance) for manipulating list elements.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLLIElement)
*)
module[@js.scope "HTMLLIElement"] HTMLLIElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLLIElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLLIElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLLIElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLLIElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** @deprecated  *)
  val get_type: 'tags this -> string [@@js.get "type"]
  
  (** @deprecated  *)
  val set_type: 'tags this -> string -> unit [@@js.set "type"]
  
  (** Sets or retrieves the value of a list item. *)
  val get_value: 'tags this -> float [@@js.get "value"]
  
  (** Sets or retrieves the value of a list item. *)
  val set_value: 'tags this -> float -> unit [@@js.set "value"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides special properties (beyond the HTMLElement object interface it also has available to it by inheritance) to manipulate <datalist> elements and their content.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLDataListElement)
*)
module[@js.scope "HTMLDataListElement"] HTMLDataListElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLDataListElement | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLDataListElement | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLDataListElement | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLDataListElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns an HTMLCollection of the option elements of the datalist element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLDataListElement/options)
  *)
  val get_options: 'tags this -> HTMLOptionElement.t HTMLCollectionOf.t [@@js.get "options"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module PopoverInvokerElement : sig
  type t = [`PopoverInvokerElement] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PopoverInvokerElement]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PopoverInvokerElement]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PopoverInvokerElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/popoverTargetAction) *)
  val get_popoverTargetAction: 'tags this -> string [@@js.get "popoverTargetAction"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/popoverTargetAction) *)
  val set_popoverTargetAction: 'tags this -> string -> unit [@@js.set "popoverTargetAction"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/popoverTargetElement) *)
  val get_popoverTargetElement: 'tags this -> Element.t option [@@js.get "popoverTargetElement"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/popoverTargetElement) *)
  val set_popoverTargetElement: 'tags this -> Element.t option -> unit [@@js.set "popoverTargetElement"]
  val create: popoverTargetAction:string -> ?popoverTargetElement:Element.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  Provides special properties and methods for manipulating the options, layout, and presentation of <input> elements.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement)
*)
module[@js.scope "HTMLInputElement"] HTMLInputElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLInputElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `PopoverInvokerElement | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLInputElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `PopoverInvokerElement | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLInputElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `PopoverInvokerElement | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLInputElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** Sets or retrieves a comma-separated list of content types. *)
  val get_accept: 'tags this -> string [@@js.get "accept"]
  
  (** Sets or retrieves a comma-separated list of content types. *)
  val set_accept: 'tags this -> string -> unit [@@js.set "accept"]
  
  (**
    Sets or retrieves how the object is aligned with adjacent text.
    @deprecated 
  *)
  val get_align: 'tags this -> string [@@js.get "align"]
  
  (**
    Sets or retrieves how the object is aligned with adjacent text.
    @deprecated 
  *)
  val set_align: 'tags this -> string -> unit [@@js.set "align"]
  
  (** Sets or retrieves a text alternative to the graphic. *)
  val get_alt: 'tags this -> string [@@js.get "alt"]
  
  (** Sets or retrieves a text alternative to the graphic. *)
  val set_alt: 'tags this -> string -> unit [@@js.set "alt"]
  
  (**
    Specifies whether autocomplete is applied to an editable text field.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/autocomplete)
  *)
  val get_autocomplete: 'tags this -> AutoFill.t [@@js.get "autocomplete"]
  
  (**
    Specifies whether autocomplete is applied to an editable text field.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/autocomplete)
  *)
  val set_autocomplete: 'tags this -> AutoFill.t -> unit [@@js.set "autocomplete"]
  val get_capture: 'tags this -> string [@@js.get "capture"]
  val set_capture: 'tags this -> string -> unit [@@js.set "capture"]
  
  (** Sets or retrieves the state of the check box or radio button. *)
  val get_checked: 'tags this -> bool [@@js.get "checked"]
  
  (** Sets or retrieves the state of the check box or radio button. *)
  val set_checked: 'tags this -> bool -> unit [@@js.set "checked"]
  
  (** Sets or retrieves the state of the check box or radio button. *)
  val get_defaultChecked: 'tags this -> bool [@@js.get "defaultChecked"]
  
  (** Sets or retrieves the state of the check box or radio button. *)
  val set_defaultChecked: 'tags this -> bool -> unit [@@js.set "defaultChecked"]
  
  (** Sets or retrieves the initial contents of the object. *)
  val get_defaultValue: 'tags this -> string [@@js.get "defaultValue"]
  
  (** Sets or retrieves the initial contents of the object. *)
  val set_defaultValue: 'tags this -> string -> unit [@@js.set "defaultValue"]
  val get_dirName: 'tags this -> string [@@js.get "dirName"]
  val set_dirName: 'tags this -> string -> unit [@@js.set "dirName"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/disabled) *)
  val get_disabled: 'tags this -> bool [@@js.get "disabled"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/disabled) *)
  val set_disabled: 'tags this -> bool -> unit [@@js.set "disabled"]
  
  (**
    Returns a FileList object on a file type input object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/files)
  *)
  val get_files: 'tags this -> FileList.t option [@@js.get "files"]
  
  (**
    Returns a FileList object on a file type input object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/files)
  *)
  val set_files: 'tags this -> FileList.t option -> unit [@@js.set "files"]
  
  (** Retrieves a reference to the form that the object is embedded in. *)
  val get_form: 'tags this -> HTMLFormElement.t option [@@js.get "form"]
  
  (**
    Overrides the action attribute (where the data on a form is sent) on the parent form element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formAction)
  *)
  val get_formAction: 'tags this -> string [@@js.get "formAction"]
  
  (**
    Overrides the action attribute (where the data on a form is sent) on the parent form element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formAction)
  *)
  val set_formAction: 'tags this -> string -> unit [@@js.set "formAction"]
  
  (**
    Used to override the encoding (formEnctype attribute) specified on the form element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formEnctype)
  *)
  val get_formEnctype: 'tags this -> string [@@js.get "formEnctype"]
  
  (**
    Used to override the encoding (formEnctype attribute) specified on the form element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formEnctype)
  *)
  val set_formEnctype: 'tags this -> string -> unit [@@js.set "formEnctype"]
  
  (**
    Overrides the submit method attribute previously specified on a form element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formMethod)
  *)
  val get_formMethod: 'tags this -> string [@@js.get "formMethod"]
  
  (**
    Overrides the submit method attribute previously specified on a form element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formMethod)
  *)
  val set_formMethod: 'tags this -> string -> unit [@@js.set "formMethod"]
  
  (**
    Overrides any validation or required attributes on a form or form elements to allow it to be submitted without validation. This can be used to create a "save draft"-type submit option.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formNoValidate)
  *)
  val get_formNoValidate: 'tags this -> bool [@@js.get "formNoValidate"]
  
  (**
    Overrides any validation or required attributes on a form or form elements to allow it to be submitted without validation. This can be used to create a "save draft"-type submit option.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formNoValidate)
  *)
  val set_formNoValidate: 'tags this -> bool -> unit [@@js.set "formNoValidate"]
  
  (**
    Overrides the target attribute on a form element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formTarget)
  *)
  val get_formTarget: 'tags this -> string [@@js.get "formTarget"]
  
  (**
    Overrides the target attribute on a form element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formTarget)
  *)
  val set_formTarget: 'tags this -> string -> unit [@@js.set "formTarget"]
  
  (**
    Sets or retrieves the height of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/height)
  *)
  val get_height: 'tags this -> float [@@js.get "height"]
  
  (**
    Sets or retrieves the height of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/height)
  *)
  val set_height: 'tags this -> float -> unit [@@js.set "height"]
  
  (** When set, overrides the rendering of checkbox controls so that the current value is not visible. *)
  val get_indeterminate: 'tags this -> bool [@@js.get "indeterminate"]
  
  (** When set, overrides the rendering of checkbox controls so that the current value is not visible. *)
  val set_indeterminate: 'tags this -> bool -> unit [@@js.set "indeterminate"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/labels) *)
  val get_labels: 'tags this -> HTMLLabelElement.t NodeListOf.t option [@@js.get "labels"]
  
  (**
    Specifies the ID of a pre-defined datalist of options for an input element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/list)
  *)
  val get_list: 'tags this -> HTMLDataListElement.t option [@@js.get "list"]
  
  (** Defines the maximum acceptable value for an input element with type="number".When used with the min and step attributes, lets you control the range and increment (such as only even numbers) that the user can enter into an input field. *)
  val get_max: 'tags this -> string [@@js.get "max"]
  
  (** Defines the maximum acceptable value for an input element with type="number".When used with the min and step attributes, lets you control the range and increment (such as only even numbers) that the user can enter into an input field. *)
  val set_max: 'tags this -> string -> unit [@@js.set "max"]
  
  (** Sets or retrieves the maximum number of characters that the user can enter in a text control. *)
  val get_maxLength: 'tags this -> float [@@js.get "maxLength"]
  
  (** Sets or retrieves the maximum number of characters that the user can enter in a text control. *)
  val set_maxLength: 'tags this -> float -> unit [@@js.set "maxLength"]
  
  (** Defines the minimum acceptable value for an input element with type="number". When used with the max and step attributes, lets you control the range and increment (such as even numbers only) that the user can enter into an input field. *)
  val get_min: 'tags this -> string [@@js.get "min"]
  
  (** Defines the minimum acceptable value for an input element with type="number". When used with the max and step attributes, lets you control the range and increment (such as even numbers only) that the user can enter into an input field. *)
  val set_min: 'tags this -> string -> unit [@@js.set "min"]
  val get_minLength: 'tags this -> float [@@js.get "minLength"]
  val set_minLength: 'tags this -> float -> unit [@@js.set "minLength"]
  
  (**
    Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/multiple)
  *)
  val get_multiple: 'tags this -> bool [@@js.get "multiple"]
  
  (**
    Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/multiple)
  *)
  val set_multiple: 'tags this -> bool -> unit [@@js.set "multiple"]
  
  (** Sets or retrieves the name of the object. *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (** Sets or retrieves the name of the object. *)
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  
  (**
    Gets or sets a string containing a regular expression that the user's input must match.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/pattern)
  *)
  val get_pattern: 'tags this -> string [@@js.get "pattern"]
  
  (**
    Gets or sets a string containing a regular expression that the user's input must match.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/pattern)
  *)
  val set_pattern: 'tags this -> string -> unit [@@js.set "pattern"]
  
  (**
    Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or type of information they need to enter.The text appears in an input field until the user puts focus on the field.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/placeholder)
  *)
  val get_placeholder: 'tags this -> string [@@js.get "placeholder"]
  
  (**
    Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or type of information they need to enter.The text appears in an input field until the user puts focus on the field.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/placeholder)
  *)
  val set_placeholder: 'tags this -> string -> unit [@@js.set "placeholder"]
  val get_readOnly: 'tags this -> bool [@@js.get "readOnly"]
  val set_readOnly: 'tags this -> bool -> unit [@@js.set "readOnly"]
  
  (**
    When present, marks an element that can't be submitted without a value.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/required)
  *)
  val get_required: 'tags this -> bool [@@js.get "required"]
  
  (**
    When present, marks an element that can't be submitted without a value.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/required)
  *)
  val set_required: 'tags this -> bool -> unit [@@js.set "required"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/selectionDirection) *)
  val get_selectionDirection: 'tags this -> ([`L_s179_backward[@js "backward"] | `L_s435_forward[@js "forward"] | `L_s685_none[@js "none"]] [@js.enum]) option [@@js.get "selectionDirection"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/selectionDirection) *)
  val set_selectionDirection: 'tags this -> ([`Null | `U1 of ([`L_s435_forward[@js "forward"]] [@js.enum]) | `U2 of ([`L_s179_backward[@js "backward"]] [@js.enum]) | `U3 of ([`L_s685_none[@js "none"]] [@js.enum])] [@js.union]) -> unit [@@js.set "selectionDirection"]
  
  (** Gets or sets the end position or offset of a text selection. *)
  val get_selectionEnd: 'tags this -> float option [@@js.get "selectionEnd"]
  
  (** Gets or sets the end position or offset of a text selection. *)
  val set_selectionEnd: 'tags this -> float option -> unit [@@js.set "selectionEnd"]
  
  (** Gets or sets the starting position or offset of a text selection. *)
  val get_selectionStart: 'tags this -> float option [@@js.get "selectionStart"]
  
  (** Gets or sets the starting position or offset of a text selection. *)
  val set_selectionStart: 'tags this -> float option -> unit [@@js.set "selectionStart"]
  val get_size: 'tags this -> float [@@js.get "size"]
  val set_size: 'tags this -> float -> unit [@@js.set "size"]
  
  (** The address or URL of the a media resource that is to be considered. *)
  val get_src: 'tags this -> string [@@js.get "src"]
  
  (** The address or URL of the a media resource that is to be considered. *)
  val set_src: 'tags this -> string -> unit [@@js.set "src"]
  
  (** Defines an increment or jump between values that you want to allow the user to enter. When used with the max and min attributes, lets you control the range and increment (for example, allow only even numbers) that the user can enter into an input field. *)
  val get_step: 'tags this -> string [@@js.get "step"]
  
  (** Defines an increment or jump between values that you want to allow the user to enter. When used with the max and min attributes, lets you control the range and increment (for example, allow only even numbers) that the user can enter into an input field. *)
  val set_step: 'tags this -> string -> unit [@@js.set "step"]
  
  (** Returns the content type of the object. *)
  val get_type: 'tags this -> string [@@js.get "type"]
  
  (** Returns the content type of the object. *)
  val set_type: 'tags this -> string -> unit [@@js.set "type"]
  
  (**
    Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.
    @deprecated 
  *)
  val get_useMap: 'tags this -> string [@@js.get "useMap"]
  
  (**
    Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.
    @deprecated 
  *)
  val set_useMap: 'tags this -> string -> unit [@@js.set "useMap"]
  
  (**
    Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/validationMessage)
  *)
  val get_validationMessage: 'tags this -> string [@@js.get "validationMessage"]
  
  (**
    Returns a  ValidityState object that represents the validity states of an element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/validity)
  *)
  val get_validity: 'tags this -> ValidityState.t [@@js.get "validity"]
  
  (** Returns the value of the data at the cursor's current position. *)
  val get_value: 'tags this -> string [@@js.get "value"]
  
  (** Returns the value of the data at the cursor's current position. *)
  val set_value: 'tags this -> string -> unit [@@js.set "value"]
  
  (** Returns a Date object representing the form control's value, if applicable; otherwise, returns null. Can be set, to change the value. Throws an "InvalidStateError" DOMException if the control isn't date- or time-based. *)
  val get_valueAsDate: 'tags this -> Date.t option [@@js.get "valueAsDate"]
  
  (** Returns a Date object representing the form control's value, if applicable; otherwise, returns null. Can be set, to change the value. Throws an "InvalidStateError" DOMException if the control isn't date- or time-based. *)
  val set_valueAsDate: 'tags this -> Date.t option -> unit [@@js.set "valueAsDate"]
  
  (** Returns the input field value as a number. *)
  val get_valueAsNumber: 'tags this -> float [@@js.get "valueAsNumber"]
  
  (** Returns the input field value as a number. *)
  val set_valueAsNumber: 'tags this -> float -> unit [@@js.set "valueAsNumber"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/webkitEntries) *)
  val get_webkitEntries: 'tags this -> FileSystemEntry.t list [@@js.get "webkitEntries"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/webkitdirectory) *)
  val get_webkitdirectory: 'tags this -> bool [@@js.get "webkitdirectory"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/webkitdirectory) *)
  val set_webkitdirectory: 'tags this -> bool -> unit [@@js.set "webkitdirectory"]
  
  (**
    Sets or retrieves the width of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/width)
  *)
  val get_width: 'tags this -> float [@@js.get "width"]
  
  (**
    Sets or retrieves the width of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/width)
  *)
  val set_width: 'tags this -> float -> unit [@@js.set "width"]
  
  (**
    Returns whether an element will successfully validate based on forms validation rules and constraints.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/willValidate)
  *)
  val get_willValidate: 'tags this -> bool [@@js.get "willValidate"]
  
  (**
    Returns whether a form will validate when it is submitted, without having to submit it.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/checkValidity)
  *)
  val checkValidity: 'tags this -> bool [@@js.call "checkValidity"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/reportValidity) *)
  val reportValidity: 'tags this -> bool [@@js.call "reportValidity"]
  
  (**
    Makes the selection equal to the current object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/select)
  *)
  val select: 'tags this -> unit [@@js.call "select"]
  
  (**
    Sets a custom error message that is displayed when a form is submitted.
    @param error Sets a custom error message that is displayed when a form is submitted.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/setCustomValidity)
  *)
  val setCustomValidity: 'tags this -> error:string -> unit [@@js.call "setCustomValidity"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/setRangeText) *)
  val setRangeText: 'tags this -> replacement:string -> unit [@@js.call "setRangeText"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/setRangeText) *)
  val setRangeText': 'tags this -> replacement:string -> start:float -> end_:float -> ?selectionMode:SelectionMode.t -> unit -> unit [@@js.call "setRangeText"]
  
  (**
    Sets the start and end positions of a selection in a text field.
    @param start The offset into the text field for the start of the selection.
    @param end The offset into the text field for the end of the selection.
    @param direction The direction in which the selection is performed.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/setSelectionRange)
  *)
  val setSelectionRange: 'tags this -> start:float option -> end_:float option -> ?direction:([`U1 of ([`L_s435_forward[@js "forward"]] [@js.enum]) | `U2 of ([`L_s179_backward[@js "backward"]] [@js.enum]) | `U3 of ([`L_s685_none[@js "none"]] [@js.enum])] [@js.union]) -> unit -> unit [@@js.call "setSelectionRange"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/showPicker) *)
  val showPicker: 'tags this -> unit [@@js.call "showPicker"]
  
  (**
    Decrements a range input control's value by the value given by the Step attribute. If the optional parameter is used, it will decrement the input control's step value multiplied by the parameter's value.
    @param n Value to decrement the value by.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/stepDown)
  *)
  val stepDown: 'tags this -> ?n:float -> unit -> unit [@@js.call "stepDown"]
  
  (**
    Increments a range input control's value by the value given by the Step attribute. If the optional parameter is used, will increment the input control's value by that value.
    @param n Value to increment the value by.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/stepUp)
  *)
  val stepUp: 'tags this -> ?n:float -> unit -> unit [@@js.call "stepUp"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides special properties and methods (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of inline frame elements.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement)
*)
module[@js.scope "HTMLIFrameElement"] HTMLIFrameElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLIFrameElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLIFrameElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLIFrameElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLIFrameElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Sets or retrieves how the object is aligned with adjacent text.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/align)
  *)
  val get_align: 'tags this -> string [@@js.get "align"]
  
  (**
    Sets or retrieves how the object is aligned with adjacent text.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/align)
  *)
  val set_align: 'tags this -> string -> unit [@@js.set "align"]
  val get_allow: 'tags this -> string [@@js.get "allow"]
  val set_allow: 'tags this -> string -> unit [@@js.set "allow"]
  val get_allowFullscreen: 'tags this -> bool [@@js.get "allowFullscreen"]
  val set_allowFullscreen: 'tags this -> bool -> unit [@@js.set "allowFullscreen"]
  
  (**
    Retrieves the document object of the page or frame.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/contentDocument)
  *)
  val get_contentDocument: 'tags this -> Document.t option [@@js.get "contentDocument"]
  
  (**
    Retrieves the object of the specified.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/contentWindow)
  *)
  val get_contentWindow: 'tags this -> WindowProxy.t option [@@js.get "contentWindow"]
  
  (**
    Sets or retrieves whether to display a border for the frame.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/frameBorder)
  *)
  val get_frameBorder: 'tags this -> string [@@js.get "frameBorder"]
  
  (**
    Sets or retrieves whether to display a border for the frame.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/frameBorder)
  *)
  val set_frameBorder: 'tags this -> string -> unit [@@js.set "frameBorder"]
  
  (**
    Sets or retrieves the height of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/height)
  *)
  val get_height: 'tags this -> string [@@js.get "height"]
  
  (**
    Sets or retrieves the height of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/height)
  *)
  val set_height: 'tags this -> string -> unit [@@js.set "height"]
  val get_loading: 'tags this -> string [@@js.get "loading"]
  val set_loading: 'tags this -> string -> unit [@@js.set "loading"]
  
  (**
    Sets or retrieves a URI to a long description of the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/longDesc)
  *)
  val get_longDesc: 'tags this -> string [@@js.get "longDesc"]
  
  (**
    Sets or retrieves a URI to a long description of the object.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/longDesc)
  *)
  val set_longDesc: 'tags this -> string -> unit [@@js.set "longDesc"]
  
  (**
    Sets or retrieves the top and bottom margin heights before displaying the text in a frame.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/marginHeight)
  *)
  val get_marginHeight: 'tags this -> string [@@js.get "marginHeight"]
  
  (**
    Sets or retrieves the top and bottom margin heights before displaying the text in a frame.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/marginHeight)
  *)
  val set_marginHeight: 'tags this -> string -> unit [@@js.set "marginHeight"]
  
  (**
    Sets or retrieves the left and right margin widths before displaying the text in a frame.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/marginWidth)
  *)
  val get_marginWidth: 'tags this -> string [@@js.get "marginWidth"]
  
  (**
    Sets or retrieves the left and right margin widths before displaying the text in a frame.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/marginWidth)
  *)
  val set_marginWidth: 'tags this -> string -> unit [@@js.set "marginWidth"]
  
  (**
    Sets or retrieves the frame name.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/name)
  *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (**
    Sets or retrieves the frame name.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/name)
  *)
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/referrerPolicy) *)
  val get_referrerPolicy: 'tags this -> ReferrerPolicy.t [@@js.get "referrerPolicy"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/referrerPolicy) *)
  val set_referrerPolicy: 'tags this -> ReferrerPolicy.t -> unit [@@js.set "referrerPolicy"]
  val get_sandbox: 'tags this -> DOMTokenList.t [@@js.get "sandbox"]
  
  (**
    Sets or retrieves whether the frame can be scrolled.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/scrolling)
  *)
  val get_scrolling: 'tags this -> string [@@js.get "scrolling"]
  
  (**
    Sets or retrieves whether the frame can be scrolled.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/scrolling)
  *)
  val set_scrolling: 'tags this -> string -> unit [@@js.set "scrolling"]
  
  (**
    Sets or retrieves a URL to be loaded by the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/src)
  *)
  val get_src: 'tags this -> string [@@js.get "src"]
  
  (**
    Sets or retrieves a URL to be loaded by the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/src)
  *)
  val set_src: 'tags this -> string -> unit [@@js.set "src"]
  
  (**
    Sets or retrives the content of the page that is to contain.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/srcdoc)
  *)
  val get_srcdoc: 'tags this -> string [@@js.get "srcdoc"]
  
  (**
    Sets or retrives the content of the page that is to contain.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/srcdoc)
  *)
  val set_srcdoc: 'tags this -> string -> unit [@@js.set "srcdoc"]
  
  (**
    Sets or retrieves the width of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/width)
  *)
  val get_width: 'tags this -> string [@@js.get "width"]
  
  (**
    Sets or retrieves the width of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/width)
  *)
  val set_width: 'tags this -> string -> unit [@@js.set "width"]
  val getSVGDocument: 'tags this -> Document.t option [@@js.call "getSVGDocument"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Serves as the root node for a given HTML document. This object inherits the properties and methods described in the HTMLElement interface.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLHtmlElement)
*)
module[@js.scope "HTMLHtmlElement"] HTMLHtmlElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLHtmlElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLHtmlElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLHtmlElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLHtmlElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Sets or retrieves the DTD version that governs the current document.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLHtmlElement/version)
  *)
  val get_version: 'tags this -> string [@@js.get "version"]
  
  (**
    Sets or retrieves the DTD version that governs the current document.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLHtmlElement/version)
  *)
  val set_version: 'tags this -> string -> unit [@@js.set "version"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  The different heading elements. It inherits methods and properties from the HTMLElement interface.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLHeadingElement)
*)
module[@js.scope "HTMLHeadingElement"] HTMLHeadingElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLHeadingElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLHeadingElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLHeadingElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLHeadingElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Sets or retrieves a value that indicates the table alignment.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLHeadingElement/align)
  *)
  val get_align: 'tags this -> string [@@js.get "align"]
  
  (**
    Sets or retrieves a value that indicates the table alignment.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLHeadingElement/align)
  *)
  val set_align: 'tags this -> string -> unit [@@js.set "align"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides special properties (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating <hr> elements.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLHRElement)
*)
module[@js.scope "HTMLHRElement"] HTMLHRElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLHRElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLHRElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLHRElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLHRElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Sets or retrieves how the object is aligned with adjacent text.
    @deprecated 
  *)
  val get_align: 'tags this -> string [@@js.get "align"]
  
  (**
    Sets or retrieves how the object is aligned with adjacent text.
    @deprecated 
  *)
  val set_align: 'tags this -> string -> unit [@@js.set "align"]
  
  (** @deprecated  *)
  val get_color: 'tags this -> string [@@js.get "color"]
  
  (** @deprecated  *)
  val set_color: 'tags this -> string -> unit [@@js.set "color"]
  
  (**
    Sets or retrieves whether the horizontal rule is drawn with 3-D shading.
    @deprecated 
  *)
  val get_noShade: 'tags this -> bool [@@js.get "noShade"]
  
  (**
    Sets or retrieves whether the horizontal rule is drawn with 3-D shading.
    @deprecated 
  *)
  val set_noShade: 'tags this -> bool -> unit [@@js.set "noShade"]
  
  (** @deprecated  *)
  val get_size: 'tags this -> string [@@js.get "size"]
  
  (** @deprecated  *)
  val set_size: 'tags this -> string -> unit [@@js.set "size"]
  
  (**
    Sets or retrieves the width of the object.
    @deprecated 
  *)
  val get_width: 'tags this -> string [@@js.get "width"]
  
  (**
    Sets or retrieves the width of the object.
    @deprecated 
  *)
  val set_width: 'tags this -> string -> unit [@@js.set "width"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <fieldset> elements.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement)
*)
module[@js.scope "HTMLFieldSetElement"] HTMLFieldSetElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLFieldSetElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLFieldSetElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLElement | `HTMLFieldSetElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLFieldSetElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/disabled) *)
  val get_disabled: 'tags this -> bool [@@js.get "disabled"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/disabled) *)
  val set_disabled: 'tags this -> bool -> unit [@@js.set "disabled"]
  
  (**
    Returns an HTMLCollection of the form controls in the element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/elements)
  *)
  val get_elements: 'tags this -> HTMLCollection.t [@@js.get "elements"]
  
  (**
    Retrieves a reference to the form that the object is embedded in.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/form)
  *)
  val get_form: 'tags this -> HTMLFormElement.t option [@@js.get "form"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/name) *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/name) *)
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  
  (**
    Returns the string "fieldset".
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/type)
  *)
  val get_type: 'tags this -> string [@@js.get "type"]
  
  (**
    Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/validationMessage)
  *)
  val get_validationMessage: 'tags this -> string [@@js.get "validationMessage"]
  
  (**
    Returns a  ValidityState object that represents the validity states of an element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/validity)
  *)
  val get_validity: 'tags this -> ValidityState.t [@@js.get "validity"]
  
  (**
    Returns whether an element will successfully validate based on forms validation rules and constraints.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/willValidate)
  *)
  val get_willValidate: 'tags this -> bool [@@js.get "willValidate"]
  
  (** Returns whether a form will validate when it is submitted, without having to submit it. *)
  val checkValidity: 'tags this -> bool [@@js.call "checkValidity"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/reportValidity) *)
  val reportValidity: 'tags this -> bool [@@js.call "reportValidity"]
  
  (**
    Sets a custom error message that is displayed when a form is submitted.
    @param error Sets a custom error message that is displayed when a form is submitted.
  *)
  val setCustomValidity: 'tags this -> error:string -> unit [@@js.call "setCustomValidity"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <div> elements.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLDivElement)
*)
module[@js.scope "HTMLDivElement"] HTMLDivElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLDivElement | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLDivElement | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLDivElement | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLDivElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Sets or retrieves how the object is aligned with adjacent text.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLDivElement/align)
  *)
  val get_align: 'tags this -> string [@@js.get "align"]
  
  (**
    Sets or retrieves how the object is aligned with adjacent text.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLDivElement/align)
  *)
  val set_align: 'tags this -> string -> unit [@@js.set "align"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement) *)
module[@js.scope "HTMLDialogElement"] HTMLDialogElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLDialogElement | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLDialogElement | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLDialogElement | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLDialogElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/open) *)
  val get_open: 'tags this -> bool [@@js.get "open"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/open) *)
  val set_open: 'tags this -> bool -> unit [@@js.set "open"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/returnValue) *)
  val get_returnValue: 'tags this -> string [@@js.get "returnValue"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/returnValue) *)
  val set_returnValue: 'tags this -> string -> unit [@@js.set "returnValue"]
  
  (**
    Closes the dialog element.
    
    The argument, if provided, provides a return value.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/close)
  *)
  val close: 'tags this -> ?returnValue:string -> unit -> unit [@@js.call "close"]
  
  (**
    Displays the dialog element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/show)
  *)
  val show: 'tags this -> unit [@@js.call "show"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/showModal) *)
  val showModal: 'tags this -> unit [@@js.call "showModal"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLDetailsElement) *)
module[@js.scope "HTMLDetailsElement"] HTMLDetailsElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLDetailsElement | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLDetailsElement | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLDetailsElement | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLDetailsElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_name: 'tags this -> string [@@js.get "name"]
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLDetailsElement/open) *)
  val get_open: 'tags this -> bool [@@js.get "open"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLDetailsElement/open) *)
  val set_open: 'tags this -> bool -> unit [@@js.set "open"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <data> elements.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLDataElement)
*)
module[@js.scope "HTMLDataElement"] HTMLDataElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLDataElement | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLDataElement | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLDataElement | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLDataElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLDataElement/value) *)
  val get_value: 'tags this -> string [@@js.get "value"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLDataElement/value) *)
  val set_value: 'tags this -> string -> unit [@@js.set "value"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides special properties (beyond those of the regular HTMLElement interface it also has available to it by inheritance) for manipulating definition list (<dl>) elements.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLDListElement)
*)
module[@js.scope "HTMLDListElement"] HTMLDListElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLDListElement | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLDListElement | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLDListElement | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLDListElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLDListElement/compact) *)
  val get_compact: 'tags this -> bool [@@js.get "compact"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLDListElement/compact) *)
  val set_compact: 'tags this -> bool -> unit [@@js.set "compact"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <button> elements.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement)
*)
module[@js.scope "HTMLButtonElement"] HTMLButtonElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLButtonElement | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `PopoverInvokerElement | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLButtonElement | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `PopoverInvokerElement | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLButtonElement | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `PopoverInvokerElement | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLButtonElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/disabled) *)
  val get_disabled: 'tags this -> bool [@@js.get "disabled"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/disabled) *)
  val set_disabled: 'tags this -> bool -> unit [@@js.set "disabled"]
  
  (**
    Retrieves a reference to the form that the object is embedded in.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/form)
  *)
  val get_form: 'tags this -> HTMLFormElement.t option [@@js.get "form"]
  
  (**
    Overrides the action attribute (where the data on a form is sent) on the parent form element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formAction)
  *)
  val get_formAction: 'tags this -> string [@@js.get "formAction"]
  
  (**
    Overrides the action attribute (where the data on a form is sent) on the parent form element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formAction)
  *)
  val set_formAction: 'tags this -> string -> unit [@@js.set "formAction"]
  
  (**
    Used to override the encoding (formEnctype attribute) specified on the form element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formEnctype)
  *)
  val get_formEnctype: 'tags this -> string [@@js.get "formEnctype"]
  
  (**
    Used to override the encoding (formEnctype attribute) specified on the form element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formEnctype)
  *)
  val set_formEnctype: 'tags this -> string -> unit [@@js.set "formEnctype"]
  
  (**
    Overrides the submit method attribute previously specified on a form element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formMethod)
  *)
  val get_formMethod: 'tags this -> string [@@js.get "formMethod"]
  
  (**
    Overrides the submit method attribute previously specified on a form element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formMethod)
  *)
  val set_formMethod: 'tags this -> string -> unit [@@js.set "formMethod"]
  
  (**
    Overrides any validation or required attributes on a form or form elements to allow it to be submitted without validation. This can be used to create a "save draft"-type submit option.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formNoValidate)
  *)
  val get_formNoValidate: 'tags this -> bool [@@js.get "formNoValidate"]
  
  (**
    Overrides any validation or required attributes on a form or form elements to allow it to be submitted without validation. This can be used to create a "save draft"-type submit option.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formNoValidate)
  *)
  val set_formNoValidate: 'tags this -> bool -> unit [@@js.set "formNoValidate"]
  
  (**
    Overrides the target attribute on a form element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formTarget)
  *)
  val get_formTarget: 'tags this -> string [@@js.get "formTarget"]
  
  (**
    Overrides the target attribute on a form element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formTarget)
  *)
  val set_formTarget: 'tags this -> string -> unit [@@js.set "formTarget"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/labels) *)
  val get_labels: 'tags this -> HTMLLabelElement.t NodeListOf.t [@@js.get "labels"]
  
  (**
    Sets or retrieves the name of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/name)
  *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (**
    Sets or retrieves the name of the object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/name)
  *)
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  
  (**
    Gets the classification and default behavior of the button.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/type)
  *)
  val get_type: 'tags this -> ([`L_s220_button[@js "button"] | `L_s824_reset[@js "reset"] | `L_s935_submit[@js "submit"]] [@js.enum]) [@@js.get "type"]
  
  (**
    Gets the classification and default behavior of the button.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/type)
  *)
  val set_type: 'tags this -> ([`U1 of ([`L_s935_submit[@js "submit"]] [@js.enum]) | `U2 of ([`L_s824_reset[@js "reset"]] [@js.enum]) | `U3 of ([`L_s220_button[@js "button"]] [@js.enum])] [@js.union]) -> unit [@@js.set "type"]
  
  (**
    Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/validationMessage)
  *)
  val get_validationMessage: 'tags this -> string [@@js.get "validationMessage"]
  
  (**
    Returns a  ValidityState object that represents the validity states of an element.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/validity)
  *)
  val get_validity: 'tags this -> ValidityState.t [@@js.get "validity"]
  
  (**
    Sets or retrieves the default or selected value of the control.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/value)
  *)
  val get_value: 'tags this -> string [@@js.get "value"]
  
  (**
    Sets or retrieves the default or selected value of the control.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/value)
  *)
  val set_value: 'tags this -> string -> unit [@@js.set "value"]
  
  (**
    Returns whether an element will successfully validate based on forms validation rules and constraints.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/willValidate)
  *)
  val get_willValidate: 'tags this -> bool [@@js.get "willValidate"]
  
  (** Returns whether a form will validate when it is submitted, without having to submit it. *)
  val checkValidity: 'tags this -> bool [@@js.call "checkValidity"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/reportValidity) *)
  val reportValidity: 'tags this -> bool [@@js.call "reportValidity"]
  
  (**
    Sets a custom error message that is displayed when a form is submitted.
    @param error Sets a custom error message that is displayed when a form is submitted.
  *)
  val setCustomValidity: 'tags this -> error:string -> unit [@@js.call "setCustomValidity"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides special properties (beyond those inherited from the regular HTMLElement interface) for manipulating <body> elements.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLBodyElement)
*)
module[@js.scope "HTMLBodyElement"] HTMLBodyElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLBodyElement | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable | `WindowEventHandlers] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLBodyElement | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable | `WindowEventHandlers]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLBodyElement | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable | `WindowEventHandlers]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLBodyElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLBodyElement/aLink) *)
  val get_aLink: 'tags this -> string [@@js.get "aLink"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLBodyElement/aLink) *)
  val set_aLink: 'tags this -> string -> unit [@@js.set "aLink"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLBodyElement/background) *)
  val get_background: 'tags this -> string [@@js.get "background"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLBodyElement/background) *)
  val set_background: 'tags this -> string -> unit [@@js.set "background"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLBodyElement/bgColor) *)
  val get_bgColor: 'tags this -> string [@@js.get "bgColor"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLBodyElement/bgColor) *)
  val set_bgColor: 'tags this -> string -> unit [@@js.set "bgColor"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLBodyElement/link) *)
  val get_link: 'tags this -> string [@@js.get "link"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLBodyElement/link) *)
  val set_link: 'tags this -> string -> unit [@@js.set "link"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLBodyElement/text) *)
  val get_text: 'tags this -> string [@@js.get "text"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLBodyElement/text) *)
  val set_text: 'tags this -> string -> unit [@@js.set "text"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLBodyElement/vLink) *)
  val get_vLink: 'tags this -> string [@@js.get "vLink"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLBodyElement/vLink) *)
  val set_vLink: 'tags this -> string -> unit [@@js.set "vLink"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLBodyElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLBodyElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Contains the base URIÂ for a document. This object inherits all of the properties and methods as described in the HTMLElement interface.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLBaseElement)
*)
module[@js.scope "HTMLBaseElement"] HTMLBaseElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLBaseElement | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLBaseElement | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLBaseElement | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLBaseElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Gets or sets the baseline URL on which relative links are based.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLBaseElement/href)
  *)
  val get_href: 'tags this -> string [@@js.get "href"]
  
  (**
    Gets or sets the baseline URL on which relative links are based.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLBaseElement/href)
  *)
  val set_href: 'tags this -> string -> unit [@@js.set "href"]
  
  (**
    Sets or retrieves the window or frame at which to target content.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLBaseElement/target)
  *)
  val get_target: 'tags this -> string [@@js.get "target"]
  
  (**
    Sets or retrieves the window or frame at which to target content.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLBaseElement/target)
  *)
  val set_target: 'tags this -> string -> unit [@@js.set "target"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  A HTML line break element (<br>). It inherits from HTMLElement.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLBRElement)
*)
module[@js.scope "HTMLBRElement"] HTMLBRElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLBRElement | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLBRElement | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLBRElement | `HTMLElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLBRElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Sets or retrieves the side on which floating objects are not to be positioned when any IHTMLBlockElement is inserted into the document.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLBRElement/clear)
  *)
  val get_clear: 'tags this -> string [@@js.get "clear"]
  
  (**
    Sets or retrieves the side on which floating objects are not to be positioned when any IHTMLBlockElement is inserted into the document.
    @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLBRElement/clear)
  *)
  val set_clear: 'tags this -> string -> unit [@@js.set "clear"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Provides access to the properties of <audio> elements, as well as methods to manipulate them. It derives from the HTMLMediaElement interface.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLAudioElement)
*)
module[@js.scope "HTMLAudioElement"] HTMLAudioElement : sig
  type t = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLAudioElement | `HTMLElement | `HTMLMediaElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLAudioElement | `HTMLElement | `HTMLMediaElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ARIAMixin | `Animatable | `ChildNode | `Element | `ElementCSSInlineStyle | `ElementContentEditable | `EventTarget | `GlobalEventHandlers | `HTMLAudioElement | `HTMLElement | `HTMLMediaElement | `HTMLOrSVGElement | `InnerHTML | `Node | `NonDocumentTypeChildNode | `ParentNode | `Slottable]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLAudioElement ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLMediaElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'HTMLMediaElementEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    
    
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module HTMLElementTagNameMap : sig
  type t = [`HTMLElementTagNameMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`HTMLElementTagNameMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`HTMLElementTagNameMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HTMLElementTagNameMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_a: 'tags this -> HTMLAnchorElement.t [@@js.get "a"]
  val set_a: 'tags this -> HTMLAnchorElement.t -> unit [@@js.set "a"]
  val get_abbr: 'tags this -> HTMLElement.t [@@js.get "abbr"]
  val set_abbr: 'tags this -> HTMLElement.t -> unit [@@js.set "abbr"]
  val get_address: 'tags this -> HTMLElement.t [@@js.get "address"]
  val set_address: 'tags this -> HTMLElement.t -> unit [@@js.set "address"]
  val get_area: 'tags this -> HTMLAreaElement.t [@@js.get "area"]
  val set_area: 'tags this -> HTMLAreaElement.t -> unit [@@js.set "area"]
  val get_article: 'tags this -> HTMLElement.t [@@js.get "article"]
  val set_article: 'tags this -> HTMLElement.t -> unit [@@js.set "article"]
  val get_aside: 'tags this -> HTMLElement.t [@@js.get "aside"]
  val set_aside: 'tags this -> HTMLElement.t -> unit [@@js.set "aside"]
  val get_audio: 'tags this -> HTMLAudioElement.t [@@js.get "audio"]
  val set_audio: 'tags this -> HTMLAudioElement.t -> unit [@@js.set "audio"]
  val get_b: 'tags this -> HTMLElement.t [@@js.get "b"]
  val set_b: 'tags this -> HTMLElement.t -> unit [@@js.set "b"]
  val get_base: 'tags this -> HTMLBaseElement.t [@@js.get "base"]
  val set_base: 'tags this -> HTMLBaseElement.t -> unit [@@js.set "base"]
  val get_bdi: 'tags this -> HTMLElement.t [@@js.get "bdi"]
  val set_bdi: 'tags this -> HTMLElement.t -> unit [@@js.set "bdi"]
  val get_bdo: 'tags this -> HTMLElement.t [@@js.get "bdo"]
  val set_bdo: 'tags this -> HTMLElement.t -> unit [@@js.set "bdo"]
  val get_blockquote: 'tags this -> HTMLQuoteElement.t [@@js.get "blockquote"]
  val set_blockquote: 'tags this -> HTMLQuoteElement.t -> unit [@@js.set "blockquote"]
  val get_body: 'tags this -> HTMLBodyElement.t [@@js.get "body"]
  val set_body: 'tags this -> HTMLBodyElement.t -> unit [@@js.set "body"]
  val get_br: 'tags this -> HTMLBRElement.t [@@js.get "br"]
  val set_br: 'tags this -> HTMLBRElement.t -> unit [@@js.set "br"]
  val get_button: 'tags this -> HTMLButtonElement.t [@@js.get "button"]
  val set_button: 'tags this -> HTMLButtonElement.t -> unit [@@js.set "button"]
  val get_canvas: 'tags this -> HTMLCanvasElement.t [@@js.get "canvas"]
  val set_canvas: 'tags this -> HTMLCanvasElement.t -> unit [@@js.set "canvas"]
  val get_caption: 'tags this -> HTMLTableCaptionElement.t [@@js.get "caption"]
  val set_caption: 'tags this -> HTMLTableCaptionElement.t -> unit [@@js.set "caption"]
  val get_cite: 'tags this -> HTMLElement.t [@@js.get "cite"]
  val set_cite: 'tags this -> HTMLElement.t -> unit [@@js.set "cite"]
  val get_code: 'tags this -> HTMLElement.t [@@js.get "code"]
  val set_code: 'tags this -> HTMLElement.t -> unit [@@js.set "code"]
  val get_col: 'tags this -> HTMLTableColElement.t [@@js.get "col"]
  val set_col: 'tags this -> HTMLTableColElement.t -> unit [@@js.set "col"]
  val get_colgroup: 'tags this -> HTMLTableColElement.t [@@js.get "colgroup"]
  val set_colgroup: 'tags this -> HTMLTableColElement.t -> unit [@@js.set "colgroup"]
  val get_data: 'tags this -> HTMLDataElement.t [@@js.get "data"]
  val set_data: 'tags this -> HTMLDataElement.t -> unit [@@js.set "data"]
  val get_datalist: 'tags this -> HTMLDataListElement.t [@@js.get "datalist"]
  val set_datalist: 'tags this -> HTMLDataListElement.t -> unit [@@js.set "datalist"]
  val get_dd: 'tags this -> HTMLElement.t [@@js.get "dd"]
  val set_dd: 'tags this -> HTMLElement.t -> unit [@@js.set "dd"]
  val get_del: 'tags this -> HTMLModElement.t [@@js.get "del"]
  val set_del: 'tags this -> HTMLModElement.t -> unit [@@js.set "del"]
  val get_details: 'tags this -> HTMLDetailsElement.t [@@js.get "details"]
  val set_details: 'tags this -> HTMLDetailsElement.t -> unit [@@js.set "details"]
  val get_dfn: 'tags this -> HTMLElement.t [@@js.get "dfn"]
  val set_dfn: 'tags this -> HTMLElement.t -> unit [@@js.set "dfn"]
  val get_dialog: 'tags this -> HTMLDialogElement.t [@@js.get "dialog"]
  val set_dialog: 'tags this -> HTMLDialogElement.t -> unit [@@js.set "dialog"]
  val get_div: 'tags this -> HTMLDivElement.t [@@js.get "div"]
  val set_div: 'tags this -> HTMLDivElement.t -> unit [@@js.set "div"]
  val get_dl: 'tags this -> HTMLDListElement.t [@@js.get "dl"]
  val set_dl: 'tags this -> HTMLDListElement.t -> unit [@@js.set "dl"]
  val get_dt: 'tags this -> HTMLElement.t [@@js.get "dt"]
  val set_dt: 'tags this -> HTMLElement.t -> unit [@@js.set "dt"]
  val get_em: 'tags this -> HTMLElement.t [@@js.get "em"]
  val set_em: 'tags this -> HTMLElement.t -> unit [@@js.set "em"]
  val get_embed: 'tags this -> HTMLEmbedElement.t [@@js.get "embed"]
  val set_embed: 'tags this -> HTMLEmbedElement.t -> unit [@@js.set "embed"]
  val get_fieldset: 'tags this -> HTMLFieldSetElement.t [@@js.get "fieldset"]
  val set_fieldset: 'tags this -> HTMLFieldSetElement.t -> unit [@@js.set "fieldset"]
  val get_figcaption: 'tags this -> HTMLElement.t [@@js.get "figcaption"]
  val set_figcaption: 'tags this -> HTMLElement.t -> unit [@@js.set "figcaption"]
  val get_figure: 'tags this -> HTMLElement.t [@@js.get "figure"]
  val set_figure: 'tags this -> HTMLElement.t -> unit [@@js.set "figure"]
  val get_footer: 'tags this -> HTMLElement.t [@@js.get "footer"]
  val set_footer: 'tags this -> HTMLElement.t -> unit [@@js.set "footer"]
  val get_form: 'tags this -> HTMLFormElement.t [@@js.get "form"]
  val set_form: 'tags this -> HTMLFormElement.t -> unit [@@js.set "form"]
  val get_h1: 'tags this -> HTMLHeadingElement.t [@@js.get "h1"]
  val set_h1: 'tags this -> HTMLHeadingElement.t -> unit [@@js.set "h1"]
  val get_h2: 'tags this -> HTMLHeadingElement.t [@@js.get "h2"]
  val set_h2: 'tags this -> HTMLHeadingElement.t -> unit [@@js.set "h2"]
  val get_h3: 'tags this -> HTMLHeadingElement.t [@@js.get "h3"]
  val set_h3: 'tags this -> HTMLHeadingElement.t -> unit [@@js.set "h3"]
  val get_h4: 'tags this -> HTMLHeadingElement.t [@@js.get "h4"]
  val set_h4: 'tags this -> HTMLHeadingElement.t -> unit [@@js.set "h4"]
  val get_h5: 'tags this -> HTMLHeadingElement.t [@@js.get "h5"]
  val set_h5: 'tags this -> HTMLHeadingElement.t -> unit [@@js.set "h5"]
  val get_h6: 'tags this -> HTMLHeadingElement.t [@@js.get "h6"]
  val set_h6: 'tags this -> HTMLHeadingElement.t -> unit [@@js.set "h6"]
  val get_head: 'tags this -> HTMLHeadElement.t [@@js.get "head"]
  val set_head: 'tags this -> HTMLHeadElement.t -> unit [@@js.set "head"]
  val get_header: 'tags this -> HTMLElement.t [@@js.get "header"]
  val set_header: 'tags this -> HTMLElement.t -> unit [@@js.set "header"]
  val get_hgroup: 'tags this -> HTMLElement.t [@@js.get "hgroup"]
  val set_hgroup: 'tags this -> HTMLElement.t -> unit [@@js.set "hgroup"]
  val get_hr: 'tags this -> HTMLHRElement.t [@@js.get "hr"]
  val set_hr: 'tags this -> HTMLHRElement.t -> unit [@@js.set "hr"]
  val get_html: 'tags this -> HTMLHtmlElement.t [@@js.get "html"]
  val set_html: 'tags this -> HTMLHtmlElement.t -> unit [@@js.set "html"]
  val get_i: 'tags this -> HTMLElement.t [@@js.get "i"]
  val set_i: 'tags this -> HTMLElement.t -> unit [@@js.set "i"]
  val get_iframe: 'tags this -> HTMLIFrameElement.t [@@js.get "iframe"]
  val set_iframe: 'tags this -> HTMLIFrameElement.t -> unit [@@js.set "iframe"]
  val get_img: 'tags this -> HTMLImageElement.t [@@js.get "img"]
  val set_img: 'tags this -> HTMLImageElement.t -> unit [@@js.set "img"]
  val get_input: 'tags this -> HTMLInputElement.t [@@js.get "input"]
  val set_input: 'tags this -> HTMLInputElement.t -> unit [@@js.set "input"]
  val get_ins: 'tags this -> HTMLModElement.t [@@js.get "ins"]
  val set_ins: 'tags this -> HTMLModElement.t -> unit [@@js.set "ins"]
  val get_kbd: 'tags this -> HTMLElement.t [@@js.get "kbd"]
  val set_kbd: 'tags this -> HTMLElement.t -> unit [@@js.set "kbd"]
  val get_label: 'tags this -> HTMLLabelElement.t [@@js.get "label"]
  val set_label: 'tags this -> HTMLLabelElement.t -> unit [@@js.set "label"]
  val get_legend: 'tags this -> HTMLLegendElement.t [@@js.get "legend"]
  val set_legend: 'tags this -> HTMLLegendElement.t -> unit [@@js.set "legend"]
  val get_li: 'tags this -> HTMLLIElement.t [@@js.get "li"]
  val set_li: 'tags this -> HTMLLIElement.t -> unit [@@js.set "li"]
  val get_link: 'tags this -> HTMLLinkElement.t [@@js.get "link"]
  val set_link: 'tags this -> HTMLLinkElement.t -> unit [@@js.set "link"]
  val get_main: 'tags this -> HTMLElement.t [@@js.get "main"]
  val set_main: 'tags this -> HTMLElement.t -> unit [@@js.set "main"]
  val get_map: 'tags this -> HTMLMapElement.t [@@js.get "map"]
  val set_map: 'tags this -> HTMLMapElement.t -> unit [@@js.set "map"]
  val get_mark: 'tags this -> HTMLElement.t [@@js.get "mark"]
  val set_mark: 'tags this -> HTMLElement.t -> unit [@@js.set "mark"]
  val get_menu: 'tags this -> HTMLMenuElement.t [@@js.get "menu"]
  val set_menu: 'tags this -> HTMLMenuElement.t -> unit [@@js.set "menu"]
  val get_meta: 'tags this -> HTMLMetaElement.t [@@js.get "meta"]
  val set_meta: 'tags this -> HTMLMetaElement.t -> unit [@@js.set "meta"]
  val get_meter: 'tags this -> HTMLMeterElement.t [@@js.get "meter"]
  val set_meter: 'tags this -> HTMLMeterElement.t -> unit [@@js.set "meter"]
  val get_nav: 'tags this -> HTMLElement.t [@@js.get "nav"]
  val set_nav: 'tags this -> HTMLElement.t -> unit [@@js.set "nav"]
  val get_noscript: 'tags this -> HTMLElement.t [@@js.get "noscript"]
  val set_noscript: 'tags this -> HTMLElement.t -> unit [@@js.set "noscript"]
  val get_object: 'tags this -> HTMLObjectElement.t [@@js.get "object"]
  val set_object: 'tags this -> HTMLObjectElement.t -> unit [@@js.set "object"]
  val get_ol: 'tags this -> HTMLOListElement.t [@@js.get "ol"]
  val set_ol: 'tags this -> HTMLOListElement.t -> unit [@@js.set "ol"]
  val get_optgroup: 'tags this -> HTMLOptGroupElement.t [@@js.get "optgroup"]
  val set_optgroup: 'tags this -> HTMLOptGroupElement.t -> unit [@@js.set "optgroup"]
  val get_option: 'tags this -> HTMLOptionElement.t [@@js.get "option"]
  val set_option: 'tags this -> HTMLOptionElement.t -> unit [@@js.set "option"]
  val get_output: 'tags this -> HTMLOutputElement.t [@@js.get "output"]
  val set_output: 'tags this -> HTMLOutputElement.t -> unit [@@js.set "output"]
  val get_p: 'tags this -> HTMLParagraphElement.t [@@js.get "p"]
  val set_p: 'tags this -> HTMLParagraphElement.t -> unit [@@js.set "p"]
  val get_picture: 'tags this -> HTMLPictureElement.t [@@js.get "picture"]
  val set_picture: 'tags this -> HTMLPictureElement.t -> unit [@@js.set "picture"]
  val get_pre: 'tags this -> HTMLPreElement.t [@@js.get "pre"]
  val set_pre: 'tags this -> HTMLPreElement.t -> unit [@@js.set "pre"]
  val get_progress: 'tags this -> HTMLProgressElement.t [@@js.get "progress"]
  val set_progress: 'tags this -> HTMLProgressElement.t -> unit [@@js.set "progress"]
  val get_q: 'tags this -> HTMLQuoteElement.t [@@js.get "q"]
  val set_q: 'tags this -> HTMLQuoteElement.t -> unit [@@js.set "q"]
  val get_rp: 'tags this -> HTMLElement.t [@@js.get "rp"]
  val set_rp: 'tags this -> HTMLElement.t -> unit [@@js.set "rp"]
  val get_rt: 'tags this -> HTMLElement.t [@@js.get "rt"]
  val set_rt: 'tags this -> HTMLElement.t -> unit [@@js.set "rt"]
  val get_ruby: 'tags this -> HTMLElement.t [@@js.get "ruby"]
  val set_ruby: 'tags this -> HTMLElement.t -> unit [@@js.set "ruby"]
  val get_s: 'tags this -> HTMLElement.t [@@js.get "s"]
  val set_s: 'tags this -> HTMLElement.t -> unit [@@js.set "s"]
  val get_samp: 'tags this -> HTMLElement.t [@@js.get "samp"]
  val set_samp: 'tags this -> HTMLElement.t -> unit [@@js.set "samp"]
  val get_script: 'tags this -> HTMLScriptElement.t [@@js.get "script"]
  val set_script: 'tags this -> HTMLScriptElement.t -> unit [@@js.set "script"]
  val get_search: 'tags this -> HTMLElement.t [@@js.get "search"]
  val set_search: 'tags this -> HTMLElement.t -> unit [@@js.set "search"]
  val get_section: 'tags this -> HTMLElement.t [@@js.get "section"]
  val set_section: 'tags this -> HTMLElement.t -> unit [@@js.set "section"]
  val get_select: 'tags this -> HTMLSelectElement.t [@@js.get "select"]
  val set_select: 'tags this -> HTMLSelectElement.t -> unit [@@js.set "select"]
  val get_slot: 'tags this -> HTMLSlotElement.t [@@js.get "slot"]
  val set_slot: 'tags this -> HTMLSlotElement.t -> unit [@@js.set "slot"]
  val get_small: 'tags this -> HTMLElement.t [@@js.get "small"]
  val set_small: 'tags this -> HTMLElement.t -> unit [@@js.set "small"]
  val get_source: 'tags this -> HTMLSourceElement.t [@@js.get "source"]
  val set_source: 'tags this -> HTMLSourceElement.t -> unit [@@js.set "source"]
  val get_span: 'tags this -> HTMLSpanElement.t [@@js.get "span"]
  val set_span: 'tags this -> HTMLSpanElement.t -> unit [@@js.set "span"]
  val get_strong: 'tags this -> HTMLElement.t [@@js.get "strong"]
  val set_strong: 'tags this -> HTMLElement.t -> unit [@@js.set "strong"]
  val get_style: 'tags this -> HTMLStyleElement.t [@@js.get "style"]
  val set_style: 'tags this -> HTMLStyleElement.t -> unit [@@js.set "style"]
  val get_sub: 'tags this -> HTMLElement.t [@@js.get "sub"]
  val set_sub: 'tags this -> HTMLElement.t -> unit [@@js.set "sub"]
  val get_summary: 'tags this -> HTMLElement.t [@@js.get "summary"]
  val set_summary: 'tags this -> HTMLElement.t -> unit [@@js.set "summary"]
  val get_sup: 'tags this -> HTMLElement.t [@@js.get "sup"]
  val set_sup: 'tags this -> HTMLElement.t -> unit [@@js.set "sup"]
  val get_table: 'tags this -> HTMLTableElement.t [@@js.get "table"]
  val set_table: 'tags this -> HTMLTableElement.t -> unit [@@js.set "table"]
  val get_tbody: 'tags this -> HTMLTableSectionElement.t [@@js.get "tbody"]
  val set_tbody: 'tags this -> HTMLTableSectionElement.t -> unit [@@js.set "tbody"]
  val get_td: 'tags this -> HTMLTableCellElement.t [@@js.get "td"]
  val set_td: 'tags this -> HTMLTableCellElement.t -> unit [@@js.set "td"]
  val get_template: 'tags this -> HTMLTemplateElement.t [@@js.get "template"]
  val set_template: 'tags this -> HTMLTemplateElement.t -> unit [@@js.set "template"]
  val get_textarea: 'tags this -> HTMLTextAreaElement.t [@@js.get "textarea"]
  val set_textarea: 'tags this -> HTMLTextAreaElement.t -> unit [@@js.set "textarea"]
  val get_tfoot: 'tags this -> HTMLTableSectionElement.t [@@js.get "tfoot"]
  val set_tfoot: 'tags this -> HTMLTableSectionElement.t -> unit [@@js.set "tfoot"]
  val get_th: 'tags this -> HTMLTableCellElement.t [@@js.get "th"]
  val set_th: 'tags this -> HTMLTableCellElement.t -> unit [@@js.set "th"]
  val get_thead: 'tags this -> HTMLTableSectionElement.t [@@js.get "thead"]
  val set_thead: 'tags this -> HTMLTableSectionElement.t -> unit [@@js.set "thead"]
  val get_time: 'tags this -> HTMLTimeElement.t [@@js.get "time"]
  val set_time: 'tags this -> HTMLTimeElement.t -> unit [@@js.set "time"]
  val get_title: 'tags this -> HTMLTitleElement.t [@@js.get "title"]
  val set_title: 'tags this -> HTMLTitleElement.t -> unit [@@js.set "title"]
  val get_tr: 'tags this -> HTMLTableRowElement.t [@@js.get "tr"]
  val set_tr: 'tags this -> HTMLTableRowElement.t -> unit [@@js.set "tr"]
  val get_track: 'tags this -> HTMLTrackElement.t [@@js.get "track"]
  val set_track: 'tags this -> HTMLTrackElement.t -> unit [@@js.set "track"]
  val get_u: 'tags this -> HTMLElement.t [@@js.get "u"]
  val set_u: 'tags this -> HTMLElement.t -> unit [@@js.set "u"]
  val get_ul: 'tags this -> HTMLUListElement.t [@@js.get "ul"]
  val set_ul: 'tags this -> HTMLUListElement.t -> unit [@@js.set "ul"]
  val get_var: 'tags this -> HTMLElement.t [@@js.get "var"]
  val set_var: 'tags this -> HTMLElement.t -> unit [@@js.set "var"]
  val get_video: 'tags this -> HTMLVideoElement.t [@@js.get "video"]
  val set_video: 'tags this -> HTMLVideoElement.t -> unit [@@js.set "video"]
  val get_wbr: 'tags this -> HTMLElement.t [@@js.get "wbr"]
  val set_wbr: 'tags this -> HTMLElement.t -> unit [@@js.set "wbr"]
  val create: a:HTMLAnchorElement.t -> abbr:HTMLElement.t -> address:HTMLElement.t -> area:HTMLAreaElement.t -> article:HTMLElement.t -> aside:HTMLElement.t -> audio:HTMLAudioElement.t -> b:HTMLElement.t -> base:HTMLBaseElement.t -> bdi:HTMLElement.t -> bdo:HTMLElement.t -> blockquote:HTMLQuoteElement.t -> body:HTMLBodyElement.t -> br:HTMLBRElement.t -> button:HTMLButtonElement.t -> canvas:HTMLCanvasElement.t -> caption:HTMLTableCaptionElement.t -> cite:HTMLElement.t -> code:HTMLElement.t -> col:HTMLTableColElement.t -> colgroup:HTMLTableColElement.t -> data:HTMLDataElement.t -> datalist:HTMLDataListElement.t -> dd:HTMLElement.t -> del:HTMLModElement.t -> details:HTMLDetailsElement.t -> dfn:HTMLElement.t -> dialog:HTMLDialogElement.t -> div:HTMLDivElement.t -> dl:HTMLDListElement.t -> dt:HTMLElement.t -> em:HTMLElement.t -> embed:HTMLEmbedElement.t -> fieldset:HTMLFieldSetElement.t -> figcaption:HTMLElement.t -> figure:HTMLElement.t -> footer:HTMLElement.t -> form:HTMLFormElement.t -> h1:HTMLHeadingElement.t -> h2:HTMLHeadingElement.t -> h3:HTMLHeadingElement.t -> h4:HTMLHeadingElement.t -> h5:HTMLHeadingElement.t -> h6:HTMLHeadingElement.t -> head:HTMLHeadElement.t -> header:HTMLElement.t -> hgroup:HTMLElement.t -> hr:HTMLHRElement.t -> html:HTMLHtmlElement.t -> i:HTMLElement.t -> iframe:HTMLIFrameElement.t -> img:HTMLImageElement.t -> input:HTMLInputElement.t -> ins:HTMLModElement.t -> kbd:HTMLElement.t -> label:HTMLLabelElement.t -> legend:HTMLLegendElement.t -> li:HTMLLIElement.t -> link:HTMLLinkElement.t -> main:HTMLElement.t -> map:HTMLMapElement.t -> mark:HTMLElement.t -> menu:HTMLMenuElement.t -> meta:HTMLMetaElement.t -> meter:HTMLMeterElement.t -> nav:HTMLElement.t -> noscript:HTMLElement.t -> object_:(HTMLObjectElement.t[@js "object"]) -> ol:HTMLOListElement.t -> optgroup:HTMLOptGroupElement.t -> option:HTMLOptionElement.t -> output:HTMLOutputElement.t -> p:HTMLParagraphElement.t -> picture:HTMLPictureElement.t -> pre:HTMLPreElement.t -> progress:HTMLProgressElement.t -> q:HTMLQuoteElement.t -> rp:HTMLElement.t -> rt:HTMLElement.t -> ruby:HTMLElement.t -> s:HTMLElement.t -> samp:HTMLElement.t -> script:HTMLScriptElement.t -> search:HTMLElement.t -> section:HTMLElement.t -> select:HTMLSelectElement.t -> slot:HTMLSlotElement.t -> small:HTMLElement.t -> source:HTMLSourceElement.t -> span:HTMLSpanElement.t -> strong:HTMLElement.t -> style:HTMLStyleElement.t -> sub:HTMLElement.t -> summary:HTMLElement.t -> sup:HTMLElement.t -> table:HTMLTableElement.t -> tbody:HTMLTableSectionElement.t -> td:HTMLTableCellElement.t -> template:HTMLTemplateElement.t -> textarea:HTMLTextAreaElement.t -> tfoot:HTMLTableSectionElement.t -> th:HTMLTableCellElement.t -> thead:HTMLTableSectionElement.t -> time:HTMLTimeElement.t -> title:HTMLTitleElement.t -> tr:HTMLTableRowElement.t -> track:HTMLTrackElement.t -> u:HTMLElement.t -> ul:HTMLUListElement.t -> var:HTMLElement.t -> video:HTMLVideoElement.t -> wbr:HTMLElement.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** @deprecated Directly use HTMLElementTagNameMap or SVGElementTagNameMap as appropriate, instead. *)
module ElementTagNameMap : sig
  type t = (HTMLElementTagNameMap.t, (SVGElementTagNameMap.t, (([`L_s1026_use[@js "use"] | `L_s1038_view[@js "view"] | `L_s112_a[@js "a"] | `L_s144_animate[@js "animate"] | `L_s145_animateMotion[@js "animateMotion"] | `L_s146_animateTransform[@js "animateTransform"] | `L_s247_circle[@js "circle"] | `L_s253_clipPath[@js "clipPath"] | `L_s308_defs[@js "defs"] | `L_s315_desc[@js "desc"] | `L_s356_ellipse[@js "ellipse"] | `L_s390_feBlend[@js "feBlend"] | `L_s391_feColorMatrix[@js "feColorMatrix"] | `L_s392_feComponentTransfer[@js "feComponentTransfer"] | `L_s393_feComposite[@js "feComposite"] | `L_s394_feConvolveMatrix[@js "feConvolveMatrix"] | `L_s395_feDiffuseLighting[@js "feDiffuseLighting"] | `L_s396_feDisplacementMap[@js "feDisplacementMap"] | `L_s397_feDistantLight[@js "feDistantLight"] | `L_s398_feDropShadow[@js "feDropShadow"] | `L_s399_feFlood[@js "feFlood"] | `L_s400_feFuncA[@js "feFuncA"] | `L_s401_feFuncB[@js "feFuncB"] | `L_s402_feFuncG[@js "feFuncG"] | `L_s403_feFuncR[@js "feFuncR"] | `L_s404_feGaussianBlur[@js "feGaussianBlur"] | `L_s405_feImage[@js "feImage"] | `L_s406_feMerge[@js "feMerge"] | `L_s407_feMergeNode[@js "feMergeNode"] | `L_s408_feMorphology[@js "feMorphology"] | `L_s409_feOffset[@js "feOffset"] | `L_s410_fePointLight[@js "fePointLight"] | `L_s411_feSpecularLighting[@js "feSpecularLighting"] | `L_s412_feSpotLight[@js "feSpotLight"] | `L_s413_feTile[@js "feTile"] | `L_s414_feTurbulence[@js "feTurbulence"] | `L_s419_filter[@js "filter"] | `L_s432_foreignObject[@js "foreignObject"] | `L_s445_g[@js "g"] | `L_s507_image[@js "image"] | `L_s561_line[@js "line"] | `L_s565_linearGradient[@js "linearGradient"] | `L_s597_marker[@js "marker"] | `L_s599_mask[@js "mask"] | `L_s615_metadata[@js "metadata"] | `L_s639_mpath[@js "mpath"] | `L_s729_path[@js "path"] | `L_s730_pattern[@js "pattern"] | `L_s760_polygon[@js "polygon"] | `L_s761_polyline[@js "polyline"] | `L_s792_radialGradient[@js "radialGradient"] | `L_s803_rect[@js "rect"] | `L_s851_script[@js "script"] | `L_s878_set[@js "set"] | `L_s922_stop[@js "stop"] | `L_s932_style[@js "style"] | `L_s944_svg[@js "svg"] | `L_s946_switch[@js "switch"] | `L_s947_symbol[@js "symbol"] | `L_s965_text[@js "text"] | `L_s969_textPath[@js "textPath"] | `L_s978_title[@js "title"] | `L_s999_tspan[@js "tspan"]] [@js.enum]), ([`L_s1001_u[@js "u"] | `L_s1003_ul[@js "ul"] | `L_s1030_var[@js "var"] | `L_s1036_video[@js "video"] | `L_s1046_wbr[@js "wbr"] | `L_s112_a[@js "a"] | `L_s114_abbr[@js "abbr"] | `L_s123_address[@js "address"] | `L_s159_area[@js "area"] | `L_s161_article[@js "article"] | `L_s162_aside[@js "aside"] | `L_s166_audio[@js "audio"] | `L_s177_b[@js "b"] | `L_s183_base[@js "base"] | `L_s189_bdi[@js "bdi"] | `L_s190_bdo[@js "bdo"] | `L_s207_blockquote[@js "blockquote"] | `L_s209_body[@js "body"] | `L_s214_br[@js "br"] | `L_s220_button[@js "button"] | `L_s228_canvas[@js "canvas"] | `L_s229_caption[@js "caption"] | `L_s248_cite[@js "cite"] | `L_s258_code[@js "code"] | `L_s260_col[@js "col"] | `L_s261_colgroup[@js "colgroup"] | `L_s295_data[@js "data"] | `L_s300_datalist[@js "datalist"] | `L_s302_dd[@js "dd"] | `L_s309_del[@js "del"] | `L_s321_details[@js "details"] | `L_s327_dfn[@js "dfn"] | `L_s328_dialog[@js "dialog"] | `L_s340_div[@js "div"] | `L_s341_dl[@js "dl"] | `L_s351_dt[@js "dt"] | `L_s357_em[@js "em"] | `L_s359_embed[@js "embed"] | `L_s415_fieldset[@js "fieldset"] | `L_s416_figcaption[@js "figcaption"] | `L_s417_figure[@js "figure"] | `L_s430_footer[@js "footer"] | `L_s433_form[@js "form"] | `L_s458_h1[@js "h1"] | `L_s459_h2[@js "h2"] | `L_s460_h3[@js "h3"] | `L_s461_h4[@js "h4"] | `L_s462_h5[@js "h5"] | `L_s463_h6[@js "h6"] | `L_s474_head[@js "head"] | `L_s475_header[@js "header"] | `L_s476_hgroup[@js "hgroup"] | `L_s489_hr[@js "hr"] | `L_s490_html[@js "html"] | `L_s496_i[@js "i"] | `L_s506_iframe[@js "iframe"] | `L_s509_img[@js "img"] | `L_s520_input[@js "input"] | `L_s521_ins[@js "ins"] | `L_s537_kbd[@js "kbd"] | `L_s545_label[@js "label"] | `L_s553_legend[@js "legend"] | `L_s555_li[@js "li"] | `L_s566_link[@js "link"] | `L_s590_main[@js "main"] | `L_s595_map[@js "map"] | `L_s596_mark[@js "mark"] | `L_s609_menu[@js "menu"] | `L_s614_meta[@js "meta"] | `L_s616_meter[@js "meter"] | `L_s663_nav[@js "nav"] | `L_s688_noscript[@js "noscript"] | `L_s692_object[@js "object"] | `L_s696_ol[@js "ol"] | `L_s705_optgroup[@js "optgroup"] | `L_s708_option[@js "option"] | `L_s715_output[@js "output"] | `L_s719_p[@js "p"] | `L_s742_picture[@js "picture"] | `L_s768_pre[@js "pre"] | `L_s784_progress[@js "progress"] | `L_s789_q[@js "q"] | `L_s836_rp[@js "rp"] | `L_s837_rt[@js "rt"] | `L_s842_ruby[@js "ruby"] | `L_s844_s[@js "s"] | `L_s846_samp[@js "samp"] | `L_s851_script[@js "script"] | `L_s856_search[@js "search"] | `L_s858_section[@js "section"] | `L_s867_select[@js "select"] | `L_s889_slot[@js "slot"] | `L_s891_small[@js "small"] | `L_s900_source[@js "source"] | `L_s909_span[@js "span"] | `L_s931_strong[@js "strong"] | `L_s932_style[@js "style"] | `L_s934_sub[@js "sub"] | `L_s940_summary[@js "summary"] | `L_s941_sup[@js "sup"] | `L_s951_table[@js "table"] | `L_s952_tbody[@js "tbody"] | `L_s954_td[@js "td"] | `L_s963_template[@js "template"] | `L_s970_textarea[@js "textarea"] | `L_s971_tfoot[@js "tfoot"] | `L_s972_th[@js "th"] | `L_s973_thead[@js "thead"] | `L_s975_time[@js "time"] | `L_s978_title[@js "title"] | `L_s987_tr[@js "tr"] | `L_s988_track[@js "track"]] [@js.enum])) Exclude.t) Pick.t) intersection2
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module EcKeyAlgorithm : sig
  type t = [`EcKeyAlgorithm | `KeyAlgorithm] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EcKeyAlgorithm | `KeyAlgorithm]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EcKeyAlgorithm | `KeyAlgorithm]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EcKeyAlgorithm ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_namedCurve: 'tags this -> NamedCurve.t [@@js.get "namedCurve"]
  val set_namedCurve: 'tags this -> NamedCurve.t -> unit [@@js.set "namedCurve"]
  val create: namedCurve:NamedCurve.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EXT_texture_norm16) *)
module EXT_texture_norm16 : sig
  type t = [`EXT_texture_norm16] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`EXT_texture_norm16]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`EXT_texture_norm16]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `EXT_texture_norm16 ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_R16_EXT: 'tags this -> ([`L_n_33322[@js 33322]] [@js.enum]) [@@js.get "R16_EXT"]
  val get_RG16_EXT: 'tags this -> ([`L_n_33324[@js 33324]] [@js.enum]) [@@js.get "RG16_EXT"]
  val get_RGB16_EXT: 'tags this -> ([`L_n_32852[@js 32852]] [@js.enum]) [@@js.get "RGB16_EXT"]
  val get_RGBA16_EXT: 'tags this -> ([`L_n_32859[@js 32859]] [@js.enum]) [@@js.get "RGBA16_EXT"]
  val get_R16_SNORM_EXT: 'tags this -> ([`L_n_36760[@js 36760]] [@js.enum]) [@@js.get "R16_SNORM_EXT"]
  val get_RG16_SNORM_EXT: 'tags this -> ([`L_n_36761[@js 36761]] [@js.enum]) [@@js.get "RG16_SNORM_EXT"]
  val get_RGB16_SNORM_EXT: 'tags this -> ([`L_n_36762[@js 36762]] [@js.enum]) [@@js.get "RGB16_SNORM_EXT"]
  val get_RGBA16_SNORM_EXT: 'tags this -> ([`L_n_36763[@js 36763]] [@js.enum]) [@@js.get "RGBA16_SNORM_EXT"]
  val create: r16_ext:(([`L_n_33322[@js 33322]] [@js.enum])[@js "R16_EXT"]) -> rg16_ext:(([`L_n_33324[@js 33324]] [@js.enum])[@js "RG16_EXT"]) -> rgb16_ext:(([`L_n_32852[@js 32852]] [@js.enum])[@js "RGB16_EXT"]) -> rgba16_ext:(([`L_n_32859[@js 32859]] [@js.enum])[@js "RGBA16_EXT"]) -> r16_snorm_ext:(([`L_n_36760[@js 36760]] [@js.enum])[@js "R16_SNORM_EXT"]) -> rg16_snorm_ext:(([`L_n_36761[@js 36761]] [@js.enum])[@js "RG16_SNORM_EXT"]) -> rgb16_snorm_ext:(([`L_n_36762[@js 36762]] [@js.enum])[@js "RGB16_SNORM_EXT"]) -> rgba16_snorm_ext:(([`L_n_36763[@js 36763]] [@js.enum])[@js "RGBA16_SNORM_EXT"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module DocumentEventMap : sig
  type t = [`DocumentEventMap | `GlobalEventHandlersEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DocumentEventMap | `GlobalEventHandlersEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DocumentEventMap | `GlobalEventHandlersEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DocumentEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_DOMContentLoaded: 'tags this -> Event.t [@@js.get "DOMContentLoaded"]
  val set_DOMContentLoaded: 'tags this -> Event.t -> unit [@@js.set "DOMContentLoaded"]
  val get_fullscreenchange: 'tags this -> Event.t [@@js.get "fullscreenchange"]
  val set_fullscreenchange: 'tags this -> Event.t -> unit [@@js.set "fullscreenchange"]
  val get_fullscreenerror: 'tags this -> Event.t [@@js.get "fullscreenerror"]
  val set_fullscreenerror: 'tags this -> Event.t -> unit [@@js.set "fullscreenerror"]
  val get_pointerlockchange: 'tags this -> Event.t [@@js.get "pointerlockchange"]
  val set_pointerlockchange: 'tags this -> Event.t -> unit [@@js.set "pointerlockchange"]
  val get_pointerlockerror: 'tags this -> Event.t [@@js.get "pointerlockerror"]
  val set_pointerlockerror: 'tags this -> Event.t -> unit [@@js.set "pointerlockerror"]
  val get_readystatechange: 'tags this -> Event.t [@@js.get "readystatechange"]
  val set_readystatechange: 'tags this -> Event.t -> unit [@@js.set "readystatechange"]
  val get_visibilitychange: 'tags this -> Event.t [@@js.get "visibilitychange"]
  val set_visibilitychange: 'tags this -> Event.t -> unit [@@js.set "visibilitychange"]
  val create: dOMContentLoaded:(Event.t[@js "DOMContentLoaded"]) -> fullscreenchange:Event.t -> fullscreenerror:Event.t -> pointerlockchange:Event.t -> pointerlockerror:Event.t -> readystatechange:Event.t -> visibilitychange:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module DisplayCaptureSurfaceType : sig
  type t = ([`L_s1057_window[@js "window"] | `L_s215_browser[@js "browser"] | `L_s628_monitor[@js "monitor"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module CompressionFormat : sig
  type t = ([`L_s306_deflate[@js "deflate"] | `L_s307_deflate_raw[@js "deflate-raw"] | `L_s457_gzip[@js "gzip"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DecompressionStream) *)
module[@js.scope "DecompressionStream"] DecompressionStream : sig
  type t = [`DecompressionStream | `GenericTransformStream] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DecompressionStream | `GenericTransformStream]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DecompressionStream | `GenericTransformStream]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DecompressionStream ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: CompressionFormat.t -> t [@@js.create]
end
module DOMQuadInit : sig
  type t = [`DOMQuadInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DOMQuadInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DOMQuadInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DOMQuadInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_p1: 'tags this -> DOMPointInit.t option [@@js.get "p1"]
  val set_p1: 'tags this -> DOMPointInit.t -> unit [@@js.set "p1"]
  val get_p2: 'tags this -> DOMPointInit.t option [@@js.get "p2"]
  val set_p2: 'tags this -> DOMPointInit.t -> unit [@@js.set "p2"]
  val get_p3: 'tags this -> DOMPointInit.t option [@@js.get "p3"]
  val set_p3: 'tags this -> DOMPointInit.t -> unit [@@js.set "p3"]
  val get_p4: 'tags this -> DOMPointInit.t option [@@js.get "p4"]
  val set_p4: 'tags this -> DOMPointInit.t -> unit [@@js.set "p4"]
  val create: ?p1:DOMPointInit.t -> ?p2:DOMPointInit.t -> ?p3:DOMPointInit.t -> ?p4:DOMPointInit.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMQuad) *)
module[@js.scope "DOMQuad"] DOMQuad : sig
  type t = [`DOMQuad] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DOMQuad]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DOMQuad]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DOMQuad ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMQuad/p1) *)
  val get_p1: 'tags this -> DOMPoint.t [@@js.get "p1"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMQuad/p2) *)
  val get_p2: 'tags this -> DOMPoint.t [@@js.get "p2"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMQuad/p3) *)
  val get_p3: 'tags this -> DOMPoint.t [@@js.get "p3"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMQuad/p4) *)
  val get_p4: 'tags this -> DOMPoint.t [@@js.get "p4"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMQuad/getBounds) *)
  val getBounds: 'tags this -> DOMRect.t [@@js.call "getBounds"]
  val toJSON: 'tags this -> any [@@js.call "toJSON"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: ?p1:DOMPointInit.t -> ?p2:DOMPointInit.t -> ?p3:DOMPointInit.t -> ?p4:DOMPointInit.t -> unit -> t [@@js.create]
  val fromQuad: ?other:DOMQuadInit.t -> unit -> t [@@js.global "fromQuad"]
  val fromRect: ?other:DOMRectInit.t -> unit -> t [@@js.global "fromRect"]
end
module DOMParserSupportedType : sig
  type t = ([`L_s157_application_xhtml_xml[@js "application/xhtml+xml"] | `L_s158_application_xml[@js "application/xml"] | `L_s508_image_svg_xml[@js "image/svg+xml"] | `L_s967_text_html[@js "text/html"] | `L_s968_text_xml[@js "text/xml"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  Provides the ability to parse XML or HTML source code from a string into a DOM Document.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMParser)
*)
module[@js.scope "DOMParser"] DOMParser : sig
  type t = [`DOMParser] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`DOMParser]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`DOMParser]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `DOMParser ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Parses string using either the HTML or XML parser, according to type, and returns the resulting Document. type can be "text/html" (which will invoke the HTML parser), or any of "text/xml", "application/xml", "application/xhtml+xml", or "image/svg+xml" (which will invoke the XML parser).
    
    For the XML parser, if string cannot be parsed, then the returned Document will contain elements describing the resulting error.
    
    Note that script elements are not evaluated during parsing, and the resulting document's encoding will always be UTF-8.
    
    Values other than the above for type will cause a TypeError exception to be thrown.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DOMParser/parseFromString)
  *)
  val parseFromString: 'tags this -> string:string -> type_:DOMParserSupportedType.t -> Document.t [@@js.call "parseFromString"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module QueuingStrategyInit : sig
  type t = [`QueuingStrategyInit] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`QueuingStrategyInit]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`QueuingStrategyInit]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `QueuingStrategyInit ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Creates a new ByteLengthQueuingStrategy with the provided high water mark.
    
    Note that the provided high water mark will not be validated ahead of time. Instead, if it is negative, NaN, or not a number, the resulting ByteLengthQueuingStrategy will cause the corresponding stream constructor to throw.
  *)
  val get_highWaterMark: 'tags this -> float [@@js.get "highWaterMark"]
  
  (**
    Creates a new ByteLengthQueuingStrategy with the provided high water mark.
    
    Note that the provided high water mark will not be validated ahead of time. Instead, if it is negative, NaN, or not a number, the resulting ByteLengthQueuingStrategy will cause the corresponding stream constructor to throw.
  *)
  val set_highWaterMark: 'tags this -> float -> unit [@@js.set "highWaterMark"]
  val create: highWaterMark:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  This Streams API interface providesÂ a built-in byte length queuing strategy that can be used when constructing streams.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CountQueuingStrategy)
*)
module[@js.scope "CountQueuingStrategy"] CountQueuingStrategy : sig
  type t = [`CountQueuingStrategy | `QueuingStrategy of any] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CountQueuingStrategy | `QueuingStrategy of any]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CountQueuingStrategy | `QueuingStrategy of any]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CountQueuingStrategy ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CountQueuingStrategy/highWaterMark) *)
  val get_highWaterMark: 'tags this -> float [@@js.get "highWaterMark"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CountQueuingStrategy/size) *)
  val get_size: 'tags this -> QueuingStrategySize.t_0 [@@js.get "size"]
  val create: highWaterMark:float -> size:QueuingStrategySize.t_0 -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': QueuingStrategyInit.t -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console) *)
module Console : sig
  type t = [`Console] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Console]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Console]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Console ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/assert_static) *)
  val assert_: 'tags this -> ?condition:bool -> data:(any list [@js.variadic]) -> unit -> unit [@@js.call "assert"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/clear_static) *)
  val clear: 'tags this -> unit [@@js.call "clear"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/count_static) *)
  val count: 'tags this -> ?label:string -> unit -> unit [@@js.call "count"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/countReset_static) *)
  val countReset: 'tags this -> ?label:string -> unit -> unit [@@js.call "countReset"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/debug_static) *)
  val debug: 'tags this -> data:(any list [@js.variadic]) -> unit [@@js.call "debug"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/dir_static) *)
  val dir: 'tags this -> ?item:any -> ?options:any -> unit -> unit [@@js.call "dir"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/dirxml_static) *)
  val dirxml: 'tags this -> data:(any list [@js.variadic]) -> unit [@@js.call "dirxml"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/error_static) *)
  val error: 'tags this -> data:(any list [@js.variadic]) -> unit [@@js.call "error"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/group_static) *)
  val group: 'tags this -> data:(any list [@js.variadic]) -> unit [@@js.call "group"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/groupCollapsed_static) *)
  val groupCollapsed: 'tags this -> data:(any list [@js.variadic]) -> unit [@@js.call "groupCollapsed"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/groupEnd_static) *)
  val groupEnd: 'tags this -> unit [@@js.call "groupEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/info_static) *)
  val info: 'tags this -> data:(any list [@js.variadic]) -> unit [@@js.call "info"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/log_static) *)
  val log: 'tags this -> data:(any list [@js.variadic]) -> unit [@@js.call "log"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/table_static) *)
  val table: 'tags this -> ?tabularData:any -> ?properties:string list -> unit -> unit [@@js.call "table"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/time_static) *)
  val time: 'tags this -> ?label:string -> unit -> unit [@@js.call "time"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/timeEnd_static) *)
  val timeEnd: 'tags this -> ?label:string -> unit -> unit [@@js.call "timeEnd"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/timeLog_static) *)
  val timeLog: 'tags this -> ?label:string -> data:(any list [@js.variadic]) -> unit -> unit [@@js.call "timeLog"]
  
  (**
    This method does not display anything unless used in the inspector.
     Adds an event with the label `label` to the Timeline panel of the inspector.
  *)
  val timeStamp: 'tags this -> ?label:string -> unit -> unit [@@js.call "timeStamp"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/trace_static) *)
  val trace: 'tags this -> data:(any list [@js.variadic]) -> unit [@@js.call "trace"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/console/warn_static) *)
  val warn: 'tags this -> data:(any list [@js.variadic]) -> unit [@@js.call "warn"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CompressionStream) *)
module[@js.scope "CompressionStream"] CompressionStream : sig
  type t = [`CompressionStream | `GenericTransformStream] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CompressionStream | `GenericTransformStream]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CompressionStream | `GenericTransformStream]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CompressionStream ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: CompressionFormat.t -> t [@@js.create]
end
module ClipboardItemData : sig
  type t = ([`String of string | `Other of Blob.t] [@js.union on_field "dummy"]) Primitive.t Promise.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(** @deprecated  *)
module ClientRect : sig
  type t = [`ClientRect | `DOMRect | `DOMRectReadOnly] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ClientRect | `DOMRect | `DOMRectReadOnly]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ClientRect | `DOMRect | `DOMRectReadOnly]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ClientRect ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module ClientTypes : sig
  type t = ([`L_s1057_window[@js "window"] | `L_s1059_worker[@js "worker"] | `L_s136_all[@js "all"] | `L_s880_sharedworker[@js "sharedworker"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module ClientQueryOptions : sig
  type t = [`ClientQueryOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ClientQueryOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ClientQueryOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ClientQueryOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_includeUncontrolled: 'tags this -> bool option [@@js.get "includeUncontrolled"]
  val set_includeUncontrolled: 'tags this -> bool -> unit [@@js.set "includeUncontrolled"]
  val get_type: 'tags this -> ClientTypes.t option [@@js.get "type"]
  val set_type: 'tags this -> ClientTypes.t -> unit [@@js.set "type"]
  val create: ?includeUncontrolled:bool -> ?type_:(ClientTypes.t[@js "type"]) -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasCaptureMediaStreamTrack) *)
module[@js.scope "CanvasCaptureMediaStreamTrack"] CanvasCaptureMediaStreamTrack : sig
  type t = [`CanvasCaptureMediaStreamTrack | `EventTarget | `MediaStreamTrack] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CanvasCaptureMediaStreamTrack | `EventTarget | `MediaStreamTrack]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CanvasCaptureMediaStreamTrack | `EventTarget | `MediaStreamTrack]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CanvasCaptureMediaStreamTrack ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasCaptureMediaStreamTrack/canvas) *)
  val get_canvas: 'tags this -> HTMLCanvasElement.t [@@js.get "canvas"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CanvasCaptureMediaStreamTrack/requestFrame) *)
  val requestFrame: 'tags this -> unit [@@js.call "requestFrame"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'MediaStreamTrackEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'MediaStreamTrackEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module rec CSSUnparsedSegment : sig
  type t = ([`String of string | `Other of CSSVariableReferenceValue.t] [@js.union on_field "dummy"]) Primitive.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSUnparsedValue) *)
and[@js.scope "CSSUnparsedValue"] CSSUnparsedValue : sig
  type t = [`CSSStyleValue | `CSSUnparsedValue] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSStyleValue | `CSSUnparsedValue]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSStyleValue | `CSSUnparsedValue]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSUnparsedValue ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> CSSUnparsedSegment.t IterableIterator.t *)
  val entries: 'tags this -> (float * CSSUnparsedSegment.t) IterableIterator.t [@@js.call "entries"]
  val keys: 'tags this -> float IterableIterator.t [@@js.call "keys"]
  val values: 'tags this -> CSSUnparsedSegment.t IterableIterator.t [@@js.call "values"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSUnparsedValue/length) *)
  val get_length: 'tags this -> float [@@js.get "length"]
  val forEach: 'tags this -> callbackfn:(value:CSSUnparsedSegment.t -> key:float -> parent:t -> unit) -> ?thisArg:any -> unit -> unit [@@js.call "forEach"]
  val get: 'tags this -> float -> CSSUnparsedSegment.t [@@js.index_get]
  val set: 'tags this -> float -> CSSUnparsedSegment.t -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: CSSUnparsedSegment.t list -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSVariableReferenceValue) *)
and[@js.scope "CSSVariableReferenceValue"] CSSVariableReferenceValue : sig
  type t = [`CSSVariableReferenceValue] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSVariableReferenceValue]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSVariableReferenceValue]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSVariableReferenceValue ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSVariableReferenceValue/fallback) *)
  val get_fallback: 'tags this -> CSSUnparsedValue.t option [@@js.get "fallback"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSVariableReferenceValue/variable) *)
  val get_variable: 'tags this -> string [@@js.get "variable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSVariableReferenceValue/variable) *)
  val set_variable: 'tags this -> string -> unit [@@js.set "variable"]
  val create: ?fallback:CSSUnparsedValue.t -> variable:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': variable:string -> ?fallback:CSSUnparsedValue.t option -> unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSTransformComponent) *)
module[@js.scope "CSSTransformComponent"] CSSTransformComponent : sig
  type t = [`CSSTransformComponent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSTransformComponent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSTransformComponent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSTransformComponent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSTransformComponent/is2D) *)
  val get_is2D: 'tags this -> bool [@@js.get "is2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSTransformComponent/is2D) *)
  val set_is2D: 'tags this -> bool -> unit [@@js.set "is2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSTransformComponent/toMatrix) *)
  val toMatrix: 'tags this -> DOMMatrix.t [@@js.call "toMatrix"]
  val toString: 'tags this -> string [@@js.call "toString"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSTranslate) *)
module[@js.scope "CSSTranslate"] CSSTranslate : sig
  type t = [`CSSTransformComponent | `CSSTranslate] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSTransformComponent | `CSSTranslate]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSTransformComponent | `CSSTranslate]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSTranslate ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSTranslate/x) *)
  val get_x: 'tags this -> CSSNumericValue.t [@@js.get "x"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSTranslate/x) *)
  val set_x: 'tags this -> CSSNumericValue.t -> unit [@@js.set "x"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSTranslate/y) *)
  val get_y: 'tags this -> CSSNumericValue.t [@@js.get "y"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSTranslate/y) *)
  val set_y: 'tags this -> CSSNumericValue.t -> unit [@@js.set "y"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSTranslate/z) *)
  val get_z: 'tags this -> CSSNumericValue.t [@@js.get "z"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSTranslate/z) *)
  val set_z: 'tags this -> CSSNumericValue.t -> unit [@@js.set "z"]
  val create: x:CSSNumericValue.t -> y:CSSNumericValue.t -> z:CSSNumericValue.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': x:CSSNumericValue.t -> y:CSSNumericValue.t -> ?z:CSSNumericValue.t -> unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSTransition) *)
module[@js.scope "CSSTransition"] CSSTransition : sig
  type t = [`Animation | `CSSTransition | `EventTarget] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Animation | `CSSTransition | `EventTarget]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Animation | `CSSTransition | `EventTarget]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSTransition ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSTransition/transitionProperty) *)
  val get_transitionProperty: 'tags this -> string [@@js.get "transitionProperty"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'AnimationEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'AnimationEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSTransformValue) *)
module[@js.scope "CSSTransformValue"] CSSTransformValue : sig
  type t = [`CSSStyleValue | `CSSTransformValue] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSStyleValue | `CSSTransformValue]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSStyleValue | `CSSTransformValue]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSTransformValue ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> CSSTransformComponent.t IterableIterator.t *)
  val entries: 'tags this -> (float * CSSTransformComponent.t) IterableIterator.t [@@js.call "entries"]
  val keys: 'tags this -> float IterableIterator.t [@@js.call "keys"]
  val values: 'tags this -> CSSTransformComponent.t IterableIterator.t [@@js.call "values"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSTransformValue/is2D) *)
  val get_is2D: 'tags this -> bool [@@js.get "is2D"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSTransformValue/length) *)
  val get_length: 'tags this -> float [@@js.get "length"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSTransformValue/toMatrix) *)
  val toMatrix: 'tags this -> DOMMatrix.t [@@js.call "toMatrix"]
  val forEach: 'tags this -> callbackfn:(value:CSSTransformComponent.t -> key:float -> parent:t -> unit) -> ?thisArg:any -> unit -> unit [@@js.call "forEach"]
  val get: 'tags this -> float -> CSSTransformComponent.t [@@js.index_get]
  val set: 'tags this -> float -> CSSTransformComponent.t -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: CSSTransformComponent.t list -> t [@@js.create]
end

(**
  Any CSS at-rule that contains other rules nested within it.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSGroupingRule)
*)
module[@js.scope "CSSGroupingRule"] CSSGroupingRule : sig
  type t = [`CSSGroupingRule | `CSSRule] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSGroupingRule | `CSSRule]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSGroupingRule | `CSSRule]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSGroupingRule ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSGroupingRule/cssRules) *)
  val get_cssRules: 'tags this -> CSSRuleList.t [@@js.get "cssRules"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSGroupingRule/deleteRule) *)
  val deleteRule: 'tags this -> index:float -> unit [@@js.call "deleteRule"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSGroupingRule/insertRule) *)
  val insertRule: 'tags this -> rule:string -> ?index:float -> unit -> float [@@js.call "insertRule"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  A single condition CSS at-rule, which consists of a condition and a statement block. It is a child of CSSGroupingRule.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSConditionRule)
*)
module[@js.scope "CSSConditionRule"] CSSConditionRule : sig
  type t = [`CSSConditionRule | `CSSGroupingRule | `CSSRule] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSConditionRule | `CSSGroupingRule | `CSSRule]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSConditionRule | `CSSGroupingRule | `CSSRule]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSConditionRule ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSConditionRule/conditionText) *)
  val get_conditionText: 'tags this -> string [@@js.get "conditionText"]
  val create: conditionText:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(** An object representing a single CSS *)
module[@js.scope "CSSSupportsRule"] CSSSupportsRule : sig
  type t = [`CSSConditionRule | `CSSGroupingRule | `CSSRule | `CSSSupportsRule] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSConditionRule | `CSSGroupingRule | `CSSRule | `CSSSupportsRule]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSConditionRule | `CSSGroupingRule | `CSSRule | `CSSSupportsRule]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSSupportsRule ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  CSSStyleRule represents a single CSS style rule. It implements the CSSRule interface with a type value of 1 (CSSRule.STYLE_RULE).
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSStyleRule)
*)
module[@js.scope "CSSStyleRule"] CSSStyleRule : sig
  type t = [`CSSGroupingRule | `CSSRule | `CSSStyleRule] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSGroupingRule | `CSSRule | `CSSStyleRule]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSGroupingRule | `CSSRule | `CSSStyleRule]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSStyleRule ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSStyleRule/selectorText) *)
  val get_selectorText: 'tags this -> string [@@js.get "selectorText"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSStyleRule/selectorText) *)
  val set_selectorText: 'tags this -> string -> unit [@@js.set "selectorText"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSStyleRule/style) *)
  val get_style: 'tags this -> CSSStyleDeclaration.t [@@js.get "style"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSStyleRule/styleMap) *)
  val get_styleMap: 'tags this -> StylePropertyMap.t [@@js.get "styleMap"]
  val create: selectorText:string -> style:CSSStyleDeclaration.t -> styleMap:StylePropertyMap.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSSkewY) *)
module[@js.scope "CSSSkewY"] CSSSkewY : sig
  type t = [`CSSSkewY | `CSSTransformComponent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSSkewY | `CSSTransformComponent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSSkewY | `CSSTransformComponent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSSkewY ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSSkewY/ay) *)
  val get_ay: 'tags this -> CSSNumericValue.t [@@js.get "ay"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSSkewY/ay) *)
  val set_ay: 'tags this -> CSSNumericValue.t -> unit [@@js.set "ay"]
  val create: ay:CSSNumericValue.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': CSSNumericValue.t -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSSkewX) *)
module[@js.scope "CSSSkewX"] CSSSkewX : sig
  type t = [`CSSSkewX | `CSSTransformComponent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSSkewX | `CSSTransformComponent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSSkewX | `CSSTransformComponent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSSkewX ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSSkewX/ax) *)
  val get_ax: 'tags this -> CSSNumericValue.t [@@js.get "ax"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSSkewX/ax) *)
  val set_ax: 'tags this -> CSSNumericValue.t -> unit [@@js.set "ax"]
  val create: ax:CSSNumericValue.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': CSSNumericValue.t -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSSkew) *)
module[@js.scope "CSSSkew"] CSSSkew : sig
  type t = [`CSSSkew | `CSSTransformComponent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSSkew | `CSSTransformComponent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSSkew | `CSSTransformComponent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSSkew ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSSkew/ax) *)
  val get_ax: 'tags this -> CSSNumericValue.t [@@js.get "ax"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSSkew/ax) *)
  val set_ax: 'tags this -> CSSNumericValue.t -> unit [@@js.set "ax"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSSkew/ay) *)
  val get_ay: 'tags this -> CSSNumericValue.t [@@js.get "ay"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSSkew/ay) *)
  val set_ay: 'tags this -> CSSNumericValue.t -> unit [@@js.set "ay"]
  val create: ax:CSSNumericValue.t -> ay:CSSNumericValue.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': ax:CSSNumericValue.t -> ay:CSSNumericValue.t -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSScale) *)
module[@js.scope "CSSScale"] CSSScale : sig
  type t = [`CSSScale | `CSSTransformComponent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSScale | `CSSTransformComponent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSScale | `CSSTransformComponent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSScale ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSScale/x) *)
  val get_x: 'tags this -> CSSNumberish.t [@@js.get "x"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSScale/x) *)
  val set_x: 'tags this -> CSSNumberish.t -> unit [@@js.set "x"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSScale/y) *)
  val get_y: 'tags this -> CSSNumberish.t [@@js.get "y"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSScale/y) *)
  val set_y: 'tags this -> CSSNumberish.t -> unit [@@js.set "y"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSScale/z) *)
  val get_z: 'tags this -> CSSNumberish.t [@@js.get "z"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSScale/z) *)
  val set_z: 'tags this -> CSSNumberish.t -> unit [@@js.set "z"]
  val create: x:CSSNumberish.t -> y:CSSNumberish.t -> z:CSSNumberish.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': x:CSSNumberish.t -> y:CSSNumberish.t -> ?z:CSSNumberish.t -> unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSRotate) *)
module[@js.scope "CSSRotate"] CSSRotate : sig
  type t = [`CSSRotate | `CSSTransformComponent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSRotate | `CSSTransformComponent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSRotate | `CSSTransformComponent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSRotate ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSRotate/angle) *)
  val get_angle: 'tags this -> CSSNumericValue.t [@@js.get "angle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSRotate/angle) *)
  val set_angle: 'tags this -> CSSNumericValue.t -> unit [@@js.set "angle"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSRotate/x) *)
  val get_x: 'tags this -> CSSNumberish.t [@@js.get "x"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSRotate/x) *)
  val set_x: 'tags this -> CSSNumberish.t -> unit [@@js.set "x"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSRotate/y) *)
  val get_y: 'tags this -> CSSNumberish.t [@@js.get "y"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSRotate/y) *)
  val set_y: 'tags this -> CSSNumberish.t -> unit [@@js.set "y"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSRotate/z) *)
  val get_z: 'tags this -> CSSNumberish.t [@@js.get "z"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSRotate/z) *)
  val set_z: 'tags this -> CSSNumberish.t -> unit [@@js.set "z"]
  val create: angle:CSSNumericValue.t -> x:CSSNumberish.t -> y:CSSNumberish.t -> z:CSSNumberish.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': CSSNumericValue.t -> t [@@js.create]
  val create'': x:CSSNumberish.t -> y:CSSNumberish.t -> z:CSSNumberish.t -> angle:CSSNumericValue.t -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSPropertyRule) *)
module[@js.scope "CSSPropertyRule"] CSSPropertyRule : sig
  type t = [`CSSPropertyRule | `CSSRule] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSPropertyRule | `CSSRule]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSPropertyRule | `CSSRule]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSPropertyRule ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSPropertyRule/inherits) *)
  val get_inherits: 'tags this -> bool [@@js.get "inherits"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSPropertyRule/initialValue) *)
  val get_initialValue: 'tags this -> string option [@@js.get "initialValue"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSPropertyRule/name) *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSPropertyRule/syntax) *)
  val get_syntax: 'tags this -> string [@@js.get "syntax"]
  val create: inherits:bool -> ?initialValue:string -> name:string -> syntax:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSKeywordValue) *)
module[@js.scope "CSSKeywordValue"] CSSKeywordValue : sig
  type t = [`CSSKeywordValue | `CSSStyleValue] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSKeywordValue | `CSSStyleValue]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSKeywordValue | `CSSStyleValue]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSKeywordValue ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSKeywordValue/value) *)
  val get_value: 'tags this -> string [@@js.get "value"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSKeywordValue/value) *)
  val set_value: 'tags this -> string -> unit [@@js.set "value"]
  val create: value:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': string -> t [@@js.create]
end
module CSSKeywordish : sig
  type t = ([`String of string | `Other of CSSKeywordValue.t] [@js.union on_field "dummy"]) Primitive.t
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module CSSPerspectiveValue : sig
  type t = (CSSKeywordish.t, CSSNumericValue.t) union2
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSPerspective) *)
module[@js.scope "CSSPerspective"] CSSPerspective : sig
  type t = [`CSSPerspective | `CSSTransformComponent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSPerspective | `CSSTransformComponent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSPerspective | `CSSTransformComponent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSPerspective ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSPerspective/length) *)
  val get_length: 'tags this -> CSSPerspectiveValue.t [@@js.get "length"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSPerspective/length) *)
  val set_length: 'tags this -> CSSPerspectiveValue.t -> unit [@@js.set "length"]
  val create: length:CSSPerspectiveValue.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': CSSPerspectiveValue.t -> t [@@js.create]
end

(** CSSPageRule is an interface representing a single CSS *)
module[@js.scope "CSSPageRule"] CSSPageRule : sig
  type t = [`CSSGroupingRule | `CSSPageRule | `CSSRule] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSGroupingRule | `CSSPageRule | `CSSRule]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSGroupingRule | `CSSPageRule | `CSSRule]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSPageRule ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSPageRule/selectorText) *)
  val get_selectorText: 'tags this -> string [@@js.get "selectorText"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSPageRule/selectorText) *)
  val set_selectorText: 'tags this -> string -> unit [@@js.set "selectorText"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSPageRule/style) *)
  val get_style: 'tags this -> CSSStyleDeclaration.t [@@js.get "style"]
  val create: selectorText:string -> style:CSSStyleDeclaration.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(** An object representing a single CSS *)
module[@js.scope "CSSNamespaceRule"] CSSNamespaceRule : sig
  type t = [`CSSNamespaceRule | `CSSRule] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSNamespaceRule | `CSSRule]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSNamespaceRule | `CSSRule]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSNamespaceRule ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSNamespaceRule/namespaceURI) *)
  val get_namespaceURI: 'tags this -> string [@@js.get "namespaceURI"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSNamespaceRule/prefix) *)
  val get_prefix: 'tags this -> string [@@js.get "prefix"]
  val create: namespaceURI:string -> prefix:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(** A single CSS *)
module[@js.scope "CSSMediaRule"] CSSMediaRule : sig
  type t = [`CSSConditionRule | `CSSGroupingRule | `CSSMediaRule | `CSSRule] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSConditionRule | `CSSGroupingRule | `CSSMediaRule | `CSSRule]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSConditionRule | `CSSGroupingRule | `CSSMediaRule | `CSSRule]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSMediaRule ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSMediaRule/media) *)
  val get_media: 'tags this -> MediaList.t [@@js.get "media"]
  val create: media:MediaList.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end
module CSSMatrixComponentOptions : sig
  type t = [`CSSMatrixComponentOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSMatrixComponentOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSMatrixComponentOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSMatrixComponentOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_is2D: 'tags this -> bool option [@@js.get "is2D"]
  val set_is2D: 'tags this -> bool -> unit [@@js.set "is2D"]
  val create: ?is2D:bool -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSMatrixComponent) *)
module[@js.scope "CSSMatrixComponent"] CSSMatrixComponent : sig
  type t = [`CSSMatrixComponent | `CSSTransformComponent] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSMatrixComponent | `CSSTransformComponent]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSMatrixComponent | `CSSTransformComponent]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSMatrixComponent ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSMatrixComponent/matrix) *)
  val get_matrix: 'tags this -> DOMMatrix.t [@@js.get "matrix"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSMatrixComponent/matrix) *)
  val set_matrix: 'tags this -> DOMMatrix.t -> unit [@@js.set "matrix"]
  val create: matrix:DOMMatrix.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': matrix:DOMMatrixReadOnly.t -> ?options:CSSMatrixComponentOptions.t -> unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSMathProduct) *)
module[@js.scope "CSSMathProduct"] CSSMathProduct : sig
  type t = [`CSSMathProduct | `CSSMathValue | `CSSNumericValue | `CSSStyleValue] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSMathProduct | `CSSMathValue | `CSSNumericValue | `CSSStyleValue]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSMathProduct | `CSSMathValue | `CSSNumericValue | `CSSStyleValue]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSMathProduct ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSMathProduct/values) *)
  val get_values: 'tags this -> CSSNumericArray.t [@@js.get "values"]
  val create: values:CSSNumericArray.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': (CSSNumberish.t list [@js.variadic]) -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSMathNegate) *)
module[@js.scope "CSSMathNegate"] CSSMathNegate : sig
  type t = [`CSSMathNegate | `CSSMathValue | `CSSNumericValue | `CSSStyleValue] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSMathNegate | `CSSMathValue | `CSSNumericValue | `CSSStyleValue]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSMathNegate | `CSSMathValue | `CSSNumericValue | `CSSStyleValue]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSMathNegate ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSMathNegate/value) *)
  val get_value: 'tags this -> CSSNumericValue.t [@@js.get "value"]
  val create: value:CSSNumericValue.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': CSSNumberish.t -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSMathMin) *)
module[@js.scope "CSSMathMin"] CSSMathMin : sig
  type t = [`CSSMathMin | `CSSMathValue | `CSSNumericValue | `CSSStyleValue] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSMathMin | `CSSMathValue | `CSSNumericValue | `CSSStyleValue]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSMathMin | `CSSMathValue | `CSSNumericValue | `CSSStyleValue]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSMathMin ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSMathMin/values) *)
  val get_values: 'tags this -> CSSNumericArray.t [@@js.get "values"]
  val create: values:CSSNumericArray.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': (CSSNumberish.t list [@js.variadic]) -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSMathMax) *)
module[@js.scope "CSSMathMax"] CSSMathMax : sig
  type t = [`CSSMathMax | `CSSMathValue | `CSSNumericValue | `CSSStyleValue] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSMathMax | `CSSMathValue | `CSSNumericValue | `CSSStyleValue]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSMathMax | `CSSMathValue | `CSSNumericValue | `CSSStyleValue]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSMathMax ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSMathMax/values) *)
  val get_values: 'tags this -> CSSNumericArray.t [@@js.get "values"]
  val create: values:CSSNumericArray.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': (CSSNumberish.t list [@js.variadic]) -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSMathInvert) *)
module[@js.scope "CSSMathInvert"] CSSMathInvert : sig
  type t = [`CSSMathInvert | `CSSMathValue | `CSSNumericValue | `CSSStyleValue] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSMathInvert | `CSSMathValue | `CSSNumericValue | `CSSStyleValue]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSMathInvert | `CSSMathValue | `CSSNumericValue | `CSSStyleValue]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSMathInvert ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSMathInvert/value) *)
  val get_value: 'tags this -> CSSNumericValue.t [@@js.get "value"]
  val create: value:CSSNumericValue.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': CSSNumberish.t -> t [@@js.create]
end
module[@js.scope "CSSMathClamp"] CSSMathClamp : sig
  type t = [`CSSMathClamp | `CSSMathValue | `CSSNumericValue | `CSSStyleValue] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSMathClamp | `CSSMathValue | `CSSNumericValue | `CSSStyleValue]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSMathClamp | `CSSMathValue | `CSSNumericValue | `CSSStyleValue]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSMathClamp ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_lower: 'tags this -> CSSNumericValue.t [@@js.get "lower"]
  val get_upper: 'tags this -> CSSNumericValue.t [@@js.get "upper"]
  val get_value: 'tags this -> CSSNumericValue.t [@@js.get "value"]
  val create: lower:CSSNumericValue.t -> upper:CSSNumericValue.t -> value:CSSNumericValue.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': lower:CSSNumberish.t -> value:CSSNumberish.t -> upper:CSSNumberish.t -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSLayerStatementRule) *)
module[@js.scope "CSSLayerStatementRule"] CSSLayerStatementRule : sig
  type t = [`CSSLayerStatementRule | `CSSRule] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSLayerStatementRule | `CSSRule]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSLayerStatementRule | `CSSRule]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSLayerStatementRule ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSLayerStatementRule/nameList) *)
  val get_nameList: 'tags this -> string list [@@js.get "nameList"]
  val create: nameList:string list -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSLayerBlockRule) *)
module[@js.scope "CSSLayerBlockRule"] CSSLayerBlockRule : sig
  type t = [`CSSGroupingRule | `CSSLayerBlockRule | `CSSRule] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSGroupingRule | `CSSLayerBlockRule | `CSSRule]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSGroupingRule | `CSSLayerBlockRule | `CSSRule]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSLayerBlockRule ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSLayerBlockRule/name) *)
  val get_name: 'tags this -> string [@@js.get "name"]
  val create: name:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(** An object representing a set of style for a given keyframe. It corresponds to the contains of a single keyframe of a *)
module[@js.scope "CSSKeyframeRule"] CSSKeyframeRule : sig
  type t = [`CSSKeyframeRule | `CSSRule] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSKeyframeRule | `CSSRule]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSKeyframeRule | `CSSRule]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSKeyframeRule ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSKeyframeRule/keyText) *)
  val get_keyText: 'tags this -> string [@@js.get "keyText"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSKeyframeRule/keyText) *)
  val set_keyText: 'tags this -> string -> unit [@@js.set "keyText"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSKeyframeRule/style) *)
  val get_style: 'tags this -> CSSStyleDeclaration.t [@@js.get "style"]
  val create: keyText:string -> style:CSSStyleDeclaration.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(** An object representing a complete set of keyframes for a CSS animation. It corresponds to the contains of a whole *)
module[@js.scope "CSSKeyframesRule"] CSSKeyframesRule : sig
  type t = [`CSSKeyframesRule | `CSSRule] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSKeyframesRule | `CSSRule]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSKeyframesRule | `CSSRule]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSKeyframesRule ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  (* [Symbol.iterator]: unit -> CSSKeyframeRule.t IterableIterator.t *)
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSKeyframesRule/cssRules) *)
  val get_cssRules: 'tags this -> CSSRuleList.t [@@js.get "cssRules"]
  val get_length: 'tags this -> float [@@js.get "length"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSKeyframesRule/name) *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSKeyframesRule/name) *)
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSKeyframesRule/appendRule) *)
  val appendRule: 'tags this -> rule:string -> unit [@@js.call "appendRule"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSKeyframesRule/deleteRule) *)
  val deleteRule: 'tags this -> select:string -> unit [@@js.call "deleteRule"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSKeyframesRule/findRule) *)
  val findRule: 'tags this -> select:string -> CSSKeyframeRule.t option [@@js.call "findRule"]
  val get: 'tags this -> float -> CSSKeyframeRule.t [@@js.index_get]
  val set: 'tags this -> float -> CSSKeyframeRule.t -> unit [@@js.index_set]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSImportRule) *)
module[@js.scope "CSSImportRule"] CSSImportRule : sig
  type t = [`CSSImportRule | `CSSRule] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSImportRule | `CSSRule]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSImportRule | `CSSRule]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSImportRule ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSImportRule/href) *)
  val get_href: 'tags this -> string [@@js.get "href"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSImportRule/layerName) *)
  val get_layerName: 'tags this -> string option [@@js.get "layerName"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSImportRule/media) *)
  val get_media: 'tags this -> MediaList.t [@@js.get "media"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSImportRule/styleSheet) *)
  val get_styleSheet: 'tags this -> CSSStyleSheet.t option [@@js.get "styleSheet"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSImportRule/supportsText) *)
  val get_supportsText: 'tags this -> string option [@@js.get "supportsText"]
  val create: href:string -> ?layerName:string -> media:MediaList.t -> ?styleSheet:CSSStyleSheet.t -> ?supportsText:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSImageValue) *)
module[@js.scope "CSSImageValue"] CSSImageValue : sig
  type t = [`CSSImageValue | `CSSStyleValue] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSImageValue | `CSSStyleValue]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSImageValue | `CSSStyleValue]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSImageValue ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSFontPaletteValuesRule) *)
module[@js.scope "CSSFontPaletteValuesRule"] CSSFontPaletteValuesRule : sig
  type t = [`CSSFontPaletteValuesRule | `CSSRule] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSFontPaletteValuesRule | `CSSRule]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSFontPaletteValuesRule | `CSSRule]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSFontPaletteValuesRule ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSFontPaletteValuesRule/basePalette) *)
  val get_basePalette: 'tags this -> string [@@js.get "basePalette"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSFontPaletteValuesRule/fontFamily) *)
  val get_fontFamily: 'tags this -> string [@@js.get "fontFamily"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSFontPaletteValuesRule/name) *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSFontPaletteValuesRule/overrideColors) *)
  val get_overrideColors: 'tags this -> string [@@js.get "overrideColors"]
  val create: basePalette:string -> fontFamily:string -> name:string -> overrideColors:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSFontFeatureValuesRule) *)
module[@js.scope "CSSFontFeatureValuesRule"] CSSFontFeatureValuesRule : sig
  type t = [`CSSFontFeatureValuesRule | `CSSRule] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSFontFeatureValuesRule | `CSSRule]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSFontFeatureValuesRule | `CSSRule]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSFontFeatureValuesRule ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSFontFeatureValuesRule/fontFamily) *)
  val get_fontFamily: 'tags this -> string [@@js.get "fontFamily"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSFontFeatureValuesRule/fontFamily) *)
  val set_fontFamily: 'tags this -> string -> unit [@@js.set "fontFamily"]
  val create: fontFamily:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSFontFaceRule) *)
module[@js.scope "CSSFontFaceRule"] CSSFontFaceRule : sig
  type t = [`CSSFontFaceRule | `CSSRule] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSFontFaceRule | `CSSRule]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSFontFaceRule | `CSSRule]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSFontFaceRule ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSFontFaceRule/style) *)
  val get_style: 'tags this -> CSSStyleDeclaration.t [@@js.get "style"]
  val create: style:CSSStyleDeclaration.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule) *)
module[@js.scope "CSSCounterStyleRule"] CSSCounterStyleRule : sig
  type t = [`CSSCounterStyleRule | `CSSRule] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSCounterStyleRule | `CSSRule]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSCounterStyleRule | `CSSRule]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSCounterStyleRule ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/additiveSymbols) *)
  val get_additiveSymbols: 'tags this -> string [@@js.get "additiveSymbols"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/additiveSymbols) *)
  val set_additiveSymbols: 'tags this -> string -> unit [@@js.set "additiveSymbols"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/fallback) *)
  val get_fallback: 'tags this -> string [@@js.get "fallback"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/fallback) *)
  val set_fallback: 'tags this -> string -> unit [@@js.set "fallback"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/name) *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/name) *)
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/negative) *)
  val get_negative: 'tags this -> string [@@js.get "negative"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/negative) *)
  val set_negative: 'tags this -> string -> unit [@@js.set "negative"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/pad) *)
  val get_pad: 'tags this -> string [@@js.get "pad"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/pad) *)
  val set_pad: 'tags this -> string -> unit [@@js.set "pad"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/prefix) *)
  val get_prefix: 'tags this -> string [@@js.get "prefix"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/prefix) *)
  val set_prefix: 'tags this -> string -> unit [@@js.set "prefix"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/range) *)
  val get_range: 'tags this -> string [@@js.get "range"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/range) *)
  val set_range: 'tags this -> string -> unit [@@js.set "range"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/speakAs) *)
  val get_speakAs: 'tags this -> string [@@js.get "speakAs"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/speakAs) *)
  val set_speakAs: 'tags this -> string -> unit [@@js.set "speakAs"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/suffix) *)
  val get_suffix: 'tags this -> string [@@js.get "suffix"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/suffix) *)
  val set_suffix: 'tags this -> string -> unit [@@js.set "suffix"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/symbols) *)
  val get_symbols: 'tags this -> string [@@js.get "symbols"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/symbols) *)
  val set_symbols: 'tags this -> string -> unit [@@js.set "symbols"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/system) *)
  val get_system: 'tags this -> string [@@js.get "system"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/system) *)
  val set_system: 'tags this -> string -> unit [@@js.set "system"]
  val create: additiveSymbols:string -> fallback:string -> name:string -> negative:string -> pad:string -> prefix:string -> range:string -> speakAs:string -> suffix:string -> symbols:string -> system:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSContainerRule) *)
module[@js.scope "CSSContainerRule"] CSSContainerRule : sig
  type t = [`CSSConditionRule | `CSSContainerRule | `CSSGroupingRule | `CSSRule] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`CSSConditionRule | `CSSContainerRule | `CSSGroupingRule | `CSSRule]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`CSSConditionRule | `CSSContainerRule | `CSSGroupingRule | `CSSRule]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSContainerRule ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSContainerRule/containerName) *)
  val get_containerName: 'tags this -> string [@@js.get "containerName"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSContainerRule/containerQuery) *)
  val get_containerQuery: 'tags this -> string [@@js.get "containerQuery"]
  val create: containerName:string -> containerQuery:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSAnimation) *)
module[@js.scope "CSSAnimation"] CSSAnimation : sig
  type t = [`Animation | `CSSAnimation | `EventTarget] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Animation | `CSSAnimation | `EventTarget]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Animation | `CSSAnimation | `EventTarget]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `CSSAnimation ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSSAnimation/animationName) *)
  val get_animationName: 'tags this -> string [@@js.get "animationName"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'AnimationEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'AnimationEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module PropertyDefinition : sig
  type t = [`PropertyDefinition] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`PropertyDefinition]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`PropertyDefinition]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `PropertyDefinition ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_inherits: 'tags this -> bool [@@js.get "inherits"]
  val set_inherits: 'tags this -> bool -> unit [@@js.set "inherits"]
  val get_initialValue: 'tags this -> string option [@@js.get "initialValue"]
  val set_initialValue: 'tags this -> string -> unit [@@js.set "initialValue"]
  val get_name: 'tags this -> string [@@js.get "name"]
  val set_name: 'tags this -> string -> unit [@@js.set "name"]
  val get_syntax: 'tags this -> string option [@@js.get "syntax"]
  val set_syntax: 'tags this -> string -> unit [@@js.set "syntax"]
  val create: inherits:bool -> ?initialValue:string -> name:string -> ?syntax:string -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module HighlightType : sig
  type t = ([`L_s455_grammar_error[@js "grammar-error"] | `L_s481_highlight[@js "highlight"] | `L_s911_spelling_error[@js "spelling-error"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Highlight) *)
module[@js.scope "Highlight"] Highlight : sig
  type t = [`Highlight] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`Highlight]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`Highlight]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `Highlight ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Highlight/priority) *)
  val get_priority: 'tags this -> float [@@js.get "priority"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Highlight/priority) *)
  val set_priority: 'tags this -> float -> unit [@@js.set "priority"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Highlight/type) *)
  val get_type: 'tags this -> HighlightType.t [@@js.get "type"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Highlight/type) *)
  val set_type: 'tags this -> HighlightType.t -> unit [@@js.set "type"]
  val forEach: 'tags this -> callbackfn:(value:AbstractRange.t -> key:AbstractRange.t -> parent:t -> unit) -> ?thisArg:any -> unit -> unit [@@js.call "forEach"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: (AbstractRange.t list [@js.variadic]) -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HighlightRegistry) *)
module[@js.scope "HighlightRegistry"] HighlightRegistry : sig
  type t = [`HighlightRegistry] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`HighlightRegistry]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`HighlightRegistry]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `HighlightRegistry ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val forEach: 'tags this -> callbackfn:(value:Highlight.t -> key:string -> parent:t -> unit) -> ?thisArg:any -> unit -> unit [@@js.call "forEach"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(** Holds useful CSS-related methods. No object with this interface are implemented: it contains only static methods and therefore is a utilitarian interface. *)
module[@js.scope "CSS"] CSS : sig
  module[@js.scope "highlights"] HighlightsStatic : sig
    val forEach: callbackfn:(value:Highlight.t -> key:string -> parent:HighlightRegistry.t -> unit) -> ?thisArg:any -> unit -> unit [@@js.global "forEach"]
  end
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/highlights_static) *)
  val highlights: unit -> HighlightRegistry.t [@@js.get "highlights"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val hz: float -> CSSUnitValue.t [@@js.global "Hz"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val q: float -> CSSUnitValue.t [@@js.global "Q"]
  val cap: float -> CSSUnitValue.t [@@js.global "cap"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val ch: float -> CSSUnitValue.t [@@js.global "ch"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val cm: float -> CSSUnitValue.t [@@js.global "cm"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val cqb: float -> CSSUnitValue.t [@@js.global "cqb"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val cqh: float -> CSSUnitValue.t [@@js.global "cqh"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val cqi: float -> CSSUnitValue.t [@@js.global "cqi"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val cqmax: float -> CSSUnitValue.t [@@js.global "cqmax"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val cqmin: float -> CSSUnitValue.t [@@js.global "cqmin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val cqw: float -> CSSUnitValue.t [@@js.global "cqw"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val deg: float -> CSSUnitValue.t [@@js.global "deg"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val dpcm: float -> CSSUnitValue.t [@@js.global "dpcm"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val dpi: float -> CSSUnitValue.t [@@js.global "dpi"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val dppx: float -> CSSUnitValue.t [@@js.global "dppx"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val dvb: float -> CSSUnitValue.t [@@js.global "dvb"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val dvh: float -> CSSUnitValue.t [@@js.global "dvh"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val dvi: float -> CSSUnitValue.t [@@js.global "dvi"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val dvmax: float -> CSSUnitValue.t [@@js.global "dvmax"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val dvmin: float -> CSSUnitValue.t [@@js.global "dvmin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val dvw: float -> CSSUnitValue.t [@@js.global "dvw"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val em: float -> CSSUnitValue.t [@@js.global "em"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/escape_static) *)
  val escape: string -> string [@@js.global "escape"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val ex: float -> CSSUnitValue.t [@@js.global "ex"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val fr: float -> CSSUnitValue.t [@@js.global "fr"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val grad: float -> CSSUnitValue.t [@@js.global "grad"]
  val ic: float -> CSSUnitValue.t [@@js.global "ic"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val kHz: float -> CSSUnitValue.t [@@js.global "kHz"]
  val lh: float -> CSSUnitValue.t [@@js.global "lh"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val lvb: float -> CSSUnitValue.t [@@js.global "lvb"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val lvh: float -> CSSUnitValue.t [@@js.global "lvh"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val lvi: float -> CSSUnitValue.t [@@js.global "lvi"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val lvmax: float -> CSSUnitValue.t [@@js.global "lvmax"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val lvmin: float -> CSSUnitValue.t [@@js.global "lvmin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val lvw: float -> CSSUnitValue.t [@@js.global "lvw"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val mm: float -> CSSUnitValue.t [@@js.global "mm"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val ms: float -> CSSUnitValue.t [@@js.global "ms"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val number: float -> CSSUnitValue.t [@@js.global "number"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val pc: float -> CSSUnitValue.t [@@js.global "pc"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val percent: float -> CSSUnitValue.t [@@js.global "percent"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val pt: float -> CSSUnitValue.t [@@js.global "pt"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val px: float -> CSSUnitValue.t [@@js.global "px"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val rad: float -> CSSUnitValue.t [@@js.global "rad"]
  val rcap: float -> CSSUnitValue.t [@@js.global "rcap"]
  val rch: float -> CSSUnitValue.t [@@js.global "rch"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/registerProperty_static) *)
  val registerProperty: PropertyDefinition.t -> unit [@@js.global "registerProperty"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val rem: float -> CSSUnitValue.t [@@js.global "rem"]
  val rex: float -> CSSUnitValue.t [@@js.global "rex"]
  val ric: float -> CSSUnitValue.t [@@js.global "ric"]
  val rlh: float -> CSSUnitValue.t [@@js.global "rlh"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val s: float -> CSSUnitValue.t [@@js.global "s"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/supports_static) *)
  val supports: property:string -> value:string -> bool [@@js.global "supports"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/supports_static) *)
  val supports': string -> bool [@@js.global "supports"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val svb: float -> CSSUnitValue.t [@@js.global "svb"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val svh: float -> CSSUnitValue.t [@@js.global "svh"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val svi: float -> CSSUnitValue.t [@@js.global "svi"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val svmax: float -> CSSUnitValue.t [@@js.global "svmax"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val svmin: float -> CSSUnitValue.t [@@js.global "svmin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val svw: float -> CSSUnitValue.t [@@js.global "svw"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val turn: float -> CSSUnitValue.t [@@js.global "turn"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val vb: float -> CSSUnitValue.t [@@js.global "vb"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val vh: float -> CSSUnitValue.t [@@js.global "vh"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val vi: float -> CSSUnitValue.t [@@js.global "vi"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val vmax: float -> CSSUnitValue.t [@@js.global "vmax"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val vmin: float -> CSSUnitValue.t [@@js.global "vmin"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static) *)
  val vw: float -> CSSUnitValue.t [@@js.global "vw"]
end

(**
  This Streams API interface providesÂ a built-in byte length queuing strategy that can be used when constructing streams.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ByteLengthQueuingStrategy)
*)
module[@js.scope "ByteLengthQueuingStrategy"] ByteLengthQueuingStrategy : sig
  type t = [`ByteLengthQueuingStrategy | `QueuingStrategy of ArrayBufferView.t] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`ByteLengthQueuingStrategy | `QueuingStrategy of ArrayBufferView.t]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`ByteLengthQueuingStrategy | `QueuingStrategy of ArrayBufferView.t]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `ByteLengthQueuingStrategy ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ByteLengthQueuingStrategy/highWaterMark) *)
  val get_highWaterMark: 'tags this -> float [@@js.get "highWaterMark"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ByteLengthQueuingStrategy/size) *)
  val get_size: 'tags this -> ArrayBufferView.t QueuingStrategySize.t [@@js.get "size"]
  val create: highWaterMark:float -> size:ArrayBufferView.t QueuingStrategySize.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': QueuingStrategyInit.t -> t [@@js.create]
end
module BroadcastChannelEventMap : sig
  type t = [`BroadcastChannelEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`BroadcastChannelEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`BroadcastChannelEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `BroadcastChannelEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_message: 'tags this -> MessageEvent.t_0 [@@js.get "message"]
  val set_message: 'tags this -> MessageEvent.t_0 -> unit [@@js.set "message"]
  val get_messageerror: 'tags this -> MessageEvent.t_0 [@@js.get "messageerror"]
  val set_messageerror: 'tags this -> MessageEvent.t_0 -> unit [@@js.set "messageerror"]
  val create: message:MessageEvent.t_0 -> messageerror:MessageEvent.t_0 -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BroadcastChannel) *)
module[@js.scope "BroadcastChannel"] BroadcastChannel : sig
  type t = [`BroadcastChannel | `EventTarget] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`BroadcastChannel | `EventTarget]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`BroadcastChannel | `EventTarget]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `BroadcastChannel ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the channel name (as passed to the constructor).
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/name)
  *)
  val get_name: 'tags this -> string [@@js.get "name"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/message_event) *)
  val get_onmessage: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option [@@js.get "onmessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/message_event) *)
  val set_onmessage: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit [@@js.set "onmessage"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/messageerror_event) *)
  val get_onmessageerror: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option [@@js.get "onmessageerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/messageerror_event) *)
  val set_onmessageerror: 'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit [@@js.set "onmessageerror"]
  
  (**
    Closes the BroadcastChannel object, opening it up to garbage collection.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/close)
  *)
  val close: 'tags this -> unit [@@js.call "close"]
  
  (**
    Sends the given message to other BroadcastChannel objects set up for this channel. Messages can be structured objects, e.g. nested objects and arrays.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/postMessage)
  *)
  val postMessage: 'tags this -> message:any -> unit [@@js.call "postMessage"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'BroadcastChannelEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'BroadcastChannelEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: string -> t [@@js.create]
end
module AutoFillSection : sig
  type t = (* FIXME: unknown type '`section-${string}`' *)any
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module AutoFillNormalField : sig
  type t = ([`L_s1028_username[@js "username"] | `L_s122_additional_name[@js "additional-name"] | `L_s124_address_level1[@js "address-level1"] | `L_s125_address_level2[@js "address-level2"] | `L_s126_address_level3[@js "address-level3"] | `L_s127_address_level4[@js "address-level4"] | `L_s128_address_line1[@js "address-line1"] | `L_s129_address_line2[@js "address-line2"] | `L_s130_address_line3[@js "address-line3"] | `L_s186_bday_day[@js "bday-day"] | `L_s187_bday_month[@js "bday-month"] | `L_s188_bday_year[@js "bday-year"] | `L_s231_cc_csc[@js "cc-csc"] | `L_s232_cc_exp[@js "cc-exp"] | `L_s233_cc_exp_month[@js "cc-exp-month"] | `L_s234_cc_exp_year[@js "cc-exp-year"] | `L_s235_cc_family_name[@js "cc-family-name"] | `L_s236_cc_given_name[@js "cc-given-name"] | `L_s237_cc_name[@js "cc-name"] | `L_s238_cc_number[@js "cc-number"] | `L_s239_cc_type[@js "cc-type"] | `L_s287_country[@js "country"] | `L_s288_country_name[@js "country-name"] | `L_s291_current_password[@js "current-password"] | `L_s389_family_name[@js "family-name"] | `L_s452_given_name[@js "given-name"] | `L_s486_honorific_prefix[@js "honorific-prefix"] | `L_s487_honorific_suffix[@js "honorific-suffix"] | `L_s660_name[@js "name"] | `L_s670_new_password[@js "new-password"] | `L_s699_one_time_code[@js "one-time-code"] | `L_s710_organization[@js "organization"] | `L_s765_postal_code[@js "postal-code"] | `L_s926_street_address[@js "street-address"] | `L_s989_transaction_amount[@js "transaction-amount"] | `L_s990_transaction_currency[@js "transaction-currency"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module AutoFillField : sig
  type t = (([`L_s1028_username[@js "username"] | `L_s122_additional_name[@js "additional-name"] | `L_s124_address_level1[@js "address-level1"] | `L_s125_address_level2[@js "address-level2"] | `L_s126_address_level3[@js "address-level3"] | `L_s127_address_level4[@js "address-level4"] | `L_s128_address_line1[@js "address-line1"] | `L_s129_address_line2[@js "address-line2"] | `L_s130_address_line3[@js "address-line3"] | `L_s186_bday_day[@js "bday-day"] | `L_s187_bday_month[@js "bday-month"] | `L_s188_bday_year[@js "bday-year"] | `L_s231_cc_csc[@js "cc-csc"] | `L_s232_cc_exp[@js "cc-exp"] | `L_s233_cc_exp_month[@js "cc-exp-month"] | `L_s234_cc_exp_year[@js "cc-exp-year"] | `L_s235_cc_family_name[@js "cc-family-name"] | `L_s236_cc_given_name[@js "cc-given-name"] | `L_s237_cc_name[@js "cc-name"] | `L_s238_cc_number[@js "cc-number"] | `L_s239_cc_type[@js "cc-type"] | `L_s287_country[@js "country"] | `L_s288_country_name[@js "country-name"] | `L_s291_current_password[@js "current-password"] | `L_s389_family_name[@js "family-name"] | `L_s452_given_name[@js "given-name"] | `L_s486_honorific_prefix[@js "honorific-prefix"] | `L_s487_honorific_suffix[@js "honorific-suffix"] | `L_s660_name[@js "name"] | `L_s670_new_password[@js "new-password"] | `L_s699_one_time_code[@js "one-time-code"] | `L_s710_organization[@js "organization"] | `L_s765_postal_code[@js "postal-code"] | `L_s926_street_address[@js "street-address"] | `L_s989_transaction_amount[@js "transaction-amount"] | `L_s990_transaction_currency[@js "transaction-currency"]] [@js.enum]), (* FIXME: unknown type '`${OptionalPrefixToken<AutoFillContactKind>}${AutoFillContactField}`' *)any) union2
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module AutoFillCredentialField : sig
  type t = ([`L_s1047_webauthn[@js "webauthn"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module AutoFillContactKind : sig
  type t = ([`L_s1058_work[@js "work"] | `L_s485_home[@js "home"] | `L_s626_mobile[@js "mobile"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module AutoFillContactField : sig
  type t = ([`L_s358_email[@js "email"] | `L_s955_tel[@js "tel"] | `L_s956_tel_area_code[@js "tel-area-code"] | `L_s957_tel_country_code[@js "tel-country-code"] | `L_s958_tel_extension[@js "tel-extension"] | `L_s959_tel_local[@js "tel-local"] | `L_s960_tel_local_prefix[@js "tel-local-prefix"] | `L_s961_tel_local_suffix[@js "tel-local-suffix"] | `L_s962_tel_national[@js "tel-national"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module AutoFillAddressKind : sig
  type t = ([`L_s200_billing[@js "billing"] | `L_s881_shipping[@js "shipping"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AuthenticatorAttestationResponse)
*)
module[@js.scope "AuthenticatorAttestationResponse"] AuthenticatorAttestationResponse : sig
  type t = [`AuthenticatorAttestationResponse | `AuthenticatorResponse] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AuthenticatorAttestationResponse | `AuthenticatorResponse]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AuthenticatorAttestationResponse | `AuthenticatorResponse]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AuthenticatorAttestationResponse ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AuthenticatorAttestationResponse/attestationObject) *)
  val get_attestationObject: 'tags this -> ArrayBuffer.t [@@js.get "attestationObject"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AuthenticatorAttestationResponse/getAuthenticatorData) *)
  val getAuthenticatorData: 'tags this -> ArrayBuffer.t [@@js.call "getAuthenticatorData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AuthenticatorAttestationResponse/getPublicKey) *)
  val getPublicKey: 'tags this -> ArrayBuffer.t option [@@js.call "getPublicKey"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AuthenticatorAttestationResponse/getPublicKeyAlgorithm) *)
  val getPublicKeyAlgorithm: 'tags this -> COSEAlgorithmIdentifier.t [@@js.call "getPublicKeyAlgorithm"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AuthenticatorAttestationResponse/getTransports) *)
  val getTransports: 'tags this -> string list [@@js.call "getTransports"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AuthenticatorAssertionResponse)
*)
module[@js.scope "AuthenticatorAssertionResponse"] AuthenticatorAssertionResponse : sig
  type t = [`AuthenticatorAssertionResponse | `AuthenticatorResponse] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AuthenticatorAssertionResponse | `AuthenticatorResponse]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AuthenticatorAssertionResponse | `AuthenticatorResponse]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AuthenticatorAssertionResponse ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AuthenticatorAssertionResponse/authenticatorData) *)
  val get_authenticatorData: 'tags this -> ArrayBuffer.t [@@js.get "authenticatorData"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AuthenticatorAssertionResponse/signature) *)
  val get_signature: 'tags this -> ArrayBuffer.t [@@js.get "signature"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AuthenticatorAssertionResponse/userHandle) *)
  val get_userHandle: 'tags this -> ArrayBuffer.t option [@@js.get "userHandle"]
  val create: authenticatorData:ArrayBuffer.t -> signature:ArrayBuffer.t -> ?userHandle:ArrayBuffer.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': unit -> t [@@js.create]
end
module AudioWorkletNodeEventMap : sig
  type t = [`AudioWorkletNodeEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioWorkletNodeEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioWorkletNodeEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AudioWorkletNodeEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_processorerror: 'tags this -> Event.t [@@js.get "processorerror"]
  val set_processorerror: 'tags this -> Event.t -> unit [@@js.set "processorerror"]
  val create: processorerror:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module AudioWorkletNodeOptions : sig
  type t = [`AudioNodeOptions | `AudioWorkletNodeOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioNodeOptions | `AudioWorkletNodeOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioNodeOptions | `AudioWorkletNodeOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AudioWorkletNodeOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_numberOfInputs: 'tags this -> float option [@@js.get "numberOfInputs"]
  val set_numberOfInputs: 'tags this -> float -> unit [@@js.set "numberOfInputs"]
  val get_numberOfOutputs: 'tags this -> float option [@@js.get "numberOfOutputs"]
  val set_numberOfOutputs: 'tags this -> float -> unit [@@js.set "numberOfOutputs"]
  val get_outputChannelCount: 'tags this -> float list option [@@js.get "outputChannelCount"]
  val set_outputChannelCount: 'tags this -> float list -> unit [@@js.set "outputChannelCount"]
  val get_parameterData: 'tags this -> (string, float) Record.t option [@@js.get "parameterData"]
  val set_parameterData: 'tags this -> (string, float) Record.t -> unit [@@js.set "parameterData"]
  val get_processorOptions: 'tags this -> any option [@@js.get "processorOptions"]
  val set_processorOptions: 'tags this -> any -> unit [@@js.set "processorOptions"]
  val create: ?numberOfInputs:float -> ?numberOfOutputs:float -> ?outputChannelCount:float list -> ?parameterData:(string, float) Record.t -> ?processorOptions:any -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioParamMap) *)
module[@js.scope "AudioParamMap"] AudioParamMap : sig
  type t = [`AudioParamMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioParamMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioParamMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AudioParamMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val forEach: 'tags this -> callbackfn:(value:AudioParam.t -> key:string -> parent:t -> unit) -> ?thisArg:any -> unit -> unit [@@js.call "forEach"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioWorkletNode)
*)
module[@js.scope "AudioWorkletNode"] AudioWorkletNode : sig
  type t = [`AudioNode | `AudioWorkletNode | `EventTarget] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioNode | `AudioWorkletNode | `EventTarget]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioNode | `AudioWorkletNode | `EventTarget]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AudioWorkletNode ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioWorkletNode/processorerror_event) *)
  val get_onprocessorerror: 'tags this -> (this:t -> ev:Event.t -> any) option [@@js.get "onprocessorerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioWorkletNode/processorerror_event) *)
  val set_onprocessorerror: 'tags this -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onprocessorerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioWorkletNode/parameters) *)
  val get_parameters: 'tags this -> AudioParamMap.t [@@js.get "parameters"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioWorkletNode/port) *)
  val get_port: 'tags this -> MessagePort.t [@@js.get "port"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'AudioWorkletNodeEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'AudioWorkletNodeEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: context:BaseAudioContext.t -> name:string -> ?options:AudioWorkletNodeOptions.t -> unit -> t [@@js.create]
end
module AudioScheduledSourceNodeEventMap : sig
  type t = [`AudioScheduledSourceNodeEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioScheduledSourceNodeEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioScheduledSourceNodeEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AudioScheduledSourceNodeEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_ended: 'tags this -> Event.t [@@js.get "ended"]
  val set_ended: 'tags this -> Event.t -> unit [@@js.set "ended"]
  val create: ended:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MediaStreamAudioSourceOptions : sig
  type t = [`MediaStreamAudioSourceOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaStreamAudioSourceOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaStreamAudioSourceOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaStreamAudioSourceOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_mediaStream: 'tags this -> MediaStream.t [@@js.get "mediaStream"]
  val set_mediaStream: 'tags this -> MediaStream.t -> unit [@@js.set "mediaStream"]
  val create: mediaStream:MediaStream.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module MediaElementAudioSourceOptions : sig
  type t = [`MediaElementAudioSourceOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`MediaElementAudioSourceOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`MediaElementAudioSourceOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaElementAudioSourceOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_mediaElement: 'tags this -> HTMLMediaElement.t [@@js.get "mediaElement"]
  val set_mediaElement: 'tags this -> HTMLMediaElement.t -> unit [@@js.set "mediaElement"]
  val create: mediaElement:HTMLMediaElement.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module AudioTimestamp : sig
  type t = [`AudioTimestamp] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioTimestamp]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioTimestamp]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AudioTimestamp ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_contextTime: 'tags this -> float option [@@js.get "contextTime"]
  val set_contextTime: 'tags this -> float -> unit [@@js.set "contextTime"]
  val get_performanceTime: 'tags this -> DOMHighResTimeStamp.t option [@@js.get "performanceTime"]
  val set_performanceTime: 'tags this -> DOMHighResTimeStamp.t -> unit [@@js.set "performanceTime"]
  val create: ?contextTime:float -> ?performanceTime:DOMHighResTimeStamp.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module AudioContextLatencyCategory : sig
  type t = ([`L_s181_balanced[@js "balanced"] | `L_s525_interactive[@js "interactive"] | `L_s748_playback[@js "playback"]] [@js.enum])
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
end
module AudioContextOptions : sig
  type t = [`AudioContextOptions] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioContextOptions]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioContextOptions]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AudioContextOptions ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_latencyHint: 'tags this -> ([`Number of float | `Undefined | `Other of AudioContextLatencyCategory.t] [@js.union on_field "dummy"]) Primitive.t [@@js.get "latencyHint"]
  val set_latencyHint: 'tags this -> ([`U1 of AudioContextLatencyCategory.t | `U2 of float] [@js.union]) -> unit [@@js.set "latencyHint"]
  val get_sampleRate: 'tags this -> float option [@@js.get "sampleRate"]
  val set_sampleRate: 'tags this -> float -> unit [@@js.set "sampleRate"]
  val create: ?latencyHint:([`Number of float | `Other of AudioContextLatencyCategory.t] [@js.union on_field "dummy"]) Primitive.t -> ?sampleRate:float -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  An audio-processing graph built from audio modules linked together, each represented by an AudioNode.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioContext)
*)
module[@js.scope "AudioContext"] rec AudioContext : sig
  type t = [`AudioContext | `BaseAudioContext | `EventTarget] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioContext | `BaseAudioContext | `EventTarget]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioContext | `BaseAudioContext | `EventTarget]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AudioContext ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioContext/baseLatency) *)
  val get_baseLatency: 'tags this -> float [@@js.get "baseLatency"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioContext/outputLatency) *)
  val get_outputLatency: 'tags this -> float [@@js.get "outputLatency"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioContext/close) *)
  val close: 'tags this -> unit Promise.t [@@js.call "close"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioContext/createMediaElementSource) *)
  val createMediaElementSource: 'tags this -> mediaElement:HTMLMediaElement.t -> MediaElementAudioSourceNode.t [@@js.call "createMediaElementSource"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioContext/createMediaStreamDestination) *)
  val createMediaStreamDestination: 'tags this -> MediaStreamAudioDestinationNode.t [@@js.call "createMediaStreamDestination"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioContext/createMediaStreamSource) *)
  val createMediaStreamSource: 'tags this -> mediaStream:MediaStream.t -> MediaStreamAudioSourceNode.t [@@js.call "createMediaStreamSource"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioContext/getOutputTimestamp) *)
  val getOutputTimestamp: 'tags this -> AudioTimestamp.t [@@js.call "getOutputTimestamp"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioContext/resume) *)
  val resume: 'tags this -> unit Promise.t [@@js.call "resume"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AudioContext/suspend) *)
  val suspend: 'tags this -> unit Promise.t [@@js.call "suspend"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'BaseAudioContextEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: 'tags this -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'BaseAudioContextEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener': 'tags this -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: ?contextOptions:AudioContextOptions.t -> unit -> t [@@js.create]
end

(**
  A MediaElementSourceNode has no inputs and exactly one output, and is created using the AudioContext.createMediaElementSource method. The amount of channels in the output equals the number of channels of the audio referenced by the HTMLMediaElement used in the creation of the node, or is 1 if the HTMLMediaElement has no audio.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaElementAudioSourceNode)
*)
and[@js.scope "MediaElementAudioSourceNode"] MediaElementAudioSourceNode : sig
  type t = [`AudioNode | `EventTarget | `MediaElementAudioSourceNode] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioNode | `EventTarget | `MediaElementAudioSourceNode]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioNode | `EventTarget | `MediaElementAudioSourceNode]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaElementAudioSourceNode ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaElementAudioSourceNode/mediaElement) *)
  val get_mediaElement: 'tags this -> HTMLMediaElement.t [@@js.get "mediaElement"]
  val create: mediaElement:HTMLMediaElement.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': context:AudioContext.t -> options:MediaElementAudioSourceOptions.t -> t [@@js.create]
end

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStreamAudioDestinationNode) *)
and[@js.scope "MediaStreamAudioDestinationNode"] MediaStreamAudioDestinationNode : sig
  type t = [`AudioNode | `EventTarget | `MediaStreamAudioDestinationNode] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioNode | `EventTarget | `MediaStreamAudioDestinationNode]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioNode | `EventTarget | `MediaStreamAudioDestinationNode]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaStreamAudioDestinationNode ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStreamAudioDestinationNode/stream) *)
  val get_stream: 'tags this -> MediaStream.t [@@js.get "stream"]
  val create: stream:MediaStream.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': context:AudioContext.t -> ?options:AudioNodeOptions.t -> unit -> t [@@js.create]
end

(**
  A type of AudioNode which operates as an audio source whose media is received from a MediaStream obtained using the WebRTC or Media Capture and Streams APIs.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStreamAudioSourceNode)
*)
and[@js.scope "MediaStreamAudioSourceNode"] MediaStreamAudioSourceNode : sig
  type t = [`AudioNode | `EventTarget | `MediaStreamAudioSourceNode] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AudioNode | `EventTarget | `MediaStreamAudioSourceNode]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AudioNode | `EventTarget | `MediaStreamAudioSourceNode]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `MediaStreamAudioSourceNode ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MediaStreamAudioSourceNode/mediaStream) *)
  val get_mediaStream: 'tags this -> MediaStream.t [@@js.get "mediaStream"]
  val create: mediaStream:MediaStream.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create': context:AudioContext.t -> options:MediaStreamAudioSourceOptions.t -> t [@@js.create]
end
module[@js.scope "Audio"] Audio : sig
  val create: ?src:string -> unit -> HTMLAudioElement.t [@@js.create]
end
module AnimationEventMap : sig
  type t = [`AnimationEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AnimationEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AnimationEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AnimationEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_cancel: 'tags this -> AnimationPlaybackEvent.t [@@js.get "cancel"]
  val set_cancel: 'tags this -> AnimationPlaybackEvent.t -> unit [@@js.set "cancel"]
  val get_finish: 'tags this -> AnimationPlaybackEvent.t [@@js.get "finish"]
  val set_finish: 'tags this -> AnimationPlaybackEvent.t -> unit [@@js.set "finish"]
  val get_remove: 'tags this -> Event.t [@@js.get "remove"]
  val set_remove: 'tags this -> Event.t -> unit [@@js.set "remove"]
  val create: cancel:AnimationPlaybackEvent.t -> finish:AnimationPlaybackEvent.t -> remove:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end
module AbortSignalEventMap : sig
  type t = [`AbortSignalEventMap] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AbortSignalEventMap]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AbortSignalEventMap]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AbortSignalEventMap ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  val get_abort: 'tags this -> Event.t [@@js.get "abort"]
  val set_abort: 'tags this -> Event.t -> unit [@@js.set "abort"]
  val create: abort:Event.t -> unit -> t [@@js.builder]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
end

(**
  A controller object that allows you to abort one or more DOM requests as and when desired.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AbortController)
  
  
  A controller object that allows you to abort one or more DOM requests as and when desired.
*)
module[@js.scope "AbortController"] AbortController : sig
  type t = [`AbortController] intf [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  [@@@js.stop]
  type tags = [`AbortController]
  [@@@js.start]
  [@@@js.implem 
    type tags = [`AbortController]
  ]
  type 'tags this = 'tags intf constraint 'tags = [> `AbortController ]
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  
  (**
    Returns the AbortSignal object associated with this object.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AbortController/signal)
    
    
    Returns the AbortSignal object associated with this object.
  *)
  val get_signal: 'tags this -> AbortSignal.t [@@js.get "signal"]
  
  (**
    Invoking this method will set this object's AbortSignal's aborted flag and signal to any observers that the associated activity is to be aborted.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/AbortController/abort)
  *)
  val abort: 'tags this -> ?reason:any -> unit -> unit [@@js.call "abort"]
  val cast_from: 'tags this -> t [@@js.custom let cast_from = Obj.magic]
  val prototype: unit -> t [@@js.get "prototype"]
  val create: unit -> t [@@js.create]
end
module CustomEventInit_Make (T : Ojs.T) : sig
  type 'T parent = 'T CustomEventInit.t
  type t = T.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  val get_detail: t -> T.t option [@@js.get "detail"]
  val set_detail: t -> T.t -> unit [@@js.set "detail"]
end
module MessageEventInit_Make (T : Ojs.T) : sig
  type 'T parent = 'T MessageEventInit.t
  type t = T.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  val get_data: t -> T.t option [@@js.get "data"]
  val set_data: t -> T.t -> unit [@@js.set "data"]
  val get_lastEventId: t -> string option [@@js.get "lastEventId"]
  val set_lastEventId: t -> string -> unit [@@js.set "lastEventId"]
  val get_origin: t -> string option [@@js.get "origin"]
  val set_origin: t -> string -> unit [@@js.set "origin"]
  val get_ports: t -> MessagePort.t list option [@@js.get "ports"]
  val set_ports: t -> MessagePort.t list -> unit [@@js.set "ports"]
  val get_source: t -> MessageEventSource.t option [@@js.get "source"]
  val set_source: t -> MessageEventSource.t option -> unit [@@js.set "source"]
end
module QueuingStrategy_Make (T : Ojs.T) : sig
  type 'T parent = 'T QueuingStrategy.t
  type t = T.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  val get_highWaterMark: t -> float option [@@js.get "highWaterMark"]
  val set_highWaterMark: t -> float -> unit [@@js.set "highWaterMark"]
  val get_size: t -> T.t QueuingStrategySize.t option [@@js.get "size"]
  val set_size: t -> T.t QueuingStrategySize.t -> unit [@@js.set "size"]
end
module ReadableStreamReadDoneResult_Make (T : Ojs.T) : sig
  type 'T parent = 'T ReadableStreamReadDoneResult.t
  type t = T.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  val get_done: t -> ([`L_b_true[@js true]] [@js.enum]) [@@js.get "done"]
  val set_done: t -> ([`L_b_true[@js true]] [@js.enum]) -> unit [@@js.set "done"]
  val get_value: t -> T.t option [@@js.get "value"]
  val set_value: t -> T.t -> unit [@@js.set "value"]
end
module ReadableStreamReadValueResult_Make (T : Ojs.T) : sig
  type 'T parent = 'T ReadableStreamReadValueResult.t
  type t = T.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  val get_done: t -> ([`L_b_false[@js false]] [@js.enum]) [@@js.get "done"]
  val set_done: t -> ([`L_b_false[@js false]] [@js.enum]) -> unit [@@js.set "done"]
  val get_value: t -> T.t [@@js.get "value"]
  val set_value: t -> T.t -> unit [@@js.set "value"]
end
module ReadableWritablePair_Make (R : Ojs.T) (W : Ojs.T) : sig
  type ('R, 'W) parent = ('R, 'W) ReadableWritablePair.t
  type t = (R.t, W.t) parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  val get_readable: t -> R.t ReadableStream.t [@@js.get "readable"]
  val set_readable: t -> R.t ReadableStream.t -> unit [@@js.set "readable"]
  
  (**
    Provides a convenient, chainable way of piping this readable stream through a transform stream (or any other \{ writable, readable \} pair). It simply pipes the stream into the writable side of the supplied pair, and returns the readable side for further use.
    
    Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.
  *)
  val get_writable: t -> W.t WritableStream.t [@@js.get "writable"]
  
  (**
    Provides a convenient, chainable way of piping this readable stream through a transform stream (or any other \{ writable, readable \} pair). It simply pipes the stream into the writable side of the supplied pair, and returns the readable side for further use.
    
    Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.
  *)
  val set_writable: t -> W.t WritableStream.t -> unit [@@js.set "writable"]
end
module Transformer_Make (I : Ojs.T) (O : Ojs.T) : sig
  type ('I, 'O) parent = ('I, 'O) Transformer.t
  type t = (I.t, O.t) parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  val get_flush: t -> O.t TransformerFlushCallback.t option [@@js.get "flush"]
  val set_flush: t -> O.t TransformerFlushCallback.t -> unit [@@js.set "flush"]
  val get_readableType: t -> undefined [@@js.get "readableType"]
  val set_readableType: t -> undefined -> unit [@@js.set "readableType"]
  val get_start: t -> O.t TransformerStartCallback.t option [@@js.get "start"]
  val set_start: t -> O.t TransformerStartCallback.t -> unit [@@js.set "start"]
  val get_transform: t -> (I.t, O.t) TransformerTransformCallback.t option [@@js.get "transform"]
  val set_transform: t -> (I.t, O.t) TransformerTransformCallback.t -> unit [@@js.set "transform"]
  val get_writableType: t -> undefined [@@js.get "writableType"]
  val set_writableType: t -> undefined -> unit [@@js.set "writableType"]
end
module UnderlyingDefaultSource_Make (R : Ojs.T) : sig
  type 'R parent = 'R UnderlyingDefaultSource.t
  type t = R.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  val get_cancel: t -> UnderlyingSourceCancelCallback.t option [@@js.get "cancel"]
  val set_cancel: t -> UnderlyingSourceCancelCallback.t -> unit [@@js.set "cancel"]
  val get_pull: t -> (R.t ReadableStreamDefaultController.t -> (unit, unit PromiseLike.t) union2) option [@@js.get "pull"]
  val set_pull: t -> (R.t ReadableStreamDefaultController.t -> ([`U1 of unit | `U2 of unit PromiseLike.t] [@js.union])) -> unit [@@js.set "pull"]
  val get_start: t -> (R.t ReadableStreamDefaultController.t -> any) option [@@js.get "start"]
  val set_start: t -> (R.t ReadableStreamDefaultController.t -> any) -> unit [@@js.set "start"]
  val get_type: t -> undefined [@@js.get "type"]
  val set_type: t -> undefined -> unit [@@js.set "type"]
end
module UnderlyingSink_Make (W : Ojs.T) : sig
  type 'W parent = 'W UnderlyingSink.t
  type t = W.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  val get_abort: t -> UnderlyingSinkAbortCallback.t option [@@js.get "abort"]
  val set_abort: t -> UnderlyingSinkAbortCallback.t -> unit [@@js.set "abort"]
  val get_close: t -> UnderlyingSinkCloseCallback.t option [@@js.get "close"]
  val set_close: t -> UnderlyingSinkCloseCallback.t -> unit [@@js.set "close"]
  val get_start: t -> UnderlyingSinkStartCallback.t option [@@js.get "start"]
  val set_start: t -> UnderlyingSinkStartCallback.t -> unit [@@js.set "start"]
  val get_type: t -> undefined [@@js.get "type"]
  val set_type: t -> undefined -> unit [@@js.set "type"]
  val get_write: t -> W.t UnderlyingSinkWriteCallback.t option [@@js.get "write"]
  val set_write: t -> W.t UnderlyingSinkWriteCallback.t -> unit [@@js.set "write"]
end
module UnderlyingSource_Make (R : Ojs.T) : sig
  type 'R parent = 'R UnderlyingSource.t
  type t = R.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  val get_autoAllocateChunkSize: t -> float option [@@js.get "autoAllocateChunkSize"]
  val set_autoAllocateChunkSize: t -> float -> unit [@@js.set "autoAllocateChunkSize"]
  val get_cancel: t -> UnderlyingSourceCancelCallback.t option [@@js.get "cancel"]
  val set_cancel: t -> UnderlyingSourceCancelCallback.t -> unit [@@js.set "cancel"]
  val get_pull: t -> R.t UnderlyingSourcePullCallback.t option [@@js.get "pull"]
  val set_pull: t -> R.t UnderlyingSourcePullCallback.t -> unit [@@js.set "pull"]
  val get_start: t -> R.t UnderlyingSourceStartCallback.t option [@@js.get "start"]
  val set_start: t -> R.t UnderlyingSourceStartCallback.t -> unit [@@js.set "start"]
  val get_type: t -> ReadableStreamType.t option [@@js.get "type"]
  val set_type: t -> ReadableStreamType.t -> unit [@@js.set "type"]
end
module CustomEvent_Make (T : Ojs.T) : sig
  type 'T parent = 'T CustomEvent.t
  type t = T.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  
  (**
    Returns any custom data event was created with. Typically used for synthetic events.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CustomEvent/detail)
  *)
  val get_detail: t -> T.t [@@js.get "detail"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/CustomEvent/initCustomEvent) *)
  val initCustomEvent: t -> type_:string -> ?bubbles:bool -> ?cancelable:bool -> ?detail:T.t -> unit -> unit [@@js.call "initCustomEvent"]
end
module HTMLCollectionOf_Make (T : Ojs.T) : sig
  type 'T parent = 'T HTMLCollectionOf.t
  type t = T.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  (* [Symbol.iterator]: unit -> T.t IterableIterator.t *)
  
  (**
    Retrieves an object from various collections.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLCollection/item)
  *)
  val item: t -> index:float -> T.t option [@@js.call "item"]
  val namedItem: t -> name:string -> T.t option [@@js.call "namedItem"]
  val get: t -> float -> T.t [@@js.index_get]
  val set: t -> float -> T.t -> unit [@@js.index_set]
end
module IDBRequest_Make (T : Ojs.T) : sig
  type 'T parent = 'T IDBRequest.t
  type t = T.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  
  (**
    When a request is completed, returns the error (a DOMException), or null if the request succeeded. Throws a "InvalidStateError" DOMException if the request is still pending.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest/error)
  *)
  val get_error: t -> DOMException.t option [@@js.get "error"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest/error_event) *)
  val get_onerror: t -> (this:t -> ev:Event.t -> any) option [@@js.get "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest/error_event) *)
  val set_onerror: t -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onerror"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest/success_event) *)
  val get_onsuccess: t -> (this:t -> ev:Event.t -> any) option [@@js.get "onsuccess"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest/success_event) *)
  val set_onsuccess: t -> (this:t -> ev:Event.t -> any) option -> unit [@@js.set "onsuccess"]
  
  (**
    Returns "pending" until a request is complete, then returns "done".
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest/readyState)
  *)
  val get_readyState: t -> IDBRequestReadyState.t [@@js.get "readyState"]
  
  (**
    When a request is completed, returns the result, or undefined if the request failed. Throws a "InvalidStateError" DOMException if the request is still pending.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest/result)
  *)
  val get_result: t -> T.t [@@js.get "result"]
  
  (**
    Returns the IDBObjectStore, IDBIndex, or IDBCursor the request was made against, or null if is was an open request.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest/source)
  *)
  val get_source: t -> (IDBCursor.t, IDBIndex.t, IDBObjectStore.t) union3 [@@js.get "source"]
  
  (**
    Returns the IDBTransaction the request was made within. If this as an open request, then it returns an upgrade transaction while it is running, or null otherwise.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/IDBRequest/transaction)
  *)
  val get_transaction: t -> IDBTransaction.t option [@@js.get "transaction"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: t -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'IDBRequestEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    
    The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    
    When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    
    When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in Â§ 2.8 Observing event listeners.
    
    When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    
    If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    
    The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  *)
  val addEventListener: t -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of AddEventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "addEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: t -> type_:'K -> listener:(this:t -> ev:(* FIXME: unknown type 'IDBRequestEventMap[K]' *)any -> any) -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
  
  (**
    Removes the event listener in target's event listener list with the same type, callback, and options.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  *)
  val removeEventListener: t -> type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`U1 of bool | `U2 of EventListenerOptions.t] [@js.union]) -> unit -> unit [@@js.call "removeEventListener"]
end
module MessageEvent_Make (T : Ojs.T) : sig
  type 'T parent = 'T MessageEvent.t
  type t = T.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessageEvent/initMessageEvent) *)
  val initMessageEvent: t -> type_:string -> ?bubbles:bool -> ?cancelable:bool -> ?data:any -> ?origin:string -> ?lastEventId:string -> ?source:MessageEventSource.t option -> ?ports:MessagePort.t Iterable.t -> unit -> unit [@@js.call "initMessageEvent"]
  
  (**
    Returns the data of the message.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessageEvent/data)
  *)
  val get_data: t -> T.t [@@js.get "data"]
  
  (**
    Returns the last event ID string, for server-sent events.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessageEvent/lastEventId)
  *)
  val get_lastEventId: t -> string [@@js.get "lastEventId"]
  
  (**
    Returns the origin of the message, for server-sent events and cross-document messaging.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessageEvent/origin)
  *)
  val get_origin: t -> string [@@js.get "origin"]
  
  (**
    Returns the MessagePort array sent with the message, for cross-document messaging and channel messaging.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessageEvent/ports)
  *)
  val get_ports: t -> MessagePort.t list [@@js.get "ports"]
  
  (**
    Returns the WindowProxy of the source window, for cross-document messaging, and the MessagePort being attached, in the connect event fired at SharedWorkerGlobalScope objects.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessageEvent/source)
  *)
  val get_source: t -> MessageEventSource.t option [@@js.get "source"]
  
  (** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/MessageEvent/initMessageEvent) *)
  val initMessageEvent: t -> type_:string -> ?bubbles:bool -> ?cancelable:bool -> ?data:any -> ?origin:string -> ?lastEventId:string -> ?source:MessageEventSource.t option -> ?ports:MessagePort.t list -> unit -> unit [@@js.call "initMessageEvent"]
end
module NodeListOf_Make (TNode : Ojs.T) : sig
  type 'TNode parent = 'TNode NodeListOf.t
  type t = TNode.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  (* [Symbol.iterator]: unit -> TNode.t IterableIterator.t *)
  
  (** Returns an array of key, value pairs for every entry in the list. *)
  val entries: t -> (float * TNode.t) IterableIterator.t [@@js.call "entries"]
  
  (** Returns an list of keys in the list. *)
  val keys: t -> float IterableIterator.t [@@js.call "keys"]
  
  (** Returns an list of values in the list. *)
  val values: t -> TNode.t IterableIterator.t [@@js.call "values"]
  
  (**
    Returns the node with index index from the collection. The nodes are sorted in tree order.
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/NodeList/item)
  *)
  val item: t -> index:float -> TNode.t [@@js.call "item"]
  
  (**
    Performs the specified action for each node in an list.
    @param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the list.
    @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
  *)
  val forEach: t -> callbackfn:(value:TNode.t -> key:float -> parent:t -> unit) -> ?thisArg:any -> unit -> unit [@@js.call "forEach"]
  val get: t -> float -> TNode.t [@@js.index_get]
  val set: t -> float -> TNode.t -> unit [@@js.index_set]
end
module ProgressEvent_Make (T : Ojs.T) : sig
  type 'T parent = 'T ProgressEvent.t
  type t = T.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ProgressEvent/lengthComputable) *)
  val get_lengthComputable: t -> bool [@@js.get "lengthComputable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ProgressEvent/loaded) *)
  val get_loaded: t -> float [@@js.get "loaded"]
  
  (**
    Returns the object to which event is dispatched (its target).
    
    \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Event/target)
  *)
  val get_target: t -> T.t option [@@js.get "target"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ProgressEvent/total) *)
  val get_total: t -> float [@@js.get "total"]
end
module ReadableStream_Make (R : Ojs.T) : sig
  module AnonymousInterface3 : sig
    type t = private Ojs.t
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    val get_mode: t -> ([`L_s221_byob[@js "byob"]] [@js.enum]) [@@js.get "mode"]
    val set_mode: t -> ([`L_s221_byob[@js "byob"]] [@js.enum]) -> unit [@@js.set "mode"]
    val create: mode:([`L_s221_byob[@js "byob"]] [@js.enum]) -> unit -> t [@@js.builder]
  end
  type 'R parent = 'R ReadableStream.t
  type t = R.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStream/locked) *)
  val get_locked: t -> bool [@@js.get "locked"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStream/cancel) *)
  val cancel: t -> ?reason:any -> unit -> unit Promise.t [@@js.call "cancel"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStream/getReader) *)
  val getReader: t -> options:AnonymousInterface3.t -> ReadableStreamBYOBReader.t [@@js.call "getReader"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStream/getReader) *)
  val getReader: t -> R.t ReadableStreamDefaultReader.t [@@js.call "getReader"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStream/getReader) *)
  val getReader: t -> ?options:ReadableStreamGetReaderOptions.t -> unit -> R.t ReadableStreamReader.t [@@js.call "getReader"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStream/pipeThrough) *)
  val pipeThrough: t -> transform:('T, R.t) ReadableWritablePair.t -> ?options:StreamPipeOptions.t -> unit -> 'T parent [@@js.call "pipeThrough"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStream/pipeTo) *)
  val pipeTo: t -> destination:R.t WritableStream.t -> ?options:StreamPipeOptions.t -> unit -> unit Promise.t [@@js.call "pipeTo"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStream/tee) *)
  val tee: t -> (t * t) [@@js.call "tee"]
end
module ReadableStreamDefaultController_Make (R : Ojs.T) : sig
  type 'R parent = 'R ReadableStreamDefaultController.t
  type t = R.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController/desiredSize) *)
  val get_desiredSize: t -> float option [@@js.get "desiredSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController/close) *)
  val close: t -> unit [@@js.call "close"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController/enqueue) *)
  val enqueue: t -> ?chunk:R.t -> unit -> unit [@@js.call "enqueue"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController/error) *)
  val error: t -> ?e:any -> unit -> unit [@@js.call "error"]
end
module ReadableStreamDefaultReader_Make (R : Ojs.T) : sig
  type 'R parent = 'R ReadableStreamDefaultReader.t
  type t = R.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultReader/read) *)
  val read: t -> R.t ReadableStreamReadResult.t Promise.t [@@js.call "read"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultReader/releaseLock) *)
  val releaseLock: t -> unit [@@js.call "releaseLock"]
end
module TransformStream_Make (I : Ojs.T) (O : Ojs.T) : sig
  type ('I, 'O) parent = ('I, 'O) TransformStream.t
  type t = (I.t, O.t) parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TransformStream/readable) *)
  val get_readable: t -> O.t ReadableStream.t [@@js.get "readable"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TransformStream/writable) *)
  val get_writable: t -> I.t WritableStream.t [@@js.get "writable"]
end
module TransformStreamDefaultController_Make (O : Ojs.T) : sig
  type 'O parent = 'O TransformStreamDefaultController.t
  type t = O.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController/desiredSize) *)
  val get_desiredSize: t -> float option [@@js.get "desiredSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController/enqueue) *)
  val enqueue: t -> ?chunk:O.t -> unit -> unit [@@js.call "enqueue"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController/error) *)
  val error: t -> ?reason:any -> unit -> unit [@@js.call "error"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController/terminate) *)
  val terminate: t -> unit [@@js.call "terminate"]
end
module WritableStream_Make (W : Ojs.T) : sig
  type 'W parent = 'W WritableStream.t
  type t = W.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStream/locked) *)
  val get_locked: t -> bool [@@js.get "locked"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStream/abort) *)
  val abort: t -> ?reason:any -> unit -> unit Promise.t [@@js.call "abort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStream/close) *)
  val close: t -> unit Promise.t [@@js.call "close"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStream/getWriter) *)
  val getWriter: t -> W.t WritableStreamDefaultWriter.t [@@js.call "getWriter"]
end
module WritableStreamDefaultWriter_Make (W : Ojs.T) : sig
  type 'W parent = 'W WritableStreamDefaultWriter.t
  type t = W.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/closed) *)
  val get_closed: t -> undefined Promise.t [@@js.get "closed"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/desiredSize) *)
  val get_desiredSize: t -> float option [@@js.get "desiredSize"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/ready) *)
  val get_ready: t -> undefined Promise.t [@@js.get "ready"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/abort) *)
  val abort: t -> ?reason:any -> unit -> unit Promise.t [@@js.call "abort"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/close) *)
  val close: t -> unit Promise.t [@@js.call "close"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/releaseLock) *)
  val releaseLock: t -> unit [@@js.call "releaseLock"]
  
  (** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/write) *)
  val write: t -> ?chunk:W.t -> unit -> unit Promise.t [@@js.call "write"]
end
module QueuingStrategySize_Make (T : Ojs.T) : sig
  type 'T parent = 'T QueuingStrategySize.t
  type t = T.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  val apply: t -> chunk:T.t -> float [@@js.apply]
end
module TransformerFlushCallback_Make (O : Ojs.T) : sig
  type 'O parent = 'O TransformerFlushCallback.t
  type t = O.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  val apply: t -> controller:O.t TransformStreamDefaultController.t -> (unit, unit PromiseLike.t) union2 [@@js.apply]
end
module TransformerStartCallback_Make (O : Ojs.T) : sig
  type 'O parent = 'O TransformerStartCallback.t
  type t = O.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  val apply: t -> controller:O.t TransformStreamDefaultController.t -> any [@@js.apply]
end
module TransformerTransformCallback_Make (I : Ojs.T) (O : Ojs.T) : sig
  type ('I, 'O) parent = ('I, 'O) TransformerTransformCallback.t
  type t = (I.t, O.t) parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  val apply: t -> chunk:I.t -> controller:O.t TransformStreamDefaultController.t -> (unit, unit PromiseLike.t) union2 [@@js.apply]
end
module UnderlyingSinkWriteCallback_Make (W : Ojs.T) : sig
  type 'W parent = 'W UnderlyingSinkWriteCallback.t
  type t = W.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  val apply: t -> chunk:W.t -> controller:WritableStreamDefaultController.t -> (unit, unit PromiseLike.t) union2 [@@js.apply]
end
module UnderlyingSourcePullCallback_Make (R : Ojs.T) : sig
  type 'R parent = 'R UnderlyingSourcePullCallback.t
  type t = R.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  val apply: t -> controller:R.t ReadableStreamController.t -> (unit, unit PromiseLike.t) union2 [@@js.apply]
end
module UnderlyingSourceStartCallback_Make (R : Ojs.T) : sig
  type 'R parent = 'R UnderlyingSourceStartCallback.t
  type t = R.t parent
  val t_of_js: Ojs.t -> t
  val t_to_js: t -> Ojs.t
  
  val apply: t -> controller:R.t ReadableStreamController.t -> any [@@js.apply]
end

(**
  The `console` module provides a simple debugging console that is similar to the
  JavaScript console mechanism provided by web browsers.
  
  The module exports two specific components:
  
  * A `Console` class with methods such as `console.log()`, `console.error()` and`console.warn()` that can be used to write to any Node.js stream.
  * A global `console` instance configured to write to `process.stdout` and `process.stderr`. The global `console` can be used without calling`require('console')`.
  
  _**Warning**_: The global console object's methods are neither consistently
  synchronous like the browser APIs they resemble, nor are they consistently
  asynchronous like all other Node.js streams. See the `note on process I/O` for
  more information.
  
  Example using the global `console`:
  
  ```js
  console.log('hello world');
  // Prints: hello world, to stdout
  console.log('hello %s', 'world');
  // Prints: hello world, to stdout
  console.error(new Error('Whoops, something bad happened'));
  // Prints error message and stack trace to stderr:
  //   Error: Whoops, something bad happened
  //     at \[eval\]:5:15
  //     at Script.runInThisContext (node:vm:132:18)
  //     at Object.runInThisContext (node:vm:309:38)
  //     at node:internal/process/execution:77:19
  //     at \[eval\]-wrapper:6:22
  //     at evalScript (node:internal/process/execution:76:60)
  //     at node:internal/main/eval_string:23:3
  
  const name = 'Will Robinson';
  console.warn(`Danger $\{name\}! Danger!`);
  // Prints: Danger Will Robinson! Danger!, to stderr
  ```
  
  Example using the `Console` class:
  
  ```js
  const out = getStreamSomehow();
  const err = getStreamSomehow();
  const myConsole = new console.Console(out, err);
  
  myConsole.log('hello world');
  // Prints: hello world, to out
  myConsole.log('hello %s', 'world');
  // Prints: hello world, to out
  myConsole.error(new Error('Whoops, something bad happened'));
  // Prints: \[Error: Whoops, something bad happened\], to err
  
  const name = 'Will Robinson';
  myConsole.warn(`Danger $\{name\}! Danger!`);
  // Prints: Danger Will Robinson! Danger!, to err
  ```
*)
val console: unit -> Console.t [@@js.get "console"]

(**
  @deprecated This is a legacy alias of `navigator`.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/navigator)
*)
val clientInformation: unit -> Navigator.t [@@js.get "clientInformation"]

(**
  Returns true if the window has been closed, false otherwise.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/closed)
*)
val closed: unit -> bool [@@js.get "closed"]

(**
  Defines a new custom element, mapping the given name to the given constructor as an autonomous custom element.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/customElements)
*)
val customElements: unit -> CustomElementRegistry.t [@@js.get "customElements"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/devicePixelRatio) *)
val devicePixelRatio: unit -> float [@@js.get "devicePixelRatio"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/document) *)
val document: unit -> Document.t [@@js.get "document"]

(** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/event) *)
val event: unit -> Event.t option [@@js.get "event"]

(** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/external) *)
val external_: unit -> External.t [@@js.get "external"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/frameElement) *)
val frameElement: unit -> Element.t option [@@js.get "frameElement"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/frames) *)
val frames: unit -> WindowProxy.t [@@js.get "frames"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/history) *)
val history: unit -> History.t [@@js.get "history"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/innerHeight) *)
val innerHeight: unit -> float [@@js.get "innerHeight"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/innerWidth) *)
val innerWidth: unit -> float [@@js.get "innerWidth"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/length) *)
val length: unit -> float [@@js.get "length"]

(**
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/location)
  
  
  Returns workerGlobal's WorkerLocation object.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/location)
*)
val location: unit -> Location.t [@@js.get "location"]

(**
  Returns true if the location bar is visible; otherwise, returns false.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/locationbar)
*)
val locationbar: unit -> BarProp.t [@@js.get "locationbar"]

(**
  Returns true if the menu bar is visible; otherwise, returns false.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/menubar)
*)
val menubar: unit -> BarProp.t [@@js.get "menubar"]

(** @deprecated  *)
val name: unit -> unit [@@js.get "name"]

(**
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/navigator)
  
  
  Returns workerGlobal's WorkerNavigator object.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/navigator)
*)
val navigator: unit -> Navigator.t [@@js.get "navigator"]

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/devicemotion_event)
*)
val ondevicemotion: unit -> (this:Window.t -> ev:DeviceMotionEvent.t -> any) option [@@js.get "ondevicemotion"]

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/deviceorientation_event)
*)
val ondeviceorientation: unit -> (this:Window.t -> ev:DeviceOrientationEvent.t -> any) option [@@js.get "ondeviceorientation"]

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/deviceorientationabsolute_event)
*)
val ondeviceorientationabsolute: unit -> (this:Window.t -> ev:DeviceOrientationEvent.t -> any) option [@@js.get "ondeviceorientationabsolute"]

(** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/orientationchange_event) *)
val onorientationchange: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "onorientationchange"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/opener) *)
val opener: unit -> any [@@js.get "opener"]

(** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/orientation) *)
val orientation: unit -> float [@@js.get "orientation"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/outerHeight) *)
val outerHeight: unit -> float [@@js.get "outerHeight"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/outerWidth) *)
val outerWidth: unit -> float [@@js.get "outerWidth"]

(**
  @deprecated This is a legacy alias of `scrollX`.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/scrollX)
*)
val pageXOffset: unit -> float [@@js.get "pageXOffset"]

(**
  @deprecated This is a legacy alias of `scrollY`.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/scrollY)
*)
val pageYOffset: unit -> float [@@js.get "pageYOffset"]

(**
  Refers to either the parent WindowProxy, or itself.
  
  It can rarely be null e.g. for contentWindow of an iframe that is already removed from the parent.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/parent)
*)
val parent: unit -> WindowProxy.t [@@js.get "parent"]

(**
  Returns true if the personal bar is visible; otherwise, returns false.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/personalbar)
*)
val personalbar: unit -> BarProp.t [@@js.get "personalbar"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/screen) *)
val screen: unit -> Screen.t [@@js.get "screen"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/screenLeft) *)
val screenLeft: unit -> float [@@js.get "screenLeft"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/screenTop) *)
val screenTop: unit -> float [@@js.get "screenTop"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/screenX) *)
val screenX: unit -> float [@@js.get "screenX"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/screenY) *)
val screenY: unit -> float [@@js.get "screenY"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/scrollX) *)
val scrollX: unit -> float [@@js.get "scrollX"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/scrollY) *)
val scrollY: unit -> float [@@js.get "scrollY"]

(**
  Returns true if the scrollbars are visible; otherwise, returns false.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/scrollbars)
*)
val scrollbars: unit -> BarProp.t [@@js.get "scrollbars"]

(**
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/self)
  
  
  Returns workerGlobal.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/self)
*)
val self: unit -> (Window.t, (* FIXME: unknown type 'typeof globalThis' *)any) intersection2 [@@js.get "self"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/speechSynthesis) *)
val speechSynthesis: unit -> SpeechSynthesis.t [@@js.get "speechSynthesis"]

(** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/status) *)
val status: unit -> string [@@js.get "status"]

(**
  Returns true if the status bar is visible; otherwise, returns false.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/statusbar)
*)
val statusbar: unit -> BarProp.t [@@js.get "statusbar"]

(**
  Returns true if the toolbar is visible; otherwise, returns false.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/toolbar)
*)
val toolbar: unit -> BarProp.t [@@js.get "toolbar"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/top) *)
val top: unit -> WindowProxy.t option [@@js.get "top"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/visualViewport) *)
val visualViewport: unit -> VisualViewport.t option [@@js.get "visualViewport"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/window) *)
val window: unit -> (Window.t, (* FIXME: unknown type 'typeof globalThis' *)any) intersection2 [@@js.get "window"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/alert) *)
val alert: ?message:any -> unit -> unit [@@js.global "alert"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/blur) *)
val blur: unit -> unit [@@js.global "blur"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/cancelIdleCallback) *)
val cancelIdleCallback: float -> unit [@@js.global "cancelIdleCallback"]

(** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/captureEvents) *)
val captureEvents: unit -> unit [@@js.global "captureEvents"]

(**
  Closes the window.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/close)
*)
val close: unit -> unit [@@js.global "close"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/confirm) *)
val confirm: ?message:string -> unit -> bool [@@js.global "confirm"]

(**
  Moves the focus to the window's browsing context, if any.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/focus)
*)
val focus: unit -> unit [@@js.global "focus"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/getComputedStyle) *)
val getComputedStyle: elt:Element.t -> ?pseudoElt:string option -> unit -> CSSStyleDeclaration.t [@@js.global "getComputedStyle"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/getSelection) *)
val getSelection: unit -> Selection.t option [@@js.global "getSelection"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/matchMedia) *)
val matchMedia: string -> MediaQueryList.t [@@js.global "matchMedia"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/moveBy) *)
val moveBy: x:float -> y:float -> unit [@@js.global "moveBy"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/moveTo) *)
val moveTo: x:float -> y:float -> unit [@@js.global "moveTo"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/open) *)
val open_: ?url:([`String of string | `Other of URL.t] [@js.union on_field "dummy"]) Primitive.t -> ?target:string -> ?features:string -> unit -> WindowProxy.t option [@@js.global "open"]

(**
  Posts a message to the given window. Messages can be structured objects, e.g. nested objects and arrays, can contain JavaScript values (strings, numbers, Date objects, etc), and can contain certain data objects such as File Blob, FileList, and ArrayBuffer objects.
  
  Objects listed in the transfer member of options are transferred, not just cloned, meaning that they are no longer usable on the sending side.
  
  A target origin can be specified using the targetOrigin member of options. If not provided, it defaults to "/". This default restricts the message to same-origin targets only.
  
  If the origin of the target window doesn't match the given target origin, the message is discarded, to avoid information leakage. To send the message to the target regardless of origin, set the target origin to "*".
  
  Throws a "DataCloneError" DOMException if transfer array contains duplicate objects or if message could not be cloned.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/postMessage)
*)
val postMessage: message:any -> targetOrigin:string -> ?transfer:Transferable.t list -> unit -> unit [@@js.global "postMessage"]

(**
  Posts a message to the given window. Messages can be structured objects, e.g. nested objects and arrays, can contain JavaScript values (strings, numbers, Date objects, etc), and can contain certain data objects such as File Blob, FileList, and ArrayBuffer objects.
  
  Objects listed in the transfer member of options are transferred, not just cloned, meaning that they are no longer usable on the sending side.
  
  A target origin can be specified using the targetOrigin member of options. If not provided, it defaults to "/". This default restricts the message to same-origin targets only.
  
  If the origin of the target window doesn't match the given target origin, the message is discarded, to avoid information leakage. To send the message to the target regardless of origin, set the target origin to "*".
  
  Throws a "DataCloneError" DOMException if transfer array contains duplicate objects or if message could not be cloned.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/postMessage)
  
  
  Clones message and transmits it to the Worker object associated with dedicatedWorkerGlobal. transfer can be passed as a list of objects that are to be transferred rather than cloned.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/postMessage)
*)
val postMessage': message:any -> ?options:WindowPostMessageOptions.t -> unit -> unit [@@js.global "postMessage"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/print) *)
val print: unit -> unit [@@js.global "print"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/prompt) *)
val prompt: ?message:string -> ?_default:string -> unit -> string option [@@js.global "prompt"]

(** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/releaseEvents) *)
val releaseEvents: unit -> unit [@@js.global "releaseEvents"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/requestIdleCallback) *)
val requestIdleCallback: callback:IdleRequestCallback.t -> ?options:IdleRequestOptions.t -> unit -> float [@@js.global "requestIdleCallback"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/resizeBy) *)
val resizeBy: x:float -> y:float -> unit [@@js.global "resizeBy"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/resizeTo) *)
val resizeTo: width:float -> height:float -> unit [@@js.global "resizeTo"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/scroll) *)
val scroll: ?options:ScrollToOptions.t -> unit -> unit [@@js.global "scroll"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/scroll) *)
val scroll': x:float -> y:float -> unit [@@js.global "scroll"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/scrollBy) *)
val scrollBy: ?options:ScrollToOptions.t -> unit -> unit [@@js.global "scrollBy"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/scrollBy) *)
val scrollBy': x:float -> y:float -> unit [@@js.global "scrollBy"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/scrollTo) *)
val scrollTo: ?options:ScrollToOptions.t -> unit -> unit [@@js.global "scrollTo"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/scrollTo) *)
val scrollTo': x:float -> y:float -> unit [@@js.global "scrollTo"]

(**
  Cancels the document load.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/stop)
*)
val stop: unit -> unit [@@js.global "stop"]
val toString: unit -> string [@@js.global "toString"]

(**
  Dispatches a synthetic event event to target and returns true if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/EventTarget/dispatchEvent)
*)
val dispatchEvent: Event.t -> bool [@@js.global "dispatchEvent"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/cancelAnimationFrame) *)
val cancelAnimationFrame: float -> unit [@@js.global "cancelAnimationFrame"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/requestAnimationFrame) *)
val requestAnimationFrame: FrameRequestCallback.t -> float [@@js.global "requestAnimationFrame"]

(**
  Fires when the user aborts the download.
  @param ev The event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/abort_event)
*)
val onabort: unit -> (this:Window.t -> ev:UIEvent.t -> any) option [@@js.get "onabort"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/animationcancel_event) *)
val onanimationcancel: unit -> (this:Window.t -> ev:AnimationEvent.t -> any) option [@@js.get "onanimationcancel"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/animationend_event) *)
val onanimationend: unit -> (this:Window.t -> ev:AnimationEvent.t -> any) option [@@js.get "onanimationend"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/animationiteration_event) *)
val onanimationiteration: unit -> (this:Window.t -> ev:AnimationEvent.t -> any) option [@@js.get "onanimationiteration"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/animationstart_event) *)
val onanimationstart: unit -> (this:Window.t -> ev:AnimationEvent.t -> any) option [@@js.get "onanimationstart"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/auxclick_event) *)
val onauxclick: unit -> (this:Window.t -> ev:MouseEvent.t -> any) option [@@js.get "onauxclick"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/beforeinput_event) *)
val onbeforeinput: unit -> (this:Window.t -> ev:InputEvent.t -> any) option [@@js.get "onbeforeinput"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/beforetoggle_event) *)
val onbeforetoggle: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "onbeforetoggle"]

(**
  Fires when the object loses the input focus.
  @param ev The focus event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/blur_event)
*)
val onblur: unit -> (this:Window.t -> ev:FocusEvent.t -> any) option [@@js.get "onblur"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/cancel_event) *)
val oncancel: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "oncancel"]

(**
  Occurs when playback is possible, but would require further buffering.
  @param ev The event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/canplay_event)
*)
val oncanplay: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "oncanplay"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/canplaythrough_event) *)
val oncanplaythrough: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "oncanplaythrough"]

(**
  Fires when the contents of the object or selection have changed.
  @param ev The event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/change_event)
*)
val onchange: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "onchange"]

(**
  Fires when the user clicks the left mouse button on the object
  @param ev The mouse event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/click_event)
*)
val onclick: unit -> (this:Window.t -> ev:MouseEvent.t -> any) option [@@js.get "onclick"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/close_event) *)
val onclose: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "onclose"]

(**
  Fires when the user clicks the right mouse button in the client area, opening the context menu.
  @param ev The mouse event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/contextmenu_event)
*)
val oncontextmenu: unit -> (this:Window.t -> ev:MouseEvent.t -> any) option [@@js.get "oncontextmenu"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/copy_event) *)
val oncopy: unit -> (this:Window.t -> ev:ClipboardEvent.t -> any) option [@@js.get "oncopy"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/cuechange_event) *)
val oncuechange: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "oncuechange"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/cut_event) *)
val oncut: unit -> (this:Window.t -> ev:ClipboardEvent.t -> any) option [@@js.get "oncut"]

(**
  Fires when the user double-clicks the object.
  @param ev The mouse event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/dblclick_event)
*)
val ondblclick: unit -> (this:Window.t -> ev:MouseEvent.t -> any) option [@@js.get "ondblclick"]

(**
  Fires on the source object continuously during a drag operation.
  @param ev The event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/drag_event)
*)
val ondrag: unit -> (this:Window.t -> ev:DragEvent.t -> any) option [@@js.get "ondrag"]

(**
  Fires on the source object when the user releases the mouse at the close of a drag operation.
  @param ev The event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragend_event)
*)
val ondragend: unit -> (this:Window.t -> ev:DragEvent.t -> any) option [@@js.get "ondragend"]

(**
  Fires on the target element when the user drags the object to a valid drop target.
  @param ev The drag event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragenter_event)
*)
val ondragenter: unit -> (this:Window.t -> ev:DragEvent.t -> any) option [@@js.get "ondragenter"]

(**
  Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.
  @param ev The drag event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragleave_event)
*)
val ondragleave: unit -> (this:Window.t -> ev:DragEvent.t -> any) option [@@js.get "ondragleave"]

(**
  Fires on the target element continuously while the user drags the object over a valid drop target.
  @param ev The event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragover_event)
*)
val ondragover: unit -> (this:Window.t -> ev:DragEvent.t -> any) option [@@js.get "ondragover"]

(**
  Fires on the source object when the user starts to drag a text selection or selected object.
  @param ev The event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragstart_event)
*)
val ondragstart: unit -> (this:Window.t -> ev:DragEvent.t -> any) option [@@js.get "ondragstart"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/drop_event) *)
val ondrop: unit -> (this:Window.t -> ev:DragEvent.t -> any) option [@@js.get "ondrop"]

(**
  Occurs when the duration attribute is updated.
  @param ev The event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/durationchange_event)
*)
val ondurationchange: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "ondurationchange"]

(**
  Occurs when the media element is reset to its initial state.
  @param ev The event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/emptied_event)
*)
val onemptied: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "onemptied"]

(**
  Occurs when the end of playback is reached.
  @param ev The event
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/ended_event)
*)
val onended: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "onended"]

(**
  Fires when an error occurs during object loading.
  
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/error_event)
  @param ev The event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/error_event)
*)
val onerror: unit -> OnErrorEventHandler.t [@@js.get "onerror"]

(**
  Fires when the object receives focus.
  @param ev The event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/focus_event)
*)
val onfocus: unit -> (this:Window.t -> ev:FocusEvent.t -> any) option [@@js.get "onfocus"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/formdata_event) *)
val onformdata: unit -> (this:Window.t -> ev:FormDataEvent.t -> any) option [@@js.get "onformdata"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/gotpointercapture_event) *)
val ongotpointercapture: unit -> (this:Window.t -> ev:PointerEvent.t -> any) option [@@js.get "ongotpointercapture"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/input_event) *)
val oninput: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "oninput"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/invalid_event) *)
val oninvalid: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "oninvalid"]

(**
  Fires when the user presses a key.
  @param ev The keyboard event
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/keydown_event)
*)
val onkeydown: unit -> (this:Window.t -> ev:KeyboardEvent.t -> any) option [@@js.get "onkeydown"]

(**
  Fires when the user presses an alphanumeric key.
  @param ev The event.
  @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/keypress_event)
*)
val onkeypress: unit -> (this:Window.t -> ev:KeyboardEvent.t -> any) option [@@js.get "onkeypress"]

(**
  Fires when the user releases a key.
  @param ev The keyboard event
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/keyup_event)
*)
val onkeyup: unit -> (this:Window.t -> ev:KeyboardEvent.t -> any) option [@@js.get "onkeyup"]

(**
  Fires immediately after the browser loads the object.
  @param ev The event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/SVGElement/load_event)
*)
val onload: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "onload"]

(**
  Occurs when media data is loaded at the current playback position.
  @param ev The event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadeddata_event)
*)
val onloadeddata: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "onloadeddata"]

(**
  Occurs when the duration and dimensions of the media have been determined.
  @param ev The event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadedmetadata_event)
*)
val onloadedmetadata: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "onloadedmetadata"]

(**
  Occurs when Internet Explorer begins looking for media data.
  @param ev The event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadstart_event)
*)
val onloadstart: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "onloadstart"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLElement/lostpointercapture_event) *)
val onlostpointercapture: unit -> (this:Window.t -> ev:PointerEvent.t -> any) option [@@js.get "onlostpointercapture"]

(**
  Fires when the user clicks the object with either mouse button.
  @param ev The mouse event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/mousedown_event)
*)
val onmousedown: unit -> (this:Window.t -> ev:MouseEvent.t -> any) option [@@js.get "onmousedown"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/mouseenter_event) *)
val onmouseenter: unit -> (this:Window.t -> ev:MouseEvent.t -> any) option [@@js.get "onmouseenter"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/mouseleave_event) *)
val onmouseleave: unit -> (this:Window.t -> ev:MouseEvent.t -> any) option [@@js.get "onmouseleave"]

(**
  Fires when the user moves the mouse over the object.
  @param ev The mouse event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/mousemove_event)
*)
val onmousemove: unit -> (this:Window.t -> ev:MouseEvent.t -> any) option [@@js.get "onmousemove"]

(**
  Fires when the user moves the mouse pointer outside the boundaries of the object.
  @param ev The mouse event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/mouseout_event)
*)
val onmouseout: unit -> (this:Window.t -> ev:MouseEvent.t -> any) option [@@js.get "onmouseout"]

(**
  Fires when the user moves the mouse pointer into the object.
  @param ev The mouse event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/mouseover_event)
*)
val onmouseover: unit -> (this:Window.t -> ev:MouseEvent.t -> any) option [@@js.get "onmouseover"]

(**
  Fires when the user releases a mouse button while the mouse is over the object.
  @param ev The mouse event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/mouseup_event)
*)
val onmouseup: unit -> (this:Window.t -> ev:MouseEvent.t -> any) option [@@js.get "onmouseup"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/paste_event) *)
val onpaste: unit -> (this:Window.t -> ev:ClipboardEvent.t -> any) option [@@js.get "onpaste"]

(**
  Occurs when playback is paused.
  @param ev The event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/pause_event)
*)
val onpause: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "onpause"]

(**
  Occurs when the play method is requested.
  @param ev The event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/play_event)
*)
val onplay: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "onplay"]

(**
  Occurs when the audio or video has started playing.
  @param ev The event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/playing_event)
*)
val onplaying: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "onplaying"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/pointercancel_event) *)
val onpointercancel: unit -> (this:Window.t -> ev:PointerEvent.t -> any) option [@@js.get "onpointercancel"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/pointerdown_event) *)
val onpointerdown: unit -> (this:Window.t -> ev:PointerEvent.t -> any) option [@@js.get "onpointerdown"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/pointerenter_event) *)
val onpointerenter: unit -> (this:Window.t -> ev:PointerEvent.t -> any) option [@@js.get "onpointerenter"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/pointerleave_event) *)
val onpointerleave: unit -> (this:Window.t -> ev:PointerEvent.t -> any) option [@@js.get "onpointerleave"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/pointermove_event) *)
val onpointermove: unit -> (this:Window.t -> ev:PointerEvent.t -> any) option [@@js.get "onpointermove"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/pointerout_event) *)
val onpointerout: unit -> (this:Window.t -> ev:PointerEvent.t -> any) option [@@js.get "onpointerout"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/pointerover_event) *)
val onpointerover: unit -> (this:Window.t -> ev:PointerEvent.t -> any) option [@@js.get "onpointerover"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/pointerup_event) *)
val onpointerup: unit -> (this:Window.t -> ev:PointerEvent.t -> any) option [@@js.get "onpointerup"]

(**
  Occurs to indicate progress while downloading media data.
  @param ev The event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/progress_event)
*)
val onprogress: unit -> (this:Window.t -> ev:ProgressEvent.t_0 -> any) option [@@js.get "onprogress"]

(**
  Occurs when the playback rate is increased or decreased.
  @param ev The event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/ratechange_event)
*)
val onratechange: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "onratechange"]

(**
  Fires when the user resets a form.
  @param ev The event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/reset_event)
*)
val onreset: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "onreset"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/resize_event) *)
val onresize: unit -> (this:Window.t -> ev:UIEvent.t -> any) option [@@js.get "onresize"]

(**
  Fires when the user repositions the scroll box in the scroll bar on the object.
  @param ev The event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/scroll_event)
*)
val onscroll: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "onscroll"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/scrollend_event) *)
val onscrollend: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "onscrollend"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/securitypolicyviolation_event) *)
val onsecuritypolicyviolation: unit -> (this:Window.t -> ev:SecurityPolicyViolationEvent.t -> any) option [@@js.get "onsecuritypolicyviolation"]

(**
  Occurs when the seek operation ends.
  @param ev The event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seeked_event)
*)
val onseeked: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "onseeked"]

(**
  Occurs when the current playback position is moved.
  @param ev The event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seeking_event)
*)
val onseeking: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "onseeking"]

(**
  Fires when the current selection changes.
  @param ev The event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/select_event)
*)
val onselect: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "onselect"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Document/selectionchange_event) *)
val onselectionchange: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "onselectionchange"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Node/selectstart_event) *)
val onselectstart: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "onselectstart"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement/slotchange_event) *)
val onslotchange: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "onslotchange"]

(**
  Occurs when the download has stopped.
  @param ev The event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/stalled_event)
*)
val onstalled: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "onstalled"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/submit_event) *)
val onsubmit: unit -> (this:Window.t -> ev:SubmitEvent.t -> any) option [@@js.get "onsubmit"]

(**
  Occurs if the load operation has been intentionally halted.
  @param ev The event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/suspend_event)
*)
val onsuspend: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "onsuspend"]

(**
  Occurs to indicate the current playback position.
  @param ev The event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/timeupdate_event)
*)
val ontimeupdate: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "ontimeupdate"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLDetailsElement/toggle_event) *)
val ontoggle: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "ontoggle"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/touchcancel_event) *)
val ontouchcancel: unit -> (this:Window.t -> ev:TouchEvent.t -> any) option [@@js.get "ontouchcancel"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/touchend_event) *)
val ontouchend: unit -> (this:Window.t -> ev:TouchEvent.t -> any) option [@@js.get "ontouchend"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/touchmove_event) *)
val ontouchmove: unit -> (this:Window.t -> ev:TouchEvent.t -> any) option [@@js.get "ontouchmove"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/touchstart_event) *)
val ontouchstart: unit -> (this:Window.t -> ev:TouchEvent.t -> any) option [@@js.get "ontouchstart"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/transitioncancel_event) *)
val ontransitioncancel: unit -> (this:Window.t -> ev:TransitionEvent.t -> any) option [@@js.get "ontransitioncancel"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/transitionend_event) *)
val ontransitionend: unit -> (this:Window.t -> ev:TransitionEvent.t -> any) option [@@js.get "ontransitionend"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/transitionrun_event) *)
val ontransitionrun: unit -> (this:Window.t -> ev:TransitionEvent.t -> any) option [@@js.get "ontransitionrun"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/transitionstart_event) *)
val ontransitionstart: unit -> (this:Window.t -> ev:TransitionEvent.t -> any) option [@@js.get "ontransitionstart"]

(**
  Occurs when the volume is changed, or playback is muted or unmuted.
  @param ev The event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/volumechange_event)
*)
val onvolumechange: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "onvolumechange"]

(**
  Occurs when playback stops because the next frame of a video resource is not available.
  @param ev The event.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/waiting_event)
*)
val onwaiting: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "onwaiting"]

(**
  @deprecated This is a legacy alias of `onanimationend`.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/animationend_event)
*)
val onwebkitanimationend: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "onwebkitanimationend"]

(**
  @deprecated This is a legacy alias of `onanimationiteration`.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/animationiteration_event)
*)
val onwebkitanimationiteration: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "onwebkitanimationiteration"]

(**
  @deprecated This is a legacy alias of `onanimationstart`.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/animationstart_event)
*)
val onwebkitanimationstart: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "onwebkitanimationstart"]

(**
  @deprecated This is a legacy alias of `ontransitionend`.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/transitionend_event)
*)
val onwebkittransitionend: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "onwebkittransitionend"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Element/wheel_event) *)
val onwheel: unit -> (this:Window.t -> ev:WheelEvent.t -> any) option [@@js.get "onwheel"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/afterprint_event) *)
val onafterprint: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "onafterprint"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/beforeprint_event) *)
val onbeforeprint: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "onbeforeprint"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/beforeunload_event) *)
val onbeforeunload: unit -> (this:Window.t -> ev:BeforeUnloadEvent.t -> any) option [@@js.get "onbeforeunload"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/gamepadconnected_event) *)
val ongamepadconnected: unit -> (this:Window.t -> ev:GamepadEvent.t -> any) option [@@js.get "ongamepadconnected"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/gamepaddisconnected_event) *)
val ongamepaddisconnected: unit -> (this:Window.t -> ev:GamepadEvent.t -> any) option [@@js.get "ongamepaddisconnected"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/hashchange_event) *)
val onhashchange: unit -> (this:Window.t -> ev:HashChangeEvent.t -> any) option [@@js.get "onhashchange"]

(**
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/languagechange_event)
  
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/languagechange_event)
*)
val onlanguagechange: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "onlanguagechange"]

(**
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/message_event)
  
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/message_event)
*)
val onmessage: unit -> (this:Window.t -> ev:MessageEvent.t_0 -> any) option [@@js.get "onmessage"]

(**
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/messageerror_event)
  
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/messageerror_event)
*)
val onmessageerror: unit -> (this:Window.t -> ev:MessageEvent.t_0 -> any) option [@@js.get "onmessageerror"]

(**
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/offline_event)
  
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/offline_event)
*)
val onoffline: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "onoffline"]

(**
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/online_event)
  
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/online_event)
*)
val ononline: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "ononline"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/pagehide_event) *)
val onpagehide: unit -> (this:Window.t -> ev:PageTransitionEvent.t -> any) option [@@js.get "onpagehide"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/pageshow_event) *)
val onpageshow: unit -> (this:Window.t -> ev:PageTransitionEvent.t -> any) option [@@js.get "onpageshow"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/popstate_event) *)
val onpopstate: unit -> (this:Window.t -> ev:PopStateEvent.t -> any) option [@@js.get "onpopstate"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/rejectionhandled_event) *)
val onrejectionhandled: unit -> (this:Window.t -> ev:PromiseRejectionEvent.t -> any) option [@@js.get "onrejectionhandled"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/storage_event) *)
val onstorage: unit -> (this:Window.t -> ev:StorageEvent.t -> any) option [@@js.get "onstorage"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/unhandledrejection_event) *)
val onunhandledrejection: unit -> (this:Window.t -> ev:PromiseRejectionEvent.t -> any) option [@@js.get "onunhandledrejection"]

(** @deprecated \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/unload_event) *)
val onunload: unit -> (this:Window.t -> ev:Event.t -> any) option [@@js.get "onunload"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/localStorage) *)
val localStorage: unit -> Storage.t [@@js.get "localStorage"]

(**
  Available only in secure contexts.
  
  \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/caches)
*)
val caches: unit -> CacheStorage.t [@@js.get "caches"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/crossOriginIsolated) *)
val crossOriginIsolated: unit -> bool [@@js.get "crossOriginIsolated"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/crypto_property) *)
val crypto: unit -> Crypto.t [@@js.get "crypto"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/indexedDB) *)
val indexedDB: unit -> IDBFactory.t [@@js.get "indexedDB"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/isSecureContext) *)
val isSecureContext: unit -> bool [@@js.get "isSecureContext"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/origin) *)
val origin: unit -> string [@@js.get "origin"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/performance_property) *)
val performance: unit -> Performance.t [@@js.get "performance"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/atob) *)
val atob: string -> string [@@js.global "atob"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/btoa) *)
val btoa: string -> string [@@js.global "btoa"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/clearInterval) *)
val clearInterval: ([`Number of float | `Undefined] [@js.union on_field "dummy"]) Primitive.t -> unit [@@js.global "clearInterval"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/clearTimeout) *)
val clearTimeout: ([`Number of float | `Undefined] [@js.union on_field "dummy"]) Primitive.t -> unit [@@js.global "clearTimeout"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/createImageBitmap) *)
val createImageBitmap: image:ImageBitmapSource.t -> ?options:ImageBitmapOptions.t -> unit -> ImageBitmap.t Promise.t [@@js.global "createImageBitmap"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/createImageBitmap) *)
val createImageBitmap': image:ImageBitmapSource.t -> sx:float -> sy:float -> sw:float -> sh:float -> ?options:ImageBitmapOptions.t -> unit -> ImageBitmap.t Promise.t [@@js.global "createImageBitmap"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/fetch) *)
val fetch: input:(RequestInfo.t, URL.t) union2 -> ?init:RequestInit.t -> unit -> Response.t Promise.t [@@js.global "fetch"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/queueMicrotask) *)
val queueMicrotask: VoidFunction.t -> unit [@@js.global "queueMicrotask"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/reportError) *)
val reportError: any -> unit [@@js.global "reportError"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/setInterval) *)
val setInterval: handler:TimerHandler.t -> ?timeout:float -> arguments:(any list [@js.variadic]) -> unit -> float [@@js.global "setInterval"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/setTimeout) *)
val setTimeout: handler:TimerHandler.t -> ?timeout:float -> arguments:(any list [@js.variadic]) -> unit -> float [@@js.global "setTimeout"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/structuredClone) *)
val structuredClone: value:'T -> ?options:StructuredSerializeOptions.t -> unit -> 'T [@@js.global "structuredClone"]

(** \[MDN Reference\](https://developer.mozilla.org/docs/Web/API/Window/sessionStorage) *)
val sessionStorage: unit -> Storage.t [@@js.get "sessionStorage"]
val addEventListener: type_:'K -> listener:(this:Window.t -> ev:(* FIXME: unknown type 'WindowEventMap[K]' *)any -> any) -> ?options:([`Boolean of bool | `Other of AddEventListenerOptions.t] [@js.union on_field "dummy"]) Primitive.t -> unit -> unit [@@js.global "addEventListener"]
val addEventListener': type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`Boolean of bool | `Other of AddEventListenerOptions.t] [@js.union on_field "dummy"]) Primitive.t -> unit -> unit [@@js.global "addEventListener"]
val removeEventListener: type_:'K -> listener:(this:Window.t -> ev:(* FIXME: unknown type 'WindowEventMap[K]' *)any -> any) -> ?options:([`Boolean of bool | `Other of EventListenerOptions.t] [@js.union on_field "dummy"]) Primitive.t -> unit -> unit [@@js.global "removeEventListener"]
val removeEventListener': type_:string -> listener:EventListenerOrEventListenerObject.t -> ?options:([`Boolean of bool | `Other of EventListenerOptions.t] [@js.union on_field "dummy"]) Primitive.t -> unit -> unit [@@js.global "removeEventListener"]